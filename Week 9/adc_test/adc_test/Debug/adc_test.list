
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009988  08009988  00019988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e38  08009e38  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e40  08009e40  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d4  0800a01c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800a01c  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2e7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000222b  00000000  00000000  0002f52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00031760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a36  00000000  00000000  000324c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229bf  00000000  00000000  00032efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f650  00000000  00000000  000558bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d349b  00000000  00000000  00064f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d1c  00000000  00000000  001383a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  0013d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009970 	.word	0x08009970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009970 	.word	0x08009970

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b598      	push	{r3, r4, r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff4:	f000 fbff 	bl	80017f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f856 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 f94a 	bl	8001294 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001000:	f000 f918 	bl	8001234 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001004:	f000 f8b2 	bl	800116c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001008:	217f      	movs	r1, #127	; 0x7f
 800100a:	4823      	ldr	r0, [pc, #140]	; (8001098 <main+0xa8>)
 800100c:	f001 feca 	bl	8002da4 <HAL_ADCEx_Calibration_Start>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <main+0x2a>
  {
    /* Calibration Error */
    Error_Handler();
 8001016:	f000 f9c5 	bl	80013a4 <Error_Handler>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  /*##-3- Start the conversion process #######################################*/
	  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800101a:	481f      	ldr	r0, [pc, #124]	; (8001098 <main+0xa8>)
 800101c:	f000 ffe2 	bl	8001fe4 <HAL_ADC_Start>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <main+0x3a>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 8001026:	f000 f9bd 	bl	80013a4 <Error_Handler>

	  /*##-4- Wait for the end of conversion #####################################*/
	  /*  For simplicity reasons, this example is just waiting till the end of the
	      conversion, but application may perform other tasks while conversion
	      operation is ongoing. */
	  if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 800102a:	210a      	movs	r1, #10
 800102c:	481a      	ldr	r0, [pc, #104]	; (8001098 <main+0xa8>)
 800102e:	f001 f86f 	bl	8002110 <HAL_ADC_PollForConversion>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <main+0x4e>
	  {
	    /* End Of Conversion flag not set on time */
	    Error_Handler();
 8001038:	f000 f9b4 	bl	80013a4 <Error_Handler>
 800103c:	e7ed      	b.n	800101a <main+0x2a>
	  }
	  else
	  {
	    /* ADC conversion completed */
	    /*##-5- Get the converted value of regular channel  ########################*/
	    uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <main+0xa8>)
 8001040:	f001 f8f5 	bl	800222e <HAL_ADC_GetValue>
 8001044:	4603      	mov	r3, r0
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <main+0xac>)
 8001048:	6013      	str	r3, [r2, #0]
	    HAL_ADC_Stop(&hadc1);
 800104a:	4813      	ldr	r0, [pc, #76]	; (8001098 <main+0xa8>)
 800104c:	f001 f82d 	bl	80020aa <HAL_ADC_Stop>
	    print_flag++;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <main+0xb0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <main+0xb0>)
 8001058:	6013      	str	r3, [r2, #0]

	    if(print_flag == 1000)
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <main+0xb0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001062:	d114      	bne.n	800108e <main+0x9e>
	    {
	    	print_flag = 0;
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <main+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
	    	printf("ADC value is %ld \r\nCurrent room tempareture = %0.1f °C\r\n", uhADCxConvertedValue,getTempratureValue(uhADCxConvertedValue));
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <main+0xac>)
 800106c:	681c      	ldr	r4, [r3, #0]
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <main+0xac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f958 	bl	8001328 <getTempratureValue>
 8001078:	ee10 3a10 	vmov	r3, s0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4621      	mov	r1, r4
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <main+0xb4>)
 800108a:	f004 ffbf 	bl	800600c <iprintf>
	    }
	    HAL_Delay(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f000 fc26 	bl	80018e0 <HAL_Delay>
	  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001094:	e7c1      	b.n	800101a <main+0x2a>
 8001096:	bf00      	nop
 8001098:	200001f0 	.word	0x200001f0
 800109c:	200002d8 	.word	0x200002d8
 80010a0:	200002dc 	.word	0x200002dc
 80010a4:	08009988 	.word	0x08009988

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2244      	movs	r2, #68	; 0x44
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 f81d 	bl	80060f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ce:	f002 f94f 	bl	8003370 <HAL_PWREx_ControlVoltageScaling>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010d8:	f000 f964 	bl	80013a4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010dc:	f002 f92a 	bl	8003334 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemClock_Config+0xc0>)
 80010e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xc0>)
 80010e8:	f023 0318 	bic.w	r3, r3, #24
 80010ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010f0:	2314      	movs	r3, #20
 80010f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001100:	2360      	movs	r3, #96	; 0x60
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001108:	2301      	movs	r3, #1
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800110c:	2301      	movs	r3, #1
 800110e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001110:	2310      	movs	r3, #16
 8001112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001114:	2307      	movs	r3, #7
 8001116:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001118:	2302      	movs	r3, #2
 800111a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4618      	mov	r0, r3
 8001126:	f002 f979 	bl	800341c <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001130:	f000 f938 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001148:	463b      	mov	r3, r7
 800114a:	2101      	movs	r1, #1
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fd79 	bl	8003c44 <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001158:	f000 f924 	bl	80013a4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800115c:	f003 f98c 	bl	8004478 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001160:	bf00      	nop
 8001162:	3758      	adds	r7, #88	; 0x58
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40021000 	.word	0x40021000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <MX_ADC1_Init+0xbc>)
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <MX_ADC1_Init+0xc0>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_ADC1_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_ADC1_Init+0xbc>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_ADC1_Init+0xbc>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_ADC1_Init+0xbc>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_ADC1_Init+0xbc>)
 80011e4:	f000 fdb6 	bl	8001d54 <HAL_ADC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011ee:	f000 f8d9 	bl	80013a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_ADC1_Init+0xc4>)
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f6:	2306      	movs	r3, #6
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fe:	237f      	movs	r3, #127	; 0x7f
 8001200:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001202:	2304      	movs	r3, #4
 8001204:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_ADC1_Init+0xbc>)
 8001210:	f001 f81a 	bl	8002248 <HAL_ADC_ConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800121a:	f000 f8c3 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001f0 	.word	0x200001f0
 800122c:	50040000 	.word	0x50040000
 8001230:	14f00020 	.word	0x14f00020

08001234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART2_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART2_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART2_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART2_UART_Init+0x58>)
 8001278:	f003 fa00 	bl	800467c <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001282:	f000 f88f 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000254 	.word	0x20000254
 8001290:	40004400 	.word	0x40004400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a16      	ldr	r2, [pc, #88]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a10      	ldr	r2, [pc, #64]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_GPIO_Init+0x8c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2108      	movs	r1, #8
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <MX_GPIO_Init+0x90>)
 80012f8:	f002 f804 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80012fc:	2308      	movs	r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_GPIO_Init+0x90>)
 8001314:	f001 fe8c 	bl	8003030 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000
 8001324:	48000400 	.word	0x48000400

08001328 <getTempratureValue>:

/* USER CODE BEGIN 4 */

float getTempratureValue(uint32_t iSensorValue)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	return (((3.3/4096.0) * (float)uhADCxConvertedValue) - 0.5) * 100;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <getTempratureValue+0x70>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133c:	ee17 0a90 	vmov	r0, s15
 8001340:	f7ff f902 	bl	8000548 <__aeabi_f2d>
 8001344:	a312      	add	r3, pc, #72	; (adr r3, 8001390 <getTempratureValue+0x68>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f955 	bl	80005f8 <__aeabi_dmul>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <getTempratureValue+0x74>)
 800135c:	f7fe ff94 	bl	8000288 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4610      	mov	r0, r2
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <getTempratureValue+0x78>)
 800136e:	f7ff f943 	bl	80005f8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fc35 	bl	8000be8 <__aeabi_d2f>
 800137e:	4603      	mov	r3, r0
 8001380:	ee07 3a90 	vmov	s15, r3
}
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	66666666 	.word	0x66666666
 8001394:	3f4a6666 	.word	0x3f4a6666
 8001398:	200002d8 	.word	0x200002d8
 800139c:	3fe00000 	.word	0x3fe00000
 80013a0:	40590000 	.word	0x40590000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09e      	sub	sp, #120	; 0x78
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2254      	movs	r2, #84	; 0x54
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fe6c 	bl	80060f6 <memset>
  if(hadc->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <HAL_ADC_MspInit+0xc0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d143      	bne.n	80014b0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001428:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800142c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800142e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001432:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001434:	2301      	movs	r3, #1
 8001436:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800143c:	2310      	movs	r3, #16
 800143e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001440:	2307      	movs	r3, #7
 8001442:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800144c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f002 fe18 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001462:	f7ff ff9f 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 800146c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_ADC_MspInit+0xc4>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001496:	2301      	movs	r3, #1
 8001498:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800149a:	230b      	movs	r3, #11
 800149c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ac:	f001 fdc0 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3778      	adds	r7, #120	; 0x78
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	50040000 	.word	0x50040000
 80014bc:	40021000 	.word	0x40021000

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09e      	sub	sp, #120	; 0x78
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	2254      	movs	r2, #84	; 0x54
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fe08 	bl	80060f6 <memset>
  if(huart->Instance==USART2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_UART_MspInit+0xcc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d148      	bne.n	8001582 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fdc5 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001508:	f7ff ff4c 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_UART_MspInit+0xd0>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_UART_MspInit+0xd0>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001516:	6593      	str	r3, [r2, #88]	; 0x58
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_UART_MspInit+0xd0>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_UART_MspInit+0xd0>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_UART_MspInit+0xd0>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_UART_MspInit+0xd0>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800153c:	2304      	movs	r3, #4
 800153e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154c:	2307      	movs	r3, #7
 800154e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f001 fd69 	bl	8003030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800155e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001562:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001570:	2303      	movs	r3, #3
 8001572:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001574:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f001 fd57 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3778      	adds	r7, #120	; 0x78
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004400 	.word	0x40004400
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f95e 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	return 1;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <_kill>:

int _kill(int pid, int sig)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001602:	f004 fdcb 	bl	800619c <__errno>
 8001606:	4603      	mov	r3, r0
 8001608:	2216      	movs	r2, #22
 800160a:	601a      	str	r2, [r3, #0]
	return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe7 	bl	80015f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800162a:	e7fe      	b.n	800162a <_exit+0x12>

0800162c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <_read+0x38>)
 8001648:	f003 f8fa 	bl	8004840 <HAL_UART_Receive>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	607b      	str	r3, [r7, #4]

	return len;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000254 	.word	0x20000254

08001668 <_write>:

int _write(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	b29a      	uxth	r2, r3
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <_write+0x40>)
 8001684:	f003 f848 	bl	8004718 <HAL_UART_Transmit>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d002      	beq.n	8001698 <_write+0x30>
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d101      	bne.n	800169c <_write+0x34>
	{
		Error_Handler();
 8001698:	f7ff fe84 	bl	80013a4 <Error_Handler>
	}

	return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000254 	.word	0x20000254

080016ac <_close>:



int _close(int file)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d4:	605a      	str	r2, [r3, #4]
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_isatty>:

int _isatty(int file)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return 1;
 80016ec:	2301      	movs	r3, #1
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
	return 0;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f004 fd2a 	bl	800619c <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20010000 	.word	0x20010000
 8001774:	00000400 	.word	0x00000400
 8001778:	200002e0 	.word	0x200002e0
 800177c:	20000438 	.word	0x20000438

08001780 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a8:	f7ff ffea 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f004 fce9 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d6:	f7ff fc0b 	bl	8000ff0 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e8:	08009e48 	.word	0x08009e48
  ldr r2, =_sbss
 80017ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017f0:	20000434 	.word	0x20000434

080017f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_IRQHandler>

080017f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f001 fbe1 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f80e 	bl	8001828 <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e001      	b.n	800181c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001818:	f7ff fdca 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181c:	79fb      	ldrb	r3, [r7, #7]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_InitTick+0x6c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d023      	beq.n	8001884 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_InitTick+0x70>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_InitTick+0x6c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	fbb3 f3f1 	udiv	r3, r3, r1
 800184e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fbdf 	bl	8003016 <HAL_SYSTICK_Config>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10f      	bne.n	800187e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d809      	bhi.n	8001878 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f001 fbb7 	bl	8002fde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_InitTick+0x74>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e007      	b.n	8001888 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e004      	b.n	8001888 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e001      	b.n	8001888 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008
 80018c4:	200002e4 	.word	0x200002e4

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200002e4 	.word	0x200002e4

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff ffee 	bl	80018c8 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffde 	bl	80018c8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008

08001928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3360      	adds	r3, #96	; 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <LL_ADC_SetOffset+0x44>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	4313      	orrs	r3, r2
 80019c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c8:	bf00      	nop
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	03fff000 	.word	0x03fff000

080019d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3360      	adds	r3, #96	; 0x60
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3330      	adds	r3, #48	; 0x30
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	211f      	movs	r1, #31
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0e9b      	lsrs	r3, r3, #26
 8001a98:	f003 011f 	and.w	r1, r3, #31
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	0e5b      	lsrs	r3, r3, #25
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0d1b      	lsrs	r3, r3, #20
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2107      	movs	r1, #7
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	0d1b      	lsrs	r3, r3, #20
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0318 	and.w	r3, r3, #24
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b34:	40d9      	lsrs	r1, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	400b      	ands	r3, r1
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	0007ffff 	.word	0x0007ffff

08001b58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6093      	str	r3, [r2, #8]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be0:	d101      	bne.n	8001be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c30:	f043 0202 	orr.w	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <LL_ADC_IsEnabled+0x18>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <LL_ADC_IsEnabled+0x1a>
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsDisableOngoing+0x18>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsDisableOngoing+0x1a>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ca0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ccc:	f043 0210 	orr.w	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d1a:	f043 0220 	orr.w	r2, r3, #32
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e12c      	b.n	8001fc8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fb3b 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fef1 	bl	8001b7c <LL_ADC_IsDeepPowerDownEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d004      	beq.n	8001daa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fed7 	bl	8001b58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff0c 	bl	8001bcc <LL_ADC_IsInternalRegulatorEnabled>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fef0 	bl	8001ba4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dc4:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <HAL_ADC_Init+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <HAL_ADC_Init+0x280>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dd8:	e002      	b.n	8001de0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f9      	bne.n	8001dda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff feee 	bl	8001bcc <LL_ADC_IsInternalRegulatorEnabled>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff62 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001e1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 80c5 	bne.w	8001fb6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80c1 	bne.w	8001fb6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e3c:	f043 0202 	orr.w	r2, r3, #2
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fefb 	bl	8001c44 <LL_ADC_IsEnabled>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e54:	4860      	ldr	r0, [pc, #384]	; (8001fd8 <HAL_ADC_Init+0x284>)
 8001e56:	f7ff fef5 	bl	8001c44 <LL_ADC_IsEnabled>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4619      	mov	r1, r3
 8001e66:	485d      	ldr	r0, [pc, #372]	; (8001fdc <HAL_ADC_Init+0x288>)
 8001e68:	f7ff fd5e 	bl	8001928 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e5b      	ldrb	r3, [r3, #25]
 8001e70:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e76:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e7c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e82:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d106      	bne.n	8001ea8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	045b      	lsls	r3, r3, #17
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b45      	ldr	r3, [pc, #276]	; (8001fe0 <HAL_ADC_Init+0x28c>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	69b9      	ldr	r1, [r7, #24]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff feff 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001ee2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff20 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 8001eee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d13d      	bne.n	8001f72 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d13a      	bne.n	8001f72 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f00:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f08:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f18:	f023 0302 	bic.w	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d118      	bne.n	8001f62 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f4c:	4311      	orrs	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f52:	430a      	orrs	r2, r1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	e007      	b.n	8001f72 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d10c      	bne.n	8001f94 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f023 010f 	bic.w	r1, r3, #15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
 8001f92:	e007      	b.n	8001fa4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020f 	bic.w	r2, r2, #15
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f023 0303 	bic.w	r3, r3, #3
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
 8001fb4:	e007      	b.n	8001fc6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3720      	adds	r7, #32
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	053e2d63 	.word	0x053e2d63
 8001fd8:	50040000 	.word	0x50040000
 8001fdc:	50040300 	.word	0x50040300
 8001fe0:	fff0c007 	.word	0xfff0c007

08001fe4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fe75 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d14f      	bne.n	800209c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start+0x26>
 8002006:	2302      	movs	r3, #2
 8002008:	e04b      	b.n	80020a2 <HAL_ADC_Start+0xbe>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fdb4 	bl	8002b80 <ADC_Enable>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d137      	bne.n	8002092 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002026:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800202a:	f023 0301 	bic.w	r3, r3, #1
 800202e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	d106      	bne.n	8002052 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f023 0206 	bic.w	r2, r3, #6
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	659a      	str	r2, [r3, #88]	; 0x58
 8002050:	e002      	b.n	8002058 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	221c      	movs	r2, #28
 800205e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d007      	beq.n	8002086 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800207e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe00 	bl	8001c90 <LL_ADC_REG_StartConversion>
 8002090:	e006      	b.n	80020a0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800209a:	e001      	b.n	80020a0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800209c:	2302      	movs	r3, #2
 800209e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_Stop+0x16>
 80020bc:	2302      	movs	r3, #2
 80020be:	e023      	b.n	8002108 <HAL_ADC_Stop+0x5e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80020c8:	2103      	movs	r1, #3
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fc9c 	bl	8002a08 <ADC_ConversionStop>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d111      	bne.n	80020fe <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fdd6 	bl	8002c8c <ADC_Disable>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	2b08      	cmp	r3, #8
 8002120:	d102      	bne.n	8002128 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002122:	2308      	movs	r3, #8
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e010      	b.n	800214a <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d007      	beq.n	8002146 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213a:	f043 0220 	orr.w	r2, r3, #32
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06f      	b.n	8002226 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002146:	2304      	movs	r3, #4
 8002148:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800214a:	f7ff fbbd 	bl	80018c8 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002150:	e021      	b.n	8002196 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d01d      	beq.n	8002196 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800215a:	f7ff fbb5 	bl	80018c8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <HAL_ADC_PollForConversion+0x60>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d112      	bne.n	8002196 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10b      	bne.n	8002196 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f043 0204 	orr.w	r2, r3, #4
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e047      	b.n	8002226 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0d6      	beq.n	8002152 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fc40 	bl	8001a3a <LL_ADC_REG_IsTriggerSourceSWStart>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01c      	beq.n	80021fa <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7e5b      	ldrb	r3, [r3, #25]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d118      	bne.n	80021fa <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d104      	bne.n	8002212 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2208      	movs	r2, #8
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e008      	b.n	8002224 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d103      	bne.n	8002224 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	220c      	movs	r2, #12
 8002222:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0b6      	sub	sp, #216	; 0xd8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x22>
 8002266:	2302      	movs	r3, #2
 8002268:	e3b9      	b.n	80029de <HAL_ADC_ConfigChannel+0x796>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fd32 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 839e 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d824      	bhi.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	3b02      	subs	r3, #2
 8002292:	2b03      	cmp	r3, #3
 8002294:	d81b      	bhi.n	80022ce <HAL_ADC_ConfigChannel+0x86>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <HAL_ADC_ConfigChannel+0x54>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022ad 	.word	0x080022ad
 80022a0:	080022b5 	.word	0x080022b5
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022c5 	.word	0x080022c5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	220c      	movs	r2, #12
 80022b0:	605a      	str	r2, [r3, #4]
          break;
 80022b2:	e010      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2212      	movs	r2, #18
 80022b8:	605a      	str	r2, [r3, #4]
          break;
 80022ba:	e00c      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2218      	movs	r2, #24
 80022c0:	605a      	str	r2, [r3, #4]
          break;
 80022c2:	e008      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ca:	605a      	str	r2, [r3, #4]
          break;
 80022cc:	e003      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2206      	movs	r2, #6
 80022d2:	605a      	str	r2, [r3, #4]
          break;
 80022d4:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6859      	ldr	r1, [r3, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7ff fbbc 	bl	8001a60 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fcf7 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 80022f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fd17 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 8002300:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002304:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 81a6 	bne.w	800265a <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800230e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 81a1 	bne.w	800265a <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	461a      	mov	r2, r3
 8002326:	f7ff fbc7 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	08db      	lsrs	r3, r3, #3
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d00a      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	6919      	ldr	r1, [r3, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235c:	f7ff fb18 	bl	8001990 <LL_ADC_SetOffset>
 8002360:	e17b      	b.n	800265a <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fb35 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800236e:	4603      	mov	r3, r0
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_ADC_ConfigChannel+0x146>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fb2a 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	0e9b      	lsrs	r3, r3, #26
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	e01e      	b.n	80023cc <HAL_ADC_ConfigChannel+0x184>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fb1f 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e004      	b.n	80023ca <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 80023c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x19c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	e018      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1ce>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002400:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002408:	2320      	movs	r3, #32
 800240a:	e004      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 800240c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002416:	429a      	cmp	r2, r3
 8002418:	d106      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faee 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2101      	movs	r1, #1
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fad2 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x20c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2101      	movs	r1, #1
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fac7 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 800244a:	4603      	mov	r3, r0
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	e01e      	b.n	8002492 <HAL_ADC_ConfigChannel+0x24a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fabc 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002460:	4603      	mov	r3, r0
 8002462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800247a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e004      	b.n	8002490 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x262>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	e018      	b.n	80024dc <HAL_ADC_ConfigChannel+0x294>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e004      	b.n	80024dc <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 80024d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024dc:	429a      	cmp	r2, r3
 80024de:	d106      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa8b 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fa6f 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <HAL_ADC_ConfigChannel+0x2d2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fa64 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002510:	4603      	mov	r3, r0
 8002512:	0e9b      	lsrs	r3, r3, #26
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	e01e      	b.n	8002558 <HAL_ADC_ConfigChannel+0x310>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2102      	movs	r1, #2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fa59 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 8002526:	4603      	mov	r3, r0
 8002528:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800253c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e004      	b.n	8002556 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800254c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002550:	fab3 f383 	clz	r3, r3
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x328>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	e016      	b.n	800259e <HAL_ADC_ConfigChannel+0x356>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e004      	b.n	800259e <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800259e:	429a      	cmp	r2, r3
 80025a0:	d106      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	2102      	movs	r1, #2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fa2a 	bl	8001a04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2103      	movs	r1, #3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fa0e 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x394>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2103      	movs	r1, #3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fa03 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 021f 	and.w	r2, r3, #31
 80025da:	e017      	b.n	800260c <HAL_ADC_ConfigChannel+0x3c4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2103      	movs	r1, #3
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f9f8 	bl	80019d8 <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80025fe:	2320      	movs	r3, #32
 8002600:	e003      	b.n	800260a <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8002602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x3dc>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	e011      	b.n	8002648 <HAL_ADC_ConfigChannel+0x400>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002634:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8002640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002648:	429a      	cmp	r2, r3
 800264a:	d106      	bne.n	800265a <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	2103      	movs	r1, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f9d5 	bl	8001a04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff faf0 	bl	8001c44 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	f040 8140 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	461a      	mov	r2, r3
 800267a:	f7ff fa49 	bl	8001b10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a8f      	ldr	r2, [pc, #572]	; (80028c0 <HAL_ADC_ConfigChannel+0x678>)
 8002684:	4293      	cmp	r3, r2
 8002686:	f040 8131 	bne.w	80028ec <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x46a>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	bf94      	ite	ls
 80026aa:	2301      	movls	r3, #1
 80026ac:	2300      	movhi	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e019      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x49e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e003      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 80026ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	2b09      	cmp	r3, #9
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d079      	beq.n	80027de <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x4be>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	3301      	adds	r3, #1
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002704:	e015      	b.n	8002732 <HAL_ADC_ConfigChannel+0x4ea>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800271e:	2320      	movs	r3, #32
 8002720:	e003      	b.n	800272a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	3301      	adds	r3, #1
 800272c:	069b      	lsls	r3, r3, #26
 800272e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x50a>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2101      	movs	r1, #1
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	e017      	b.n	8002782 <HAL_ADC_ConfigChannel+0x53a>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800276a:	2320      	movs	r3, #32
 800276c:	e003      	b.n	8002776 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 800276e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	ea42 0103 	orr.w	r1, r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x560>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	0e9b      	lsrs	r3, r3, #26
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	051b      	lsls	r3, r3, #20
 80027a6:	e018      	b.n	80027da <HAL_ADC_ConfigChannel+0x592>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80027c0:	2320      	movs	r3, #32
 80027c2:	e003      	b.n	80027cc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80027c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027da:	430b      	orrs	r3, r1
 80027dc:	e081      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x5b2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	069b      	lsls	r3, r3, #26
 80027f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f8:	e015      	b.n	8002826 <HAL_ADC_ConfigChannel+0x5de>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x5fe>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	e017      	b.n	8002876 <HAL_ADC_ConfigChannel+0x62e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
  return result;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	ea42 0103 	orr.w	r1, r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x65a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	3b1e      	subs	r3, #30
 800289a:	051b      	lsls	r3, r3, #20
 800289c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x698>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	613b      	str	r3, [r7, #16]
  return result;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d104      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e006      	b.n	80028cc <HAL_ADC_ConfigChannel+0x684>
 80028be:	bf00      	nop
 80028c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	3b1e      	subs	r3, #30
 80028da:	051b      	lsls	r3, r3, #20
 80028dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e0:	430b      	orrs	r3, r1
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7ff f8e6 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_ADC_ConfigChannel+0x7a0>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d06c      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	483c      	ldr	r0, [pc, #240]	; (80029ec <HAL_ADC_ConfigChannel+0x7a4>)
 80028fa:	f7ff f83b 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 80028fe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a3a      	ldr	r2, [pc, #232]	; (80029f0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d127      	bne.n	800295c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800290c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d121      	bne.n	800295c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a35      	ldr	r2, [pc, #212]	; (80029f4 <HAL_ADC_ConfigChannel+0x7ac>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d157      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002926:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800292a:	4619      	mov	r1, r3
 800292c:	482f      	ldr	r0, [pc, #188]	; (80029ec <HAL_ADC_ConfigChannel+0x7a4>)
 800292e:	f7ff f80e 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	4a30      	ldr	r2, [pc, #192]	; (80029fc <HAL_ADC_ConfigChannel+0x7b4>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800294c:	e002      	b.n	8002954 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295a:	e03a      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_ADC_ConfigChannel+0x7b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d113      	bne.n	800298e <HAL_ADC_ConfigChannel+0x746>
 8002966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d12a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002980:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002984:	4619      	mov	r1, r3
 8002986:	4819      	ldr	r0, [pc, #100]	; (80029ec <HAL_ADC_ConfigChannel+0x7a4>)
 8002988:	f7fe ffe1 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800298c:	e021      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_ADC_ConfigChannel+0x7bc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d11c      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a12      	ldr	r2, [pc, #72]	; (80029f4 <HAL_ADC_ConfigChannel+0x7ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029b6:	4619      	mov	r1, r3
 80029b8:	480c      	ldr	r0, [pc, #48]	; (80029ec <HAL_ADC_ConfigChannel+0x7a4>)
 80029ba:	f7fe ffc8 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
 80029be:	e008      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f043 0220 	orr.w	r2, r3, #32
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	37d8      	adds	r7, #216	; 0xd8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	80080000 	.word	0x80080000
 80029ec:	50040300 	.word	0x50040300
 80029f0:	c7520000 	.word	0xc7520000
 80029f4:	50040000 	.word	0x50040000
 80029f8:	20000000 	.word	0x20000000
 80029fc:	053e2d63 	.word	0x053e2d63
 8002a00:	cb840000 	.word	0xcb840000
 8002a04:	80000001 	.word	0x80000001

08002a08 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f95e 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8002a24:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f97f 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 8002a30:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d103      	bne.n	8002a40 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8098 	beq.w	8002b70 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02a      	beq.n	8002aa4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7e5b      	ldrb	r3, [r3, #25]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d126      	bne.n	8002aa4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7e1b      	ldrb	r3, [r3, #24]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d122      	bne.n	8002aa4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a62:	e014      	b.n	8002a8e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4a45      	ldr	r2, [pc, #276]	; (8002b7c <ADC_ConversionStop+0x174>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d90d      	bls.n	8002a88 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e074      	b.n	8002b72 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b40      	cmp	r3, #64	; 0x40
 8002a9a:	d1e3      	bne.n	8002a64 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d014      	beq.n	8002ad4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f916 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff f8d3 	bl	8001c6a <LL_ADC_IsDisableOngoing>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f8f2 	bl	8001cb8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d014      	beq.n	8002b04 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f925 	bl	8001d2e <LL_ADC_INJ_IsConversionOngoing>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00c      	beq.n	8002b04 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8bb 	bl	8001c6a <LL_ADC_IsDisableOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f901 	bl	8001d06 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d005      	beq.n	8002b16 <ADC_ConversionStop+0x10e>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d105      	bne.n	8002b1c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b10:	230c      	movs	r3, #12
 8002b12:	617b      	str	r3, [r7, #20]
        break;
 8002b14:	e005      	b.n	8002b22 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b16:	2308      	movs	r3, #8
 8002b18:	617b      	str	r3, [r7, #20]
        break;
 8002b1a:	e002      	b.n	8002b22 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
        break;
 8002b20:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fed1 	bl	80018c8 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b28:	e01b      	b.n	8002b62 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b2a:	f7fe fecd 	bl	80018c8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d914      	bls.n	8002b62 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00d      	beq.n	8002b62 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	f043 0201 	orr.w	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1dc      	bne.n	8002b2a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	a33fffff 	.word	0xa33fffff

08002b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f857 	bl	8001c44 <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d169      	bne.n	8002c70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <ADC_Enable+0xfc>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00d      	beq.n	8002bc6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e055      	b.n	8002c72 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f812 	bl	8001bf4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bd0:	482b      	ldr	r0, [pc, #172]	; (8002c80 <ADC_Enable+0x100>)
 8002bd2:	f7fe fecf 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <ADC_Enable+0x104>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <ADC_Enable+0x108>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002bfa:	e002      	b.n	8002c02 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f9      	bne.n	8002bfc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fe5e 	bl	80018c8 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0e:	e028      	b.n	8002c62 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f815 	bl	8001c44 <LL_ADC_IsEnabled>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ffe5 	bl	8001bf4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c2a:	f7fe fe4d 	bl	80018c8 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d914      	bls.n	8002c62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d00d      	beq.n	8002c62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e007      	b.n	8002c72 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1cf      	bne.n	8002c10 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	8000003f 	.word	0x8000003f
 8002c80:	50040300 	.word	0x50040300
 8002c84:	20000000 	.word	0x20000000
 8002c88:	053e2d63 	.word	0x053e2d63

08002c8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe ffe6 	bl	8001c6a <LL_ADC_IsDisableOngoing>
 8002c9e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ffcd 	bl	8001c44 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d047      	beq.n	8002d40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d144      	bne.n	8002d40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030d 	and.w	r3, r3, #13
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10c      	bne.n	8002cde <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe ffa7 	bl	8001c1c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fdf7 	bl	80018c8 <HAL_GetTick>
 8002cda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cdc:	e029      	b.n	8002d32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e023      	b.n	8002d42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cfa:	f7fe fde5 	bl	80018c8 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d914      	bls.n	8002d32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0210 	orr.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1dc      	bne.n	8002cfa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <LL_ADC_StartCalibration>:
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
 8002d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_IsCalibrationOnGoing>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e04d      	b.n	8002e5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff5f 	bl	8002c8c <ADC_Disable>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d136      	bne.n	8002e46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de0:	f023 0302 	bic.w	r3, r3, #2
 8002de4:	f043 0202 	orr.w	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ffa9 	bl	8002d4a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002df8:	e014      	b.n	8002e24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002e06:	d30d      	bcc.n	8002e24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	f023 0312 	bic.w	r3, r3, #18
 8002e10:	f043 0210 	orr.w	r2, r3, #16
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01b      	b.n	8002e5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ffa7 	bl	8002d7c <LL_ADC_IsCalibrationOnGoing>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e2      	bne.n	8002dfa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f023 0303 	bic.w	r3, r3, #3
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
 8002e44:	e005      	b.n	8002e52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff47 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff5c 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffb0 	bl	8002f84 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e148      	b.n	80032d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2101      	movs	r1, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa01 f303 	lsl.w	r3, r1, r3
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 813a 	beq.w	80032cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b01      	cmp	r3, #1
 8003062:	d005      	beq.n	8003070 <HAL_GPIO_Init+0x40>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d130      	bne.n	80030d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a6:	2201      	movs	r2, #1
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0201 	and.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d017      	beq.n	800310e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	2203      	movs	r2, #3
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d123      	bne.n	8003162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	220f      	movs	r2, #15
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	6939      	ldr	r1, [r7, #16]
 800315e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8094 	beq.w	80032cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_GPIO_Init+0x2c0>)
 80031a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a8:	4a51      	ldr	r2, [pc, #324]	; (80032f0 <HAL_GPIO_Init+0x2c0>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6613      	str	r3, [r2, #96]	; 0x60
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <HAL_GPIO_Init+0x2c0>)
 80031b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031bc:	4a4d      	ldr	r2, [pc, #308]	; (80032f4 <HAL_GPIO_Init+0x2c4>)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	220f      	movs	r2, #15
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031e6:	d00d      	beq.n	8003204 <HAL_GPIO_Init+0x1d4>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_GPIO_Init+0x2c8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <HAL_GPIO_Init+0x1d0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a42      	ldr	r2, [pc, #264]	; (80032fc <HAL_GPIO_Init+0x2cc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <HAL_GPIO_Init+0x1cc>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e004      	b.n	8003206 <HAL_GPIO_Init+0x1d6>
 80031fc:	2307      	movs	r3, #7
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_Init+0x1d6>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_GPIO_Init+0x1d6>
 8003204:	2300      	movs	r3, #0
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003216:	4937      	ldr	r1, [pc, #220]	; (80032f4 <HAL_GPIO_Init+0x2c4>)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003248:	4a2d      	ldr	r2, [pc, #180]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800324e:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	43db      	mvns	r3, r3
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	4013      	ands	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f47f aeaf 	bne.w	8003040 <HAL_GPIO_Init+0x10>
  }
}
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010000 	.word	0x40010000
 80032f8:	48000400 	.word	0x48000400
 80032fc:	48000800 	.word	0x48000800
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003320:	e002      	b.n	8003328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40007000 	.word	0x40007000

08003354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_PWREx_GetVoltageRange+0x18>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40007000 	.word	0x40007000

08003370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337e:	d130      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003380:	4b23      	ldr	r3, [pc, #140]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d038      	beq.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800339c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800339e:	4b1d      	ldr	r3, [pc, #116]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2232      	movs	r2, #50	; 0x32
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b4:	e002      	b.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c8:	d102      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f2      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033dc:	d110      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e00f      	b.n	8003402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d007      	beq.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f8:	4a05      	ldr	r2, [pc, #20]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000
 8003414:	20000000 	.word	0x20000000
 8003418:	431bde83 	.word	0x431bde83

0800341c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f000 bc02 	b.w	8003c34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003430:	4b96      	ldr	r3, [pc, #600]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343a:	4b94      	ldr	r3, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	f000 80e4 	beq.w	800361a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <HAL_RCC_OscConfig+0x4c>
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b0c      	cmp	r3, #12
 800345c:	f040 808b 	bne.w	8003576 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b01      	cmp	r3, #1
 8003464:	f040 8087 	bne.w	8003576 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003468:	4b88      	ldr	r3, [pc, #544]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x64>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e3d9      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1a      	ldr	r2, [r3, #32]
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_RCC_OscConfig+0x7e>
 8003490:	4b7e      	ldr	r3, [pc, #504]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003498:	e005      	b.n	80034a6 <HAL_RCC_OscConfig+0x8a>
 800349a:	4b7c      	ldr	r3, [pc, #496]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800349c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d223      	bcs.n	80034f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fd8c 	bl	8003fcc <RCC_SetFlashLatencyFromMSIRange>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e3ba      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a72      	ldr	r2, [pc, #456]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	496d      	ldr	r1, [pc, #436]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034dc:	4b6b      	ldr	r3, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	4968      	ldr	r1, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
 80034f0:	e025      	b.n	800353e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a65      	ldr	r2, [pc, #404]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80034f8:	f043 0308 	orr.w	r3, r3, #8
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	4960      	ldr	r1, [pc, #384]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	495b      	ldr	r1, [pc, #364]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d109      	bne.n	800353e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fd4c 	bl	8003fcc <RCC_SetFlashLatencyFromMSIRange>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e37a      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800353e:	f000 fc81 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b51      	ldr	r3, [pc, #324]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	4950      	ldr	r1, [pc, #320]	; (8003690 <HAL_RCC_OscConfig+0x274>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_RCC_OscConfig+0x278>)
 800355c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800355e:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <HAL_RCC_OscConfig+0x27c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe f960 	bl	8001828 <HAL_InitTick>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d052      	beq.n	8003618 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	e35e      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d032      	beq.n	80035e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a42      	ldr	r2, [pc, #264]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800358a:	f7fe f99d 	bl	80018c8 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003592:	f7fe f999 	bl	80018c8 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e347      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035a4:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b0:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a35      	ldr	r2, [pc, #212]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4930      	ldr	r1, [pc, #192]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035ce:	4b2f      	ldr	r3, [pc, #188]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	492b      	ldr	r1, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 80035e2:	e01a      	b.n	800361a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a28      	ldr	r2, [pc, #160]	; (800368c <HAL_RCC_OscConfig+0x270>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035f0:	f7fe f96a 	bl	80018c8 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035f8:	f7fe f966 	bl	80018c8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e314      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x1dc>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d073      	beq.n	800370e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x21c>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d10e      	bne.n	8003650 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10b      	bne.n	8003650 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d063      	beq.n	800370c <HAL_RCC_OscConfig+0x2f0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d15f      	bne.n	800370c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e2f1      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d106      	bne.n	8003668 <HAL_RCC_OscConfig+0x24c>
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a0b      	ldr	r2, [pc, #44]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e025      	b.n	80036b4 <HAL_RCC_OscConfig+0x298>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003670:	d114      	bne.n	800369c <HAL_RCC_OscConfig+0x280>
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a02      	ldr	r2, [pc, #8]	; (800368c <HAL_RCC_OscConfig+0x270>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e013      	b.n	80036b4 <HAL_RCC_OscConfig+0x298>
 800368c:	40021000 	.word	0x40021000
 8003690:	080099c4 	.word	0x080099c4
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004
 800369c:	4ba0      	ldr	r3, [pc, #640]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a9f      	ldr	r2, [pc, #636]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b9d      	ldr	r3, [pc, #628]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a9c      	ldr	r2, [pc, #624]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f904 	bl	80018c8 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe f900 	bl	80018c8 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e2ae      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d6:	4b92      	ldr	r3, [pc, #584]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x2a8>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe f8f0 	bl	80018c8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe f8ec 	bl	80018c8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e29a      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x2d0>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d060      	beq.n	80037dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x310>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d119      	bne.n	800375a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d116      	bne.n	800375a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_OscConfig+0x328>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e277      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003744:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	4973      	ldr	r1, [pc, #460]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003758:	e040      	b.n	80037dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d023      	beq.n	80037aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003762:	4b6f      	ldr	r3, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6e      	ldr	r2, [pc, #440]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe f8ab 	bl	80018c8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003776:	f7fe f8a7 	bl	80018c8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e255      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003788:	4b65      	ldr	r3, [pc, #404]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003794:	4b62      	ldr	r3, [pc, #392]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	495f      	ldr	r1, [pc, #380]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
 80037a8:	e018      	b.n	80037dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fe f887 	bl	80018c8 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fe f883 	bl	80018c8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e231      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d0:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03c      	beq.n	8003862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01c      	beq.n	800382a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f6:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003800:	f7fe f862 	bl	80018c8 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003808:	f7fe f85e 	bl	80018c8 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e20c      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ef      	beq.n	8003808 <HAL_RCC_OscConfig+0x3ec>
 8003828:	e01b      	b.n	8003862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe f845 	bl	80018c8 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe f841 	bl	80018c8 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1ef      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1ef      	bne.n	8003842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80a6 	beq.w	80039bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003874:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003884:	4a26      	ldr	r2, [pc, #152]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003898:	2301      	movs	r3, #1
 800389a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d118      	bne.n	80038da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b4:	f7fe f808 	bl	80018c8 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038bc:	f7fe f804 	bl	80018c8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1b2      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_RCC_OscConfig+0x508>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d108      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4d8>
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a0d      	ldr	r2, [pc, #52]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f2:	e029      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d115      	bne.n	8003928 <HAL_RCC_OscConfig+0x50c>
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a03      	ldr	r2, [pc, #12]	; (8003920 <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800391c:	e014      	b.n	8003948 <HAL_RCC_OscConfig+0x52c>
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
 8003928:	4b9a      	ldr	r3, [pc, #616]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a99      	ldr	r2, [pc, #612]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003938:	4b96      	ldr	r3, [pc, #600]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a95      	ldr	r2, [pc, #596]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd ffba 	bl	80018c8 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd ffb6 	bl	80018c8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e162      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	4b89      	ldr	r3, [pc, #548]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ed      	beq.n	8003958 <HAL_RCC_OscConfig+0x53c>
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd ffa3 	bl	80018c8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd ff9f 	bl	80018c8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e14b      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	4b7d      	ldr	r3, [pc, #500]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ed      	bne.n	8003986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b78      	ldr	r3, [pc, #480]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a77      	ldr	r2, [pc, #476]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d0:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 80039d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd ff72 	bl	80018c8 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e8:	f7fd ff6e 	bl	80018c8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e11c      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fa:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <HAL_RCC_OscConfig+0x5cc>
 8003a08:	e01b      	b.n	8003a42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a0a:	4b62      	ldr	r3, [pc, #392]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a10:	4a60      	ldr	r2, [pc, #384]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fd ff55 	bl	80018c8 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a22:	f7fd ff51 	bl	80018c8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0ff      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a34:	4b57      	ldr	r3, [pc, #348]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ef      	bne.n	8003a22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80f3 	beq.w	8003c32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	f040 80c9 	bne.w	8003be8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a56:	4b4f      	ldr	r3, [pc, #316]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0203 	and.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d12c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	3b01      	subs	r3, #1
 8003a76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d123      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d113      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d06b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d062      	beq.n	8003b90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0ac      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2d      	ldr	r2, [pc, #180]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ae6:	f7fd feef 	bl	80018c8 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aee:	f7fd feeb 	bl	80018c8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e099      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1f0      	bne.n	8003aee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b0c:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <HAL_RCC_OscConfig+0x77c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b26:	0212      	lsls	r2, r2, #8
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0552      	lsls	r2, r2, #21
 8003b34:	4311      	orrs	r1, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b3a:	0852      	lsrs	r2, r2, #1
 8003b3c:	3a01      	subs	r2, #1
 8003b3e:	0652      	lsls	r2, r2, #25
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b46:	06d2      	lsls	r2, r2, #27
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	4912      	ldr	r1, [pc, #72]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b50:	4b10      	ldr	r3, [pc, #64]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b68:	f7fd feae 	bl	80018c8 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd feaa 	bl	80018c8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e058      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b82:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_RCC_OscConfig+0x778>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b8e:	e050      	b.n	8003c32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e04f      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d144      	bne.n	8003c32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ba8:	4b24      	ldr	r3, [pc, #144]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a23      	ldr	r2, [pc, #140]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4a20      	ldr	r2, [pc, #128]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bc0:	f7fd fe82 	bl	80018c8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd fe7e 	bl	80018c8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e02c      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x7ac>
 8003be6:	e024      	b.n	8003c32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d01f      	beq.n	8003c2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fd fe65 	bl	80018c8 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c00:	e008      	b.n	8003c14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c02:	f7fd fe61 	bl	80018c8 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e00f      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f0      	bne.n	8003c02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4905      	ldr	r1, [pc, #20]	; (8003c3c <HAL_RCC_OscConfig+0x820>)
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_OscConfig+0x824>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e001      	b.n	8003c32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	feeefffc 	.word	0xfeeefffc

08003c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0e7      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b75      	ldr	r3, [pc, #468]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b72      	ldr	r3, [pc, #456]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4970      	ldr	r1, [pc, #448]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b6e      	ldr	r3, [pc, #440]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0cf      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	4b66      	ldr	r3, [pc, #408]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d908      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	4960      	ldr	r1, [pc, #384]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d04c      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cca:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d121      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0a6      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d107      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce2:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d115      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e09a      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e08e      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e086      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d1a:	4b46      	ldr	r3, [pc, #280]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4943      	ldr	r1, [pc, #268]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd fdcc 	bl	80018c8 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d34:	f7fd fdc8 	bl	80018c8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e06e      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	4b3a      	ldr	r3, [pc, #232]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 020c 	and.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d1eb      	bne.n	8003d34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d208      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d78:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	492b      	ldr	r1, [pc, #172]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d210      	bcs.n	8003dba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 0207 	bic.w	r2, r3, #7
 8003da0:	4923      	ldr	r1, [pc, #140]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_ClockConfig+0x1ec>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e036      	b.n	8003e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc6:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4918      	ldr	r1, [pc, #96]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4910      	ldr	r1, [pc, #64]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df8:	f000 f824 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	490b      	ldr	r1, [pc, #44]	; (8003e38 <HAL_RCC_ClockConfig+0x1f4>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
 8003e14:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1f8>)
 8003e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1fc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd fd03 	bl	8001828 <HAL_InitTick>
 8003e22:	4603      	mov	r3, r0
 8003e24:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e26:	7afb      	ldrb	r3, [r7, #11]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40022000 	.word	0x40022000
 8003e34:	40021000 	.word	0x40021000
 8003e38:	080099c4 	.word	0x080099c4
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000004 	.word	0x20000004

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	; 0x24
 8003e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e52:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e5c:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d121      	bne.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d11e      	bne.n	8003eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e84:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	e005      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e94:	4b2d      	ldr	r3, [pc, #180]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ea0:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d102      	bne.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e004      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d134      	bne.n	8003f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ed2:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0xa6>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d003      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ee8:	e005      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eec:	617b      	str	r3, [r7, #20]
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ef2:	617b      	str	r3, [r7, #20]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	617b      	str	r3, [r7, #20]
      break;
 8003efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003efc:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	091b      	lsrs	r3, r3, #4
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	3301      	adds	r3, #1
 8003f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	fb03 f202 	mul.w	r2, r3, r2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	0e5b      	lsrs	r3, r3, #25
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3724      	adds	r7, #36	; 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	080099dc 	.word	0x080099dc
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	007a1200 	.word	0x007a1200

08003f5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f78:	f7ff fff0 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	4904      	ldr	r1, [pc, #16]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	080099d4 	.word	0x080099d4

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fa4:	f7ff ffda 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0adb      	lsrs	r3, r3, #11
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	080099d4 	.word	0x080099d4

08003fcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fd8:	4b2a      	ldr	r3, [pc, #168]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fe4:	f7ff f9b6 	bl	8003354 <HAL_PWREx_GetVoltageRange>
 8003fe8:	6178      	str	r0, [r7, #20]
 8003fea:	e014      	b.n	8004016 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fec:	4b25      	ldr	r3, [pc, #148]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	4a24      	ldr	r2, [pc, #144]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff8:	4b22      	ldr	r3, [pc, #136]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004004:	f7ff f9a6 	bl	8003354 <HAL_PWREx_GetVoltageRange>
 8004008:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004014:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401c:	d10b      	bne.n	8004036 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d919      	bls.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2ba0      	cmp	r3, #160	; 0xa0
 8004028:	d902      	bls.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800402a:	2302      	movs	r3, #2
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e013      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004030:	2301      	movs	r3, #1
 8004032:	613b      	str	r3, [r7, #16]
 8004034:	e010      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d902      	bls.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800403c:	2303      	movs	r3, #3
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	e00a      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b80      	cmp	r3, #128	; 0x80
 8004046:	d102      	bne.n	800404e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004048:	2302      	movs	r3, #2
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e004      	b.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b70      	cmp	r3, #112	; 0x70
 8004052:	d101      	bne.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004054:	2301      	movs	r3, #1
 8004056:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f023 0207 	bic.w	r2, r3, #7
 8004060:	4909      	ldr	r1, [pc, #36]	; (8004088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	d001      	beq.n	800407a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	40022000 	.word	0x40022000

0800408c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004094:	2300      	movs	r3, #0
 8004096:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004098:	2300      	movs	r3, #0
 800409a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b0:	d01a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80040b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b6:	d814      	bhi.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c0:	d10f      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4a5c      	ldr	r2, [pc, #368]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ce:	e00c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f9de 	bl	8004498 <RCCEx_PLLSAI1_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	74fb      	strb	r3, [r7, #19]
      break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ea:	7cfb      	ldrb	r3, [r7, #19]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f0:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	494e      	ldr	r1, [pc, #312]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004106:	e001      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 809e 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800411e:	4b46      	ldr	r3, [pc, #280]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00d      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b40      	ldr	r3, [pc, #256]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004138:	4a3f      	ldr	r2, [pc, #252]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	6593      	str	r3, [r2, #88]	; 0x58
 8004140:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004150:	4b3a      	ldr	r3, [pc, #232]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a39      	ldr	r2, [pc, #228]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800415c:	f7fd fbb4 	bl	80018c8 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004162:	e009      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004164:	f7fd fbb0 	bl	80018c8 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d902      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	74fb      	strb	r3, [r7, #19]
        break;
 8004176:	e005      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ef      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d15a      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004194:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01e      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d019      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a6:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b2:	4b21      	ldr	r3, [pc, #132]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d2:	4a19      	ldr	r2, [pc, #100]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd fb70 	bl	80018c8 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ea:	e00b      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fb6c 	bl	80018c8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d902      	bls.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	74fb      	strb	r3, [r7, #19]
            break;
 8004202:	e006      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ec      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004226:	4904      	ldr	r1, [pc, #16]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004244:	7c7b      	ldrb	r3, [r7, #17]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b8a      	ldr	r3, [pc, #552]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	4a89      	ldr	r2, [pc, #548]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004262:	4b84      	ldr	r3, [pc, #528]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4980      	ldr	r1, [pc, #512]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004284:	4b7b      	ldr	r3, [pc, #492]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 020c 	bic.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	4978      	ldr	r1, [pc, #480]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042a6:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	496f      	ldr	r1, [pc, #444]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042c8:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4967      	ldr	r1, [pc, #412]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ea:	4b62      	ldr	r3, [pc, #392]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	495e      	ldr	r1, [pc, #376]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800430c:	4b59      	ldr	r3, [pc, #356]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	4956      	ldr	r1, [pc, #344]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	494d      	ldr	r1, [pc, #308]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d028      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004350:	4b48      	ldr	r3, [pc, #288]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	4945      	ldr	r1, [pc, #276]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436e:	d106      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004370:	4b40      	ldr	r3, [pc, #256]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a3f      	ldr	r2, [pc, #252]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e011      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004386:	d10c      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f882 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d028      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ae:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	492d      	ldr	r1, [pc, #180]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043cc:	d106      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	4a28      	ldr	r2, [pc, #160]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80043d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d8:	60d3      	str	r3, [r2, #12]
 80043da:	e011      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f853 	bl	8004498 <RCCEx_PLLSAI1_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01c      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	4916      	ldr	r1, [pc, #88]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442a:	d10c      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f830 	bl	8004498 <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004460:	4904      	ldr	r1, [pc, #16]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004468:	7cbb      	ldrb	r3, [r7, #18]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000

08004478 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000

08004498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044a6:	4b74      	ldr	r3, [pc, #464]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d018      	beq.n	80044e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044b2:	4b71      	ldr	r3, [pc, #452]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0203 	and.w	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d10d      	bne.n	80044de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
       ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ca:	4b6b      	ldr	r3, [pc, #428]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
       ||
 80044da:	429a      	cmp	r2, r3
 80044dc:	d047      	beq.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
 80044e2:	e044      	b.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d018      	beq.n	800451e <RCCEx_PLLSAI1_Config+0x86>
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d825      	bhi.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <RCCEx_PLLSAI1_Config+0x62>
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d009      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x74>
 80044f8:	e020      	b.n	800453c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d11d      	bne.n	8004542 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e01a      	b.n	8004542 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800450c:	4b5a      	ldr	r3, [pc, #360]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451c:	e013      	b.n	8004546 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800451e:	4b56      	ldr	r3, [pc, #344]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800452a:	4b53      	ldr	r3, [pc, #332]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800453a:	e006      	b.n	800454a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
      break;
 8004540:	e004      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004542:	bf00      	nop
 8004544:	e002      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004546:	bf00      	nop
 8004548:	e000      	b.n	800454c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454a:	bf00      	nop
    }

    if(status == HAL_OK)
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004552:	4b49      	ldr	r3, [pc, #292]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6819      	ldr	r1, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	430b      	orrs	r3, r1
 8004568:	4943      	ldr	r1, [pc, #268]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d17c      	bne.n	800466e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004574:	4b40      	ldr	r3, [pc, #256]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3f      	ldr	r2, [pc, #252]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800457e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004580:	f7fd f9a2 	bl	80018c8 <HAL_GetTick>
 8004584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004586:	e009      	b.n	800459c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004588:	f7fd f99e 	bl	80018c8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d902      	bls.n	800459c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	73fb      	strb	r3, [r7, #15]
        break;
 800459a:	e005      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ef      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d15f      	bne.n	800466e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d110      	bne.n	80045d6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045b4:	4b30      	ldr	r3, [pc, #192]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6892      	ldr	r2, [r2, #8]
 80045c4:	0211      	lsls	r1, r2, #8
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	68d2      	ldr	r2, [r2, #12]
 80045ca:	06d2      	lsls	r2, r2, #27
 80045cc:	430a      	orrs	r2, r1
 80045ce:	492a      	ldr	r1, [pc, #168]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]
 80045d4:	e027      	b.n	8004626 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d112      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045dc:	4b26      	ldr	r3, [pc, #152]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	0211      	lsls	r1, r2, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6912      	ldr	r2, [r2, #16]
 80045f2:	0852      	lsrs	r2, r2, #1
 80045f4:	3a01      	subs	r2, #1
 80045f6:	0552      	lsls	r2, r2, #21
 80045f8:	430a      	orrs	r2, r1
 80045fa:	491f      	ldr	r1, [pc, #124]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	610b      	str	r3, [r1, #16]
 8004600:	e011      	b.n	8004626 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800460a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6892      	ldr	r2, [r2, #8]
 8004612:	0211      	lsls	r1, r2, #8
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	6952      	ldr	r2, [r2, #20]
 8004618:	0852      	lsrs	r2, r2, #1
 800461a:	3a01      	subs	r2, #1
 800461c:	0652      	lsls	r2, r2, #25
 800461e:	430a      	orrs	r2, r1
 8004620:	4915      	ldr	r1, [pc, #84]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a13      	ldr	r2, [pc, #76]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004630:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004632:	f7fd f949 	bl	80018c8 <HAL_GetTick>
 8004636:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004638:	e009      	b.n	800464e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800463a:	f7fd f945 	bl	80018c8 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d902      	bls.n	800464e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	73fb      	strb	r3, [r7, #15]
          break;
 800464c:	e005      	b.n	800465a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ef      	beq.n	800463a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	4903      	ldr	r1, [pc, #12]	; (8004678 <RCCEx_PLLSAI1_Config+0x1e0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e040      	b.n	8004710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc ff0e 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f992 	bl	80049e4 <UART_SetConfig>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e022      	b.n	8004710 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fbb2 	bl	8004e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fc39 	bl	8004f80 <UART_CheckIdleState>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472c:	2b20      	cmp	r3, #32
 800472e:	f040 8082 	bne.w	8004836 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_UART_Transmit+0x26>
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07a      	b.n	8004838 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x38>
 800474c:	2302      	movs	r3, #2
 800474e:	e073      	b.n	8004838 <HAL_UART_Transmit+0x120>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2221      	movs	r2, #33	; 0x21
 8004764:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004766:	f7fd f8af 	bl	80018c8 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	88fa      	ldrh	r2, [r7, #6]
 8004778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d108      	bne.n	8004798 <HAL_UART_Transmit+0x80>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	e003      	b.n	80047a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047a8:	e02d      	b.n	8004806 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2180      	movs	r1, #128	; 0x80
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fc2c 	bl	8005012 <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e039      	b.n	8004838 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10b      	bne.n	80047e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	881a      	ldrh	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d6:	b292      	uxth	r2, r2
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	3302      	adds	r3, #2
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e008      	b.n	80047f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b292      	uxth	r2, r2
 80047ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1cb      	bne.n	80047aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2200      	movs	r2, #0
 800481a:	2140      	movs	r1, #64	; 0x40
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fbf8 	bl	8005012 <UART_WaitOnFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e005      	b.n	8004838 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004854:	2b20      	cmp	r3, #32
 8004856:	f040 80bf 	bne.w	80049d8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UART_Receive+0x26>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0b7      	b.n	80049da <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UART_Receive+0x38>
 8004874:	2302      	movs	r3, #2
 8004876:	e0b0      	b.n	80049da <HAL_UART_Receive+0x19a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2222      	movs	r2, #34	; 0x22
 800488c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004894:	f7fd f818 	bl	80018c8 <HAL_GetTick>
 8004898:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	d10e      	bne.n	80048d2 <HAL_UART_Receive+0x92>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <HAL_UART_Receive+0x88>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c6:	e02d      	b.n	8004924 <HAL_UART_Receive+0xe4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	22ff      	movs	r2, #255	; 0xff
 80048cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d0:	e028      	b.n	8004924 <HAL_UART_Receive+0xe4>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <HAL_UART_Receive+0xb6>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_UART_Receive+0xac>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ea:	e01b      	b.n	8004924 <HAL_UART_Receive+0xe4>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	227f      	movs	r2, #127	; 0x7f
 80048f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f4:	e016      	b.n	8004924 <HAL_UART_Receive+0xe4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048fe:	d10d      	bne.n	800491c <HAL_UART_Receive+0xdc>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_UART_Receive+0xd2>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	227f      	movs	r2, #127	; 0x7f
 800490c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004910:	e008      	b.n	8004924 <HAL_UART_Receive+0xe4>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	223f      	movs	r2, #63	; 0x3f
 8004916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800491a:	e003      	b.n	8004924 <HAL_UART_Receive+0xe4>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800492a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004934:	d108      	bne.n	8004948 <HAL_UART_Receive+0x108>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d104      	bne.n	8004948 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	e003      	b.n	8004950 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004958:	e033      	b.n	80049c2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2120      	movs	r1, #32
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb54 	bl	8005012 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e032      	b.n	80049da <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10c      	bne.n	8004994 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004980:	b29a      	uxth	r2, r3
 8004982:	8a7b      	ldrh	r3, [r7, #18]
 8004984:	4013      	ands	r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3302      	adds	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e00d      	b.n	80049b0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800499a:	b29b      	uxth	r3, r3
 800499c:	b2da      	uxtb	r2, r3
 800499e:	8a7b      	ldrh	r3, [r7, #18]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	4013      	ands	r3, r2
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1c5      	bne.n	800495a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b08a      	sub	sp, #40	; 0x28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4bb4      	ldr	r3, [pc, #720]	; (8004ce4 <UART_SetConfig+0x300>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4aa9      	ldr	r2, [pc, #676]	; (8004ce8 <UART_SetConfig+0x304>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4aa0      	ldr	r2, [pc, #640]	; (8004cec <UART_SetConfig+0x308>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d126      	bne.n	8004abc <UART_SetConfig+0xd8>
 8004a6e:	4ba0      	ldr	r3, [pc, #640]	; (8004cf0 <UART_SetConfig+0x30c>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d81b      	bhi.n	8004ab4 <UART_SetConfig+0xd0>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0xa0>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa5 	.word	0x08004aa5
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9a:	e080      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa2:	e07c      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aaa:	e078      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e074      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e070      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8c      	ldr	r2, [pc, #560]	; (8004cf4 <UART_SetConfig+0x310>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d138      	bne.n	8004b38 <UART_SetConfig+0x154>
 8004ac6:	4b8a      	ldr	r3, [pc, #552]	; (8004cf0 <UART_SetConfig+0x30c>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d82d      	bhi.n	8004b30 <UART_SetConfig+0x14c>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xf8>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b31 	.word	0x08004b31
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e042      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e03e      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e03a      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e036      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e032      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6a      	ldr	r2, [pc, #424]	; (8004ce8 <UART_SetConfig+0x304>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d12a      	bne.n	8004b98 <UART_SetConfig+0x1b4>
 8004b42:	4b6b      	ldr	r3, [pc, #428]	; (8004cf0 <UART_SetConfig+0x30c>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b50:	d01a      	beq.n	8004b88 <UART_SetConfig+0x1a4>
 8004b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b56:	d81b      	bhi.n	8004b90 <UART_SetConfig+0x1ac>
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d00c      	beq.n	8004b78 <UART_SetConfig+0x194>
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d815      	bhi.n	8004b90 <UART_SetConfig+0x1ac>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <UART_SetConfig+0x18c>
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d008      	beq.n	8004b80 <UART_SetConfig+0x19c>
 8004b6e:	e00f      	b.n	8004b90 <UART_SetConfig+0x1ac>
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b76:	e012      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7e:	e00e      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b86:	e00a      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8e:	e006      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b96:	e002      	b.n	8004b9e <UART_SetConfig+0x1ba>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a51      	ldr	r2, [pc, #324]	; (8004ce8 <UART_SetConfig+0x304>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d17a      	bne.n	8004c9e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d824      	bhi.n	8004bfa <UART_SetConfig+0x216>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <UART_SetConfig+0x1d4>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bdd 	.word	0x08004bdd
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004beb 	.word	0x08004beb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bfb 	.word	0x08004bfb
 8004bd4:	08004bfb 	.word	0x08004bfb
 8004bd8:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bdc:	f7ff f9ca 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e010      	b.n	8004c06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <UART_SetConfig+0x314>)
 8004be6:	61fb      	str	r3, [r7, #28]
        break;
 8004be8:	e00d      	b.n	8004c06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7ff f92b 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004bee:	61f8      	str	r0, [r7, #28]
        break;
 8004bf0:	e009      	b.n	8004c06 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	61fb      	str	r3, [r7, #28]
        break;
 8004bf8:	e005      	b.n	8004c06 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8107 	beq.w	8004e1c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d305      	bcc.n	8004c2a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d903      	bls.n	8004c32 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c30:	e0f4      	b.n	8004e1c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2200      	movs	r2, #0
 8004c36:	461c      	mov	r4, r3
 8004c38:	4615      	mov	r5, r2
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	022b      	lsls	r3, r5, #8
 8004c44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c48:	0222      	lsls	r2, r4, #8
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	6849      	ldr	r1, [r1, #4]
 8004c4e:	0849      	lsrs	r1, r1, #1
 8004c50:	2000      	movs	r0, #0
 8004c52:	4688      	mov	r8, r1
 8004c54:	4681      	mov	r9, r0
 8004c56:	eb12 0a08 	adds.w	sl, r2, r8
 8004c5a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c6c:	4650      	mov	r0, sl
 8004c6e:	4659      	mov	r1, fp
 8004c70:	f7fc f80a 	bl	8000c88 <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c82:	d308      	bcc.n	8004c96 <UART_SetConfig+0x2b2>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8a:	d204      	bcs.n	8004c96 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]
 8004c94:	e0c2      	b.n	8004e1c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c9c:	e0be      	b.n	8004e1c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	d16a      	bne.n	8004d7e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d834      	bhi.n	8004d1a <UART_SetConfig+0x336>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <UART_SetConfig+0x2d4>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cdd 	.word	0x08004cdd
 8004cbc:	08004cfd 	.word	0x08004cfd
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004d1b 	.word	0x08004d1b
 8004cc8:	08004d0b 	.word	0x08004d0b
 8004ccc:	08004d1b 	.word	0x08004d1b
 8004cd0:	08004d1b 	.word	0x08004d1b
 8004cd4:	08004d1b 	.word	0x08004d1b
 8004cd8:	08004d13 	.word	0x08004d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cdc:	f7ff f94a 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004ce0:	61f8      	str	r0, [r7, #28]
        break;
 8004ce2:	e020      	b.n	8004d26 <UART_SetConfig+0x342>
 8004ce4:	efff69f3 	.word	0xefff69f3
 8004ce8:	40008000 	.word	0x40008000
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40004400 	.word	0x40004400
 8004cf8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7ff f950 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8004d00:	61f8      	str	r0, [r7, #28]
        break;
 8004d02:	e010      	b.n	8004d26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d04:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <UART_SetConfig+0x454>)
 8004d06:	61fb      	str	r3, [r7, #28]
        break;
 8004d08:	e00d      	b.n	8004d26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7ff f89b 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004d0e:	61f8      	str	r0, [r7, #28]
        break;
 8004d10:	e009      	b.n	8004d26 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d16:	61fb      	str	r3, [r7, #28]
        break;
 8004d18:	e005      	b.n	8004d26 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d077      	beq.n	8004e1c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	005a      	lsls	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	441a      	add	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2b0f      	cmp	r3, #15
 8004d46:	d916      	bls.n	8004d76 <UART_SetConfig+0x392>
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4e:	d212      	bcs.n	8004d76 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f023 030f 	bic.w	r3, r3, #15
 8004d58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	085b      	lsrs	r3, r3, #1
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	8afb      	ldrh	r3, [r7, #22]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	8afa      	ldrh	r2, [r7, #22]
 8004d72:	60da      	str	r2, [r3, #12]
 8004d74:	e052      	b.n	8004e1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d7c:	e04e      	b.n	8004e1c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d827      	bhi.n	8004dd6 <UART_SetConfig+0x3f2>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x3a8>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7ff f8e0 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e014      	b.n	8004de2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7ff f8f2 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	61f8      	str	r0, [r7, #28]
        break;
 8004dbe:	e010      	b.n	8004de2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <UART_SetConfig+0x454>)
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e00d      	b.n	8004de2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7ff f83d 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8004dca:	61f8      	str	r0, [r7, #28]
        break;
 8004dcc:	e009      	b.n	8004de2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	61fb      	str	r3, [r7, #28]
        break;
 8004dd4:	e005      	b.n	8004de2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004de0:	bf00      	nop
    }

    if (pclk != 0U)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d019      	beq.n	8004e1c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	085a      	lsrs	r2, r3, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	441a      	add	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d909      	bls.n	8004e16 <UART_SetConfig+0x432>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d205      	bcs.n	8004e16 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e002      	b.n	8004e1c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	; 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e36:	bf00      	nop
 8004e38:	00f42400 	.word	0x00f42400

08004e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3a:	d10a      	bne.n	8004f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	605a      	str	r2, [r3, #4]
  }
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f90:	f7fc fc9a 	bl	80018c8 <HAL_GetTick>
 8004f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d10e      	bne.n	8004fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fa8:	9300      	str	r3, [sp, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f82d 	bl	8005012 <UART_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e023      	b.n	800500a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d10e      	bne.n	8004fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fd4:	9300      	str	r3, [sp, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f817 	bl	8005012 <UART_WaitOnFlagUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00d      	b.n	800500a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b09c      	sub	sp, #112	; 0x70
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4613      	mov	r3, r2
 8005020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005022:	e0a5      	b.n	8005170 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502a:	f000 80a1 	beq.w	8005170 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fc fc4b 	bl	80018c8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <UART_WaitOnFlagUntilTimeout+0x32>
 800503e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13e      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005058:	667b      	str	r3, [r7, #100]	; 0x64
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005064:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005096:	64ba      	str	r2, [r7, #72]	; 0x48
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800509c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e067      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d04f      	beq.n	8005170 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d147      	bne.n	8005170 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
 800510a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	613b      	str	r3, [r7, #16]
   return(result);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	66bb      	str	r3, [r7, #104]	; 0x68
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800513c:	623a      	str	r2, [r7, #32]
 800513e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69f9      	ldr	r1, [r7, #28]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	61bb      	str	r3, [r7, #24]
   return(result);
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e5      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e010      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	429a      	cmp	r2, r3
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	429a      	cmp	r2, r3
 800518c:	f43f af4a 	beq.w	8005024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3770      	adds	r7, #112	; 0x70
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <__cvt>:
 800519a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800519e:	ec55 4b10 	vmov	r4, r5, d0
 80051a2:	2d00      	cmp	r5, #0
 80051a4:	460e      	mov	r6, r1
 80051a6:	4619      	mov	r1, r3
 80051a8:	462b      	mov	r3, r5
 80051aa:	bfbb      	ittet	lt
 80051ac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051b0:	461d      	movlt	r5, r3
 80051b2:	2300      	movge	r3, #0
 80051b4:	232d      	movlt	r3, #45	; 0x2d
 80051b6:	700b      	strb	r3, [r1, #0]
 80051b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051be:	4691      	mov	r9, r2
 80051c0:	f023 0820 	bic.w	r8, r3, #32
 80051c4:	bfbc      	itt	lt
 80051c6:	4622      	movlt	r2, r4
 80051c8:	4614      	movlt	r4, r2
 80051ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ce:	d005      	beq.n	80051dc <__cvt+0x42>
 80051d0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051d4:	d100      	bne.n	80051d8 <__cvt+0x3e>
 80051d6:	3601      	adds	r6, #1
 80051d8:	2102      	movs	r1, #2
 80051da:	e000      	b.n	80051de <__cvt+0x44>
 80051dc:	2103      	movs	r1, #3
 80051de:	ab03      	add	r3, sp, #12
 80051e0:	9301      	str	r3, [sp, #4]
 80051e2:	ab02      	add	r3, sp, #8
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	ec45 4b10 	vmov	d0, r4, r5
 80051ea:	4653      	mov	r3, sl
 80051ec:	4632      	mov	r2, r6
 80051ee:	f001 f893 	bl	8006318 <_dtoa_r>
 80051f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051f6:	4607      	mov	r7, r0
 80051f8:	d102      	bne.n	8005200 <__cvt+0x66>
 80051fa:	f019 0f01 	tst.w	r9, #1
 80051fe:	d022      	beq.n	8005246 <__cvt+0xac>
 8005200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005204:	eb07 0906 	add.w	r9, r7, r6
 8005208:	d110      	bne.n	800522c <__cvt+0x92>
 800520a:	783b      	ldrb	r3, [r7, #0]
 800520c:	2b30      	cmp	r3, #48	; 0x30
 800520e:	d10a      	bne.n	8005226 <__cvt+0x8c>
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800521c:	b918      	cbnz	r0, 8005226 <__cvt+0x8c>
 800521e:	f1c6 0601 	rsb	r6, r6, #1
 8005222:	f8ca 6000 	str.w	r6, [sl]
 8005226:	f8da 3000 	ldr.w	r3, [sl]
 800522a:	4499      	add	r9, r3
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4620      	mov	r0, r4
 8005232:	4629      	mov	r1, r5
 8005234:	f7fb fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005238:	b108      	cbz	r0, 800523e <__cvt+0xa4>
 800523a:	f8cd 900c 	str.w	r9, [sp, #12]
 800523e:	2230      	movs	r2, #48	; 0x30
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	454b      	cmp	r3, r9
 8005244:	d307      	bcc.n	8005256 <__cvt+0xbc>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800524a:	1bdb      	subs	r3, r3, r7
 800524c:	4638      	mov	r0, r7
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	b004      	add	sp, #16
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005256:	1c59      	adds	r1, r3, #1
 8005258:	9103      	str	r1, [sp, #12]
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e7f0      	b.n	8005240 <__cvt+0xa6>

0800525e <__exponent>:
 800525e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005260:	4603      	mov	r3, r0
 8005262:	2900      	cmp	r1, #0
 8005264:	bfb8      	it	lt
 8005266:	4249      	neglt	r1, r1
 8005268:	f803 2b02 	strb.w	r2, [r3], #2
 800526c:	bfb4      	ite	lt
 800526e:	222d      	movlt	r2, #45	; 0x2d
 8005270:	222b      	movge	r2, #43	; 0x2b
 8005272:	2909      	cmp	r1, #9
 8005274:	7042      	strb	r2, [r0, #1]
 8005276:	dd2a      	ble.n	80052ce <__exponent+0x70>
 8005278:	f10d 0207 	add.w	r2, sp, #7
 800527c:	4617      	mov	r7, r2
 800527e:	260a      	movs	r6, #10
 8005280:	4694      	mov	ip, r2
 8005282:	fb91 f5f6 	sdiv	r5, r1, r6
 8005286:	fb06 1415 	mls	r4, r6, r5, r1
 800528a:	3430      	adds	r4, #48	; 0x30
 800528c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005290:	460c      	mov	r4, r1
 8005292:	2c63      	cmp	r4, #99	; 0x63
 8005294:	f102 32ff 	add.w	r2, r2, #4294967295
 8005298:	4629      	mov	r1, r5
 800529a:	dcf1      	bgt.n	8005280 <__exponent+0x22>
 800529c:	3130      	adds	r1, #48	; 0x30
 800529e:	f1ac 0402 	sub.w	r4, ip, #2
 80052a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052a6:	1c41      	adds	r1, r0, #1
 80052a8:	4622      	mov	r2, r4
 80052aa:	42ba      	cmp	r2, r7
 80052ac:	d30a      	bcc.n	80052c4 <__exponent+0x66>
 80052ae:	f10d 0209 	add.w	r2, sp, #9
 80052b2:	eba2 020c 	sub.w	r2, r2, ip
 80052b6:	42bc      	cmp	r4, r7
 80052b8:	bf88      	it	hi
 80052ba:	2200      	movhi	r2, #0
 80052bc:	4413      	add	r3, r2
 80052be:	1a18      	subs	r0, r3, r0
 80052c0:	b003      	add	sp, #12
 80052c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052c8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80052cc:	e7ed      	b.n	80052aa <__exponent+0x4c>
 80052ce:	2330      	movs	r3, #48	; 0x30
 80052d0:	3130      	adds	r1, #48	; 0x30
 80052d2:	7083      	strb	r3, [r0, #2]
 80052d4:	70c1      	strb	r1, [r0, #3]
 80052d6:	1d03      	adds	r3, r0, #4
 80052d8:	e7f1      	b.n	80052be <__exponent+0x60>
	...

080052dc <_printf_float>:
 80052dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e0:	ed2d 8b02 	vpush	{d8}
 80052e4:	b08d      	sub	sp, #52	; 0x34
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052ec:	4616      	mov	r6, r2
 80052ee:	461f      	mov	r7, r3
 80052f0:	4605      	mov	r5, r0
 80052f2:	f000 ff09 	bl	8006108 <_localeconv_r>
 80052f6:	f8d0 a000 	ldr.w	sl, [r0]
 80052fa:	4650      	mov	r0, sl
 80052fc:	f7fa ffb8 	bl	8000270 <strlen>
 8005300:	2300      	movs	r3, #0
 8005302:	930a      	str	r3, [sp, #40]	; 0x28
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	9305      	str	r3, [sp, #20]
 8005308:	f8d8 3000 	ldr.w	r3, [r8]
 800530c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005310:	3307      	adds	r3, #7
 8005312:	f023 0307 	bic.w	r3, r3, #7
 8005316:	f103 0208 	add.w	r2, r3, #8
 800531a:	f8c8 2000 	str.w	r2, [r8]
 800531e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005326:	9307      	str	r3, [sp, #28]
 8005328:	f8cd 8018 	str.w	r8, [sp, #24]
 800532c:	ee08 0a10 	vmov	s16, r0
 8005330:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005338:	4b9e      	ldr	r3, [pc, #632]	; (80055b4 <_printf_float+0x2d8>)
 800533a:	f04f 32ff 	mov.w	r2, #4294967295
 800533e:	f7fb fbf5 	bl	8000b2c <__aeabi_dcmpun>
 8005342:	bb88      	cbnz	r0, 80053a8 <_printf_float+0xcc>
 8005344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005348:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <_printf_float+0x2d8>)
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	f7fb fbcf 	bl	8000af0 <__aeabi_dcmple>
 8005352:	bb48      	cbnz	r0, 80053a8 <_printf_float+0xcc>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb fbbe 	bl	8000adc <__aeabi_dcmplt>
 8005360:	b110      	cbz	r0, 8005368 <_printf_float+0x8c>
 8005362:	232d      	movs	r3, #45	; 0x2d
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	4a93      	ldr	r2, [pc, #588]	; (80055b8 <_printf_float+0x2dc>)
 800536a:	4b94      	ldr	r3, [pc, #592]	; (80055bc <_printf_float+0x2e0>)
 800536c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005370:	bf94      	ite	ls
 8005372:	4690      	movls	r8, r2
 8005374:	4698      	movhi	r8, r3
 8005376:	2303      	movs	r3, #3
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	f023 0304 	bic.w	r3, r3, #4
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	4633      	mov	r3, r6
 800538a:	aa0b      	add	r2, sp, #44	; 0x2c
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f9da 	bl	8005748 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 8090 	bne.w	80054ba <_printf_float+0x1de>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b00d      	add	sp, #52	; 0x34
 80053a0:	ecbd 8b02 	vpop	{d8}
 80053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	4640      	mov	r0, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	f7fb fbbc 	bl	8000b2c <__aeabi_dcmpun>
 80053b4:	b140      	cbz	r0, 80053c8 <_printf_float+0xec>
 80053b6:	464b      	mov	r3, r9
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bfbc      	itt	lt
 80053bc:	232d      	movlt	r3, #45	; 0x2d
 80053be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053c2:	4a7f      	ldr	r2, [pc, #508]	; (80055c0 <_printf_float+0x2e4>)
 80053c4:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <_printf_float+0x2e8>)
 80053c6:	e7d1      	b.n	800536c <_printf_float+0x90>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	d13f      	bne.n	8005454 <_printf_float+0x178>
 80053d4:	2306      	movs	r3, #6
 80053d6:	6063      	str	r3, [r4, #4]
 80053d8:	9b05      	ldr	r3, [sp, #20]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80053e0:	2300      	movs	r3, #0
 80053e2:	9303      	str	r3, [sp, #12]
 80053e4:	ab0a      	add	r3, sp, #40	; 0x28
 80053e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053ea:	ab09      	add	r3, sp, #36	; 0x24
 80053ec:	ec49 8b10 	vmov	d0, r8, r9
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7ff fece 	bl	800519a <__cvt>
 80053fe:	9b06      	ldr	r3, [sp, #24]
 8005400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005402:	2b47      	cmp	r3, #71	; 0x47
 8005404:	4680      	mov	r8, r0
 8005406:	d108      	bne.n	800541a <_printf_float+0x13e>
 8005408:	1cc8      	adds	r0, r1, #3
 800540a:	db02      	blt.n	8005412 <_printf_float+0x136>
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	4299      	cmp	r1, r3
 8005410:	dd41      	ble.n	8005496 <_printf_float+0x1ba>
 8005412:	f1ab 0302 	sub.w	r3, fp, #2
 8005416:	fa5f fb83 	uxtb.w	fp, r3
 800541a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800541e:	d820      	bhi.n	8005462 <_printf_float+0x186>
 8005420:	3901      	subs	r1, #1
 8005422:	465a      	mov	r2, fp
 8005424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005428:	9109      	str	r1, [sp, #36]	; 0x24
 800542a:	f7ff ff18 	bl	800525e <__exponent>
 800542e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005430:	1813      	adds	r3, r2, r0
 8005432:	2a01      	cmp	r2, #1
 8005434:	4681      	mov	r9, r0
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	dc02      	bgt.n	8005440 <_printf_float+0x164>
 800543a:	6822      	ldr	r2, [r4, #0]
 800543c:	07d2      	lsls	r2, r2, #31
 800543e:	d501      	bpl.n	8005444 <_printf_float+0x168>
 8005440:	3301      	adds	r3, #1
 8005442:	6123      	str	r3, [r4, #16]
 8005444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005448:	2b00      	cmp	r3, #0
 800544a:	d09c      	beq.n	8005386 <_printf_float+0xaa>
 800544c:	232d      	movs	r3, #45	; 0x2d
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005452:	e798      	b.n	8005386 <_printf_float+0xaa>
 8005454:	9a06      	ldr	r2, [sp, #24]
 8005456:	2a47      	cmp	r2, #71	; 0x47
 8005458:	d1be      	bne.n	80053d8 <_printf_float+0xfc>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1bc      	bne.n	80053d8 <_printf_float+0xfc>
 800545e:	2301      	movs	r3, #1
 8005460:	e7b9      	b.n	80053d6 <_printf_float+0xfa>
 8005462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005466:	d118      	bne.n	800549a <_printf_float+0x1be>
 8005468:	2900      	cmp	r1, #0
 800546a:	6863      	ldr	r3, [r4, #4]
 800546c:	dd0b      	ble.n	8005486 <_printf_float+0x1aa>
 800546e:	6121      	str	r1, [r4, #16]
 8005470:	b913      	cbnz	r3, 8005478 <_printf_float+0x19c>
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	07d0      	lsls	r0, r2, #31
 8005476:	d502      	bpl.n	800547e <_printf_float+0x1a2>
 8005478:	3301      	adds	r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005480:	f04f 0900 	mov.w	r9, #0
 8005484:	e7de      	b.n	8005444 <_printf_float+0x168>
 8005486:	b913      	cbnz	r3, 800548e <_printf_float+0x1b2>
 8005488:	6822      	ldr	r2, [r4, #0]
 800548a:	07d2      	lsls	r2, r2, #31
 800548c:	d501      	bpl.n	8005492 <_printf_float+0x1b6>
 800548e:	3302      	adds	r3, #2
 8005490:	e7f4      	b.n	800547c <_printf_float+0x1a0>
 8005492:	2301      	movs	r3, #1
 8005494:	e7f2      	b.n	800547c <_printf_float+0x1a0>
 8005496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800549a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549c:	4299      	cmp	r1, r3
 800549e:	db05      	blt.n	80054ac <_printf_float+0x1d0>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	07d8      	lsls	r0, r3, #31
 80054a6:	d5ea      	bpl.n	800547e <_printf_float+0x1a2>
 80054a8:	1c4b      	adds	r3, r1, #1
 80054aa:	e7e7      	b.n	800547c <_printf_float+0x1a0>
 80054ac:	2900      	cmp	r1, #0
 80054ae:	bfd4      	ite	le
 80054b0:	f1c1 0202 	rsble	r2, r1, #2
 80054b4:	2201      	movgt	r2, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	e7e0      	b.n	800547c <_printf_float+0x1a0>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	055a      	lsls	r2, r3, #21
 80054be:	d407      	bmi.n	80054d0 <_printf_float+0x1f4>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	4642      	mov	r2, r8
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	d12c      	bne.n	8005528 <_printf_float+0x24c>
 80054ce:	e764      	b.n	800539a <_printf_float+0xbe>
 80054d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054d4:	f240 80e0 	bls.w	8005698 <_printf_float+0x3bc>
 80054d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054dc:	2200      	movs	r2, #0
 80054de:	2300      	movs	r3, #0
 80054e0:	f7fb faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d034      	beq.n	8005552 <_printf_float+0x276>
 80054e8:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <_printf_float+0x2ec>)
 80054ea:	2301      	movs	r3, #1
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af51 	beq.w	800539a <_printf_float+0xbe>
 80054f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054fc:	429a      	cmp	r2, r3
 80054fe:	db02      	blt.n	8005506 <_printf_float+0x22a>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07d8      	lsls	r0, r3, #31
 8005504:	d510      	bpl.n	8005528 <_printf_float+0x24c>
 8005506:	ee18 3a10 	vmov	r3, s16
 800550a:	4652      	mov	r2, sl
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f af41 	beq.w	800539a <_printf_float+0xbe>
 8005518:	f04f 0800 	mov.w	r8, #0
 800551c:	f104 091a 	add.w	r9, r4, #26
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	3b01      	subs	r3, #1
 8005524:	4543      	cmp	r3, r8
 8005526:	dc09      	bgt.n	800553c <_printf_float+0x260>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	079b      	lsls	r3, r3, #30
 800552c:	f100 8107 	bmi.w	800573e <_printf_float+0x462>
 8005530:	68e0      	ldr	r0, [r4, #12]
 8005532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005534:	4298      	cmp	r0, r3
 8005536:	bfb8      	it	lt
 8005538:	4618      	movlt	r0, r3
 800553a:	e730      	b.n	800539e <_printf_float+0xc2>
 800553c:	2301      	movs	r3, #1
 800553e:	464a      	mov	r2, r9
 8005540:	4631      	mov	r1, r6
 8005542:	4628      	mov	r0, r5
 8005544:	47b8      	blx	r7
 8005546:	3001      	adds	r0, #1
 8005548:	f43f af27 	beq.w	800539a <_printf_float+0xbe>
 800554c:	f108 0801 	add.w	r8, r8, #1
 8005550:	e7e6      	b.n	8005520 <_printf_float+0x244>
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	dc39      	bgt.n	80055cc <_printf_float+0x2f0>
 8005558:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <_printf_float+0x2ec>)
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	47b8      	blx	r7
 8005562:	3001      	adds	r0, #1
 8005564:	f43f af19 	beq.w	800539a <_printf_float+0xbe>
 8005568:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800556c:	4313      	orrs	r3, r2
 800556e:	d102      	bne.n	8005576 <_printf_float+0x29a>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	07d9      	lsls	r1, r3, #31
 8005574:	d5d8      	bpl.n	8005528 <_printf_float+0x24c>
 8005576:	ee18 3a10 	vmov	r3, s16
 800557a:	4652      	mov	r2, sl
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af09 	beq.w	800539a <_printf_float+0xbe>
 8005588:	f04f 0900 	mov.w	r9, #0
 800558c:	f104 0a1a 	add.w	sl, r4, #26
 8005590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005592:	425b      	negs	r3, r3
 8005594:	454b      	cmp	r3, r9
 8005596:	dc01      	bgt.n	800559c <_printf_float+0x2c0>
 8005598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559a:	e792      	b.n	80054c2 <_printf_float+0x1e6>
 800559c:	2301      	movs	r3, #1
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f aef7 	beq.w	800539a <_printf_float+0xbe>
 80055ac:	f109 0901 	add.w	r9, r9, #1
 80055b0:	e7ee      	b.n	8005590 <_printf_float+0x2b4>
 80055b2:	bf00      	nop
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	08009a0c 	.word	0x08009a0c
 80055bc:	08009a10 	.word	0x08009a10
 80055c0:	08009a14 	.word	0x08009a14
 80055c4:	08009a18 	.word	0x08009a18
 80055c8:	08009a1c 	.word	0x08009a1c
 80055cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d0:	429a      	cmp	r2, r3
 80055d2:	bfa8      	it	ge
 80055d4:	461a      	movge	r2, r3
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	4691      	mov	r9, r2
 80055da:	dc37      	bgt.n	800564c <_printf_float+0x370>
 80055dc:	f04f 0b00 	mov.w	fp, #0
 80055e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055e4:	f104 021a 	add.w	r2, r4, #26
 80055e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	eba3 0309 	sub.w	r3, r3, r9
 80055f0:	455b      	cmp	r3, fp
 80055f2:	dc33      	bgt.n	800565c <_printf_float+0x380>
 80055f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f8:	429a      	cmp	r2, r3
 80055fa:	db3b      	blt.n	8005674 <_printf_float+0x398>
 80055fc:	6823      	ldr	r3, [r4, #0]
 80055fe:	07da      	lsls	r2, r3, #31
 8005600:	d438      	bmi.n	8005674 <_printf_float+0x398>
 8005602:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005606:	eba2 0903 	sub.w	r9, r2, r3
 800560a:	9b05      	ldr	r3, [sp, #20]
 800560c:	1ad2      	subs	r2, r2, r3
 800560e:	4591      	cmp	r9, r2
 8005610:	bfa8      	it	ge
 8005612:	4691      	movge	r9, r2
 8005614:	f1b9 0f00 	cmp.w	r9, #0
 8005618:	dc35      	bgt.n	8005686 <_printf_float+0x3aa>
 800561a:	f04f 0800 	mov.w	r8, #0
 800561e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005622:	f104 0a1a 	add.w	sl, r4, #26
 8005626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	eba3 0309 	sub.w	r3, r3, r9
 8005630:	4543      	cmp	r3, r8
 8005632:	f77f af79 	ble.w	8005528 <_printf_float+0x24c>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f aeaa 	beq.w	800539a <_printf_float+0xbe>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	e7ec      	b.n	8005626 <_printf_float+0x34a>
 800564c:	4613      	mov	r3, r2
 800564e:	4631      	mov	r1, r6
 8005650:	4642      	mov	r2, r8
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	d1c0      	bne.n	80055dc <_printf_float+0x300>
 800565a:	e69e      	b.n	800539a <_printf_float+0xbe>
 800565c:	2301      	movs	r3, #1
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	9205      	str	r2, [sp, #20]
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	f43f ae97 	beq.w	800539a <_printf_float+0xbe>
 800566c:	9a05      	ldr	r2, [sp, #20]
 800566e:	f10b 0b01 	add.w	fp, fp, #1
 8005672:	e7b9      	b.n	80055e8 <_printf_float+0x30c>
 8005674:	ee18 3a10 	vmov	r3, s16
 8005678:	4652      	mov	r2, sl
 800567a:	4631      	mov	r1, r6
 800567c:	4628      	mov	r0, r5
 800567e:	47b8      	blx	r7
 8005680:	3001      	adds	r0, #1
 8005682:	d1be      	bne.n	8005602 <_printf_float+0x326>
 8005684:	e689      	b.n	800539a <_printf_float+0xbe>
 8005686:	9a05      	ldr	r2, [sp, #20]
 8005688:	464b      	mov	r3, r9
 800568a:	4442      	add	r2, r8
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	d1c1      	bne.n	800561a <_printf_float+0x33e>
 8005696:	e680      	b.n	800539a <_printf_float+0xbe>
 8005698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800569a:	2a01      	cmp	r2, #1
 800569c:	dc01      	bgt.n	80056a2 <_printf_float+0x3c6>
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d53a      	bpl.n	8005718 <_printf_float+0x43c>
 80056a2:	2301      	movs	r3, #1
 80056a4:	4642      	mov	r2, r8
 80056a6:	4631      	mov	r1, r6
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	f43f ae74 	beq.w	800539a <_printf_float+0xbe>
 80056b2:	ee18 3a10 	vmov	r3, s16
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f ae6b 	beq.w	800539a <_printf_float+0xbe>
 80056c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80056d0:	f7fb f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80056d4:	b9d8      	cbnz	r0, 800570e <_printf_float+0x432>
 80056d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056da:	f108 0201 	add.w	r2, r8, #1
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	d10e      	bne.n	8005706 <_printf_float+0x42a>
 80056e8:	e657      	b.n	800539a <_printf_float+0xbe>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4652      	mov	r2, sl
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f ae50 	beq.w	800539a <_printf_float+0xbe>
 80056fa:	f108 0801 	add.w	r8, r8, #1
 80056fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	4543      	cmp	r3, r8
 8005704:	dcf1      	bgt.n	80056ea <_printf_float+0x40e>
 8005706:	464b      	mov	r3, r9
 8005708:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800570c:	e6da      	b.n	80054c4 <_printf_float+0x1e8>
 800570e:	f04f 0800 	mov.w	r8, #0
 8005712:	f104 0a1a 	add.w	sl, r4, #26
 8005716:	e7f2      	b.n	80056fe <_printf_float+0x422>
 8005718:	2301      	movs	r3, #1
 800571a:	4642      	mov	r2, r8
 800571c:	e7df      	b.n	80056de <_printf_float+0x402>
 800571e:	2301      	movs	r3, #1
 8005720:	464a      	mov	r2, r9
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f ae36 	beq.w	800539a <_printf_float+0xbe>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	4543      	cmp	r3, r8
 800573a:	dcf0      	bgt.n	800571e <_printf_float+0x442>
 800573c:	e6f8      	b.n	8005530 <_printf_float+0x254>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	f104 0919 	add.w	r9, r4, #25
 8005746:	e7f4      	b.n	8005732 <_printf_float+0x456>

08005748 <_printf_common>:
 8005748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800574c:	4616      	mov	r6, r2
 800574e:	4699      	mov	r9, r3
 8005750:	688a      	ldr	r2, [r1, #8]
 8005752:	690b      	ldr	r3, [r1, #16]
 8005754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005758:	4293      	cmp	r3, r2
 800575a:	bfb8      	it	lt
 800575c:	4613      	movlt	r3, r2
 800575e:	6033      	str	r3, [r6, #0]
 8005760:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005764:	4607      	mov	r7, r0
 8005766:	460c      	mov	r4, r1
 8005768:	b10a      	cbz	r2, 800576e <_printf_common+0x26>
 800576a:	3301      	adds	r3, #1
 800576c:	6033      	str	r3, [r6, #0]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0699      	lsls	r1, r3, #26
 8005772:	bf42      	ittt	mi
 8005774:	6833      	ldrmi	r3, [r6, #0]
 8005776:	3302      	addmi	r3, #2
 8005778:	6033      	strmi	r3, [r6, #0]
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	f015 0506 	ands.w	r5, r5, #6
 8005780:	d106      	bne.n	8005790 <_printf_common+0x48>
 8005782:	f104 0a19 	add.w	sl, r4, #25
 8005786:	68e3      	ldr	r3, [r4, #12]
 8005788:	6832      	ldr	r2, [r6, #0]
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	42ab      	cmp	r3, r5
 800578e:	dc26      	bgt.n	80057de <_printf_common+0x96>
 8005790:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005794:	1e13      	subs	r3, r2, #0
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	bf18      	it	ne
 800579a:	2301      	movne	r3, #1
 800579c:	0692      	lsls	r2, r2, #26
 800579e:	d42b      	bmi.n	80057f8 <_printf_common+0xb0>
 80057a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a4:	4649      	mov	r1, r9
 80057a6:	4638      	mov	r0, r7
 80057a8:	47c0      	blx	r8
 80057aa:	3001      	adds	r0, #1
 80057ac:	d01e      	beq.n	80057ec <_printf_common+0xa4>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	6922      	ldr	r2, [r4, #16]
 80057b2:	f003 0306 	and.w	r3, r3, #6
 80057b6:	2b04      	cmp	r3, #4
 80057b8:	bf02      	ittt	eq
 80057ba:	68e5      	ldreq	r5, [r4, #12]
 80057bc:	6833      	ldreq	r3, [r6, #0]
 80057be:	1aed      	subeq	r5, r5, r3
 80057c0:	68a3      	ldr	r3, [r4, #8]
 80057c2:	bf0c      	ite	eq
 80057c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c8:	2500      	movne	r5, #0
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bfc4      	itt	gt
 80057ce:	1a9b      	subgt	r3, r3, r2
 80057d0:	18ed      	addgt	r5, r5, r3
 80057d2:	2600      	movs	r6, #0
 80057d4:	341a      	adds	r4, #26
 80057d6:	42b5      	cmp	r5, r6
 80057d8:	d11a      	bne.n	8005810 <_printf_common+0xc8>
 80057da:	2000      	movs	r0, #0
 80057dc:	e008      	b.n	80057f0 <_printf_common+0xa8>
 80057de:	2301      	movs	r3, #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	4649      	mov	r1, r9
 80057e4:	4638      	mov	r0, r7
 80057e6:	47c0      	blx	r8
 80057e8:	3001      	adds	r0, #1
 80057ea:	d103      	bne.n	80057f4 <_printf_common+0xac>
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f4:	3501      	adds	r5, #1
 80057f6:	e7c6      	b.n	8005786 <_printf_common+0x3e>
 80057f8:	18e1      	adds	r1, r4, r3
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	2030      	movs	r0, #48	; 0x30
 80057fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005802:	4422      	add	r2, r4
 8005804:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005808:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800580c:	3302      	adds	r3, #2
 800580e:	e7c7      	b.n	80057a0 <_printf_common+0x58>
 8005810:	2301      	movs	r3, #1
 8005812:	4622      	mov	r2, r4
 8005814:	4649      	mov	r1, r9
 8005816:	4638      	mov	r0, r7
 8005818:	47c0      	blx	r8
 800581a:	3001      	adds	r0, #1
 800581c:	d0e6      	beq.n	80057ec <_printf_common+0xa4>
 800581e:	3601      	adds	r6, #1
 8005820:	e7d9      	b.n	80057d6 <_printf_common+0x8e>
	...

08005824 <_printf_i>:
 8005824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	7e0f      	ldrb	r7, [r1, #24]
 800582a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800582c:	2f78      	cmp	r7, #120	; 0x78
 800582e:	4691      	mov	r9, r2
 8005830:	4680      	mov	r8, r0
 8005832:	460c      	mov	r4, r1
 8005834:	469a      	mov	sl, r3
 8005836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800583a:	d807      	bhi.n	800584c <_printf_i+0x28>
 800583c:	2f62      	cmp	r7, #98	; 0x62
 800583e:	d80a      	bhi.n	8005856 <_printf_i+0x32>
 8005840:	2f00      	cmp	r7, #0
 8005842:	f000 80d4 	beq.w	80059ee <_printf_i+0x1ca>
 8005846:	2f58      	cmp	r7, #88	; 0x58
 8005848:	f000 80c0 	beq.w	80059cc <_printf_i+0x1a8>
 800584c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005854:	e03a      	b.n	80058cc <_printf_i+0xa8>
 8005856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800585a:	2b15      	cmp	r3, #21
 800585c:	d8f6      	bhi.n	800584c <_printf_i+0x28>
 800585e:	a101      	add	r1, pc, #4	; (adr r1, 8005864 <_printf_i+0x40>)
 8005860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005864:	080058bd 	.word	0x080058bd
 8005868:	080058d1 	.word	0x080058d1
 800586c:	0800584d 	.word	0x0800584d
 8005870:	0800584d 	.word	0x0800584d
 8005874:	0800584d 	.word	0x0800584d
 8005878:	0800584d 	.word	0x0800584d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800584d 	.word	0x0800584d
 8005884:	0800584d 	.word	0x0800584d
 8005888:	0800584d 	.word	0x0800584d
 800588c:	0800584d 	.word	0x0800584d
 8005890:	080059d5 	.word	0x080059d5
 8005894:	080058fd 	.word	0x080058fd
 8005898:	0800598f 	.word	0x0800598f
 800589c:	0800584d 	.word	0x0800584d
 80058a0:	0800584d 	.word	0x0800584d
 80058a4:	080059f7 	.word	0x080059f7
 80058a8:	0800584d 	.word	0x0800584d
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	0800584d 	.word	0x0800584d
 80058b4:	0800584d 	.word	0x0800584d
 80058b8:	08005997 	.word	0x08005997
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	602a      	str	r2, [r5, #0]
 80058c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09f      	b.n	8005a10 <_printf_i+0x1ec>
 80058d0:	6820      	ldr	r0, [r4, #0]
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	0607      	lsls	r7, r0, #24
 80058d6:	f103 0104 	add.w	r1, r3, #4
 80058da:	6029      	str	r1, [r5, #0]
 80058dc:	d501      	bpl.n	80058e2 <_printf_i+0xbe>
 80058de:	681e      	ldr	r6, [r3, #0]
 80058e0:	e003      	b.n	80058ea <_printf_i+0xc6>
 80058e2:	0646      	lsls	r6, r0, #25
 80058e4:	d5fb      	bpl.n	80058de <_printf_i+0xba>
 80058e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ea:	2e00      	cmp	r6, #0
 80058ec:	da03      	bge.n	80058f6 <_printf_i+0xd2>
 80058ee:	232d      	movs	r3, #45	; 0x2d
 80058f0:	4276      	negs	r6, r6
 80058f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f6:	485a      	ldr	r0, [pc, #360]	; (8005a60 <_printf_i+0x23c>)
 80058f8:	230a      	movs	r3, #10
 80058fa:	e012      	b.n	8005922 <_printf_i+0xfe>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	1d19      	adds	r1, r3, #4
 8005902:	6029      	str	r1, [r5, #0]
 8005904:	0605      	lsls	r5, r0, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xe8>
 8005908:	681e      	ldr	r6, [r3, #0]
 800590a:	e002      	b.n	8005912 <_printf_i+0xee>
 800590c:	0641      	lsls	r1, r0, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xe4>
 8005910:	881e      	ldrh	r6, [r3, #0]
 8005912:	4853      	ldr	r0, [pc, #332]	; (8005a60 <_printf_i+0x23c>)
 8005914:	2f6f      	cmp	r7, #111	; 0x6f
 8005916:	bf0c      	ite	eq
 8005918:	2308      	moveq	r3, #8
 800591a:	230a      	movne	r3, #10
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005922:	6865      	ldr	r5, [r4, #4]
 8005924:	60a5      	str	r5, [r4, #8]
 8005926:	2d00      	cmp	r5, #0
 8005928:	bfa2      	ittt	ge
 800592a:	6821      	ldrge	r1, [r4, #0]
 800592c:	f021 0104 	bicge.w	r1, r1, #4
 8005930:	6021      	strge	r1, [r4, #0]
 8005932:	b90e      	cbnz	r6, 8005938 <_printf_i+0x114>
 8005934:	2d00      	cmp	r5, #0
 8005936:	d04b      	beq.n	80059d0 <_printf_i+0x1ac>
 8005938:	4615      	mov	r5, r2
 800593a:	fbb6 f1f3 	udiv	r1, r6, r3
 800593e:	fb03 6711 	mls	r7, r3, r1, r6
 8005942:	5dc7      	ldrb	r7, [r0, r7]
 8005944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005948:	4637      	mov	r7, r6
 800594a:	42bb      	cmp	r3, r7
 800594c:	460e      	mov	r6, r1
 800594e:	d9f4      	bls.n	800593a <_printf_i+0x116>
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <_printf_i+0x148>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07de      	lsls	r6, r3, #31
 8005958:	d508      	bpl.n	800596c <_printf_i+0x148>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	4299      	cmp	r1, r3
 8005960:	bfde      	ittt	le
 8005962:	2330      	movle	r3, #48	; 0x30
 8005964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005968:	f105 35ff 	addle.w	r5, r5, #4294967295
 800596c:	1b52      	subs	r2, r2, r5
 800596e:	6122      	str	r2, [r4, #16]
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	464b      	mov	r3, r9
 8005976:	aa03      	add	r2, sp, #12
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fee4 	bl	8005748 <_printf_common>
 8005980:	3001      	adds	r0, #1
 8005982:	d14a      	bne.n	8005a1a <_printf_i+0x1f6>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b004      	add	sp, #16
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	4833      	ldr	r0, [pc, #204]	; (8005a64 <_printf_i+0x240>)
 8005998:	2778      	movs	r7, #120	; 0x78
 800599a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6829      	ldr	r1, [r5, #0]
 80059a2:	061f      	lsls	r7, r3, #24
 80059a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059a8:	d402      	bmi.n	80059b0 <_printf_i+0x18c>
 80059aa:	065f      	lsls	r7, r3, #25
 80059ac:	bf48      	it	mi
 80059ae:	b2b6      	uxthmi	r6, r6
 80059b0:	07df      	lsls	r7, r3, #31
 80059b2:	bf48      	it	mi
 80059b4:	f043 0320 	orrmi.w	r3, r3, #32
 80059b8:	6029      	str	r1, [r5, #0]
 80059ba:	bf48      	it	mi
 80059bc:	6023      	strmi	r3, [r4, #0]
 80059be:	b91e      	cbnz	r6, 80059c8 <_printf_i+0x1a4>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	f023 0320 	bic.w	r3, r3, #32
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2310      	movs	r3, #16
 80059ca:	e7a7      	b.n	800591c <_printf_i+0xf8>
 80059cc:	4824      	ldr	r0, [pc, #144]	; (8005a60 <_printf_i+0x23c>)
 80059ce:	e7e4      	b.n	800599a <_printf_i+0x176>
 80059d0:	4615      	mov	r5, r2
 80059d2:	e7bd      	b.n	8005950 <_printf_i+0x12c>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6826      	ldr	r6, [r4, #0]
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6028      	str	r0, [r5, #0]
 80059de:	0635      	lsls	r5, r6, #24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0x1c4>
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0x1ca>
 80059e8:	0670      	lsls	r0, r6, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0x1c0>
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	4615      	mov	r5, r2
 80059f4:	e7bc      	b.n	8005970 <_printf_i+0x14c>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7fa fbe4 	bl	80001d0 <memchr>
 8005a08:	b108      	cbz	r0, 8005a0e <_printf_i+0x1ea>
 8005a0a:	1b40      	subs	r0, r0, r5
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	e7aa      	b.n	8005970 <_printf_i+0x14c>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0ad      	beq.n	8005984 <_printf_i+0x160>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d413      	bmi.n	8005a56 <_printf_i+0x232>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e7a6      	b.n	8005988 <_printf_i+0x164>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d09d      	beq.n	8005984 <_printf_i+0x160>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dcf2      	bgt.n	8005a3a <_printf_i+0x216>
 8005a54:	e7eb      	b.n	8005a2e <_printf_i+0x20a>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f104 0619 	add.w	r6, r4, #25
 8005a5c:	e7f5      	b.n	8005a4a <_printf_i+0x226>
 8005a5e:	bf00      	nop
 8005a60:	08009a1e 	.word	0x08009a1e
 8005a64:	08009a2f 	.word	0x08009a2f

08005a68 <_scanf_float>:
 8005a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	4617      	mov	r7, r2
 8005a70:	9303      	str	r3, [sp, #12]
 8005a72:	688b      	ldr	r3, [r1, #8]
 8005a74:	1e5a      	subs	r2, r3, #1
 8005a76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a7a:	bf83      	ittte	hi
 8005a7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a80:	195b      	addhi	r3, r3, r5
 8005a82:	9302      	strhi	r3, [sp, #8]
 8005a84:	2300      	movls	r3, #0
 8005a86:	bf86      	itte	hi
 8005a88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a8c:	608b      	strhi	r3, [r1, #8]
 8005a8e:	9302      	strls	r3, [sp, #8]
 8005a90:	680b      	ldr	r3, [r1, #0]
 8005a92:	468b      	mov	fp, r1
 8005a94:	2500      	movs	r5, #0
 8005a96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005aa2:	4680      	mov	r8, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	465e      	mov	r6, fp
 8005aa8:	46aa      	mov	sl, r5
 8005aaa:	46a9      	mov	r9, r5
 8005aac:	9501      	str	r5, [sp, #4]
 8005aae:	68a2      	ldr	r2, [r4, #8]
 8005ab0:	b152      	cbz	r2, 8005ac8 <_scanf_float+0x60>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b4e      	cmp	r3, #78	; 0x4e
 8005ab8:	d864      	bhi.n	8005b84 <_scanf_float+0x11c>
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d83c      	bhi.n	8005b38 <_scanf_float+0xd0>
 8005abe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005ac2:	b2c8      	uxtb	r0, r1
 8005ac4:	280e      	cmp	r0, #14
 8005ac6:	d93a      	bls.n	8005b3e <_scanf_float+0xd6>
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	d003      	beq.n	8005ad6 <_scanf_float+0x6e>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ada:	f1ba 0f01 	cmp.w	sl, #1
 8005ade:	f200 8113 	bhi.w	8005d08 <_scanf_float+0x2a0>
 8005ae2:	455e      	cmp	r6, fp
 8005ae4:	f200 8105 	bhi.w	8005cf2 <_scanf_float+0x28a>
 8005ae8:	2501      	movs	r5, #1
 8005aea:	4628      	mov	r0, r5
 8005aec:	b007      	add	sp, #28
 8005aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005af6:	2a0d      	cmp	r2, #13
 8005af8:	d8e6      	bhi.n	8005ac8 <_scanf_float+0x60>
 8005afa:	a101      	add	r1, pc, #4	; (adr r1, 8005b00 <_scanf_float+0x98>)
 8005afc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b00:	08005c3f 	.word	0x08005c3f
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005ac9 	.word	0x08005ac9
 8005b10:	08005c9f 	.word	0x08005c9f
 8005b14:	08005c77 	.word	0x08005c77
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c4d 	.word	0x08005c4d
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005ac9 	.word	0x08005ac9
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c05 	.word	0x08005c05
 8005b38:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b3c:	e7db      	b.n	8005af6 <_scanf_float+0x8e>
 8005b3e:	290e      	cmp	r1, #14
 8005b40:	d8c2      	bhi.n	8005ac8 <_scanf_float+0x60>
 8005b42:	a001      	add	r0, pc, #4	; (adr r0, 8005b48 <_scanf_float+0xe0>)
 8005b44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b48:	08005bf7 	.word	0x08005bf7
 8005b4c:	08005ac9 	.word	0x08005ac9
 8005b50:	08005bf7 	.word	0x08005bf7
 8005b54:	08005c8b 	.word	0x08005c8b
 8005b58:	08005ac9 	.word	0x08005ac9
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005be1 	.word	0x08005be1
 8005b64:	08005be1 	.word	0x08005be1
 8005b68:	08005be1 	.word	0x08005be1
 8005b6c:	08005be1 	.word	0x08005be1
 8005b70:	08005be1 	.word	0x08005be1
 8005b74:	08005be1 	.word	0x08005be1
 8005b78:	08005be1 	.word	0x08005be1
 8005b7c:	08005be1 	.word	0x08005be1
 8005b80:	08005be1 	.word	0x08005be1
 8005b84:	2b6e      	cmp	r3, #110	; 0x6e
 8005b86:	d809      	bhi.n	8005b9c <_scanf_float+0x134>
 8005b88:	2b60      	cmp	r3, #96	; 0x60
 8005b8a:	d8b2      	bhi.n	8005af2 <_scanf_float+0x8a>
 8005b8c:	2b54      	cmp	r3, #84	; 0x54
 8005b8e:	d077      	beq.n	8005c80 <_scanf_float+0x218>
 8005b90:	2b59      	cmp	r3, #89	; 0x59
 8005b92:	d199      	bne.n	8005ac8 <_scanf_float+0x60>
 8005b94:	2d07      	cmp	r5, #7
 8005b96:	d197      	bne.n	8005ac8 <_scanf_float+0x60>
 8005b98:	2508      	movs	r5, #8
 8005b9a:	e029      	b.n	8005bf0 <_scanf_float+0x188>
 8005b9c:	2b74      	cmp	r3, #116	; 0x74
 8005b9e:	d06f      	beq.n	8005c80 <_scanf_float+0x218>
 8005ba0:	2b79      	cmp	r3, #121	; 0x79
 8005ba2:	e7f6      	b.n	8005b92 <_scanf_float+0x12a>
 8005ba4:	6821      	ldr	r1, [r4, #0]
 8005ba6:	05c8      	lsls	r0, r1, #23
 8005ba8:	d51a      	bpl.n	8005be0 <_scanf_float+0x178>
 8005baa:	9b02      	ldr	r3, [sp, #8]
 8005bac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005bb0:	6021      	str	r1, [r4, #0]
 8005bb2:	f109 0901 	add.w	r9, r9, #1
 8005bb6:	b11b      	cbz	r3, 8005bc0 <_scanf_float+0x158>
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	3201      	adds	r2, #1
 8005bbc:	9302      	str	r3, [sp, #8]
 8005bbe:	60a2      	str	r2, [r4, #8]
 8005bc0:	68a3      	ldr	r3, [r4, #8]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	60a3      	str	r3, [r4, #8]
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	f340 8084 	ble.w	8005ce0 <_scanf_float+0x278>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	e766      	b.n	8005aae <_scanf_float+0x46>
 8005be0:	eb1a 0f05 	cmn.w	sl, r5
 8005be4:	f47f af70 	bne.w	8005ac8 <_scanf_float+0x60>
 8005be8:	6822      	ldr	r2, [r4, #0]
 8005bea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005bee:	6022      	str	r2, [r4, #0]
 8005bf0:	f806 3b01 	strb.w	r3, [r6], #1
 8005bf4:	e7e4      	b.n	8005bc0 <_scanf_float+0x158>
 8005bf6:	6822      	ldr	r2, [r4, #0]
 8005bf8:	0610      	lsls	r0, r2, #24
 8005bfa:	f57f af65 	bpl.w	8005ac8 <_scanf_float+0x60>
 8005bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c02:	e7f4      	b.n	8005bee <_scanf_float+0x186>
 8005c04:	f1ba 0f00 	cmp.w	sl, #0
 8005c08:	d10e      	bne.n	8005c28 <_scanf_float+0x1c0>
 8005c0a:	f1b9 0f00 	cmp.w	r9, #0
 8005c0e:	d10e      	bne.n	8005c2e <_scanf_float+0x1c6>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c16:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c1a:	d108      	bne.n	8005c2e <_scanf_float+0x1c6>
 8005c1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c20:	6022      	str	r2, [r4, #0]
 8005c22:	f04f 0a01 	mov.w	sl, #1
 8005c26:	e7e3      	b.n	8005bf0 <_scanf_float+0x188>
 8005c28:	f1ba 0f02 	cmp.w	sl, #2
 8005c2c:	d055      	beq.n	8005cda <_scanf_float+0x272>
 8005c2e:	2d01      	cmp	r5, #1
 8005c30:	d002      	beq.n	8005c38 <_scanf_float+0x1d0>
 8005c32:	2d04      	cmp	r5, #4
 8005c34:	f47f af48 	bne.w	8005ac8 <_scanf_float+0x60>
 8005c38:	3501      	adds	r5, #1
 8005c3a:	b2ed      	uxtb	r5, r5
 8005c3c:	e7d8      	b.n	8005bf0 <_scanf_float+0x188>
 8005c3e:	f1ba 0f01 	cmp.w	sl, #1
 8005c42:	f47f af41 	bne.w	8005ac8 <_scanf_float+0x60>
 8005c46:	f04f 0a02 	mov.w	sl, #2
 8005c4a:	e7d1      	b.n	8005bf0 <_scanf_float+0x188>
 8005c4c:	b97d      	cbnz	r5, 8005c6e <_scanf_float+0x206>
 8005c4e:	f1b9 0f00 	cmp.w	r9, #0
 8005c52:	f47f af3c 	bne.w	8005ace <_scanf_float+0x66>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c5c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c60:	f47f af39 	bne.w	8005ad6 <_scanf_float+0x6e>
 8005c64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c68:	6022      	str	r2, [r4, #0]
 8005c6a:	2501      	movs	r5, #1
 8005c6c:	e7c0      	b.n	8005bf0 <_scanf_float+0x188>
 8005c6e:	2d03      	cmp	r5, #3
 8005c70:	d0e2      	beq.n	8005c38 <_scanf_float+0x1d0>
 8005c72:	2d05      	cmp	r5, #5
 8005c74:	e7de      	b.n	8005c34 <_scanf_float+0x1cc>
 8005c76:	2d02      	cmp	r5, #2
 8005c78:	f47f af26 	bne.w	8005ac8 <_scanf_float+0x60>
 8005c7c:	2503      	movs	r5, #3
 8005c7e:	e7b7      	b.n	8005bf0 <_scanf_float+0x188>
 8005c80:	2d06      	cmp	r5, #6
 8005c82:	f47f af21 	bne.w	8005ac8 <_scanf_float+0x60>
 8005c86:	2507      	movs	r5, #7
 8005c88:	e7b2      	b.n	8005bf0 <_scanf_float+0x188>
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	0591      	lsls	r1, r2, #22
 8005c8e:	f57f af1b 	bpl.w	8005ac8 <_scanf_float+0x60>
 8005c92:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c9c:	e7a8      	b.n	8005bf0 <_scanf_float+0x188>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ca4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ca8:	d006      	beq.n	8005cb8 <_scanf_float+0x250>
 8005caa:	0550      	lsls	r0, r2, #21
 8005cac:	f57f af0c 	bpl.w	8005ac8 <_scanf_float+0x60>
 8005cb0:	f1b9 0f00 	cmp.w	r9, #0
 8005cb4:	f43f af0f 	beq.w	8005ad6 <_scanf_float+0x6e>
 8005cb8:	0591      	lsls	r1, r2, #22
 8005cba:	bf58      	it	pl
 8005cbc:	9901      	ldrpl	r1, [sp, #4]
 8005cbe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cc2:	bf58      	it	pl
 8005cc4:	eba9 0101 	subpl.w	r1, r9, r1
 8005cc8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ccc:	bf58      	it	pl
 8005cce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005cd2:	6022      	str	r2, [r4, #0]
 8005cd4:	f04f 0900 	mov.w	r9, #0
 8005cd8:	e78a      	b.n	8005bf0 <_scanf_float+0x188>
 8005cda:	f04f 0a03 	mov.w	sl, #3
 8005cde:	e787      	b.n	8005bf0 <_scanf_float+0x188>
 8005ce0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4798      	blx	r3
 8005cea:	2800      	cmp	r0, #0
 8005cec:	f43f aedf 	beq.w	8005aae <_scanf_float+0x46>
 8005cf0:	e6ea      	b.n	8005ac8 <_scanf_float+0x60>
 8005cf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cfa:	463a      	mov	r2, r7
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	4798      	blx	r3
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	e6ec      	b.n	8005ae2 <_scanf_float+0x7a>
 8005d08:	1e6b      	subs	r3, r5, #1
 8005d0a:	2b06      	cmp	r3, #6
 8005d0c:	d825      	bhi.n	8005d5a <_scanf_float+0x2f2>
 8005d0e:	2d02      	cmp	r5, #2
 8005d10:	d836      	bhi.n	8005d80 <_scanf_float+0x318>
 8005d12:	455e      	cmp	r6, fp
 8005d14:	f67f aee8 	bls.w	8005ae8 <_scanf_float+0x80>
 8005d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d20:	463a      	mov	r2, r7
 8005d22:	4640      	mov	r0, r8
 8005d24:	4798      	blx	r3
 8005d26:	6923      	ldr	r3, [r4, #16]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	6123      	str	r3, [r4, #16]
 8005d2c:	e7f1      	b.n	8005d12 <_scanf_float+0x2aa>
 8005d2e:	9802      	ldr	r0, [sp, #8]
 8005d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d34:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	463a      	mov	r2, r7
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	4798      	blx	r3
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d4a:	fa5f fa8a 	uxtb.w	sl, sl
 8005d4e:	f1ba 0f02 	cmp.w	sl, #2
 8005d52:	d1ec      	bne.n	8005d2e <_scanf_float+0x2c6>
 8005d54:	3d03      	subs	r5, #3
 8005d56:	b2ed      	uxtb	r5, r5
 8005d58:	1b76      	subs	r6, r6, r5
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	05da      	lsls	r2, r3, #23
 8005d5e:	d52f      	bpl.n	8005dc0 <_scanf_float+0x358>
 8005d60:	055b      	lsls	r3, r3, #21
 8005d62:	d510      	bpl.n	8005d86 <_scanf_float+0x31e>
 8005d64:	455e      	cmp	r6, fp
 8005d66:	f67f aebf 	bls.w	8005ae8 <_scanf_float+0x80>
 8005d6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d72:	463a      	mov	r2, r7
 8005d74:	4640      	mov	r0, r8
 8005d76:	4798      	blx	r3
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	e7f1      	b.n	8005d64 <_scanf_float+0x2fc>
 8005d80:	46aa      	mov	sl, r5
 8005d82:	9602      	str	r6, [sp, #8]
 8005d84:	e7df      	b.n	8005d46 <_scanf_float+0x2de>
 8005d86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	2965      	cmp	r1, #101	; 0x65
 8005d8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d92:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d96:	6123      	str	r3, [r4, #16]
 8005d98:	d00c      	beq.n	8005db4 <_scanf_float+0x34c>
 8005d9a:	2945      	cmp	r1, #69	; 0x45
 8005d9c:	d00a      	beq.n	8005db4 <_scanf_float+0x34c>
 8005d9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da2:	463a      	mov	r2, r7
 8005da4:	4640      	mov	r0, r8
 8005da6:	4798      	blx	r3
 8005da8:	6923      	ldr	r3, [r4, #16]
 8005daa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	1eb5      	subs	r5, r6, #2
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005db8:	463a      	mov	r2, r7
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4798      	blx	r3
 8005dbe:	462e      	mov	r6, r5
 8005dc0:	6825      	ldr	r5, [r4, #0]
 8005dc2:	f015 0510 	ands.w	r5, r5, #16
 8005dc6:	d158      	bne.n	8005e7a <_scanf_float+0x412>
 8005dc8:	7035      	strb	r5, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d11c      	bne.n	8005e10 <_scanf_float+0x3a8>
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	454b      	cmp	r3, r9
 8005dda:	eba3 0209 	sub.w	r2, r3, r9
 8005dde:	d124      	bne.n	8005e2a <_scanf_float+0x3c2>
 8005de0:	2200      	movs	r2, #0
 8005de2:	4659      	mov	r1, fp
 8005de4:	4640      	mov	r0, r8
 8005de6:	f002 fc43 	bl	8008670 <_strtod_r>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	6821      	ldr	r1, [r4, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f011 0f02 	tst.w	r1, #2
 8005df4:	ec57 6b10 	vmov	r6, r7, d0
 8005df8:	f103 0204 	add.w	r2, r3, #4
 8005dfc:	d020      	beq.n	8005e40 <_scanf_float+0x3d8>
 8005dfe:	9903      	ldr	r1, [sp, #12]
 8005e00:	600a      	str	r2, [r1, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	e9c3 6700 	strd	r6, r7, [r3]
 8005e08:	68e3      	ldr	r3, [r4, #12]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	60e3      	str	r3, [r4, #12]
 8005e0e:	e66c      	b.n	8005aea <_scanf_float+0x82>
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0e4      	beq.n	8005de0 <_scanf_float+0x378>
 8005e16:	9905      	ldr	r1, [sp, #20]
 8005e18:	230a      	movs	r3, #10
 8005e1a:	462a      	mov	r2, r5
 8005e1c:	3101      	adds	r1, #1
 8005e1e:	4640      	mov	r0, r8
 8005e20:	f002 fcae 	bl	8008780 <_strtol_r>
 8005e24:	9b04      	ldr	r3, [sp, #16]
 8005e26:	9e05      	ldr	r6, [sp, #20]
 8005e28:	1ac2      	subs	r2, r0, r3
 8005e2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e2e:	429e      	cmp	r6, r3
 8005e30:	bf28      	it	cs
 8005e32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e36:	4912      	ldr	r1, [pc, #72]	; (8005e80 <_scanf_float+0x418>)
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 f8f9 	bl	8006030 <siprintf>
 8005e3e:	e7cf      	b.n	8005de0 <_scanf_float+0x378>
 8005e40:	f011 0f04 	tst.w	r1, #4
 8005e44:	9903      	ldr	r1, [sp, #12]
 8005e46:	600a      	str	r2, [r1, #0]
 8005e48:	d1db      	bne.n	8005e02 <_scanf_float+0x39a>
 8005e4a:	f8d3 8000 	ldr.w	r8, [r3]
 8005e4e:	ee10 2a10 	vmov	r2, s0
 8005e52:	ee10 0a10 	vmov	r0, s0
 8005e56:	463b      	mov	r3, r7
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa fe67 	bl	8000b2c <__aeabi_dcmpun>
 8005e5e:	b128      	cbz	r0, 8005e6c <_scanf_float+0x404>
 8005e60:	4808      	ldr	r0, [pc, #32]	; (8005e84 <_scanf_float+0x41c>)
 8005e62:	f000 f9c9 	bl	80061f8 <nanf>
 8005e66:	ed88 0a00 	vstr	s0, [r8]
 8005e6a:	e7cd      	b.n	8005e08 <_scanf_float+0x3a0>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	4639      	mov	r1, r7
 8005e70:	f7fa feba 	bl	8000be8 <__aeabi_d2f>
 8005e74:	f8c8 0000 	str.w	r0, [r8]
 8005e78:	e7c6      	b.n	8005e08 <_scanf_float+0x3a0>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	e635      	b.n	8005aea <_scanf_float+0x82>
 8005e7e:	bf00      	nop
 8005e80:	08009a40 	.word	0x08009a40
 8005e84:	08009dd5 	.word	0x08009dd5

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	; 0x5c
 8005ea6:	f000 f926 	bl	80060f6 <memset>
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <std+0x58>)
 8005eac:	6263      	str	r3, [r4, #36]	; 0x24
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <std+0x5c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <std+0x60>)
 8005eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <std+0x64>)
 8005eb8:	6323      	str	r3, [r4, #48]	; 0x30
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <std+0x68>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d006      	beq.n	8005ed0 <std+0x48>
 8005ec2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ec6:	4294      	cmp	r4, r2
 8005ec8:	d002      	beq.n	8005ed0 <std+0x48>
 8005eca:	33d0      	adds	r3, #208	; 0xd0
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d105      	bne.n	8005edc <std+0x54>
 8005ed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 b98a 	b.w	80061f0 <__retarget_lock_init_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	08006071 	.word	0x08006071
 8005ee4:	08006093 	.word	0x08006093
 8005ee8:	080060cb 	.word	0x080060cb
 8005eec:	080060ef 	.word	0x080060ef
 8005ef0:	200002e8 	.word	0x200002e8

08005ef4 <stdio_exit_handler>:
 8005ef4:	4a02      	ldr	r2, [pc, #8]	; (8005f00 <stdio_exit_handler+0xc>)
 8005ef6:	4903      	ldr	r1, [pc, #12]	; (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4803      	ldr	r0, [pc, #12]	; (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	f000 b869 	b.w	8005fd0 <_fwalk_sglue>
 8005efe:	bf00      	nop
 8005f00:	2000000c 	.word	0x2000000c
 8005f04:	08008dc9 	.word	0x08008dc9
 8005f08:	20000018 	.word	0x20000018

08005f0c <cleanup_stdio>:
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <cleanup_stdio+0x34>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d001      	beq.n	8005f1c <cleanup_stdio+0x10>
 8005f18:	f002 ff56 	bl	8008dc8 <_fflush_r>
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <cleanup_stdio+0x38>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <cleanup_stdio+0x1e>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f002 ff4f 	bl	8008dc8 <_fflush_r>
 8005f2a:	68e1      	ldr	r1, [r4, #12]
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <cleanup_stdio+0x3c>)
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d004      	beq.n	8005f3c <cleanup_stdio+0x30>
 8005f32:	4620      	mov	r0, r4
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f002 bf46 	b.w	8008dc8 <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	200002e8 	.word	0x200002e8
 8005f44:	20000350 	.word	0x20000350
 8005f48:	200003b8 	.word	0x200003b8

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <global_stdio_init.part.0+0x30>)
 8005f50:	4c0b      	ldr	r4, [pc, #44]	; (8005f80 <global_stdio_init.part.0+0x34>)
 8005f52:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <global_stdio_init.part.0+0x38>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	f7ff ff94 	bl	8005e88 <std>
 8005f60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f64:	2201      	movs	r2, #1
 8005f66:	2109      	movs	r1, #9
 8005f68:	f7ff ff8e 	bl	8005e88 <std>
 8005f6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f70:	2202      	movs	r2, #2
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff bf86 	b.w	8005e88 <std>
 8005f7c:	20000420 	.word	0x20000420
 8005f80:	200002e8 	.word	0x200002e8
 8005f84:	08005ef5 	.word	0x08005ef5

08005f88 <__sfp_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__sfp_lock_acquire+0x8>)
 8005f8a:	f000 b932 	b.w	80061f2 <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000429 	.word	0x20000429

08005f94 <__sfp_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__sfp_lock_release+0x8>)
 8005f96:	f000 b92d 	b.w	80061f4 <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000429 	.word	0x20000429

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sfp_lock_acquire>
 8005fa8:	6a23      	ldr	r3, [r4, #32]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sfp_lock_release>
 8005fb4:	4b04      	ldr	r3, [pc, #16]	; (8005fc8 <__sinit+0x28>)
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <__sinit+0x2c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <__sinit+0xc>
 8005fc0:	f7ff ffc4 	bl	8005f4c <global_stdio_init.part.0>
 8005fc4:	e7f2      	b.n	8005fac <__sinit+0xc>
 8005fc6:	bf00      	nop
 8005fc8:	08005f0d 	.word	0x08005f0d
 8005fcc:	20000420 	.word	0x20000420

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	; 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <iprintf>:
 800600c:	b40f      	push	{r0, r1, r2, r3}
 800600e:	b507      	push	{r0, r1, r2, lr}
 8006010:	4906      	ldr	r1, [pc, #24]	; (800602c <iprintf+0x20>)
 8006012:	ab04      	add	r3, sp, #16
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	f853 2b04 	ldr.w	r2, [r3], #4
 800601a:	6881      	ldr	r1, [r0, #8]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	f002 fd33 	bl	8008a88 <_vfiprintf_r>
 8006022:	b003      	add	sp, #12
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b004      	add	sp, #16
 800602a:	4770      	bx	lr
 800602c:	20000064 	.word	0x20000064

08006030 <siprintf>:
 8006030:	b40e      	push	{r1, r2, r3}
 8006032:	b500      	push	{lr}
 8006034:	b09c      	sub	sp, #112	; 0x70
 8006036:	ab1d      	add	r3, sp, #116	; 0x74
 8006038:	9002      	str	r0, [sp, #8]
 800603a:	9006      	str	r0, [sp, #24]
 800603c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006040:	4809      	ldr	r0, [pc, #36]	; (8006068 <siprintf+0x38>)
 8006042:	9107      	str	r1, [sp, #28]
 8006044:	9104      	str	r1, [sp, #16]
 8006046:	4909      	ldr	r1, [pc, #36]	; (800606c <siprintf+0x3c>)
 8006048:	f853 2b04 	ldr.w	r2, [r3], #4
 800604c:	9105      	str	r1, [sp, #20]
 800604e:	6800      	ldr	r0, [r0, #0]
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	a902      	add	r1, sp, #8
 8006054:	f002 fbf0 	bl	8008838 <_svfiprintf_r>
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	b01c      	add	sp, #112	; 0x70
 8006060:	f85d eb04 	ldr.w	lr, [sp], #4
 8006064:	b003      	add	sp, #12
 8006066:	4770      	bx	lr
 8006068:	20000064 	.word	0x20000064
 800606c:	ffff0208 	.word	0xffff0208

08006070 <__sread>:
 8006070:	b510      	push	{r4, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	f000 f86c 	bl	8006154 <_read_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	bfab      	itete	ge
 8006080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006082:	89a3      	ldrhlt	r3, [r4, #12]
 8006084:	181b      	addge	r3, r3, r0
 8006086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800608a:	bfac      	ite	ge
 800608c:	6563      	strge	r3, [r4, #84]	; 0x54
 800608e:	81a3      	strhlt	r3, [r4, #12]
 8006090:	bd10      	pop	{r4, pc}

08006092 <__swrite>:
 8006092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	461f      	mov	r7, r3
 8006098:	898b      	ldrh	r3, [r1, #12]
 800609a:	05db      	lsls	r3, r3, #23
 800609c:	4605      	mov	r5, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4616      	mov	r6, r2
 80060a2:	d505      	bpl.n	80060b0 <__swrite+0x1e>
 80060a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a8:	2302      	movs	r3, #2
 80060aa:	2200      	movs	r2, #0
 80060ac:	f000 f840 	bl	8006130 <_lseek_r>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	4632      	mov	r2, r6
 80060be:	463b      	mov	r3, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	f000 b857 	b.w	8006178 <_write_r>

080060ca <__sseek>:
 80060ca:	b510      	push	{r4, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d2:	f000 f82d 	bl	8006130 <_lseek_r>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	bf15      	itete	ne
 80060dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80060de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060e6:	81a3      	strheq	r3, [r4, #12]
 80060e8:	bf18      	it	ne
 80060ea:	81a3      	strhne	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__sclose>:
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 b80d 	b.w	8006110 <_close_r>

080060f6 <memset>:
 80060f6:	4402      	add	r2, r0
 80060f8:	4603      	mov	r3, r0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d100      	bne.n	8006100 <memset+0xa>
 80060fe:	4770      	bx	lr
 8006100:	f803 1b01 	strb.w	r1, [r3], #1
 8006104:	e7f9      	b.n	80060fa <memset+0x4>
	...

08006108 <_localeconv_r>:
 8006108:	4800      	ldr	r0, [pc, #0]	; (800610c <_localeconv_r+0x4>)
 800610a:	4770      	bx	lr
 800610c:	20000158 	.word	0x20000158

08006110 <_close_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d06      	ldr	r5, [pc, #24]	; (800612c <_close_r+0x1c>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fb fac6 	bl	80016ac <_close>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_close_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_close_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20000424 	.word	0x20000424

08006130 <_lseek_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	; (8006150 <_lseek_r+0x20>)
 8006134:	4604      	mov	r4, r0
 8006136:	4608      	mov	r0, r1
 8006138:	4611      	mov	r1, r2
 800613a:	2200      	movs	r2, #0
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fb fadb 	bl	80016fa <_lseek>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_lseek_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_lseek_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000424 	.word	0x20000424

08006154 <_read_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	; (8006174 <_read_r+0x20>)
 8006158:	4604      	mov	r4, r0
 800615a:	4608      	mov	r0, r1
 800615c:	4611      	mov	r1, r2
 800615e:	2200      	movs	r2, #0
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fb fa62 	bl	800162c <_read>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_read_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_read_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000424 	.word	0x20000424

08006178 <_write_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	; (8006198 <_write_r+0x20>)
 800617c:	4604      	mov	r4, r0
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	2200      	movs	r2, #0
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fb fa6e 	bl	8001668 <_write>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_write_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_write_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000424 	.word	0x20000424

0800619c <__errno>:
 800619c:	4b01      	ldr	r3, [pc, #4]	; (80061a4 <__errno+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000064 	.word	0x20000064

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4d0d      	ldr	r5, [pc, #52]	; (80061e0 <__libc_init_array+0x38>)
 80061ac:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061ae:	1b64      	subs	r4, r4, r5
 80061b0:	10a4      	asrs	r4, r4, #2
 80061b2:	2600      	movs	r6, #0
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	4d0b      	ldr	r5, [pc, #44]	; (80061e8 <__libc_init_array+0x40>)
 80061ba:	4c0c      	ldr	r4, [pc, #48]	; (80061ec <__libc_init_array+0x44>)
 80061bc:	f003 fbd8 	bl	8009970 <_init>
 80061c0:	1b64      	subs	r4, r4, r5
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	2600      	movs	r6, #0
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	08009e40 	.word	0x08009e40
 80061e4:	08009e40 	.word	0x08009e40
 80061e8:	08009e40 	.word	0x08009e40
 80061ec:	08009e44 	.word	0x08009e44

080061f0 <__retarget_lock_init_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <__retarget_lock_acquire_recursive>:
 80061f2:	4770      	bx	lr

080061f4 <__retarget_lock_release_recursive>:
 80061f4:	4770      	bx	lr
	...

080061f8 <nanf>:
 80061f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006200 <nanf+0x8>
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	7fc00000 	.word	0x7fc00000

08006204 <quorem>:
 8006204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	6903      	ldr	r3, [r0, #16]
 800620a:	690c      	ldr	r4, [r1, #16]
 800620c:	42a3      	cmp	r3, r4
 800620e:	4607      	mov	r7, r0
 8006210:	db7e      	blt.n	8006310 <quorem+0x10c>
 8006212:	3c01      	subs	r4, #1
 8006214:	f101 0814 	add.w	r8, r1, #20
 8006218:	f100 0514 	add.w	r5, r0, #20
 800621c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800622a:	3301      	adds	r3, #1
 800622c:	429a      	cmp	r2, r3
 800622e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006232:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006236:	fbb2 f6f3 	udiv	r6, r2, r3
 800623a:	d331      	bcc.n	80062a0 <quorem+0x9c>
 800623c:	f04f 0e00 	mov.w	lr, #0
 8006240:	4640      	mov	r0, r8
 8006242:	46ac      	mov	ip, r5
 8006244:	46f2      	mov	sl, lr
 8006246:	f850 2b04 	ldr.w	r2, [r0], #4
 800624a:	b293      	uxth	r3, r2
 800624c:	fb06 e303 	mla	r3, r6, r3, lr
 8006250:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006254:	0c1a      	lsrs	r2, r3, #16
 8006256:	b29b      	uxth	r3, r3
 8006258:	ebaa 0303 	sub.w	r3, sl, r3
 800625c:	f8dc a000 	ldr.w	sl, [ip]
 8006260:	fa13 f38a 	uxtah	r3, r3, sl
 8006264:	fb06 220e 	mla	r2, r6, lr, r2
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	9b00      	ldr	r3, [sp, #0]
 800626c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006270:	b292      	uxth	r2, r2
 8006272:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006276:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800627a:	f8bd 3000 	ldrh.w	r3, [sp]
 800627e:	4581      	cmp	r9, r0
 8006280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006284:	f84c 3b04 	str.w	r3, [ip], #4
 8006288:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800628c:	d2db      	bcs.n	8006246 <quorem+0x42>
 800628e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006292:	b92b      	cbnz	r3, 80062a0 <quorem+0x9c>
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	3b04      	subs	r3, #4
 8006298:	429d      	cmp	r5, r3
 800629a:	461a      	mov	r2, r3
 800629c:	d32c      	bcc.n	80062f8 <quorem+0xf4>
 800629e:	613c      	str	r4, [r7, #16]
 80062a0:	4638      	mov	r0, r7
 80062a2:	f001 f9f1 	bl	8007688 <__mcmp>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	db22      	blt.n	80062f0 <quorem+0xec>
 80062aa:	3601      	adds	r6, #1
 80062ac:	4629      	mov	r1, r5
 80062ae:	2000      	movs	r0, #0
 80062b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062b4:	f8d1 c000 	ldr.w	ip, [r1]
 80062b8:	b293      	uxth	r3, r2
 80062ba:	1ac3      	subs	r3, r0, r3
 80062bc:	0c12      	lsrs	r2, r2, #16
 80062be:	fa13 f38c 	uxtah	r3, r3, ip
 80062c2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80062c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062d0:	45c1      	cmp	r9, r8
 80062d2:	f841 3b04 	str.w	r3, [r1], #4
 80062d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062da:	d2e9      	bcs.n	80062b0 <quorem+0xac>
 80062dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062e4:	b922      	cbnz	r2, 80062f0 <quorem+0xec>
 80062e6:	3b04      	subs	r3, #4
 80062e8:	429d      	cmp	r5, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	d30a      	bcc.n	8006304 <quorem+0x100>
 80062ee:	613c      	str	r4, [r7, #16]
 80062f0:	4630      	mov	r0, r6
 80062f2:	b003      	add	sp, #12
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	3b04      	subs	r3, #4
 80062fc:	2a00      	cmp	r2, #0
 80062fe:	d1ce      	bne.n	800629e <quorem+0x9a>
 8006300:	3c01      	subs	r4, #1
 8006302:	e7c9      	b.n	8006298 <quorem+0x94>
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	3b04      	subs	r3, #4
 8006308:	2a00      	cmp	r2, #0
 800630a:	d1f0      	bne.n	80062ee <quorem+0xea>
 800630c:	3c01      	subs	r4, #1
 800630e:	e7eb      	b.n	80062e8 <quorem+0xe4>
 8006310:	2000      	movs	r0, #0
 8006312:	e7ee      	b.n	80062f2 <quorem+0xee>
 8006314:	0000      	movs	r0, r0
	...

08006318 <_dtoa_r>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	ed2d 8b04 	vpush	{d8-d9}
 8006320:	69c5      	ldr	r5, [r0, #28]
 8006322:	b093      	sub	sp, #76	; 0x4c
 8006324:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006328:	ec57 6b10 	vmov	r6, r7, d0
 800632c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006330:	9107      	str	r1, [sp, #28]
 8006332:	4604      	mov	r4, r0
 8006334:	920a      	str	r2, [sp, #40]	; 0x28
 8006336:	930d      	str	r3, [sp, #52]	; 0x34
 8006338:	b975      	cbnz	r5, 8006358 <_dtoa_r+0x40>
 800633a:	2010      	movs	r0, #16
 800633c:	f000 fe2a 	bl	8006f94 <malloc>
 8006340:	4602      	mov	r2, r0
 8006342:	61e0      	str	r0, [r4, #28]
 8006344:	b920      	cbnz	r0, 8006350 <_dtoa_r+0x38>
 8006346:	4bae      	ldr	r3, [pc, #696]	; (8006600 <_dtoa_r+0x2e8>)
 8006348:	21ef      	movs	r1, #239	; 0xef
 800634a:	48ae      	ldr	r0, [pc, #696]	; (8006604 <_dtoa_r+0x2ec>)
 800634c:	f002 fe4c 	bl	8008fe8 <__assert_func>
 8006350:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006354:	6005      	str	r5, [r0, #0]
 8006356:	60c5      	str	r5, [r0, #12]
 8006358:	69e3      	ldr	r3, [r4, #28]
 800635a:	6819      	ldr	r1, [r3, #0]
 800635c:	b151      	cbz	r1, 8006374 <_dtoa_r+0x5c>
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	604a      	str	r2, [r1, #4]
 8006362:	2301      	movs	r3, #1
 8006364:	4093      	lsls	r3, r2
 8006366:	608b      	str	r3, [r1, #8]
 8006368:	4620      	mov	r0, r4
 800636a:	f000 ff07 	bl	800717c <_Bfree>
 800636e:	69e3      	ldr	r3, [r4, #28]
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	1e3b      	subs	r3, r7, #0
 8006376:	bfbb      	ittet	lt
 8006378:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800637c:	9303      	strlt	r3, [sp, #12]
 800637e:	2300      	movge	r3, #0
 8006380:	2201      	movlt	r2, #1
 8006382:	bfac      	ite	ge
 8006384:	f8c8 3000 	strge.w	r3, [r8]
 8006388:	f8c8 2000 	strlt.w	r2, [r8]
 800638c:	4b9e      	ldr	r3, [pc, #632]	; (8006608 <_dtoa_r+0x2f0>)
 800638e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006392:	ea33 0308 	bics.w	r3, r3, r8
 8006396:	d11b      	bne.n	80063d0 <_dtoa_r+0xb8>
 8006398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800639a:	f242 730f 	movw	r3, #9999	; 0x270f
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063a4:	4333      	orrs	r3, r6
 80063a6:	f000 8593 	beq.w	8006ed0 <_dtoa_r+0xbb8>
 80063aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063ac:	b963      	cbnz	r3, 80063c8 <_dtoa_r+0xb0>
 80063ae:	4b97      	ldr	r3, [pc, #604]	; (800660c <_dtoa_r+0x2f4>)
 80063b0:	e027      	b.n	8006402 <_dtoa_r+0xea>
 80063b2:	4b97      	ldr	r3, [pc, #604]	; (8006610 <_dtoa_r+0x2f8>)
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	9800      	ldr	r0, [sp, #0]
 80063be:	b013      	add	sp, #76	; 0x4c
 80063c0:	ecbd 8b04 	vpop	{d8-d9}
 80063c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c8:	4b90      	ldr	r3, [pc, #576]	; (800660c <_dtoa_r+0x2f4>)
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	3303      	adds	r3, #3
 80063ce:	e7f3      	b.n	80063b8 <_dtoa_r+0xa0>
 80063d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063d4:	2200      	movs	r2, #0
 80063d6:	ec51 0b17 	vmov	r0, r1, d7
 80063da:	eeb0 8a47 	vmov.f32	s16, s14
 80063de:	eef0 8a67 	vmov.f32	s17, s15
 80063e2:	2300      	movs	r3, #0
 80063e4:	f7fa fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e8:	4681      	mov	r9, r0
 80063ea:	b160      	cbz	r0, 8006406 <_dtoa_r+0xee>
 80063ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ee:	2301      	movs	r3, #1
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8568 	beq.w	8006eca <_dtoa_r+0xbb2>
 80063fa:	4b86      	ldr	r3, [pc, #536]	; (8006614 <_dtoa_r+0x2fc>)
 80063fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	3b01      	subs	r3, #1
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	e7da      	b.n	80063bc <_dtoa_r+0xa4>
 8006406:	aa10      	add	r2, sp, #64	; 0x40
 8006408:	a911      	add	r1, sp, #68	; 0x44
 800640a:	4620      	mov	r0, r4
 800640c:	eeb0 0a48 	vmov.f32	s0, s16
 8006410:	eef0 0a68 	vmov.f32	s1, s17
 8006414:	f001 fa4e 	bl	80078b4 <__d2b>
 8006418:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800641c:	4682      	mov	sl, r0
 800641e:	2d00      	cmp	r5, #0
 8006420:	d07f      	beq.n	8006522 <_dtoa_r+0x20a>
 8006422:	ee18 3a90 	vmov	r3, s17
 8006426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800642a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800642e:	ec51 0b18 	vmov	r0, r1, d8
 8006432:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800643a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800643e:	4619      	mov	r1, r3
 8006440:	2200      	movs	r2, #0
 8006442:	4b75      	ldr	r3, [pc, #468]	; (8006618 <_dtoa_r+0x300>)
 8006444:	f7f9 ff20 	bl	8000288 <__aeabi_dsub>
 8006448:	a367      	add	r3, pc, #412	; (adr r3, 80065e8 <_dtoa_r+0x2d0>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7fa f8d3 	bl	80005f8 <__aeabi_dmul>
 8006452:	a367      	add	r3, pc, #412	; (adr r3, 80065f0 <_dtoa_r+0x2d8>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f7f9 ff18 	bl	800028c <__adddf3>
 800645c:	4606      	mov	r6, r0
 800645e:	4628      	mov	r0, r5
 8006460:	460f      	mov	r7, r1
 8006462:	f7fa f85f 	bl	8000524 <__aeabi_i2d>
 8006466:	a364      	add	r3, pc, #400	; (adr r3, 80065f8 <_dtoa_r+0x2e0>)
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	f7fa f8c4 	bl	80005f8 <__aeabi_dmul>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	f7f9 ff08 	bl	800028c <__adddf3>
 800647c:	4606      	mov	r6, r0
 800647e:	460f      	mov	r7, r1
 8006480:	f7fa fb6a 	bl	8000b58 <__aeabi_d2iz>
 8006484:	2200      	movs	r2, #0
 8006486:	4683      	mov	fp, r0
 8006488:	2300      	movs	r3, #0
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa fb25 	bl	8000adc <__aeabi_dcmplt>
 8006492:	b148      	cbz	r0, 80064a8 <_dtoa_r+0x190>
 8006494:	4658      	mov	r0, fp
 8006496:	f7fa f845 	bl	8000524 <__aeabi_i2d>
 800649a:	4632      	mov	r2, r6
 800649c:	463b      	mov	r3, r7
 800649e:	f7fa fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a2:	b908      	cbnz	r0, 80064a8 <_dtoa_r+0x190>
 80064a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064a8:	f1bb 0f16 	cmp.w	fp, #22
 80064ac:	d857      	bhi.n	800655e <_dtoa_r+0x246>
 80064ae:	4b5b      	ldr	r3, [pc, #364]	; (800661c <_dtoa_r+0x304>)
 80064b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	ec51 0b18 	vmov	r0, r1, d8
 80064bc:	f7fa fb0e 	bl	8000adc <__aeabi_dcmplt>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d04e      	beq.n	8006562 <_dtoa_r+0x24a>
 80064c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064c8:	2300      	movs	r3, #0
 80064ca:	930c      	str	r3, [sp, #48]	; 0x30
 80064cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ce:	1b5b      	subs	r3, r3, r5
 80064d0:	1e5a      	subs	r2, r3, #1
 80064d2:	bf45      	ittet	mi
 80064d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80064d8:	9305      	strmi	r3, [sp, #20]
 80064da:	2300      	movpl	r3, #0
 80064dc:	2300      	movmi	r3, #0
 80064de:	9206      	str	r2, [sp, #24]
 80064e0:	bf54      	ite	pl
 80064e2:	9305      	strpl	r3, [sp, #20]
 80064e4:	9306      	strmi	r3, [sp, #24]
 80064e6:	f1bb 0f00 	cmp.w	fp, #0
 80064ea:	db3c      	blt.n	8006566 <_dtoa_r+0x24e>
 80064ec:	9b06      	ldr	r3, [sp, #24]
 80064ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80064f2:	445b      	add	r3, fp
 80064f4:	9306      	str	r3, [sp, #24]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9308      	str	r3, [sp, #32]
 80064fa:	9b07      	ldr	r3, [sp, #28]
 80064fc:	2b09      	cmp	r3, #9
 80064fe:	d868      	bhi.n	80065d2 <_dtoa_r+0x2ba>
 8006500:	2b05      	cmp	r3, #5
 8006502:	bfc4      	itt	gt
 8006504:	3b04      	subgt	r3, #4
 8006506:	9307      	strgt	r3, [sp, #28]
 8006508:	9b07      	ldr	r3, [sp, #28]
 800650a:	f1a3 0302 	sub.w	r3, r3, #2
 800650e:	bfcc      	ite	gt
 8006510:	2500      	movgt	r5, #0
 8006512:	2501      	movle	r5, #1
 8006514:	2b03      	cmp	r3, #3
 8006516:	f200 8085 	bhi.w	8006624 <_dtoa_r+0x30c>
 800651a:	e8df f003 	tbb	[pc, r3]
 800651e:	3b2e      	.short	0x3b2e
 8006520:	5839      	.short	0x5839
 8006522:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006526:	441d      	add	r5, r3
 8006528:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800652c:	2b20      	cmp	r3, #32
 800652e:	bfc1      	itttt	gt
 8006530:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006534:	fa08 f803 	lslgt.w	r8, r8, r3
 8006538:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800653c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006540:	bfd6      	itet	le
 8006542:	f1c3 0320 	rsble	r3, r3, #32
 8006546:	ea48 0003 	orrgt.w	r0, r8, r3
 800654a:	fa06 f003 	lslle.w	r0, r6, r3
 800654e:	f7f9 ffd9 	bl	8000504 <__aeabi_ui2d>
 8006552:	2201      	movs	r2, #1
 8006554:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006558:	3d01      	subs	r5, #1
 800655a:	920e      	str	r2, [sp, #56]	; 0x38
 800655c:	e76f      	b.n	800643e <_dtoa_r+0x126>
 800655e:	2301      	movs	r3, #1
 8006560:	e7b3      	b.n	80064ca <_dtoa_r+0x1b2>
 8006562:	900c      	str	r0, [sp, #48]	; 0x30
 8006564:	e7b2      	b.n	80064cc <_dtoa_r+0x1b4>
 8006566:	9b05      	ldr	r3, [sp, #20]
 8006568:	eba3 030b 	sub.w	r3, r3, fp
 800656c:	9305      	str	r3, [sp, #20]
 800656e:	f1cb 0300 	rsb	r3, fp, #0
 8006572:	9308      	str	r3, [sp, #32]
 8006574:	2300      	movs	r3, #0
 8006576:	930b      	str	r3, [sp, #44]	; 0x2c
 8006578:	e7bf      	b.n	80064fa <_dtoa_r+0x1e2>
 800657a:	2300      	movs	r3, #0
 800657c:	9309      	str	r3, [sp, #36]	; 0x24
 800657e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc52      	bgt.n	800662a <_dtoa_r+0x312>
 8006584:	2301      	movs	r3, #1
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	9304      	str	r3, [sp, #16]
 800658a:	461a      	mov	r2, r3
 800658c:	920a      	str	r2, [sp, #40]	; 0x28
 800658e:	e00b      	b.n	80065a8 <_dtoa_r+0x290>
 8006590:	2301      	movs	r3, #1
 8006592:	e7f3      	b.n	800657c <_dtoa_r+0x264>
 8006594:	2300      	movs	r3, #0
 8006596:	9309      	str	r3, [sp, #36]	; 0x24
 8006598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659a:	445b      	add	r3, fp
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	3301      	adds	r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	9304      	str	r3, [sp, #16]
 80065a4:	bfb8      	it	lt
 80065a6:	2301      	movlt	r3, #1
 80065a8:	69e0      	ldr	r0, [r4, #28]
 80065aa:	2100      	movs	r1, #0
 80065ac:	2204      	movs	r2, #4
 80065ae:	f102 0614 	add.w	r6, r2, #20
 80065b2:	429e      	cmp	r6, r3
 80065b4:	d93d      	bls.n	8006632 <_dtoa_r+0x31a>
 80065b6:	6041      	str	r1, [r0, #4]
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fd9f 	bl	80070fc <_Balloc>
 80065be:	9000      	str	r0, [sp, #0]
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d139      	bne.n	8006638 <_dtoa_r+0x320>
 80065c4:	4b16      	ldr	r3, [pc, #88]	; (8006620 <_dtoa_r+0x308>)
 80065c6:	4602      	mov	r2, r0
 80065c8:	f240 11af 	movw	r1, #431	; 0x1af
 80065cc:	e6bd      	b.n	800634a <_dtoa_r+0x32>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7e1      	b.n	8006596 <_dtoa_r+0x27e>
 80065d2:	2501      	movs	r5, #1
 80065d4:	2300      	movs	r3, #0
 80065d6:	9307      	str	r3, [sp, #28]
 80065d8:	9509      	str	r5, [sp, #36]	; 0x24
 80065da:	f04f 33ff 	mov.w	r3, #4294967295
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	9304      	str	r3, [sp, #16]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2312      	movs	r3, #18
 80065e6:	e7d1      	b.n	800658c <_dtoa_r+0x274>
 80065e8:	636f4361 	.word	0x636f4361
 80065ec:	3fd287a7 	.word	0x3fd287a7
 80065f0:	8b60c8b3 	.word	0x8b60c8b3
 80065f4:	3fc68a28 	.word	0x3fc68a28
 80065f8:	509f79fb 	.word	0x509f79fb
 80065fc:	3fd34413 	.word	0x3fd34413
 8006600:	08009a52 	.word	0x08009a52
 8006604:	08009a69 	.word	0x08009a69
 8006608:	7ff00000 	.word	0x7ff00000
 800660c:	08009a4e 	.word	0x08009a4e
 8006610:	08009a45 	.word	0x08009a45
 8006614:	08009a1d 	.word	0x08009a1d
 8006618:	3ff80000 	.word	0x3ff80000
 800661c:	08009b58 	.word	0x08009b58
 8006620:	08009ac1 	.word	0x08009ac1
 8006624:	2301      	movs	r3, #1
 8006626:	9309      	str	r3, [sp, #36]	; 0x24
 8006628:	e7d7      	b.n	80065da <_dtoa_r+0x2c2>
 800662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	e7ba      	b.n	80065a8 <_dtoa_r+0x290>
 8006632:	3101      	adds	r1, #1
 8006634:	0052      	lsls	r2, r2, #1
 8006636:	e7ba      	b.n	80065ae <_dtoa_r+0x296>
 8006638:	69e3      	ldr	r3, [r4, #28]
 800663a:	9a00      	ldr	r2, [sp, #0]
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	2b0e      	cmp	r3, #14
 8006642:	f200 80a8 	bhi.w	8006796 <_dtoa_r+0x47e>
 8006646:	2d00      	cmp	r5, #0
 8006648:	f000 80a5 	beq.w	8006796 <_dtoa_r+0x47e>
 800664c:	f1bb 0f00 	cmp.w	fp, #0
 8006650:	dd38      	ble.n	80066c4 <_dtoa_r+0x3ac>
 8006652:	4bc0      	ldr	r3, [pc, #768]	; (8006954 <_dtoa_r+0x63c>)
 8006654:	f00b 020f 	and.w	r2, fp, #15
 8006658:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800665c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006660:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006664:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006668:	d019      	beq.n	800669e <_dtoa_r+0x386>
 800666a:	4bbb      	ldr	r3, [pc, #748]	; (8006958 <_dtoa_r+0x640>)
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006674:	f7fa f8ea 	bl	800084c <__aeabi_ddiv>
 8006678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800667c:	f008 080f 	and.w	r8, r8, #15
 8006680:	2503      	movs	r5, #3
 8006682:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006958 <_dtoa_r+0x640>
 8006686:	f1b8 0f00 	cmp.w	r8, #0
 800668a:	d10a      	bne.n	80066a2 <_dtoa_r+0x38a>
 800668c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	f7fa f8da 	bl	800084c <__aeabi_ddiv>
 8006698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669c:	e02b      	b.n	80066f6 <_dtoa_r+0x3de>
 800669e:	2502      	movs	r5, #2
 80066a0:	e7ef      	b.n	8006682 <_dtoa_r+0x36a>
 80066a2:	f018 0f01 	tst.w	r8, #1
 80066a6:	d008      	beq.n	80066ba <_dtoa_r+0x3a2>
 80066a8:	4630      	mov	r0, r6
 80066aa:	4639      	mov	r1, r7
 80066ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	3501      	adds	r5, #1
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066be:	f109 0908 	add.w	r9, r9, #8
 80066c2:	e7e0      	b.n	8006686 <_dtoa_r+0x36e>
 80066c4:	f000 809f 	beq.w	8006806 <_dtoa_r+0x4ee>
 80066c8:	f1cb 0600 	rsb	r6, fp, #0
 80066cc:	4ba1      	ldr	r3, [pc, #644]	; (8006954 <_dtoa_r+0x63c>)
 80066ce:	4fa2      	ldr	r7, [pc, #648]	; (8006958 <_dtoa_r+0x640>)
 80066d0:	f006 020f 	and.w	r2, r6, #15
 80066d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	ec51 0b18 	vmov	r0, r1, d8
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	1136      	asrs	r6, r6, #4
 80066ea:	2300      	movs	r3, #0
 80066ec:	2502      	movs	r5, #2
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d17e      	bne.n	80067f0 <_dtoa_r+0x4d8>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1d0      	bne.n	8006698 <_dtoa_r+0x380>
 80066f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8084 	beq.w	800680a <_dtoa_r+0x4f2>
 8006702:	4b96      	ldr	r3, [pc, #600]	; (800695c <_dtoa_r+0x644>)
 8006704:	2200      	movs	r2, #0
 8006706:	4640      	mov	r0, r8
 8006708:	4649      	mov	r1, r9
 800670a:	f7fa f9e7 	bl	8000adc <__aeabi_dcmplt>
 800670e:	2800      	cmp	r0, #0
 8006710:	d07b      	beq.n	800680a <_dtoa_r+0x4f2>
 8006712:	9b04      	ldr	r3, [sp, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d078      	beq.n	800680a <_dtoa_r+0x4f2>
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd39      	ble.n	8006792 <_dtoa_r+0x47a>
 800671e:	4b90      	ldr	r3, [pc, #576]	; (8006960 <_dtoa_r+0x648>)
 8006720:	2200      	movs	r2, #0
 8006722:	4640      	mov	r0, r8
 8006724:	4649      	mov	r1, r9
 8006726:	f7f9 ff67 	bl	80005f8 <__aeabi_dmul>
 800672a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800672e:	9e01      	ldr	r6, [sp, #4]
 8006730:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006734:	3501      	adds	r5, #1
 8006736:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800673a:	4628      	mov	r0, r5
 800673c:	f7f9 fef2 	bl	8000524 <__aeabi_i2d>
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	f7f9 ff58 	bl	80005f8 <__aeabi_dmul>
 8006748:	4b86      	ldr	r3, [pc, #536]	; (8006964 <_dtoa_r+0x64c>)
 800674a:	2200      	movs	r2, #0
 800674c:	f7f9 fd9e 	bl	800028c <__adddf3>
 8006750:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	2e00      	cmp	r6, #0
 800675c:	d158      	bne.n	8006810 <_dtoa_r+0x4f8>
 800675e:	4b82      	ldr	r3, [pc, #520]	; (8006968 <_dtoa_r+0x650>)
 8006760:	2200      	movs	r2, #0
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 fd8f 	bl	8000288 <__aeabi_dsub>
 800676a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800676e:	4680      	mov	r8, r0
 8006770:	4689      	mov	r9, r1
 8006772:	f7fa f9d1 	bl	8000b18 <__aeabi_dcmpgt>
 8006776:	2800      	cmp	r0, #0
 8006778:	f040 8296 	bne.w	8006ca8 <_dtoa_r+0x990>
 800677c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006780:	4640      	mov	r0, r8
 8006782:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006786:	4649      	mov	r1, r9
 8006788:	f7fa f9a8 	bl	8000adc <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 8289 	bne.w	8006ca4 <_dtoa_r+0x98c>
 8006792:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006796:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006798:	2b00      	cmp	r3, #0
 800679a:	f2c0 814e 	blt.w	8006a3a <_dtoa_r+0x722>
 800679e:	f1bb 0f0e 	cmp.w	fp, #14
 80067a2:	f300 814a 	bgt.w	8006a3a <_dtoa_r+0x722>
 80067a6:	4b6b      	ldr	r3, [pc, #428]	; (8006954 <_dtoa_r+0x63c>)
 80067a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f280 80dc 	bge.w	8006970 <_dtoa_r+0x658>
 80067b8:	9b04      	ldr	r3, [sp, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f300 80d8 	bgt.w	8006970 <_dtoa_r+0x658>
 80067c0:	f040 826f 	bne.w	8006ca2 <_dtoa_r+0x98a>
 80067c4:	4b68      	ldr	r3, [pc, #416]	; (8006968 <_dtoa_r+0x650>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	4640      	mov	r0, r8
 80067ca:	4649      	mov	r1, r9
 80067cc:	f7f9 ff14 	bl	80005f8 <__aeabi_dmul>
 80067d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067d4:	f7fa f996 	bl	8000b04 <__aeabi_dcmpge>
 80067d8:	9e04      	ldr	r6, [sp, #16]
 80067da:	4637      	mov	r7, r6
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 8245 	bne.w	8006c6c <_dtoa_r+0x954>
 80067e2:	9d00      	ldr	r5, [sp, #0]
 80067e4:	2331      	movs	r3, #49	; 0x31
 80067e6:	f805 3b01 	strb.w	r3, [r5], #1
 80067ea:	f10b 0b01 	add.w	fp, fp, #1
 80067ee:	e241      	b.n	8006c74 <_dtoa_r+0x95c>
 80067f0:	07f2      	lsls	r2, r6, #31
 80067f2:	d505      	bpl.n	8006800 <_dtoa_r+0x4e8>
 80067f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	3501      	adds	r5, #1
 80067fe:	2301      	movs	r3, #1
 8006800:	1076      	asrs	r6, r6, #1
 8006802:	3708      	adds	r7, #8
 8006804:	e773      	b.n	80066ee <_dtoa_r+0x3d6>
 8006806:	2502      	movs	r5, #2
 8006808:	e775      	b.n	80066f6 <_dtoa_r+0x3de>
 800680a:	9e04      	ldr	r6, [sp, #16]
 800680c:	465f      	mov	r7, fp
 800680e:	e792      	b.n	8006736 <_dtoa_r+0x41e>
 8006810:	9900      	ldr	r1, [sp, #0]
 8006812:	4b50      	ldr	r3, [pc, #320]	; (8006954 <_dtoa_r+0x63c>)
 8006814:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006818:	4431      	add	r1, r6
 800681a:	9102      	str	r1, [sp, #8]
 800681c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800681e:	eeb0 9a47 	vmov.f32	s18, s14
 8006822:	eef0 9a67 	vmov.f32	s19, s15
 8006826:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800682a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800682e:	2900      	cmp	r1, #0
 8006830:	d044      	beq.n	80068bc <_dtoa_r+0x5a4>
 8006832:	494e      	ldr	r1, [pc, #312]	; (800696c <_dtoa_r+0x654>)
 8006834:	2000      	movs	r0, #0
 8006836:	f7fa f809 	bl	800084c <__aeabi_ddiv>
 800683a:	ec53 2b19 	vmov	r2, r3, d9
 800683e:	f7f9 fd23 	bl	8000288 <__aeabi_dsub>
 8006842:	9d00      	ldr	r5, [sp, #0]
 8006844:	ec41 0b19 	vmov	d9, r0, r1
 8006848:	4649      	mov	r1, r9
 800684a:	4640      	mov	r0, r8
 800684c:	f7fa f984 	bl	8000b58 <__aeabi_d2iz>
 8006850:	4606      	mov	r6, r0
 8006852:	f7f9 fe67 	bl	8000524 <__aeabi_i2d>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	3630      	adds	r6, #48	; 0x30
 8006864:	f805 6b01 	strb.w	r6, [r5], #1
 8006868:	ec53 2b19 	vmov	r2, r3, d9
 800686c:	4680      	mov	r8, r0
 800686e:	4689      	mov	r9, r1
 8006870:	f7fa f934 	bl	8000adc <__aeabi_dcmplt>
 8006874:	2800      	cmp	r0, #0
 8006876:	d164      	bne.n	8006942 <_dtoa_r+0x62a>
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	4937      	ldr	r1, [pc, #220]	; (800695c <_dtoa_r+0x644>)
 800687e:	2000      	movs	r0, #0
 8006880:	f7f9 fd02 	bl	8000288 <__aeabi_dsub>
 8006884:	ec53 2b19 	vmov	r2, r3, d9
 8006888:	f7fa f928 	bl	8000adc <__aeabi_dcmplt>
 800688c:	2800      	cmp	r0, #0
 800688e:	f040 80b6 	bne.w	80069fe <_dtoa_r+0x6e6>
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	429d      	cmp	r5, r3
 8006896:	f43f af7c 	beq.w	8006792 <_dtoa_r+0x47a>
 800689a:	4b31      	ldr	r3, [pc, #196]	; (8006960 <_dtoa_r+0x648>)
 800689c:	ec51 0b19 	vmov	r0, r1, d9
 80068a0:	2200      	movs	r2, #0
 80068a2:	f7f9 fea9 	bl	80005f8 <__aeabi_dmul>
 80068a6:	4b2e      	ldr	r3, [pc, #184]	; (8006960 <_dtoa_r+0x648>)
 80068a8:	ec41 0b19 	vmov	d9, r0, r1
 80068ac:	2200      	movs	r2, #0
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	e7c5      	b.n	8006848 <_dtoa_r+0x530>
 80068bc:	ec51 0b17 	vmov	r0, r1, d7
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	9d00      	ldr	r5, [sp, #0]
 80068c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ca:	ec41 0b19 	vmov	d9, r0, r1
 80068ce:	4649      	mov	r1, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	f7fa f941 	bl	8000b58 <__aeabi_d2iz>
 80068d6:	4606      	mov	r6, r0
 80068d8:	f7f9 fe24 	bl	8000524 <__aeabi_i2d>
 80068dc:	3630      	adds	r6, #48	; 0x30
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	f805 6b01 	strb.w	r6, [r5], #1
 80068ee:	9b02      	ldr	r3, [sp, #8]
 80068f0:	429d      	cmp	r5, r3
 80068f2:	4680      	mov	r8, r0
 80068f4:	4689      	mov	r9, r1
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	d124      	bne.n	8006946 <_dtoa_r+0x62e>
 80068fc:	4b1b      	ldr	r3, [pc, #108]	; (800696c <_dtoa_r+0x654>)
 80068fe:	ec51 0b19 	vmov	r0, r1, d9
 8006902:	f7f9 fcc3 	bl	800028c <__adddf3>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	f7fa f903 	bl	8000b18 <__aeabi_dcmpgt>
 8006912:	2800      	cmp	r0, #0
 8006914:	d173      	bne.n	80069fe <_dtoa_r+0x6e6>
 8006916:	ec53 2b19 	vmov	r2, r3, d9
 800691a:	4914      	ldr	r1, [pc, #80]	; (800696c <_dtoa_r+0x654>)
 800691c:	2000      	movs	r0, #0
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4640      	mov	r0, r8
 8006928:	4649      	mov	r1, r9
 800692a:	f7fa f8d7 	bl	8000adc <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	f43f af2f 	beq.w	8006792 <_dtoa_r+0x47a>
 8006934:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006936:	1e6b      	subs	r3, r5, #1
 8006938:	930f      	str	r3, [sp, #60]	; 0x3c
 800693a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800693e:	2b30      	cmp	r3, #48	; 0x30
 8006940:	d0f8      	beq.n	8006934 <_dtoa_r+0x61c>
 8006942:	46bb      	mov	fp, r7
 8006944:	e04a      	b.n	80069dc <_dtoa_r+0x6c4>
 8006946:	4b06      	ldr	r3, [pc, #24]	; (8006960 <_dtoa_r+0x648>)
 8006948:	f7f9 fe56 	bl	80005f8 <__aeabi_dmul>
 800694c:	4680      	mov	r8, r0
 800694e:	4689      	mov	r9, r1
 8006950:	e7bd      	b.n	80068ce <_dtoa_r+0x5b6>
 8006952:	bf00      	nop
 8006954:	08009b58 	.word	0x08009b58
 8006958:	08009b30 	.word	0x08009b30
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	40240000 	.word	0x40240000
 8006964:	401c0000 	.word	0x401c0000
 8006968:	40140000 	.word	0x40140000
 800696c:	3fe00000 	.word	0x3fe00000
 8006970:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006974:	9d00      	ldr	r5, [sp, #0]
 8006976:	4642      	mov	r2, r8
 8006978:	464b      	mov	r3, r9
 800697a:	4630      	mov	r0, r6
 800697c:	4639      	mov	r1, r7
 800697e:	f7f9 ff65 	bl	800084c <__aeabi_ddiv>
 8006982:	f7fa f8e9 	bl	8000b58 <__aeabi_d2iz>
 8006986:	9001      	str	r0, [sp, #4]
 8006988:	f7f9 fdcc 	bl	8000524 <__aeabi_i2d>
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	f7f9 fe32 	bl	80005f8 <__aeabi_dmul>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7f9 fc74 	bl	8000288 <__aeabi_dsub>
 80069a0:	9e01      	ldr	r6, [sp, #4]
 80069a2:	9f04      	ldr	r7, [sp, #16]
 80069a4:	3630      	adds	r6, #48	; 0x30
 80069a6:	f805 6b01 	strb.w	r6, [r5], #1
 80069aa:	9e00      	ldr	r6, [sp, #0]
 80069ac:	1bae      	subs	r6, r5, r6
 80069ae:	42b7      	cmp	r7, r6
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	d134      	bne.n	8006a20 <_dtoa_r+0x708>
 80069b6:	f7f9 fc69 	bl	800028c <__adddf3>
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	4606      	mov	r6, r0
 80069c0:	460f      	mov	r7, r1
 80069c2:	f7fa f8a9 	bl	8000b18 <__aeabi_dcmpgt>
 80069c6:	b9c8      	cbnz	r0, 80069fc <_dtoa_r+0x6e4>
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7fa f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d4:	b110      	cbz	r0, 80069dc <_dtoa_r+0x6c4>
 80069d6:	9b01      	ldr	r3, [sp, #4]
 80069d8:	07db      	lsls	r3, r3, #31
 80069da:	d40f      	bmi.n	80069fc <_dtoa_r+0x6e4>
 80069dc:	4651      	mov	r1, sl
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 fbcc 	bl	800717c <_Bfree>
 80069e4:	2300      	movs	r3, #0
 80069e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069e8:	702b      	strb	r3, [r5, #0]
 80069ea:	f10b 0301 	add.w	r3, fp, #1
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f43f ace2 	beq.w	80063bc <_dtoa_r+0xa4>
 80069f8:	601d      	str	r5, [r3, #0]
 80069fa:	e4df      	b.n	80063bc <_dtoa_r+0xa4>
 80069fc:	465f      	mov	r7, fp
 80069fe:	462b      	mov	r3, r5
 8006a00:	461d      	mov	r5, r3
 8006a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a06:	2a39      	cmp	r2, #57	; 0x39
 8006a08:	d106      	bne.n	8006a18 <_dtoa_r+0x700>
 8006a0a:	9a00      	ldr	r2, [sp, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d1f7      	bne.n	8006a00 <_dtoa_r+0x6e8>
 8006a10:	9900      	ldr	r1, [sp, #0]
 8006a12:	2230      	movs	r2, #48	; 0x30
 8006a14:	3701      	adds	r7, #1
 8006a16:	700a      	strb	r2, [r1, #0]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e790      	b.n	8006942 <_dtoa_r+0x62a>
 8006a20:	4ba3      	ldr	r3, [pc, #652]	; (8006cb0 <_dtoa_r+0x998>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fde8 	bl	80005f8 <__aeabi_dmul>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	460f      	mov	r7, r1
 8006a30:	f7fa f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d09e      	beq.n	8006976 <_dtoa_r+0x65e>
 8006a38:	e7d0      	b.n	80069dc <_dtoa_r+0x6c4>
 8006a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	f000 80ca 	beq.w	8006bd6 <_dtoa_r+0x8be>
 8006a42:	9a07      	ldr	r2, [sp, #28]
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	f300 80ad 	bgt.w	8006ba4 <_dtoa_r+0x88c>
 8006a4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	f000 80a5 	beq.w	8006b9c <_dtoa_r+0x884>
 8006a52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a56:	9e08      	ldr	r6, [sp, #32]
 8006a58:	9d05      	ldr	r5, [sp, #20]
 8006a5a:	9a05      	ldr	r2, [sp, #20]
 8006a5c:	441a      	add	r2, r3
 8006a5e:	9205      	str	r2, [sp, #20]
 8006a60:	9a06      	ldr	r2, [sp, #24]
 8006a62:	2101      	movs	r1, #1
 8006a64:	441a      	add	r2, r3
 8006a66:	4620      	mov	r0, r4
 8006a68:	9206      	str	r2, [sp, #24]
 8006a6a:	f000 fc87 	bl	800737c <__i2b>
 8006a6e:	4607      	mov	r7, r0
 8006a70:	b165      	cbz	r5, 8006a8c <_dtoa_r+0x774>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd09      	ble.n	8006a8c <_dtoa_r+0x774>
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	9a05      	ldr	r2, [sp, #20]
 8006a7c:	bfa8      	it	ge
 8006a7e:	462b      	movge	r3, r5
 8006a80:	1ad2      	subs	r2, r2, r3
 8006a82:	9205      	str	r2, [sp, #20]
 8006a84:	9a06      	ldr	r2, [sp, #24]
 8006a86:	1aed      	subs	r5, r5, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	9306      	str	r3, [sp, #24]
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	b1f3      	cbz	r3, 8006ace <_dtoa_r+0x7b6>
 8006a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80a3 	beq.w	8006bde <_dtoa_r+0x8c6>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	dd10      	ble.n	8006abe <_dtoa_r+0x7a6>
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fd2b 	bl	80074fc <__pow5mult>
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	4601      	mov	r1, r0
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fc7b 	bl	80073a8 <__multiply>
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fb60 	bl	800717c <_Bfree>
 8006abc:	46c2      	mov	sl, r8
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	1b9a      	subs	r2, r3, r6
 8006ac2:	d004      	beq.n	8006ace <_dtoa_r+0x7b6>
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 fd18 	bl	80074fc <__pow5mult>
 8006acc:	4682      	mov	sl, r0
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 fc53 	bl	800737c <__i2b>
 8006ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	4606      	mov	r6, r0
 8006adc:	f340 8081 	ble.w	8006be2 <_dtoa_r+0x8ca>
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fd09 	bl	80074fc <__pow5mult>
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	4606      	mov	r6, r0
 8006af0:	dd7a      	ble.n	8006be8 <_dtoa_r+0x8d0>
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	6933      	ldr	r3, [r6, #16]
 8006af8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006afc:	6918      	ldr	r0, [r3, #16]
 8006afe:	f000 fbef 	bl	80072e0 <__hi0bits>
 8006b02:	f1c0 0020 	rsb	r0, r0, #32
 8006b06:	9b06      	ldr	r3, [sp, #24]
 8006b08:	4418      	add	r0, r3
 8006b0a:	f010 001f 	ands.w	r0, r0, #31
 8006b0e:	f000 8094 	beq.w	8006c3a <_dtoa_r+0x922>
 8006b12:	f1c0 0320 	rsb	r3, r0, #32
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	f340 8085 	ble.w	8006c26 <_dtoa_r+0x90e>
 8006b1c:	9b05      	ldr	r3, [sp, #20]
 8006b1e:	f1c0 001c 	rsb	r0, r0, #28
 8006b22:	4403      	add	r3, r0
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	4403      	add	r3, r0
 8006b2a:	4405      	add	r5, r0
 8006b2c:	9306      	str	r3, [sp, #24]
 8006b2e:	9b05      	ldr	r3, [sp, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dd05      	ble.n	8006b40 <_dtoa_r+0x828>
 8006b34:	4651      	mov	r1, sl
 8006b36:	461a      	mov	r2, r3
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fd39 	bl	80075b0 <__lshift>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	9b06      	ldr	r3, [sp, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	dd05      	ble.n	8006b52 <_dtoa_r+0x83a>
 8006b46:	4631      	mov	r1, r6
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fd30 	bl	80075b0 <__lshift>
 8006b50:	4606      	mov	r6, r0
 8006b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d072      	beq.n	8006c3e <_dtoa_r+0x926>
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f000 fd94 	bl	8007688 <__mcmp>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	da6c      	bge.n	8006c3e <_dtoa_r+0x926>
 8006b64:	2300      	movs	r3, #0
 8006b66:	4651      	mov	r1, sl
 8006b68:	220a      	movs	r2, #10
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fb28 	bl	80071c0 <__multadd>
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b76:	4682      	mov	sl, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 81b0 	beq.w	8006ede <_dtoa_r+0xbc6>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4639      	mov	r1, r7
 8006b82:	220a      	movs	r2, #10
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 fb1b 	bl	80071c0 <__multadd>
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	4607      	mov	r7, r0
 8006b90:	f300 8096 	bgt.w	8006cc0 <_dtoa_r+0x9a8>
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	dc59      	bgt.n	8006c4e <_dtoa_r+0x936>
 8006b9a:	e091      	b.n	8006cc0 <_dtoa_r+0x9a8>
 8006b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ba2:	e758      	b.n	8006a56 <_dtoa_r+0x73e>
 8006ba4:	9b04      	ldr	r3, [sp, #16]
 8006ba6:	1e5e      	subs	r6, r3, #1
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	42b3      	cmp	r3, r6
 8006bac:	bfbf      	itttt	lt
 8006bae:	9b08      	ldrlt	r3, [sp, #32]
 8006bb0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006bb2:	9608      	strlt	r6, [sp, #32]
 8006bb4:	1af3      	sublt	r3, r6, r3
 8006bb6:	bfb4      	ite	lt
 8006bb8:	18d2      	addlt	r2, r2, r3
 8006bba:	1b9e      	subge	r6, r3, r6
 8006bbc:	9b04      	ldr	r3, [sp, #16]
 8006bbe:	bfbc      	itt	lt
 8006bc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006bc2:	2600      	movlt	r6, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	bfb7      	itett	lt
 8006bc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006bcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006bd0:	1a9d      	sublt	r5, r3, r2
 8006bd2:	2300      	movlt	r3, #0
 8006bd4:	e741      	b.n	8006a5a <_dtoa_r+0x742>
 8006bd6:	9e08      	ldr	r6, [sp, #32]
 8006bd8:	9d05      	ldr	r5, [sp, #20]
 8006bda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006bdc:	e748      	b.n	8006a70 <_dtoa_r+0x758>
 8006bde:	9a08      	ldr	r2, [sp, #32]
 8006be0:	e770      	b.n	8006ac4 <_dtoa_r+0x7ac>
 8006be2:	9b07      	ldr	r3, [sp, #28]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	dc19      	bgt.n	8006c1c <_dtoa_r+0x904>
 8006be8:	9b02      	ldr	r3, [sp, #8]
 8006bea:	b9bb      	cbnz	r3, 8006c1c <_dtoa_r+0x904>
 8006bec:	9b03      	ldr	r3, [sp, #12]
 8006bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf2:	b99b      	cbnz	r3, 8006c1c <_dtoa_r+0x904>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	b183      	cbz	r3, 8006c22 <_dtoa_r+0x90a>
 8006c00:	9b05      	ldr	r3, [sp, #20]
 8006c02:	3301      	adds	r3, #1
 8006c04:	9305      	str	r3, [sp, #20]
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	9306      	str	r3, [sp, #24]
 8006c0c:	f04f 0801 	mov.w	r8, #1
 8006c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f47f af6f 	bne.w	8006af6 <_dtoa_r+0x7de>
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e774      	b.n	8006b06 <_dtoa_r+0x7ee>
 8006c1c:	f04f 0800 	mov.w	r8, #0
 8006c20:	e7f6      	b.n	8006c10 <_dtoa_r+0x8f8>
 8006c22:	4698      	mov	r8, r3
 8006c24:	e7f4      	b.n	8006c10 <_dtoa_r+0x8f8>
 8006c26:	d082      	beq.n	8006b2e <_dtoa_r+0x816>
 8006c28:	9a05      	ldr	r2, [sp, #20]
 8006c2a:	331c      	adds	r3, #28
 8006c2c:	441a      	add	r2, r3
 8006c2e:	9205      	str	r2, [sp, #20]
 8006c30:	9a06      	ldr	r2, [sp, #24]
 8006c32:	441a      	add	r2, r3
 8006c34:	441d      	add	r5, r3
 8006c36:	9206      	str	r2, [sp, #24]
 8006c38:	e779      	b.n	8006b2e <_dtoa_r+0x816>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	e7f4      	b.n	8006c28 <_dtoa_r+0x910>
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dc37      	bgt.n	8006cb4 <_dtoa_r+0x99c>
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	dd34      	ble.n	8006cb4 <_dtoa_r+0x99c>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	9b01      	ldr	r3, [sp, #4]
 8006c50:	b963      	cbnz	r3, 8006c6c <_dtoa_r+0x954>
 8006c52:	4631      	mov	r1, r6
 8006c54:	2205      	movs	r2, #5
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 fab2 	bl	80071c0 <__multadd>
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4606      	mov	r6, r0
 8006c60:	4650      	mov	r0, sl
 8006c62:	f000 fd11 	bl	8007688 <__mcmp>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f73f adbb 	bgt.w	80067e2 <_dtoa_r+0x4ca>
 8006c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6e:	9d00      	ldr	r5, [sp, #0]
 8006c70:	ea6f 0b03 	mvn.w	fp, r3
 8006c74:	f04f 0800 	mov.w	r8, #0
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fa7e 	bl	800717c <_Bfree>
 8006c80:	2f00      	cmp	r7, #0
 8006c82:	f43f aeab 	beq.w	80069dc <_dtoa_r+0x6c4>
 8006c86:	f1b8 0f00 	cmp.w	r8, #0
 8006c8a:	d005      	beq.n	8006c98 <_dtoa_r+0x980>
 8006c8c:	45b8      	cmp	r8, r7
 8006c8e:	d003      	beq.n	8006c98 <_dtoa_r+0x980>
 8006c90:	4641      	mov	r1, r8
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fa72 	bl	800717c <_Bfree>
 8006c98:	4639      	mov	r1, r7
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fa6e 	bl	800717c <_Bfree>
 8006ca0:	e69c      	b.n	80069dc <_dtoa_r+0x6c4>
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	4637      	mov	r7, r6
 8006ca6:	e7e1      	b.n	8006c6c <_dtoa_r+0x954>
 8006ca8:	46bb      	mov	fp, r7
 8006caa:	4637      	mov	r7, r6
 8006cac:	e599      	b.n	80067e2 <_dtoa_r+0x4ca>
 8006cae:	bf00      	nop
 8006cb0:	40240000 	.word	0x40240000
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 80c8 	beq.w	8006e4c <_dtoa_r+0xb34>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	dd05      	ble.n	8006cd0 <_dtoa_r+0x9b8>
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fc71 	bl	80075b0 <__lshift>
 8006cce:	4607      	mov	r7, r0
 8006cd0:	f1b8 0f00 	cmp.w	r8, #0
 8006cd4:	d05b      	beq.n	8006d8e <_dtoa_r+0xa76>
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 fa0f 	bl	80070fc <_Balloc>
 8006cde:	4605      	mov	r5, r0
 8006ce0:	b928      	cbnz	r0, 8006cee <_dtoa_r+0x9d6>
 8006ce2:	4b83      	ldr	r3, [pc, #524]	; (8006ef0 <_dtoa_r+0xbd8>)
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006cea:	f7ff bb2e 	b.w	800634a <_dtoa_r+0x32>
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	3202      	adds	r2, #2
 8006cf2:	0092      	lsls	r2, r2, #2
 8006cf4:	f107 010c 	add.w	r1, r7, #12
 8006cf8:	300c      	adds	r0, #12
 8006cfa:	f002 f95f 	bl	8008fbc <memcpy>
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4629      	mov	r1, r5
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fc54 	bl	80075b0 <__lshift>
 8006d08:	9b00      	ldr	r3, [sp, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d12:	4413      	add	r3, r2
 8006d14:	9308      	str	r3, [sp, #32]
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	46b8      	mov	r8, r7
 8006d1e:	9306      	str	r3, [sp, #24]
 8006d20:	4607      	mov	r7, r0
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	4631      	mov	r1, r6
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4650      	mov	r0, sl
 8006d2a:	9301      	str	r3, [sp, #4]
 8006d2c:	f7ff fa6a 	bl	8006204 <quorem>
 8006d30:	4641      	mov	r1, r8
 8006d32:	9002      	str	r0, [sp, #8]
 8006d34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d38:	4650      	mov	r0, sl
 8006d3a:	f000 fca5 	bl	8007688 <__mcmp>
 8006d3e:	463a      	mov	r2, r7
 8006d40:	9005      	str	r0, [sp, #20]
 8006d42:	4631      	mov	r1, r6
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fcbb 	bl	80076c0 <__mdiff>
 8006d4a:	68c2      	ldr	r2, [r0, #12]
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	bb02      	cbnz	r2, 8006d92 <_dtoa_r+0xa7a>
 8006d50:	4601      	mov	r1, r0
 8006d52:	4650      	mov	r0, sl
 8006d54:	f000 fc98 	bl	8007688 <__mcmp>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d60:	f000 fa0c 	bl	800717c <_Bfree>
 8006d64:	9b07      	ldr	r3, [sp, #28]
 8006d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d68:	9d04      	ldr	r5, [sp, #16]
 8006d6a:	ea43 0102 	orr.w	r1, r3, r2
 8006d6e:	9b06      	ldr	r3, [sp, #24]
 8006d70:	4319      	orrs	r1, r3
 8006d72:	d110      	bne.n	8006d96 <_dtoa_r+0xa7e>
 8006d74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d78:	d029      	beq.n	8006dce <_dtoa_r+0xab6>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	dd02      	ble.n	8006d86 <_dtoa_r+0xa6e>
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	f883 9000 	strb.w	r9, [r3]
 8006d8c:	e774      	b.n	8006c78 <_dtoa_r+0x960>
 8006d8e:	4638      	mov	r0, r7
 8006d90:	e7ba      	b.n	8006d08 <_dtoa_r+0x9f0>
 8006d92:	2201      	movs	r2, #1
 8006d94:	e7e1      	b.n	8006d5a <_dtoa_r+0xa42>
 8006d96:	9b05      	ldr	r3, [sp, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	db04      	blt.n	8006da6 <_dtoa_r+0xa8e>
 8006d9c:	9907      	ldr	r1, [sp, #28]
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	9906      	ldr	r1, [sp, #24]
 8006da2:	430b      	orrs	r3, r1
 8006da4:	d120      	bne.n	8006de8 <_dtoa_r+0xad0>
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	dded      	ble.n	8006d86 <_dtoa_r+0xa6e>
 8006daa:	4651      	mov	r1, sl
 8006dac:	2201      	movs	r2, #1
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 fbfe 	bl	80075b0 <__lshift>
 8006db4:	4631      	mov	r1, r6
 8006db6:	4682      	mov	sl, r0
 8006db8:	f000 fc66 	bl	8007688 <__mcmp>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	dc03      	bgt.n	8006dc8 <_dtoa_r+0xab0>
 8006dc0:	d1e1      	bne.n	8006d86 <_dtoa_r+0xa6e>
 8006dc2:	f019 0f01 	tst.w	r9, #1
 8006dc6:	d0de      	beq.n	8006d86 <_dtoa_r+0xa6e>
 8006dc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dcc:	d1d8      	bne.n	8006d80 <_dtoa_r+0xa68>
 8006dce:	9a01      	ldr	r2, [sp, #4]
 8006dd0:	2339      	movs	r3, #57	; 0x39
 8006dd2:	7013      	strb	r3, [r2, #0]
 8006dd4:	462b      	mov	r3, r5
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dde:	2a39      	cmp	r2, #57	; 0x39
 8006de0:	d06c      	beq.n	8006ebc <_dtoa_r+0xba4>
 8006de2:	3201      	adds	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e747      	b.n	8006c78 <_dtoa_r+0x960>
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	dd07      	ble.n	8006dfc <_dtoa_r+0xae4>
 8006dec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006df0:	d0ed      	beq.n	8006dce <_dtoa_r+0xab6>
 8006df2:	9a01      	ldr	r2, [sp, #4]
 8006df4:	f109 0301 	add.w	r3, r9, #1
 8006df8:	7013      	strb	r3, [r2, #0]
 8006dfa:	e73d      	b.n	8006c78 <_dtoa_r+0x960>
 8006dfc:	9b04      	ldr	r3, [sp, #16]
 8006dfe:	9a08      	ldr	r2, [sp, #32]
 8006e00:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d043      	beq.n	8006e90 <_dtoa_r+0xb78>
 8006e08:	4651      	mov	r1, sl
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	220a      	movs	r2, #10
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 f9d6 	bl	80071c0 <__multadd>
 8006e14:	45b8      	cmp	r8, r7
 8006e16:	4682      	mov	sl, r0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	f04f 020a 	mov.w	r2, #10
 8006e20:	4641      	mov	r1, r8
 8006e22:	4620      	mov	r0, r4
 8006e24:	d107      	bne.n	8006e36 <_dtoa_r+0xb1e>
 8006e26:	f000 f9cb 	bl	80071c0 <__multadd>
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	3301      	adds	r3, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	e775      	b.n	8006d22 <_dtoa_r+0xa0a>
 8006e36:	f000 f9c3 	bl	80071c0 <__multadd>
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	4680      	mov	r8, r0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	220a      	movs	r2, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f9bc 	bl	80071c0 <__multadd>
 8006e48:	4607      	mov	r7, r0
 8006e4a:	e7f0      	b.n	8006e2e <_dtoa_r+0xb16>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	9301      	str	r3, [sp, #4]
 8006e50:	9d00      	ldr	r5, [sp, #0]
 8006e52:	4631      	mov	r1, r6
 8006e54:	4650      	mov	r0, sl
 8006e56:	f7ff f9d5 	bl	8006204 <quorem>
 8006e5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e5e:	9b00      	ldr	r3, [sp, #0]
 8006e60:	f805 9b01 	strb.w	r9, [r5], #1
 8006e64:	1aea      	subs	r2, r5, r3
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	dd07      	ble.n	8006e7c <_dtoa_r+0xb64>
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	2300      	movs	r3, #0
 8006e70:	220a      	movs	r2, #10
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f9a4 	bl	80071c0 <__multadd>
 8006e78:	4682      	mov	sl, r0
 8006e7a:	e7ea      	b.n	8006e52 <_dtoa_r+0xb3a>
 8006e7c:	9b01      	ldr	r3, [sp, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bfc8      	it	gt
 8006e82:	461d      	movgt	r5, r3
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	bfd8      	it	le
 8006e88:	2501      	movle	r5, #1
 8006e8a:	441d      	add	r5, r3
 8006e8c:	f04f 0800 	mov.w	r8, #0
 8006e90:	4651      	mov	r1, sl
 8006e92:	2201      	movs	r2, #1
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fb8b 	bl	80075b0 <__lshift>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4682      	mov	sl, r0
 8006e9e:	f000 fbf3 	bl	8007688 <__mcmp>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	dc96      	bgt.n	8006dd4 <_dtoa_r+0xabc>
 8006ea6:	d102      	bne.n	8006eae <_dtoa_r+0xb96>
 8006ea8:	f019 0f01 	tst.w	r9, #1
 8006eac:	d192      	bne.n	8006dd4 <_dtoa_r+0xabc>
 8006eae:	462b      	mov	r3, r5
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eb6:	2a30      	cmp	r2, #48	; 0x30
 8006eb8:	d0fa      	beq.n	8006eb0 <_dtoa_r+0xb98>
 8006eba:	e6dd      	b.n	8006c78 <_dtoa_r+0x960>
 8006ebc:	9a00      	ldr	r2, [sp, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d189      	bne.n	8006dd6 <_dtoa_r+0xabe>
 8006ec2:	f10b 0b01 	add.w	fp, fp, #1
 8006ec6:	2331      	movs	r3, #49	; 0x31
 8006ec8:	e796      	b.n	8006df8 <_dtoa_r+0xae0>
 8006eca:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <_dtoa_r+0xbdc>)
 8006ecc:	f7ff ba99 	b.w	8006402 <_dtoa_r+0xea>
 8006ed0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f aa6d 	bne.w	80063b2 <_dtoa_r+0x9a>
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <_dtoa_r+0xbe0>)
 8006eda:	f7ff ba92 	b.w	8006402 <_dtoa_r+0xea>
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	dcb5      	bgt.n	8006e50 <_dtoa_r+0xb38>
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	f73f aeb1 	bgt.w	8006c4e <_dtoa_r+0x936>
 8006eec:	e7b0      	b.n	8006e50 <_dtoa_r+0xb38>
 8006eee:	bf00      	nop
 8006ef0:	08009ac1 	.word	0x08009ac1
 8006ef4:	08009a1c 	.word	0x08009a1c
 8006ef8:	08009a45 	.word	0x08009a45

08006efc <_free_r>:
 8006efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006efe:	2900      	cmp	r1, #0
 8006f00:	d044      	beq.n	8006f8c <_free_r+0x90>
 8006f02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f06:	9001      	str	r0, [sp, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f0e:	bfb8      	it	lt
 8006f10:	18e4      	addlt	r4, r4, r3
 8006f12:	f000 f8e7 	bl	80070e4 <__malloc_lock>
 8006f16:	4a1e      	ldr	r2, [pc, #120]	; (8006f90 <_free_r+0x94>)
 8006f18:	9801      	ldr	r0, [sp, #4]
 8006f1a:	6813      	ldr	r3, [r2, #0]
 8006f1c:	b933      	cbnz	r3, 8006f2c <_free_r+0x30>
 8006f1e:	6063      	str	r3, [r4, #4]
 8006f20:	6014      	str	r4, [r2, #0]
 8006f22:	b003      	add	sp, #12
 8006f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f28:	f000 b8e2 	b.w	80070f0 <__malloc_unlock>
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d908      	bls.n	8006f42 <_free_r+0x46>
 8006f30:	6825      	ldr	r5, [r4, #0]
 8006f32:	1961      	adds	r1, r4, r5
 8006f34:	428b      	cmp	r3, r1
 8006f36:	bf01      	itttt	eq
 8006f38:	6819      	ldreq	r1, [r3, #0]
 8006f3a:	685b      	ldreq	r3, [r3, #4]
 8006f3c:	1949      	addeq	r1, r1, r5
 8006f3e:	6021      	streq	r1, [r4, #0]
 8006f40:	e7ed      	b.n	8006f1e <_free_r+0x22>
 8006f42:	461a      	mov	r2, r3
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	b10b      	cbz	r3, 8006f4c <_free_r+0x50>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d9fa      	bls.n	8006f42 <_free_r+0x46>
 8006f4c:	6811      	ldr	r1, [r2, #0]
 8006f4e:	1855      	adds	r5, r2, r1
 8006f50:	42a5      	cmp	r5, r4
 8006f52:	d10b      	bne.n	8006f6c <_free_r+0x70>
 8006f54:	6824      	ldr	r4, [r4, #0]
 8006f56:	4421      	add	r1, r4
 8006f58:	1854      	adds	r4, r2, r1
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	6011      	str	r1, [r2, #0]
 8006f5e:	d1e0      	bne.n	8006f22 <_free_r+0x26>
 8006f60:	681c      	ldr	r4, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	6053      	str	r3, [r2, #4]
 8006f66:	440c      	add	r4, r1
 8006f68:	6014      	str	r4, [r2, #0]
 8006f6a:	e7da      	b.n	8006f22 <_free_r+0x26>
 8006f6c:	d902      	bls.n	8006f74 <_free_r+0x78>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6003      	str	r3, [r0, #0]
 8006f72:	e7d6      	b.n	8006f22 <_free_r+0x26>
 8006f74:	6825      	ldr	r5, [r4, #0]
 8006f76:	1961      	adds	r1, r4, r5
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	bf04      	itt	eq
 8006f7c:	6819      	ldreq	r1, [r3, #0]
 8006f7e:	685b      	ldreq	r3, [r3, #4]
 8006f80:	6063      	str	r3, [r4, #4]
 8006f82:	bf04      	itt	eq
 8006f84:	1949      	addeq	r1, r1, r5
 8006f86:	6021      	streq	r1, [r4, #0]
 8006f88:	6054      	str	r4, [r2, #4]
 8006f8a:	e7ca      	b.n	8006f22 <_free_r+0x26>
 8006f8c:	b003      	add	sp, #12
 8006f8e:	bd30      	pop	{r4, r5, pc}
 8006f90:	2000042c 	.word	0x2000042c

08006f94 <malloc>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <malloc+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f000 b823 	b.w	8006fe4 <_malloc_r>
 8006f9e:	bf00      	nop
 8006fa0:	20000064 	.word	0x20000064

08006fa4 <sbrk_aligned>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	4e0e      	ldr	r6, [pc, #56]	; (8006fe0 <sbrk_aligned+0x3c>)
 8006fa8:	460c      	mov	r4, r1
 8006faa:	6831      	ldr	r1, [r6, #0]
 8006fac:	4605      	mov	r5, r0
 8006fae:	b911      	cbnz	r1, 8006fb6 <sbrk_aligned+0x12>
 8006fb0:	f001 fff4 	bl	8008f9c <_sbrk_r>
 8006fb4:	6030      	str	r0, [r6, #0]
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	f001 ffef 	bl	8008f9c <_sbrk_r>
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	d00a      	beq.n	8006fd8 <sbrk_aligned+0x34>
 8006fc2:	1cc4      	adds	r4, r0, #3
 8006fc4:	f024 0403 	bic.w	r4, r4, #3
 8006fc8:	42a0      	cmp	r0, r4
 8006fca:	d007      	beq.n	8006fdc <sbrk_aligned+0x38>
 8006fcc:	1a21      	subs	r1, r4, r0
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f001 ffe4 	bl	8008f9c <_sbrk_r>
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d101      	bne.n	8006fdc <sbrk_aligned+0x38>
 8006fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006fdc:	4620      	mov	r0, r4
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	20000430 	.word	0x20000430

08006fe4 <_malloc_r>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	1ccd      	adds	r5, r1, #3
 8006fea:	f025 0503 	bic.w	r5, r5, #3
 8006fee:	3508      	adds	r5, #8
 8006ff0:	2d0c      	cmp	r5, #12
 8006ff2:	bf38      	it	cc
 8006ff4:	250c      	movcc	r5, #12
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	4607      	mov	r7, r0
 8006ffa:	db01      	blt.n	8007000 <_malloc_r+0x1c>
 8006ffc:	42a9      	cmp	r1, r5
 8006ffe:	d905      	bls.n	800700c <_malloc_r+0x28>
 8007000:	230c      	movs	r3, #12
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	2600      	movs	r6, #0
 8007006:	4630      	mov	r0, r6
 8007008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800700c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070e0 <_malloc_r+0xfc>
 8007010:	f000 f868 	bl	80070e4 <__malloc_lock>
 8007014:	f8d8 3000 	ldr.w	r3, [r8]
 8007018:	461c      	mov	r4, r3
 800701a:	bb5c      	cbnz	r4, 8007074 <_malloc_r+0x90>
 800701c:	4629      	mov	r1, r5
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ffc0 	bl	8006fa4 <sbrk_aligned>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	4604      	mov	r4, r0
 8007028:	d155      	bne.n	80070d6 <_malloc_r+0xf2>
 800702a:	f8d8 4000 	ldr.w	r4, [r8]
 800702e:	4626      	mov	r6, r4
 8007030:	2e00      	cmp	r6, #0
 8007032:	d145      	bne.n	80070c0 <_malloc_r+0xdc>
 8007034:	2c00      	cmp	r4, #0
 8007036:	d048      	beq.n	80070ca <_malloc_r+0xe6>
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	4631      	mov	r1, r6
 800703c:	4638      	mov	r0, r7
 800703e:	eb04 0903 	add.w	r9, r4, r3
 8007042:	f001 ffab 	bl	8008f9c <_sbrk_r>
 8007046:	4581      	cmp	r9, r0
 8007048:	d13f      	bne.n	80070ca <_malloc_r+0xe6>
 800704a:	6821      	ldr	r1, [r4, #0]
 800704c:	1a6d      	subs	r5, r5, r1
 800704e:	4629      	mov	r1, r5
 8007050:	4638      	mov	r0, r7
 8007052:	f7ff ffa7 	bl	8006fa4 <sbrk_aligned>
 8007056:	3001      	adds	r0, #1
 8007058:	d037      	beq.n	80070ca <_malloc_r+0xe6>
 800705a:	6823      	ldr	r3, [r4, #0]
 800705c:	442b      	add	r3, r5
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	f8d8 3000 	ldr.w	r3, [r8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d038      	beq.n	80070da <_malloc_r+0xf6>
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	42a2      	cmp	r2, r4
 800706c:	d12b      	bne.n	80070c6 <_malloc_r+0xe2>
 800706e:	2200      	movs	r2, #0
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	e00f      	b.n	8007094 <_malloc_r+0xb0>
 8007074:	6822      	ldr	r2, [r4, #0]
 8007076:	1b52      	subs	r2, r2, r5
 8007078:	d41f      	bmi.n	80070ba <_malloc_r+0xd6>
 800707a:	2a0b      	cmp	r2, #11
 800707c:	d917      	bls.n	80070ae <_malloc_r+0xca>
 800707e:	1961      	adds	r1, r4, r5
 8007080:	42a3      	cmp	r3, r4
 8007082:	6025      	str	r5, [r4, #0]
 8007084:	bf18      	it	ne
 8007086:	6059      	strne	r1, [r3, #4]
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	bf08      	it	eq
 800708c:	f8c8 1000 	streq.w	r1, [r8]
 8007090:	5162      	str	r2, [r4, r5]
 8007092:	604b      	str	r3, [r1, #4]
 8007094:	4638      	mov	r0, r7
 8007096:	f104 060b 	add.w	r6, r4, #11
 800709a:	f000 f829 	bl	80070f0 <__malloc_unlock>
 800709e:	f026 0607 	bic.w	r6, r6, #7
 80070a2:	1d23      	adds	r3, r4, #4
 80070a4:	1af2      	subs	r2, r6, r3
 80070a6:	d0ae      	beq.n	8007006 <_malloc_r+0x22>
 80070a8:	1b9b      	subs	r3, r3, r6
 80070aa:	50a3      	str	r3, [r4, r2]
 80070ac:	e7ab      	b.n	8007006 <_malloc_r+0x22>
 80070ae:	42a3      	cmp	r3, r4
 80070b0:	6862      	ldr	r2, [r4, #4]
 80070b2:	d1dd      	bne.n	8007070 <_malloc_r+0x8c>
 80070b4:	f8c8 2000 	str.w	r2, [r8]
 80070b8:	e7ec      	b.n	8007094 <_malloc_r+0xb0>
 80070ba:	4623      	mov	r3, r4
 80070bc:	6864      	ldr	r4, [r4, #4]
 80070be:	e7ac      	b.n	800701a <_malloc_r+0x36>
 80070c0:	4634      	mov	r4, r6
 80070c2:	6876      	ldr	r6, [r6, #4]
 80070c4:	e7b4      	b.n	8007030 <_malloc_r+0x4c>
 80070c6:	4613      	mov	r3, r2
 80070c8:	e7cc      	b.n	8007064 <_malloc_r+0x80>
 80070ca:	230c      	movs	r3, #12
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	4638      	mov	r0, r7
 80070d0:	f000 f80e 	bl	80070f0 <__malloc_unlock>
 80070d4:	e797      	b.n	8007006 <_malloc_r+0x22>
 80070d6:	6025      	str	r5, [r4, #0]
 80070d8:	e7dc      	b.n	8007094 <_malloc_r+0xb0>
 80070da:	605b      	str	r3, [r3, #4]
 80070dc:	deff      	udf	#255	; 0xff
 80070de:	bf00      	nop
 80070e0:	2000042c 	.word	0x2000042c

080070e4 <__malloc_lock>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__malloc_lock+0x8>)
 80070e6:	f7ff b884 	b.w	80061f2 <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	20000428 	.word	0x20000428

080070f0 <__malloc_unlock>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__malloc_unlock+0x8>)
 80070f2:	f7ff b87f 	b.w	80061f4 <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	20000428 	.word	0x20000428

080070fc <_Balloc>:
 80070fc:	b570      	push	{r4, r5, r6, lr}
 80070fe:	69c6      	ldr	r6, [r0, #28]
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	b976      	cbnz	r6, 8007124 <_Balloc+0x28>
 8007106:	2010      	movs	r0, #16
 8007108:	f7ff ff44 	bl	8006f94 <malloc>
 800710c:	4602      	mov	r2, r0
 800710e:	61e0      	str	r0, [r4, #28]
 8007110:	b920      	cbnz	r0, 800711c <_Balloc+0x20>
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <_Balloc+0x78>)
 8007114:	4818      	ldr	r0, [pc, #96]	; (8007178 <_Balloc+0x7c>)
 8007116:	216b      	movs	r1, #107	; 0x6b
 8007118:	f001 ff66 	bl	8008fe8 <__assert_func>
 800711c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007120:	6006      	str	r6, [r0, #0]
 8007122:	60c6      	str	r6, [r0, #12]
 8007124:	69e6      	ldr	r6, [r4, #28]
 8007126:	68f3      	ldr	r3, [r6, #12]
 8007128:	b183      	cbz	r3, 800714c <_Balloc+0x50>
 800712a:	69e3      	ldr	r3, [r4, #28]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007132:	b9b8      	cbnz	r0, 8007164 <_Balloc+0x68>
 8007134:	2101      	movs	r1, #1
 8007136:	fa01 f605 	lsl.w	r6, r1, r5
 800713a:	1d72      	adds	r2, r6, #5
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	4620      	mov	r0, r4
 8007140:	f001 ff70 	bl	8009024 <_calloc_r>
 8007144:	b160      	cbz	r0, 8007160 <_Balloc+0x64>
 8007146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800714a:	e00e      	b.n	800716a <_Balloc+0x6e>
 800714c:	2221      	movs	r2, #33	; 0x21
 800714e:	2104      	movs	r1, #4
 8007150:	4620      	mov	r0, r4
 8007152:	f001 ff67 	bl	8009024 <_calloc_r>
 8007156:	69e3      	ldr	r3, [r4, #28]
 8007158:	60f0      	str	r0, [r6, #12]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e4      	bne.n	800712a <_Balloc+0x2e>
 8007160:	2000      	movs	r0, #0
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	6802      	ldr	r2, [r0, #0]
 8007166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800716a:	2300      	movs	r3, #0
 800716c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007170:	e7f7      	b.n	8007162 <_Balloc+0x66>
 8007172:	bf00      	nop
 8007174:	08009a52 	.word	0x08009a52
 8007178:	08009ad2 	.word	0x08009ad2

0800717c <_Bfree>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	69c6      	ldr	r6, [r0, #28]
 8007180:	4605      	mov	r5, r0
 8007182:	460c      	mov	r4, r1
 8007184:	b976      	cbnz	r6, 80071a4 <_Bfree+0x28>
 8007186:	2010      	movs	r0, #16
 8007188:	f7ff ff04 	bl	8006f94 <malloc>
 800718c:	4602      	mov	r2, r0
 800718e:	61e8      	str	r0, [r5, #28]
 8007190:	b920      	cbnz	r0, 800719c <_Bfree+0x20>
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <_Bfree+0x3c>)
 8007194:	4809      	ldr	r0, [pc, #36]	; (80071bc <_Bfree+0x40>)
 8007196:	218f      	movs	r1, #143	; 0x8f
 8007198:	f001 ff26 	bl	8008fe8 <__assert_func>
 800719c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a0:	6006      	str	r6, [r0, #0]
 80071a2:	60c6      	str	r6, [r0, #12]
 80071a4:	b13c      	cbz	r4, 80071b6 <_Bfree+0x3a>
 80071a6:	69eb      	ldr	r3, [r5, #28]
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b0:	6021      	str	r1, [r4, #0]
 80071b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	08009a52 	.word	0x08009a52
 80071bc:	08009ad2 	.word	0x08009ad2

080071c0 <__multadd>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	690d      	ldr	r5, [r1, #16]
 80071c6:	4607      	mov	r7, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	461e      	mov	r6, r3
 80071cc:	f101 0c14 	add.w	ip, r1, #20
 80071d0:	2000      	movs	r0, #0
 80071d2:	f8dc 3000 	ldr.w	r3, [ip]
 80071d6:	b299      	uxth	r1, r3
 80071d8:	fb02 6101 	mla	r1, r2, r1, r6
 80071dc:	0c1e      	lsrs	r6, r3, #16
 80071de:	0c0b      	lsrs	r3, r1, #16
 80071e0:	fb02 3306 	mla	r3, r2, r6, r3
 80071e4:	b289      	uxth	r1, r1
 80071e6:	3001      	adds	r0, #1
 80071e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071ec:	4285      	cmp	r5, r0
 80071ee:	f84c 1b04 	str.w	r1, [ip], #4
 80071f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071f6:	dcec      	bgt.n	80071d2 <__multadd+0x12>
 80071f8:	b30e      	cbz	r6, 800723e <__multadd+0x7e>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc19      	bgt.n	8007234 <__multadd+0x74>
 8007200:	6861      	ldr	r1, [r4, #4]
 8007202:	4638      	mov	r0, r7
 8007204:	3101      	adds	r1, #1
 8007206:	f7ff ff79 	bl	80070fc <_Balloc>
 800720a:	4680      	mov	r8, r0
 800720c:	b928      	cbnz	r0, 800721a <__multadd+0x5a>
 800720e:	4602      	mov	r2, r0
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <__multadd+0x84>)
 8007212:	480d      	ldr	r0, [pc, #52]	; (8007248 <__multadd+0x88>)
 8007214:	21ba      	movs	r1, #186	; 0xba
 8007216:	f001 fee7 	bl	8008fe8 <__assert_func>
 800721a:	6922      	ldr	r2, [r4, #16]
 800721c:	3202      	adds	r2, #2
 800721e:	f104 010c 	add.w	r1, r4, #12
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	300c      	adds	r0, #12
 8007226:	f001 fec9 	bl	8008fbc <memcpy>
 800722a:	4621      	mov	r1, r4
 800722c:	4638      	mov	r0, r7
 800722e:	f7ff ffa5 	bl	800717c <_Bfree>
 8007232:	4644      	mov	r4, r8
 8007234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007238:	3501      	adds	r5, #1
 800723a:	615e      	str	r6, [r3, #20]
 800723c:	6125      	str	r5, [r4, #16]
 800723e:	4620      	mov	r0, r4
 8007240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007244:	08009ac1 	.word	0x08009ac1
 8007248:	08009ad2 	.word	0x08009ad2

0800724c <__s2b>:
 800724c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007250:	460c      	mov	r4, r1
 8007252:	4615      	mov	r5, r2
 8007254:	461f      	mov	r7, r3
 8007256:	2209      	movs	r2, #9
 8007258:	3308      	adds	r3, #8
 800725a:	4606      	mov	r6, r0
 800725c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007260:	2100      	movs	r1, #0
 8007262:	2201      	movs	r2, #1
 8007264:	429a      	cmp	r2, r3
 8007266:	db09      	blt.n	800727c <__s2b+0x30>
 8007268:	4630      	mov	r0, r6
 800726a:	f7ff ff47 	bl	80070fc <_Balloc>
 800726e:	b940      	cbnz	r0, 8007282 <__s2b+0x36>
 8007270:	4602      	mov	r2, r0
 8007272:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <__s2b+0x8c>)
 8007274:	4819      	ldr	r0, [pc, #100]	; (80072dc <__s2b+0x90>)
 8007276:	21d3      	movs	r1, #211	; 0xd3
 8007278:	f001 feb6 	bl	8008fe8 <__assert_func>
 800727c:	0052      	lsls	r2, r2, #1
 800727e:	3101      	adds	r1, #1
 8007280:	e7f0      	b.n	8007264 <__s2b+0x18>
 8007282:	9b08      	ldr	r3, [sp, #32]
 8007284:	6143      	str	r3, [r0, #20]
 8007286:	2d09      	cmp	r5, #9
 8007288:	f04f 0301 	mov.w	r3, #1
 800728c:	6103      	str	r3, [r0, #16]
 800728e:	dd16      	ble.n	80072be <__s2b+0x72>
 8007290:	f104 0909 	add.w	r9, r4, #9
 8007294:	46c8      	mov	r8, r9
 8007296:	442c      	add	r4, r5
 8007298:	f818 3b01 	ldrb.w	r3, [r8], #1
 800729c:	4601      	mov	r1, r0
 800729e:	3b30      	subs	r3, #48	; 0x30
 80072a0:	220a      	movs	r2, #10
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7ff ff8c 	bl	80071c0 <__multadd>
 80072a8:	45a0      	cmp	r8, r4
 80072aa:	d1f5      	bne.n	8007298 <__s2b+0x4c>
 80072ac:	f1a5 0408 	sub.w	r4, r5, #8
 80072b0:	444c      	add	r4, r9
 80072b2:	1b2d      	subs	r5, r5, r4
 80072b4:	1963      	adds	r3, r4, r5
 80072b6:	42bb      	cmp	r3, r7
 80072b8:	db04      	blt.n	80072c4 <__s2b+0x78>
 80072ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072be:	340a      	adds	r4, #10
 80072c0:	2509      	movs	r5, #9
 80072c2:	e7f6      	b.n	80072b2 <__s2b+0x66>
 80072c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072c8:	4601      	mov	r1, r0
 80072ca:	3b30      	subs	r3, #48	; 0x30
 80072cc:	220a      	movs	r2, #10
 80072ce:	4630      	mov	r0, r6
 80072d0:	f7ff ff76 	bl	80071c0 <__multadd>
 80072d4:	e7ee      	b.n	80072b4 <__s2b+0x68>
 80072d6:	bf00      	nop
 80072d8:	08009ac1 	.word	0x08009ac1
 80072dc:	08009ad2 	.word	0x08009ad2

080072e0 <__hi0bits>:
 80072e0:	0c03      	lsrs	r3, r0, #16
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	b9d3      	cbnz	r3, 800731c <__hi0bits+0x3c>
 80072e6:	0400      	lsls	r0, r0, #16
 80072e8:	2310      	movs	r3, #16
 80072ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072ee:	bf04      	itt	eq
 80072f0:	0200      	lsleq	r0, r0, #8
 80072f2:	3308      	addeq	r3, #8
 80072f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80072f8:	bf04      	itt	eq
 80072fa:	0100      	lsleq	r0, r0, #4
 80072fc:	3304      	addeq	r3, #4
 80072fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007302:	bf04      	itt	eq
 8007304:	0080      	lsleq	r0, r0, #2
 8007306:	3302      	addeq	r3, #2
 8007308:	2800      	cmp	r0, #0
 800730a:	db05      	blt.n	8007318 <__hi0bits+0x38>
 800730c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007310:	f103 0301 	add.w	r3, r3, #1
 8007314:	bf08      	it	eq
 8007316:	2320      	moveq	r3, #32
 8007318:	4618      	mov	r0, r3
 800731a:	4770      	bx	lr
 800731c:	2300      	movs	r3, #0
 800731e:	e7e4      	b.n	80072ea <__hi0bits+0xa>

08007320 <__lo0bits>:
 8007320:	6803      	ldr	r3, [r0, #0]
 8007322:	f013 0207 	ands.w	r2, r3, #7
 8007326:	d00c      	beq.n	8007342 <__lo0bits+0x22>
 8007328:	07d9      	lsls	r1, r3, #31
 800732a:	d422      	bmi.n	8007372 <__lo0bits+0x52>
 800732c:	079a      	lsls	r2, r3, #30
 800732e:	bf49      	itett	mi
 8007330:	085b      	lsrmi	r3, r3, #1
 8007332:	089b      	lsrpl	r3, r3, #2
 8007334:	6003      	strmi	r3, [r0, #0]
 8007336:	2201      	movmi	r2, #1
 8007338:	bf5c      	itt	pl
 800733a:	6003      	strpl	r3, [r0, #0]
 800733c:	2202      	movpl	r2, #2
 800733e:	4610      	mov	r0, r2
 8007340:	4770      	bx	lr
 8007342:	b299      	uxth	r1, r3
 8007344:	b909      	cbnz	r1, 800734a <__lo0bits+0x2a>
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	2210      	movs	r2, #16
 800734a:	b2d9      	uxtb	r1, r3
 800734c:	b909      	cbnz	r1, 8007352 <__lo0bits+0x32>
 800734e:	3208      	adds	r2, #8
 8007350:	0a1b      	lsrs	r3, r3, #8
 8007352:	0719      	lsls	r1, r3, #28
 8007354:	bf04      	itt	eq
 8007356:	091b      	lsreq	r3, r3, #4
 8007358:	3204      	addeq	r2, #4
 800735a:	0799      	lsls	r1, r3, #30
 800735c:	bf04      	itt	eq
 800735e:	089b      	lsreq	r3, r3, #2
 8007360:	3202      	addeq	r2, #2
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	d403      	bmi.n	800736e <__lo0bits+0x4e>
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f102 0201 	add.w	r2, r2, #1
 800736c:	d003      	beq.n	8007376 <__lo0bits+0x56>
 800736e:	6003      	str	r3, [r0, #0]
 8007370:	e7e5      	b.n	800733e <__lo0bits+0x1e>
 8007372:	2200      	movs	r2, #0
 8007374:	e7e3      	b.n	800733e <__lo0bits+0x1e>
 8007376:	2220      	movs	r2, #32
 8007378:	e7e1      	b.n	800733e <__lo0bits+0x1e>
	...

0800737c <__i2b>:
 800737c:	b510      	push	{r4, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	2101      	movs	r1, #1
 8007382:	f7ff febb 	bl	80070fc <_Balloc>
 8007386:	4602      	mov	r2, r0
 8007388:	b928      	cbnz	r0, 8007396 <__i2b+0x1a>
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <__i2b+0x24>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <__i2b+0x28>)
 800738e:	f240 1145 	movw	r1, #325	; 0x145
 8007392:	f001 fe29 	bl	8008fe8 <__assert_func>
 8007396:	2301      	movs	r3, #1
 8007398:	6144      	str	r4, [r0, #20]
 800739a:	6103      	str	r3, [r0, #16]
 800739c:	bd10      	pop	{r4, pc}
 800739e:	bf00      	nop
 80073a0:	08009ac1 	.word	0x08009ac1
 80073a4:	08009ad2 	.word	0x08009ad2

080073a8 <__multiply>:
 80073a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	4691      	mov	r9, r2
 80073ae:	690a      	ldr	r2, [r1, #16]
 80073b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	bfb8      	it	lt
 80073b8:	460b      	movlt	r3, r1
 80073ba:	460c      	mov	r4, r1
 80073bc:	bfbc      	itt	lt
 80073be:	464c      	movlt	r4, r9
 80073c0:	4699      	movlt	r9, r3
 80073c2:	6927      	ldr	r7, [r4, #16]
 80073c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073c8:	68a3      	ldr	r3, [r4, #8]
 80073ca:	6861      	ldr	r1, [r4, #4]
 80073cc:	eb07 060a 	add.w	r6, r7, sl
 80073d0:	42b3      	cmp	r3, r6
 80073d2:	b085      	sub	sp, #20
 80073d4:	bfb8      	it	lt
 80073d6:	3101      	addlt	r1, #1
 80073d8:	f7ff fe90 	bl	80070fc <_Balloc>
 80073dc:	b930      	cbnz	r0, 80073ec <__multiply+0x44>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b44      	ldr	r3, [pc, #272]	; (80074f4 <__multiply+0x14c>)
 80073e2:	4845      	ldr	r0, [pc, #276]	; (80074f8 <__multiply+0x150>)
 80073e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80073e8:	f001 fdfe 	bl	8008fe8 <__assert_func>
 80073ec:	f100 0514 	add.w	r5, r0, #20
 80073f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073f4:	462b      	mov	r3, r5
 80073f6:	2200      	movs	r2, #0
 80073f8:	4543      	cmp	r3, r8
 80073fa:	d321      	bcc.n	8007440 <__multiply+0x98>
 80073fc:	f104 0314 	add.w	r3, r4, #20
 8007400:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007404:	f109 0314 	add.w	r3, r9, #20
 8007408:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800740c:	9202      	str	r2, [sp, #8]
 800740e:	1b3a      	subs	r2, r7, r4
 8007410:	3a15      	subs	r2, #21
 8007412:	f022 0203 	bic.w	r2, r2, #3
 8007416:	3204      	adds	r2, #4
 8007418:	f104 0115 	add.w	r1, r4, #21
 800741c:	428f      	cmp	r7, r1
 800741e:	bf38      	it	cc
 8007420:	2204      	movcc	r2, #4
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	9a02      	ldr	r2, [sp, #8]
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	429a      	cmp	r2, r3
 800742a:	d80c      	bhi.n	8007446 <__multiply+0x9e>
 800742c:	2e00      	cmp	r6, #0
 800742e:	dd03      	ble.n	8007438 <__multiply+0x90>
 8007430:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007434:	2b00      	cmp	r3, #0
 8007436:	d05b      	beq.n	80074f0 <__multiply+0x148>
 8007438:	6106      	str	r6, [r0, #16]
 800743a:	b005      	add	sp, #20
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	f843 2b04 	str.w	r2, [r3], #4
 8007444:	e7d8      	b.n	80073f8 <__multiply+0x50>
 8007446:	f8b3 a000 	ldrh.w	sl, [r3]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d024      	beq.n	800749a <__multiply+0xf2>
 8007450:	f104 0e14 	add.w	lr, r4, #20
 8007454:	46a9      	mov	r9, r5
 8007456:	f04f 0c00 	mov.w	ip, #0
 800745a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800745e:	f8d9 1000 	ldr.w	r1, [r9]
 8007462:	fa1f fb82 	uxth.w	fp, r2
 8007466:	b289      	uxth	r1, r1
 8007468:	fb0a 110b 	mla	r1, sl, fp, r1
 800746c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007470:	f8d9 2000 	ldr.w	r2, [r9]
 8007474:	4461      	add	r1, ip
 8007476:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800747a:	fb0a c20b 	mla	r2, sl, fp, ip
 800747e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007482:	b289      	uxth	r1, r1
 8007484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007488:	4577      	cmp	r7, lr
 800748a:	f849 1b04 	str.w	r1, [r9], #4
 800748e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007492:	d8e2      	bhi.n	800745a <__multiply+0xb2>
 8007494:	9a01      	ldr	r2, [sp, #4]
 8007496:	f845 c002 	str.w	ip, [r5, r2]
 800749a:	9a03      	ldr	r2, [sp, #12]
 800749c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074a0:	3304      	adds	r3, #4
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	d021      	beq.n	80074ec <__multiply+0x144>
 80074a8:	6829      	ldr	r1, [r5, #0]
 80074aa:	f104 0c14 	add.w	ip, r4, #20
 80074ae:	46ae      	mov	lr, r5
 80074b0:	f04f 0a00 	mov.w	sl, #0
 80074b4:	f8bc b000 	ldrh.w	fp, [ip]
 80074b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074bc:	fb09 220b 	mla	r2, r9, fp, r2
 80074c0:	4452      	add	r2, sl
 80074c2:	b289      	uxth	r1, r1
 80074c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074c8:	f84e 1b04 	str.w	r1, [lr], #4
 80074cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80074d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074d4:	f8be 1000 	ldrh.w	r1, [lr]
 80074d8:	fb09 110a 	mla	r1, r9, sl, r1
 80074dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80074e0:	4567      	cmp	r7, ip
 80074e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074e6:	d8e5      	bhi.n	80074b4 <__multiply+0x10c>
 80074e8:	9a01      	ldr	r2, [sp, #4]
 80074ea:	50a9      	str	r1, [r5, r2]
 80074ec:	3504      	adds	r5, #4
 80074ee:	e799      	b.n	8007424 <__multiply+0x7c>
 80074f0:	3e01      	subs	r6, #1
 80074f2:	e79b      	b.n	800742c <__multiply+0x84>
 80074f4:	08009ac1 	.word	0x08009ac1
 80074f8:	08009ad2 	.word	0x08009ad2

080074fc <__pow5mult>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4615      	mov	r5, r2
 8007502:	f012 0203 	ands.w	r2, r2, #3
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	d007      	beq.n	800751c <__pow5mult+0x20>
 800750c:	4c25      	ldr	r4, [pc, #148]	; (80075a4 <__pow5mult+0xa8>)
 800750e:	3a01      	subs	r2, #1
 8007510:	2300      	movs	r3, #0
 8007512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007516:	f7ff fe53 	bl	80071c0 <__multadd>
 800751a:	4607      	mov	r7, r0
 800751c:	10ad      	asrs	r5, r5, #2
 800751e:	d03d      	beq.n	800759c <__pow5mult+0xa0>
 8007520:	69f4      	ldr	r4, [r6, #28]
 8007522:	b97c      	cbnz	r4, 8007544 <__pow5mult+0x48>
 8007524:	2010      	movs	r0, #16
 8007526:	f7ff fd35 	bl	8006f94 <malloc>
 800752a:	4602      	mov	r2, r0
 800752c:	61f0      	str	r0, [r6, #28]
 800752e:	b928      	cbnz	r0, 800753c <__pow5mult+0x40>
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <__pow5mult+0xac>)
 8007532:	481e      	ldr	r0, [pc, #120]	; (80075ac <__pow5mult+0xb0>)
 8007534:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007538:	f001 fd56 	bl	8008fe8 <__assert_func>
 800753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	60c4      	str	r4, [r0, #12]
 8007544:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800754c:	b94c      	cbnz	r4, 8007562 <__pow5mult+0x66>
 800754e:	f240 2171 	movw	r1, #625	; 0x271
 8007552:	4630      	mov	r0, r6
 8007554:	f7ff ff12 	bl	800737c <__i2b>
 8007558:	2300      	movs	r3, #0
 800755a:	f8c8 0008 	str.w	r0, [r8, #8]
 800755e:	4604      	mov	r4, r0
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	07eb      	lsls	r3, r5, #31
 8007568:	d50a      	bpl.n	8007580 <__pow5mult+0x84>
 800756a:	4639      	mov	r1, r7
 800756c:	4622      	mov	r2, r4
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ff1a 	bl	80073a8 <__multiply>
 8007574:	4639      	mov	r1, r7
 8007576:	4680      	mov	r8, r0
 8007578:	4630      	mov	r0, r6
 800757a:	f7ff fdff 	bl	800717c <_Bfree>
 800757e:	4647      	mov	r7, r8
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	d00b      	beq.n	800759c <__pow5mult+0xa0>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	b938      	cbnz	r0, 8007598 <__pow5mult+0x9c>
 8007588:	4622      	mov	r2, r4
 800758a:	4621      	mov	r1, r4
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff ff0b 	bl	80073a8 <__multiply>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f8c0 9000 	str.w	r9, [r0]
 8007598:	4604      	mov	r4, r0
 800759a:	e7e4      	b.n	8007566 <__pow5mult+0x6a>
 800759c:	4638      	mov	r0, r7
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	bf00      	nop
 80075a4:	08009c20 	.word	0x08009c20
 80075a8:	08009a52 	.word	0x08009a52
 80075ac:	08009ad2 	.word	0x08009ad2

080075b0 <__lshift>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	6849      	ldr	r1, [r1, #4]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	4607      	mov	r7, r0
 80075c2:	4691      	mov	r9, r2
 80075c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c8:	f108 0601 	add.w	r6, r8, #1
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	db0b      	blt.n	80075e8 <__lshift+0x38>
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fd93 	bl	80070fc <_Balloc>
 80075d6:	4605      	mov	r5, r0
 80075d8:	b948      	cbnz	r0, 80075ee <__lshift+0x3e>
 80075da:	4602      	mov	r2, r0
 80075dc:	4b28      	ldr	r3, [pc, #160]	; (8007680 <__lshift+0xd0>)
 80075de:	4829      	ldr	r0, [pc, #164]	; (8007684 <__lshift+0xd4>)
 80075e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80075e4:	f001 fd00 	bl	8008fe8 <__assert_func>
 80075e8:	3101      	adds	r1, #1
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	e7ee      	b.n	80075cc <__lshift+0x1c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f100 0114 	add.w	r1, r0, #20
 80075f4:	f100 0210 	add.w	r2, r0, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	4553      	cmp	r3, sl
 80075fc:	db33      	blt.n	8007666 <__lshift+0xb6>
 80075fe:	6920      	ldr	r0, [r4, #16]
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 0314 	add.w	r3, r4, #20
 8007608:	f019 091f 	ands.w	r9, r9, #31
 800760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007614:	d02b      	beq.n	800766e <__lshift+0xbe>
 8007616:	f1c9 0e20 	rsb	lr, r9, #32
 800761a:	468a      	mov	sl, r1
 800761c:	2200      	movs	r2, #0
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	fa00 f009 	lsl.w	r0, r0, r9
 8007624:	4310      	orrs	r0, r2
 8007626:	f84a 0b04 	str.w	r0, [sl], #4
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	459c      	cmp	ip, r3
 8007630:	fa22 f20e 	lsr.w	r2, r2, lr
 8007634:	d8f3      	bhi.n	800761e <__lshift+0x6e>
 8007636:	ebac 0304 	sub.w	r3, ip, r4
 800763a:	3b15      	subs	r3, #21
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	f104 0015 	add.w	r0, r4, #21
 8007646:	4584      	cmp	ip, r0
 8007648:	bf38      	it	cc
 800764a:	2304      	movcc	r3, #4
 800764c:	50ca      	str	r2, [r1, r3]
 800764e:	b10a      	cbz	r2, 8007654 <__lshift+0xa4>
 8007650:	f108 0602 	add.w	r6, r8, #2
 8007654:	3e01      	subs	r6, #1
 8007656:	4638      	mov	r0, r7
 8007658:	612e      	str	r6, [r5, #16]
 800765a:	4621      	mov	r1, r4
 800765c:	f7ff fd8e 	bl	800717c <_Bfree>
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	f842 0f04 	str.w	r0, [r2, #4]!
 800766a:	3301      	adds	r3, #1
 800766c:	e7c5      	b.n	80075fa <__lshift+0x4a>
 800766e:	3904      	subs	r1, #4
 8007670:	f853 2b04 	ldr.w	r2, [r3], #4
 8007674:	f841 2f04 	str.w	r2, [r1, #4]!
 8007678:	459c      	cmp	ip, r3
 800767a:	d8f9      	bhi.n	8007670 <__lshift+0xc0>
 800767c:	e7ea      	b.n	8007654 <__lshift+0xa4>
 800767e:	bf00      	nop
 8007680:	08009ac1 	.word	0x08009ac1
 8007684:	08009ad2 	.word	0x08009ad2

08007688 <__mcmp>:
 8007688:	b530      	push	{r4, r5, lr}
 800768a:	6902      	ldr	r2, [r0, #16]
 800768c:	690c      	ldr	r4, [r1, #16]
 800768e:	1b12      	subs	r2, r2, r4
 8007690:	d10e      	bne.n	80076b0 <__mcmp+0x28>
 8007692:	f100 0314 	add.w	r3, r0, #20
 8007696:	3114      	adds	r1, #20
 8007698:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800769c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076a8:	42a5      	cmp	r5, r4
 80076aa:	d003      	beq.n	80076b4 <__mcmp+0x2c>
 80076ac:	d305      	bcc.n	80076ba <__mcmp+0x32>
 80076ae:	2201      	movs	r2, #1
 80076b0:	4610      	mov	r0, r2
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	4283      	cmp	r3, r0
 80076b6:	d3f3      	bcc.n	80076a0 <__mcmp+0x18>
 80076b8:	e7fa      	b.n	80076b0 <__mcmp+0x28>
 80076ba:	f04f 32ff 	mov.w	r2, #4294967295
 80076be:	e7f7      	b.n	80076b0 <__mcmp+0x28>

080076c0 <__mdiff>:
 80076c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	460c      	mov	r4, r1
 80076c6:	4606      	mov	r6, r0
 80076c8:	4611      	mov	r1, r2
 80076ca:	4620      	mov	r0, r4
 80076cc:	4690      	mov	r8, r2
 80076ce:	f7ff ffdb 	bl	8007688 <__mcmp>
 80076d2:	1e05      	subs	r5, r0, #0
 80076d4:	d110      	bne.n	80076f8 <__mdiff+0x38>
 80076d6:	4629      	mov	r1, r5
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fd0f 	bl	80070fc <_Balloc>
 80076de:	b930      	cbnz	r0, 80076ee <__mdiff+0x2e>
 80076e0:	4b3a      	ldr	r3, [pc, #232]	; (80077cc <__mdiff+0x10c>)
 80076e2:	4602      	mov	r2, r0
 80076e4:	f240 2137 	movw	r1, #567	; 0x237
 80076e8:	4839      	ldr	r0, [pc, #228]	; (80077d0 <__mdiff+0x110>)
 80076ea:	f001 fc7d 	bl	8008fe8 <__assert_func>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	bfa4      	itt	ge
 80076fa:	4643      	movge	r3, r8
 80076fc:	46a0      	movge	r8, r4
 80076fe:	4630      	mov	r0, r6
 8007700:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007704:	bfa6      	itte	ge
 8007706:	461c      	movge	r4, r3
 8007708:	2500      	movge	r5, #0
 800770a:	2501      	movlt	r5, #1
 800770c:	f7ff fcf6 	bl	80070fc <_Balloc>
 8007710:	b920      	cbnz	r0, 800771c <__mdiff+0x5c>
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <__mdiff+0x10c>)
 8007714:	4602      	mov	r2, r0
 8007716:	f240 2145 	movw	r1, #581	; 0x245
 800771a:	e7e5      	b.n	80076e8 <__mdiff+0x28>
 800771c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007720:	6926      	ldr	r6, [r4, #16]
 8007722:	60c5      	str	r5, [r0, #12]
 8007724:	f104 0914 	add.w	r9, r4, #20
 8007728:	f108 0514 	add.w	r5, r8, #20
 800772c:	f100 0e14 	add.w	lr, r0, #20
 8007730:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007734:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007738:	f108 0210 	add.w	r2, r8, #16
 800773c:	46f2      	mov	sl, lr
 800773e:	2100      	movs	r1, #0
 8007740:	f859 3b04 	ldr.w	r3, [r9], #4
 8007744:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007748:	fa11 f88b 	uxtah	r8, r1, fp
 800774c:	b299      	uxth	r1, r3
 800774e:	0c1b      	lsrs	r3, r3, #16
 8007750:	eba8 0801 	sub.w	r8, r8, r1
 8007754:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007758:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800775c:	fa1f f888 	uxth.w	r8, r8
 8007760:	1419      	asrs	r1, r3, #16
 8007762:	454e      	cmp	r6, r9
 8007764:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007768:	f84a 3b04 	str.w	r3, [sl], #4
 800776c:	d8e8      	bhi.n	8007740 <__mdiff+0x80>
 800776e:	1b33      	subs	r3, r6, r4
 8007770:	3b15      	subs	r3, #21
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	3304      	adds	r3, #4
 8007778:	3415      	adds	r4, #21
 800777a:	42a6      	cmp	r6, r4
 800777c:	bf38      	it	cc
 800777e:	2304      	movcc	r3, #4
 8007780:	441d      	add	r5, r3
 8007782:	4473      	add	r3, lr
 8007784:	469e      	mov	lr, r3
 8007786:	462e      	mov	r6, r5
 8007788:	4566      	cmp	r6, ip
 800778a:	d30e      	bcc.n	80077aa <__mdiff+0xea>
 800778c:	f10c 0203 	add.w	r2, ip, #3
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	f022 0203 	bic.w	r2, r2, #3
 8007796:	3d03      	subs	r5, #3
 8007798:	45ac      	cmp	ip, r5
 800779a:	bf38      	it	cc
 800779c:	2200      	movcc	r2, #0
 800779e:	4413      	add	r3, r2
 80077a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077a4:	b17a      	cbz	r2, 80077c6 <__mdiff+0x106>
 80077a6:	6107      	str	r7, [r0, #16]
 80077a8:	e7a4      	b.n	80076f4 <__mdiff+0x34>
 80077aa:	f856 8b04 	ldr.w	r8, [r6], #4
 80077ae:	fa11 f288 	uxtah	r2, r1, r8
 80077b2:	1414      	asrs	r4, r2, #16
 80077b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077b8:	b292      	uxth	r2, r2
 80077ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077be:	f84e 2b04 	str.w	r2, [lr], #4
 80077c2:	1421      	asrs	r1, r4, #16
 80077c4:	e7e0      	b.n	8007788 <__mdiff+0xc8>
 80077c6:	3f01      	subs	r7, #1
 80077c8:	e7ea      	b.n	80077a0 <__mdiff+0xe0>
 80077ca:	bf00      	nop
 80077cc:	08009ac1 	.word	0x08009ac1
 80077d0:	08009ad2 	.word	0x08009ad2

080077d4 <__ulp>:
 80077d4:	b082      	sub	sp, #8
 80077d6:	ed8d 0b00 	vstr	d0, [sp]
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <__ulp+0x48>)
 80077de:	4013      	ands	r3, r2
 80077e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	dc08      	bgt.n	80077fa <__ulp+0x26>
 80077e8:	425b      	negs	r3, r3
 80077ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80077ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077f2:	da04      	bge.n	80077fe <__ulp+0x2a>
 80077f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077f8:	4113      	asrs	r3, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	e008      	b.n	8007810 <__ulp+0x3c>
 80077fe:	f1a2 0314 	sub.w	r3, r2, #20
 8007802:	2b1e      	cmp	r3, #30
 8007804:	bfda      	itte	le
 8007806:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800780a:	40da      	lsrle	r2, r3
 800780c:	2201      	movgt	r2, #1
 800780e:	2300      	movs	r3, #0
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	ec41 0b10 	vmov	d0, r0, r1
 8007818:	b002      	add	sp, #8
 800781a:	4770      	bx	lr
 800781c:	7ff00000 	.word	0x7ff00000

08007820 <__b2d>:
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	6906      	ldr	r6, [r0, #16]
 8007826:	f100 0814 	add.w	r8, r0, #20
 800782a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800782e:	1f37      	subs	r7, r6, #4
 8007830:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007834:	4610      	mov	r0, r2
 8007836:	f7ff fd53 	bl	80072e0 <__hi0bits>
 800783a:	f1c0 0320 	rsb	r3, r0, #32
 800783e:	280a      	cmp	r0, #10
 8007840:	600b      	str	r3, [r1, #0]
 8007842:	491b      	ldr	r1, [pc, #108]	; (80078b0 <__b2d+0x90>)
 8007844:	dc15      	bgt.n	8007872 <__b2d+0x52>
 8007846:	f1c0 0c0b 	rsb	ip, r0, #11
 800784a:	fa22 f30c 	lsr.w	r3, r2, ip
 800784e:	45b8      	cmp	r8, r7
 8007850:	ea43 0501 	orr.w	r5, r3, r1
 8007854:	bf34      	ite	cc
 8007856:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800785a:	2300      	movcs	r3, #0
 800785c:	3015      	adds	r0, #21
 800785e:	fa02 f000 	lsl.w	r0, r2, r0
 8007862:	fa23 f30c 	lsr.w	r3, r3, ip
 8007866:	4303      	orrs	r3, r0
 8007868:	461c      	mov	r4, r3
 800786a:	ec45 4b10 	vmov	d0, r4, r5
 800786e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007872:	45b8      	cmp	r8, r7
 8007874:	bf3a      	itte	cc
 8007876:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800787a:	f1a6 0708 	subcc.w	r7, r6, #8
 800787e:	2300      	movcs	r3, #0
 8007880:	380b      	subs	r0, #11
 8007882:	d012      	beq.n	80078aa <__b2d+0x8a>
 8007884:	f1c0 0120 	rsb	r1, r0, #32
 8007888:	fa23 f401 	lsr.w	r4, r3, r1
 800788c:	4082      	lsls	r2, r0
 800788e:	4322      	orrs	r2, r4
 8007890:	4547      	cmp	r7, r8
 8007892:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007896:	bf8c      	ite	hi
 8007898:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800789c:	2200      	movls	r2, #0
 800789e:	4083      	lsls	r3, r0
 80078a0:	40ca      	lsrs	r2, r1
 80078a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80078a6:	4313      	orrs	r3, r2
 80078a8:	e7de      	b.n	8007868 <__b2d+0x48>
 80078aa:	ea42 0501 	orr.w	r5, r2, r1
 80078ae:	e7db      	b.n	8007868 <__b2d+0x48>
 80078b0:	3ff00000 	.word	0x3ff00000

080078b4 <__d2b>:
 80078b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	460f      	mov	r7, r1
 80078ba:	2101      	movs	r1, #1
 80078bc:	ec59 8b10 	vmov	r8, r9, d0
 80078c0:	4616      	mov	r6, r2
 80078c2:	f7ff fc1b 	bl	80070fc <_Balloc>
 80078c6:	4604      	mov	r4, r0
 80078c8:	b930      	cbnz	r0, 80078d8 <__d2b+0x24>
 80078ca:	4602      	mov	r2, r0
 80078cc:	4b24      	ldr	r3, [pc, #144]	; (8007960 <__d2b+0xac>)
 80078ce:	4825      	ldr	r0, [pc, #148]	; (8007964 <__d2b+0xb0>)
 80078d0:	f240 310f 	movw	r1, #783	; 0x30f
 80078d4:	f001 fb88 	bl	8008fe8 <__assert_func>
 80078d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e0:	bb2d      	cbnz	r5, 800792e <__d2b+0x7a>
 80078e2:	9301      	str	r3, [sp, #4]
 80078e4:	f1b8 0300 	subs.w	r3, r8, #0
 80078e8:	d026      	beq.n	8007938 <__d2b+0x84>
 80078ea:	4668      	mov	r0, sp
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	f7ff fd17 	bl	8007320 <__lo0bits>
 80078f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078f6:	b1e8      	cbz	r0, 8007934 <__d2b+0x80>
 80078f8:	f1c0 0320 	rsb	r3, r0, #32
 80078fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007900:	430b      	orrs	r3, r1
 8007902:	40c2      	lsrs	r2, r0
 8007904:	6163      	str	r3, [r4, #20]
 8007906:	9201      	str	r2, [sp, #4]
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	61a3      	str	r3, [r4, #24]
 800790c:	2b00      	cmp	r3, #0
 800790e:	bf14      	ite	ne
 8007910:	2202      	movne	r2, #2
 8007912:	2201      	moveq	r2, #1
 8007914:	6122      	str	r2, [r4, #16]
 8007916:	b1bd      	cbz	r5, 8007948 <__d2b+0x94>
 8007918:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800791c:	4405      	add	r5, r0
 800791e:	603d      	str	r5, [r7, #0]
 8007920:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007924:	6030      	str	r0, [r6, #0]
 8007926:	4620      	mov	r0, r4
 8007928:	b003      	add	sp, #12
 800792a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800792e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007932:	e7d6      	b.n	80078e2 <__d2b+0x2e>
 8007934:	6161      	str	r1, [r4, #20]
 8007936:	e7e7      	b.n	8007908 <__d2b+0x54>
 8007938:	a801      	add	r0, sp, #4
 800793a:	f7ff fcf1 	bl	8007320 <__lo0bits>
 800793e:	9b01      	ldr	r3, [sp, #4]
 8007940:	6163      	str	r3, [r4, #20]
 8007942:	3020      	adds	r0, #32
 8007944:	2201      	movs	r2, #1
 8007946:	e7e5      	b.n	8007914 <__d2b+0x60>
 8007948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800794c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007950:	6038      	str	r0, [r7, #0]
 8007952:	6918      	ldr	r0, [r3, #16]
 8007954:	f7ff fcc4 	bl	80072e0 <__hi0bits>
 8007958:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800795c:	e7e2      	b.n	8007924 <__d2b+0x70>
 800795e:	bf00      	nop
 8007960:	08009ac1 	.word	0x08009ac1
 8007964:	08009ad2 	.word	0x08009ad2

08007968 <__ratio>:
 8007968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	4688      	mov	r8, r1
 800796e:	4669      	mov	r1, sp
 8007970:	4681      	mov	r9, r0
 8007972:	f7ff ff55 	bl	8007820 <__b2d>
 8007976:	a901      	add	r1, sp, #4
 8007978:	4640      	mov	r0, r8
 800797a:	ec55 4b10 	vmov	r4, r5, d0
 800797e:	f7ff ff4f 	bl	8007820 <__b2d>
 8007982:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007986:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800798a:	eba3 0c02 	sub.w	ip, r3, r2
 800798e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007998:	ec51 0b10 	vmov	r0, r1, d0
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfd6      	itet	le
 80079a0:	460a      	movle	r2, r1
 80079a2:	462a      	movgt	r2, r5
 80079a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079a8:	468b      	mov	fp, r1
 80079aa:	462f      	mov	r7, r5
 80079ac:	bfd4      	ite	le
 80079ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80079b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80079b6:	4620      	mov	r0, r4
 80079b8:	ee10 2a10 	vmov	r2, s0
 80079bc:	465b      	mov	r3, fp
 80079be:	4639      	mov	r1, r7
 80079c0:	f7f8 ff44 	bl	800084c <__aeabi_ddiv>
 80079c4:	ec41 0b10 	vmov	d0, r0, r1
 80079c8:	b003      	add	sp, #12
 80079ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079ce <__copybits>:
 80079ce:	3901      	subs	r1, #1
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	1149      	asrs	r1, r1, #5
 80079d4:	6914      	ldr	r4, [r2, #16]
 80079d6:	3101      	adds	r1, #1
 80079d8:	f102 0314 	add.w	r3, r2, #20
 80079dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079e4:	1f05      	subs	r5, r0, #4
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	d30c      	bcc.n	8007a04 <__copybits+0x36>
 80079ea:	1aa3      	subs	r3, r4, r2
 80079ec:	3b11      	subs	r3, #17
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	3211      	adds	r2, #17
 80079f4:	42a2      	cmp	r2, r4
 80079f6:	bf88      	it	hi
 80079f8:	2300      	movhi	r3, #0
 80079fa:	4418      	add	r0, r3
 80079fc:	2300      	movs	r3, #0
 80079fe:	4288      	cmp	r0, r1
 8007a00:	d305      	bcc.n	8007a0e <__copybits+0x40>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a08:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a0c:	e7eb      	b.n	80079e6 <__copybits+0x18>
 8007a0e:	f840 3b04 	str.w	r3, [r0], #4
 8007a12:	e7f4      	b.n	80079fe <__copybits+0x30>

08007a14 <__any_on>:
 8007a14:	f100 0214 	add.w	r2, r0, #20
 8007a18:	6900      	ldr	r0, [r0, #16]
 8007a1a:	114b      	asrs	r3, r1, #5
 8007a1c:	4298      	cmp	r0, r3
 8007a1e:	b510      	push	{r4, lr}
 8007a20:	db11      	blt.n	8007a46 <__any_on+0x32>
 8007a22:	dd0a      	ble.n	8007a3a <__any_on+0x26>
 8007a24:	f011 011f 	ands.w	r1, r1, #31
 8007a28:	d007      	beq.n	8007a3a <__any_on+0x26>
 8007a2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a2e:	fa24 f001 	lsr.w	r0, r4, r1
 8007a32:	fa00 f101 	lsl.w	r1, r0, r1
 8007a36:	428c      	cmp	r4, r1
 8007a38:	d10b      	bne.n	8007a52 <__any_on+0x3e>
 8007a3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d803      	bhi.n	8007a4a <__any_on+0x36>
 8007a42:	2000      	movs	r0, #0
 8007a44:	bd10      	pop	{r4, pc}
 8007a46:	4603      	mov	r3, r0
 8007a48:	e7f7      	b.n	8007a3a <__any_on+0x26>
 8007a4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	d0f5      	beq.n	8007a3e <__any_on+0x2a>
 8007a52:	2001      	movs	r0, #1
 8007a54:	e7f6      	b.n	8007a44 <__any_on+0x30>

08007a56 <sulp>:
 8007a56:	b570      	push	{r4, r5, r6, lr}
 8007a58:	4604      	mov	r4, r0
 8007a5a:	460d      	mov	r5, r1
 8007a5c:	ec45 4b10 	vmov	d0, r4, r5
 8007a60:	4616      	mov	r6, r2
 8007a62:	f7ff feb7 	bl	80077d4 <__ulp>
 8007a66:	ec51 0b10 	vmov	r0, r1, d0
 8007a6a:	b17e      	cbz	r6, 8007a8c <sulp+0x36>
 8007a6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd09      	ble.n	8007a8c <sulp+0x36>
 8007a78:	051b      	lsls	r3, r3, #20
 8007a7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a7e:	2400      	movs	r4, #0
 8007a80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f7f8 fdb6 	bl	80005f8 <__aeabi_dmul>
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a90 <_strtod_l>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	ed2d 8b02 	vpush	{d8}
 8007a98:	b09b      	sub	sp, #108	; 0x6c
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	9216      	str	r2, [sp, #88]	; 0x58
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	f04f 0800 	mov.w	r8, #0
 8007aa8:	f04f 0900 	mov.w	r9, #0
 8007aac:	460a      	mov	r2, r1
 8007aae:	9215      	str	r2, [sp, #84]	; 0x54
 8007ab0:	7811      	ldrb	r1, [r2, #0]
 8007ab2:	292b      	cmp	r1, #43	; 0x2b
 8007ab4:	d04c      	beq.n	8007b50 <_strtod_l+0xc0>
 8007ab6:	d83a      	bhi.n	8007b2e <_strtod_l+0x9e>
 8007ab8:	290d      	cmp	r1, #13
 8007aba:	d834      	bhi.n	8007b26 <_strtod_l+0x96>
 8007abc:	2908      	cmp	r1, #8
 8007abe:	d834      	bhi.n	8007b2a <_strtod_l+0x9a>
 8007ac0:	2900      	cmp	r1, #0
 8007ac2:	d03d      	beq.n	8007b40 <_strtod_l+0xb0>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8007ac8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007aca:	7832      	ldrb	r2, [r6, #0]
 8007acc:	2a30      	cmp	r2, #48	; 0x30
 8007ace:	f040 80b4 	bne.w	8007c3a <_strtod_l+0x1aa>
 8007ad2:	7872      	ldrb	r2, [r6, #1]
 8007ad4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ad8:	2a58      	cmp	r2, #88	; 0x58
 8007ada:	d170      	bne.n	8007bbe <_strtod_l+0x12e>
 8007adc:	9302      	str	r3, [sp, #8]
 8007ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	ab16      	add	r3, sp, #88	; 0x58
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	4a8e      	ldr	r2, [pc, #568]	; (8007d20 <_strtod_l+0x290>)
 8007ae8:	ab17      	add	r3, sp, #92	; 0x5c
 8007aea:	a915      	add	r1, sp, #84	; 0x54
 8007aec:	4620      	mov	r0, r4
 8007aee:	f001 fb17 	bl	8009120 <__gethex>
 8007af2:	f010 070f 	ands.w	r7, r0, #15
 8007af6:	4605      	mov	r5, r0
 8007af8:	d005      	beq.n	8007b06 <_strtod_l+0x76>
 8007afa:	2f06      	cmp	r7, #6
 8007afc:	d12a      	bne.n	8007b54 <_strtod_l+0xc4>
 8007afe:	3601      	adds	r6, #1
 8007b00:	2300      	movs	r3, #0
 8007b02:	9615      	str	r6, [sp, #84]	; 0x54
 8007b04:	930a      	str	r3, [sp, #40]	; 0x28
 8007b06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f040 857f 	bne.w	800860c <_strtod_l+0xb7c>
 8007b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b10:	b1db      	cbz	r3, 8007b4a <_strtod_l+0xba>
 8007b12:	4642      	mov	r2, r8
 8007b14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b18:	ec43 2b10 	vmov	d0, r2, r3
 8007b1c:	b01b      	add	sp, #108	; 0x6c
 8007b1e:	ecbd 8b02 	vpop	{d8}
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	2920      	cmp	r1, #32
 8007b28:	d1cc      	bne.n	8007ac4 <_strtod_l+0x34>
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	e7bf      	b.n	8007aae <_strtod_l+0x1e>
 8007b2e:	292d      	cmp	r1, #45	; 0x2d
 8007b30:	d1c8      	bne.n	8007ac4 <_strtod_l+0x34>
 8007b32:	2101      	movs	r1, #1
 8007b34:	910a      	str	r1, [sp, #40]	; 0x28
 8007b36:	1c51      	adds	r1, r2, #1
 8007b38:	9115      	str	r1, [sp, #84]	; 0x54
 8007b3a:	7852      	ldrb	r2, [r2, #1]
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	d1c3      	bne.n	8007ac8 <_strtod_l+0x38>
 8007b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b42:	9515      	str	r5, [sp, #84]	; 0x54
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 855f 	bne.w	8008608 <_strtod_l+0xb78>
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	e7e3      	b.n	8007b18 <_strtod_l+0x88>
 8007b50:	2100      	movs	r1, #0
 8007b52:	e7ef      	b.n	8007b34 <_strtod_l+0xa4>
 8007b54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b56:	b13a      	cbz	r2, 8007b68 <_strtod_l+0xd8>
 8007b58:	2135      	movs	r1, #53	; 0x35
 8007b5a:	a818      	add	r0, sp, #96	; 0x60
 8007b5c:	f7ff ff37 	bl	80079ce <__copybits>
 8007b60:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7ff fb0a 	bl	800717c <_Bfree>
 8007b68:	3f01      	subs	r7, #1
 8007b6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b6c:	2f04      	cmp	r7, #4
 8007b6e:	d806      	bhi.n	8007b7e <_strtod_l+0xee>
 8007b70:	e8df f007 	tbb	[pc, r7]
 8007b74:	201d0314 	.word	0x201d0314
 8007b78:	14          	.byte	0x14
 8007b79:	00          	.byte	0x00
 8007b7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007b7e:	05e9      	lsls	r1, r5, #23
 8007b80:	bf48      	it	mi
 8007b82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b8a:	0d1b      	lsrs	r3, r3, #20
 8007b8c:	051b      	lsls	r3, r3, #20
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1b9      	bne.n	8007b06 <_strtod_l+0x76>
 8007b92:	f7fe fb03 	bl	800619c <__errno>
 8007b96:	2322      	movs	r3, #34	; 0x22
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	e7b4      	b.n	8007b06 <_strtod_l+0x76>
 8007b9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ba0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ba4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ba8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bac:	e7e7      	b.n	8007b7e <_strtod_l+0xee>
 8007bae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d28 <_strtod_l+0x298>
 8007bb2:	e7e4      	b.n	8007b7e <_strtod_l+0xee>
 8007bb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bb8:	f04f 38ff 	mov.w	r8, #4294967295
 8007bbc:	e7df      	b.n	8007b7e <_strtod_l+0xee>
 8007bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	9215      	str	r2, [sp, #84]	; 0x54
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d0f9      	beq.n	8007bbe <_strtod_l+0x12e>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d09b      	beq.n	8007b06 <_strtod_l+0x76>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	9304      	str	r3, [sp, #16]
 8007bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007bde:	46d3      	mov	fp, sl
 8007be0:	220a      	movs	r2, #10
 8007be2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007be4:	7806      	ldrb	r6, [r0, #0]
 8007be6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007bea:	b2d9      	uxtb	r1, r3
 8007bec:	2909      	cmp	r1, #9
 8007bee:	d926      	bls.n	8007c3e <_strtod_l+0x1ae>
 8007bf0:	494c      	ldr	r1, [pc, #304]	; (8007d24 <_strtod_l+0x294>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f001 f9c0 	bl	8008f78 <strncmp>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d030      	beq.n	8007c5e <_strtod_l+0x1ce>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	4632      	mov	r2, r6
 8007c00:	9005      	str	r0, [sp, #20]
 8007c02:	465e      	mov	r6, fp
 8007c04:	4603      	mov	r3, r0
 8007c06:	2a65      	cmp	r2, #101	; 0x65
 8007c08:	d001      	beq.n	8007c0e <_strtod_l+0x17e>
 8007c0a:	2a45      	cmp	r2, #69	; 0x45
 8007c0c:	d113      	bne.n	8007c36 <_strtod_l+0x1a6>
 8007c0e:	b91e      	cbnz	r6, 8007c18 <_strtod_l+0x188>
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	4302      	orrs	r2, r0
 8007c14:	d094      	beq.n	8007b40 <_strtod_l+0xb0>
 8007c16:	2600      	movs	r6, #0
 8007c18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c1a:	1c6a      	adds	r2, r5, #1
 8007c1c:	9215      	str	r2, [sp, #84]	; 0x54
 8007c1e:	786a      	ldrb	r2, [r5, #1]
 8007c20:	2a2b      	cmp	r2, #43	; 0x2b
 8007c22:	d074      	beq.n	8007d0e <_strtod_l+0x27e>
 8007c24:	2a2d      	cmp	r2, #45	; 0x2d
 8007c26:	d078      	beq.n	8007d1a <_strtod_l+0x28a>
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c30:	2909      	cmp	r1, #9
 8007c32:	d97f      	bls.n	8007d34 <_strtod_l+0x2a4>
 8007c34:	9515      	str	r5, [sp, #84]	; 0x54
 8007c36:	2700      	movs	r7, #0
 8007c38:	e09e      	b.n	8007d78 <_strtod_l+0x2e8>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e7c8      	b.n	8007bd0 <_strtod_l+0x140>
 8007c3e:	f1bb 0f08 	cmp.w	fp, #8
 8007c42:	bfd8      	it	le
 8007c44:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007c46:	f100 0001 	add.w	r0, r0, #1
 8007c4a:	bfda      	itte	le
 8007c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c50:	9309      	strle	r3, [sp, #36]	; 0x24
 8007c52:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007c56:	f10b 0b01 	add.w	fp, fp, #1
 8007c5a:	9015      	str	r0, [sp, #84]	; 0x54
 8007c5c:	e7c1      	b.n	8007be2 <_strtod_l+0x152>
 8007c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	9215      	str	r2, [sp, #84]	; 0x54
 8007c64:	785a      	ldrb	r2, [r3, #1]
 8007c66:	f1bb 0f00 	cmp.w	fp, #0
 8007c6a:	d037      	beq.n	8007cdc <_strtod_l+0x24c>
 8007c6c:	9005      	str	r0, [sp, #20]
 8007c6e:	465e      	mov	r6, fp
 8007c70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d912      	bls.n	8007c9e <_strtod_l+0x20e>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7c4      	b.n	8007c06 <_strtod_l+0x176>
 8007c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	9215      	str	r2, [sp, #84]	; 0x54
 8007c82:	785a      	ldrb	r2, [r3, #1]
 8007c84:	3001      	adds	r0, #1
 8007c86:	2a30      	cmp	r2, #48	; 0x30
 8007c88:	d0f8      	beq.n	8007c7c <_strtod_l+0x1ec>
 8007c8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	f200 84c1 	bhi.w	8008616 <_strtod_l+0xb86>
 8007c94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c96:	9005      	str	r0, [sp, #20]
 8007c98:	2000      	movs	r0, #0
 8007c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	3a30      	subs	r2, #48	; 0x30
 8007ca0:	f100 0301 	add.w	r3, r0, #1
 8007ca4:	d014      	beq.n	8007cd0 <_strtod_l+0x240>
 8007ca6:	9905      	ldr	r1, [sp, #20]
 8007ca8:	4419      	add	r1, r3
 8007caa:	9105      	str	r1, [sp, #20]
 8007cac:	4633      	mov	r3, r6
 8007cae:	eb00 0c06 	add.w	ip, r0, r6
 8007cb2:	210a      	movs	r1, #10
 8007cb4:	4563      	cmp	r3, ip
 8007cb6:	d113      	bne.n	8007ce0 <_strtod_l+0x250>
 8007cb8:	1833      	adds	r3, r6, r0
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	f106 0601 	add.w	r6, r6, #1
 8007cc0:	4406      	add	r6, r0
 8007cc2:	dc1a      	bgt.n	8007cfa <_strtod_l+0x26a>
 8007cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	fb03 2301 	mla	r3, r3, r1, r2
 8007ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cd2:	1c51      	adds	r1, r2, #1
 8007cd4:	9115      	str	r1, [sp, #84]	; 0x54
 8007cd6:	7852      	ldrb	r2, [r2, #1]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	e7c9      	b.n	8007c70 <_strtod_l+0x1e0>
 8007cdc:	4658      	mov	r0, fp
 8007cde:	e7d2      	b.n	8007c86 <_strtod_l+0x1f6>
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	f103 0301 	add.w	r3, r3, #1
 8007ce6:	dc03      	bgt.n	8007cf0 <_strtod_l+0x260>
 8007ce8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cea:	434f      	muls	r7, r1
 8007cec:	9709      	str	r7, [sp, #36]	; 0x24
 8007cee:	e7e1      	b.n	8007cb4 <_strtod_l+0x224>
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	bfd8      	it	le
 8007cf4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007cf8:	e7dc      	b.n	8007cb4 <_strtod_l+0x224>
 8007cfa:	2e10      	cmp	r6, #16
 8007cfc:	bfdc      	itt	le
 8007cfe:	230a      	movle	r3, #10
 8007d00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007d04:	e7e3      	b.n	8007cce <_strtod_l+0x23e>
 8007d06:	2300      	movs	r3, #0
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e780      	b.n	8007c10 <_strtod_l+0x180>
 8007d0e:	f04f 0c00 	mov.w	ip, #0
 8007d12:	1caa      	adds	r2, r5, #2
 8007d14:	9215      	str	r2, [sp, #84]	; 0x54
 8007d16:	78aa      	ldrb	r2, [r5, #2]
 8007d18:	e788      	b.n	8007c2c <_strtod_l+0x19c>
 8007d1a:	f04f 0c01 	mov.w	ip, #1
 8007d1e:	e7f8      	b.n	8007d12 <_strtod_l+0x282>
 8007d20:	08009c30 	.word	0x08009c30
 8007d24:	08009c2c 	.word	0x08009c2c
 8007d28:	7ff00000 	.word	0x7ff00000
 8007d2c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d2e:	1c51      	adds	r1, r2, #1
 8007d30:	9115      	str	r1, [sp, #84]	; 0x54
 8007d32:	7852      	ldrb	r2, [r2, #1]
 8007d34:	2a30      	cmp	r2, #48	; 0x30
 8007d36:	d0f9      	beq.n	8007d2c <_strtod_l+0x29c>
 8007d38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d3c:	2908      	cmp	r1, #8
 8007d3e:	f63f af7a 	bhi.w	8007c36 <_strtod_l+0x1a6>
 8007d42:	3a30      	subs	r2, #48	; 0x30
 8007d44:	9208      	str	r2, [sp, #32]
 8007d46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d48:	920c      	str	r2, [sp, #48]	; 0x30
 8007d4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d4c:	1c57      	adds	r7, r2, #1
 8007d4e:	9715      	str	r7, [sp, #84]	; 0x54
 8007d50:	7852      	ldrb	r2, [r2, #1]
 8007d52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d56:	f1be 0f09 	cmp.w	lr, #9
 8007d5a:	d938      	bls.n	8007dce <_strtod_l+0x33e>
 8007d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d5e:	1a7f      	subs	r7, r7, r1
 8007d60:	2f08      	cmp	r7, #8
 8007d62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d66:	dc03      	bgt.n	8007d70 <_strtod_l+0x2e0>
 8007d68:	9908      	ldr	r1, [sp, #32]
 8007d6a:	428f      	cmp	r7, r1
 8007d6c:	bfa8      	it	ge
 8007d6e:	460f      	movge	r7, r1
 8007d70:	f1bc 0f00 	cmp.w	ip, #0
 8007d74:	d000      	beq.n	8007d78 <_strtod_l+0x2e8>
 8007d76:	427f      	negs	r7, r7
 8007d78:	2e00      	cmp	r6, #0
 8007d7a:	d14f      	bne.n	8007e1c <_strtod_l+0x38c>
 8007d7c:	9904      	ldr	r1, [sp, #16]
 8007d7e:	4301      	orrs	r1, r0
 8007d80:	f47f aec1 	bne.w	8007b06 <_strtod_l+0x76>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f47f aedb 	bne.w	8007b40 <_strtod_l+0xb0>
 8007d8a:	2a69      	cmp	r2, #105	; 0x69
 8007d8c:	d029      	beq.n	8007de2 <_strtod_l+0x352>
 8007d8e:	dc26      	bgt.n	8007dde <_strtod_l+0x34e>
 8007d90:	2a49      	cmp	r2, #73	; 0x49
 8007d92:	d026      	beq.n	8007de2 <_strtod_l+0x352>
 8007d94:	2a4e      	cmp	r2, #78	; 0x4e
 8007d96:	f47f aed3 	bne.w	8007b40 <_strtod_l+0xb0>
 8007d9a:	499b      	ldr	r1, [pc, #620]	; (8008008 <_strtod_l+0x578>)
 8007d9c:	a815      	add	r0, sp, #84	; 0x54
 8007d9e:	f001 fbff 	bl	80095a0 <__match>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f43f aecc 	beq.w	8007b40 <_strtod_l+0xb0>
 8007da8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d12f      	bne.n	8007e10 <_strtod_l+0x380>
 8007db0:	4996      	ldr	r1, [pc, #600]	; (800800c <_strtod_l+0x57c>)
 8007db2:	aa18      	add	r2, sp, #96	; 0x60
 8007db4:	a815      	add	r0, sp, #84	; 0x54
 8007db6:	f001 fc07 	bl	80095c8 <__hexnan>
 8007dba:	2805      	cmp	r0, #5
 8007dbc:	d128      	bne.n	8007e10 <_strtod_l+0x380>
 8007dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007dc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007dc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007dcc:	e69b      	b.n	8007b06 <_strtod_l+0x76>
 8007dce:	9f08      	ldr	r7, [sp, #32]
 8007dd0:	210a      	movs	r1, #10
 8007dd2:	fb01 2107 	mla	r1, r1, r7, r2
 8007dd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007dda:	9208      	str	r2, [sp, #32]
 8007ddc:	e7b5      	b.n	8007d4a <_strtod_l+0x2ba>
 8007dde:	2a6e      	cmp	r2, #110	; 0x6e
 8007de0:	e7d9      	b.n	8007d96 <_strtod_l+0x306>
 8007de2:	498b      	ldr	r1, [pc, #556]	; (8008010 <_strtod_l+0x580>)
 8007de4:	a815      	add	r0, sp, #84	; 0x54
 8007de6:	f001 fbdb 	bl	80095a0 <__match>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f aea8 	beq.w	8007b40 <_strtod_l+0xb0>
 8007df0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007df2:	4988      	ldr	r1, [pc, #544]	; (8008014 <_strtod_l+0x584>)
 8007df4:	3b01      	subs	r3, #1
 8007df6:	a815      	add	r0, sp, #84	; 0x54
 8007df8:	9315      	str	r3, [sp, #84]	; 0x54
 8007dfa:	f001 fbd1 	bl	80095a0 <__match>
 8007dfe:	b910      	cbnz	r0, 8007e06 <_strtod_l+0x376>
 8007e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e02:	3301      	adds	r3, #1
 8007e04:	9315      	str	r3, [sp, #84]	; 0x54
 8007e06:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008024 <_strtod_l+0x594>
 8007e0a:	f04f 0800 	mov.w	r8, #0
 8007e0e:	e67a      	b.n	8007b06 <_strtod_l+0x76>
 8007e10:	4881      	ldr	r0, [pc, #516]	; (8008018 <_strtod_l+0x588>)
 8007e12:	f001 f8e1 	bl	8008fd8 <nan>
 8007e16:	ec59 8b10 	vmov	r8, r9, d0
 8007e1a:	e674      	b.n	8007b06 <_strtod_l+0x76>
 8007e1c:	9b05      	ldr	r3, [sp, #20]
 8007e1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e20:	1afb      	subs	r3, r7, r3
 8007e22:	f1bb 0f00 	cmp.w	fp, #0
 8007e26:	bf08      	it	eq
 8007e28:	46b3      	moveq	fp, r6
 8007e2a:	2e10      	cmp	r6, #16
 8007e2c:	9308      	str	r3, [sp, #32]
 8007e2e:	4635      	mov	r5, r6
 8007e30:	bfa8      	it	ge
 8007e32:	2510      	movge	r5, #16
 8007e34:	f7f8 fb66 	bl	8000504 <__aeabi_ui2d>
 8007e38:	2e09      	cmp	r6, #9
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	dd13      	ble.n	8007e68 <_strtod_l+0x3d8>
 8007e40:	4b76      	ldr	r3, [pc, #472]	; (800801c <_strtod_l+0x58c>)
 8007e42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4650      	mov	r0, sl
 8007e52:	4689      	mov	r9, r1
 8007e54:	f7f8 fb56 	bl	8000504 <__aeabi_ui2d>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4649      	mov	r1, r9
 8007e60:	f7f8 fa14 	bl	800028c <__adddf3>
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	2e0f      	cmp	r6, #15
 8007e6a:	dc38      	bgt.n	8007ede <_strtod_l+0x44e>
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f43f ae49 	beq.w	8007b06 <_strtod_l+0x76>
 8007e74:	dd24      	ble.n	8007ec0 <_strtod_l+0x430>
 8007e76:	2b16      	cmp	r3, #22
 8007e78:	dc0b      	bgt.n	8007e92 <_strtod_l+0x402>
 8007e7a:	4968      	ldr	r1, [pc, #416]	; (800801c <_strtod_l+0x58c>)
 8007e7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e84:	4642      	mov	r2, r8
 8007e86:	464b      	mov	r3, r9
 8007e88:	f7f8 fbb6 	bl	80005f8 <__aeabi_dmul>
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	e639      	b.n	8007b06 <_strtod_l+0x76>
 8007e92:	9a08      	ldr	r2, [sp, #32]
 8007e94:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	db20      	blt.n	8007ede <_strtod_l+0x44e>
 8007e9c:	4c5f      	ldr	r4, [pc, #380]	; (800801c <_strtod_l+0x58c>)
 8007e9e:	f1c6 060f 	rsb	r6, r6, #15
 8007ea2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eae:	f7f8 fba3 	bl	80005f8 <__aeabi_dmul>
 8007eb2:	9b08      	ldr	r3, [sp, #32]
 8007eb4:	1b9e      	subs	r6, r3, r6
 8007eb6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007eba:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ebe:	e7e3      	b.n	8007e88 <_strtod_l+0x3f8>
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	3316      	adds	r3, #22
 8007ec4:	db0b      	blt.n	8007ede <_strtod_l+0x44e>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	1bdf      	subs	r7, r3, r7
 8007eca:	4b54      	ldr	r3, [pc, #336]	; (800801c <_strtod_l+0x58c>)
 8007ecc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	f7f8 fcb8 	bl	800084c <__aeabi_ddiv>
 8007edc:	e7d6      	b.n	8007e8c <_strtod_l+0x3fc>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	1b75      	subs	r5, r6, r5
 8007ee2:	441d      	add	r5, r3
 8007ee4:	2d00      	cmp	r5, #0
 8007ee6:	dd70      	ble.n	8007fca <_strtod_l+0x53a>
 8007ee8:	f015 030f 	ands.w	r3, r5, #15
 8007eec:	d00a      	beq.n	8007f04 <_strtod_l+0x474>
 8007eee:	494b      	ldr	r1, [pc, #300]	; (800801c <_strtod_l+0x58c>)
 8007ef0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efc:	f7f8 fb7c 	bl	80005f8 <__aeabi_dmul>
 8007f00:	4680      	mov	r8, r0
 8007f02:	4689      	mov	r9, r1
 8007f04:	f035 050f 	bics.w	r5, r5, #15
 8007f08:	d04d      	beq.n	8007fa6 <_strtod_l+0x516>
 8007f0a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007f0e:	dd22      	ble.n	8007f56 <_strtod_l+0x4c6>
 8007f10:	2500      	movs	r5, #0
 8007f12:	46ab      	mov	fp, r5
 8007f14:	9509      	str	r5, [sp, #36]	; 0x24
 8007f16:	9505      	str	r5, [sp, #20]
 8007f18:	2322      	movs	r3, #34	; 0x22
 8007f1a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008024 <_strtod_l+0x594>
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	f04f 0800 	mov.w	r8, #0
 8007f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f43f aded 	beq.w	8007b06 <_strtod_l+0x76>
 8007f2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff f924 	bl	800717c <_Bfree>
 8007f34:	9905      	ldr	r1, [sp, #20]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f7ff f920 	bl	800717c <_Bfree>
 8007f3c:	4659      	mov	r1, fp
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f7ff f91c 	bl	800717c <_Bfree>
 8007f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7ff f918 	bl	800717c <_Bfree>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff f914 	bl	800717c <_Bfree>
 8007f54:	e5d7      	b.n	8007b06 <_strtod_l+0x76>
 8007f56:	4b32      	ldr	r3, [pc, #200]	; (8008020 <_strtod_l+0x590>)
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	112d      	asrs	r5, r5, #4
 8007f5e:	4640      	mov	r0, r8
 8007f60:	4649      	mov	r1, r9
 8007f62:	469a      	mov	sl, r3
 8007f64:	2d01      	cmp	r5, #1
 8007f66:	dc21      	bgt.n	8007fac <_strtod_l+0x51c>
 8007f68:	b10b      	cbz	r3, 8007f6e <_strtod_l+0x4de>
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4689      	mov	r9, r1
 8007f6e:	492c      	ldr	r1, [pc, #176]	; (8008020 <_strtod_l+0x590>)
 8007f70:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f74:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f78:	4642      	mov	r2, r8
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	4b27      	ldr	r3, [pc, #156]	; (8008024 <_strtod_l+0x594>)
 8007f86:	460a      	mov	r2, r1
 8007f88:	400b      	ands	r3, r1
 8007f8a:	4927      	ldr	r1, [pc, #156]	; (8008028 <_strtod_l+0x598>)
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	4680      	mov	r8, r0
 8007f90:	d8be      	bhi.n	8007f10 <_strtod_l+0x480>
 8007f92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f96:	428b      	cmp	r3, r1
 8007f98:	bf86      	itte	hi
 8007f9a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800802c <_strtod_l+0x59c>
 8007f9e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007fa2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	e07b      	b.n	80080a4 <_strtod_l+0x614>
 8007fac:	07ea      	lsls	r2, r5, #31
 8007fae:	d505      	bpl.n	8007fbc <_strtod_l+0x52c>
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 fb1f 	bl	80005f8 <__aeabi_dmul>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9a04      	ldr	r2, [sp, #16]
 8007fbe:	3208      	adds	r2, #8
 8007fc0:	f10a 0a01 	add.w	sl, sl, #1
 8007fc4:	106d      	asrs	r5, r5, #1
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	e7cc      	b.n	8007f64 <_strtod_l+0x4d4>
 8007fca:	d0ec      	beq.n	8007fa6 <_strtod_l+0x516>
 8007fcc:	426d      	negs	r5, r5
 8007fce:	f015 020f 	ands.w	r2, r5, #15
 8007fd2:	d00a      	beq.n	8007fea <_strtod_l+0x55a>
 8007fd4:	4b11      	ldr	r3, [pc, #68]	; (800801c <_strtod_l+0x58c>)
 8007fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 fc33 	bl	800084c <__aeabi_ddiv>
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	4689      	mov	r9, r1
 8007fea:	112d      	asrs	r5, r5, #4
 8007fec:	d0db      	beq.n	8007fa6 <_strtod_l+0x516>
 8007fee:	2d1f      	cmp	r5, #31
 8007ff0:	dd1e      	ble.n	8008030 <_strtod_l+0x5a0>
 8007ff2:	2500      	movs	r5, #0
 8007ff4:	46ab      	mov	fp, r5
 8007ff6:	9509      	str	r5, [sp, #36]	; 0x24
 8007ff8:	9505      	str	r5, [sp, #20]
 8007ffa:	2322      	movs	r3, #34	; 0x22
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	f04f 0900 	mov.w	r9, #0
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	e78d      	b.n	8007f24 <_strtod_l+0x494>
 8008008:	08009a19 	.word	0x08009a19
 800800c:	08009c44 	.word	0x08009c44
 8008010:	08009a11 	.word	0x08009a11
 8008014:	08009a48 	.word	0x08009a48
 8008018:	08009dd5 	.word	0x08009dd5
 800801c:	08009b58 	.word	0x08009b58
 8008020:	08009b30 	.word	0x08009b30
 8008024:	7ff00000 	.word	0x7ff00000
 8008028:	7ca00000 	.word	0x7ca00000
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	f015 0310 	ands.w	r3, r5, #16
 8008034:	bf18      	it	ne
 8008036:	236a      	movne	r3, #106	; 0x6a
 8008038:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80083dc <_strtod_l+0x94c>
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	2300      	movs	r3, #0
 8008044:	07ea      	lsls	r2, r5, #31
 8008046:	d504      	bpl.n	8008052 <_strtod_l+0x5c2>
 8008048:	e9da 2300 	ldrd	r2, r3, [sl]
 800804c:	f7f8 fad4 	bl	80005f8 <__aeabi_dmul>
 8008050:	2301      	movs	r3, #1
 8008052:	106d      	asrs	r5, r5, #1
 8008054:	f10a 0a08 	add.w	sl, sl, #8
 8008058:	d1f4      	bne.n	8008044 <_strtod_l+0x5b4>
 800805a:	b10b      	cbz	r3, 8008060 <_strtod_l+0x5d0>
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	9b04      	ldr	r3, [sp, #16]
 8008062:	b1bb      	cbz	r3, 8008094 <_strtod_l+0x604>
 8008064:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008068:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800806c:	2b00      	cmp	r3, #0
 800806e:	4649      	mov	r1, r9
 8008070:	dd10      	ble.n	8008094 <_strtod_l+0x604>
 8008072:	2b1f      	cmp	r3, #31
 8008074:	f340 811e 	ble.w	80082b4 <_strtod_l+0x824>
 8008078:	2b34      	cmp	r3, #52	; 0x34
 800807a:	bfde      	ittt	le
 800807c:	f04f 33ff 	movle.w	r3, #4294967295
 8008080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008084:	4093      	lslle	r3, r2
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	bfcc      	ite	gt
 800808c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008090:	ea03 0901 	andle.w	r9, r3, r1
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1a6      	bne.n	8007ff2 <_strtod_l+0x562>
 80080a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080aa:	4633      	mov	r3, r6
 80080ac:	465a      	mov	r2, fp
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7ff f8cc 	bl	800724c <__s2b>
 80080b4:	9009      	str	r0, [sp, #36]	; 0x24
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f43f af2a 	beq.w	8007f10 <_strtod_l+0x480>
 80080bc:	9a08      	ldr	r2, [sp, #32]
 80080be:	9b05      	ldr	r3, [sp, #20]
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	eba3 0307 	sub.w	r3, r3, r7
 80080c6:	bfa8      	it	ge
 80080c8:	2300      	movge	r3, #0
 80080ca:	930c      	str	r3, [sp, #48]	; 0x30
 80080cc:	2500      	movs	r5, #0
 80080ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080d2:	9312      	str	r3, [sp, #72]	; 0x48
 80080d4:	46ab      	mov	fp, r5
 80080d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d8:	4620      	mov	r0, r4
 80080da:	6859      	ldr	r1, [r3, #4]
 80080dc:	f7ff f80e 	bl	80070fc <_Balloc>
 80080e0:	9005      	str	r0, [sp, #20]
 80080e2:	2800      	cmp	r0, #0
 80080e4:	f43f af18 	beq.w	8007f18 <_strtod_l+0x488>
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	3202      	adds	r2, #2
 80080ee:	f103 010c 	add.w	r1, r3, #12
 80080f2:	0092      	lsls	r2, r2, #2
 80080f4:	300c      	adds	r0, #12
 80080f6:	f000 ff61 	bl	8008fbc <memcpy>
 80080fa:	ec49 8b10 	vmov	d0, r8, r9
 80080fe:	aa18      	add	r2, sp, #96	; 0x60
 8008100:	a917      	add	r1, sp, #92	; 0x5c
 8008102:	4620      	mov	r0, r4
 8008104:	f7ff fbd6 	bl	80078b4 <__d2b>
 8008108:	ec49 8b18 	vmov	d8, r8, r9
 800810c:	9016      	str	r0, [sp, #88]	; 0x58
 800810e:	2800      	cmp	r0, #0
 8008110:	f43f af02 	beq.w	8007f18 <_strtod_l+0x488>
 8008114:	2101      	movs	r1, #1
 8008116:	4620      	mov	r0, r4
 8008118:	f7ff f930 	bl	800737c <__i2b>
 800811c:	4683      	mov	fp, r0
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f aefa 	beq.w	8007f18 <_strtod_l+0x488>
 8008124:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008126:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008128:	2e00      	cmp	r6, #0
 800812a:	bfab      	itete	ge
 800812c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800812e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008130:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008132:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008136:	bfac      	ite	ge
 8008138:	eb06 0a03 	addge.w	sl, r6, r3
 800813c:	1b9f      	sublt	r7, r3, r6
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	1af6      	subs	r6, r6, r3
 8008142:	4416      	add	r6, r2
 8008144:	4ba0      	ldr	r3, [pc, #640]	; (80083c8 <_strtod_l+0x938>)
 8008146:	3e01      	subs	r6, #1
 8008148:	429e      	cmp	r6, r3
 800814a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800814e:	f280 80c4 	bge.w	80082da <_strtod_l+0x84a>
 8008152:	1b9b      	subs	r3, r3, r6
 8008154:	2b1f      	cmp	r3, #31
 8008156:	eba2 0203 	sub.w	r2, r2, r3
 800815a:	f04f 0101 	mov.w	r1, #1
 800815e:	f300 80b0 	bgt.w	80082c2 <_strtod_l+0x832>
 8008162:	fa01 f303 	lsl.w	r3, r1, r3
 8008166:	930e      	str	r3, [sp, #56]	; 0x38
 8008168:	2300      	movs	r3, #0
 800816a:	930d      	str	r3, [sp, #52]	; 0x34
 800816c:	eb0a 0602 	add.w	r6, sl, r2
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	45b2      	cmp	sl, r6
 8008174:	4417      	add	r7, r2
 8008176:	441f      	add	r7, r3
 8008178:	4653      	mov	r3, sl
 800817a:	bfa8      	it	ge
 800817c:	4633      	movge	r3, r6
 800817e:	42bb      	cmp	r3, r7
 8008180:	bfa8      	it	ge
 8008182:	463b      	movge	r3, r7
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfc2      	ittt	gt
 8008188:	1af6      	subgt	r6, r6, r3
 800818a:	1aff      	subgt	r7, r7, r3
 800818c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008192:	2b00      	cmp	r3, #0
 8008194:	dd17      	ble.n	80081c6 <_strtod_l+0x736>
 8008196:	4659      	mov	r1, fp
 8008198:	461a      	mov	r2, r3
 800819a:	4620      	mov	r0, r4
 800819c:	f7ff f9ae 	bl	80074fc <__pow5mult>
 80081a0:	4683      	mov	fp, r0
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f43f aeb8 	beq.w	8007f18 <_strtod_l+0x488>
 80081a8:	4601      	mov	r1, r0
 80081aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081ac:	4620      	mov	r0, r4
 80081ae:	f7ff f8fb 	bl	80073a8 <__multiply>
 80081b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f43f aeaf 	beq.w	8007f18 <_strtod_l+0x488>
 80081ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80081bc:	4620      	mov	r0, r4
 80081be:	f7fe ffdd 	bl	800717c <_Bfree>
 80081c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c4:	9316      	str	r3, [sp, #88]	; 0x58
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	f300 808c 	bgt.w	80082e4 <_strtod_l+0x854>
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd08      	ble.n	80081e4 <_strtod_l+0x754>
 80081d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081d4:	9905      	ldr	r1, [sp, #20]
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff f990 	bl	80074fc <__pow5mult>
 80081dc:	9005      	str	r0, [sp, #20]
 80081de:	2800      	cmp	r0, #0
 80081e0:	f43f ae9a 	beq.w	8007f18 <_strtod_l+0x488>
 80081e4:	2f00      	cmp	r7, #0
 80081e6:	dd08      	ble.n	80081fa <_strtod_l+0x76a>
 80081e8:	9905      	ldr	r1, [sp, #20]
 80081ea:	463a      	mov	r2, r7
 80081ec:	4620      	mov	r0, r4
 80081ee:	f7ff f9df 	bl	80075b0 <__lshift>
 80081f2:	9005      	str	r0, [sp, #20]
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f43f ae8f 	beq.w	8007f18 <_strtod_l+0x488>
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	dd08      	ble.n	8008212 <_strtod_l+0x782>
 8008200:	4659      	mov	r1, fp
 8008202:	4652      	mov	r2, sl
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff f9d3 	bl	80075b0 <__lshift>
 800820a:	4683      	mov	fp, r0
 800820c:	2800      	cmp	r0, #0
 800820e:	f43f ae83 	beq.w	8007f18 <_strtod_l+0x488>
 8008212:	9a05      	ldr	r2, [sp, #20]
 8008214:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff fa52 	bl	80076c0 <__mdiff>
 800821c:	4605      	mov	r5, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae7a 	beq.w	8007f18 <_strtod_l+0x488>
 8008224:	68c3      	ldr	r3, [r0, #12]
 8008226:	930b      	str	r3, [sp, #44]	; 0x2c
 8008228:	2300      	movs	r3, #0
 800822a:	60c3      	str	r3, [r0, #12]
 800822c:	4659      	mov	r1, fp
 800822e:	f7ff fa2b 	bl	8007688 <__mcmp>
 8008232:	2800      	cmp	r0, #0
 8008234:	da60      	bge.n	80082f8 <_strtod_l+0x868>
 8008236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008238:	ea53 0308 	orrs.w	r3, r3, r8
 800823c:	f040 8084 	bne.w	8008348 <_strtod_l+0x8b8>
 8008240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008244:	2b00      	cmp	r3, #0
 8008246:	d17f      	bne.n	8008348 <_strtod_l+0x8b8>
 8008248:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	051b      	lsls	r3, r3, #20
 8008250:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008254:	d978      	bls.n	8008348 <_strtod_l+0x8b8>
 8008256:	696b      	ldr	r3, [r5, #20]
 8008258:	b913      	cbnz	r3, 8008260 <_strtod_l+0x7d0>
 800825a:	692b      	ldr	r3, [r5, #16]
 800825c:	2b01      	cmp	r3, #1
 800825e:	dd73      	ble.n	8008348 <_strtod_l+0x8b8>
 8008260:	4629      	mov	r1, r5
 8008262:	2201      	movs	r2, #1
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff f9a3 	bl	80075b0 <__lshift>
 800826a:	4659      	mov	r1, fp
 800826c:	4605      	mov	r5, r0
 800826e:	f7ff fa0b 	bl	8007688 <__mcmp>
 8008272:	2800      	cmp	r0, #0
 8008274:	dd68      	ble.n	8008348 <_strtod_l+0x8b8>
 8008276:	9904      	ldr	r1, [sp, #16]
 8008278:	4a54      	ldr	r2, [pc, #336]	; (80083cc <_strtod_l+0x93c>)
 800827a:	464b      	mov	r3, r9
 800827c:	2900      	cmp	r1, #0
 800827e:	f000 8084 	beq.w	800838a <_strtod_l+0x8fa>
 8008282:	ea02 0109 	and.w	r1, r2, r9
 8008286:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800828a:	dc7e      	bgt.n	800838a <_strtod_l+0x8fa>
 800828c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008290:	f77f aeb3 	ble.w	8007ffa <_strtod_l+0x56a>
 8008294:	4b4e      	ldr	r3, [pc, #312]	; (80083d0 <_strtod_l+0x940>)
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	2200      	movs	r2, #0
 800829c:	f7f8 f9ac 	bl	80005f8 <__aeabi_dmul>
 80082a0:	4b4a      	ldr	r3, [pc, #296]	; (80083cc <_strtod_l+0x93c>)
 80082a2:	400b      	ands	r3, r1
 80082a4:	4680      	mov	r8, r0
 80082a6:	4689      	mov	r9, r1
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f ae3f 	bne.w	8007f2c <_strtod_l+0x49c>
 80082ae:	2322      	movs	r3, #34	; 0x22
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	e63b      	b.n	8007f2c <_strtod_l+0x49c>
 80082b4:	f04f 32ff 	mov.w	r2, #4294967295
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	ea03 0808 	and.w	r8, r3, r8
 80082c0:	e6e8      	b.n	8008094 <_strtod_l+0x604>
 80082c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80082c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80082ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80082ce:	36e2      	adds	r6, #226	; 0xe2
 80082d0:	fa01 f306 	lsl.w	r3, r1, r6
 80082d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80082d8:	e748      	b.n	800816c <_strtod_l+0x6dc>
 80082da:	2100      	movs	r1, #0
 80082dc:	2301      	movs	r3, #1
 80082de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80082e2:	e743      	b.n	800816c <_strtod_l+0x6dc>
 80082e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082e6:	4632      	mov	r2, r6
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7ff f961 	bl	80075b0 <__lshift>
 80082ee:	9016      	str	r0, [sp, #88]	; 0x58
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f47f af6b 	bne.w	80081cc <_strtod_l+0x73c>
 80082f6:	e60f      	b.n	8007f18 <_strtod_l+0x488>
 80082f8:	46ca      	mov	sl, r9
 80082fa:	d171      	bne.n	80083e0 <_strtod_l+0x950>
 80082fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008302:	b352      	cbz	r2, 800835a <_strtod_l+0x8ca>
 8008304:	4a33      	ldr	r2, [pc, #204]	; (80083d4 <_strtod_l+0x944>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d12a      	bne.n	8008360 <_strtod_l+0x8d0>
 800830a:	9b04      	ldr	r3, [sp, #16]
 800830c:	4641      	mov	r1, r8
 800830e:	b1fb      	cbz	r3, 8008350 <_strtod_l+0x8c0>
 8008310:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <_strtod_l+0x93c>)
 8008312:	ea09 0303 	and.w	r3, r9, r3
 8008316:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800831a:	f04f 32ff 	mov.w	r2, #4294967295
 800831e:	d81a      	bhi.n	8008356 <_strtod_l+0x8c6>
 8008320:	0d1b      	lsrs	r3, r3, #20
 8008322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	4299      	cmp	r1, r3
 800832c:	d118      	bne.n	8008360 <_strtod_l+0x8d0>
 800832e:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <_strtod_l+0x948>)
 8008330:	459a      	cmp	sl, r3
 8008332:	d102      	bne.n	800833a <_strtod_l+0x8aa>
 8008334:	3101      	adds	r1, #1
 8008336:	f43f adef 	beq.w	8007f18 <_strtod_l+0x488>
 800833a:	4b24      	ldr	r3, [pc, #144]	; (80083cc <_strtod_l+0x93c>)
 800833c:	ea0a 0303 	and.w	r3, sl, r3
 8008340:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008344:	f04f 0800 	mov.w	r8, #0
 8008348:	9b04      	ldr	r3, [sp, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1a2      	bne.n	8008294 <_strtod_l+0x804>
 800834e:	e5ed      	b.n	8007f2c <_strtod_l+0x49c>
 8008350:	f04f 33ff 	mov.w	r3, #4294967295
 8008354:	e7e9      	b.n	800832a <_strtod_l+0x89a>
 8008356:	4613      	mov	r3, r2
 8008358:	e7e7      	b.n	800832a <_strtod_l+0x89a>
 800835a:	ea53 0308 	orrs.w	r3, r3, r8
 800835e:	d08a      	beq.n	8008276 <_strtod_l+0x7e6>
 8008360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008362:	b1e3      	cbz	r3, 800839e <_strtod_l+0x90e>
 8008364:	ea13 0f0a 	tst.w	r3, sl
 8008368:	d0ee      	beq.n	8008348 <_strtod_l+0x8b8>
 800836a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	4640      	mov	r0, r8
 8008370:	4649      	mov	r1, r9
 8008372:	b1c3      	cbz	r3, 80083a6 <_strtod_l+0x916>
 8008374:	f7ff fb6f 	bl	8007a56 <sulp>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	ec51 0b18 	vmov	r0, r1, d8
 8008380:	f7f7 ff84 	bl	800028c <__adddf3>
 8008384:	4680      	mov	r8, r0
 8008386:	4689      	mov	r9, r1
 8008388:	e7de      	b.n	8008348 <_strtod_l+0x8b8>
 800838a:	4013      	ands	r3, r2
 800838c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008390:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008394:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008398:	f04f 38ff 	mov.w	r8, #4294967295
 800839c:	e7d4      	b.n	8008348 <_strtod_l+0x8b8>
 800839e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a0:	ea13 0f08 	tst.w	r3, r8
 80083a4:	e7e0      	b.n	8008368 <_strtod_l+0x8d8>
 80083a6:	f7ff fb56 	bl	8007a56 <sulp>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	ec51 0b18 	vmov	r0, r1, d8
 80083b2:	f7f7 ff69 	bl	8000288 <__aeabi_dsub>
 80083b6:	2200      	movs	r2, #0
 80083b8:	2300      	movs	r3, #0
 80083ba:	4680      	mov	r8, r0
 80083bc:	4689      	mov	r9, r1
 80083be:	f7f8 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d0c0      	beq.n	8008348 <_strtod_l+0x8b8>
 80083c6:	e618      	b.n	8007ffa <_strtod_l+0x56a>
 80083c8:	fffffc02 	.word	0xfffffc02
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	39500000 	.word	0x39500000
 80083d4:	000fffff 	.word	0x000fffff
 80083d8:	7fefffff 	.word	0x7fefffff
 80083dc:	08009c58 	.word	0x08009c58
 80083e0:	4659      	mov	r1, fp
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff fac0 	bl	8007968 <__ratio>
 80083e8:	ec57 6b10 	vmov	r6, r7, d0
 80083ec:	ee10 0a10 	vmov	r0, s0
 80083f0:	2200      	movs	r2, #0
 80083f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fb7a 	bl	8000af0 <__aeabi_dcmple>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d071      	beq.n	80084e4 <_strtod_l+0xa54>
 8008400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d17c      	bne.n	8008500 <_strtod_l+0xa70>
 8008406:	f1b8 0f00 	cmp.w	r8, #0
 800840a:	d15a      	bne.n	80084c2 <_strtod_l+0xa32>
 800840c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008410:	2b00      	cmp	r3, #0
 8008412:	d15d      	bne.n	80084d0 <_strtod_l+0xa40>
 8008414:	4b90      	ldr	r3, [pc, #576]	; (8008658 <_strtod_l+0xbc8>)
 8008416:	2200      	movs	r2, #0
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 fb5e 	bl	8000adc <__aeabi_dcmplt>
 8008420:	2800      	cmp	r0, #0
 8008422:	d15c      	bne.n	80084de <_strtod_l+0xa4e>
 8008424:	4630      	mov	r0, r6
 8008426:	4639      	mov	r1, r7
 8008428:	4b8c      	ldr	r3, [pc, #560]	; (800865c <_strtod_l+0xbcc>)
 800842a:	2200      	movs	r2, #0
 800842c:	f7f8 f8e4 	bl	80005f8 <__aeabi_dmul>
 8008430:	4606      	mov	r6, r0
 8008432:	460f      	mov	r7, r1
 8008434:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008438:	9606      	str	r6, [sp, #24]
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008440:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008444:	4b86      	ldr	r3, [pc, #536]	; (8008660 <_strtod_l+0xbd0>)
 8008446:	ea0a 0303 	and.w	r3, sl, r3
 800844a:	930d      	str	r3, [sp, #52]	; 0x34
 800844c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800844e:	4b85      	ldr	r3, [pc, #532]	; (8008664 <_strtod_l+0xbd4>)
 8008450:	429a      	cmp	r2, r3
 8008452:	f040 8090 	bne.w	8008576 <_strtod_l+0xae6>
 8008456:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800845a:	ec49 8b10 	vmov	d0, r8, r9
 800845e:	f7ff f9b9 	bl	80077d4 <__ulp>
 8008462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008466:	ec51 0b10 	vmov	r0, r1, d0
 800846a:	f7f8 f8c5 	bl	80005f8 <__aeabi_dmul>
 800846e:	4642      	mov	r2, r8
 8008470:	464b      	mov	r3, r9
 8008472:	f7f7 ff0b 	bl	800028c <__adddf3>
 8008476:	460b      	mov	r3, r1
 8008478:	4979      	ldr	r1, [pc, #484]	; (8008660 <_strtod_l+0xbd0>)
 800847a:	4a7b      	ldr	r2, [pc, #492]	; (8008668 <_strtod_l+0xbd8>)
 800847c:	4019      	ands	r1, r3
 800847e:	4291      	cmp	r1, r2
 8008480:	4680      	mov	r8, r0
 8008482:	d944      	bls.n	800850e <_strtod_l+0xa7e>
 8008484:	ee18 2a90 	vmov	r2, s17
 8008488:	4b78      	ldr	r3, [pc, #480]	; (800866c <_strtod_l+0xbdc>)
 800848a:	429a      	cmp	r2, r3
 800848c:	d104      	bne.n	8008498 <_strtod_l+0xa08>
 800848e:	ee18 3a10 	vmov	r3, s16
 8008492:	3301      	adds	r3, #1
 8008494:	f43f ad40 	beq.w	8007f18 <_strtod_l+0x488>
 8008498:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800866c <_strtod_l+0xbdc>
 800849c:	f04f 38ff 	mov.w	r8, #4294967295
 80084a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7fe fe6a 	bl	800717c <_Bfree>
 80084a8:	9905      	ldr	r1, [sp, #20]
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7fe fe66 	bl	800717c <_Bfree>
 80084b0:	4659      	mov	r1, fp
 80084b2:	4620      	mov	r0, r4
 80084b4:	f7fe fe62 	bl	800717c <_Bfree>
 80084b8:	4629      	mov	r1, r5
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7fe fe5e 	bl	800717c <_Bfree>
 80084c0:	e609      	b.n	80080d6 <_strtod_l+0x646>
 80084c2:	f1b8 0f01 	cmp.w	r8, #1
 80084c6:	d103      	bne.n	80084d0 <_strtod_l+0xa40>
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	f43f ad95 	beq.w	8007ffa <_strtod_l+0x56a>
 80084d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008628 <_strtod_l+0xb98>
 80084d4:	4f60      	ldr	r7, [pc, #384]	; (8008658 <_strtod_l+0xbc8>)
 80084d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084da:	2600      	movs	r6, #0
 80084dc:	e7ae      	b.n	800843c <_strtod_l+0x9ac>
 80084de:	4f5f      	ldr	r7, [pc, #380]	; (800865c <_strtod_l+0xbcc>)
 80084e0:	2600      	movs	r6, #0
 80084e2:	e7a7      	b.n	8008434 <_strtod_l+0x9a4>
 80084e4:	4b5d      	ldr	r3, [pc, #372]	; (800865c <_strtod_l+0xbcc>)
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	2200      	movs	r2, #0
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f2:	4606      	mov	r6, r0
 80084f4:	460f      	mov	r7, r1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d09c      	beq.n	8008434 <_strtod_l+0x9a4>
 80084fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084fe:	e79d      	b.n	800843c <_strtod_l+0x9ac>
 8008500:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008630 <_strtod_l+0xba0>
 8008504:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008508:	ec57 6b17 	vmov	r6, r7, d7
 800850c:	e796      	b.n	800843c <_strtod_l+0x9ac>
 800850e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008512:	9b04      	ldr	r3, [sp, #16]
 8008514:	46ca      	mov	sl, r9
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1c2      	bne.n	80084a0 <_strtod_l+0xa10>
 800851a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800851e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008520:	0d1b      	lsrs	r3, r3, #20
 8008522:	051b      	lsls	r3, r3, #20
 8008524:	429a      	cmp	r2, r3
 8008526:	d1bb      	bne.n	80084a0 <_strtod_l+0xa10>
 8008528:	4630      	mov	r0, r6
 800852a:	4639      	mov	r1, r7
 800852c:	f7f8 fbc4 	bl	8000cb8 <__aeabi_d2lz>
 8008530:	f7f8 f834 	bl	800059c <__aeabi_l2d>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4630      	mov	r0, r6
 800853a:	4639      	mov	r1, r7
 800853c:	f7f7 fea4 	bl	8000288 <__aeabi_dsub>
 8008540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008542:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008546:	ea43 0308 	orr.w	r3, r3, r8
 800854a:	4313      	orrs	r3, r2
 800854c:	4606      	mov	r6, r0
 800854e:	460f      	mov	r7, r1
 8008550:	d054      	beq.n	80085fc <_strtod_l+0xb6c>
 8008552:	a339      	add	r3, pc, #228	; (adr r3, 8008638 <_strtod_l+0xba8>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f8 fac0 	bl	8000adc <__aeabi_dcmplt>
 800855c:	2800      	cmp	r0, #0
 800855e:	f47f ace5 	bne.w	8007f2c <_strtod_l+0x49c>
 8008562:	a337      	add	r3, pc, #220	; (adr r3, 8008640 <_strtod_l+0xbb0>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f8 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 8008570:	2800      	cmp	r0, #0
 8008572:	d095      	beq.n	80084a0 <_strtod_l+0xa10>
 8008574:	e4da      	b.n	8007f2c <_strtod_l+0x49c>
 8008576:	9b04      	ldr	r3, [sp, #16]
 8008578:	b333      	cbz	r3, 80085c8 <_strtod_l+0xb38>
 800857a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800857c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008580:	d822      	bhi.n	80085c8 <_strtod_l+0xb38>
 8008582:	a331      	add	r3, pc, #196	; (adr r3, 8008648 <_strtod_l+0xbb8>)
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	4630      	mov	r0, r6
 800858a:	4639      	mov	r1, r7
 800858c:	f7f8 fab0 	bl	8000af0 <__aeabi_dcmple>
 8008590:	b1a0      	cbz	r0, 80085bc <_strtod_l+0xb2c>
 8008592:	4639      	mov	r1, r7
 8008594:	4630      	mov	r0, r6
 8008596:	f7f8 fb07 	bl	8000ba8 <__aeabi_d2uiz>
 800859a:	2801      	cmp	r0, #1
 800859c:	bf38      	it	cc
 800859e:	2001      	movcc	r0, #1
 80085a0:	f7f7 ffb0 	bl	8000504 <__aeabi_ui2d>
 80085a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a6:	4606      	mov	r6, r0
 80085a8:	460f      	mov	r7, r1
 80085aa:	bb23      	cbnz	r3, 80085f6 <_strtod_l+0xb66>
 80085ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085b0:	9010      	str	r0, [sp, #64]	; 0x40
 80085b2:	9311      	str	r3, [sp, #68]	; 0x44
 80085b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80085bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085c4:	1a9b      	subs	r3, r3, r2
 80085c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085cc:	eeb0 0a48 	vmov.f32	s0, s16
 80085d0:	eef0 0a68 	vmov.f32	s1, s17
 80085d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80085d8:	f7ff f8fc 	bl	80077d4 <__ulp>
 80085dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085e0:	ec53 2b10 	vmov	r2, r3, d0
 80085e4:	f7f8 f808 	bl	80005f8 <__aeabi_dmul>
 80085e8:	ec53 2b18 	vmov	r2, r3, d8
 80085ec:	f7f7 fe4e 	bl	800028c <__adddf3>
 80085f0:	4680      	mov	r8, r0
 80085f2:	4689      	mov	r9, r1
 80085f4:	e78d      	b.n	8008512 <_strtod_l+0xa82>
 80085f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80085fa:	e7db      	b.n	80085b4 <_strtod_l+0xb24>
 80085fc:	a314      	add	r3, pc, #80	; (adr r3, 8008650 <_strtod_l+0xbc0>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f8 fa6b 	bl	8000adc <__aeabi_dcmplt>
 8008606:	e7b3      	b.n	8008570 <_strtod_l+0xae0>
 8008608:	2300      	movs	r3, #0
 800860a:	930a      	str	r3, [sp, #40]	; 0x28
 800860c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800860e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	f7ff ba7c 	b.w	8007b0e <_strtod_l+0x7e>
 8008616:	2a65      	cmp	r2, #101	; 0x65
 8008618:	f43f ab75 	beq.w	8007d06 <_strtod_l+0x276>
 800861c:	2a45      	cmp	r2, #69	; 0x45
 800861e:	f43f ab72 	beq.w	8007d06 <_strtod_l+0x276>
 8008622:	2301      	movs	r3, #1
 8008624:	f7ff bbaa 	b.w	8007d7c <_strtod_l+0x2ec>
 8008628:	00000000 	.word	0x00000000
 800862c:	bff00000 	.word	0xbff00000
 8008630:	00000000 	.word	0x00000000
 8008634:	3ff00000 	.word	0x3ff00000
 8008638:	94a03595 	.word	0x94a03595
 800863c:	3fdfffff 	.word	0x3fdfffff
 8008640:	35afe535 	.word	0x35afe535
 8008644:	3fe00000 	.word	0x3fe00000
 8008648:	ffc00000 	.word	0xffc00000
 800864c:	41dfffff 	.word	0x41dfffff
 8008650:	94a03595 	.word	0x94a03595
 8008654:	3fcfffff 	.word	0x3fcfffff
 8008658:	3ff00000 	.word	0x3ff00000
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	7ff00000 	.word	0x7ff00000
 8008664:	7fe00000 	.word	0x7fe00000
 8008668:	7c9fffff 	.word	0x7c9fffff
 800866c:	7fefffff 	.word	0x7fefffff

08008670 <_strtod_r>:
 8008670:	4b01      	ldr	r3, [pc, #4]	; (8008678 <_strtod_r+0x8>)
 8008672:	f7ff ba0d 	b.w	8007a90 <_strtod_l>
 8008676:	bf00      	nop
 8008678:	20000068 	.word	0x20000068

0800867c <_strtol_l.constprop.0>:
 800867c:	2b01      	cmp	r3, #1
 800867e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008682:	d001      	beq.n	8008688 <_strtol_l.constprop.0+0xc>
 8008684:	2b24      	cmp	r3, #36	; 0x24
 8008686:	d906      	bls.n	8008696 <_strtol_l.constprop.0+0x1a>
 8008688:	f7fd fd88 	bl	800619c <__errno>
 800868c:	2316      	movs	r3, #22
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	2000      	movs	r0, #0
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800877c <_strtol_l.constprop.0+0x100>
 800869a:	460d      	mov	r5, r1
 800869c:	462e      	mov	r6, r5
 800869e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80086a6:	f017 0708 	ands.w	r7, r7, #8
 80086aa:	d1f7      	bne.n	800869c <_strtol_l.constprop.0+0x20>
 80086ac:	2c2d      	cmp	r4, #45	; 0x2d
 80086ae:	d132      	bne.n	8008716 <_strtol_l.constprop.0+0x9a>
 80086b0:	782c      	ldrb	r4, [r5, #0]
 80086b2:	2701      	movs	r7, #1
 80086b4:	1cb5      	adds	r5, r6, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d05b      	beq.n	8008772 <_strtol_l.constprop.0+0xf6>
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d109      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086be:	2c30      	cmp	r4, #48	; 0x30
 80086c0:	d107      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 80086c2:	782c      	ldrb	r4, [r5, #0]
 80086c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80086c8:	2c58      	cmp	r4, #88	; 0x58
 80086ca:	d14d      	bne.n	8008768 <_strtol_l.constprop.0+0xec>
 80086cc:	786c      	ldrb	r4, [r5, #1]
 80086ce:	2310      	movs	r3, #16
 80086d0:	3502      	adds	r5, #2
 80086d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80086d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80086da:	f04f 0e00 	mov.w	lr, #0
 80086de:	fbb8 f9f3 	udiv	r9, r8, r3
 80086e2:	4676      	mov	r6, lr
 80086e4:	fb03 8a19 	mls	sl, r3, r9, r8
 80086e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80086ec:	f1bc 0f09 	cmp.w	ip, #9
 80086f0:	d816      	bhi.n	8008720 <_strtol_l.constprop.0+0xa4>
 80086f2:	4664      	mov	r4, ip
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	dd24      	ble.n	8008742 <_strtol_l.constprop.0+0xc6>
 80086f8:	f1be 3fff 	cmp.w	lr, #4294967295
 80086fc:	d008      	beq.n	8008710 <_strtol_l.constprop.0+0x94>
 80086fe:	45b1      	cmp	r9, r6
 8008700:	d31c      	bcc.n	800873c <_strtol_l.constprop.0+0xc0>
 8008702:	d101      	bne.n	8008708 <_strtol_l.constprop.0+0x8c>
 8008704:	45a2      	cmp	sl, r4
 8008706:	db19      	blt.n	800873c <_strtol_l.constprop.0+0xc0>
 8008708:	fb06 4603 	mla	r6, r6, r3, r4
 800870c:	f04f 0e01 	mov.w	lr, #1
 8008710:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008714:	e7e8      	b.n	80086e8 <_strtol_l.constprop.0+0x6c>
 8008716:	2c2b      	cmp	r4, #43	; 0x2b
 8008718:	bf04      	itt	eq
 800871a:	782c      	ldrbeq	r4, [r5, #0]
 800871c:	1cb5      	addeq	r5, r6, #2
 800871e:	e7ca      	b.n	80086b6 <_strtol_l.constprop.0+0x3a>
 8008720:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008724:	f1bc 0f19 	cmp.w	ip, #25
 8008728:	d801      	bhi.n	800872e <_strtol_l.constprop.0+0xb2>
 800872a:	3c37      	subs	r4, #55	; 0x37
 800872c:	e7e2      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800872e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008732:	f1bc 0f19 	cmp.w	ip, #25
 8008736:	d804      	bhi.n	8008742 <_strtol_l.constprop.0+0xc6>
 8008738:	3c57      	subs	r4, #87	; 0x57
 800873a:	e7db      	b.n	80086f4 <_strtol_l.constprop.0+0x78>
 800873c:	f04f 3eff 	mov.w	lr, #4294967295
 8008740:	e7e6      	b.n	8008710 <_strtol_l.constprop.0+0x94>
 8008742:	f1be 3fff 	cmp.w	lr, #4294967295
 8008746:	d105      	bne.n	8008754 <_strtol_l.constprop.0+0xd8>
 8008748:	2322      	movs	r3, #34	; 0x22
 800874a:	6003      	str	r3, [r0, #0]
 800874c:	4646      	mov	r6, r8
 800874e:	b942      	cbnz	r2, 8008762 <_strtol_l.constprop.0+0xe6>
 8008750:	4630      	mov	r0, r6
 8008752:	e79e      	b.n	8008692 <_strtol_l.constprop.0+0x16>
 8008754:	b107      	cbz	r7, 8008758 <_strtol_l.constprop.0+0xdc>
 8008756:	4276      	negs	r6, r6
 8008758:	2a00      	cmp	r2, #0
 800875a:	d0f9      	beq.n	8008750 <_strtol_l.constprop.0+0xd4>
 800875c:	f1be 0f00 	cmp.w	lr, #0
 8008760:	d000      	beq.n	8008764 <_strtol_l.constprop.0+0xe8>
 8008762:	1e69      	subs	r1, r5, #1
 8008764:	6011      	str	r1, [r2, #0]
 8008766:	e7f3      	b.n	8008750 <_strtol_l.constprop.0+0xd4>
 8008768:	2430      	movs	r4, #48	; 0x30
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1b1      	bne.n	80086d2 <_strtol_l.constprop.0+0x56>
 800876e:	2308      	movs	r3, #8
 8008770:	e7af      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 8008772:	2c30      	cmp	r4, #48	; 0x30
 8008774:	d0a5      	beq.n	80086c2 <_strtol_l.constprop.0+0x46>
 8008776:	230a      	movs	r3, #10
 8008778:	e7ab      	b.n	80086d2 <_strtol_l.constprop.0+0x56>
 800877a:	bf00      	nop
 800877c:	08009c81 	.word	0x08009c81

08008780 <_strtol_r>:
 8008780:	f7ff bf7c 	b.w	800867c <_strtol_l.constprop.0>

08008784 <__ssputs_r>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	688e      	ldr	r6, [r1, #8]
 800878a:	461f      	mov	r7, r3
 800878c:	42be      	cmp	r6, r7
 800878e:	680b      	ldr	r3, [r1, #0]
 8008790:	4682      	mov	sl, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4690      	mov	r8, r2
 8008796:	d82c      	bhi.n	80087f2 <__ssputs_r+0x6e>
 8008798:	898a      	ldrh	r2, [r1, #12]
 800879a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800879e:	d026      	beq.n	80087ee <__ssputs_r+0x6a>
 80087a0:	6965      	ldr	r5, [r4, #20]
 80087a2:	6909      	ldr	r1, [r1, #16]
 80087a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087a8:	eba3 0901 	sub.w	r9, r3, r1
 80087ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087b0:	1c7b      	adds	r3, r7, #1
 80087b2:	444b      	add	r3, r9
 80087b4:	106d      	asrs	r5, r5, #1
 80087b6:	429d      	cmp	r5, r3
 80087b8:	bf38      	it	cc
 80087ba:	461d      	movcc	r5, r3
 80087bc:	0553      	lsls	r3, r2, #21
 80087be:	d527      	bpl.n	8008810 <__ssputs_r+0x8c>
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7fe fc0f 	bl	8006fe4 <_malloc_r>
 80087c6:	4606      	mov	r6, r0
 80087c8:	b360      	cbz	r0, 8008824 <__ssputs_r+0xa0>
 80087ca:	6921      	ldr	r1, [r4, #16]
 80087cc:	464a      	mov	r2, r9
 80087ce:	f000 fbf5 	bl	8008fbc <memcpy>
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087dc:	81a3      	strh	r3, [r4, #12]
 80087de:	6126      	str	r6, [r4, #16]
 80087e0:	6165      	str	r5, [r4, #20]
 80087e2:	444e      	add	r6, r9
 80087e4:	eba5 0509 	sub.w	r5, r5, r9
 80087e8:	6026      	str	r6, [r4, #0]
 80087ea:	60a5      	str	r5, [r4, #8]
 80087ec:	463e      	mov	r6, r7
 80087ee:	42be      	cmp	r6, r7
 80087f0:	d900      	bls.n	80087f4 <__ssputs_r+0x70>
 80087f2:	463e      	mov	r6, r7
 80087f4:	6820      	ldr	r0, [r4, #0]
 80087f6:	4632      	mov	r2, r6
 80087f8:	4641      	mov	r1, r8
 80087fa:	f000 fba3 	bl	8008f44 <memmove>
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	1b9b      	subs	r3, r3, r6
 8008802:	60a3      	str	r3, [r4, #8]
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	4433      	add	r3, r6
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	2000      	movs	r0, #0
 800880c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008810:	462a      	mov	r2, r5
 8008812:	f000 ff86 	bl	8009722 <_realloc_r>
 8008816:	4606      	mov	r6, r0
 8008818:	2800      	cmp	r0, #0
 800881a:	d1e0      	bne.n	80087de <__ssputs_r+0x5a>
 800881c:	6921      	ldr	r1, [r4, #16]
 800881e:	4650      	mov	r0, sl
 8008820:	f7fe fb6c 	bl	8006efc <_free_r>
 8008824:	230c      	movs	r3, #12
 8008826:	f8ca 3000 	str.w	r3, [sl]
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008830:	81a3      	strh	r3, [r4, #12]
 8008832:	f04f 30ff 	mov.w	r0, #4294967295
 8008836:	e7e9      	b.n	800880c <__ssputs_r+0x88>

08008838 <_svfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4698      	mov	r8, r3
 800883e:	898b      	ldrh	r3, [r1, #12]
 8008840:	061b      	lsls	r3, r3, #24
 8008842:	b09d      	sub	sp, #116	; 0x74
 8008844:	4607      	mov	r7, r0
 8008846:	460d      	mov	r5, r1
 8008848:	4614      	mov	r4, r2
 800884a:	d50e      	bpl.n	800886a <_svfiprintf_r+0x32>
 800884c:	690b      	ldr	r3, [r1, #16]
 800884e:	b963      	cbnz	r3, 800886a <_svfiprintf_r+0x32>
 8008850:	2140      	movs	r1, #64	; 0x40
 8008852:	f7fe fbc7 	bl	8006fe4 <_malloc_r>
 8008856:	6028      	str	r0, [r5, #0]
 8008858:	6128      	str	r0, [r5, #16]
 800885a:	b920      	cbnz	r0, 8008866 <_svfiprintf_r+0x2e>
 800885c:	230c      	movs	r3, #12
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	f04f 30ff 	mov.w	r0, #4294967295
 8008864:	e0d0      	b.n	8008a08 <_svfiprintf_r+0x1d0>
 8008866:	2340      	movs	r3, #64	; 0x40
 8008868:	616b      	str	r3, [r5, #20]
 800886a:	2300      	movs	r3, #0
 800886c:	9309      	str	r3, [sp, #36]	; 0x24
 800886e:	2320      	movs	r3, #32
 8008870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008874:	f8cd 800c 	str.w	r8, [sp, #12]
 8008878:	2330      	movs	r3, #48	; 0x30
 800887a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a20 <_svfiprintf_r+0x1e8>
 800887e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008882:	f04f 0901 	mov.w	r9, #1
 8008886:	4623      	mov	r3, r4
 8008888:	469a      	mov	sl, r3
 800888a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800888e:	b10a      	cbz	r2, 8008894 <_svfiprintf_r+0x5c>
 8008890:	2a25      	cmp	r2, #37	; 0x25
 8008892:	d1f9      	bne.n	8008888 <_svfiprintf_r+0x50>
 8008894:	ebba 0b04 	subs.w	fp, sl, r4
 8008898:	d00b      	beq.n	80088b2 <_svfiprintf_r+0x7a>
 800889a:	465b      	mov	r3, fp
 800889c:	4622      	mov	r2, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ff6f 	bl	8008784 <__ssputs_r>
 80088a6:	3001      	adds	r0, #1
 80088a8:	f000 80a9 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ae:	445a      	add	r2, fp
 80088b0:	9209      	str	r2, [sp, #36]	; 0x24
 80088b2:	f89a 3000 	ldrb.w	r3, [sl]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 80a1 	beq.w	80089fe <_svfiprintf_r+0x1c6>
 80088bc:	2300      	movs	r3, #0
 80088be:	f04f 32ff 	mov.w	r2, #4294967295
 80088c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088c6:	f10a 0a01 	add.w	sl, sl, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	9307      	str	r3, [sp, #28]
 80088ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d2:	931a      	str	r3, [sp, #104]	; 0x68
 80088d4:	4654      	mov	r4, sl
 80088d6:	2205      	movs	r2, #5
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	4850      	ldr	r0, [pc, #320]	; (8008a20 <_svfiprintf_r+0x1e8>)
 80088de:	f7f7 fc77 	bl	80001d0 <memchr>
 80088e2:	9a04      	ldr	r2, [sp, #16]
 80088e4:	b9d8      	cbnz	r0, 800891e <_svfiprintf_r+0xe6>
 80088e6:	06d0      	lsls	r0, r2, #27
 80088e8:	bf44      	itt	mi
 80088ea:	2320      	movmi	r3, #32
 80088ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088f0:	0711      	lsls	r1, r2, #28
 80088f2:	bf44      	itt	mi
 80088f4:	232b      	movmi	r3, #43	; 0x2b
 80088f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088fa:	f89a 3000 	ldrb.w	r3, [sl]
 80088fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008900:	d015      	beq.n	800892e <_svfiprintf_r+0xf6>
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	4654      	mov	r4, sl
 8008906:	2000      	movs	r0, #0
 8008908:	f04f 0c0a 	mov.w	ip, #10
 800890c:	4621      	mov	r1, r4
 800890e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008912:	3b30      	subs	r3, #48	; 0x30
 8008914:	2b09      	cmp	r3, #9
 8008916:	d94d      	bls.n	80089b4 <_svfiprintf_r+0x17c>
 8008918:	b1b0      	cbz	r0, 8008948 <_svfiprintf_r+0x110>
 800891a:	9207      	str	r2, [sp, #28]
 800891c:	e014      	b.n	8008948 <_svfiprintf_r+0x110>
 800891e:	eba0 0308 	sub.w	r3, r0, r8
 8008922:	fa09 f303 	lsl.w	r3, r9, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	46a2      	mov	sl, r4
 800892c:	e7d2      	b.n	80088d4 <_svfiprintf_r+0x9c>
 800892e:	9b03      	ldr	r3, [sp, #12]
 8008930:	1d19      	adds	r1, r3, #4
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	9103      	str	r1, [sp, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfbb      	ittet	lt
 800893a:	425b      	neglt	r3, r3
 800893c:	f042 0202 	orrlt.w	r2, r2, #2
 8008940:	9307      	strge	r3, [sp, #28]
 8008942:	9307      	strlt	r3, [sp, #28]
 8008944:	bfb8      	it	lt
 8008946:	9204      	strlt	r2, [sp, #16]
 8008948:	7823      	ldrb	r3, [r4, #0]
 800894a:	2b2e      	cmp	r3, #46	; 0x2e
 800894c:	d10c      	bne.n	8008968 <_svfiprintf_r+0x130>
 800894e:	7863      	ldrb	r3, [r4, #1]
 8008950:	2b2a      	cmp	r3, #42	; 0x2a
 8008952:	d134      	bne.n	80089be <_svfiprintf_r+0x186>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	1d1a      	adds	r2, r3, #4
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	9203      	str	r2, [sp, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	bfb8      	it	lt
 8008960:	f04f 33ff 	movlt.w	r3, #4294967295
 8008964:	3402      	adds	r4, #2
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a30 <_svfiprintf_r+0x1f8>
 800896c:	7821      	ldrb	r1, [r4, #0]
 800896e:	2203      	movs	r2, #3
 8008970:	4650      	mov	r0, sl
 8008972:	f7f7 fc2d 	bl	80001d0 <memchr>
 8008976:	b138      	cbz	r0, 8008988 <_svfiprintf_r+0x150>
 8008978:	9b04      	ldr	r3, [sp, #16]
 800897a:	eba0 000a 	sub.w	r0, r0, sl
 800897e:	2240      	movs	r2, #64	; 0x40
 8008980:	4082      	lsls	r2, r0
 8008982:	4313      	orrs	r3, r2
 8008984:	3401      	adds	r4, #1
 8008986:	9304      	str	r3, [sp, #16]
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	4825      	ldr	r0, [pc, #148]	; (8008a24 <_svfiprintf_r+0x1ec>)
 800898e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008992:	2206      	movs	r2, #6
 8008994:	f7f7 fc1c 	bl	80001d0 <memchr>
 8008998:	2800      	cmp	r0, #0
 800899a:	d038      	beq.n	8008a0e <_svfiprintf_r+0x1d6>
 800899c:	4b22      	ldr	r3, [pc, #136]	; (8008a28 <_svfiprintf_r+0x1f0>)
 800899e:	bb1b      	cbnz	r3, 80089e8 <_svfiprintf_r+0x1b0>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	3307      	adds	r3, #7
 80089a4:	f023 0307 	bic.w	r3, r3, #7
 80089a8:	3308      	adds	r3, #8
 80089aa:	9303      	str	r3, [sp, #12]
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	4433      	add	r3, r6
 80089b0:	9309      	str	r3, [sp, #36]	; 0x24
 80089b2:	e768      	b.n	8008886 <_svfiprintf_r+0x4e>
 80089b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089b8:	460c      	mov	r4, r1
 80089ba:	2001      	movs	r0, #1
 80089bc:	e7a6      	b.n	800890c <_svfiprintf_r+0xd4>
 80089be:	2300      	movs	r3, #0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d0:	3a30      	subs	r2, #48	; 0x30
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d903      	bls.n	80089de <_svfiprintf_r+0x1a6>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c6      	beq.n	8008968 <_svfiprintf_r+0x130>
 80089da:	9105      	str	r1, [sp, #20]
 80089dc:	e7c4      	b.n	8008968 <_svfiprintf_r+0x130>
 80089de:	fb0c 2101 	mla	r1, ip, r1, r2
 80089e2:	4604      	mov	r4, r0
 80089e4:	2301      	movs	r3, #1
 80089e6:	e7f0      	b.n	80089ca <_svfiprintf_r+0x192>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <_svfiprintf_r+0x1f4>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7fc fc72 	bl	80052dc <_printf_float>
 80089f8:	1c42      	adds	r2, r0, #1
 80089fa:	4606      	mov	r6, r0
 80089fc:	d1d6      	bne.n	80089ac <_svfiprintf_r+0x174>
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	065b      	lsls	r3, r3, #25
 8008a02:	f53f af2d 	bmi.w	8008860 <_svfiprintf_r+0x28>
 8008a06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a08:	b01d      	add	sp, #116	; 0x74
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	ab03      	add	r3, sp, #12
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	462a      	mov	r2, r5
 8008a14:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <_svfiprintf_r+0x1f4>)
 8008a16:	a904      	add	r1, sp, #16
 8008a18:	4638      	mov	r0, r7
 8008a1a:	f7fc ff03 	bl	8005824 <_printf_i>
 8008a1e:	e7eb      	b.n	80089f8 <_svfiprintf_r+0x1c0>
 8008a20:	08009d81 	.word	0x08009d81
 8008a24:	08009d8b 	.word	0x08009d8b
 8008a28:	080052dd 	.word	0x080052dd
 8008a2c:	08008785 	.word	0x08008785
 8008a30:	08009d87 	.word	0x08009d87

08008a34 <__sfputc_r>:
 8008a34:	6893      	ldr	r3, [r2, #8]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	b410      	push	{r4}
 8008a3c:	6093      	str	r3, [r2, #8]
 8008a3e:	da08      	bge.n	8008a52 <__sfputc_r+0x1e>
 8008a40:	6994      	ldr	r4, [r2, #24]
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	db01      	blt.n	8008a4a <__sfputc_r+0x16>
 8008a46:	290a      	cmp	r1, #10
 8008a48:	d103      	bne.n	8008a52 <__sfputc_r+0x1e>
 8008a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4e:	f000 b9e3 	b.w	8008e18 <__swbuf_r>
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	1c58      	adds	r0, r3, #1
 8008a56:	6010      	str	r0, [r2, #0]
 8008a58:	7019      	strb	r1, [r3, #0]
 8008a5a:	4608      	mov	r0, r1
 8008a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <__sfputs_r>:
 8008a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	4614      	mov	r4, r2
 8008a6a:	18d5      	adds	r5, r2, r3
 8008a6c:	42ac      	cmp	r4, r5
 8008a6e:	d101      	bne.n	8008a74 <__sfputs_r+0x12>
 8008a70:	2000      	movs	r0, #0
 8008a72:	e007      	b.n	8008a84 <__sfputs_r+0x22>
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	463a      	mov	r2, r7
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffda 	bl	8008a34 <__sfputc_r>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d1f3      	bne.n	8008a6c <__sfputs_r+0xa>
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a88 <_vfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b09d      	sub	sp, #116	; 0x74
 8008a90:	4614      	mov	r4, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	4606      	mov	r6, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_vfiprintf_r+0x18>
 8008a98:	6a03      	ldr	r3, [r0, #32]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x18>
 8008a9c:	f7fd fa80 	bl	8005fa0 <__sinit>
 8008aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	059a      	lsls	r2, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aae:	f7fd fba0 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	071b      	lsls	r3, r3, #28
 8008ab6:	d501      	bpl.n	8008abc <_vfiprintf_r+0x34>
 8008ab8:	692b      	ldr	r3, [r5, #16]
 8008aba:	b99b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x5c>
 8008abc:	4629      	mov	r1, r5
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 f9e8 	bl	8008e94 <__swsetup_r>
 8008ac4:	b170      	cbz	r0, 8008ae4 <_vfiprintf_r+0x5c>
 8008ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac8:	07dc      	lsls	r4, r3, #31
 8008aca:	d504      	bpl.n	8008ad6 <_vfiprintf_r+0x4e>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	b01d      	add	sp, #116	; 0x74
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	0598      	lsls	r0, r3, #22
 8008ada:	d4f7      	bmi.n	8008acc <_vfiprintf_r+0x44>
 8008adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ade:	f7fd fb89 	bl	80061f4 <__retarget_lock_release_recursive>
 8008ae2:	e7f3      	b.n	8008acc <_vfiprintf_r+0x44>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af2:	2330      	movs	r3, #48	; 0x30
 8008af4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ca8 <_vfiprintf_r+0x220>
 8008af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008afc:	f04f 0901 	mov.w	r9, #1
 8008b00:	4623      	mov	r3, r4
 8008b02:	469a      	mov	sl, r3
 8008b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b08:	b10a      	cbz	r2, 8008b0e <_vfiprintf_r+0x86>
 8008b0a:	2a25      	cmp	r2, #37	; 0x25
 8008b0c:	d1f9      	bne.n	8008b02 <_vfiprintf_r+0x7a>
 8008b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b12:	d00b      	beq.n	8008b2c <_vfiprintf_r+0xa4>
 8008b14:	465b      	mov	r3, fp
 8008b16:	4622      	mov	r2, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7ff ffa1 	bl	8008a62 <__sfputs_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	f000 80a9 	beq.w	8008c78 <_vfiprintf_r+0x1f0>
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	445a      	add	r2, fp
 8008b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80a1 	beq.w	8008c78 <_vfiprintf_r+0x1f0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b40:	f10a 0a01 	add.w	sl, sl, #1
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b4e:	4654      	mov	r4, sl
 8008b50:	2205      	movs	r2, #5
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4854      	ldr	r0, [pc, #336]	; (8008ca8 <_vfiprintf_r+0x220>)
 8008b58:	f7f7 fb3a 	bl	80001d0 <memchr>
 8008b5c:	9a04      	ldr	r2, [sp, #16]
 8008b5e:	b9d8      	cbnz	r0, 8008b98 <_vfiprintf_r+0x110>
 8008b60:	06d1      	lsls	r1, r2, #27
 8008b62:	bf44      	itt	mi
 8008b64:	2320      	movmi	r3, #32
 8008b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b6a:	0713      	lsls	r3, r2, #28
 8008b6c:	bf44      	itt	mi
 8008b6e:	232b      	movmi	r3, #43	; 0x2b
 8008b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b74:	f89a 3000 	ldrb.w	r3, [sl]
 8008b78:	2b2a      	cmp	r3, #42	; 0x2a
 8008b7a:	d015      	beq.n	8008ba8 <_vfiprintf_r+0x120>
 8008b7c:	9a07      	ldr	r2, [sp, #28]
 8008b7e:	4654      	mov	r4, sl
 8008b80:	2000      	movs	r0, #0
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4621      	mov	r1, r4
 8008b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8c:	3b30      	subs	r3, #48	; 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d94d      	bls.n	8008c2e <_vfiprintf_r+0x1a6>
 8008b92:	b1b0      	cbz	r0, 8008bc2 <_vfiprintf_r+0x13a>
 8008b94:	9207      	str	r2, [sp, #28]
 8008b96:	e014      	b.n	8008bc2 <_vfiprintf_r+0x13a>
 8008b98:	eba0 0308 	sub.w	r3, r0, r8
 8008b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	46a2      	mov	sl, r4
 8008ba6:	e7d2      	b.n	8008b4e <_vfiprintf_r+0xc6>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	9103      	str	r1, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfbb      	ittet	lt
 8008bb4:	425b      	neglt	r3, r3
 8008bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bba:	9307      	strge	r3, [sp, #28]
 8008bbc:	9307      	strlt	r3, [sp, #28]
 8008bbe:	bfb8      	it	lt
 8008bc0:	9204      	strlt	r2, [sp, #16]
 8008bc2:	7823      	ldrb	r3, [r4, #0]
 8008bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc6:	d10c      	bne.n	8008be2 <_vfiprintf_r+0x15a>
 8008bc8:	7863      	ldrb	r3, [r4, #1]
 8008bca:	2b2a      	cmp	r3, #42	; 0x2a
 8008bcc:	d134      	bne.n	8008c38 <_vfiprintf_r+0x1b0>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bde:	3402      	adds	r4, #2
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cb8 <_vfiprintf_r+0x230>
 8008be6:	7821      	ldrb	r1, [r4, #0]
 8008be8:	2203      	movs	r2, #3
 8008bea:	4650      	mov	r0, sl
 8008bec:	f7f7 faf0 	bl	80001d0 <memchr>
 8008bf0:	b138      	cbz	r0, 8008c02 <_vfiprintf_r+0x17a>
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	eba0 000a 	sub.w	r0, r0, sl
 8008bf8:	2240      	movs	r2, #64	; 0x40
 8008bfa:	4082      	lsls	r2, r0
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	3401      	adds	r4, #1
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c06:	4829      	ldr	r0, [pc, #164]	; (8008cac <_vfiprintf_r+0x224>)
 8008c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0c:	2206      	movs	r2, #6
 8008c0e:	f7f7 fadf 	bl	80001d0 <memchr>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d03f      	beq.n	8008c96 <_vfiprintf_r+0x20e>
 8008c16:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <_vfiprintf_r+0x228>)
 8008c18:	bb1b      	cbnz	r3, 8008c62 <_vfiprintf_r+0x1da>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	f023 0307 	bic.w	r3, r3, #7
 8008c22:	3308      	adds	r3, #8
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c28:	443b      	add	r3, r7
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	e768      	b.n	8008b00 <_vfiprintf_r+0x78>
 8008c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c32:	460c      	mov	r4, r1
 8008c34:	2001      	movs	r0, #1
 8008c36:	e7a6      	b.n	8008b86 <_vfiprintf_r+0xfe>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	3401      	adds	r4, #1
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	f04f 0c0a 	mov.w	ip, #10
 8008c44:	4620      	mov	r0, r4
 8008c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c4a:	3a30      	subs	r2, #48	; 0x30
 8008c4c:	2a09      	cmp	r2, #9
 8008c4e:	d903      	bls.n	8008c58 <_vfiprintf_r+0x1d0>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0c6      	beq.n	8008be2 <_vfiprintf_r+0x15a>
 8008c54:	9105      	str	r1, [sp, #20]
 8008c56:	e7c4      	b.n	8008be2 <_vfiprintf_r+0x15a>
 8008c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e7f0      	b.n	8008c44 <_vfiprintf_r+0x1bc>
 8008c62:	ab03      	add	r3, sp, #12
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	462a      	mov	r2, r5
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <_vfiprintf_r+0x22c>)
 8008c6a:	a904      	add	r1, sp, #16
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7fc fb35 	bl	80052dc <_printf_float>
 8008c72:	4607      	mov	r7, r0
 8008c74:	1c78      	adds	r0, r7, #1
 8008c76:	d1d6      	bne.n	8008c26 <_vfiprintf_r+0x19e>
 8008c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_vfiprintf_r+0x202>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_vfiprintf_r+0x202>
 8008c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c86:	f7fd fab5 	bl	80061f4 <__retarget_lock_release_recursive>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	065b      	lsls	r3, r3, #25
 8008c8e:	f53f af1d 	bmi.w	8008acc <_vfiprintf_r+0x44>
 8008c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c94:	e71c      	b.n	8008ad0 <_vfiprintf_r+0x48>
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_vfiprintf_r+0x22c>)
 8008c9e:	a904      	add	r1, sp, #16
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7fc fdbf 	bl	8005824 <_printf_i>
 8008ca6:	e7e4      	b.n	8008c72 <_vfiprintf_r+0x1ea>
 8008ca8:	08009d81 	.word	0x08009d81
 8008cac:	08009d8b 	.word	0x08009d8b
 8008cb0:	080052dd 	.word	0x080052dd
 8008cb4:	08008a63 	.word	0x08008a63
 8008cb8:	08009d87 	.word	0x08009d87

08008cbc <__sflush_r>:
 8008cbc:	898a      	ldrh	r2, [r1, #12]
 8008cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	0710      	lsls	r0, r2, #28
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	d458      	bmi.n	8008d7c <__sflush_r+0xc0>
 8008cca:	684b      	ldr	r3, [r1, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dc05      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dc02      	bgt.n	8008cdc <__sflush_r+0x20>
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008cde:	2e00      	cmp	r6, #0
 8008ce0:	d0f9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ce8:	682f      	ldr	r7, [r5, #0]
 8008cea:	6a21      	ldr	r1, [r4, #32]
 8008cec:	602b      	str	r3, [r5, #0]
 8008cee:	d032      	beq.n	8008d56 <__sflush_r+0x9a>
 8008cf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	075a      	lsls	r2, r3, #29
 8008cf6:	d505      	bpl.n	8008d04 <__sflush_r+0x48>
 8008cf8:	6863      	ldr	r3, [r4, #4]
 8008cfa:	1ac0      	subs	r0, r0, r3
 8008cfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cfe:	b10b      	cbz	r3, 8008d04 <__sflush_r+0x48>
 8008d00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d02:	1ac0      	subs	r0, r0, r3
 8008d04:	2300      	movs	r3, #0
 8008d06:	4602      	mov	r2, r0
 8008d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d0a:	6a21      	ldr	r1, [r4, #32]
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	47b0      	blx	r6
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	d106      	bne.n	8008d24 <__sflush_r+0x68>
 8008d16:	6829      	ldr	r1, [r5, #0]
 8008d18:	291d      	cmp	r1, #29
 8008d1a:	d82b      	bhi.n	8008d74 <__sflush_r+0xb8>
 8008d1c:	4a29      	ldr	r2, [pc, #164]	; (8008dc4 <__sflush_r+0x108>)
 8008d1e:	410a      	asrs	r2, r1
 8008d20:	07d6      	lsls	r6, r2, #31
 8008d22:	d427      	bmi.n	8008d74 <__sflush_r+0xb8>
 8008d24:	2200      	movs	r2, #0
 8008d26:	6062      	str	r2, [r4, #4]
 8008d28:	04d9      	lsls	r1, r3, #19
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	6022      	str	r2, [r4, #0]
 8008d2e:	d504      	bpl.n	8008d3a <__sflush_r+0x7e>
 8008d30:	1c42      	adds	r2, r0, #1
 8008d32:	d101      	bne.n	8008d38 <__sflush_r+0x7c>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b903      	cbnz	r3, 8008d3a <__sflush_r+0x7e>
 8008d38:	6560      	str	r0, [r4, #84]	; 0x54
 8008d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3c:	602f      	str	r7, [r5, #0]
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d0c9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d46:	4299      	cmp	r1, r3
 8008d48:	d002      	beq.n	8008d50 <__sflush_r+0x94>
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f7fe f8d6 	bl	8006efc <_free_r>
 8008d50:	2000      	movs	r0, #0
 8008d52:	6360      	str	r0, [r4, #52]	; 0x34
 8008d54:	e7c0      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d56:	2301      	movs	r3, #1
 8008d58:	4628      	mov	r0, r5
 8008d5a:	47b0      	blx	r6
 8008d5c:	1c41      	adds	r1, r0, #1
 8008d5e:	d1c8      	bne.n	8008cf2 <__sflush_r+0x36>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0c5      	beq.n	8008cf2 <__sflush_r+0x36>
 8008d66:	2b1d      	cmp	r3, #29
 8008d68:	d001      	beq.n	8008d6e <__sflush_r+0xb2>
 8008d6a:	2b16      	cmp	r3, #22
 8008d6c:	d101      	bne.n	8008d72 <__sflush_r+0xb6>
 8008d6e:	602f      	str	r7, [r5, #0]
 8008d70:	e7b1      	b.n	8008cd6 <__sflush_r+0x1a>
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	e7ad      	b.n	8008cd8 <__sflush_r+0x1c>
 8008d7c:	690f      	ldr	r7, [r1, #16]
 8008d7e:	2f00      	cmp	r7, #0
 8008d80:	d0a9      	beq.n	8008cd6 <__sflush_r+0x1a>
 8008d82:	0793      	lsls	r3, r2, #30
 8008d84:	680e      	ldr	r6, [r1, #0]
 8008d86:	bf08      	it	eq
 8008d88:	694b      	ldreq	r3, [r1, #20]
 8008d8a:	600f      	str	r7, [r1, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	2300      	movne	r3, #0
 8008d90:	eba6 0807 	sub.w	r8, r6, r7
 8008d94:	608b      	str	r3, [r1, #8]
 8008d96:	f1b8 0f00 	cmp.w	r8, #0
 8008d9a:	dd9c      	ble.n	8008cd6 <__sflush_r+0x1a>
 8008d9c:	6a21      	ldr	r1, [r4, #32]
 8008d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008da0:	4643      	mov	r3, r8
 8008da2:	463a      	mov	r2, r7
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	2800      	cmp	r0, #0
 8008daa:	dc06      	bgt.n	8008dba <__sflush_r+0xfe>
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	f04f 30ff 	mov.w	r0, #4294967295
 8008db8:	e78e      	b.n	8008cd8 <__sflush_r+0x1c>
 8008dba:	4407      	add	r7, r0
 8008dbc:	eba8 0800 	sub.w	r8, r8, r0
 8008dc0:	e7e9      	b.n	8008d96 <__sflush_r+0xda>
 8008dc2:	bf00      	nop
 8008dc4:	dfbffffe 	.word	0xdfbffffe

08008dc8 <_fflush_r>:
 8008dc8:	b538      	push	{r3, r4, r5, lr}
 8008dca:	690b      	ldr	r3, [r1, #16]
 8008dcc:	4605      	mov	r5, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	b913      	cbnz	r3, 8008dd8 <_fflush_r+0x10>
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	b118      	cbz	r0, 8008de2 <_fflush_r+0x1a>
 8008dda:	6a03      	ldr	r3, [r0, #32]
 8008ddc:	b90b      	cbnz	r3, 8008de2 <_fflush_r+0x1a>
 8008dde:	f7fd f8df 	bl	8005fa0 <__sinit>
 8008de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d0f3      	beq.n	8008dd2 <_fflush_r+0xa>
 8008dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008dec:	07d0      	lsls	r0, r2, #31
 8008dee:	d404      	bmi.n	8008dfa <_fflush_r+0x32>
 8008df0:	0599      	lsls	r1, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_fflush_r+0x32>
 8008df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008df6:	f7fd f9fc 	bl	80061f2 <__retarget_lock_acquire_recursive>
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f7ff ff5d 	bl	8008cbc <__sflush_r>
 8008e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e04:	07da      	lsls	r2, r3, #31
 8008e06:	4605      	mov	r5, r0
 8008e08:	d4e4      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	059b      	lsls	r3, r3, #22
 8008e0e:	d4e1      	bmi.n	8008dd4 <_fflush_r+0xc>
 8008e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e12:	f7fd f9ef 	bl	80061f4 <__retarget_lock_release_recursive>
 8008e16:	e7dd      	b.n	8008dd4 <_fflush_r+0xc>

08008e18 <__swbuf_r>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	460e      	mov	r6, r1
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	4605      	mov	r5, r0
 8008e20:	b118      	cbz	r0, 8008e2a <__swbuf_r+0x12>
 8008e22:	6a03      	ldr	r3, [r0, #32]
 8008e24:	b90b      	cbnz	r3, 8008e2a <__swbuf_r+0x12>
 8008e26:	f7fd f8bb 	bl	8005fa0 <__sinit>
 8008e2a:	69a3      	ldr	r3, [r4, #24]
 8008e2c:	60a3      	str	r3, [r4, #8]
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	071a      	lsls	r2, r3, #28
 8008e32:	d525      	bpl.n	8008e80 <__swbuf_r+0x68>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	b31b      	cbz	r3, 8008e80 <__swbuf_r+0x68>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	6922      	ldr	r2, [r4, #16]
 8008e3c:	1a98      	subs	r0, r3, r2
 8008e3e:	6963      	ldr	r3, [r4, #20]
 8008e40:	b2f6      	uxtb	r6, r6
 8008e42:	4283      	cmp	r3, r0
 8008e44:	4637      	mov	r7, r6
 8008e46:	dc04      	bgt.n	8008e52 <__swbuf_r+0x3a>
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f7ff ffbc 	bl	8008dc8 <_fflush_r>
 8008e50:	b9e0      	cbnz	r0, 8008e8c <__swbuf_r+0x74>
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	60a3      	str	r3, [r4, #8]
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	6022      	str	r2, [r4, #0]
 8008e5e:	701e      	strb	r6, [r3, #0]
 8008e60:	6962      	ldr	r2, [r4, #20]
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d004      	beq.n	8008e72 <__swbuf_r+0x5a>
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	07db      	lsls	r3, r3, #31
 8008e6c:	d506      	bpl.n	8008e7c <__swbuf_r+0x64>
 8008e6e:	2e0a      	cmp	r6, #10
 8008e70:	d104      	bne.n	8008e7c <__swbuf_r+0x64>
 8008e72:	4621      	mov	r1, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	f7ff ffa7 	bl	8008dc8 <_fflush_r>
 8008e7a:	b938      	cbnz	r0, 8008e8c <__swbuf_r+0x74>
 8008e7c:	4638      	mov	r0, r7
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e80:	4621      	mov	r1, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f806 	bl	8008e94 <__swsetup_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d0d5      	beq.n	8008e38 <__swbuf_r+0x20>
 8008e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e90:	e7f4      	b.n	8008e7c <__swbuf_r+0x64>
	...

08008e94 <__swsetup_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <__swsetup_r+0xac>)
 8008e98:	4605      	mov	r5, r0
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	b118      	cbz	r0, 8008ea8 <__swsetup_r+0x14>
 8008ea0:	6a03      	ldr	r3, [r0, #32]
 8008ea2:	b90b      	cbnz	r3, 8008ea8 <__swsetup_r+0x14>
 8008ea4:	f7fd f87c 	bl	8005fa0 <__sinit>
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eae:	0718      	lsls	r0, r3, #28
 8008eb0:	d422      	bmi.n	8008ef8 <__swsetup_r+0x64>
 8008eb2:	06d9      	lsls	r1, r3, #27
 8008eb4:	d407      	bmi.n	8008ec6 <__swsetup_r+0x32>
 8008eb6:	2309      	movs	r3, #9
 8008eb8:	602b      	str	r3, [r5, #0]
 8008eba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	e034      	b.n	8008f30 <__swsetup_r+0x9c>
 8008ec6:	0758      	lsls	r0, r3, #29
 8008ec8:	d512      	bpl.n	8008ef0 <__swsetup_r+0x5c>
 8008eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ecc:	b141      	cbz	r1, 8008ee0 <__swsetup_r+0x4c>
 8008ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	d002      	beq.n	8008edc <__swsetup_r+0x48>
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7fe f810 	bl	8006efc <_free_r>
 8008edc:	2300      	movs	r3, #0
 8008ede:	6363      	str	r3, [r4, #52]	; 0x34
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	2300      	movs	r3, #0
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	6023      	str	r3, [r4, #0]
 8008ef0:	89a3      	ldrh	r3, [r4, #12]
 8008ef2:	f043 0308 	orr.w	r3, r3, #8
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	b94b      	cbnz	r3, 8008f10 <__swsetup_r+0x7c>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f06:	d003      	beq.n	8008f10 <__swsetup_r+0x7c>
 8008f08:	4621      	mov	r1, r4
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 fc7e 	bl	800980c <__smakebuf_r>
 8008f10:	89a0      	ldrh	r0, [r4, #12]
 8008f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f16:	f010 0301 	ands.w	r3, r0, #1
 8008f1a:	d00a      	beq.n	8008f32 <__swsetup_r+0x9e>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60a3      	str	r3, [r4, #8]
 8008f20:	6963      	ldr	r3, [r4, #20]
 8008f22:	425b      	negs	r3, r3
 8008f24:	61a3      	str	r3, [r4, #24]
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	b943      	cbnz	r3, 8008f3c <__swsetup_r+0xa8>
 8008f2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f2e:	d1c4      	bne.n	8008eba <__swsetup_r+0x26>
 8008f30:	bd38      	pop	{r3, r4, r5, pc}
 8008f32:	0781      	lsls	r1, r0, #30
 8008f34:	bf58      	it	pl
 8008f36:	6963      	ldrpl	r3, [r4, #20]
 8008f38:	60a3      	str	r3, [r4, #8]
 8008f3a:	e7f4      	b.n	8008f26 <__swsetup_r+0x92>
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e7f7      	b.n	8008f30 <__swsetup_r+0x9c>
 8008f40:	20000064 	.word	0x20000064

08008f44 <memmove>:
 8008f44:	4288      	cmp	r0, r1
 8008f46:	b510      	push	{r4, lr}
 8008f48:	eb01 0402 	add.w	r4, r1, r2
 8008f4c:	d902      	bls.n	8008f54 <memmove+0x10>
 8008f4e:	4284      	cmp	r4, r0
 8008f50:	4623      	mov	r3, r4
 8008f52:	d807      	bhi.n	8008f64 <memmove+0x20>
 8008f54:	1e43      	subs	r3, r0, #1
 8008f56:	42a1      	cmp	r1, r4
 8008f58:	d008      	beq.n	8008f6c <memmove+0x28>
 8008f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f62:	e7f8      	b.n	8008f56 <memmove+0x12>
 8008f64:	4402      	add	r2, r0
 8008f66:	4601      	mov	r1, r0
 8008f68:	428a      	cmp	r2, r1
 8008f6a:	d100      	bne.n	8008f6e <memmove+0x2a>
 8008f6c:	bd10      	pop	{r4, pc}
 8008f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f76:	e7f7      	b.n	8008f68 <memmove+0x24>

08008f78 <strncmp>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	b16a      	cbz	r2, 8008f98 <strncmp+0x20>
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	1884      	adds	r4, r0, r2
 8008f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d103      	bne.n	8008f94 <strncmp+0x1c>
 8008f8c:	42a0      	cmp	r0, r4
 8008f8e:	d001      	beq.n	8008f94 <strncmp+0x1c>
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	d1f5      	bne.n	8008f80 <strncmp+0x8>
 8008f94:	1ad0      	subs	r0, r2, r3
 8008f96:	bd10      	pop	{r4, pc}
 8008f98:	4610      	mov	r0, r2
 8008f9a:	e7fc      	b.n	8008f96 <strncmp+0x1e>

08008f9c <_sbrk_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d06      	ldr	r5, [pc, #24]	; (8008fb8 <_sbrk_r+0x1c>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7f8 fbb4 	bl	8001714 <_sbrk>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_sbrk_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_sbrk_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000424 	.word	0x20000424

08008fbc <memcpy>:
 8008fbc:	440a      	add	r2, r1
 8008fbe:	4291      	cmp	r1, r2
 8008fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fc4:	d100      	bne.n	8008fc8 <memcpy+0xc>
 8008fc6:	4770      	bx	lr
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd2:	4291      	cmp	r1, r2
 8008fd4:	d1f9      	bne.n	8008fca <memcpy+0xe>
 8008fd6:	bd10      	pop	{r4, pc}

08008fd8 <nan>:
 8008fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008fe0 <nan+0x8>
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	7ff80000 	.word	0x7ff80000

08008fe8 <__assert_func>:
 8008fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fea:	4614      	mov	r4, r2
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <__assert_func+0x2c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	68d8      	ldr	r0, [r3, #12]
 8008ff6:	b14c      	cbz	r4, 800900c <__assert_func+0x24>
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <__assert_func+0x30>)
 8008ffa:	9100      	str	r1, [sp, #0]
 8008ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009000:	4906      	ldr	r1, [pc, #24]	; (800901c <__assert_func+0x34>)
 8009002:	462b      	mov	r3, r5
 8009004:	f000 fbca 	bl	800979c <fiprintf>
 8009008:	f000 fc5e 	bl	80098c8 <abort>
 800900c:	4b04      	ldr	r3, [pc, #16]	; (8009020 <__assert_func+0x38>)
 800900e:	461c      	mov	r4, r3
 8009010:	e7f3      	b.n	8008ffa <__assert_func+0x12>
 8009012:	bf00      	nop
 8009014:	20000064 	.word	0x20000064
 8009018:	08009d9a 	.word	0x08009d9a
 800901c:	08009da7 	.word	0x08009da7
 8009020:	08009dd5 	.word	0x08009dd5

08009024 <_calloc_r>:
 8009024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009026:	fba1 2402 	umull	r2, r4, r1, r2
 800902a:	b94c      	cbnz	r4, 8009040 <_calloc_r+0x1c>
 800902c:	4611      	mov	r1, r2
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	f7fd ffd8 	bl	8006fe4 <_malloc_r>
 8009034:	9a01      	ldr	r2, [sp, #4]
 8009036:	4605      	mov	r5, r0
 8009038:	b930      	cbnz	r0, 8009048 <_calloc_r+0x24>
 800903a:	4628      	mov	r0, r5
 800903c:	b003      	add	sp, #12
 800903e:	bd30      	pop	{r4, r5, pc}
 8009040:	220c      	movs	r2, #12
 8009042:	6002      	str	r2, [r0, #0]
 8009044:	2500      	movs	r5, #0
 8009046:	e7f8      	b.n	800903a <_calloc_r+0x16>
 8009048:	4621      	mov	r1, r4
 800904a:	f7fd f854 	bl	80060f6 <memset>
 800904e:	e7f4      	b.n	800903a <_calloc_r+0x16>

08009050 <rshift>:
 8009050:	6903      	ldr	r3, [r0, #16]
 8009052:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009056:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800905a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800905e:	f100 0414 	add.w	r4, r0, #20
 8009062:	dd45      	ble.n	80090f0 <rshift+0xa0>
 8009064:	f011 011f 	ands.w	r1, r1, #31
 8009068:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800906c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009070:	d10c      	bne.n	800908c <rshift+0x3c>
 8009072:	f100 0710 	add.w	r7, r0, #16
 8009076:	4629      	mov	r1, r5
 8009078:	42b1      	cmp	r1, r6
 800907a:	d334      	bcc.n	80090e6 <rshift+0x96>
 800907c:	1a9b      	subs	r3, r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	1eea      	subs	r2, r5, #3
 8009082:	4296      	cmp	r6, r2
 8009084:	bf38      	it	cc
 8009086:	2300      	movcc	r3, #0
 8009088:	4423      	add	r3, r4
 800908a:	e015      	b.n	80090b8 <rshift+0x68>
 800908c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009090:	f1c1 0820 	rsb	r8, r1, #32
 8009094:	40cf      	lsrs	r7, r1
 8009096:	f105 0e04 	add.w	lr, r5, #4
 800909a:	46a1      	mov	r9, r4
 800909c:	4576      	cmp	r6, lr
 800909e:	46f4      	mov	ip, lr
 80090a0:	d815      	bhi.n	80090ce <rshift+0x7e>
 80090a2:	1a9a      	subs	r2, r3, r2
 80090a4:	0092      	lsls	r2, r2, #2
 80090a6:	3a04      	subs	r2, #4
 80090a8:	3501      	adds	r5, #1
 80090aa:	42ae      	cmp	r6, r5
 80090ac:	bf38      	it	cc
 80090ae:	2200      	movcc	r2, #0
 80090b0:	18a3      	adds	r3, r4, r2
 80090b2:	50a7      	str	r7, [r4, r2]
 80090b4:	b107      	cbz	r7, 80090b8 <rshift+0x68>
 80090b6:	3304      	adds	r3, #4
 80090b8:	1b1a      	subs	r2, r3, r4
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090c0:	bf08      	it	eq
 80090c2:	2300      	moveq	r3, #0
 80090c4:	6102      	str	r2, [r0, #16]
 80090c6:	bf08      	it	eq
 80090c8:	6143      	streq	r3, [r0, #20]
 80090ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ce:	f8dc c000 	ldr.w	ip, [ip]
 80090d2:	fa0c fc08 	lsl.w	ip, ip, r8
 80090d6:	ea4c 0707 	orr.w	r7, ip, r7
 80090da:	f849 7b04 	str.w	r7, [r9], #4
 80090de:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090e2:	40cf      	lsrs	r7, r1
 80090e4:	e7da      	b.n	800909c <rshift+0x4c>
 80090e6:	f851 cb04 	ldr.w	ip, [r1], #4
 80090ea:	f847 cf04 	str.w	ip, [r7, #4]!
 80090ee:	e7c3      	b.n	8009078 <rshift+0x28>
 80090f0:	4623      	mov	r3, r4
 80090f2:	e7e1      	b.n	80090b8 <rshift+0x68>

080090f4 <__hexdig_fun>:
 80090f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090f8:	2b09      	cmp	r3, #9
 80090fa:	d802      	bhi.n	8009102 <__hexdig_fun+0xe>
 80090fc:	3820      	subs	r0, #32
 80090fe:	b2c0      	uxtb	r0, r0
 8009100:	4770      	bx	lr
 8009102:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009106:	2b05      	cmp	r3, #5
 8009108:	d801      	bhi.n	800910e <__hexdig_fun+0x1a>
 800910a:	3847      	subs	r0, #71	; 0x47
 800910c:	e7f7      	b.n	80090fe <__hexdig_fun+0xa>
 800910e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009112:	2b05      	cmp	r3, #5
 8009114:	d801      	bhi.n	800911a <__hexdig_fun+0x26>
 8009116:	3827      	subs	r0, #39	; 0x27
 8009118:	e7f1      	b.n	80090fe <__hexdig_fun+0xa>
 800911a:	2000      	movs	r0, #0
 800911c:	4770      	bx	lr
	...

08009120 <__gethex>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	4617      	mov	r7, r2
 8009126:	680a      	ldr	r2, [r1, #0]
 8009128:	b085      	sub	sp, #20
 800912a:	f102 0b02 	add.w	fp, r2, #2
 800912e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009132:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009136:	4681      	mov	r9, r0
 8009138:	468a      	mov	sl, r1
 800913a:	9302      	str	r3, [sp, #8]
 800913c:	32fe      	adds	r2, #254	; 0xfe
 800913e:	eb02 030b 	add.w	r3, r2, fp
 8009142:	46d8      	mov	r8, fp
 8009144:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	2830      	cmp	r0, #48	; 0x30
 800914c:	d0f7      	beq.n	800913e <__gethex+0x1e>
 800914e:	f7ff ffd1 	bl	80090f4 <__hexdig_fun>
 8009152:	4604      	mov	r4, r0
 8009154:	2800      	cmp	r0, #0
 8009156:	d138      	bne.n	80091ca <__gethex+0xaa>
 8009158:	49a7      	ldr	r1, [pc, #668]	; (80093f8 <__gethex+0x2d8>)
 800915a:	2201      	movs	r2, #1
 800915c:	4640      	mov	r0, r8
 800915e:	f7ff ff0b 	bl	8008f78 <strncmp>
 8009162:	4606      	mov	r6, r0
 8009164:	2800      	cmp	r0, #0
 8009166:	d169      	bne.n	800923c <__gethex+0x11c>
 8009168:	f898 0001 	ldrb.w	r0, [r8, #1]
 800916c:	465d      	mov	r5, fp
 800916e:	f7ff ffc1 	bl	80090f4 <__hexdig_fun>
 8009172:	2800      	cmp	r0, #0
 8009174:	d064      	beq.n	8009240 <__gethex+0x120>
 8009176:	465a      	mov	r2, fp
 8009178:	7810      	ldrb	r0, [r2, #0]
 800917a:	2830      	cmp	r0, #48	; 0x30
 800917c:	4690      	mov	r8, r2
 800917e:	f102 0201 	add.w	r2, r2, #1
 8009182:	d0f9      	beq.n	8009178 <__gethex+0x58>
 8009184:	f7ff ffb6 	bl	80090f4 <__hexdig_fun>
 8009188:	2301      	movs	r3, #1
 800918a:	fab0 f480 	clz	r4, r0
 800918e:	0964      	lsrs	r4, r4, #5
 8009190:	465e      	mov	r6, fp
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	4642      	mov	r2, r8
 8009196:	4615      	mov	r5, r2
 8009198:	3201      	adds	r2, #1
 800919a:	7828      	ldrb	r0, [r5, #0]
 800919c:	f7ff ffaa 	bl	80090f4 <__hexdig_fun>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1f8      	bne.n	8009196 <__gethex+0x76>
 80091a4:	4994      	ldr	r1, [pc, #592]	; (80093f8 <__gethex+0x2d8>)
 80091a6:	2201      	movs	r2, #1
 80091a8:	4628      	mov	r0, r5
 80091aa:	f7ff fee5 	bl	8008f78 <strncmp>
 80091ae:	b978      	cbnz	r0, 80091d0 <__gethex+0xb0>
 80091b0:	b946      	cbnz	r6, 80091c4 <__gethex+0xa4>
 80091b2:	1c6e      	adds	r6, r5, #1
 80091b4:	4632      	mov	r2, r6
 80091b6:	4615      	mov	r5, r2
 80091b8:	3201      	adds	r2, #1
 80091ba:	7828      	ldrb	r0, [r5, #0]
 80091bc:	f7ff ff9a 	bl	80090f4 <__hexdig_fun>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d1f8      	bne.n	80091b6 <__gethex+0x96>
 80091c4:	1b73      	subs	r3, r6, r5
 80091c6:	009e      	lsls	r6, r3, #2
 80091c8:	e004      	b.n	80091d4 <__gethex+0xb4>
 80091ca:	2400      	movs	r4, #0
 80091cc:	4626      	mov	r6, r4
 80091ce:	e7e1      	b.n	8009194 <__gethex+0x74>
 80091d0:	2e00      	cmp	r6, #0
 80091d2:	d1f7      	bne.n	80091c4 <__gethex+0xa4>
 80091d4:	782b      	ldrb	r3, [r5, #0]
 80091d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091da:	2b50      	cmp	r3, #80	; 0x50
 80091dc:	d13d      	bne.n	800925a <__gethex+0x13a>
 80091de:	786b      	ldrb	r3, [r5, #1]
 80091e0:	2b2b      	cmp	r3, #43	; 0x2b
 80091e2:	d02f      	beq.n	8009244 <__gethex+0x124>
 80091e4:	2b2d      	cmp	r3, #45	; 0x2d
 80091e6:	d031      	beq.n	800924c <__gethex+0x12c>
 80091e8:	1c69      	adds	r1, r5, #1
 80091ea:	f04f 0b00 	mov.w	fp, #0
 80091ee:	7808      	ldrb	r0, [r1, #0]
 80091f0:	f7ff ff80 	bl	80090f4 <__hexdig_fun>
 80091f4:	1e42      	subs	r2, r0, #1
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	2a18      	cmp	r2, #24
 80091fa:	d82e      	bhi.n	800925a <__gethex+0x13a>
 80091fc:	f1a0 0210 	sub.w	r2, r0, #16
 8009200:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009204:	f7ff ff76 	bl	80090f4 <__hexdig_fun>
 8009208:	f100 3cff 	add.w	ip, r0, #4294967295
 800920c:	fa5f fc8c 	uxtb.w	ip, ip
 8009210:	f1bc 0f18 	cmp.w	ip, #24
 8009214:	d91d      	bls.n	8009252 <__gethex+0x132>
 8009216:	f1bb 0f00 	cmp.w	fp, #0
 800921a:	d000      	beq.n	800921e <__gethex+0xfe>
 800921c:	4252      	negs	r2, r2
 800921e:	4416      	add	r6, r2
 8009220:	f8ca 1000 	str.w	r1, [sl]
 8009224:	b1dc      	cbz	r4, 800925e <__gethex+0x13e>
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	bf14      	ite	ne
 800922c:	f04f 0800 	movne.w	r8, #0
 8009230:	f04f 0806 	moveq.w	r8, #6
 8009234:	4640      	mov	r0, r8
 8009236:	b005      	add	sp, #20
 8009238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923c:	4645      	mov	r5, r8
 800923e:	4626      	mov	r6, r4
 8009240:	2401      	movs	r4, #1
 8009242:	e7c7      	b.n	80091d4 <__gethex+0xb4>
 8009244:	f04f 0b00 	mov.w	fp, #0
 8009248:	1ca9      	adds	r1, r5, #2
 800924a:	e7d0      	b.n	80091ee <__gethex+0xce>
 800924c:	f04f 0b01 	mov.w	fp, #1
 8009250:	e7fa      	b.n	8009248 <__gethex+0x128>
 8009252:	230a      	movs	r3, #10
 8009254:	fb03 0002 	mla	r0, r3, r2, r0
 8009258:	e7d0      	b.n	80091fc <__gethex+0xdc>
 800925a:	4629      	mov	r1, r5
 800925c:	e7e0      	b.n	8009220 <__gethex+0x100>
 800925e:	eba5 0308 	sub.w	r3, r5, r8
 8009262:	3b01      	subs	r3, #1
 8009264:	4621      	mov	r1, r4
 8009266:	2b07      	cmp	r3, #7
 8009268:	dc0a      	bgt.n	8009280 <__gethex+0x160>
 800926a:	4648      	mov	r0, r9
 800926c:	f7fd ff46 	bl	80070fc <_Balloc>
 8009270:	4604      	mov	r4, r0
 8009272:	b940      	cbnz	r0, 8009286 <__gethex+0x166>
 8009274:	4b61      	ldr	r3, [pc, #388]	; (80093fc <__gethex+0x2dc>)
 8009276:	4602      	mov	r2, r0
 8009278:	21e4      	movs	r1, #228	; 0xe4
 800927a:	4861      	ldr	r0, [pc, #388]	; (8009400 <__gethex+0x2e0>)
 800927c:	f7ff feb4 	bl	8008fe8 <__assert_func>
 8009280:	3101      	adds	r1, #1
 8009282:	105b      	asrs	r3, r3, #1
 8009284:	e7ef      	b.n	8009266 <__gethex+0x146>
 8009286:	f100 0a14 	add.w	sl, r0, #20
 800928a:	2300      	movs	r3, #0
 800928c:	495a      	ldr	r1, [pc, #360]	; (80093f8 <__gethex+0x2d8>)
 800928e:	f8cd a004 	str.w	sl, [sp, #4]
 8009292:	469b      	mov	fp, r3
 8009294:	45a8      	cmp	r8, r5
 8009296:	d342      	bcc.n	800931e <__gethex+0x1fe>
 8009298:	9801      	ldr	r0, [sp, #4]
 800929a:	f840 bb04 	str.w	fp, [r0], #4
 800929e:	eba0 000a 	sub.w	r0, r0, sl
 80092a2:	1080      	asrs	r0, r0, #2
 80092a4:	6120      	str	r0, [r4, #16]
 80092a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80092aa:	4658      	mov	r0, fp
 80092ac:	f7fe f818 	bl	80072e0 <__hi0bits>
 80092b0:	683d      	ldr	r5, [r7, #0]
 80092b2:	eba8 0000 	sub.w	r0, r8, r0
 80092b6:	42a8      	cmp	r0, r5
 80092b8:	dd59      	ble.n	800936e <__gethex+0x24e>
 80092ba:	eba0 0805 	sub.w	r8, r0, r5
 80092be:	4641      	mov	r1, r8
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7fe fba7 	bl	8007a14 <__any_on>
 80092c6:	4683      	mov	fp, r0
 80092c8:	b1b8      	cbz	r0, 80092fa <__gethex+0x1da>
 80092ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80092ce:	1159      	asrs	r1, r3, #5
 80092d0:	f003 021f 	and.w	r2, r3, #31
 80092d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80092d8:	f04f 0b01 	mov.w	fp, #1
 80092dc:	fa0b f202 	lsl.w	r2, fp, r2
 80092e0:	420a      	tst	r2, r1
 80092e2:	d00a      	beq.n	80092fa <__gethex+0x1da>
 80092e4:	455b      	cmp	r3, fp
 80092e6:	dd06      	ble.n	80092f6 <__gethex+0x1d6>
 80092e8:	f1a8 0102 	sub.w	r1, r8, #2
 80092ec:	4620      	mov	r0, r4
 80092ee:	f7fe fb91 	bl	8007a14 <__any_on>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d138      	bne.n	8009368 <__gethex+0x248>
 80092f6:	f04f 0b02 	mov.w	fp, #2
 80092fa:	4641      	mov	r1, r8
 80092fc:	4620      	mov	r0, r4
 80092fe:	f7ff fea7 	bl	8009050 <rshift>
 8009302:	4446      	add	r6, r8
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	42b3      	cmp	r3, r6
 8009308:	da41      	bge.n	800938e <__gethex+0x26e>
 800930a:	4621      	mov	r1, r4
 800930c:	4648      	mov	r0, r9
 800930e:	f7fd ff35 	bl	800717c <_Bfree>
 8009312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009314:	2300      	movs	r3, #0
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800931c:	e78a      	b.n	8009234 <__gethex+0x114>
 800931e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009322:	2a2e      	cmp	r2, #46	; 0x2e
 8009324:	d014      	beq.n	8009350 <__gethex+0x230>
 8009326:	2b20      	cmp	r3, #32
 8009328:	d106      	bne.n	8009338 <__gethex+0x218>
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	f843 bb04 	str.w	fp, [r3], #4
 8009330:	f04f 0b00 	mov.w	fp, #0
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	465b      	mov	r3, fp
 8009338:	7828      	ldrb	r0, [r5, #0]
 800933a:	9303      	str	r3, [sp, #12]
 800933c:	f7ff feda 	bl	80090f4 <__hexdig_fun>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	f000 000f 	and.w	r0, r0, #15
 8009346:	4098      	lsls	r0, r3
 8009348:	ea4b 0b00 	orr.w	fp, fp, r0
 800934c:	3304      	adds	r3, #4
 800934e:	e7a1      	b.n	8009294 <__gethex+0x174>
 8009350:	45a8      	cmp	r8, r5
 8009352:	d8e8      	bhi.n	8009326 <__gethex+0x206>
 8009354:	2201      	movs	r2, #1
 8009356:	4628      	mov	r0, r5
 8009358:	9303      	str	r3, [sp, #12]
 800935a:	f7ff fe0d 	bl	8008f78 <strncmp>
 800935e:	4926      	ldr	r1, [pc, #152]	; (80093f8 <__gethex+0x2d8>)
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	2800      	cmp	r0, #0
 8009364:	d1df      	bne.n	8009326 <__gethex+0x206>
 8009366:	e795      	b.n	8009294 <__gethex+0x174>
 8009368:	f04f 0b03 	mov.w	fp, #3
 800936c:	e7c5      	b.n	80092fa <__gethex+0x1da>
 800936e:	da0b      	bge.n	8009388 <__gethex+0x268>
 8009370:	eba5 0800 	sub.w	r8, r5, r0
 8009374:	4621      	mov	r1, r4
 8009376:	4642      	mov	r2, r8
 8009378:	4648      	mov	r0, r9
 800937a:	f7fe f919 	bl	80075b0 <__lshift>
 800937e:	eba6 0608 	sub.w	r6, r6, r8
 8009382:	4604      	mov	r4, r0
 8009384:	f100 0a14 	add.w	sl, r0, #20
 8009388:	f04f 0b00 	mov.w	fp, #0
 800938c:	e7ba      	b.n	8009304 <__gethex+0x1e4>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	42b3      	cmp	r3, r6
 8009392:	dd73      	ble.n	800947c <__gethex+0x35c>
 8009394:	1b9e      	subs	r6, r3, r6
 8009396:	42b5      	cmp	r5, r6
 8009398:	dc34      	bgt.n	8009404 <__gethex+0x2e4>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d023      	beq.n	80093e8 <__gethex+0x2c8>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d025      	beq.n	80093f0 <__gethex+0x2d0>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d115      	bne.n	80093d4 <__gethex+0x2b4>
 80093a8:	42b5      	cmp	r5, r6
 80093aa:	d113      	bne.n	80093d4 <__gethex+0x2b4>
 80093ac:	2d01      	cmp	r5, #1
 80093ae:	d10b      	bne.n	80093c8 <__gethex+0x2a8>
 80093b0:	9a02      	ldr	r2, [sp, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	2301      	movs	r3, #1
 80093b8:	6123      	str	r3, [r4, #16]
 80093ba:	f8ca 3000 	str.w	r3, [sl]
 80093be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80093c4:	601c      	str	r4, [r3, #0]
 80093c6:	e735      	b.n	8009234 <__gethex+0x114>
 80093c8:	1e69      	subs	r1, r5, #1
 80093ca:	4620      	mov	r0, r4
 80093cc:	f7fe fb22 	bl	8007a14 <__any_on>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d1ed      	bne.n	80093b0 <__gethex+0x290>
 80093d4:	4621      	mov	r1, r4
 80093d6:	4648      	mov	r0, r9
 80093d8:	f7fd fed0 	bl	800717c <_Bfree>
 80093dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093de:	2300      	movs	r3, #0
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80093e6:	e725      	b.n	8009234 <__gethex+0x114>
 80093e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1f2      	bne.n	80093d4 <__gethex+0x2b4>
 80093ee:	e7df      	b.n	80093b0 <__gethex+0x290>
 80093f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1dc      	bne.n	80093b0 <__gethex+0x290>
 80093f6:	e7ed      	b.n	80093d4 <__gethex+0x2b4>
 80093f8:	08009c2c 	.word	0x08009c2c
 80093fc:	08009ac1 	.word	0x08009ac1
 8009400:	08009dd6 	.word	0x08009dd6
 8009404:	f106 38ff 	add.w	r8, r6, #4294967295
 8009408:	f1bb 0f00 	cmp.w	fp, #0
 800940c:	d133      	bne.n	8009476 <__gethex+0x356>
 800940e:	f1b8 0f00 	cmp.w	r8, #0
 8009412:	d004      	beq.n	800941e <__gethex+0x2fe>
 8009414:	4641      	mov	r1, r8
 8009416:	4620      	mov	r0, r4
 8009418:	f7fe fafc 	bl	8007a14 <__any_on>
 800941c:	4683      	mov	fp, r0
 800941e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009422:	2301      	movs	r3, #1
 8009424:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009428:	f008 081f 	and.w	r8, r8, #31
 800942c:	fa03 f308 	lsl.w	r3, r3, r8
 8009430:	4213      	tst	r3, r2
 8009432:	4631      	mov	r1, r6
 8009434:	4620      	mov	r0, r4
 8009436:	bf18      	it	ne
 8009438:	f04b 0b02 	orrne.w	fp, fp, #2
 800943c:	1bad      	subs	r5, r5, r6
 800943e:	f7ff fe07 	bl	8009050 <rshift>
 8009442:	687e      	ldr	r6, [r7, #4]
 8009444:	f04f 0802 	mov.w	r8, #2
 8009448:	f1bb 0f00 	cmp.w	fp, #0
 800944c:	d04a      	beq.n	80094e4 <__gethex+0x3c4>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d016      	beq.n	8009482 <__gethex+0x362>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d018      	beq.n	800948a <__gethex+0x36a>
 8009458:	2b01      	cmp	r3, #1
 800945a:	d109      	bne.n	8009470 <__gethex+0x350>
 800945c:	f01b 0f02 	tst.w	fp, #2
 8009460:	d006      	beq.n	8009470 <__gethex+0x350>
 8009462:	f8da 3000 	ldr.w	r3, [sl]
 8009466:	ea4b 0b03 	orr.w	fp, fp, r3
 800946a:	f01b 0f01 	tst.w	fp, #1
 800946e:	d10f      	bne.n	8009490 <__gethex+0x370>
 8009470:	f048 0810 	orr.w	r8, r8, #16
 8009474:	e036      	b.n	80094e4 <__gethex+0x3c4>
 8009476:	f04f 0b01 	mov.w	fp, #1
 800947a:	e7d0      	b.n	800941e <__gethex+0x2fe>
 800947c:	f04f 0801 	mov.w	r8, #1
 8009480:	e7e2      	b.n	8009448 <__gethex+0x328>
 8009482:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009484:	f1c3 0301 	rsb	r3, r3, #1
 8009488:	930f      	str	r3, [sp, #60]	; 0x3c
 800948a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d0ef      	beq.n	8009470 <__gethex+0x350>
 8009490:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009494:	f104 0214 	add.w	r2, r4, #20
 8009498:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80094a2:	2300      	movs	r3, #0
 80094a4:	4694      	mov	ip, r2
 80094a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80094aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80094ae:	d01e      	beq.n	80094ee <__gethex+0x3ce>
 80094b0:	3101      	adds	r1, #1
 80094b2:	f8cc 1000 	str.w	r1, [ip]
 80094b6:	f1b8 0f02 	cmp.w	r8, #2
 80094ba:	f104 0214 	add.w	r2, r4, #20
 80094be:	d13d      	bne.n	800953c <__gethex+0x41c>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	3b01      	subs	r3, #1
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	d10b      	bne.n	80094e0 <__gethex+0x3c0>
 80094c8:	1169      	asrs	r1, r5, #5
 80094ca:	2301      	movs	r3, #1
 80094cc:	f005 051f 	and.w	r5, r5, #31
 80094d0:	fa03 f505 	lsl.w	r5, r3, r5
 80094d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094d8:	421d      	tst	r5, r3
 80094da:	bf18      	it	ne
 80094dc:	f04f 0801 	movne.w	r8, #1
 80094e0:	f048 0820 	orr.w	r8, r8, #32
 80094e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e6:	601c      	str	r4, [r3, #0]
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	601e      	str	r6, [r3, #0]
 80094ec:	e6a2      	b.n	8009234 <__gethex+0x114>
 80094ee:	4290      	cmp	r0, r2
 80094f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80094f4:	d8d6      	bhi.n	80094a4 <__gethex+0x384>
 80094f6:	68a2      	ldr	r2, [r4, #8]
 80094f8:	4593      	cmp	fp, r2
 80094fa:	db17      	blt.n	800952c <__gethex+0x40c>
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	4648      	mov	r0, r9
 8009500:	3101      	adds	r1, #1
 8009502:	f7fd fdfb 	bl	80070fc <_Balloc>
 8009506:	4682      	mov	sl, r0
 8009508:	b918      	cbnz	r0, 8009512 <__gethex+0x3f2>
 800950a:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <__gethex+0x458>)
 800950c:	4602      	mov	r2, r0
 800950e:	2184      	movs	r1, #132	; 0x84
 8009510:	e6b3      	b.n	800927a <__gethex+0x15a>
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	3202      	adds	r2, #2
 8009516:	f104 010c 	add.w	r1, r4, #12
 800951a:	0092      	lsls	r2, r2, #2
 800951c:	300c      	adds	r0, #12
 800951e:	f7ff fd4d 	bl	8008fbc <memcpy>
 8009522:	4621      	mov	r1, r4
 8009524:	4648      	mov	r0, r9
 8009526:	f7fd fe29 	bl	800717c <_Bfree>
 800952a:	4654      	mov	r4, sl
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	1c51      	adds	r1, r2, #1
 8009530:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009534:	6121      	str	r1, [r4, #16]
 8009536:	2101      	movs	r1, #1
 8009538:	6151      	str	r1, [r2, #20]
 800953a:	e7bc      	b.n	80094b6 <__gethex+0x396>
 800953c:	6921      	ldr	r1, [r4, #16]
 800953e:	4559      	cmp	r1, fp
 8009540:	dd0b      	ble.n	800955a <__gethex+0x43a>
 8009542:	2101      	movs	r1, #1
 8009544:	4620      	mov	r0, r4
 8009546:	f7ff fd83 	bl	8009050 <rshift>
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	3601      	adds	r6, #1
 800954e:	42b3      	cmp	r3, r6
 8009550:	f6ff aedb 	blt.w	800930a <__gethex+0x1ea>
 8009554:	f04f 0801 	mov.w	r8, #1
 8009558:	e7c2      	b.n	80094e0 <__gethex+0x3c0>
 800955a:	f015 051f 	ands.w	r5, r5, #31
 800955e:	d0f9      	beq.n	8009554 <__gethex+0x434>
 8009560:	9b01      	ldr	r3, [sp, #4]
 8009562:	441a      	add	r2, r3
 8009564:	f1c5 0520 	rsb	r5, r5, #32
 8009568:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800956c:	f7fd feb8 	bl	80072e0 <__hi0bits>
 8009570:	42a8      	cmp	r0, r5
 8009572:	dbe6      	blt.n	8009542 <__gethex+0x422>
 8009574:	e7ee      	b.n	8009554 <__gethex+0x434>
 8009576:	bf00      	nop
 8009578:	08009ac1 	.word	0x08009ac1

0800957c <L_shift>:
 800957c:	f1c2 0208 	rsb	r2, r2, #8
 8009580:	0092      	lsls	r2, r2, #2
 8009582:	b570      	push	{r4, r5, r6, lr}
 8009584:	f1c2 0620 	rsb	r6, r2, #32
 8009588:	6843      	ldr	r3, [r0, #4]
 800958a:	6804      	ldr	r4, [r0, #0]
 800958c:	fa03 f506 	lsl.w	r5, r3, r6
 8009590:	432c      	orrs	r4, r5
 8009592:	40d3      	lsrs	r3, r2
 8009594:	6004      	str	r4, [r0, #0]
 8009596:	f840 3f04 	str.w	r3, [r0, #4]!
 800959a:	4288      	cmp	r0, r1
 800959c:	d3f4      	bcc.n	8009588 <L_shift+0xc>
 800959e:	bd70      	pop	{r4, r5, r6, pc}

080095a0 <__match>:
 80095a0:	b530      	push	{r4, r5, lr}
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095aa:	b914      	cbnz	r4, 80095b2 <__match+0x12>
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	2001      	movs	r0, #1
 80095b0:	bd30      	pop	{r4, r5, pc}
 80095b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095ba:	2d19      	cmp	r5, #25
 80095bc:	bf98      	it	ls
 80095be:	3220      	addls	r2, #32
 80095c0:	42a2      	cmp	r2, r4
 80095c2:	d0f0      	beq.n	80095a6 <__match+0x6>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7f3      	b.n	80095b0 <__match+0x10>

080095c8 <__hexnan>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	680b      	ldr	r3, [r1, #0]
 80095ce:	6801      	ldr	r1, [r0, #0]
 80095d0:	115e      	asrs	r6, r3, #5
 80095d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095d6:	f013 031f 	ands.w	r3, r3, #31
 80095da:	b087      	sub	sp, #28
 80095dc:	bf18      	it	ne
 80095de:	3604      	addne	r6, #4
 80095e0:	2500      	movs	r5, #0
 80095e2:	1f37      	subs	r7, r6, #4
 80095e4:	4682      	mov	sl, r0
 80095e6:	4690      	mov	r8, r2
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80095ee:	46b9      	mov	r9, r7
 80095f0:	463c      	mov	r4, r7
 80095f2:	9502      	str	r5, [sp, #8]
 80095f4:	46ab      	mov	fp, r5
 80095f6:	784a      	ldrb	r2, [r1, #1]
 80095f8:	1c4b      	adds	r3, r1, #1
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	b342      	cbz	r2, 8009650 <__hexnan+0x88>
 80095fe:	4610      	mov	r0, r2
 8009600:	9105      	str	r1, [sp, #20]
 8009602:	9204      	str	r2, [sp, #16]
 8009604:	f7ff fd76 	bl	80090f4 <__hexdig_fun>
 8009608:	2800      	cmp	r0, #0
 800960a:	d14f      	bne.n	80096ac <__hexnan+0xe4>
 800960c:	9a04      	ldr	r2, [sp, #16]
 800960e:	9905      	ldr	r1, [sp, #20]
 8009610:	2a20      	cmp	r2, #32
 8009612:	d818      	bhi.n	8009646 <__hexnan+0x7e>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	459b      	cmp	fp, r3
 8009618:	dd13      	ble.n	8009642 <__hexnan+0x7a>
 800961a:	454c      	cmp	r4, r9
 800961c:	d206      	bcs.n	800962c <__hexnan+0x64>
 800961e:	2d07      	cmp	r5, #7
 8009620:	dc04      	bgt.n	800962c <__hexnan+0x64>
 8009622:	462a      	mov	r2, r5
 8009624:	4649      	mov	r1, r9
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff ffa8 	bl	800957c <L_shift>
 800962c:	4544      	cmp	r4, r8
 800962e:	d950      	bls.n	80096d2 <__hexnan+0x10a>
 8009630:	2300      	movs	r3, #0
 8009632:	f1a4 0904 	sub.w	r9, r4, #4
 8009636:	f844 3c04 	str.w	r3, [r4, #-4]
 800963a:	f8cd b008 	str.w	fp, [sp, #8]
 800963e:	464c      	mov	r4, r9
 8009640:	461d      	mov	r5, r3
 8009642:	9903      	ldr	r1, [sp, #12]
 8009644:	e7d7      	b.n	80095f6 <__hexnan+0x2e>
 8009646:	2a29      	cmp	r2, #41	; 0x29
 8009648:	d155      	bne.n	80096f6 <__hexnan+0x12e>
 800964a:	3102      	adds	r1, #2
 800964c:	f8ca 1000 	str.w	r1, [sl]
 8009650:	f1bb 0f00 	cmp.w	fp, #0
 8009654:	d04f      	beq.n	80096f6 <__hexnan+0x12e>
 8009656:	454c      	cmp	r4, r9
 8009658:	d206      	bcs.n	8009668 <__hexnan+0xa0>
 800965a:	2d07      	cmp	r5, #7
 800965c:	dc04      	bgt.n	8009668 <__hexnan+0xa0>
 800965e:	462a      	mov	r2, r5
 8009660:	4649      	mov	r1, r9
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff ff8a 	bl	800957c <L_shift>
 8009668:	4544      	cmp	r4, r8
 800966a:	d934      	bls.n	80096d6 <__hexnan+0x10e>
 800966c:	f1a8 0204 	sub.w	r2, r8, #4
 8009670:	4623      	mov	r3, r4
 8009672:	f853 1b04 	ldr.w	r1, [r3], #4
 8009676:	f842 1f04 	str.w	r1, [r2, #4]!
 800967a:	429f      	cmp	r7, r3
 800967c:	d2f9      	bcs.n	8009672 <__hexnan+0xaa>
 800967e:	1b3b      	subs	r3, r7, r4
 8009680:	f023 0303 	bic.w	r3, r3, #3
 8009684:	3304      	adds	r3, #4
 8009686:	3e03      	subs	r6, #3
 8009688:	3401      	adds	r4, #1
 800968a:	42a6      	cmp	r6, r4
 800968c:	bf38      	it	cc
 800968e:	2304      	movcc	r3, #4
 8009690:	4443      	add	r3, r8
 8009692:	2200      	movs	r2, #0
 8009694:	f843 2b04 	str.w	r2, [r3], #4
 8009698:	429f      	cmp	r7, r3
 800969a:	d2fb      	bcs.n	8009694 <__hexnan+0xcc>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	b91b      	cbnz	r3, 80096a8 <__hexnan+0xe0>
 80096a0:	4547      	cmp	r7, r8
 80096a2:	d126      	bne.n	80096f2 <__hexnan+0x12a>
 80096a4:	2301      	movs	r3, #1
 80096a6:	603b      	str	r3, [r7, #0]
 80096a8:	2005      	movs	r0, #5
 80096aa:	e025      	b.n	80096f8 <__hexnan+0x130>
 80096ac:	3501      	adds	r5, #1
 80096ae:	2d08      	cmp	r5, #8
 80096b0:	f10b 0b01 	add.w	fp, fp, #1
 80096b4:	dd06      	ble.n	80096c4 <__hexnan+0xfc>
 80096b6:	4544      	cmp	r4, r8
 80096b8:	d9c3      	bls.n	8009642 <__hexnan+0x7a>
 80096ba:	2300      	movs	r3, #0
 80096bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80096c0:	2501      	movs	r5, #1
 80096c2:	3c04      	subs	r4, #4
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	f000 000f 	and.w	r0, r0, #15
 80096ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80096ce:	6020      	str	r0, [r4, #0]
 80096d0:	e7b7      	b.n	8009642 <__hexnan+0x7a>
 80096d2:	2508      	movs	r5, #8
 80096d4:	e7b5      	b.n	8009642 <__hexnan+0x7a>
 80096d6:	9b01      	ldr	r3, [sp, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0df      	beq.n	800969c <__hexnan+0xd4>
 80096dc:	f1c3 0320 	rsb	r3, r3, #32
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295
 80096e4:	40da      	lsrs	r2, r3
 80096e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80096ea:	4013      	ands	r3, r2
 80096ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80096f0:	e7d4      	b.n	800969c <__hexnan+0xd4>
 80096f2:	3f04      	subs	r7, #4
 80096f4:	e7d2      	b.n	800969c <__hexnan+0xd4>
 80096f6:	2004      	movs	r0, #4
 80096f8:	b007      	add	sp, #28
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096fe <__ascii_mbtowc>:
 80096fe:	b082      	sub	sp, #8
 8009700:	b901      	cbnz	r1, 8009704 <__ascii_mbtowc+0x6>
 8009702:	a901      	add	r1, sp, #4
 8009704:	b142      	cbz	r2, 8009718 <__ascii_mbtowc+0x1a>
 8009706:	b14b      	cbz	r3, 800971c <__ascii_mbtowc+0x1e>
 8009708:	7813      	ldrb	r3, [r2, #0]
 800970a:	600b      	str	r3, [r1, #0]
 800970c:	7812      	ldrb	r2, [r2, #0]
 800970e:	1e10      	subs	r0, r2, #0
 8009710:	bf18      	it	ne
 8009712:	2001      	movne	r0, #1
 8009714:	b002      	add	sp, #8
 8009716:	4770      	bx	lr
 8009718:	4610      	mov	r0, r2
 800971a:	e7fb      	b.n	8009714 <__ascii_mbtowc+0x16>
 800971c:	f06f 0001 	mvn.w	r0, #1
 8009720:	e7f8      	b.n	8009714 <__ascii_mbtowc+0x16>

08009722 <_realloc_r>:
 8009722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009726:	4680      	mov	r8, r0
 8009728:	4614      	mov	r4, r2
 800972a:	460e      	mov	r6, r1
 800972c:	b921      	cbnz	r1, 8009738 <_realloc_r+0x16>
 800972e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009732:	4611      	mov	r1, r2
 8009734:	f7fd bc56 	b.w	8006fe4 <_malloc_r>
 8009738:	b92a      	cbnz	r2, 8009746 <_realloc_r+0x24>
 800973a:	f7fd fbdf 	bl	8006efc <_free_r>
 800973e:	4625      	mov	r5, r4
 8009740:	4628      	mov	r0, r5
 8009742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009746:	f000 f8c6 	bl	80098d6 <_malloc_usable_size_r>
 800974a:	4284      	cmp	r4, r0
 800974c:	4607      	mov	r7, r0
 800974e:	d802      	bhi.n	8009756 <_realloc_r+0x34>
 8009750:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009754:	d812      	bhi.n	800977c <_realloc_r+0x5a>
 8009756:	4621      	mov	r1, r4
 8009758:	4640      	mov	r0, r8
 800975a:	f7fd fc43 	bl	8006fe4 <_malloc_r>
 800975e:	4605      	mov	r5, r0
 8009760:	2800      	cmp	r0, #0
 8009762:	d0ed      	beq.n	8009740 <_realloc_r+0x1e>
 8009764:	42bc      	cmp	r4, r7
 8009766:	4622      	mov	r2, r4
 8009768:	4631      	mov	r1, r6
 800976a:	bf28      	it	cs
 800976c:	463a      	movcs	r2, r7
 800976e:	f7ff fc25 	bl	8008fbc <memcpy>
 8009772:	4631      	mov	r1, r6
 8009774:	4640      	mov	r0, r8
 8009776:	f7fd fbc1 	bl	8006efc <_free_r>
 800977a:	e7e1      	b.n	8009740 <_realloc_r+0x1e>
 800977c:	4635      	mov	r5, r6
 800977e:	e7df      	b.n	8009740 <_realloc_r+0x1e>

08009780 <__ascii_wctomb>:
 8009780:	b149      	cbz	r1, 8009796 <__ascii_wctomb+0x16>
 8009782:	2aff      	cmp	r2, #255	; 0xff
 8009784:	bf85      	ittet	hi
 8009786:	238a      	movhi	r3, #138	; 0x8a
 8009788:	6003      	strhi	r3, [r0, #0]
 800978a:	700a      	strbls	r2, [r1, #0]
 800978c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009790:	bf98      	it	ls
 8009792:	2001      	movls	r0, #1
 8009794:	4770      	bx	lr
 8009796:	4608      	mov	r0, r1
 8009798:	4770      	bx	lr
	...

0800979c <fiprintf>:
 800979c:	b40e      	push	{r1, r2, r3}
 800979e:	b503      	push	{r0, r1, lr}
 80097a0:	4601      	mov	r1, r0
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	4805      	ldr	r0, [pc, #20]	; (80097bc <fiprintf+0x20>)
 80097a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f7ff f96b 	bl	8008a88 <_vfiprintf_r>
 80097b2:	b002      	add	sp, #8
 80097b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b8:	b003      	add	sp, #12
 80097ba:	4770      	bx	lr
 80097bc:	20000064 	.word	0x20000064

080097c0 <__swhatbuf_r>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	460c      	mov	r4, r1
 80097c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c8:	2900      	cmp	r1, #0
 80097ca:	b096      	sub	sp, #88	; 0x58
 80097cc:	4615      	mov	r5, r2
 80097ce:	461e      	mov	r6, r3
 80097d0:	da0d      	bge.n	80097ee <__swhatbuf_r+0x2e>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097d8:	f04f 0100 	mov.w	r1, #0
 80097dc:	bf0c      	ite	eq
 80097de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097e2:	2340      	movne	r3, #64	; 0x40
 80097e4:	2000      	movs	r0, #0
 80097e6:	6031      	str	r1, [r6, #0]
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	b016      	add	sp, #88	; 0x58
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	466a      	mov	r2, sp
 80097f0:	f000 f848 	bl	8009884 <_fstat_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	dbec      	blt.n	80097d2 <__swhatbuf_r+0x12>
 80097f8:	9901      	ldr	r1, [sp, #4]
 80097fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009802:	4259      	negs	r1, r3
 8009804:	4159      	adcs	r1, r3
 8009806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800980a:	e7eb      	b.n	80097e4 <__swhatbuf_r+0x24>

0800980c <__smakebuf_r>:
 800980c:	898b      	ldrh	r3, [r1, #12]
 800980e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009810:	079d      	lsls	r5, r3, #30
 8009812:	4606      	mov	r6, r0
 8009814:	460c      	mov	r4, r1
 8009816:	d507      	bpl.n	8009828 <__smakebuf_r+0x1c>
 8009818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	2301      	movs	r3, #1
 8009822:	6163      	str	r3, [r4, #20]
 8009824:	b002      	add	sp, #8
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	ab01      	add	r3, sp, #4
 800982a:	466a      	mov	r2, sp
 800982c:	f7ff ffc8 	bl	80097c0 <__swhatbuf_r>
 8009830:	9900      	ldr	r1, [sp, #0]
 8009832:	4605      	mov	r5, r0
 8009834:	4630      	mov	r0, r6
 8009836:	f7fd fbd5 	bl	8006fe4 <_malloc_r>
 800983a:	b948      	cbnz	r0, 8009850 <__smakebuf_r+0x44>
 800983c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009840:	059a      	lsls	r2, r3, #22
 8009842:	d4ef      	bmi.n	8009824 <__smakebuf_r+0x18>
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	f043 0302 	orr.w	r3, r3, #2
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	e7e3      	b.n	8009818 <__smakebuf_r+0xc>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	6020      	str	r0, [r4, #0]
 8009854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	6163      	str	r3, [r4, #20]
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	6120      	str	r0, [r4, #16]
 8009862:	b15b      	cbz	r3, 800987c <__smakebuf_r+0x70>
 8009864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009868:	4630      	mov	r0, r6
 800986a:	f000 f81d 	bl	80098a8 <_isatty_r>
 800986e:	b128      	cbz	r0, 800987c <__smakebuf_r+0x70>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f023 0303 	bic.w	r3, r3, #3
 8009876:	f043 0301 	orr.w	r3, r3, #1
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	431d      	orrs	r5, r3
 8009880:	81a5      	strh	r5, [r4, #12]
 8009882:	e7cf      	b.n	8009824 <__smakebuf_r+0x18>

08009884 <_fstat_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d07      	ldr	r5, [pc, #28]	; (80098a4 <_fstat_r+0x20>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	4611      	mov	r1, r2
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	f7f7 ff17 	bl	80016c4 <_fstat>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	d102      	bne.n	80098a0 <_fstat_r+0x1c>
 800989a:	682b      	ldr	r3, [r5, #0]
 800989c:	b103      	cbz	r3, 80098a0 <_fstat_r+0x1c>
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	bf00      	nop
 80098a4:	20000424 	.word	0x20000424

080098a8 <_isatty_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_isatty_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7f7 ff16 	bl	80016e4 <_isatty>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_isatty_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_isatty_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	20000424 	.word	0x20000424

080098c8 <abort>:
 80098c8:	b508      	push	{r3, lr}
 80098ca:	2006      	movs	r0, #6
 80098cc:	f000 f834 	bl	8009938 <raise>
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7f7 fea1 	bl	8001618 <_exit>

080098d6 <_malloc_usable_size_r>:
 80098d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098da:	1f18      	subs	r0, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfbc      	itt	lt
 80098e0:	580b      	ldrlt	r3, [r1, r0]
 80098e2:	18c0      	addlt	r0, r0, r3
 80098e4:	4770      	bx	lr

080098e6 <_raise_r>:
 80098e6:	291f      	cmp	r1, #31
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	460d      	mov	r5, r1
 80098ee:	d904      	bls.n	80098fa <_raise_r+0x14>
 80098f0:	2316      	movs	r3, #22
 80098f2:	6003      	str	r3, [r0, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	bd38      	pop	{r3, r4, r5, pc}
 80098fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098fc:	b112      	cbz	r2, 8009904 <_raise_r+0x1e>
 80098fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009902:	b94b      	cbnz	r3, 8009918 <_raise_r+0x32>
 8009904:	4620      	mov	r0, r4
 8009906:	f000 f831 	bl	800996c <_getpid_r>
 800990a:	462a      	mov	r2, r5
 800990c:	4601      	mov	r1, r0
 800990e:	4620      	mov	r0, r4
 8009910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009914:	f000 b818 	b.w	8009948 <_kill_r>
 8009918:	2b01      	cmp	r3, #1
 800991a:	d00a      	beq.n	8009932 <_raise_r+0x4c>
 800991c:	1c59      	adds	r1, r3, #1
 800991e:	d103      	bne.n	8009928 <_raise_r+0x42>
 8009920:	2316      	movs	r3, #22
 8009922:	6003      	str	r3, [r0, #0]
 8009924:	2001      	movs	r0, #1
 8009926:	e7e7      	b.n	80098f8 <_raise_r+0x12>
 8009928:	2400      	movs	r4, #0
 800992a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800992e:	4628      	mov	r0, r5
 8009930:	4798      	blx	r3
 8009932:	2000      	movs	r0, #0
 8009934:	e7e0      	b.n	80098f8 <_raise_r+0x12>
	...

08009938 <raise>:
 8009938:	4b02      	ldr	r3, [pc, #8]	; (8009944 <raise+0xc>)
 800993a:	4601      	mov	r1, r0
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f7ff bfd2 	b.w	80098e6 <_raise_r>
 8009942:	bf00      	nop
 8009944:	20000064 	.word	0x20000064

08009948 <_kill_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_kill_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f7f7 fe4f 	bl	80015f8 <_kill>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_kill_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_kill_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	20000424 	.word	0x20000424

0800996c <_getpid_r>:
 800996c:	f7f7 be3c 	b.w	80015e8 <_getpid>

08009970 <_init>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr

0800997c <_fini>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr
