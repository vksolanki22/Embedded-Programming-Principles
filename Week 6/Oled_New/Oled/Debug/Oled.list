
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c58  08007c58  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007c58  08007c58  00017c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c60  08007c60  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000090  08007cf8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007cf8  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013166  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c9  00000000  00000000  00033269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00035a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022897  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015094  00000000  00000000  000594ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce8f2  00000000  00000000  0006e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000e14  00000000  00000000  0013ce75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005738  00000000  00000000  0013dc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  001433c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d7c 	.word	0x08006d7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006d7c 	.word	0x08006d7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <isPasswordMatched>:
  * RETURNS       : True if matched else False
  * DESCRIPTION   : Validates the user entered password is valid or not
  * ******************************************************************************
  */
bool isPasswordMatched(uint32_t iUserEnteredPasswd)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	for(uint8_t traverseIndex = 0; traverseIndex < MAX_PASSWORD_STORAGE; traverseIndex++)
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e00b      	b.n	8000592 <isPasswordMatched+0x26>
	{
		if(iUserEnteredPasswd == UserConfiguredPasswd[traverseIndex])
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <isPasswordMatched+0x3c>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	d101      	bne.n	800058c <isPasswordMatched+0x20>
			return true;
 8000588:	2301      	movs	r3, #1
 800058a:	e006      	b.n	800059a <isPasswordMatched+0x2e>
	for(uint8_t traverseIndex = 0; traverseIndex < MAX_PASSWORD_STORAGE; traverseIndex++)
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	3301      	adds	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b09      	cmp	r3, #9
 8000596:	d9f0      	bls.n	800057a <isPasswordMatched+0xe>
	}
	return false;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <changeSpeakerFrequency>:
  *
  * ******************************************************************************
  */
static void changeSpeakerFrequency(TIM_HandleTypeDef *htim,
		uint32_t newFrequency)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09c      	sub	sp, #112	; 0x70
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]

	HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);
 80005b6:	2100      	movs	r1, #0
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f003 ff93 	bl	80044e4 <HAL_TIMEx_PWMN_Stop>

	// calculate the new period based off of frequency input
	uint32_t newPeriod = 1000000000 / (newFrequency * 250);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	22fa      	movs	r2, #250	; 0xfa
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	4a58      	ldr	r2, [pc, #352]	; (8000728 <changeSpeakerFrequency+0x17c>)
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	222c      	movs	r2, #44	; 0x2c
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f004 ffda 	bl	80055be <memset>

	htim->Instance = TIM1;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a47      	ldr	r2, [pc, #284]	; (800072c <changeSpeakerFrequency+0x180>)
 800060e:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = 0;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	htim->Init.Period = newPeriod;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000620:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	htim->Init.RepetitionCounter = 0;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htim) != HAL_OK)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f003 f8a5 	bl	8003784 <HAL_TIM_Base_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <changeSpeakerFrequency+0x98>
	{
		Error_Handler();
 8000640:	f000 fc42 	bl	8000ec8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 800064a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800064e:	4619      	mov	r1, r3
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f003 fa63 	bl	8003b1c <HAL_TIM_ConfigClockSource>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <changeSpeakerFrequency+0xb4>
	{
		Error_Handler();
 800065c:	f000 fc34 	bl	8000ec8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f003 f8e6 	bl	8003832 <HAL_TIM_PWM_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <changeSpeakerFrequency+0xc4>
	{
		Error_Handler();
 800066c:	f000 fc2c 	bl	8000ec8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)
 800067c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f003 ff8c 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <changeSpeakerFrequency+0xe6>
			!= HAL_OK)
	{
		Error_Handler();
 800068e:	f000 fc1b 	bl	8000ec8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000692:	2360      	movs	r3, #96	; 0x60
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = htim1.Init.Period/2;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <changeSpeakerFrequency+0x184>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	085b      	lsrs	r3, r3, #1
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ae:	2300      	movs	r3, #0
 80006b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80006b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006b6:	2200      	movs	r2, #0
 80006b8:	4619      	mov	r1, r3
 80006ba:	481d      	ldr	r0, [pc, #116]	; (8000730 <changeSpeakerFrequency+0x184>)
 80006bc:	f003 f91a 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <changeSpeakerFrequency+0x11e>
			!= HAL_OK)
	{
		Error_Handler();
 80006c6:	f000 fbff 	bl	8000ec8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig)
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	4619      	mov	r1, r3
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f003 ffb3 	bl	800466c <HAL_TIMEx_ConfigBreakDeadTime>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <changeSpeakerFrequency+0x164>
			!= HAL_OK)
	{
		Error_Handler();
 800070c:	f000 fbdc 	bl	8000ec8 <Error_Handler>
	}
	HAL_TIM_MspPostInit(htim);
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 fe67 	bl	80013e4 <HAL_TIM_MspPostInit>

	// must restart the timer once changes are complete
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 8000716:	2100      	movs	r1, #0
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f003 fe45 	bl	80043a8 <HAL_TIMEx_PWMN_Start>
}
 800071e:	bf00      	nop
 8000720:	3770      	adds	r7, #112	; 0x70
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	3b9aca00 	.word	0x3b9aca00
 800072c:	40012c00 	.word	0x40012c00
 8000730:	20000110 	.word	0x20000110

08000734 <ErrorSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the error sound on speaker connected on PA7
  * ******************************************************************************
  */
void ErrorSound()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000744:	f001 fae6 	bl	8001d14 <HAL_GPIO_WritePin>
	for(uint8_t count = 0; count < 10; count++)
 8000748:	2300      	movs	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	e016      	b.n	800077c <ErrorSound+0x48>
	{
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 800074e:	2300      	movs	r3, #0
 8000750:	80bb      	strh	r3, [r7, #4]
 8000752:	e00b      	b.n	800076c <ErrorSound+0x38>
		{
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	4619      	mov	r1, r3
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <ErrorSound+0x6c>)
 800075a:	f7ff ff27 	bl	80005ac <changeSpeakerFrequency>
			HAL_Delay(10);							// delay for 10 milisecond
 800075e:	200a      	movs	r0, #10
 8000760:	f001 f864 	bl	800182c <HAL_Delay>
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800076a:	80bb      	strh	r3, [r7, #4]
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000772:	4293      	cmp	r3, r2
 8000774:	d9ee      	bls.n	8000754 <ErrorSound+0x20>
	for(uint8_t count = 0; count < 10; count++)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b09      	cmp	r3, #9
 8000780:	d9e5      	bls.n	800074e <ErrorSound+0x1a>
		}
	}

	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8000782:	2100      	movs	r1, #0
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <ErrorSound+0x6c>)
 8000786:	f003 fead 	bl	80044e4 <HAL_TIMEx_PWMN_Stop>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f001 fabe 	bl	8001d14 <HAL_GPIO_WritePin>

}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000110 	.word	0x20000110

080007a4 <SuccessSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the success sound on speaker connected on PA7
  * ******************************************************************************
  */
void SuccessSound()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f001 faae 	bl	8001d14 <HAL_GPIO_WritePin>
	uint8_t count = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	717b      	strb	r3, [r7, #5]

	if(count < 1)
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d114      	bne.n	80007ec <SuccessSound+0x48>
	{
		for(uint16_t freq = 2000; freq > 100; freq -= 70)
 80007c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c6:	80fb      	strh	r3, [r7, #6]
 80007c8:	e00a      	b.n	80007e0 <SuccessSound+0x3c>
		{
			changeSpeakerFrequency(&htim1, freq);		// set new frequency
 80007ca:	88fb      	ldrh	r3, [r7, #6]
 80007cc:	4619      	mov	r1, r3
 80007ce:	480f      	ldr	r0, [pc, #60]	; (800080c <SuccessSound+0x68>)
 80007d0:	f7ff feec 	bl	80005ac <changeSpeakerFrequency>
			HAL_Delay(35);								// delay for 25 milisecond
 80007d4:	2023      	movs	r0, #35	; 0x23
 80007d6:	f001 f829 	bl	800182c <HAL_Delay>
		for(uint16_t freq = 2000; freq > 100; freq -= 70)
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	3b46      	subs	r3, #70	; 0x46
 80007de:	80fb      	strh	r3, [r7, #6]
 80007e0:	88fb      	ldrh	r3, [r7, #6]
 80007e2:	2b64      	cmp	r3, #100	; 0x64
 80007e4:	d8f1      	bhi.n	80007ca <SuccessSound+0x26>
		}
		count++;
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	3301      	adds	r3, #1
 80007ea:	717b      	strb	r3, [r7, #5]
	}
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80007ec:	2100      	movs	r1, #0
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <SuccessSound+0x68>)
 80007f0:	f003 fe78 	bl	80044e4 <HAL_TIMEx_PWMN_Stop>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 fa89 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000110 	.word	0x20000110

08000810 <configurePassword>:
  * DESCRIPTION   : Asks master password and allows to overright new password at desired index to master
  *
  *******************************************************************************
  */
void configurePassword()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
	uint16_t tMasterPassword = 0,index = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	80fb      	strh	r3, [r7, #6]
 800081a:	2300      	movs	r3, #0
 800081c:	80bb      	strh	r3, [r7, #4]
	printf("Enter master password to configure password\n\r");
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <configurePassword+0xe0>)
 8000820:	f004 fe66 	bl	80054f0 <iprintf>
	scanf("%hu",&tMasterPassword);
 8000824:	1dbb      	adds	r3, r7, #6
 8000826:	4619      	mov	r1, r3
 8000828:	4832      	ldr	r0, [pc, #200]	; (80008f4 <configurePassword+0xe4>)
 800082a:	f004 fe73 	bl	8005514 <iscanf>

	if(tMasterPassword != MASTER_PASSWORD)
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 8000834:	d010      	beq.n	8000858 <configurePassword+0x48>
	{
		ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fc7b 	bl	8001132 <ssd1331_clear_screen>
		ssd1331_display_string(2, 2, "Wrong master password entered", FONT_1206, WHITE);
 800083c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	230c      	movs	r3, #12
 8000844:	4a2c      	ldr	r2, [pc, #176]	; (80008f8 <configurePassword+0xe8>)
 8000846:	2102      	movs	r1, #2
 8000848:	2002      	movs	r0, #2
 800084a:	f000 fc29 	bl	80010a0 <ssd1331_display_string>
		HAL_Delay(1500);								// delay for 25 milisecond
 800084e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000852:	f000 ffeb 	bl	800182c <HAL_Delay>
 8000856:	e048      	b.n	80008ea <configurePassword+0xda>
		return;
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f001 fa58 	bl	8001d14 <HAL_GPIO_WritePin>
	ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fc64 	bl	8001132 <ssd1331_clear_screen>
	ssd1331_display_string(2, 2, "In master mode --> configure password", FONT_1206, BLUE);
 800086a:	231f      	movs	r3, #31
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	230c      	movs	r3, #12
 8000870:	4a22      	ldr	r2, [pc, #136]	; (80008fc <configurePassword+0xec>)
 8000872:	2102      	movs	r1, #2
 8000874:	2002      	movs	r0, #2
 8000876:	f000 fc13 	bl	80010a0 <ssd1331_display_string>
	printf("Enter new password\n\r");
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <configurePassword+0xf0>)
 800087c:	f004 fe38 	bl	80054f0 <iprintf>
	scanf("%hu",&tMasterPassword);
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	4619      	mov	r1, r3
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <configurePassword+0xe4>)
 8000886:	f004 fe45 	bl	8005514 <iscanf>

	printf("Enter which password you want to replace from total 10 passwords\n\r");
 800088a:	481e      	ldr	r0, [pc, #120]	; (8000904 <configurePassword+0xf4>)
 800088c:	f004 fe30 	bl	80054f0 <iprintf>
	scanf("%hu",&index);
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4817      	ldr	r0, [pc, #92]	; (80008f4 <configurePassword+0xe4>)
 8000896:	f004 fe3d 	bl	8005514 <iscanf>

	if(index > 10)
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	2b0a      	cmp	r3, #10
 800089e:	d904      	bls.n	80008aa <configurePassword+0x9a>
	{
		UserConfiguredPasswd[MAX_PASSWORD_STORAGE-1] = tMasterPassword;
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	461a      	mov	r2, r3
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <configurePassword+0xf8>)
 80008a6:	625a      	str	r2, [r3, #36]	; 0x24
 80008a8:	e006      	b.n	80008b8 <configurePassword+0xa8>
	}
	else
	{
		UserConfiguredPasswd[index-1] = tMasterPassword;
 80008aa:	88fa      	ldrh	r2, [r7, #6]
 80008ac:	88bb      	ldrh	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4611      	mov	r1, r2
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <configurePassword+0xf8>)
 80008b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 80008b8:	2000      	movs	r0, #0
 80008ba:	f000 fc3a 	bl	8001132 <ssd1331_clear_screen>
	ssd1331_display_string(2, 2, "New password set successfully", FONT_1206, WHITE);
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	230c      	movs	r3, #12
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <configurePassword+0xfc>)
 80008c8:	2102      	movs	r1, #2
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 fbe8 	bl	80010a0 <ssd1331_display_string>
	HAL_Delay(1500);								// delay for 25 milisecond
 80008d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008d4:	f000 ffaa 	bl	800182c <HAL_Delay>

	printf("New Password Added Successfully\n\r");
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <configurePassword+0x100>)
 80008da:	f004 fe09 	bl	80054f0 <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2102      	movs	r1, #2
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f001 fa15 	bl	8001d14 <HAL_GPIO_WritePin>

}
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08006d94 	.word	0x08006d94
 80008f4:	08006dc4 	.word	0x08006dc4
 80008f8:	08006dc8 	.word	0x08006dc8
 80008fc:	08006de8 	.word	0x08006de8
 8000900:	08006e10 	.word	0x08006e10
 8000904:	08006e28 	.word	0x08006e28
 8000908:	20000000 	.word	0x20000000
 800090c:	08006e6c 	.word	0x08006e6c
 8000910:	08006e8c 	.word	0x08006e8c

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 ff12 	bl	8001742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f8f5 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f000 fa6f 	bl	8000e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000926:	f000 fa3d 	bl	8000da4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800092a:	f000 f951 	bl	8000bd0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800092e:	f000 f98d 	bl	8000c4c <MX_TIM1_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000932:	2100      	movs	r1, #0
 8000934:	4861      	ldr	r0, [pc, #388]	; (8000abc <main+0x1a8>)
 8000936:	f003 fd37 	bl	80043a8 <HAL_TIMEx_PWMN_Start>
  printf("\033[0H\033[0J");							//Clear serial console
 800093a:	4861      	ldr	r0, [pc, #388]	; (8000ac0 <main+0x1ac>)
 800093c:	f004 fdd8 	bl	80054f0 <iprintf>

  ssd1331_init();									//Init OLED library
 8000940:	f000 fc1c 	bl	800117c <ssd1331_init>
  ssd1331_clear_screen(BLACK);						//Clear OLED Screen
 8000944:	2000      	movs	r0, #0
 8000946:	f000 fbf4 	bl	8001132 <ssd1331_clear_screen>
  /* USER CODE BEGIN WHILE */
  USER_CHOICEOPTION_e choice;

	while (1)
	{
		changeSpeakerFrequency(&htim1, 0);			//Set new frequency
 800094a:	2100      	movs	r1, #0
 800094c:	485b      	ldr	r0, [pc, #364]	; (8000abc <main+0x1a8>)
 800094e:	f7ff fe2d 	bl	80005ac <changeSpeakerFrequency>
		printf(" 1)Enter Master Mode to Configure Password\n\r 2)Want to access system\n\r 3)Show all password\n\r");
 8000952:	485c      	ldr	r0, [pc, #368]	; (8000ac4 <main+0x1b0>)
 8000954:	f004 fdcc 	bl	80054f0 <iprintf>
		ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fbea 	bl	8001132 <ssd1331_clear_screen>
		ssd1331_display_string(1, 1, "Validate your  self via putty  to access system ", FONT_1206, GOLDEN);
 800095e:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	230c      	movs	r3, #12
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <main+0x1b4>)
 8000968:	2101      	movs	r1, #1
 800096a:	2001      	movs	r0, #1
 800096c:	f000 fb98 	bl	80010a0 <ssd1331_display_string>


		scanf("%hhu",&choice);						//Take input choice from user
 8000970:	1dbb      	adds	r3, r7, #6
 8000972:	4619      	mov	r1, r3
 8000974:	4855      	ldr	r0, [pc, #340]	; (8000acc <main+0x1b8>)
 8000976:	f004 fdcd 	bl	8005514 <iscanf>
		switch(choice)
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	2b03      	cmp	r3, #3
 800097e:	d048      	beq.n	8000a12 <main+0xfe>
 8000980:	2b03      	cmp	r3, #3
 8000982:	f300 8098 	bgt.w	8000ab6 <main+0x1a2>
 8000986:	2b01      	cmp	r3, #1
 8000988:	d002      	beq.n	8000990 <main+0x7c>
 800098a:	2b02      	cmp	r3, #2
 800098c:	d003      	beq.n	8000996 <main+0x82>
				break;
			}

			default:
			{
				break;
 800098e:	e092      	b.n	8000ab6 <main+0x1a2>
				configurePassword();
 8000990:	f7ff ff3e 	bl	8000810 <configurePassword>
				break;
 8000994:	e090      	b.n	8000ab8 <main+0x1a4>
				printf("Enter password to validate your Identity\n\r");
 8000996:	484e      	ldr	r0, [pc, #312]	; (8000ad0 <main+0x1bc>)
 8000998:	f004 fdaa 	bl	80054f0 <iprintf>
				scanf("%lu",&UserEnteredPasswd);
 800099c:	494d      	ldr	r1, [pc, #308]	; (8000ad4 <main+0x1c0>)
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <main+0x1c4>)
 80009a0:	f004 fdb8 	bl	8005514 <iscanf>
				if(!isPasswordMatched(UserEnteredPasswd))
 80009a4:	4b4b      	ldr	r3, [pc, #300]	; (8000ad4 <main+0x1c0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fddf 	bl	800056c <isPasswordMatched>
 80009ae:	4603      	mov	r3, r0
 80009b0:	f083 0301 	eor.w	r3, r3, #1
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d015      	beq.n	80009e6 <main+0xd2>
					ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fbb9 	bl	8001132 <ssd1331_clear_screen>
					ssd1331_display_string(2, 2, "Access denied", FONT_1206, RED);
 80009c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	230c      	movs	r3, #12
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <main+0x1c8>)
 80009ca:	2102      	movs	r1, #2
 80009cc:	2002      	movs	r0, #2
 80009ce:	f000 fb67 	bl	80010a0 <ssd1331_display_string>
					ErrorSound();
 80009d2:	f7ff feaf 	bl	8000734 <ErrorSound>
					HAL_Delay(2000);
 80009d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009da:	f000 ff27 	bl	800182c <HAL_Delay>
					printf("Access denied\n\r");
 80009de:	4840      	ldr	r0, [pc, #256]	; (8000ae0 <main+0x1cc>)
 80009e0:	f004 fd86 	bl	80054f0 <iprintf>
				break;
 80009e4:	e068      	b.n	8000ab8 <main+0x1a4>
					ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fba3 	bl	8001132 <ssd1331_clear_screen>
					ssd1331_display_string(2, 2, "Access granted", FONT_1206, GREEN);
 80009ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	230c      	movs	r3, #12
 80009f4:	4a3b      	ldr	r2, [pc, #236]	; (8000ae4 <main+0x1d0>)
 80009f6:	2102      	movs	r1, #2
 80009f8:	2002      	movs	r0, #2
 80009fa:	f000 fb51 	bl	80010a0 <ssd1331_display_string>
					SuccessSound();
 80009fe:	f7ff fed1 	bl	80007a4 <SuccessSound>
					HAL_Delay(2000);
 8000a02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a06:	f000 ff11 	bl	800182c <HAL_Delay>
					printf("Access granted\n\r");
 8000a0a:	4837      	ldr	r0, [pc, #220]	; (8000ae8 <main+0x1d4>)
 8000a0c:	f004 fd70 	bl	80054f0 <iprintf>
				break;
 8000a10:	e052      	b.n	8000ab8 <main+0x1a4>
				uint16_t tMasterPassword = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	80bb      	strh	r3, [r7, #4]
				printf("Enter master password to see all password\n\r");
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <main+0x1d8>)
 8000a18:	f004 fd6a 	bl	80054f0 <iprintf>
				scanf("%hu",&tMasterPassword);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4833      	ldr	r0, [pc, #204]	; (8000af0 <main+0x1dc>)
 8000a22:	f004 fd77 	bl	8005514 <iscanf>
				if(tMasterPassword != MASTER_PASSWORD)
 8000a26:	88bb      	ldrh	r3, [r7, #4]
 8000a28:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 8000a2c:	d010      	beq.n	8000a50 <main+0x13c>
					ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fb7f 	bl	8001132 <ssd1331_clear_screen>
					ssd1331_display_string(2, 2, "Wrong master password entered", FONT_1206, WHITE);
 8000a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <main+0x1e0>)
 8000a3e:	2102      	movs	r1, #2
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fb2d 	bl	80010a0 <ssd1331_display_string>
					HAL_Delay(1500);								// delay for 25 milisecond
 8000a46:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a4a:	f000 feef 	bl	800182c <HAL_Delay>
					break;
 8000a4e:	e033      	b.n	8000ab8 <main+0x1a4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2102      	movs	r1, #2
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f001 f95c 	bl	8001d14 <HAL_GPIO_WritePin>
				ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 fb68 	bl	8001132 <ssd1331_clear_screen>
				ssd1331_display_string(2, 2, "In master mode --> see password password on Putty", FONT_1206, BLUE);
 8000a62:	231f      	movs	r3, #31
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	230c      	movs	r3, #12
 8000a68:	4a23      	ldr	r2, [pc, #140]	; (8000af8 <main+0x1e4>)
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f000 fb17 	bl	80010a0 <ssd1331_display_string>
				printf("Stored passwords are [");
 8000a72:	4822      	ldr	r0, [pc, #136]	; (8000afc <main+0x1e8>)
 8000a74:	f004 fd3c 	bl	80054f0 <iprintf>
				for(uint8_t index = 0; index < MAX_PASSWORD_STORAGE; index++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	e00a      	b.n	8000a94 <main+0x180>
					printf(" %lu",UserConfiguredPasswd[index]);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <main+0x1ec>)
 8000a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a86:	4619      	mov	r1, r3
 8000a88:	481e      	ldr	r0, [pc, #120]	; (8000b04 <main+0x1f0>)
 8000a8a:	f004 fd31 	bl	80054f0 <iprintf>
				for(uint8_t index = 0; index < MAX_PASSWORD_STORAGE; index++)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	3301      	adds	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b09      	cmp	r3, #9
 8000a98:	d9f1      	bls.n	8000a7e <main+0x16a>
				printf("]\n\r");
 8000a9a:	481b      	ldr	r0, [pc, #108]	; (8000b08 <main+0x1f4>)
 8000a9c:	f004 fd28 	bl	80054f0 <iprintf>
				HAL_Delay(2000);
 8000aa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa4:	f000 fec2 	bl	800182c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2102      	movs	r1, #2
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f001 f930 	bl	8001d14 <HAL_GPIO_WritePin>
				break;
 8000ab4:	e000      	b.n	8000ab8 <main+0x1a4>
				break;
 8000ab6:	bf00      	nop
		changeSpeakerFrequency(&htim1, 0);			//Set new frequency
 8000ab8:	e747      	b.n	800094a <main+0x36>
 8000aba:	bf00      	nop
 8000abc:	20000110 	.word	0x20000110
 8000ac0:	08006eb0 	.word	0x08006eb0
 8000ac4:	08006ebc 	.word	0x08006ebc
 8000ac8:	08006f1c 	.word	0x08006f1c
 8000acc:	08006f50 	.word	0x08006f50
 8000ad0:	08006f58 	.word	0x08006f58
 8000ad4:	200001e4 	.word	0x200001e4
 8000ad8:	08006f84 	.word	0x08006f84
 8000adc:	08006f88 	.word	0x08006f88
 8000ae0:	08006f98 	.word	0x08006f98
 8000ae4:	08006fa8 	.word	0x08006fa8
 8000ae8:	08006fb8 	.word	0x08006fb8
 8000aec:	08006fcc 	.word	0x08006fcc
 8000af0:	08006dc4 	.word	0x08006dc4
 8000af4:	08006dc8 	.word	0x08006dc8
 8000af8:	08006ff8 	.word	0x08006ff8
 8000afc:	0800702c 	.word	0x0800702c
 8000b00:	20000000 	.word	0x20000000
 8000b04:	08007044 	.word	0x08007044
 8000b08:	0800704c 	.word	0x0800704c

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2244      	movs	r2, #68	; 0x44
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fd4f 	bl	80055be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b32:	f001 f925 	bl	8001d80 <HAL_PWREx_ControlVoltageScaling>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b3c:	f000 f9c4 	bl	8000ec8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b40:	f001 f900 	bl	8001d44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <SystemClock_Config+0xc0>)
 8000b4c:	f023 0318 	bic.w	r3, r3, #24
 8000b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b54:	2314      	movs	r3, #20
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b74:	2310      	movs	r3, #16
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f94f 	bl	8001e2c <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b94:	f000 f998 	bl	8000ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 fd4f 	bl	8002654 <HAL_RCC_ClockConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bbc:	f000 f984 	bl	8000ec8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bc0:	f002 f962 	bl	8002e88 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bc4:	bf00      	nop
 8000bc6:	3758      	adds	r7, #88	; 0x58
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bd6:	4a1c      	ldr	r2, [pc, #112]	; (8000c48 <MX_SPI1_Init+0x78>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000bee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c06:	2210      	movs	r2, #16
 8000c08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c1e:	2207      	movs	r2, #7
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_SPI1_Init+0x74>)
 8000c30:	f002 fa2c 	bl	800308c <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c3a:	f000 f945 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000ac 	.word	0x200000ac
 8000c48:	40013000 	.word	0x40013000

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	; 0x68
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]
 8000c7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	222c      	movs	r2, #44	; 0x2c
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 fc99 	bl	80055be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <MX_TIM1_Init+0x154>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cb8:	4838      	ldr	r0, [pc, #224]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000cba:	f002 fd63 	bl	8003784 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 f900 	bl	8000ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4831      	ldr	r0, [pc, #196]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000cd6:	f002 ff21 	bl	8003b1c <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ce0:	f000 f8f2 	bl	8000ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ce4:	482d      	ldr	r0, [pc, #180]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000ce6:	f002 fda4 	bl	8003832 <HAL_TIM_PWM_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000cf0:	f000 f8ea 	bl	8000ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4825      	ldr	r0, [pc, #148]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000d08:	f003 fc4a 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000d12:	f000 f8d9 	bl	8000ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d16:	2360      	movs	r3, #96	; 0x60
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d22:	2300      	movs	r3, #0
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d36:	2200      	movs	r2, #0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000d3c:	f002 fdda 	bl	80038f4 <HAL_TIM_PWM_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000d46:	f000 f8bf 	bl	8000ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000d80:	f003 fc74 	bl	800466c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d8a:	f000 f89d 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM1_Init+0x150>)
 8000d90:	f000 fb28 	bl	80013e4 <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3768      	adds	r7, #104	; 0x68
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000110 	.word	0x20000110
 8000da0:	40012c00 	.word	0x40012c00

08000da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000daa:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <MX_USART2_UART_Init+0x5c>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART2_UART_Init+0x58>)
 8000de8:	f003 fcdd 	bl	80047a6 <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000df2:	f000 f869 	bl	8000ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000015c 	.word	0x2000015c
 8000e00:	40004400 	.word	0x40004400

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a22      	ldr	r2, [pc, #136]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_GPIO_Init+0xbc>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f640 5102 	movw	r1, #3330	; 0xd02
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f000 ff52 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2178      	movs	r1, #120	; 0x78
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_GPIO_Init+0xc0>)
 8000e76:	f000 ff4d 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA8 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8000e7a:	f640 5302 	movw	r3, #3330	; 0xd02
 8000e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4619      	mov	r1, r3
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f000 fdd3 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000e9a:	2378      	movs	r3, #120	; 0x78
 8000e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 030c 	add.w	r3, r7, #12
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_GPIO_Init+0xc0>)
 8000eb2:	f000 fdc5 	bl	8001a40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb6:	bf00      	nop
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ecc:	b672      	cpsid	i
}
 8000ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x8>
	...

08000ed4 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000ee4:	79bb      	ldrb	r3, [r7, #6]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000eea:	2201      	movs	r2, #1
 8000eec:	2120      	movs	r1, #32
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <ssd1331_write_byte+0x60>)
 8000ef0:	f000 ff10 	bl	8001d14 <HAL_GPIO_WritePin>
 8000ef4:	e004      	b.n	8000f00 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2120      	movs	r1, #32
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <ssd1331_write_byte+0x60>)
 8000efc:	f000 ff0a 	bl	8001d14 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8000f00:	2200      	movs	r2, #0
 8000f02:	2110      	movs	r1, #16
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <ssd1331_write_byte+0x60>)
 8000f06:	f000 ff05 	bl	8001d14 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000f0a:	1df9      	adds	r1, r7, #7
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <ssd1331_write_byte+0x64>)
 8000f12:	f002 f95e 	bl	80031d2 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8000f16:	2201      	movs	r2, #1
 8000f18:	2110      	movs	r1, #16
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <ssd1331_write_byte+0x60>)
 8000f1c:	f000 fefa 	bl	8001d14 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000f20:	2201      	movs	r2, #1
 8000f22:	2120      	movs	r1, #32
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <ssd1331_write_byte+0x60>)
 8000f26:	f000 fef5 	bl	8001d14 <HAL_GPIO_WritePin>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	48000400 	.word	0x48000400
 8000f38:	200000ac 	.word	0x200000ac

08000f3c <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	460b      	mov	r3, r1
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b5f      	cmp	r3, #95	; 0x5f
 8000f52:	d82b      	bhi.n	8000fac <ssd1331_draw_point+0x70>
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	2b3f      	cmp	r3, #63	; 0x3f
 8000f58:	d828      	bhi.n	8000fac <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2015      	movs	r0, #21
 8000f5e:	f7ff ffb9 	bl	8000ed4 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ffb4 	bl	8000ed4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	205f      	movs	r0, #95	; 0x5f
 8000f70:	f7ff ffb0 	bl	8000ed4 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2075      	movs	r0, #117	; 0x75
 8000f78:	f7ff ffac 	bl	8000ed4 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ffa7 	bl	8000ed4 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000f86:	2100      	movs	r1, #0
 8000f88:	203f      	movs	r0, #63	; 0x3f
 8000f8a:	f7ff ffa3 	bl	8000ed4 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000f8e:	88bb      	ldrh	r3, [r7, #4]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff9b 	bl	8000ed4 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff95 	bl	8000ed4 <ssd1331_write_byte>
 8000faa:	e000      	b.n	8000fae <ssd1331_draw_point+0x72>
		return;
 8000fac:	bf00      	nop
}
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71bb      	strb	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	717b      	strb	r3, [r7, #5]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b5f      	cmp	r3, #95	; 0x5f
 8000fde:	d857      	bhi.n	8001090 <ssd1331_display_char+0xdc>
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe4:	d854      	bhi.n	8001090 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e04c      	b.n	8001086 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000fec:	793b      	ldrb	r3, [r7, #4]
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d10d      	bne.n	800100e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000ff2:	797b      	ldrb	r3, [r7, #5]
 8000ff4:	f1a3 0220 	sub.w	r2, r3, #32
 8000ff8:	7bf9      	ldrb	r1, [r7, #15]
 8000ffa:	4827      	ldr	r0, [pc, #156]	; (8001098 <ssd1331_display_char+0xe4>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4403      	add	r3, r0
 8001006:	440b      	add	r3, r1
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	737b      	strb	r3, [r7, #13]
 800100c:	e00c      	b.n	8001028 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 800100e:	793b      	ldrb	r3, [r7, #4]
 8001010:	2b10      	cmp	r3, #16
 8001012:	d109      	bne.n	8001028 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001014:	797b      	ldrb	r3, [r7, #5]
 8001016:	f1a3 0220 	sub.w	r2, r3, #32
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	491f      	ldr	r1, [pc, #124]	; (800109c <ssd1331_display_char+0xe8>)
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	440a      	add	r2, r1
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001028:	2300      	movs	r3, #0
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e025      	b.n	800107a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 800102e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001032:	2b00      	cmp	r3, #0
 8001034:	da06      	bge.n	8001044 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001036:	8c3a      	ldrh	r2, [r7, #32]
 8001038:	79b9      	ldrb	r1, [r7, #6]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff7d 	bl	8000f3c <ssd1331_draw_point>
 8001042:	e005      	b.n	8001050 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001044:	79b9      	ldrb	r1, [r7, #6]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2200      	movs	r2, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff76 	bl	8000f3c <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	3301      	adds	r3, #1
 800105a:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 800105c:	79ba      	ldrb	r2, [r7, #6]
 800105e:	7b3b      	ldrb	r3, [r7, #12]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	793b      	ldrb	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d105      	bne.n	8001074 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
				break;
 8001072:	e005      	b.n	8001080 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	3301      	adds	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	2b07      	cmp	r3, #7
 800107e:	d9d6      	bls.n	800102e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	3301      	adds	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	793b      	ldrb	r3, [r7, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3ae      	bcc.n	8000fec <ssd1331_display_char+0x38>
 800108e:	e000      	b.n	8001092 <ssd1331_display_char+0xde>
		return;
 8001090:	bf00      	nop
			}
		}
    }
}
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	0800705c 	.word	0x0800705c
 800109c:	080074d0 	.word	0x080074d0

080010a0 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	603a      	str	r2, [r7, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	460b      	mov	r3, r1
 80010b0:	71bb      	strb	r3, [r7, #6]
 80010b2:	4613      	mov	r3, r2
 80010b4:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b5f      	cmp	r3, #95	; 0x5f
 80010ba:	d836      	bhi.n	800112a <ssd1331_display_string+0x8a>
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b3f      	cmp	r3, #63	; 0x3f
 80010c0:	d833      	bhi.n	800112a <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 80010c2:	e02d      	b.n	8001120 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	085b      	lsrs	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dd12      	ble.n	80010fa <ssd1331_display_string+0x5a>
			chXpos = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	4413      	add	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	797b      	ldrb	r3, [r7, #5]
 80010e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dd06      	ble.n	80010fa <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f81c 	bl	8001132 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	797c      	ldrb	r4, [r7, #5]
 8001100:	79b9      	ldrb	r1, [r7, #6]
 8001102:	79f8      	ldrb	r0, [r7, #7]
 8001104:	8b3b      	ldrh	r3, [r7, #24]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	f7ff ff53 	bl	8000fb4 <ssd1331_display_char>
        chXpos += chSize / 2;
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	085b      	lsrs	r3, r3, #1
 8001112:	b2da      	uxtb	r2, r3
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	4413      	add	r3, r2
 8001118:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1cd      	bne.n	80010c4 <ssd1331_display_string+0x24>
 8001128:	e000      	b.n	800112c <ssd1331_display_string+0x8c>
		return;
 800112a:	bf00      	nop
    }
}
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}

08001132 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 800113c:	2300      	movs	r3, #0
 800113e:	81fb      	strh	r3, [r7, #14]
 8001140:	e013      	b.n	800116a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001142:	2300      	movs	r3, #0
 8001144:	81bb      	strh	r3, [r7, #12]
 8001146:	e00a      	b.n	800115e <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001148:	89bb      	ldrh	r3, [r7, #12]
 800114a:	b2db      	uxtb	r3, r3
 800114c:	89fa      	ldrh	r2, [r7, #14]
 800114e:	b2d1      	uxtb	r1, r2
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fef2 	bl	8000f3c <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001158:	89bb      	ldrh	r3, [r7, #12]
 800115a:	3301      	adds	r3, #1
 800115c:	81bb      	strh	r3, [r7, #12]
 800115e:	89bb      	ldrh	r3, [r7, #12]
 8001160:	2b5f      	cmp	r3, #95	; 0x5f
 8001162:	d9f1      	bls.n	8001148 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	3301      	adds	r3, #1
 8001168:	81fb      	strh	r3, [r7, #14]
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	2b3f      	cmp	r3, #63	; 0x3f
 800116e:	d9e8      	bls.n	8001142 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <ssd1331_init>:


void ssd1331_init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	4852      	ldr	r0, [pc, #328]	; (80012d0 <ssd1331_init+0x154>)
 8001186:	f000 fdc5 	bl	8001d14 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 800118a:	2201      	movs	r2, #1
 800118c:	2110      	movs	r1, #16
 800118e:	4850      	ldr	r0, [pc, #320]	; (80012d0 <ssd1331_init+0x154>)
 8001190:	f000 fdc0 	bl	8001d14 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001194:	2100      	movs	r1, #0
 8001196:	20ae      	movs	r0, #174	; 0xae
 8001198:	f7ff fe9c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 800119c:	2100      	movs	r1, #0
 800119e:	2081      	movs	r0, #129	; 0x81
 80011a0:	f7ff fe98 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 80011a4:	2100      	movs	r1, #0
 80011a6:	20ff      	movs	r0, #255	; 0xff
 80011a8:	f7ff fe94 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 80011ac:	2100      	movs	r1, #0
 80011ae:	2082      	movs	r0, #130	; 0x82
 80011b0:	f7ff fe90 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 80011b4:	2100      	movs	r1, #0
 80011b6:	20ff      	movs	r0, #255	; 0xff
 80011b8:	f7ff fe8c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 80011bc:	2100      	movs	r1, #0
 80011be:	2083      	movs	r0, #131	; 0x83
 80011c0:	f7ff fe88 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 80011c4:	2100      	movs	r1, #0
 80011c6:	20ff      	movs	r0, #255	; 0xff
 80011c8:	f7ff fe84 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 80011cc:	2100      	movs	r1, #0
 80011ce:	2087      	movs	r0, #135	; 0x87
 80011d0:	f7ff fe80 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 80011d4:	2100      	movs	r1, #0
 80011d6:	2006      	movs	r0, #6
 80011d8:	f7ff fe7c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 80011dc:	2100      	movs	r1, #0
 80011de:	208a      	movs	r0, #138	; 0x8a
 80011e0:	f7ff fe78 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80011e4:	2100      	movs	r1, #0
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f7ff fe74 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 80011ec:	2100      	movs	r1, #0
 80011ee:	208b      	movs	r0, #139	; 0x8b
 80011f0:	f7ff fe70 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f7ff fe6c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 80011fc:	2100      	movs	r1, #0
 80011fe:	208c      	movs	r0, #140	; 0x8c
 8001200:	f7ff fe68 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001204:	2100      	movs	r1, #0
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f7ff fe64 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 800120c:	2100      	movs	r1, #0
 800120e:	20a0      	movs	r0, #160	; 0xa0
 8001210:	f7ff fe60 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8001214:	2100      	movs	r1, #0
 8001216:	2072      	movs	r0, #114	; 0x72
 8001218:	f7ff fe5c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 800121c:	2100      	movs	r1, #0
 800121e:	20a1      	movs	r0, #161	; 0xa1
 8001220:	f7ff fe58 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001224:	2100      	movs	r1, #0
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff fe54 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 800122c:	2100      	movs	r1, #0
 800122e:	20a2      	movs	r0, #162	; 0xa2
 8001230:	f7ff fe50 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001234:	2100      	movs	r1, #0
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff fe4c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 800123c:	2100      	movs	r1, #0
 800123e:	20a4      	movs	r0, #164	; 0xa4
 8001240:	f7ff fe48 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001244:	2100      	movs	r1, #0
 8001246:	20a8      	movs	r0, #168	; 0xa8
 8001248:	f7ff fe44 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 800124c:	2100      	movs	r1, #0
 800124e:	203f      	movs	r0, #63	; 0x3f
 8001250:	f7ff fe40 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001254:	2100      	movs	r1, #0
 8001256:	20ad      	movs	r0, #173	; 0xad
 8001258:	f7ff fe3c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 800125c:	2100      	movs	r1, #0
 800125e:	208e      	movs	r0, #142	; 0x8e
 8001260:	f7ff fe38 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001264:	2100      	movs	r1, #0
 8001266:	20b0      	movs	r0, #176	; 0xb0
 8001268:	f7ff fe34 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 800126c:	2100      	movs	r1, #0
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff fe30 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001274:	2100      	movs	r1, #0
 8001276:	20b1      	movs	r0, #177	; 0xb1
 8001278:	f7ff fe2c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 800127c:	2100      	movs	r1, #0
 800127e:	2031      	movs	r0, #49	; 0x31
 8001280:	f7ff fe28 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001284:	2100      	movs	r1, #0
 8001286:	20b3      	movs	r0, #179	; 0xb3
 8001288:	f7ff fe24 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 800128c:	2100      	movs	r1, #0
 800128e:	20f0      	movs	r0, #240	; 0xf0
 8001290:	f7ff fe20 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001294:	2100      	movs	r1, #0
 8001296:	20bb      	movs	r0, #187	; 0xbb
 8001298:	f7ff fe1c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 800129c:	2100      	movs	r1, #0
 800129e:	203a      	movs	r0, #58	; 0x3a
 80012a0:	f7ff fe18 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 80012a4:	2100      	movs	r1, #0
 80012a6:	20be      	movs	r0, #190	; 0xbe
 80012a8:	f7ff fe14 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 80012ac:	2100      	movs	r1, #0
 80012ae:	203e      	movs	r0, #62	; 0x3e
 80012b0:	f7ff fe10 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 80012b4:	2100      	movs	r1, #0
 80012b6:	202e      	movs	r0, #46	; 0x2e
 80012b8:	f7ff fe0c 	bl	8000ed4 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 80012bc:	2100      	movs	r1, #0
 80012be:	20af      	movs	r0, #175	; 0xaf
 80012c0:	f7ff fe08 	bl	8000ed4 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff ff34 	bl	8001132 <ssd1331_clear_screen>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	48000400 	.word	0x48000400

080012d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_MspInit+0x44>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_MspInit+0x44>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6613      	str	r3, [r2, #96]	; 0x60
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_MspInit+0x44>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_MspInit+0x44>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a18      	ldr	r2, [pc, #96]	; (800139c <HAL_SPI_MspInit+0x80>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d129      	bne.n	8001392 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a11      	ldr	r2, [pc, #68]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_SPI_MspInit+0x84>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800136e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001380:	2305      	movs	r3, #5
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f000 fb57 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40013000 	.word	0x40013000
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_TIM_Base_MspInit+0x38>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10b      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_TIM_Base_MspInit+0x3c>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0x3c>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <HAL_TIM_Base_MspInit+0x3c>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40012c00 	.word	0x40012c00
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <HAL_TIM_MspPostInit+0x64>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d11c      	bne.n	8001440 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_TIM_MspPostInit+0x68>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_TIM_MspPostInit+0x68>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_MspPostInit+0x68>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f000 fb00 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b09e      	sub	sp, #120	; 0x78
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2254      	movs	r2, #84	; 0x54
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f004 f8a4 	bl	80055be <memset>
  if(huart->Instance==USART2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <HAL_UART_MspInit+0xcc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d148      	bne.n	8001512 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fb05 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001498:	f7ff fd16 	bl	8000ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_UART_MspInit+0xd0>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_UART_MspInit+0xd0>)
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a6:	6593      	str	r3, [r2, #88]	; 0x58
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_UART_MspInit+0xd0>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HAL_UART_MspInit+0xd0>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_UART_MspInit+0xd0>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_UART_MspInit+0xd0>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014cc:	2304      	movs	r3, #4
 80014ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014dc:	2307      	movs	r3, #7
 80014de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 faa9 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001500:	2303      	movs	r3, #3
 8001502:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f000 fa97 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3778      	adds	r7, #120	; 0x78
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40004400 	.word	0x40004400
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f93c 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29a      	uxth	r2, r3
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <_read+0x38>)
 8001594:	f003 f9df 	bl	8004956 <HAL_UART_Receive>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	607b      	str	r3, [r7, #4]

	return len;
 80015a4:	687b      	ldr	r3, [r7, #4]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000015c 	.word	0x2000015c

080015b4 <_write>:

int _write(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <_write+0x40>)
 80015d0:	f003 f937 	bl	8004842 <HAL_UART_Transmit>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d002      	beq.n	80015e4 <_write+0x30>
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d101      	bne.n	80015e8 <_write+0x34>
	{
		Error_Handler();
 80015e4:	f7ff fc70 	bl	8000ec8 <Error_Handler>
	}

	return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000015c 	.word	0x2000015c

080015f8 <_close>:



int _close(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	605a      	str	r2, [r3, #4]
	return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_isatty>:

int _isatty(int file)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
	return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f003 ffe4 	bl	800565c <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20010000 	.word	0x20010000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	200001e8 	.word	0x200001e8
 80016c8:	20000340 	.word	0x20000340

080016cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <LoopForever+0x6>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	; (8001730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LoopForever+0xe>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	; (800173c <LoopForever+0x16>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171e:	f003 ffa3 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001722:	f7ff f8f7 	bl	8000914 <main>

08001726 <LoopForever>:

LoopForever:
    b LoopForever
 8001726:	e7fe      	b.n	8001726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001728:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001734:	08007c68 	.word	0x08007c68
  ldr r2, =_sbss
 8001738:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800173c:	2000033c 	.word	0x2000033c

08001740 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_IRQHandler>

08001742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f943 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f80e 	bl	8001774 <HAL_InitTick>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e001      	b.n	8001768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001764:	f7ff fdb6 	bl	80012d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001768:	79fb      	ldrb	r3, [r7, #7]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_InitTick+0x6c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d023      	beq.n	80017d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_InitTick+0x70>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_InitTick+0x6c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f941 	bl	8001a26 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10f      	bne.n	80017ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b0f      	cmp	r3, #15
 80017ae:	d809      	bhi.n	80017c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b0:	2200      	movs	r2, #0
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	f000 f919 	bl	80019ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0x74>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e004      	b.n	80017d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e001      	b.n	80017d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000030 	.word	0x20000030
 80017e4:	20000028 	.word	0x20000028
 80017e8:	2000002c 	.word	0x2000002c

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000030 	.word	0x20000030
 8001810:	200001ec 	.word	0x200001ec

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	200001ec 	.word	0x200001ec

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000030 	.word	0x20000030

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff47 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff5c 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffb0 	bl	8001994 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	e148      	b.n	8001ce2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2101      	movs	r1, #1
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 813a 	beq.w	8001cdc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d005      	beq.n	8001a80 <HAL_GPIO_Init+0x40>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d130      	bne.n	8001ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	f003 0201 	and.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d017      	beq.n	8001b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	2203      	movs	r2, #3
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d123      	bne.n	8001b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	08da      	lsrs	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3208      	adds	r2, #8
 8001b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	6939      	ldr	r1, [r7, #16]
 8001b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0203 	and.w	r2, r3, #3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8094 	beq.w	8001cdc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b52      	ldr	r3, [pc, #328]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	4a51      	ldr	r2, [pc, #324]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bcc:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bf6:	d00d      	beq.n	8001c14 <HAL_GPIO_Init+0x1d4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a43      	ldr	r2, [pc, #268]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d007      	beq.n	8001c10 <HAL_GPIO_Init+0x1d0>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d101      	bne.n	8001c0c <HAL_GPIO_Init+0x1cc>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1d6>
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1d6>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1d6>
 8001c14:	2300      	movs	r3, #0
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c58:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5e:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c82:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cac:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd6:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f aeaf 	bne.w	8001a50 <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	807b      	strh	r3, [r7, #2]
 8001d20:	4613      	mov	r3, r2
 8001d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d24:	787b      	ldrb	r3, [r7, #1]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d32:	887a      	ldrh	r2, [r7, #2]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40007000 	.word	0x40007000

08001d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40007000 	.word	0x40007000

08001d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8e:	d130      	bne.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d9c:	d038      	beq.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da6:	4a1e      	ldr	r2, [pc, #120]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2232      	movs	r2, #50	; 0x32
 8001db4:	fb02 f303 	mul.w	r3, r2, r3
 8001db8:	4a1b      	ldr	r2, [pc, #108]	; (8001e28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9b      	lsrs	r3, r3, #18
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc4:	e002      	b.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd8:	d102      	bne.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f2      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dec:	d110      	bne.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e00f      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfe:	d007      	beq.n	8001e10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e08:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40007000 	.word	0x40007000
 8001e24:	20000028 	.word	0x20000028
 8001e28:	431bde83 	.word	0x431bde83

08001e2c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f000 bc02 	b.w	8002644 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e40:	4b96      	ldr	r3, [pc, #600]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4a:	4b94      	ldr	r3, [pc, #592]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80e4 	beq.w	800202a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4c>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	f040 808b 	bne.w	8001f86 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	f040 8087 	bne.w	8001f86 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x64>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e3d9      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_RCC_OscConfig+0x7e>
 8001ea0:	4b7e      	ldr	r3, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea8:	e005      	b.n	8001eb6 <HAL_RCC_OscConfig+0x8a>
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d223      	bcs.n	8001f02 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fd8c 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e3ba      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a72      	ldr	r2, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	496d      	ldr	r1, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eec:	4b6b      	ldr	r3, [pc, #428]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	4968      	ldr	r1, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
 8001f00:	e025      	b.n	8001f4e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f08:	f043 0308 	orr.w	r3, r3, #8
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4960      	ldr	r1, [pc, #384]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f20:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	495b      	ldr	r1, [pc, #364]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd4c 	bl	80029dc <RCC_SetFlashLatencyFromMSIRange>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e37a      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4e:	f000 fc81 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b51      	ldr	r3, [pc, #324]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	4950      	ldr	r1, [pc, #320]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a4e      	ldr	r2, [pc, #312]	; (80020a4 <HAL_RCC_OscConfig+0x278>)
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	; (80020a8 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fbfe 	bl	8001774 <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d052      	beq.n	8002028 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	e35e      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d032      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f8e:	4b43      	ldr	r3, [pc, #268]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a42      	ldr	r2, [pc, #264]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fc3b 	bl	8001814 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fc37 	bl	8001814 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e347      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b33      	ldr	r3, [pc, #204]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4930      	ldr	r1, [pc, #192]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fde:	4b2f      	ldr	r3, [pc, #188]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	492b      	ldr	r1, [pc, #172]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
 8001ff2:	e01a      	b.n	800202a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002000:	f7ff fc08 	bl	8001814 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002008:	f7ff fc04 	bl	8001814 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e314      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x1dc>
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002028:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d073      	beq.n	800211e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d005      	beq.n	8002048 <HAL_RCC_OscConfig+0x21c>
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d10e      	bne.n	8002060 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b03      	cmp	r3, #3
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_RCC_OscConfig+0x270>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d063      	beq.n	800211c <HAL_RCC_OscConfig+0x2f0>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d15f      	bne.n	800211c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2f1      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x24c>
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e025      	b.n	80020c4 <HAL_RCC_OscConfig+0x298>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d114      	bne.n	80020ac <HAL_RCC_OscConfig+0x280>
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a02      	ldr	r2, [pc, #8]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e013      	b.n	80020c4 <HAL_RCC_OscConfig+0x298>
 800209c:	40021000 	.word	0x40021000
 80020a0:	08007ac0 	.word	0x08007ac0
 80020a4:	20000028 	.word	0x20000028
 80020a8:	2000002c 	.word	0x2000002c
 80020ac:	4ba0      	ldr	r3, [pc, #640]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a9f      	ldr	r2, [pc, #636]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	4b9d      	ldr	r3, [pc, #628]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a9c      	ldr	r2, [pc, #624]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80020be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fba2 	bl	8001814 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fb9e 	bl	8001814 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e2ae      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	4b92      	ldr	r3, [pc, #584]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2a8>
 80020f2:	e014      	b.n	800211e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fb8e 	bl	8001814 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7ff fb8a 	bl	8001814 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	; 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e29a      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x2d0>
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d060      	beq.n	80021ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d005      	beq.n	800213c <HAL_RCC_OscConfig+0x310>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d119      	bne.n	800216a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d116      	bne.n	800216a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_OscConfig+0x328>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e277      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b76      	ldr	r3, [pc, #472]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	4973      	ldr	r1, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002168:	e040      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d023      	beq.n	80021ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002172:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7ff fb49 	bl	8001814 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002186:	f7ff fb45 	bl	8001814 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e255      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002198:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	495f      	ldr	r1, [pc, #380]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]
 80021b8:	e018      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b5d      	ldr	r3, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a5c      	ldr	r2, [pc, #368]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80021c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7ff fb25 	bl	8001814 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ce:	f7ff fb21 	bl	8001814 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e231      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d03c      	beq.n	8002272 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01c      	beq.n	800223a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002206:	4a4a      	ldr	r2, [pc, #296]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff fb00 	bl	8001814 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fafc 	bl	8001814 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e20c      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800222c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ef      	beq.n	8002218 <HAL_RCC_OscConfig+0x3ec>
 8002238:	e01b      	b.n	8002272 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800223c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002240:	4a3b      	ldr	r2, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002242:	f023 0301 	bic.w	r3, r3, #1
 8002246:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224a:	f7ff fae3 	bl	8001814 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002252:	f7ff fadf 	bl	8001814 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1ef      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002264:	4b32      	ldr	r3, [pc, #200]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ef      	bne.n	8002252 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80a6 	beq.w	80023cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	; 0x58
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a8:	2301      	movs	r3, #1
 80022aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_OscConfig+0x508>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d118      	bne.n	80022ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_OscConfig+0x508>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x508>)
 80022be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c4:	f7ff faa6 	bl	8001814 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022cc:	f7ff faa2 	bl	8001814 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e1b2      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_RCC_OscConfig+0x508>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d108      	bne.n	8002304 <HAL_RCC_OscConfig+0x4d8>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002302:	e029      	b.n	8002358 <HAL_RCC_OscConfig+0x52c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b05      	cmp	r3, #5
 800230a:	d115      	bne.n	8002338 <HAL_RCC_OscConfig+0x50c>
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002314:	f043 0304 	orr.w	r3, r3, #4
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x504>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800232c:	e014      	b.n	8002358 <HAL_RCC_OscConfig+0x52c>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	4a99      	ldr	r2, [pc, #612]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002348:	4b96      	ldr	r3, [pc, #600]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	4a95      	ldr	r2, [pc, #596]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d016      	beq.n	800238e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff fa58 	bl	8001814 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7ff fa54 	bl	8001814 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e162      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ed      	beq.n	8002368 <HAL_RCC_OscConfig+0x53c>
 800238c:	e015      	b.n	80023ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f7ff fa41 	bl	8001814 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7ff fa3d 	bl	8001814 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e14b      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ed      	bne.n	8002396 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	4a77      	ldr	r2, [pc, #476]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d03c      	beq.n	8002452 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e0:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80023e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023e6:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7ff fa10 	bl	8001814 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f8:	f7ff fa0c 	bl	8001814 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e11c      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240a:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800240c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0ef      	beq.n	80023f8 <HAL_RCC_OscConfig+0x5cc>
 8002418:	e01b      	b.n	8002452 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800241c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002420:	4a60      	ldr	r2, [pc, #384]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7ff f9f3 	bl	8001814 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002432:	f7ff f9ef 	bl	8001814 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0ff      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ef      	bne.n	8002432 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80f3 	beq.w	8002642 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	2b02      	cmp	r3, #2
 8002462:	f040 80c9 	bne.w	80025f8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002466:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	429a      	cmp	r2, r3
 8002478:	d12c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	3b01      	subs	r3, #1
 8002486:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d123      	bne.n	80024d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d11b      	bne.n	80024d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d113      	bne.n	80024d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	3b01      	subs	r3, #1
 80024ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d109      	bne.n	80024d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d06b      	beq.n	80025ac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d062      	beq.n	80025a0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0ac      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2d      	ldr	r2, [pc, #180]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 80024f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f6:	f7ff f98d 	bl	8001814 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7ff f989 	bl	8001814 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e099      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x77c>)
 8002522:	4013      	ands	r3, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800252c:	3a01      	subs	r2, #1
 800252e:	0112      	lsls	r2, r2, #4
 8002530:	4311      	orrs	r1, r2
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002536:	0212      	lsls	r2, r2, #8
 8002538:	4311      	orrs	r1, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800253e:	0852      	lsrs	r2, r2, #1
 8002540:	3a01      	subs	r2, #1
 8002542:	0552      	lsls	r2, r2, #21
 8002544:	4311      	orrs	r1, r2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800254a:	0852      	lsrs	r2, r2, #1
 800254c:	3a01      	subs	r2, #1
 800254e:	0652      	lsls	r2, r2, #25
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002556:	06d2      	lsls	r2, r2, #27
 8002558:	430a      	orrs	r2, r1
 800255a:	4912      	ldr	r1, [pc, #72]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002578:	f7ff f94c 	bl	8001814 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f948 	bl	8001814 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e058      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_OscConfig+0x778>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800259e:	e050      	b.n	8002642 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e04f      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d144      	bne.n	8002642 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a20      	ldr	r2, [pc, #128]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d0:	f7ff f920 	bl	8001814 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff f91c 	bl	8001814 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e02c      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	4b18      	ldr	r3, [pc, #96]	; (800264c <HAL_RCC_OscConfig+0x820>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x7ac>
 80025f6:	e024      	b.n	8002642 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d01f      	beq.n	800263e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_OscConfig+0x820>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x820>)
 8002604:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff f903 	bl	8001814 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002612:	f7ff f8ff 	bl	8001814 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e00f      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x820>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_OscConfig+0x820>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4905      	ldr	r1, [pc, #20]	; (800264c <HAL_RCC_OscConfig+0x820>)
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCC_OscConfig+0x824>)
 8002638:	4013      	ands	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
 800263c:	e001      	b.n	8002642 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	feeefffc 	.word	0xfeeefffc

08002654 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0e7      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002668:	4b75      	ldr	r3, [pc, #468]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d910      	bls.n	8002698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b72      	ldr	r3, [pc, #456]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4970      	ldr	r1, [pc, #448]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b6e      	ldr	r3, [pc, #440]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0cf      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d010      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d908      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b4:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4960      	ldr	r1, [pc, #384]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d04c      	beq.n	800276c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d121      	bne.n	800272a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0a6      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d115      	bne.n	800272a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e09a      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800270a:	4b4e      	ldr	r3, [pc, #312]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e08e      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271a:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e086      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 0203 	bic.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4943      	ldr	r1, [pc, #268]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7ff f86a 	bl	8001814 <HAL_GetTick>
 8002740:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7ff f866 	bl	8001814 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e06e      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 020c 	and.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	429a      	cmp	r2, r3
 800276a:	d1eb      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	429a      	cmp	r2, r3
 8002786:	d208      	bcs.n	800279a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	492b      	ldr	r1, [pc, #172]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d210      	bcs.n	80027ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	4923      	ldr	r1, [pc, #140]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <HAL_RCC_ClockConfig+0x1ec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e036      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4918      	ldr	r1, [pc, #96]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4910      	ldr	r1, [pc, #64]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002808:	f000 f824 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	490b      	ldr	r1, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1f4>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <HAL_RCC_ClockConfig+0x1f8>)
 8002826:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1fc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe ffa1 	bl	8001774 <HAL_InitTick>
 8002832:	4603      	mov	r3, r0
 8002834:	72fb      	strb	r3, [r7, #11]

  return status;
 8002836:	7afb      	ldrb	r3, [r7, #11]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	08007ac0 	.word	0x08007ac0
 800284c:	20000028 	.word	0x20000028
 8002850:	2000002c 	.word	0x2000002c

08002854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 030c 	and.w	r3, r3, #12
 800286a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_GetSysClockFreq+0x34>
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d121      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d11e      	bne.n	80028c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_RCC_GetSysClockFreq+0x10c>)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10d      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d102      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_GetSysClockFreq+0x110>)
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e004      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_RCC_GetSysClockFreq+0x114>)
 80028da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d134      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0xa6>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d003      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0xac>
 80028f8:	e005      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_GetSysClockFreq+0x110>)
 80028fc:	617b      	str	r3, [r7, #20]
      break;
 80028fe:	e005      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_GetSysClockFreq+0x114>)
 8002902:	617b      	str	r3, [r7, #20]
      break;
 8002904:	e002      	b.n	800290c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	617b      	str	r3, [r7, #20]
      break;
 800290a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	3301      	adds	r3, #1
 8002918:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	fb03 f202 	mul.w	r2, r3, r2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_RCC_GetSysClockFreq+0x108>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	0e5b      	lsrs	r3, r3, #25
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	3301      	adds	r3, #1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800294c:	69bb      	ldr	r3, [r7, #24]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	08007ad8 	.word	0x08007ad8
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200

0800296c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000028 	.word	0x20000028

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4904      	ldr	r1, [pc, #16]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08007ad0 	.word	0x08007ad0

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029b4:	f7ff ffda 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0adb      	lsrs	r3, r3, #11
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	08007ad0 	.word	0x08007ad0

080029dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029f4:	f7ff f9b6 	bl	8001d64 <HAL_PWREx_GetVoltageRange>
 80029f8:	6178      	str	r0, [r7, #20]
 80029fa:	e014      	b.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	4a24      	ldr	r2, [pc, #144]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	; 0x58
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a14:	f7ff f9a6 	bl	8001d64 <HAL_PWREx_GetVoltageRange>
 8002a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2c:	d10b      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	; 0x80
 8002a32:	d919      	bls.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2ba0      	cmp	r3, #160	; 0xa0
 8002a38:	d902      	bls.n	8002a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e013      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a40:	2301      	movs	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e010      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b80      	cmp	r3, #128	; 0x80
 8002a4a:	d902      	bls.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e00a      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d102      	bne.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a58:	2302      	movs	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e004      	b.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d101      	bne.n	8002a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a64:	2301      	movs	r3, #1
 8002a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 0207 	bic.w	r2, r3, #7
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40022000 	.word	0x40022000

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d031      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ac0:	d01a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ac2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ac6:	d814      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad0:	d10f      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a5c      	ldr	r2, [pc, #368]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ade:	e00c      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f9de 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af0:	e003      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	74fb      	strb	r3, [r7, #19]
      break;
 8002af6:	e000      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b00:	4b51      	ldr	r3, [pc, #324]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	494e      	ldr	r1, [pc, #312]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b16:	e001      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 809e 	beq.w	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	4a3f      	ldr	r2, [pc, #252]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b50:	4b3d      	ldr	r3, [pc, #244]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fe52 	bl	8001814 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe fe4e 	bl	8001814 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	74fb      	strb	r3, [r7, #19]
        break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d15a      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b9a:	4b2b      	ldr	r3, [pc, #172]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d019      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb6:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be2:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d016      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fe0e 	bl	8001814 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fe0a 	bl	8001814 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d902      	bls.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	74fb      	strb	r3, [r7, #19]
            break;
 8002c12:	e006      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ec      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c3e:	e009      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
 8002c44:	e006      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c54:	7c7b      	ldrb	r3, [r7, #17]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b8a      	ldr	r3, [pc, #552]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4a89      	ldr	r2, [pc, #548]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c72:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f023 0203 	bic.w	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4980      	ldr	r1, [pc, #512]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 020c 	bic.w	r2, r3, #12
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	4978      	ldr	r1, [pc, #480]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	496f      	ldr	r1, [pc, #444]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	4967      	ldr	r1, [pc, #412]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cfa:	4b62      	ldr	r3, [pc, #392]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	495e      	ldr	r1, [pc, #376]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	4956      	ldr	r1, [pc, #344]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d3e:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d028      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4945      	ldr	r1, [pc, #276]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d80:	4b40      	ldr	r3, [pc, #256]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a3f      	ldr	r2, [pc, #252]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8a:	60d3      	str	r3, [r2, #12]
 8002d8c:	e011      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f882 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	492d      	ldr	r1, [pc, #180]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ddc:	d106      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dde:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de8:	60d3      	str	r3, [r2, #12]
 8002dea:	e011      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f853 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01c      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2a:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d10c      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f830 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e78:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40021000 	.word	0x40021000

08002e88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb6:	4b74      	ldr	r3, [pc, #464]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec2:	4b71      	ldr	r3, [pc, #452]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10d      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eda:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d047      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e044      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d018      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0x86>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d825      	bhi.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0x62>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d009      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x74>
 8002f08:	e020      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0a:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e01a      	b.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2c:	e013      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f2e:	4b56      	ldr	r3, [pc, #344]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3a:	4b53      	ldr	r3, [pc, #332]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4a:	e006      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e004      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f62:	4b49      	ldr	r3, [pc, #292]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	430b      	orrs	r3, r1
 8002f78:	4943      	ldr	r1, [pc, #268]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d17c      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f84:	4b40      	ldr	r3, [pc, #256]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3f      	ldr	r2, [pc, #252]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fc40 	bl	8001814 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f96:	e009      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f98:	f7fe fc3c 	bl	8001814 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8002faa:	e005      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ef      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d15f      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d110      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b30      	ldr	r3, [pc, #192]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	06d2      	lsls	r2, r2, #27
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	492a      	ldr	r1, [pc, #168]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
 8002fe4:	e027      	b.n	8003036 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d112      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ff4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	0211      	lsls	r1, r2, #8
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6912      	ldr	r2, [r2, #16]
 8003002:	0852      	lsrs	r2, r2, #1
 8003004:	3a01      	subs	r2, #1
 8003006:	0552      	lsls	r2, r2, #21
 8003008:	430a      	orrs	r2, r1
 800300a:	491f      	ldr	r1, [pc, #124]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800300c:	4313      	orrs	r3, r2
 800300e:	610b      	str	r3, [r1, #16]
 8003010:	e011      	b.n	8003036 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800301a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	0211      	lsls	r1, r2, #8
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6952      	ldr	r2, [r2, #20]
 8003028:	0852      	lsrs	r2, r2, #1
 800302a:	3a01      	subs	r2, #1
 800302c:	0652      	lsls	r2, r2, #25
 800302e:	430a      	orrs	r2, r1
 8003030:	4915      	ldr	r1, [pc, #84]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003040:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fe fbe7 	bl	8001814 <HAL_GetTick>
 8003046:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003048:	e009      	b.n	800305e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304a:	f7fe fbe3 	bl	8001814 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d902      	bls.n	800305e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	73fb      	strb	r3, [r7, #15]
          break;
 800305c:	e005      	b.n	800306a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ef      	beq.n	800304a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	4903      	ldr	r1, [pc, #12]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307a:	4313      	orrs	r3, r2
 800307c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e095      	b.n	80031ca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ae:	d009      	beq.n	80030c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
 80030b6:	e005      	b.n	80030c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe f91c 	bl	800131c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003104:	d902      	bls.n	800310c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e002      	b.n	8003112 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800310c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003110:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800311a:	d007      	beq.n	800312c <HAL_SPI_Init+0xa0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003124:	d002      	beq.n	800312c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	ea42 0103 	orr.w	r1, r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	f003 0204 	and.w	r2, r3, #4
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b088      	sub	sp, #32
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_SPI_Transmit+0x22>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e15f      	b.n	80034b4 <HAL_SPI_Transmit+0x2e2>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031fc:	f7fe fb0a 	bl	8001814 <HAL_GetTick>
 8003200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d002      	beq.n	8003218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003212:	2302      	movs	r3, #2
 8003214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003216:	e148      	b.n	80034aa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_Transmit+0x52>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003228:	e13f      	b.n	80034aa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88fa      	ldrh	r2, [r7, #6]
 8003248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003274:	d10f      	bne.n	8003296 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d007      	beq.n	80032b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032bc:	d94f      	bls.n	800335e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_Transmit+0xfa>
 80032c6:	8afb      	ldrh	r3, [r7, #22]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d142      	bne.n	8003352 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032f0:	e02f      	b.n	8003352 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d112      	bne.n	8003326 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003324:	e015      	b.n	8003352 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003326:	f7fe fa75 	bl	8001814 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d803      	bhi.n	800333e <HAL_SPI_Transmit+0x16c>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d102      	bne.n	8003344 <HAL_SPI_Transmit+0x172>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003350:	e0ab      	b.n	80034aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ca      	bne.n	80032f2 <HAL_SPI_Transmit+0x120>
 800335c:	e080      	b.n	8003460 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_SPI_Transmit+0x19a>
 8003366:	8afb      	ldrh	r3, [r7, #22]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d174      	bne.n	8003456 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d912      	bls.n	800339c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b02      	subs	r3, #2
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800339a:	e05c      	b.n	8003456 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	330c      	adds	r3, #12
 80033a6:	7812      	ldrb	r2, [r2, #0]
 80033a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033c2:	e048      	b.n	8003456 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d12b      	bne.n	800342a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d912      	bls.n	8003402 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b02      	subs	r3, #2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003400:	e029      	b.n	8003456 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003428:	e015      	b.n	8003456 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342a:	f7fe f9f3 	bl	8001814 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d803      	bhi.n	8003442 <HAL_SPI_Transmit+0x270>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003440:	d102      	bne.n	8003448 <HAL_SPI_Transmit+0x276>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003454:	e029      	b.n	80034aa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1b1      	bne.n	80033c4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f947 	bl	80036f8 <SPI_EndRxTxTransaction>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77fb      	strb	r3, [r7, #31]
 80034a0:	e003      	b.n	80034aa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034cc:	f7fe f9a2 	bl	8001814 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034dc:	f7fe f99a 	bl	8001814 <HAL_GetTick>
 80034e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	015b      	lsls	r3, r3, #5
 80034e8:	0d1b      	lsrs	r3, r3, #20
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	fb02 f303 	mul.w	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f2:	e054      	b.n	800359e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fa:	d050      	beq.n	800359e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034fc:	f7fe f98a 	bl	8001814 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	429a      	cmp	r2, r3
 800350a:	d902      	bls.n	8003512 <SPI_WaitFlagStateUntilTimeout+0x56>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d13d      	bne.n	800358e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352a:	d111      	bne.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x94>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003534:	d004      	beq.n	8003540 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353e:	d107      	bne.n	8003550 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003558:	d10f      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e017      	b.n	80035be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3b01      	subs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d19b      	bne.n	80034f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000028 	.word	0x20000028

080035cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035de:	f7fe f919 	bl	8001814 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035ee:	f7fe f911 	bl	8001814 <HAL_GetTick>
 80035f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	330c      	adds	r3, #12
 80035fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035fc:	4b3d      	ldr	r3, [pc, #244]	; (80036f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00da      	lsls	r2, r3, #3
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	0d1b      	lsrs	r3, r3, #20
 800360c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003614:	e060      	b.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800361c:	d107      	bne.n	800362e <SPI_WaitFifoStateUntilTimeout+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d104      	bne.n	800362e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800362c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d050      	beq.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003636:	f7fe f8ed 	bl	8001814 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d902      	bls.n	800364c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d13d      	bne.n	80036c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800365a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003664:	d111      	bne.n	800368a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366e:	d004      	beq.n	800367a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003678:	d107      	bne.n	800368a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003692:	d10f      	bne.n	80036b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e010      	b.n	80036ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d196      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000028 	.word	0x20000028

080036f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2200      	movs	r2, #0
 800370c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7ff ff5b 	bl	80035cc <SPI_WaitFifoStateUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003720:	f043 0220 	orr.w	r2, r3, #32
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e027      	b.n	800377c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fec0 	bl	80034bc <SPI_WaitFlagStateUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003746:	f043 0220 	orr.w	r2, r3, #32
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e014      	b.n	800377c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7ff ff34 	bl	80035cc <SPI_WaitFifoStateUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d007      	beq.n	800377a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e000      	b.n	800377c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e049      	b.n	800382a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fdfa 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f000 fa74 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e049      	b.n	80038d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f841 	bl	80038e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f000 fa1d 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800390e:	2302      	movs	r3, #2
 8003910:	e0ff      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b14      	cmp	r3, #20
 800391e:	f200 80f0 	bhi.w	8003b02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003922:	a201      	add	r2, pc, #4	; (adr r2, 8003928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	0800397d 	.word	0x0800397d
 800392c:	08003b03 	.word	0x08003b03
 8003930:	08003b03 	.word	0x08003b03
 8003934:	08003b03 	.word	0x08003b03
 8003938:	080039bd 	.word	0x080039bd
 800393c:	08003b03 	.word	0x08003b03
 8003940:	08003b03 	.word	0x08003b03
 8003944:	08003b03 	.word	0x08003b03
 8003948:	080039ff 	.word	0x080039ff
 800394c:	08003b03 	.word	0x08003b03
 8003950:	08003b03 	.word	0x08003b03
 8003954:	08003b03 	.word	0x08003b03
 8003958:	08003a3f 	.word	0x08003a3f
 800395c:	08003b03 	.word	0x08003b03
 8003960:	08003b03 	.word	0x08003b03
 8003964:	08003b03 	.word	0x08003b03
 8003968:	08003a81 	.word	0x08003a81
 800396c:	08003b03 	.word	0x08003b03
 8003970:	08003b03 	.word	0x08003b03
 8003974:	08003b03 	.word	0x08003b03
 8003978:	08003ac1 	.word	0x08003ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9f8 	bl	8003d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e0a5      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa54 	bl	8003e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e084      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 faad 	bl	8003f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e064      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fb05 	bl	8004054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e043      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb42 	bl	8004110 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0208 	orr.w	r2, r2, #8
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003abe:	e023      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fb7a 	bl	80041c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop

08003b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIM_ConfigClockSource+0x1c>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0b6      	b.n	8003ca6 <HAL_TIM_ConfigClockSource+0x18a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d03e      	beq.n	8003bf4 <HAL_TIM_ConfigClockSource+0xd8>
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	f200 8087 	bhi.w	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	f000 8086 	beq.w	8003c92 <HAL_TIM_ConfigClockSource+0x176>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d87f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d01a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xaa>
 8003b90:	2b70      	cmp	r3, #112	; 0x70
 8003b92:	d87b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d050      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x11e>
 8003b98:	2b60      	cmp	r3, #96	; 0x60
 8003b9a:	d877      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d03c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0xfe>
 8003ba0:	2b50      	cmp	r3, #80	; 0x50
 8003ba2:	d873      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d058      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x13e>
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d86f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d064      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15e>
 8003bb0:	2b30      	cmp	r3, #48	; 0x30
 8003bb2:	d86b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d060      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15e>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d867      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05c      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15e>
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d05a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15e>
 8003bc4:	e062      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd6:	f000 fbc7 	bl	8004368 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	609a      	str	r2, [r3, #8]
      break;
 8003bf2:	e04f      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c04:	f000 fbb0 	bl	8004368 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c16:	609a      	str	r2, [r3, #8]
      break;
 8003c18:	e03c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 fb24 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2150      	movs	r1, #80	; 0x50
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fb7d 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003c38:	e02c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 fb43 	bl	80042d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2160      	movs	r1, #96	; 0x60
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fb6d 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003c58:	e01c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fb04 	bl	8004274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb5d 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003c78:	e00c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 fb54 	bl	8004332 <TIM_ITRx_SetConfig>
      break;
 8003c8a:	e003      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e000      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x20>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <TIM_Base_SetConfig+0xc4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0xa0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xa0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <TIM_Base_SetConfig+0xc4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40014400 	.word	0x40014400

08003d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0201 	bic.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0303 	bic.w	r3, r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0302 	bic.w	r3, r3, #2
 8003dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a24      	ldr	r2, [pc, #144]	; (8003e64 <TIM_OC1_SetConfig+0xec>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d007      	beq.n	8003de8 <TIM_OC1_SetConfig+0x70>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a23      	ldr	r2, [pc, #140]	; (8003e68 <TIM_OC1_SetConfig+0xf0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC1_SetConfig+0x70>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <TIM_OC1_SetConfig+0xf4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10c      	bne.n	8003e02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0308 	bic.w	r3, r3, #8
 8003dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <TIM_OC1_SetConfig+0xec>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_OC1_SetConfig+0xa2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <TIM_OC1_SetConfig+0xf0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_OC1_SetConfig+0xa2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <TIM_OC1_SetConfig+0xf4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d111      	bne.n	8003e3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40014000 	.word	0x40014000
 8003e6c:	40014400 	.word	0x40014400

08003e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0320 	bic.w	r3, r3, #32
 8003ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a22      	ldr	r2, [pc, #136]	; (8003f58 <TIM_OC2_SetConfig+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10d      	bne.n	8003ef0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_OC2_SetConfig+0xe8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <TIM_OC2_SetConfig+0x98>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <TIM_OC2_SetConfig+0xec>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_OC2_SetConfig+0x98>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <TIM_OC2_SetConfig+0xf0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d113      	bne.n	8003f30 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a21      	ldr	r2, [pc, #132]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10d      	bne.n	8003fe2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <TIM_OC3_SetConfig+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_OC3_SetConfig+0x96>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <TIM_OC3_SetConfig+0xe8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC3_SetConfig+0x96>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <TIM_OC3_SetConfig+0xec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d113      	bne.n	8004022 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	621a      	str	r2, [r3, #32]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40014000 	.word	0x40014000
 8004050:	40014400 	.word	0x40014400

08004054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a14      	ldr	r2, [pc, #80]	; (8004104 <TIM_OC4_SetConfig+0xb0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d007      	beq.n	80040c8 <TIM_OC4_SetConfig+0x74>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <TIM_OC4_SetConfig+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_OC4_SetConfig+0x74>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a12      	ldr	r2, [pc, #72]	; (800410c <TIM_OC4_SetConfig+0xb8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d109      	bne.n	80040dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	621a      	str	r2, [r3, #32]
}
 80040f6:	bf00      	nop
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400

08004110 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004154:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC5_SetConfig+0xa4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <TIM_OC5_SetConfig+0x6a>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <TIM_OC5_SetConfig+0xa8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d003      	beq.n	800417a <TIM_OC5_SetConfig+0x6a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <TIM_OC5_SetConfig+0xac>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d109      	bne.n	800418e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40012c00 	.word	0x40012c00
 80041b8:	40014000 	.word	0x40014000
 80041bc:	40014400 	.word	0x40014400

080041c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	051b      	lsls	r3, r3, #20
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a14      	ldr	r2, [pc, #80]	; (8004268 <TIM_OC6_SetConfig+0xa8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC6_SetConfig+0x6c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a13      	ldr	r2, [pc, #76]	; (800426c <TIM_OC6_SetConfig+0xac>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC6_SetConfig+0x6c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <TIM_OC6_SetConfig+0xb0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d109      	bne.n	8004240 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	029b      	lsls	r3, r3, #10
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400

08004274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 030a 	bic.w	r3, r3, #10
 80042b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f023 0210 	bic.w	r2, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	031b      	lsls	r3, r3, #12
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	609a      	str	r2, [r3, #8]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	431a      	orrs	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_TIMEx_PWMN_Start+0x24>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e022      	b.n	8004412 <HAL_TIMEx_PWMN_Start+0x6a>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d109      	bne.n	80043e6 <HAL_TIMEx_PWMN_Start+0x3e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e015      	b.n	8004412 <HAL_TIMEx_PWMN_Start+0x6a>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d109      	bne.n	8004400 <HAL_TIMEx_PWMN_Start+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e008      	b.n	8004412 <HAL_TIMEx_PWMN_Start+0x6a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e05a      	b.n	80044d0 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <HAL_TIMEx_PWMN_Start+0x82>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	e013      	b.n	8004452 <HAL_TIMEx_PWMN_Start+0xaa>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d104      	bne.n	800443a <HAL_TIMEx_PWMN_Start+0x92>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004438:	e00b      	b.n	8004452 <HAL_TIMEx_PWMN_Start+0xaa>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d104      	bne.n	800444a <HAL_TIMEx_PWMN_Start+0xa2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004448:	e003      	b.n	8004452 <HAL_TIMEx_PWMN_Start+0xaa>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2204      	movs	r2, #4
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f97e 	bl	800475c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <HAL_TIMEx_PWMN_Start+0x130>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d009      	beq.n	800448e <HAL_TIMEx_PWMN_Start+0xe6>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004482:	d004      	beq.n	800448e <HAL_TIMEx_PWMN_Start+0xe6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a14      	ldr	r2, [pc, #80]	; (80044dc <HAL_TIMEx_PWMN_Start+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d115      	bne.n	80044ba <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_TIMEx_PWMN_Start+0x138>)
 8004496:	4013      	ands	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2b06      	cmp	r3, #6
 800449e:	d015      	beq.n	80044cc <HAL_TIMEx_PWMN_Start+0x124>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d011      	beq.n	80044cc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b8:	e008      	b.n	80044cc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0201 	orr.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e000      	b.n	80044ce <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	40014000 	.word	0x40014000
 80044e0:	00010007 	.word	0x00010007

080044e4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	6839      	ldr	r1, [r7, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f930 	bl	800475c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	f241 1311 	movw	r3, #4369	; 0x1111
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <HAL_TIMEx_PWMN_Stop+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	f240 4344 	movw	r3, #1092	; 0x444
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_TIMEx_PWMN_Stop+0x48>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	f241 1311 	movw	r3, #4369	; 0x1111
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10f      	bne.n	800455c <HAL_TIMEx_PWMN_Stop+0x78>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	f240 4344 	movw	r3, #1092	; 0x444
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <HAL_TIMEx_PWMN_Stop+0x78>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_TIMEx_PWMN_Stop+0x88>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800456a:	e013      	b.n	8004594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b04      	cmp	r3, #4
 8004570:	d104      	bne.n	800457c <HAL_TIMEx_PWMN_Stop+0x98>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800457a:	e00b      	b.n	8004594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b08      	cmp	r3, #8
 8004580:	d104      	bne.n	800458c <HAL_TIMEx_PWMN_Stop+0xa8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800458a:	e003      	b.n	8004594 <HAL_TIMEx_PWMN_Stop+0xb0>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e04f      	b.n	8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a21      	ldr	r2, [pc, #132]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a14      	ldr	r2, [pc, #80]	; (8004664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004620:	d004      	beq.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a10      	ldr	r2, [pc, #64]	; (8004668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10c      	bne.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40012c00 	.word	0x40012c00
 8004668:	40014000 	.word	0x40014000

0800466c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e060      	b.n	800474a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a14      	ldr	r2, [pc, #80]	; (8004758 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d115      	bne.n	8004738 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	051b      	lsls	r3, r3, #20
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00

0800475c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	2204      	movs	r2, #4
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a1a      	ldr	r2, [r3, #32]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	43db      	mvns	r3, r3
 800477e:	401a      	ands	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	431a      	orrs	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	621a      	str	r2, [r3, #32]
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e040      	b.n	800483a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fc fe41 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2224      	movs	r2, #36	; 0x24
 80047d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fba7 	bl	8004f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f978 	bl	8004ae8 <UART_SetConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e01b      	b.n	800483a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004810:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004820:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fc26 	bl	8005084 <UART_CheckIdleState>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b08a      	sub	sp, #40	; 0x28
 8004846:	af02      	add	r7, sp, #8
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	603b      	str	r3, [r7, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	2b20      	cmp	r3, #32
 8004858:	d178      	bne.n	800494c <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UART_Transmit+0x24>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e071      	b.n	800494e <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2221      	movs	r2, #33	; 0x21
 8004876:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004878:	f7fc ffcc 	bl	8001814 <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	88fa      	ldrh	r2, [r7, #6]
 8004882:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	88fa      	ldrh	r2, [r7, #6]
 800488a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d108      	bne.n	80048aa <HAL_UART_Transmit+0x68>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	e003      	b.n	80048b2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b2:	e030      	b.n	8004916 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fc88 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e03c      	b.n	800494e <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048e6:	b292      	uxth	r2, r2
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	3302      	adds	r3, #2
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e008      	b.n	8004904 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	b292      	uxth	r2, r2
 80048fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3301      	adds	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1c8      	bne.n	80048b4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2200      	movs	r2, #0
 800492a:	2140      	movs	r1, #64	; 0x40
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 fc51 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e005      	b.n	800494e <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800496c:	2b20      	cmp	r3, #32
 800496e:	f040 80b6 	bne.w	8004ade <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_UART_Receive+0x28>
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0ae      	b.n	8004ae0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2222      	movs	r2, #34	; 0x22
 800498e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004998:	f7fc ff3c 	bl	8001814 <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	88fa      	ldrh	r2, [r7, #6]
 80049aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d10e      	bne.n	80049d6 <HAL_UART_Receive+0x80>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <HAL_UART_Receive+0x76>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80049c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ca:	e02d      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049d4:	e028      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <HAL_UART_Receive+0xa4>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_UART_Receive+0x9a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049ee:	e01b      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	227f      	movs	r2, #127	; 0x7f
 80049f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80049f8:	e016      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a02:	d10d      	bne.n	8004a20 <HAL_UART_Receive+0xca>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_UART_Receive+0xc0>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	227f      	movs	r2, #127	; 0x7f
 8004a10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a14:	e008      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	223f      	movs	r2, #63	; 0x3f
 8004a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a1e:	e003      	b.n	8004a28 <HAL_UART_Receive+0xd2>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a2e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a38:	d108      	bne.n	8004a4c <HAL_UART_Receive+0xf6>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	e003      	b.n	8004a54 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004a54:	e037      	b.n	8004ac6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2120      	movs	r1, #32
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fbb7 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e033      	b.n	8004ae0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10c      	bne.n	8004a98 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	8a7b      	ldrh	r3, [r7, #18]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	3302      	adds	r3, #2
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	e00d      	b.n	8004ab4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	8a7b      	ldrh	r3, [r7, #18]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1c1      	bne.n	8004a56 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
  }
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b08a      	sub	sp, #40	; 0x28
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4bb4      	ldr	r3, [pc, #720]	; (8004de8 <UART_SetConfig+0x300>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4aa9      	ldr	r2, [pc, #676]	; (8004dec <UART_SetConfig+0x304>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b50:	4313      	orrs	r3, r2
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4aa0      	ldr	r2, [pc, #640]	; (8004df0 <UART_SetConfig+0x308>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d126      	bne.n	8004bc0 <UART_SetConfig+0xd8>
 8004b72:	4ba0      	ldr	r3, [pc, #640]	; (8004df4 <UART_SetConfig+0x30c>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d81b      	bhi.n	8004bb8 <UART_SetConfig+0xd0>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <UART_SetConfig+0xa0>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9e:	e080      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba6:	e07c      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bae:	e078      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004bb0:	2308      	movs	r3, #8
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb6:	e074      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004bb8:	2310      	movs	r3, #16
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e070      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a8c      	ldr	r2, [pc, #560]	; (8004df8 <UART_SetConfig+0x310>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d138      	bne.n	8004c3c <UART_SetConfig+0x154>
 8004bca:	4b8a      	ldr	r3, [pc, #552]	; (8004df4 <UART_SetConfig+0x30c>)
 8004bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d82d      	bhi.n	8004c34 <UART_SetConfig+0x14c>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <UART_SetConfig+0xf8>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c35 	.word	0x08004c35
 8004be8:	08004c35 	.word	0x08004c35
 8004bec:	08004c35 	.word	0x08004c35
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004c35 	.word	0x08004c35
 8004bf8:	08004c35 	.word	0x08004c35
 8004bfc:	08004c35 	.word	0x08004c35
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	08004c35 	.word	0x08004c35
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1a:	e042      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e03e      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c24:	2304      	movs	r3, #4
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e03a      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e036      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c34:	2310      	movs	r3, #16
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e032      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6a      	ldr	r2, [pc, #424]	; (8004dec <UART_SetConfig+0x304>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d12a      	bne.n	8004c9c <UART_SetConfig+0x1b4>
 8004c46:	4b6b      	ldr	r3, [pc, #428]	; (8004df4 <UART_SetConfig+0x30c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c54:	d01a      	beq.n	8004c8c <UART_SetConfig+0x1a4>
 8004c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5a:	d81b      	bhi.n	8004c94 <UART_SetConfig+0x1ac>
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d00c      	beq.n	8004c7c <UART_SetConfig+0x194>
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d815      	bhi.n	8004c94 <UART_SetConfig+0x1ac>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x18c>
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d008      	beq.n	8004c84 <UART_SetConfig+0x19c>
 8004c72:	e00f      	b.n	8004c94 <UART_SetConfig+0x1ac>
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7a:	e012      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e00e      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e00a      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e006      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e002      	b.n	8004ca2 <UART_SetConfig+0x1ba>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a51      	ldr	r2, [pc, #324]	; (8004dec <UART_SetConfig+0x304>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d17a      	bne.n	8004da2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d824      	bhi.n	8004cfe <UART_SetConfig+0x216>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <UART_SetConfig+0x1d4>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004cff 	.word	0x08004cff
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cef 	.word	0x08004cef
 8004cd0:	08004cff 	.word	0x08004cff
 8004cd4:	08004cff 	.word	0x08004cff
 8004cd8:	08004cff 	.word	0x08004cff
 8004cdc:	08004cf7 	.word	0x08004cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fd fe50 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	61f8      	str	r0, [r7, #28]
        break;
 8004ce6:	e010      	b.n	8004d0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce8:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <UART_SetConfig+0x314>)
 8004cea:	61fb      	str	r3, [r7, #28]
        break;
 8004cec:	e00d      	b.n	8004d0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cee:	f7fd fdb1 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8004cf2:	61f8      	str	r0, [r7, #28]
        break;
 8004cf4:	e009      	b.n	8004d0a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfa:	61fb      	str	r3, [r7, #28]
        break;
 8004cfc:	e005      	b.n	8004d0a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 8107 	beq.w	8004f20 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	4413      	add	r3, r2
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d305      	bcc.n	8004d2e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d903      	bls.n	8004d36 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d34:	e0f4      	b.n	8004f20 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	461c      	mov	r4, r3
 8004d3c:	4615      	mov	r5, r2
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	022b      	lsls	r3, r5, #8
 8004d48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d4c:	0222      	lsls	r2, r4, #8
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	6849      	ldr	r1, [r1, #4]
 8004d52:	0849      	lsrs	r1, r1, #1
 8004d54:	2000      	movs	r0, #0
 8004d56:	4688      	mov	r8, r1
 8004d58:	4681      	mov	r9, r0
 8004d5a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d5e:	eb43 0b09 	adc.w	fp, r3, r9
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d70:	4650      	mov	r0, sl
 8004d72:	4659      	mov	r1, fp
 8004d74:	f7fb fa7c 	bl	8000270 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d86:	d308      	bcc.n	8004d9a <UART_SetConfig+0x2b2>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d204      	bcs.n	8004d9a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	e0c2      	b.n	8004f20 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004da0:	e0be      	b.n	8004f20 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004daa:	d16a      	bne.n	8004e82 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004dac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d834      	bhi.n	8004e1e <UART_SetConfig+0x336>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <UART_SetConfig+0x2d4>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004de1 	.word	0x08004de1
 8004dc0:	08004e01 	.word	0x08004e01
 8004dc4:	08004e09 	.word	0x08004e09
 8004dc8:	08004e1f 	.word	0x08004e1f
 8004dcc:	08004e0f 	.word	0x08004e0f
 8004dd0:	08004e1f 	.word	0x08004e1f
 8004dd4:	08004e1f 	.word	0x08004e1f
 8004dd8:	08004e1f 	.word	0x08004e1f
 8004ddc:	08004e17 	.word	0x08004e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de0:	f7fd fdd0 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004de4:	61f8      	str	r0, [r7, #28]
        break;
 8004de6:	e020      	b.n	8004e2a <UART_SetConfig+0x342>
 8004de8:	efff69f3 	.word	0xefff69f3
 8004dec:	40008000 	.word	0x40008000
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40004400 	.word	0x40004400
 8004dfc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7fd fdd6 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8004e04:	61f8      	str	r0, [r7, #28]
        break;
 8004e06:	e010      	b.n	8004e2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e08:	4b4c      	ldr	r3, [pc, #304]	; (8004f3c <UART_SetConfig+0x454>)
 8004e0a:	61fb      	str	r3, [r7, #28]
        break;
 8004e0c:	e00d      	b.n	8004e2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0e:	f7fd fd21 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8004e12:	61f8      	str	r0, [r7, #28]
        break;
 8004e14:	e009      	b.n	8004e2a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e005      	b.n	8004e2a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d077      	beq.n	8004f20 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005a      	lsls	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	441a      	add	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b0f      	cmp	r3, #15
 8004e4a:	d916      	bls.n	8004e7a <UART_SetConfig+0x392>
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e52:	d212      	bcs.n	8004e7a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f023 030f 	bic.w	r3, r3, #15
 8004e5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	8afb      	ldrh	r3, [r7, #22]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	8afa      	ldrh	r2, [r7, #22]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e052      	b.n	8004f20 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e80:	e04e      	b.n	8004f20 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d827      	bhi.n	8004eda <UART_SetConfig+0x3f2>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x3a8>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004eb5 	.word	0x08004eb5
 8004e94:	08004ebd 	.word	0x08004ebd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	08004edb 	.word	0x08004edb
 8004ea0:	08004ecb 	.word	0x08004ecb
 8004ea4:	08004edb 	.word	0x08004edb
 8004ea8:	08004edb 	.word	0x08004edb
 8004eac:	08004edb 	.word	0x08004edb
 8004eb0:	08004ed3 	.word	0x08004ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f7fd fd66 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8004eb8:	61f8      	str	r0, [r7, #28]
        break;
 8004eba:	e014      	b.n	8004ee6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ebc:	f7fd fd78 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8004ec0:	61f8      	str	r0, [r7, #28]
        break;
 8004ec2:	e010      	b.n	8004ee6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <UART_SetConfig+0x454>)
 8004ec6:	61fb      	str	r3, [r7, #28]
        break;
 8004ec8:	e00d      	b.n	8004ee6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eca:	f7fd fcc3 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8004ece:	61f8      	str	r0, [r7, #28]
        break;
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed6:	61fb      	str	r3, [r7, #28]
        break;
 8004ed8:	e005      	b.n	8004ee6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d019      	beq.n	8004f20 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	085a      	lsrs	r2, r3, #1
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	441a      	add	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b0f      	cmp	r3, #15
 8004f04:	d909      	bls.n	8004f1a <UART_SetConfig+0x432>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d205      	bcs.n	8004f1a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e002      	b.n	8004f20 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3728      	adds	r7, #40	; 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f3a:	bf00      	nop
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503e:	d10a      	bne.n	8005056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b098      	sub	sp, #96	; 0x60
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005094:	f7fc fbbe 	bl	8001814 <HAL_GetTick>
 8005098:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d12e      	bne.n	8005106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b0:	2200      	movs	r2, #0
 80050b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f88c 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d021      	beq.n	8005106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d6:	653b      	str	r3, [r7, #80]	; 0x50
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e0:	647b      	str	r3, [r7, #68]	; 0x44
 80050e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e6      	bne.n	80050c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e062      	b.n	80051cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b04      	cmp	r3, #4
 8005112:	d149      	bne.n	80051a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511c:	2200      	movs	r2, #0
 800511e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f856 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03c      	beq.n	80051a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	623b      	str	r3, [r7, #32]
   return(result);
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	633b      	str	r3, [r7, #48]	; 0x30
 800514e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3308      	adds	r3, #8
 800517e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005180:	61fa      	str	r2, [r7, #28]
 8005182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	617b      	str	r3, [r7, #20]
   return(result);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e5      	bne.n	8005160 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e011      	b.n	80051cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3758      	adds	r7, #88	; 0x58
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e049      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d045      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fc fb11 	bl	8001814 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e048      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d031      	beq.n	800527a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b08      	cmp	r3, #8
 8005222:	d110      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f838 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2208      	movs	r2, #8
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e029      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005254:	d111      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f81e 	bl	80052a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e00f      	b.n	800529a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69da      	ldr	r2, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4013      	ands	r3, r2
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	429a      	cmp	r2, r3
 8005288:	bf0c      	ite	eq
 800528a:	2301      	moveq	r3, #1
 800528c:	2300      	movne	r3, #0
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	79fb      	ldrb	r3, [r7, #7]
 8005294:	429a      	cmp	r2, r3
 8005296:	d0a6      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b095      	sub	sp, #84	; 0x54
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c8:	643b      	str	r3, [r7, #64]	; 0x40
 80052ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3308      	adds	r3, #8
 80052e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3308      	adds	r3, #8
 80052fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	2b01      	cmp	r3, #1
 8005316:	d118      	bne.n	800534a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800535e:	bf00      	nop
 8005360:	3754      	adds	r7, #84	; 0x54
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <std>:
 800536c:	2300      	movs	r3, #0
 800536e:	b510      	push	{r4, lr}
 8005370:	4604      	mov	r4, r0
 8005372:	e9c0 3300 	strd	r3, r3, [r0]
 8005376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537a:	6083      	str	r3, [r0, #8]
 800537c:	8181      	strh	r1, [r0, #12]
 800537e:	6643      	str	r3, [r0, #100]	; 0x64
 8005380:	81c2      	strh	r2, [r0, #14]
 8005382:	6183      	str	r3, [r0, #24]
 8005384:	4619      	mov	r1, r3
 8005386:	2208      	movs	r2, #8
 8005388:	305c      	adds	r0, #92	; 0x5c
 800538a:	f000 f918 	bl	80055be <memset>
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <std+0x58>)
 8005390:	6263      	str	r3, [r4, #36]	; 0x24
 8005392:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <std+0x5c>)
 8005394:	62a3      	str	r3, [r4, #40]	; 0x28
 8005396:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <std+0x60>)
 8005398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800539a:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <std+0x64>)
 800539c:	6323      	str	r3, [r4, #48]	; 0x30
 800539e:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <std+0x68>)
 80053a0:	6224      	str	r4, [r4, #32]
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d006      	beq.n	80053b4 <std+0x48>
 80053a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053aa:	4294      	cmp	r4, r2
 80053ac:	d002      	beq.n	80053b4 <std+0x48>
 80053ae:	33d0      	adds	r3, #208	; 0xd0
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d105      	bne.n	80053c0 <std+0x54>
 80053b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f000 b978 	b.w	80056b0 <__retarget_lock_init_recursive>
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	bf00      	nop
 80053c4:	08005539 	.word	0x08005539
 80053c8:	0800555b 	.word	0x0800555b
 80053cc:	08005593 	.word	0x08005593
 80053d0:	080055b7 	.word	0x080055b7
 80053d4:	200001f0 	.word	0x200001f0

080053d8 <stdio_exit_handler>:
 80053d8:	4a02      	ldr	r2, [pc, #8]	; (80053e4 <stdio_exit_handler+0xc>)
 80053da:	4903      	ldr	r1, [pc, #12]	; (80053e8 <stdio_exit_handler+0x10>)
 80053dc:	4803      	ldr	r0, [pc, #12]	; (80053ec <stdio_exit_handler+0x14>)
 80053de:	f000 b869 	b.w	80054b4 <_fwalk_sglue>
 80053e2:	bf00      	nop
 80053e4:	20000034 	.word	0x20000034
 80053e8:	08006565 	.word	0x08006565
 80053ec:	20000040 	.word	0x20000040

080053f0 <cleanup_stdio>:
 80053f0:	6841      	ldr	r1, [r0, #4]
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <cleanup_stdio+0x34>)
 80053f4:	4299      	cmp	r1, r3
 80053f6:	b510      	push	{r4, lr}
 80053f8:	4604      	mov	r4, r0
 80053fa:	d001      	beq.n	8005400 <cleanup_stdio+0x10>
 80053fc:	f001 f8b2 	bl	8006564 <_fflush_r>
 8005400:	68a1      	ldr	r1, [r4, #8]
 8005402:	4b09      	ldr	r3, [pc, #36]	; (8005428 <cleanup_stdio+0x38>)
 8005404:	4299      	cmp	r1, r3
 8005406:	d002      	beq.n	800540e <cleanup_stdio+0x1e>
 8005408:	4620      	mov	r0, r4
 800540a:	f001 f8ab 	bl	8006564 <_fflush_r>
 800540e:	68e1      	ldr	r1, [r4, #12]
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <cleanup_stdio+0x3c>)
 8005412:	4299      	cmp	r1, r3
 8005414:	d004      	beq.n	8005420 <cleanup_stdio+0x30>
 8005416:	4620      	mov	r0, r4
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541c:	f001 b8a2 	b.w	8006564 <_fflush_r>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	200001f0 	.word	0x200001f0
 8005428:	20000258 	.word	0x20000258
 800542c:	200002c0 	.word	0x200002c0

08005430 <global_stdio_init.part.0>:
 8005430:	b510      	push	{r4, lr}
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <global_stdio_init.part.0+0x30>)
 8005434:	4c0b      	ldr	r4, [pc, #44]	; (8005464 <global_stdio_init.part.0+0x34>)
 8005436:	4a0c      	ldr	r2, [pc, #48]	; (8005468 <global_stdio_init.part.0+0x38>)
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4620      	mov	r0, r4
 800543c:	2200      	movs	r2, #0
 800543e:	2104      	movs	r1, #4
 8005440:	f7ff ff94 	bl	800536c <std>
 8005444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005448:	2201      	movs	r2, #1
 800544a:	2109      	movs	r1, #9
 800544c:	f7ff ff8e 	bl	800536c <std>
 8005450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005454:	2202      	movs	r2, #2
 8005456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545a:	2112      	movs	r1, #18
 800545c:	f7ff bf86 	b.w	800536c <std>
 8005460:	20000328 	.word	0x20000328
 8005464:	200001f0 	.word	0x200001f0
 8005468:	080053d9 	.word	0x080053d9

0800546c <__sfp_lock_acquire>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__sfp_lock_acquire+0x8>)
 800546e:	f000 b920 	b.w	80056b2 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	20000331 	.word	0x20000331

08005478 <__sfp_lock_release>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__sfp_lock_release+0x8>)
 800547a:	f000 b91b 	b.w	80056b4 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	20000331 	.word	0x20000331

08005484 <__sinit>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4604      	mov	r4, r0
 8005488:	f7ff fff0 	bl	800546c <__sfp_lock_acquire>
 800548c:	6a23      	ldr	r3, [r4, #32]
 800548e:	b11b      	cbz	r3, 8005498 <__sinit+0x14>
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	f7ff bff0 	b.w	8005478 <__sfp_lock_release>
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <__sinit+0x28>)
 800549a:	6223      	str	r3, [r4, #32]
 800549c:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <__sinit+0x2c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f5      	bne.n	8005490 <__sinit+0xc>
 80054a4:	f7ff ffc4 	bl	8005430 <global_stdio_init.part.0>
 80054a8:	e7f2      	b.n	8005490 <__sinit+0xc>
 80054aa:	bf00      	nop
 80054ac:	080053f1 	.word	0x080053f1
 80054b0:	20000328 	.word	0x20000328

080054b4 <_fwalk_sglue>:
 80054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b8:	4607      	mov	r7, r0
 80054ba:	4688      	mov	r8, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	2600      	movs	r6, #0
 80054c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c4:	f1b9 0901 	subs.w	r9, r9, #1
 80054c8:	d505      	bpl.n	80054d6 <_fwalk_sglue+0x22>
 80054ca:	6824      	ldr	r4, [r4, #0]
 80054cc:	2c00      	cmp	r4, #0
 80054ce:	d1f7      	bne.n	80054c0 <_fwalk_sglue+0xc>
 80054d0:	4630      	mov	r0, r6
 80054d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d907      	bls.n	80054ec <_fwalk_sglue+0x38>
 80054dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e0:	3301      	adds	r3, #1
 80054e2:	d003      	beq.n	80054ec <_fwalk_sglue+0x38>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c0      	blx	r8
 80054ea:	4306      	orrs	r6, r0
 80054ec:	3568      	adds	r5, #104	; 0x68
 80054ee:	e7e9      	b.n	80054c4 <_fwalk_sglue+0x10>

080054f0 <iprintf>:
 80054f0:	b40f      	push	{r0, r1, r2, r3}
 80054f2:	b507      	push	{r0, r1, r2, lr}
 80054f4:	4906      	ldr	r1, [pc, #24]	; (8005510 <iprintf+0x20>)
 80054f6:	ab04      	add	r3, sp, #16
 80054f8:	6808      	ldr	r0, [r1, #0]
 80054fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80054fe:	6881      	ldr	r1, [r0, #8]
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	f000 f9fb 	bl	80058fc <_vfiprintf_r>
 8005506:	b003      	add	sp, #12
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	b004      	add	sp, #16
 800550e:	4770      	bx	lr
 8005510:	2000008c 	.word	0x2000008c

08005514 <iscanf>:
 8005514:	b40f      	push	{r0, r1, r2, r3}
 8005516:	b507      	push	{r0, r1, r2, lr}
 8005518:	4906      	ldr	r1, [pc, #24]	; (8005534 <iscanf+0x20>)
 800551a:	ab04      	add	r3, sp, #16
 800551c:	6808      	ldr	r0, [r1, #0]
 800551e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005522:	6841      	ldr	r1, [r0, #4]
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f000 fe35 	bl	8006194 <_vfiscanf_r>
 800552a:	b003      	add	sp, #12
 800552c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005530:	b004      	add	sp, #16
 8005532:	4770      	bx	lr
 8005534:	2000008c 	.word	0x2000008c

08005538 <__sread>:
 8005538:	b510      	push	{r4, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	f000 f868 	bl	8005614 <_read_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	bfab      	itete	ge
 8005548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800554a:	89a3      	ldrhlt	r3, [r4, #12]
 800554c:	181b      	addge	r3, r3, r0
 800554e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005552:	bfac      	ite	ge
 8005554:	6563      	strge	r3, [r4, #84]	; 0x54
 8005556:	81a3      	strhlt	r3, [r4, #12]
 8005558:	bd10      	pop	{r4, pc}

0800555a <__swrite>:
 800555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	461f      	mov	r7, r3
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4616      	mov	r6, r2
 800556a:	d505      	bpl.n	8005578 <__swrite+0x1e>
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	2302      	movs	r3, #2
 8005572:	2200      	movs	r2, #0
 8005574:	f000 f83c 	bl	80055f0 <_lseek_r>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	4628      	mov	r0, r5
 800558a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	f000 b853 	b.w	8005638 <_write_r>

08005592 <__sseek>:
 8005592:	b510      	push	{r4, lr}
 8005594:	460c      	mov	r4, r1
 8005596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559a:	f000 f829 	bl	80055f0 <_lseek_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	bf15      	itete	ne
 80055a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80055a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055ae:	81a3      	strheq	r3, [r4, #12]
 80055b0:	bf18      	it	ne
 80055b2:	81a3      	strhne	r3, [r4, #12]
 80055b4:	bd10      	pop	{r4, pc}

080055b6 <__sclose>:
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 b809 	b.w	80055d0 <_close_r>

080055be <memset>:
 80055be:	4402      	add	r2, r0
 80055c0:	4603      	mov	r3, r0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d100      	bne.n	80055c8 <memset+0xa>
 80055c6:	4770      	bx	lr
 80055c8:	f803 1b01 	strb.w	r1, [r3], #1
 80055cc:	e7f9      	b.n	80055c2 <memset+0x4>
	...

080055d0 <_close_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d06      	ldr	r5, [pc, #24]	; (80055ec <_close_r+0x1c>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	f7fc f80c 	bl	80015f8 <_close>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <_close_r+0x1a>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	b103      	cbz	r3, 80055ea <_close_r+0x1a>
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	bd38      	pop	{r3, r4, r5, pc}
 80055ec:	2000032c 	.word	0x2000032c

080055f0 <_lseek_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d07      	ldr	r5, [pc, #28]	; (8005610 <_lseek_r+0x20>)
 80055f4:	4604      	mov	r4, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	4611      	mov	r1, r2
 80055fa:	2200      	movs	r2, #0
 80055fc:	602a      	str	r2, [r5, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	f7fc f821 	bl	8001646 <_lseek>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_lseek_r+0x1e>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_lseek_r+0x1e>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	2000032c 	.word	0x2000032c

08005614 <_read_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	; (8005634 <_read_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fb ffa8 	bl	8001578 <_read>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_read_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_read_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	2000032c 	.word	0x2000032c

08005638 <_write_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4d07      	ldr	r5, [pc, #28]	; (8005658 <_write_r+0x20>)
 800563c:	4604      	mov	r4, r0
 800563e:	4608      	mov	r0, r1
 8005640:	4611      	mov	r1, r2
 8005642:	2200      	movs	r2, #0
 8005644:	602a      	str	r2, [r5, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f7fb ffb4 	bl	80015b4 <_write>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_write_r+0x1e>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_write_r+0x1e>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	2000032c 	.word	0x2000032c

0800565c <__errno>:
 800565c:	4b01      	ldr	r3, [pc, #4]	; (8005664 <__errno+0x8>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000008c 	.word	0x2000008c

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	; (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	; (80056a4 <__libc_init_array+0x3c>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2600      	movs	r6, #0
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	; (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	; (80056ac <__libc_init_array+0x44>)
 800567c:	f001 fb7e 	bl	8006d7c <_init>
 8005680:	1b64      	subs	r4, r4, r5
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2600      	movs	r6, #0
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	4798      	blx	r3
 8005692:	3601      	adds	r6, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	4798      	blx	r3
 800569c:	3601      	adds	r6, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08007c60 	.word	0x08007c60
 80056a4:	08007c60 	.word	0x08007c60
 80056a8:	08007c60 	.word	0x08007c60
 80056ac:	08007c64 	.word	0x08007c64

080056b0 <__retarget_lock_init_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_acquire_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <__retarget_lock_release_recursive>:
 80056b4:	4770      	bx	lr
	...

080056b8 <_free_r>:
 80056b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ba:	2900      	cmp	r1, #0
 80056bc:	d044      	beq.n	8005748 <_free_r+0x90>
 80056be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c2:	9001      	str	r0, [sp, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f1a1 0404 	sub.w	r4, r1, #4
 80056ca:	bfb8      	it	lt
 80056cc:	18e4      	addlt	r4, r4, r3
 80056ce:	f000 f8df 	bl	8005890 <__malloc_lock>
 80056d2:	4a1e      	ldr	r2, [pc, #120]	; (800574c <_free_r+0x94>)
 80056d4:	9801      	ldr	r0, [sp, #4]
 80056d6:	6813      	ldr	r3, [r2, #0]
 80056d8:	b933      	cbnz	r3, 80056e8 <_free_r+0x30>
 80056da:	6063      	str	r3, [r4, #4]
 80056dc:	6014      	str	r4, [r2, #0]
 80056de:	b003      	add	sp, #12
 80056e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e4:	f000 b8da 	b.w	800589c <__malloc_unlock>
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	d908      	bls.n	80056fe <_free_r+0x46>
 80056ec:	6825      	ldr	r5, [r4, #0]
 80056ee:	1961      	adds	r1, r4, r5
 80056f0:	428b      	cmp	r3, r1
 80056f2:	bf01      	itttt	eq
 80056f4:	6819      	ldreq	r1, [r3, #0]
 80056f6:	685b      	ldreq	r3, [r3, #4]
 80056f8:	1949      	addeq	r1, r1, r5
 80056fa:	6021      	streq	r1, [r4, #0]
 80056fc:	e7ed      	b.n	80056da <_free_r+0x22>
 80056fe:	461a      	mov	r2, r3
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	b10b      	cbz	r3, 8005708 <_free_r+0x50>
 8005704:	42a3      	cmp	r3, r4
 8005706:	d9fa      	bls.n	80056fe <_free_r+0x46>
 8005708:	6811      	ldr	r1, [r2, #0]
 800570a:	1855      	adds	r5, r2, r1
 800570c:	42a5      	cmp	r5, r4
 800570e:	d10b      	bne.n	8005728 <_free_r+0x70>
 8005710:	6824      	ldr	r4, [r4, #0]
 8005712:	4421      	add	r1, r4
 8005714:	1854      	adds	r4, r2, r1
 8005716:	42a3      	cmp	r3, r4
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	d1e0      	bne.n	80056de <_free_r+0x26>
 800571c:	681c      	ldr	r4, [r3, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	6053      	str	r3, [r2, #4]
 8005722:	440c      	add	r4, r1
 8005724:	6014      	str	r4, [r2, #0]
 8005726:	e7da      	b.n	80056de <_free_r+0x26>
 8005728:	d902      	bls.n	8005730 <_free_r+0x78>
 800572a:	230c      	movs	r3, #12
 800572c:	6003      	str	r3, [r0, #0]
 800572e:	e7d6      	b.n	80056de <_free_r+0x26>
 8005730:	6825      	ldr	r5, [r4, #0]
 8005732:	1961      	adds	r1, r4, r5
 8005734:	428b      	cmp	r3, r1
 8005736:	bf04      	itt	eq
 8005738:	6819      	ldreq	r1, [r3, #0]
 800573a:	685b      	ldreq	r3, [r3, #4]
 800573c:	6063      	str	r3, [r4, #4]
 800573e:	bf04      	itt	eq
 8005740:	1949      	addeq	r1, r1, r5
 8005742:	6021      	streq	r1, [r4, #0]
 8005744:	6054      	str	r4, [r2, #4]
 8005746:	e7ca      	b.n	80056de <_free_r+0x26>
 8005748:	b003      	add	sp, #12
 800574a:	bd30      	pop	{r4, r5, pc}
 800574c:	20000334 	.word	0x20000334

08005750 <sbrk_aligned>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	4e0e      	ldr	r6, [pc, #56]	; (800578c <sbrk_aligned+0x3c>)
 8005754:	460c      	mov	r4, r1
 8005756:	6831      	ldr	r1, [r6, #0]
 8005758:	4605      	mov	r5, r0
 800575a:	b911      	cbnz	r1, 8005762 <sbrk_aligned+0x12>
 800575c:	f001 f93c 	bl	80069d8 <_sbrk_r>
 8005760:	6030      	str	r0, [r6, #0]
 8005762:	4621      	mov	r1, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f001 f937 	bl	80069d8 <_sbrk_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	d00a      	beq.n	8005784 <sbrk_aligned+0x34>
 800576e:	1cc4      	adds	r4, r0, #3
 8005770:	f024 0403 	bic.w	r4, r4, #3
 8005774:	42a0      	cmp	r0, r4
 8005776:	d007      	beq.n	8005788 <sbrk_aligned+0x38>
 8005778:	1a21      	subs	r1, r4, r0
 800577a:	4628      	mov	r0, r5
 800577c:	f001 f92c 	bl	80069d8 <_sbrk_r>
 8005780:	3001      	adds	r0, #1
 8005782:	d101      	bne.n	8005788 <sbrk_aligned+0x38>
 8005784:	f04f 34ff 	mov.w	r4, #4294967295
 8005788:	4620      	mov	r0, r4
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	20000338 	.word	0x20000338

08005790 <_malloc_r>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	1ccd      	adds	r5, r1, #3
 8005796:	f025 0503 	bic.w	r5, r5, #3
 800579a:	3508      	adds	r5, #8
 800579c:	2d0c      	cmp	r5, #12
 800579e:	bf38      	it	cc
 80057a0:	250c      	movcc	r5, #12
 80057a2:	2d00      	cmp	r5, #0
 80057a4:	4607      	mov	r7, r0
 80057a6:	db01      	blt.n	80057ac <_malloc_r+0x1c>
 80057a8:	42a9      	cmp	r1, r5
 80057aa:	d905      	bls.n	80057b8 <_malloc_r+0x28>
 80057ac:	230c      	movs	r3, #12
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	2600      	movs	r6, #0
 80057b2:	4630      	mov	r0, r6
 80057b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800588c <_malloc_r+0xfc>
 80057bc:	f000 f868 	bl	8005890 <__malloc_lock>
 80057c0:	f8d8 3000 	ldr.w	r3, [r8]
 80057c4:	461c      	mov	r4, r3
 80057c6:	bb5c      	cbnz	r4, 8005820 <_malloc_r+0x90>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	f7ff ffc0 	bl	8005750 <sbrk_aligned>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	4604      	mov	r4, r0
 80057d4:	d155      	bne.n	8005882 <_malloc_r+0xf2>
 80057d6:	f8d8 4000 	ldr.w	r4, [r8]
 80057da:	4626      	mov	r6, r4
 80057dc:	2e00      	cmp	r6, #0
 80057de:	d145      	bne.n	800586c <_malloc_r+0xdc>
 80057e0:	2c00      	cmp	r4, #0
 80057e2:	d048      	beq.n	8005876 <_malloc_r+0xe6>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4638      	mov	r0, r7
 80057ea:	eb04 0903 	add.w	r9, r4, r3
 80057ee:	f001 f8f3 	bl	80069d8 <_sbrk_r>
 80057f2:	4581      	cmp	r9, r0
 80057f4:	d13f      	bne.n	8005876 <_malloc_r+0xe6>
 80057f6:	6821      	ldr	r1, [r4, #0]
 80057f8:	1a6d      	subs	r5, r5, r1
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ffa7 	bl	8005750 <sbrk_aligned>
 8005802:	3001      	adds	r0, #1
 8005804:	d037      	beq.n	8005876 <_malloc_r+0xe6>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	442b      	add	r3, r5
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	f8d8 3000 	ldr.w	r3, [r8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d038      	beq.n	8005886 <_malloc_r+0xf6>
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	42a2      	cmp	r2, r4
 8005818:	d12b      	bne.n	8005872 <_malloc_r+0xe2>
 800581a:	2200      	movs	r2, #0
 800581c:	605a      	str	r2, [r3, #4]
 800581e:	e00f      	b.n	8005840 <_malloc_r+0xb0>
 8005820:	6822      	ldr	r2, [r4, #0]
 8005822:	1b52      	subs	r2, r2, r5
 8005824:	d41f      	bmi.n	8005866 <_malloc_r+0xd6>
 8005826:	2a0b      	cmp	r2, #11
 8005828:	d917      	bls.n	800585a <_malloc_r+0xca>
 800582a:	1961      	adds	r1, r4, r5
 800582c:	42a3      	cmp	r3, r4
 800582e:	6025      	str	r5, [r4, #0]
 8005830:	bf18      	it	ne
 8005832:	6059      	strne	r1, [r3, #4]
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	bf08      	it	eq
 8005838:	f8c8 1000 	streq.w	r1, [r8]
 800583c:	5162      	str	r2, [r4, r5]
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	4638      	mov	r0, r7
 8005842:	f104 060b 	add.w	r6, r4, #11
 8005846:	f000 f829 	bl	800589c <__malloc_unlock>
 800584a:	f026 0607 	bic.w	r6, r6, #7
 800584e:	1d23      	adds	r3, r4, #4
 8005850:	1af2      	subs	r2, r6, r3
 8005852:	d0ae      	beq.n	80057b2 <_malloc_r+0x22>
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	50a3      	str	r3, [r4, r2]
 8005858:	e7ab      	b.n	80057b2 <_malloc_r+0x22>
 800585a:	42a3      	cmp	r3, r4
 800585c:	6862      	ldr	r2, [r4, #4]
 800585e:	d1dd      	bne.n	800581c <_malloc_r+0x8c>
 8005860:	f8c8 2000 	str.w	r2, [r8]
 8005864:	e7ec      	b.n	8005840 <_malloc_r+0xb0>
 8005866:	4623      	mov	r3, r4
 8005868:	6864      	ldr	r4, [r4, #4]
 800586a:	e7ac      	b.n	80057c6 <_malloc_r+0x36>
 800586c:	4634      	mov	r4, r6
 800586e:	6876      	ldr	r6, [r6, #4]
 8005870:	e7b4      	b.n	80057dc <_malloc_r+0x4c>
 8005872:	4613      	mov	r3, r2
 8005874:	e7cc      	b.n	8005810 <_malloc_r+0x80>
 8005876:	230c      	movs	r3, #12
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4638      	mov	r0, r7
 800587c:	f000 f80e 	bl	800589c <__malloc_unlock>
 8005880:	e797      	b.n	80057b2 <_malloc_r+0x22>
 8005882:	6025      	str	r5, [r4, #0]
 8005884:	e7dc      	b.n	8005840 <_malloc_r+0xb0>
 8005886:	605b      	str	r3, [r3, #4]
 8005888:	deff      	udf	#255	; 0xff
 800588a:	bf00      	nop
 800588c:	20000334 	.word	0x20000334

08005890 <__malloc_lock>:
 8005890:	4801      	ldr	r0, [pc, #4]	; (8005898 <__malloc_lock+0x8>)
 8005892:	f7ff bf0e 	b.w	80056b2 <__retarget_lock_acquire_recursive>
 8005896:	bf00      	nop
 8005898:	20000330 	.word	0x20000330

0800589c <__malloc_unlock>:
 800589c:	4801      	ldr	r0, [pc, #4]	; (80058a4 <__malloc_unlock+0x8>)
 800589e:	f7ff bf09 	b.w	80056b4 <__retarget_lock_release_recursive>
 80058a2:	bf00      	nop
 80058a4:	20000330 	.word	0x20000330

080058a8 <__sfputc_r>:
 80058a8:	6893      	ldr	r3, [r2, #8]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	b410      	push	{r4}
 80058b0:	6093      	str	r3, [r2, #8]
 80058b2:	da08      	bge.n	80058c6 <__sfputc_r+0x1e>
 80058b4:	6994      	ldr	r4, [r2, #24]
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	db01      	blt.n	80058be <__sfputc_r+0x16>
 80058ba:	290a      	cmp	r1, #10
 80058bc:	d103      	bne.n	80058c6 <__sfputc_r+0x1e>
 80058be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058c2:	f000 bff4 	b.w	80068ae <__swbuf_r>
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	1c58      	adds	r0, r3, #1
 80058ca:	6010      	str	r0, [r2, #0]
 80058cc:	7019      	strb	r1, [r3, #0]
 80058ce:	4608      	mov	r0, r1
 80058d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <__sfputs_r>:
 80058d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	4614      	mov	r4, r2
 80058de:	18d5      	adds	r5, r2, r3
 80058e0:	42ac      	cmp	r4, r5
 80058e2:	d101      	bne.n	80058e8 <__sfputs_r+0x12>
 80058e4:	2000      	movs	r0, #0
 80058e6:	e007      	b.n	80058f8 <__sfputs_r+0x22>
 80058e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ec:	463a      	mov	r2, r7
 80058ee:	4630      	mov	r0, r6
 80058f0:	f7ff ffda 	bl	80058a8 <__sfputc_r>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d1f3      	bne.n	80058e0 <__sfputs_r+0xa>
 80058f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058fc <_vfiprintf_r>:
 80058fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	460d      	mov	r5, r1
 8005902:	b09d      	sub	sp, #116	; 0x74
 8005904:	4614      	mov	r4, r2
 8005906:	4698      	mov	r8, r3
 8005908:	4606      	mov	r6, r0
 800590a:	b118      	cbz	r0, 8005914 <_vfiprintf_r+0x18>
 800590c:	6a03      	ldr	r3, [r0, #32]
 800590e:	b90b      	cbnz	r3, 8005914 <_vfiprintf_r+0x18>
 8005910:	f7ff fdb8 	bl	8005484 <__sinit>
 8005914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	d405      	bmi.n	8005926 <_vfiprintf_r+0x2a>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d402      	bmi.n	8005926 <_vfiprintf_r+0x2a>
 8005920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005922:	f7ff fec6 	bl	80056b2 <__retarget_lock_acquire_recursive>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	071b      	lsls	r3, r3, #28
 800592a:	d501      	bpl.n	8005930 <_vfiprintf_r+0x34>
 800592c:	692b      	ldr	r3, [r5, #16]
 800592e:	b99b      	cbnz	r3, 8005958 <_vfiprintf_r+0x5c>
 8005930:	4629      	mov	r1, r5
 8005932:	4630      	mov	r0, r6
 8005934:	f000 fff8 	bl	8006928 <__swsetup_r>
 8005938:	b170      	cbz	r0, 8005958 <_vfiprintf_r+0x5c>
 800593a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800593c:	07dc      	lsls	r4, r3, #31
 800593e:	d504      	bpl.n	800594a <_vfiprintf_r+0x4e>
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	b01d      	add	sp, #116	; 0x74
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	89ab      	ldrh	r3, [r5, #12]
 800594c:	0598      	lsls	r0, r3, #22
 800594e:	d4f7      	bmi.n	8005940 <_vfiprintf_r+0x44>
 8005950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005952:	f7ff feaf 	bl	80056b4 <__retarget_lock_release_recursive>
 8005956:	e7f3      	b.n	8005940 <_vfiprintf_r+0x44>
 8005958:	2300      	movs	r3, #0
 800595a:	9309      	str	r3, [sp, #36]	; 0x24
 800595c:	2320      	movs	r3, #32
 800595e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005962:	f8cd 800c 	str.w	r8, [sp, #12]
 8005966:	2330      	movs	r3, #48	; 0x30
 8005968:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005b1c <_vfiprintf_r+0x220>
 800596c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005970:	f04f 0901 	mov.w	r9, #1
 8005974:	4623      	mov	r3, r4
 8005976:	469a      	mov	sl, r3
 8005978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800597c:	b10a      	cbz	r2, 8005982 <_vfiprintf_r+0x86>
 800597e:	2a25      	cmp	r2, #37	; 0x25
 8005980:	d1f9      	bne.n	8005976 <_vfiprintf_r+0x7a>
 8005982:	ebba 0b04 	subs.w	fp, sl, r4
 8005986:	d00b      	beq.n	80059a0 <_vfiprintf_r+0xa4>
 8005988:	465b      	mov	r3, fp
 800598a:	4622      	mov	r2, r4
 800598c:	4629      	mov	r1, r5
 800598e:	4630      	mov	r0, r6
 8005990:	f7ff ffa1 	bl	80058d6 <__sfputs_r>
 8005994:	3001      	adds	r0, #1
 8005996:	f000 80a9 	beq.w	8005aec <_vfiprintf_r+0x1f0>
 800599a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599c:	445a      	add	r2, fp
 800599e:	9209      	str	r2, [sp, #36]	; 0x24
 80059a0:	f89a 3000 	ldrb.w	r3, [sl]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80a1 	beq.w	8005aec <_vfiprintf_r+0x1f0>
 80059aa:	2300      	movs	r3, #0
 80059ac:	f04f 32ff 	mov.w	r2, #4294967295
 80059b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b4:	f10a 0a01 	add.w	sl, sl, #1
 80059b8:	9304      	str	r3, [sp, #16]
 80059ba:	9307      	str	r3, [sp, #28]
 80059bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059c0:	931a      	str	r3, [sp, #104]	; 0x68
 80059c2:	4654      	mov	r4, sl
 80059c4:	2205      	movs	r2, #5
 80059c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ca:	4854      	ldr	r0, [pc, #336]	; (8005b1c <_vfiprintf_r+0x220>)
 80059cc:	f7fa fc00 	bl	80001d0 <memchr>
 80059d0:	9a04      	ldr	r2, [sp, #16]
 80059d2:	b9d8      	cbnz	r0, 8005a0c <_vfiprintf_r+0x110>
 80059d4:	06d1      	lsls	r1, r2, #27
 80059d6:	bf44      	itt	mi
 80059d8:	2320      	movmi	r3, #32
 80059da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059de:	0713      	lsls	r3, r2, #28
 80059e0:	bf44      	itt	mi
 80059e2:	232b      	movmi	r3, #43	; 0x2b
 80059e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e8:	f89a 3000 	ldrb.w	r3, [sl]
 80059ec:	2b2a      	cmp	r3, #42	; 0x2a
 80059ee:	d015      	beq.n	8005a1c <_vfiprintf_r+0x120>
 80059f0:	9a07      	ldr	r2, [sp, #28]
 80059f2:	4654      	mov	r4, sl
 80059f4:	2000      	movs	r0, #0
 80059f6:	f04f 0c0a 	mov.w	ip, #10
 80059fa:	4621      	mov	r1, r4
 80059fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a00:	3b30      	subs	r3, #48	; 0x30
 8005a02:	2b09      	cmp	r3, #9
 8005a04:	d94d      	bls.n	8005aa2 <_vfiprintf_r+0x1a6>
 8005a06:	b1b0      	cbz	r0, 8005a36 <_vfiprintf_r+0x13a>
 8005a08:	9207      	str	r2, [sp, #28]
 8005a0a:	e014      	b.n	8005a36 <_vfiprintf_r+0x13a>
 8005a0c:	eba0 0308 	sub.w	r3, r0, r8
 8005a10:	fa09 f303 	lsl.w	r3, r9, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	46a2      	mov	sl, r4
 8005a1a:	e7d2      	b.n	80059c2 <_vfiprintf_r+0xc6>
 8005a1c:	9b03      	ldr	r3, [sp, #12]
 8005a1e:	1d19      	adds	r1, r3, #4
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	9103      	str	r1, [sp, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfbb      	ittet	lt
 8005a28:	425b      	neglt	r3, r3
 8005a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a2e:	9307      	strge	r3, [sp, #28]
 8005a30:	9307      	strlt	r3, [sp, #28]
 8005a32:	bfb8      	it	lt
 8005a34:	9204      	strlt	r2, [sp, #16]
 8005a36:	7823      	ldrb	r3, [r4, #0]
 8005a38:	2b2e      	cmp	r3, #46	; 0x2e
 8005a3a:	d10c      	bne.n	8005a56 <_vfiprintf_r+0x15a>
 8005a3c:	7863      	ldrb	r3, [r4, #1]
 8005a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a40:	d134      	bne.n	8005aac <_vfiprintf_r+0x1b0>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	1d1a      	adds	r2, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	9203      	str	r2, [sp, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfb8      	it	lt
 8005a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a52:	3402      	adds	r4, #2
 8005a54:	9305      	str	r3, [sp, #20]
 8005a56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005b2c <_vfiprintf_r+0x230>
 8005a5a:	7821      	ldrb	r1, [r4, #0]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	4650      	mov	r0, sl
 8005a60:	f7fa fbb6 	bl	80001d0 <memchr>
 8005a64:	b138      	cbz	r0, 8005a76 <_vfiprintf_r+0x17a>
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	eba0 000a 	sub.w	r0, r0, sl
 8005a6c:	2240      	movs	r2, #64	; 0x40
 8005a6e:	4082      	lsls	r2, r0
 8005a70:	4313      	orrs	r3, r2
 8005a72:	3401      	adds	r4, #1
 8005a74:	9304      	str	r3, [sp, #16]
 8005a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a7a:	4829      	ldr	r0, [pc, #164]	; (8005b20 <_vfiprintf_r+0x224>)
 8005a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a80:	2206      	movs	r2, #6
 8005a82:	f7fa fba5 	bl	80001d0 <memchr>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d03f      	beq.n	8005b0a <_vfiprintf_r+0x20e>
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <_vfiprintf_r+0x228>)
 8005a8c:	bb1b      	cbnz	r3, 8005ad6 <_vfiprintf_r+0x1da>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	3307      	adds	r3, #7
 8005a92:	f023 0307 	bic.w	r3, r3, #7
 8005a96:	3308      	adds	r3, #8
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a9c:	443b      	add	r3, r7
 8005a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa0:	e768      	b.n	8005974 <_vfiprintf_r+0x78>
 8005aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e7a6      	b.n	80059fa <_vfiprintf_r+0xfe>
 8005aac:	2300      	movs	r3, #0
 8005aae:	3401      	adds	r4, #1
 8005ab0:	9305      	str	r3, [sp, #20]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f04f 0c0a 	mov.w	ip, #10
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005abe:	3a30      	subs	r2, #48	; 0x30
 8005ac0:	2a09      	cmp	r2, #9
 8005ac2:	d903      	bls.n	8005acc <_vfiprintf_r+0x1d0>
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0c6      	beq.n	8005a56 <_vfiprintf_r+0x15a>
 8005ac8:	9105      	str	r1, [sp, #20]
 8005aca:	e7c4      	b.n	8005a56 <_vfiprintf_r+0x15a>
 8005acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e7f0      	b.n	8005ab8 <_vfiprintf_r+0x1bc>
 8005ad6:	ab03      	add	r3, sp, #12
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	462a      	mov	r2, r5
 8005adc:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <_vfiprintf_r+0x22c>)
 8005ade:	a904      	add	r1, sp, #16
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f3af 8000 	nop.w
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	1c78      	adds	r0, r7, #1
 8005aea:	d1d6      	bne.n	8005a9a <_vfiprintf_r+0x19e>
 8005aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d405      	bmi.n	8005afe <_vfiprintf_r+0x202>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_vfiprintf_r+0x202>
 8005af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005afa:	f7ff fddb 	bl	80056b4 <__retarget_lock_release_recursive>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	065b      	lsls	r3, r3, #25
 8005b02:	f53f af1d 	bmi.w	8005940 <_vfiprintf_r+0x44>
 8005b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b08:	e71c      	b.n	8005944 <_vfiprintf_r+0x48>
 8005b0a:	ab03      	add	r3, sp, #12
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	462a      	mov	r2, r5
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <_vfiprintf_r+0x22c>)
 8005b12:	a904      	add	r1, sp, #16
 8005b14:	4630      	mov	r0, r6
 8005b16:	f000 f879 	bl	8005c0c <_printf_i>
 8005b1a:	e7e4      	b.n	8005ae6 <_vfiprintf_r+0x1ea>
 8005b1c:	08007b08 	.word	0x08007b08
 8005b20:	08007b12 	.word	0x08007b12
 8005b24:	00000000 	.word	0x00000000
 8005b28:	080058d7 	.word	0x080058d7
 8005b2c:	08007b0e 	.word	0x08007b0e

08005b30 <_printf_common>:
 8005b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b34:	4616      	mov	r6, r2
 8005b36:	4699      	mov	r9, r3
 8005b38:	688a      	ldr	r2, [r1, #8]
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bfb8      	it	lt
 8005b44:	4613      	movlt	r3, r2
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b4c:	4607      	mov	r7, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	b10a      	cbz	r2, 8005b56 <_printf_common+0x26>
 8005b52:	3301      	adds	r3, #1
 8005b54:	6033      	str	r3, [r6, #0]
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	0699      	lsls	r1, r3, #26
 8005b5a:	bf42      	ittt	mi
 8005b5c:	6833      	ldrmi	r3, [r6, #0]
 8005b5e:	3302      	addmi	r3, #2
 8005b60:	6033      	strmi	r3, [r6, #0]
 8005b62:	6825      	ldr	r5, [r4, #0]
 8005b64:	f015 0506 	ands.w	r5, r5, #6
 8005b68:	d106      	bne.n	8005b78 <_printf_common+0x48>
 8005b6a:	f104 0a19 	add.w	sl, r4, #25
 8005b6e:	68e3      	ldr	r3, [r4, #12]
 8005b70:	6832      	ldr	r2, [r6, #0]
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	42ab      	cmp	r3, r5
 8005b76:	dc26      	bgt.n	8005bc6 <_printf_common+0x96>
 8005b78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b7c:	1e13      	subs	r3, r2, #0
 8005b7e:	6822      	ldr	r2, [r4, #0]
 8005b80:	bf18      	it	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	0692      	lsls	r2, r2, #26
 8005b86:	d42b      	bmi.n	8005be0 <_printf_common+0xb0>
 8005b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4638      	mov	r0, r7
 8005b90:	47c0      	blx	r8
 8005b92:	3001      	adds	r0, #1
 8005b94:	d01e      	beq.n	8005bd4 <_printf_common+0xa4>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	f003 0306 	and.w	r3, r3, #6
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	bf02      	ittt	eq
 8005ba2:	68e5      	ldreq	r5, [r4, #12]
 8005ba4:	6833      	ldreq	r3, [r6, #0]
 8005ba6:	1aed      	subeq	r5, r5, r3
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	bf0c      	ite	eq
 8005bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bb0:	2500      	movne	r5, #0
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	bfc4      	itt	gt
 8005bb6:	1a9b      	subgt	r3, r3, r2
 8005bb8:	18ed      	addgt	r5, r5, r3
 8005bba:	2600      	movs	r6, #0
 8005bbc:	341a      	adds	r4, #26
 8005bbe:	42b5      	cmp	r5, r6
 8005bc0:	d11a      	bne.n	8005bf8 <_printf_common+0xc8>
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e008      	b.n	8005bd8 <_printf_common+0xa8>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4652      	mov	r2, sl
 8005bca:	4649      	mov	r1, r9
 8005bcc:	4638      	mov	r0, r7
 8005bce:	47c0      	blx	r8
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d103      	bne.n	8005bdc <_printf_common+0xac>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bdc:	3501      	adds	r5, #1
 8005bde:	e7c6      	b.n	8005b6e <_printf_common+0x3e>
 8005be0:	18e1      	adds	r1, r4, r3
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	2030      	movs	r0, #48	; 0x30
 8005be6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bea:	4422      	add	r2, r4
 8005bec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7c7      	b.n	8005b88 <_printf_common+0x58>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4638      	mov	r0, r7
 8005c00:	47c0      	blx	r8
 8005c02:	3001      	adds	r0, #1
 8005c04:	d0e6      	beq.n	8005bd4 <_printf_common+0xa4>
 8005c06:	3601      	adds	r6, #1
 8005c08:	e7d9      	b.n	8005bbe <_printf_common+0x8e>
	...

08005c0c <_printf_i>:
 8005c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c10:	7e0f      	ldrb	r7, [r1, #24]
 8005c12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c14:	2f78      	cmp	r7, #120	; 0x78
 8005c16:	4691      	mov	r9, r2
 8005c18:	4680      	mov	r8, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	469a      	mov	sl, r3
 8005c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c22:	d807      	bhi.n	8005c34 <_printf_i+0x28>
 8005c24:	2f62      	cmp	r7, #98	; 0x62
 8005c26:	d80a      	bhi.n	8005c3e <_printf_i+0x32>
 8005c28:	2f00      	cmp	r7, #0
 8005c2a:	f000 80d4 	beq.w	8005dd6 <_printf_i+0x1ca>
 8005c2e:	2f58      	cmp	r7, #88	; 0x58
 8005c30:	f000 80c0 	beq.w	8005db4 <_printf_i+0x1a8>
 8005c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c3c:	e03a      	b.n	8005cb4 <_printf_i+0xa8>
 8005c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c42:	2b15      	cmp	r3, #21
 8005c44:	d8f6      	bhi.n	8005c34 <_printf_i+0x28>
 8005c46:	a101      	add	r1, pc, #4	; (adr r1, 8005c4c <_printf_i+0x40>)
 8005c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cb9 	.word	0x08005cb9
 8005c54:	08005c35 	.word	0x08005c35
 8005c58:	08005c35 	.word	0x08005c35
 8005c5c:	08005c35 	.word	0x08005c35
 8005c60:	08005c35 	.word	0x08005c35
 8005c64:	08005cb9 	.word	0x08005cb9
 8005c68:	08005c35 	.word	0x08005c35
 8005c6c:	08005c35 	.word	0x08005c35
 8005c70:	08005c35 	.word	0x08005c35
 8005c74:	08005c35 	.word	0x08005c35
 8005c78:	08005dbd 	.word	0x08005dbd
 8005c7c:	08005ce5 	.word	0x08005ce5
 8005c80:	08005d77 	.word	0x08005d77
 8005c84:	08005c35 	.word	0x08005c35
 8005c88:	08005c35 	.word	0x08005c35
 8005c8c:	08005ddf 	.word	0x08005ddf
 8005c90:	08005c35 	.word	0x08005c35
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005c35 	.word	0x08005c35
 8005c9c:	08005c35 	.word	0x08005c35
 8005ca0:	08005d7f 	.word	0x08005d7f
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	1d1a      	adds	r2, r3, #4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	602a      	str	r2, [r5, #0]
 8005cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e09f      	b.n	8005df8 <_printf_i+0x1ec>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	0607      	lsls	r7, r0, #24
 8005cbe:	f103 0104 	add.w	r1, r3, #4
 8005cc2:	6029      	str	r1, [r5, #0]
 8005cc4:	d501      	bpl.n	8005cca <_printf_i+0xbe>
 8005cc6:	681e      	ldr	r6, [r3, #0]
 8005cc8:	e003      	b.n	8005cd2 <_printf_i+0xc6>
 8005cca:	0646      	lsls	r6, r0, #25
 8005ccc:	d5fb      	bpl.n	8005cc6 <_printf_i+0xba>
 8005cce:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cd2:	2e00      	cmp	r6, #0
 8005cd4:	da03      	bge.n	8005cde <_printf_i+0xd2>
 8005cd6:	232d      	movs	r3, #45	; 0x2d
 8005cd8:	4276      	negs	r6, r6
 8005cda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cde:	485a      	ldr	r0, [pc, #360]	; (8005e48 <_printf_i+0x23c>)
 8005ce0:	230a      	movs	r3, #10
 8005ce2:	e012      	b.n	8005d0a <_printf_i+0xfe>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	1d19      	adds	r1, r3, #4
 8005cea:	6029      	str	r1, [r5, #0]
 8005cec:	0605      	lsls	r5, r0, #24
 8005cee:	d501      	bpl.n	8005cf4 <_printf_i+0xe8>
 8005cf0:	681e      	ldr	r6, [r3, #0]
 8005cf2:	e002      	b.n	8005cfa <_printf_i+0xee>
 8005cf4:	0641      	lsls	r1, r0, #25
 8005cf6:	d5fb      	bpl.n	8005cf0 <_printf_i+0xe4>
 8005cf8:	881e      	ldrh	r6, [r3, #0]
 8005cfa:	4853      	ldr	r0, [pc, #332]	; (8005e48 <_printf_i+0x23c>)
 8005cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cfe:	bf0c      	ite	eq
 8005d00:	2308      	moveq	r3, #8
 8005d02:	230a      	movne	r3, #10
 8005d04:	2100      	movs	r1, #0
 8005d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d0a:	6865      	ldr	r5, [r4, #4]
 8005d0c:	60a5      	str	r5, [r4, #8]
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	bfa2      	ittt	ge
 8005d12:	6821      	ldrge	r1, [r4, #0]
 8005d14:	f021 0104 	bicge.w	r1, r1, #4
 8005d18:	6021      	strge	r1, [r4, #0]
 8005d1a:	b90e      	cbnz	r6, 8005d20 <_printf_i+0x114>
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	d04b      	beq.n	8005db8 <_printf_i+0x1ac>
 8005d20:	4615      	mov	r5, r2
 8005d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d26:	fb03 6711 	mls	r7, r3, r1, r6
 8005d2a:	5dc7      	ldrb	r7, [r0, r7]
 8005d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d30:	4637      	mov	r7, r6
 8005d32:	42bb      	cmp	r3, r7
 8005d34:	460e      	mov	r6, r1
 8005d36:	d9f4      	bls.n	8005d22 <_printf_i+0x116>
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d10b      	bne.n	8005d54 <_printf_i+0x148>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	07de      	lsls	r6, r3, #31
 8005d40:	d508      	bpl.n	8005d54 <_printf_i+0x148>
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	6861      	ldr	r1, [r4, #4]
 8005d46:	4299      	cmp	r1, r3
 8005d48:	bfde      	ittt	le
 8005d4a:	2330      	movle	r3, #48	; 0x30
 8005d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d54:	1b52      	subs	r2, r2, r5
 8005d56:	6122      	str	r2, [r4, #16]
 8005d58:	f8cd a000 	str.w	sl, [sp]
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	aa03      	add	r2, sp, #12
 8005d60:	4621      	mov	r1, r4
 8005d62:	4640      	mov	r0, r8
 8005d64:	f7ff fee4 	bl	8005b30 <_printf_common>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d14a      	bne.n	8005e02 <_printf_i+0x1f6>
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	b004      	add	sp, #16
 8005d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	f043 0320 	orr.w	r3, r3, #32
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	4833      	ldr	r0, [pc, #204]	; (8005e4c <_printf_i+0x240>)
 8005d80:	2778      	movs	r7, #120	; 0x78
 8005d82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	6829      	ldr	r1, [r5, #0]
 8005d8a:	061f      	lsls	r7, r3, #24
 8005d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d90:	d402      	bmi.n	8005d98 <_printf_i+0x18c>
 8005d92:	065f      	lsls	r7, r3, #25
 8005d94:	bf48      	it	mi
 8005d96:	b2b6      	uxthmi	r6, r6
 8005d98:	07df      	lsls	r7, r3, #31
 8005d9a:	bf48      	it	mi
 8005d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8005da0:	6029      	str	r1, [r5, #0]
 8005da2:	bf48      	it	mi
 8005da4:	6023      	strmi	r3, [r4, #0]
 8005da6:	b91e      	cbnz	r6, 8005db0 <_printf_i+0x1a4>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	f023 0320 	bic.w	r3, r3, #32
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	2310      	movs	r3, #16
 8005db2:	e7a7      	b.n	8005d04 <_printf_i+0xf8>
 8005db4:	4824      	ldr	r0, [pc, #144]	; (8005e48 <_printf_i+0x23c>)
 8005db6:	e7e4      	b.n	8005d82 <_printf_i+0x176>
 8005db8:	4615      	mov	r5, r2
 8005dba:	e7bd      	b.n	8005d38 <_printf_i+0x12c>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	6826      	ldr	r6, [r4, #0]
 8005dc0:	6961      	ldr	r1, [r4, #20]
 8005dc2:	1d18      	adds	r0, r3, #4
 8005dc4:	6028      	str	r0, [r5, #0]
 8005dc6:	0635      	lsls	r5, r6, #24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0x1c4>
 8005dcc:	6019      	str	r1, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <_printf_i+0x1ca>
 8005dd0:	0670      	lsls	r0, r6, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0x1c0>
 8005dd4:	8019      	strh	r1, [r3, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	4615      	mov	r5, r2
 8005ddc:	e7bc      	b.n	8005d58 <_printf_i+0x14c>
 8005dde:	682b      	ldr	r3, [r5, #0]
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	602a      	str	r2, [r5, #0]
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4628      	mov	r0, r5
 8005dec:	f7fa f9f0 	bl	80001d0 <memchr>
 8005df0:	b108      	cbz	r0, 8005df6 <_printf_i+0x1ea>
 8005df2:	1b40      	subs	r0, r0, r5
 8005df4:	6060      	str	r0, [r4, #4]
 8005df6:	6863      	ldr	r3, [r4, #4]
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e00:	e7aa      	b.n	8005d58 <_printf_i+0x14c>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	462a      	mov	r2, r5
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	47d0      	blx	sl
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d0ad      	beq.n	8005d6c <_printf_i+0x160>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	079b      	lsls	r3, r3, #30
 8005e14:	d413      	bmi.n	8005e3e <_printf_i+0x232>
 8005e16:	68e0      	ldr	r0, [r4, #12]
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	bfb8      	it	lt
 8005e1e:	4618      	movlt	r0, r3
 8005e20:	e7a6      	b.n	8005d70 <_printf_i+0x164>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4632      	mov	r2, r6
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	47d0      	blx	sl
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d09d      	beq.n	8005d6c <_printf_i+0x160>
 8005e30:	3501      	adds	r5, #1
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	9903      	ldr	r1, [sp, #12]
 8005e36:	1a5b      	subs	r3, r3, r1
 8005e38:	42ab      	cmp	r3, r5
 8005e3a:	dcf2      	bgt.n	8005e22 <_printf_i+0x216>
 8005e3c:	e7eb      	b.n	8005e16 <_printf_i+0x20a>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	f104 0619 	add.w	r6, r4, #25
 8005e44:	e7f5      	b.n	8005e32 <_printf_i+0x226>
 8005e46:	bf00      	nop
 8005e48:	08007b19 	.word	0x08007b19
 8005e4c:	08007b2a 	.word	0x08007b2a

08005e50 <__svfiscanf_r>:
 8005e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e54:	461d      	mov	r5, r3
 8005e56:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005e58:	07df      	lsls	r7, r3, #31
 8005e5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	4692      	mov	sl, r2
 8005e64:	d405      	bmi.n	8005e72 <__svfiscanf_r+0x22>
 8005e66:	898b      	ldrh	r3, [r1, #12]
 8005e68:	0598      	lsls	r0, r3, #22
 8005e6a:	d402      	bmi.n	8005e72 <__svfiscanf_r+0x22>
 8005e6c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005e6e:	f7ff fc20 	bl	80056b2 <__retarget_lock_acquire_recursive>
 8005e72:	2300      	movs	r3, #0
 8005e74:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8005e78:	4baa      	ldr	r3, [pc, #680]	; (8006124 <__svfiscanf_r+0x2d4>)
 8005e7a:	93a0      	str	r3, [sp, #640]	; 0x280
 8005e7c:	f10d 0804 	add.w	r8, sp, #4
 8005e80:	4ba9      	ldr	r3, [pc, #676]	; (8006128 <__svfiscanf_r+0x2d8>)
 8005e82:	4faa      	ldr	r7, [pc, #680]	; (800612c <__svfiscanf_r+0x2dc>)
 8005e84:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8006130 <__svfiscanf_r+0x2e0>
 8005e88:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005e8c:	93a1      	str	r3, [sp, #644]	; 0x284
 8005e8e:	9500      	str	r5, [sp, #0]
 8005e90:	f89a 3000 	ldrb.w	r3, [sl]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8170 	beq.w	800617a <__svfiscanf_r+0x32a>
 8005e9a:	5cf9      	ldrb	r1, [r7, r3]
 8005e9c:	f011 0108 	ands.w	r1, r1, #8
 8005ea0:	f10a 0501 	add.w	r5, sl, #1
 8005ea4:	d019      	beq.n	8005eda <__svfiscanf_r+0x8a>
 8005ea6:	6863      	ldr	r3, [r4, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd0f      	ble.n	8005ecc <__svfiscanf_r+0x7c>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	5cba      	ldrb	r2, [r7, r2]
 8005eb2:	0711      	lsls	r1, r2, #28
 8005eb4:	d401      	bmi.n	8005eba <__svfiscanf_r+0x6a>
 8005eb6:	46aa      	mov	sl, r5
 8005eb8:	e7ea      	b.n	8005e90 <__svfiscanf_r+0x40>
 8005eba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ebc:	3201      	adds	r2, #1
 8005ebe:	9245      	str	r2, [sp, #276]	; 0x114
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	3a01      	subs	r2, #1
 8005ec6:	6062      	str	r2, [r4, #4]
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	e7ec      	b.n	8005ea6 <__svfiscanf_r+0x56>
 8005ecc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4798      	blx	r3
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0e9      	beq.n	8005eac <__svfiscanf_r+0x5c>
 8005ed8:	e7ed      	b.n	8005eb6 <__svfiscanf_r+0x66>
 8005eda:	2b25      	cmp	r3, #37	; 0x25
 8005edc:	d012      	beq.n	8005f04 <__svfiscanf_r+0xb4>
 8005ede:	469a      	mov	sl, r3
 8005ee0:	6863      	ldr	r3, [r4, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f340 8093 	ble.w	800600e <__svfiscanf_r+0x1be>
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	7813      	ldrb	r3, [r2, #0]
 8005eec:	4553      	cmp	r3, sl
 8005eee:	f040 8144 	bne.w	800617a <__svfiscanf_r+0x32a>
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005efa:	3201      	adds	r2, #1
 8005efc:	3301      	adds	r3, #1
 8005efe:	6022      	str	r2, [r4, #0]
 8005f00:	9345      	str	r3, [sp, #276]	; 0x114
 8005f02:	e7d8      	b.n	8005eb6 <__svfiscanf_r+0x66>
 8005f04:	9141      	str	r1, [sp, #260]	; 0x104
 8005f06:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f08:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f0e:	bf02      	ittt	eq
 8005f10:	2310      	moveq	r3, #16
 8005f12:	9341      	streq	r3, [sp, #260]	; 0x104
 8005f14:	f10a 0502 	addeq.w	r5, sl, #2
 8005f18:	220a      	movs	r2, #10
 8005f1a:	46aa      	mov	sl, r5
 8005f1c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005f20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005f24:	2b09      	cmp	r3, #9
 8005f26:	d91d      	bls.n	8005f64 <__svfiscanf_r+0x114>
 8005f28:	4881      	ldr	r0, [pc, #516]	; (8006130 <__svfiscanf_r+0x2e0>)
 8005f2a:	2203      	movs	r2, #3
 8005f2c:	f7fa f950 	bl	80001d0 <memchr>
 8005f30:	b138      	cbz	r0, 8005f42 <__svfiscanf_r+0xf2>
 8005f32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005f34:	eba0 0009 	sub.w	r0, r0, r9
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4083      	lsls	r3, r0
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	9341      	str	r3, [sp, #260]	; 0x104
 8005f40:	4655      	mov	r5, sl
 8005f42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f46:	2b78      	cmp	r3, #120	; 0x78
 8005f48:	d807      	bhi.n	8005f5a <__svfiscanf_r+0x10a>
 8005f4a:	2b57      	cmp	r3, #87	; 0x57
 8005f4c:	d811      	bhi.n	8005f72 <__svfiscanf_r+0x122>
 8005f4e:	2b25      	cmp	r3, #37	; 0x25
 8005f50:	d0c5      	beq.n	8005ede <__svfiscanf_r+0x8e>
 8005f52:	d857      	bhi.n	8006004 <__svfiscanf_r+0x1b4>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80c6 	beq.w	80060e6 <__svfiscanf_r+0x296>
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f5e:	230a      	movs	r3, #10
 8005f60:	9342      	str	r3, [sp, #264]	; 0x108
 8005f62:	e07f      	b.n	8006064 <__svfiscanf_r+0x214>
 8005f64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005f66:	fb02 1103 	mla	r1, r2, r3, r1
 8005f6a:	3930      	subs	r1, #48	; 0x30
 8005f6c:	9143      	str	r1, [sp, #268]	; 0x10c
 8005f6e:	4655      	mov	r5, sl
 8005f70:	e7d3      	b.n	8005f1a <__svfiscanf_r+0xca>
 8005f72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005f76:	2a20      	cmp	r2, #32
 8005f78:	d8ef      	bhi.n	8005f5a <__svfiscanf_r+0x10a>
 8005f7a:	a101      	add	r1, pc, #4	; (adr r1, 8005f80 <__svfiscanf_r+0x130>)
 8005f7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005f80:	08006047 	.word	0x08006047
 8005f84:	08005f5b 	.word	0x08005f5b
 8005f88:	08005f5b 	.word	0x08005f5b
 8005f8c:	080060a5 	.word	0x080060a5
 8005f90:	08005f5b 	.word	0x08005f5b
 8005f94:	08005f5b 	.word	0x08005f5b
 8005f98:	08005f5b 	.word	0x08005f5b
 8005f9c:	08005f5b 	.word	0x08005f5b
 8005fa0:	08005f5b 	.word	0x08005f5b
 8005fa4:	08005f5b 	.word	0x08005f5b
 8005fa8:	08005f5b 	.word	0x08005f5b
 8005fac:	080060bb 	.word	0x080060bb
 8005fb0:	080060a1 	.word	0x080060a1
 8005fb4:	0800600b 	.word	0x0800600b
 8005fb8:	0800600b 	.word	0x0800600b
 8005fbc:	0800600b 	.word	0x0800600b
 8005fc0:	08005f5b 	.word	0x08005f5b
 8005fc4:	0800605d 	.word	0x0800605d
 8005fc8:	08005f5b 	.word	0x08005f5b
 8005fcc:	08005f5b 	.word	0x08005f5b
 8005fd0:	08005f5b 	.word	0x08005f5b
 8005fd4:	08005f5b 	.word	0x08005f5b
 8005fd8:	080060cb 	.word	0x080060cb
 8005fdc:	08006099 	.word	0x08006099
 8005fe0:	0800603f 	.word	0x0800603f
 8005fe4:	08005f5b 	.word	0x08005f5b
 8005fe8:	08005f5b 	.word	0x08005f5b
 8005fec:	080060c7 	.word	0x080060c7
 8005ff0:	08005f5b 	.word	0x08005f5b
 8005ff4:	080060a1 	.word	0x080060a1
 8005ff8:	08005f5b 	.word	0x08005f5b
 8005ffc:	08005f5b 	.word	0x08005f5b
 8006000:	08006047 	.word	0x08006047
 8006004:	3b45      	subs	r3, #69	; 0x45
 8006006:	2b02      	cmp	r3, #2
 8006008:	d8a7      	bhi.n	8005f5a <__svfiscanf_r+0x10a>
 800600a:	2305      	movs	r3, #5
 800600c:	e029      	b.n	8006062 <__svfiscanf_r+0x212>
 800600e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006010:	4621      	mov	r1, r4
 8006012:	4630      	mov	r0, r6
 8006014:	4798      	blx	r3
 8006016:	2800      	cmp	r0, #0
 8006018:	f43f af66 	beq.w	8005ee8 <__svfiscanf_r+0x98>
 800601c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601e:	07da      	lsls	r2, r3, #31
 8006020:	f140 80a3 	bpl.w	800616a <__svfiscanf_r+0x31a>
 8006024:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006026:	2800      	cmp	r0, #0
 8006028:	d066      	beq.n	80060f8 <__svfiscanf_r+0x2a8>
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006030:	bf18      	it	ne
 8006032:	f04f 30ff 	movne.w	r0, #4294967295
 8006036:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006040:	f042 0220 	orr.w	r2, r2, #32
 8006044:	9241      	str	r2, [sp, #260]	; 0x104
 8006046:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800604c:	9241      	str	r2, [sp, #260]	; 0x104
 800604e:	2210      	movs	r2, #16
 8006050:	2b6f      	cmp	r3, #111	; 0x6f
 8006052:	9242      	str	r2, [sp, #264]	; 0x108
 8006054:	bf34      	ite	cc
 8006056:	2303      	movcc	r3, #3
 8006058:	2304      	movcs	r3, #4
 800605a:	e002      	b.n	8006062 <__svfiscanf_r+0x212>
 800605c:	2300      	movs	r3, #0
 800605e:	9342      	str	r3, [sp, #264]	; 0x108
 8006060:	2303      	movs	r3, #3
 8006062:	9347      	str	r3, [sp, #284]	; 0x11c
 8006064:	6863      	ldr	r3, [r4, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd49      	ble.n	80060fe <__svfiscanf_r+0x2ae>
 800606a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800606c:	065b      	lsls	r3, r3, #25
 800606e:	d404      	bmi.n	800607a <__svfiscanf_r+0x22a>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	781a      	ldrb	r2, [r3, #0]
 8006074:	5cba      	ldrb	r2, [r7, r2]
 8006076:	0710      	lsls	r0, r2, #28
 8006078:	d448      	bmi.n	800610c <__svfiscanf_r+0x2bc>
 800607a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800607c:	2b02      	cmp	r3, #2
 800607e:	dc60      	bgt.n	8006142 <__svfiscanf_r+0x2f2>
 8006080:	466b      	mov	r3, sp
 8006082:	4622      	mov	r2, r4
 8006084:	a941      	add	r1, sp, #260	; 0x104
 8006086:	4630      	mov	r0, r6
 8006088:	f000 f898 	bl	80061bc <_scanf_chars>
 800608c:	2801      	cmp	r0, #1
 800608e:	d074      	beq.n	800617a <__svfiscanf_r+0x32a>
 8006090:	2802      	cmp	r0, #2
 8006092:	f47f af10 	bne.w	8005eb6 <__svfiscanf_r+0x66>
 8006096:	e7c1      	b.n	800601c <__svfiscanf_r+0x1cc>
 8006098:	2308      	movs	r3, #8
 800609a:	9342      	str	r3, [sp, #264]	; 0x108
 800609c:	2304      	movs	r3, #4
 800609e:	e7e0      	b.n	8006062 <__svfiscanf_r+0x212>
 80060a0:	220a      	movs	r2, #10
 80060a2:	e7d5      	b.n	8006050 <__svfiscanf_r+0x200>
 80060a4:	4629      	mov	r1, r5
 80060a6:	4640      	mov	r0, r8
 80060a8:	f000 fb0a 	bl	80066c0 <__sccl>
 80060ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b2:	9341      	str	r3, [sp, #260]	; 0x104
 80060b4:	4605      	mov	r5, r0
 80060b6:	2301      	movs	r3, #1
 80060b8:	e7d3      	b.n	8006062 <__svfiscanf_r+0x212>
 80060ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80060bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060c0:	9341      	str	r3, [sp, #260]	; 0x104
 80060c2:	2300      	movs	r3, #0
 80060c4:	e7cd      	b.n	8006062 <__svfiscanf_r+0x212>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e7cb      	b.n	8006062 <__svfiscanf_r+0x212>
 80060ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80060cc:	06c3      	lsls	r3, r0, #27
 80060ce:	f53f aef2 	bmi.w	8005eb6 <__svfiscanf_r+0x66>
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80060d6:	1d19      	adds	r1, r3, #4
 80060d8:	9100      	str	r1, [sp, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	07c0      	lsls	r0, r0, #31
 80060de:	bf4c      	ite	mi
 80060e0:	801a      	strhmi	r2, [r3, #0]
 80060e2:	601a      	strpl	r2, [r3, #0]
 80060e4:	e6e7      	b.n	8005eb6 <__svfiscanf_r+0x66>
 80060e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e8:	07d8      	lsls	r0, r3, #31
 80060ea:	d405      	bmi.n	80060f8 <__svfiscanf_r+0x2a8>
 80060ec:	89a3      	ldrh	r3, [r4, #12]
 80060ee:	0599      	lsls	r1, r3, #22
 80060f0:	d402      	bmi.n	80060f8 <__svfiscanf_r+0x2a8>
 80060f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f4:	f7ff fade 	bl	80056b4 <__retarget_lock_release_recursive>
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	e79b      	b.n	8006036 <__svfiscanf_r+0x1e6>
 80060fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006100:	4621      	mov	r1, r4
 8006102:	4630      	mov	r0, r6
 8006104:	4798      	blx	r3
 8006106:	2800      	cmp	r0, #0
 8006108:	d0af      	beq.n	800606a <__svfiscanf_r+0x21a>
 800610a:	e787      	b.n	800601c <__svfiscanf_r+0x1cc>
 800610c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800610e:	3201      	adds	r2, #1
 8006110:	9245      	str	r2, [sp, #276]	; 0x114
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	3a01      	subs	r2, #1
 8006116:	2a00      	cmp	r2, #0
 8006118:	6062      	str	r2, [r4, #4]
 800611a:	dd0b      	ble.n	8006134 <__svfiscanf_r+0x2e4>
 800611c:	3301      	adds	r3, #1
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	e7a6      	b.n	8006070 <__svfiscanf_r+0x220>
 8006122:	bf00      	nop
 8006124:	080067a7 	.word	0x080067a7
 8006128:	080065d1 	.word	0x080065d1
 800612c:	08007b57 	.word	0x08007b57
 8006130:	08007b0e 	.word	0x08007b0e
 8006134:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	4798      	blx	r3
 800613c:	2800      	cmp	r0, #0
 800613e:	d097      	beq.n	8006070 <__svfiscanf_r+0x220>
 8006140:	e76c      	b.n	800601c <__svfiscanf_r+0x1cc>
 8006142:	2b04      	cmp	r3, #4
 8006144:	dc06      	bgt.n	8006154 <__svfiscanf_r+0x304>
 8006146:	466b      	mov	r3, sp
 8006148:	4622      	mov	r2, r4
 800614a:	a941      	add	r1, sp, #260	; 0x104
 800614c:	4630      	mov	r0, r6
 800614e:	f000 f88f 	bl	8006270 <_scanf_i>
 8006152:	e79b      	b.n	800608c <__svfiscanf_r+0x23c>
 8006154:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <__svfiscanf_r+0x340>)
 8006156:	2b00      	cmp	r3, #0
 8006158:	f43f aead 	beq.w	8005eb6 <__svfiscanf_r+0x66>
 800615c:	466b      	mov	r3, sp
 800615e:	4622      	mov	r2, r4
 8006160:	a941      	add	r1, sp, #260	; 0x104
 8006162:	4630      	mov	r0, r6
 8006164:	f3af 8000 	nop.w
 8006168:	e790      	b.n	800608c <__svfiscanf_r+0x23c>
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	0599      	lsls	r1, r3, #22
 800616e:	f53f af59 	bmi.w	8006024 <__svfiscanf_r+0x1d4>
 8006172:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006174:	f7ff fa9e 	bl	80056b4 <__retarget_lock_release_recursive>
 8006178:	e754      	b.n	8006024 <__svfiscanf_r+0x1d4>
 800617a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800617c:	07da      	lsls	r2, r3, #31
 800617e:	d405      	bmi.n	800618c <__svfiscanf_r+0x33c>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	059b      	lsls	r3, r3, #22
 8006184:	d402      	bmi.n	800618c <__svfiscanf_r+0x33c>
 8006186:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006188:	f7ff fa94 	bl	80056b4 <__retarget_lock_release_recursive>
 800618c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800618e:	e752      	b.n	8006036 <__svfiscanf_r+0x1e6>
 8006190:	00000000 	.word	0x00000000

08006194 <_vfiscanf_r>:
 8006194:	b530      	push	{r4, r5, lr}
 8006196:	4604      	mov	r4, r0
 8006198:	b085      	sub	sp, #20
 800619a:	b148      	cbz	r0, 80061b0 <_vfiscanf_r+0x1c>
 800619c:	6a05      	ldr	r5, [r0, #32]
 800619e:	b93d      	cbnz	r5, 80061b0 <_vfiscanf_r+0x1c>
 80061a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061a4:	9101      	str	r1, [sp, #4]
 80061a6:	f7ff f96d 	bl	8005484 <__sinit>
 80061aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ae:	9901      	ldr	r1, [sp, #4]
 80061b0:	4620      	mov	r0, r4
 80061b2:	b005      	add	sp, #20
 80061b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b8:	f7ff be4a 	b.w	8005e50 <__svfiscanf_r>

080061bc <_scanf_chars>:
 80061bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061c0:	4615      	mov	r5, r2
 80061c2:	688a      	ldr	r2, [r1, #8]
 80061c4:	4680      	mov	r8, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	b932      	cbnz	r2, 80061d8 <_scanf_chars+0x1c>
 80061ca:	698a      	ldr	r2, [r1, #24]
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2201      	moveq	r2, #1
 80061d2:	f04f 32ff 	movne.w	r2, #4294967295
 80061d6:	608a      	str	r2, [r1, #8]
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800626c <_scanf_chars+0xb0>
 80061de:	06d1      	lsls	r1, r2, #27
 80061e0:	bf5f      	itttt	pl
 80061e2:	681a      	ldrpl	r2, [r3, #0]
 80061e4:	1d11      	addpl	r1, r2, #4
 80061e6:	6019      	strpl	r1, [r3, #0]
 80061e8:	6816      	ldrpl	r6, [r2, #0]
 80061ea:	2700      	movs	r7, #0
 80061ec:	69a0      	ldr	r0, [r4, #24]
 80061ee:	b188      	cbz	r0, 8006214 <_scanf_chars+0x58>
 80061f0:	2801      	cmp	r0, #1
 80061f2:	d107      	bne.n	8006204 <_scanf_chars+0x48>
 80061f4:	682a      	ldr	r2, [r5, #0]
 80061f6:	7811      	ldrb	r1, [r2, #0]
 80061f8:	6962      	ldr	r2, [r4, #20]
 80061fa:	5c52      	ldrb	r2, [r2, r1]
 80061fc:	b952      	cbnz	r2, 8006214 <_scanf_chars+0x58>
 80061fe:	2f00      	cmp	r7, #0
 8006200:	d031      	beq.n	8006266 <_scanf_chars+0xaa>
 8006202:	e022      	b.n	800624a <_scanf_chars+0x8e>
 8006204:	2802      	cmp	r0, #2
 8006206:	d120      	bne.n	800624a <_scanf_chars+0x8e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006210:	071b      	lsls	r3, r3, #28
 8006212:	d41a      	bmi.n	800624a <_scanf_chars+0x8e>
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	06da      	lsls	r2, r3, #27
 8006218:	bf5e      	ittt	pl
 800621a:	682b      	ldrpl	r3, [r5, #0]
 800621c:	781b      	ldrbpl	r3, [r3, #0]
 800621e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006222:	682a      	ldr	r2, [r5, #0]
 8006224:	686b      	ldr	r3, [r5, #4]
 8006226:	3201      	adds	r2, #1
 8006228:	602a      	str	r2, [r5, #0]
 800622a:	68a2      	ldr	r2, [r4, #8]
 800622c:	3b01      	subs	r3, #1
 800622e:	3a01      	subs	r2, #1
 8006230:	606b      	str	r3, [r5, #4]
 8006232:	3701      	adds	r7, #1
 8006234:	60a2      	str	r2, [r4, #8]
 8006236:	b142      	cbz	r2, 800624a <_scanf_chars+0x8e>
 8006238:	2b00      	cmp	r3, #0
 800623a:	dcd7      	bgt.n	80061ec <_scanf_chars+0x30>
 800623c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006240:	4629      	mov	r1, r5
 8006242:	4640      	mov	r0, r8
 8006244:	4798      	blx	r3
 8006246:	2800      	cmp	r0, #0
 8006248:	d0d0      	beq.n	80061ec <_scanf_chars+0x30>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f013 0310 	ands.w	r3, r3, #16
 8006250:	d105      	bne.n	800625e <_scanf_chars+0xa2>
 8006252:	68e2      	ldr	r2, [r4, #12]
 8006254:	3201      	adds	r2, #1
 8006256:	60e2      	str	r2, [r4, #12]
 8006258:	69a2      	ldr	r2, [r4, #24]
 800625a:	b102      	cbz	r2, 800625e <_scanf_chars+0xa2>
 800625c:	7033      	strb	r3, [r6, #0]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	443b      	add	r3, r7
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	2000      	movs	r0, #0
 8006266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626a:	bf00      	nop
 800626c:	08007b57 	.word	0x08007b57

08006270 <_scanf_i>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	4698      	mov	r8, r3
 8006276:	4b74      	ldr	r3, [pc, #464]	; (8006448 <_scanf_i+0x1d8>)
 8006278:	460c      	mov	r4, r1
 800627a:	4682      	mov	sl, r0
 800627c:	4616      	mov	r6, r2
 800627e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006282:	b087      	sub	sp, #28
 8006284:	ab03      	add	r3, sp, #12
 8006286:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800628a:	4b70      	ldr	r3, [pc, #448]	; (800644c <_scanf_i+0x1dc>)
 800628c:	69a1      	ldr	r1, [r4, #24]
 800628e:	4a70      	ldr	r2, [pc, #448]	; (8006450 <_scanf_i+0x1e0>)
 8006290:	2903      	cmp	r1, #3
 8006292:	bf18      	it	ne
 8006294:	461a      	movne	r2, r3
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	1e5a      	subs	r2, r3, #1
 800629c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80062a0:	bf88      	it	hi
 80062a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80062a6:	4627      	mov	r7, r4
 80062a8:	bf82      	ittt	hi
 80062aa:	eb03 0905 	addhi.w	r9, r3, r5
 80062ae:	f240 135d 	movwhi	r3, #349	; 0x15d
 80062b2:	60a3      	strhi	r3, [r4, #8]
 80062b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80062b8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80062bc:	bf98      	it	ls
 80062be:	f04f 0900 	movls.w	r9, #0
 80062c2:	6023      	str	r3, [r4, #0]
 80062c4:	463d      	mov	r5, r7
 80062c6:	f04f 0b00 	mov.w	fp, #0
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	ab03      	add	r3, sp, #12
 80062ce:	7809      	ldrb	r1, [r1, #0]
 80062d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80062d4:	2202      	movs	r2, #2
 80062d6:	f7f9 ff7b 	bl	80001d0 <memchr>
 80062da:	b328      	cbz	r0, 8006328 <_scanf_i+0xb8>
 80062dc:	f1bb 0f01 	cmp.w	fp, #1
 80062e0:	d159      	bne.n	8006396 <_scanf_i+0x126>
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	b92a      	cbnz	r2, 80062f2 <_scanf_i+0x82>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	2308      	movs	r3, #8
 80062ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	68a2      	ldr	r2, [r4, #8]
 80062fc:	1e51      	subs	r1, r2, #1
 80062fe:	60a1      	str	r1, [r4, #8]
 8006300:	b192      	cbz	r2, 8006328 <_scanf_i+0xb8>
 8006302:	6832      	ldr	r2, [r6, #0]
 8006304:	1c51      	adds	r1, r2, #1
 8006306:	6031      	str	r1, [r6, #0]
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	f805 2b01 	strb.w	r2, [r5], #1
 800630e:	6872      	ldr	r2, [r6, #4]
 8006310:	3a01      	subs	r2, #1
 8006312:	2a00      	cmp	r2, #0
 8006314:	6072      	str	r2, [r6, #4]
 8006316:	dc07      	bgt.n	8006328 <_scanf_i+0xb8>
 8006318:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800631c:	4631      	mov	r1, r6
 800631e:	4650      	mov	r0, sl
 8006320:	4790      	blx	r2
 8006322:	2800      	cmp	r0, #0
 8006324:	f040 8085 	bne.w	8006432 <_scanf_i+0x1c2>
 8006328:	f10b 0b01 	add.w	fp, fp, #1
 800632c:	f1bb 0f03 	cmp.w	fp, #3
 8006330:	d1cb      	bne.n	80062ca <_scanf_i+0x5a>
 8006332:	6863      	ldr	r3, [r4, #4]
 8006334:	b90b      	cbnz	r3, 800633a <_scanf_i+0xca>
 8006336:	230a      	movs	r3, #10
 8006338:	6063      	str	r3, [r4, #4]
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	4945      	ldr	r1, [pc, #276]	; (8006454 <_scanf_i+0x1e4>)
 800633e:	6960      	ldr	r0, [r4, #20]
 8006340:	1ac9      	subs	r1, r1, r3
 8006342:	f000 f9bd 	bl	80066c0 <__sccl>
 8006346:	f04f 0b00 	mov.w	fp, #0
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	6822      	ldr	r2, [r4, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d03d      	beq.n	80063ce <_scanf_i+0x15e>
 8006352:	6831      	ldr	r1, [r6, #0]
 8006354:	6960      	ldr	r0, [r4, #20]
 8006356:	f891 c000 	ldrb.w	ip, [r1]
 800635a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800635e:	2800      	cmp	r0, #0
 8006360:	d035      	beq.n	80063ce <_scanf_i+0x15e>
 8006362:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006366:	d124      	bne.n	80063b2 <_scanf_i+0x142>
 8006368:	0510      	lsls	r0, r2, #20
 800636a:	d522      	bpl.n	80063b2 <_scanf_i+0x142>
 800636c:	f10b 0b01 	add.w	fp, fp, #1
 8006370:	f1b9 0f00 	cmp.w	r9, #0
 8006374:	d003      	beq.n	800637e <_scanf_i+0x10e>
 8006376:	3301      	adds	r3, #1
 8006378:	f109 39ff 	add.w	r9, r9, #4294967295
 800637c:	60a3      	str	r3, [r4, #8]
 800637e:	6873      	ldr	r3, [r6, #4]
 8006380:	3b01      	subs	r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	6073      	str	r3, [r6, #4]
 8006386:	dd1b      	ble.n	80063c0 <_scanf_i+0x150>
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	3b01      	subs	r3, #1
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	e7d9      	b.n	800634a <_scanf_i+0xda>
 8006396:	f1bb 0f02 	cmp.w	fp, #2
 800639a:	d1ae      	bne.n	80062fa <_scanf_i+0x8a>
 800639c:	6822      	ldr	r2, [r4, #0]
 800639e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80063a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80063a6:	d1bf      	bne.n	8006328 <_scanf_i+0xb8>
 80063a8:	2310      	movs	r3, #16
 80063aa:	6063      	str	r3, [r4, #4]
 80063ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b0:	e7a2      	b.n	80062f8 <_scanf_i+0x88>
 80063b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80063b6:	6022      	str	r2, [r4, #0]
 80063b8:	780b      	ldrb	r3, [r1, #0]
 80063ba:	f805 3b01 	strb.w	r3, [r5], #1
 80063be:	e7de      	b.n	800637e <_scanf_i+0x10e>
 80063c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80063c4:	4631      	mov	r1, r6
 80063c6:	4650      	mov	r0, sl
 80063c8:	4798      	blx	r3
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d0df      	beq.n	800638e <_scanf_i+0x11e>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	05d9      	lsls	r1, r3, #23
 80063d2:	d50d      	bpl.n	80063f0 <_scanf_i+0x180>
 80063d4:	42bd      	cmp	r5, r7
 80063d6:	d909      	bls.n	80063ec <_scanf_i+0x17c>
 80063d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80063dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063e0:	4632      	mov	r2, r6
 80063e2:	4650      	mov	r0, sl
 80063e4:	4798      	blx	r3
 80063e6:	f105 39ff 	add.w	r9, r5, #4294967295
 80063ea:	464d      	mov	r5, r9
 80063ec:	42bd      	cmp	r5, r7
 80063ee:	d028      	beq.n	8006442 <_scanf_i+0x1d2>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	f012 0210 	ands.w	r2, r2, #16
 80063f6:	d113      	bne.n	8006420 <_scanf_i+0x1b0>
 80063f8:	702a      	strb	r2, [r5, #0]
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	9e01      	ldr	r6, [sp, #4]
 80063fe:	4639      	mov	r1, r7
 8006400:	4650      	mov	r0, sl
 8006402:	47b0      	blx	r6
 8006404:	f8d8 3000 	ldr.w	r3, [r8]
 8006408:	6821      	ldr	r1, [r4, #0]
 800640a:	1d1a      	adds	r2, r3, #4
 800640c:	f8c8 2000 	str.w	r2, [r8]
 8006410:	f011 0f20 	tst.w	r1, #32
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	d00f      	beq.n	8006438 <_scanf_i+0x1c8>
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60e3      	str	r3, [r4, #12]
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	1bed      	subs	r5, r5, r7
 8006424:	445d      	add	r5, fp
 8006426:	442b      	add	r3, r5
 8006428:	6123      	str	r3, [r4, #16]
 800642a:	2000      	movs	r0, #0
 800642c:	b007      	add	sp, #28
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	f04f 0b00 	mov.w	fp, #0
 8006436:	e7ca      	b.n	80063ce <_scanf_i+0x15e>
 8006438:	07ca      	lsls	r2, r1, #31
 800643a:	bf4c      	ite	mi
 800643c:	8018      	strhmi	r0, [r3, #0]
 800643e:	6018      	strpl	r0, [r3, #0]
 8006440:	e7eb      	b.n	800641a <_scanf_i+0x1aa>
 8006442:	2001      	movs	r0, #1
 8006444:	e7f2      	b.n	800642c <_scanf_i+0x1bc>
 8006446:	bf00      	nop
 8006448:	08007050 	.word	0x08007050
 800644c:	08006c61 	.word	0x08006c61
 8006450:	08006b79 	.word	0x08006b79
 8006454:	08007b4b 	.word	0x08007b4b

08006458 <__sflush_r>:
 8006458:	898a      	ldrh	r2, [r1, #12]
 800645a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	4605      	mov	r5, r0
 8006460:	0710      	lsls	r0, r2, #28
 8006462:	460c      	mov	r4, r1
 8006464:	d458      	bmi.n	8006518 <__sflush_r+0xc0>
 8006466:	684b      	ldr	r3, [r1, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	dc05      	bgt.n	8006478 <__sflush_r+0x20>
 800646c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	dc02      	bgt.n	8006478 <__sflush_r+0x20>
 8006472:	2000      	movs	r0, #0
 8006474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800647a:	2e00      	cmp	r6, #0
 800647c:	d0f9      	beq.n	8006472 <__sflush_r+0x1a>
 800647e:	2300      	movs	r3, #0
 8006480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006484:	682f      	ldr	r7, [r5, #0]
 8006486:	6a21      	ldr	r1, [r4, #32]
 8006488:	602b      	str	r3, [r5, #0]
 800648a:	d032      	beq.n	80064f2 <__sflush_r+0x9a>
 800648c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800648e:	89a3      	ldrh	r3, [r4, #12]
 8006490:	075a      	lsls	r2, r3, #29
 8006492:	d505      	bpl.n	80064a0 <__sflush_r+0x48>
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	1ac0      	subs	r0, r0, r3
 8006498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800649a:	b10b      	cbz	r3, 80064a0 <__sflush_r+0x48>
 800649c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800649e:	1ac0      	subs	r0, r0, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	4602      	mov	r2, r0
 80064a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a6:	6a21      	ldr	r1, [r4, #32]
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b0      	blx	r6
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	d106      	bne.n	80064c0 <__sflush_r+0x68>
 80064b2:	6829      	ldr	r1, [r5, #0]
 80064b4:	291d      	cmp	r1, #29
 80064b6:	d82b      	bhi.n	8006510 <__sflush_r+0xb8>
 80064b8:	4a29      	ldr	r2, [pc, #164]	; (8006560 <__sflush_r+0x108>)
 80064ba:	410a      	asrs	r2, r1
 80064bc:	07d6      	lsls	r6, r2, #31
 80064be:	d427      	bmi.n	8006510 <__sflush_r+0xb8>
 80064c0:	2200      	movs	r2, #0
 80064c2:	6062      	str	r2, [r4, #4]
 80064c4:	04d9      	lsls	r1, r3, #19
 80064c6:	6922      	ldr	r2, [r4, #16]
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	d504      	bpl.n	80064d6 <__sflush_r+0x7e>
 80064cc:	1c42      	adds	r2, r0, #1
 80064ce:	d101      	bne.n	80064d4 <__sflush_r+0x7c>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b903      	cbnz	r3, 80064d6 <__sflush_r+0x7e>
 80064d4:	6560      	str	r0, [r4, #84]	; 0x54
 80064d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d8:	602f      	str	r7, [r5, #0]
 80064da:	2900      	cmp	r1, #0
 80064dc:	d0c9      	beq.n	8006472 <__sflush_r+0x1a>
 80064de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064e2:	4299      	cmp	r1, r3
 80064e4:	d002      	beq.n	80064ec <__sflush_r+0x94>
 80064e6:	4628      	mov	r0, r5
 80064e8:	f7ff f8e6 	bl	80056b8 <_free_r>
 80064ec:	2000      	movs	r0, #0
 80064ee:	6360      	str	r0, [r4, #52]	; 0x34
 80064f0:	e7c0      	b.n	8006474 <__sflush_r+0x1c>
 80064f2:	2301      	movs	r3, #1
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b0      	blx	r6
 80064f8:	1c41      	adds	r1, r0, #1
 80064fa:	d1c8      	bne.n	800648e <__sflush_r+0x36>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0c5      	beq.n	800648e <__sflush_r+0x36>
 8006502:	2b1d      	cmp	r3, #29
 8006504:	d001      	beq.n	800650a <__sflush_r+0xb2>
 8006506:	2b16      	cmp	r3, #22
 8006508:	d101      	bne.n	800650e <__sflush_r+0xb6>
 800650a:	602f      	str	r7, [r5, #0]
 800650c:	e7b1      	b.n	8006472 <__sflush_r+0x1a>
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	e7ad      	b.n	8006474 <__sflush_r+0x1c>
 8006518:	690f      	ldr	r7, [r1, #16]
 800651a:	2f00      	cmp	r7, #0
 800651c:	d0a9      	beq.n	8006472 <__sflush_r+0x1a>
 800651e:	0793      	lsls	r3, r2, #30
 8006520:	680e      	ldr	r6, [r1, #0]
 8006522:	bf08      	it	eq
 8006524:	694b      	ldreq	r3, [r1, #20]
 8006526:	600f      	str	r7, [r1, #0]
 8006528:	bf18      	it	ne
 800652a:	2300      	movne	r3, #0
 800652c:	eba6 0807 	sub.w	r8, r6, r7
 8006530:	608b      	str	r3, [r1, #8]
 8006532:	f1b8 0f00 	cmp.w	r8, #0
 8006536:	dd9c      	ble.n	8006472 <__sflush_r+0x1a>
 8006538:	6a21      	ldr	r1, [r4, #32]
 800653a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800653c:	4643      	mov	r3, r8
 800653e:	463a      	mov	r2, r7
 8006540:	4628      	mov	r0, r5
 8006542:	47b0      	blx	r6
 8006544:	2800      	cmp	r0, #0
 8006546:	dc06      	bgt.n	8006556 <__sflush_r+0xfe>
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e78e      	b.n	8006474 <__sflush_r+0x1c>
 8006556:	4407      	add	r7, r0
 8006558:	eba8 0800 	sub.w	r8, r8, r0
 800655c:	e7e9      	b.n	8006532 <__sflush_r+0xda>
 800655e:	bf00      	nop
 8006560:	dfbffffe 	.word	0xdfbffffe

08006564 <_fflush_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	690b      	ldr	r3, [r1, #16]
 8006568:	4605      	mov	r5, r0
 800656a:	460c      	mov	r4, r1
 800656c:	b913      	cbnz	r3, 8006574 <_fflush_r+0x10>
 800656e:	2500      	movs	r5, #0
 8006570:	4628      	mov	r0, r5
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	b118      	cbz	r0, 800657e <_fflush_r+0x1a>
 8006576:	6a03      	ldr	r3, [r0, #32]
 8006578:	b90b      	cbnz	r3, 800657e <_fflush_r+0x1a>
 800657a:	f7fe ff83 	bl	8005484 <__sinit>
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f3      	beq.n	800656e <_fflush_r+0xa>
 8006586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006588:	07d0      	lsls	r0, r2, #31
 800658a:	d404      	bmi.n	8006596 <_fflush_r+0x32>
 800658c:	0599      	lsls	r1, r3, #22
 800658e:	d402      	bmi.n	8006596 <_fflush_r+0x32>
 8006590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006592:	f7ff f88e 	bl	80056b2 <__retarget_lock_acquire_recursive>
 8006596:	4628      	mov	r0, r5
 8006598:	4621      	mov	r1, r4
 800659a:	f7ff ff5d 	bl	8006458 <__sflush_r>
 800659e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a0:	07da      	lsls	r2, r3, #31
 80065a2:	4605      	mov	r5, r0
 80065a4:	d4e4      	bmi.n	8006570 <_fflush_r+0xc>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	059b      	lsls	r3, r3, #22
 80065aa:	d4e1      	bmi.n	8006570 <_fflush_r+0xc>
 80065ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ae:	f7ff f881 	bl	80056b4 <__retarget_lock_release_recursive>
 80065b2:	e7dd      	b.n	8006570 <_fflush_r+0xc>

080065b4 <lflush>:
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	f003 0309 	and.w	r3, r3, #9
 80065ba:	2b09      	cmp	r3, #9
 80065bc:	d103      	bne.n	80065c6 <lflush+0x12>
 80065be:	4b03      	ldr	r3, [pc, #12]	; (80065cc <lflush+0x18>)
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f7ff bfcf 	b.w	8006564 <_fflush_r>
 80065c6:	2000      	movs	r0, #0
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000008c 	.word	0x2000008c

080065d0 <__srefill_r>:
 80065d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d2:	460c      	mov	r4, r1
 80065d4:	4605      	mov	r5, r0
 80065d6:	b118      	cbz	r0, 80065e0 <__srefill_r+0x10>
 80065d8:	6a03      	ldr	r3, [r0, #32]
 80065da:	b90b      	cbnz	r3, 80065e0 <__srefill_r+0x10>
 80065dc:	f7fe ff52 	bl	8005484 <__sinit>
 80065e0:	2300      	movs	r3, #0
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ea:	069e      	lsls	r6, r3, #26
 80065ec:	d502      	bpl.n	80065f4 <__srefill_r+0x24>
 80065ee:	f04f 30ff 	mov.w	r0, #4294967295
 80065f2:	e05c      	b.n	80066ae <__srefill_r+0xde>
 80065f4:	0758      	lsls	r0, r3, #29
 80065f6:	d448      	bmi.n	800668a <__srefill_r+0xba>
 80065f8:	06d9      	lsls	r1, r3, #27
 80065fa:	d405      	bmi.n	8006608 <__srefill_r+0x38>
 80065fc:	2309      	movs	r3, #9
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	e7f2      	b.n	80065ee <__srefill_r+0x1e>
 8006608:	071a      	lsls	r2, r3, #28
 800660a:	d50b      	bpl.n	8006624 <__srefill_r+0x54>
 800660c:	4621      	mov	r1, r4
 800660e:	4628      	mov	r0, r5
 8006610:	f7ff ffa8 	bl	8006564 <_fflush_r>
 8006614:	2800      	cmp	r0, #0
 8006616:	d1ea      	bne.n	80065ee <__srefill_r+0x1e>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	60a0      	str	r0, [r4, #8]
 800661c:	f023 0308 	bic.w	r3, r3, #8
 8006620:	81a3      	strh	r3, [r4, #12]
 8006622:	61a0      	str	r0, [r4, #24]
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f043 0304 	orr.w	r3, r3, #4
 800662a:	81a3      	strh	r3, [r4, #12]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	b91b      	cbnz	r3, 8006638 <__srefill_r+0x68>
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 fb3c 	bl	8006cb0 <__smakebuf_r>
 8006638:	89a6      	ldrh	r6, [r4, #12]
 800663a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800663e:	07b3      	lsls	r3, r6, #30
 8006640:	d00f      	beq.n	8006662 <__srefill_r+0x92>
 8006642:	2301      	movs	r3, #1
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <__srefill_r+0xe4>)
 8006646:	491c      	ldr	r1, [pc, #112]	; (80066b8 <__srefill_r+0xe8>)
 8006648:	481c      	ldr	r0, [pc, #112]	; (80066bc <__srefill_r+0xec>)
 800664a:	81a3      	strh	r3, [r4, #12]
 800664c:	f006 0609 	and.w	r6, r6, #9
 8006650:	f7fe ff30 	bl	80054b4 <_fwalk_sglue>
 8006654:	2e09      	cmp	r6, #9
 8006656:	81a7      	strh	r7, [r4, #12]
 8006658:	d103      	bne.n	8006662 <__srefill_r+0x92>
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f7ff fefb 	bl	8006458 <__sflush_r>
 8006662:	6922      	ldr	r2, [r4, #16]
 8006664:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006666:	6963      	ldr	r3, [r4, #20]
 8006668:	6a21      	ldr	r1, [r4, #32]
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	4628      	mov	r0, r5
 800666e:	47b0      	blx	r6
 8006670:	2800      	cmp	r0, #0
 8006672:	6060      	str	r0, [r4, #4]
 8006674:	dc1c      	bgt.n	80066b0 <__srefill_r+0xe0>
 8006676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667a:	bf17      	itett	ne
 800667c:	2200      	movne	r2, #0
 800667e:	f043 0320 	orreq.w	r3, r3, #32
 8006682:	6062      	strne	r2, [r4, #4]
 8006684:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006688:	e7bc      	b.n	8006604 <__srefill_r+0x34>
 800668a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800668c:	2900      	cmp	r1, #0
 800668e:	d0cd      	beq.n	800662c <__srefill_r+0x5c>
 8006690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006694:	4299      	cmp	r1, r3
 8006696:	d002      	beq.n	800669e <__srefill_r+0xce>
 8006698:	4628      	mov	r0, r5
 800669a:	f7ff f80d 	bl	80056b8 <_free_r>
 800669e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066a0:	6063      	str	r3, [r4, #4]
 80066a2:	2000      	movs	r0, #0
 80066a4:	6360      	str	r0, [r4, #52]	; 0x34
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0c0      	beq.n	800662c <__srefill_r+0x5c>
 80066aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066b0:	2000      	movs	r0, #0
 80066b2:	e7fc      	b.n	80066ae <__srefill_r+0xde>
 80066b4:	20000034 	.word	0x20000034
 80066b8:	080065b5 	.word	0x080065b5
 80066bc:	20000040 	.word	0x20000040

080066c0 <__sccl>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	780b      	ldrb	r3, [r1, #0]
 80066c4:	4604      	mov	r4, r0
 80066c6:	2b5e      	cmp	r3, #94	; 0x5e
 80066c8:	bf0b      	itete	eq
 80066ca:	784b      	ldrbeq	r3, [r1, #1]
 80066cc:	1c4a      	addne	r2, r1, #1
 80066ce:	1c8a      	addeq	r2, r1, #2
 80066d0:	2100      	movne	r1, #0
 80066d2:	bf08      	it	eq
 80066d4:	2101      	moveq	r1, #1
 80066d6:	3801      	subs	r0, #1
 80066d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80066dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 80066e0:	42a8      	cmp	r0, r5
 80066e2:	d1fb      	bne.n	80066dc <__sccl+0x1c>
 80066e4:	b90b      	cbnz	r3, 80066ea <__sccl+0x2a>
 80066e6:	1e50      	subs	r0, r2, #1
 80066e8:	bd70      	pop	{r4, r5, r6, pc}
 80066ea:	f081 0101 	eor.w	r1, r1, #1
 80066ee:	54e1      	strb	r1, [r4, r3]
 80066f0:	4610      	mov	r0, r2
 80066f2:	4602      	mov	r2, r0
 80066f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80066f8:	2d2d      	cmp	r5, #45	; 0x2d
 80066fa:	d005      	beq.n	8006708 <__sccl+0x48>
 80066fc:	2d5d      	cmp	r5, #93	; 0x5d
 80066fe:	d016      	beq.n	800672e <__sccl+0x6e>
 8006700:	2d00      	cmp	r5, #0
 8006702:	d0f1      	beq.n	80066e8 <__sccl+0x28>
 8006704:	462b      	mov	r3, r5
 8006706:	e7f2      	b.n	80066ee <__sccl+0x2e>
 8006708:	7846      	ldrb	r6, [r0, #1]
 800670a:	2e5d      	cmp	r6, #93	; 0x5d
 800670c:	d0fa      	beq.n	8006704 <__sccl+0x44>
 800670e:	42b3      	cmp	r3, r6
 8006710:	dcf8      	bgt.n	8006704 <__sccl+0x44>
 8006712:	3002      	adds	r0, #2
 8006714:	461a      	mov	r2, r3
 8006716:	3201      	adds	r2, #1
 8006718:	4296      	cmp	r6, r2
 800671a:	54a1      	strb	r1, [r4, r2]
 800671c:	dcfb      	bgt.n	8006716 <__sccl+0x56>
 800671e:	1af2      	subs	r2, r6, r3
 8006720:	3a01      	subs	r2, #1
 8006722:	1c5d      	adds	r5, r3, #1
 8006724:	42b3      	cmp	r3, r6
 8006726:	bfa8      	it	ge
 8006728:	2200      	movge	r2, #0
 800672a:	18ab      	adds	r3, r5, r2
 800672c:	e7e1      	b.n	80066f2 <__sccl+0x32>
 800672e:	4610      	mov	r0, r2
 8006730:	e7da      	b.n	80066e8 <__sccl+0x28>

08006732 <__submore>:
 8006732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006736:	460c      	mov	r4, r1
 8006738:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800673a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800673e:	4299      	cmp	r1, r3
 8006740:	d11d      	bne.n	800677e <__submore+0x4c>
 8006742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006746:	f7ff f823 	bl	8005790 <_malloc_r>
 800674a:	b918      	cbnz	r0, 8006754 <__submore+0x22>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006758:	63a3      	str	r3, [r4, #56]	; 0x38
 800675a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800675e:	6360      	str	r0, [r4, #52]	; 0x34
 8006760:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006764:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006768:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800676c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006770:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006774:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006778:	6020      	str	r0, [r4, #0]
 800677a:	2000      	movs	r0, #0
 800677c:	e7e8      	b.n	8006750 <__submore+0x1e>
 800677e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006780:	0077      	lsls	r7, r6, #1
 8006782:	463a      	mov	r2, r7
 8006784:	f000 f946 	bl	8006a14 <_realloc_r>
 8006788:	4605      	mov	r5, r0
 800678a:	2800      	cmp	r0, #0
 800678c:	d0de      	beq.n	800674c <__submore+0x1a>
 800678e:	eb00 0806 	add.w	r8, r0, r6
 8006792:	4601      	mov	r1, r0
 8006794:	4632      	mov	r2, r6
 8006796:	4640      	mov	r0, r8
 8006798:	f000 f92e 	bl	80069f8 <memcpy>
 800679c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80067a0:	f8c4 8000 	str.w	r8, [r4]
 80067a4:	e7e9      	b.n	800677a <__submore+0x48>

080067a6 <_ungetc_r>:
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	4614      	mov	r4, r2
 80067aa:	1c4a      	adds	r2, r1, #1
 80067ac:	4606      	mov	r6, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	d103      	bne.n	80067ba <_ungetc_r+0x14>
 80067b2:	f04f 35ff 	mov.w	r5, #4294967295
 80067b6:	4628      	mov	r0, r5
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	b118      	cbz	r0, 80067c4 <_ungetc_r+0x1e>
 80067bc:	6a03      	ldr	r3, [r0, #32]
 80067be:	b90b      	cbnz	r3, 80067c4 <_ungetc_r+0x1e>
 80067c0:	f7fe fe60 	bl	8005484 <__sinit>
 80067c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067c6:	07db      	lsls	r3, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_ungetc_r+0x30>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	0598      	lsls	r0, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_ungetc_r+0x30>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f7fe ff6e 	bl	80056b2 <__retarget_lock_acquire_recursive>
 80067d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067da:	f023 0320 	bic.w	r3, r3, #32
 80067de:	0759      	lsls	r1, r3, #29
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	d423      	bmi.n	800682e <_ungetc_r+0x88>
 80067e6:	06d3      	lsls	r3, r2, #27
 80067e8:	d409      	bmi.n	80067fe <_ungetc_r+0x58>
 80067ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067ec:	07dd      	lsls	r5, r3, #31
 80067ee:	d4e0      	bmi.n	80067b2 <_ungetc_r+0xc>
 80067f0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80067f4:	d1dd      	bne.n	80067b2 <_ungetc_r+0xc>
 80067f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f8:	f7fe ff5c 	bl	80056b4 <__retarget_lock_release_recursive>
 80067fc:	e7d9      	b.n	80067b2 <_ungetc_r+0xc>
 80067fe:	0710      	lsls	r0, r2, #28
 8006800:	d511      	bpl.n	8006826 <_ungetc_r+0x80>
 8006802:	4621      	mov	r1, r4
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff fead 	bl	8006564 <_fflush_r>
 800680a:	b130      	cbz	r0, 800681a <_ungetc_r+0x74>
 800680c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680e:	07d9      	lsls	r1, r3, #31
 8006810:	d4cf      	bmi.n	80067b2 <_ungetc_r+0xc>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006818:	e7ec      	b.n	80067f4 <_ungetc_r+0x4e>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	60a0      	str	r0, [r4, #8]
 800681e:	f023 0308 	bic.w	r3, r3, #8
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	61a0      	str	r0, [r4, #24]
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f043 0304 	orr.w	r3, r3, #4
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006830:	6862      	ldr	r2, [r4, #4]
 8006832:	b2ed      	uxtb	r5, r5
 8006834:	b1d3      	cbz	r3, 800686c <_ungetc_r+0xc6>
 8006836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006838:	4293      	cmp	r3, r2
 800683a:	dc05      	bgt.n	8006848 <_ungetc_r+0xa2>
 800683c:	4621      	mov	r1, r4
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ff77 	bl	8006732 <__submore>
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <_ungetc_r+0x66>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	1e5a      	subs	r2, r3, #1
 800684c:	6022      	str	r2, [r4, #0]
 800684e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	3301      	adds	r3, #1
 8006856:	6063      	str	r3, [r4, #4]
 8006858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d4ab      	bmi.n	80067b6 <_ungetc_r+0x10>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d4a8      	bmi.n	80067b6 <_ungetc_r+0x10>
 8006864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006866:	f7fe ff25 	bl	80056b4 <__retarget_lock_release_recursive>
 800686a:	e7a4      	b.n	80067b6 <_ungetc_r+0x10>
 800686c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800686e:	6920      	ldr	r0, [r4, #16]
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	f001 0101 	and.w	r1, r1, #1
 8006876:	b160      	cbz	r0, 8006892 <_ungetc_r+0xec>
 8006878:	4298      	cmp	r0, r3
 800687a:	d20a      	bcs.n	8006892 <_ungetc_r+0xec>
 800687c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006880:	42a8      	cmp	r0, r5
 8006882:	d106      	bne.n	8006892 <_ungetc_r+0xec>
 8006884:	3b01      	subs	r3, #1
 8006886:	3201      	adds	r2, #1
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	6062      	str	r2, [r4, #4]
 800688c:	2900      	cmp	r1, #0
 800688e:	d192      	bne.n	80067b6 <_ungetc_r+0x10>
 8006890:	e7e5      	b.n	800685e <_ungetc_r+0xb8>
 8006892:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800689a:	6363      	str	r3, [r4, #52]	; 0x34
 800689c:	2303      	movs	r3, #3
 800689e:	63a3      	str	r3, [r4, #56]	; 0x38
 80068a0:	4623      	mov	r3, r4
 80068a2:	f803 5f46 	strb.w	r5, [r3, #70]!
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	2301      	movs	r3, #1
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	e7ee      	b.n	800688c <_ungetc_r+0xe6>

080068ae <__swbuf_r>:
 80068ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b0:	460e      	mov	r6, r1
 80068b2:	4614      	mov	r4, r2
 80068b4:	4605      	mov	r5, r0
 80068b6:	b118      	cbz	r0, 80068c0 <__swbuf_r+0x12>
 80068b8:	6a03      	ldr	r3, [r0, #32]
 80068ba:	b90b      	cbnz	r3, 80068c0 <__swbuf_r+0x12>
 80068bc:	f7fe fde2 	bl	8005484 <__sinit>
 80068c0:	69a3      	ldr	r3, [r4, #24]
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	071a      	lsls	r2, r3, #28
 80068c8:	d525      	bpl.n	8006916 <__swbuf_r+0x68>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	b31b      	cbz	r3, 8006916 <__swbuf_r+0x68>
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	6922      	ldr	r2, [r4, #16]
 80068d2:	1a98      	subs	r0, r3, r2
 80068d4:	6963      	ldr	r3, [r4, #20]
 80068d6:	b2f6      	uxtb	r6, r6
 80068d8:	4283      	cmp	r3, r0
 80068da:	4637      	mov	r7, r6
 80068dc:	dc04      	bgt.n	80068e8 <__swbuf_r+0x3a>
 80068de:	4621      	mov	r1, r4
 80068e0:	4628      	mov	r0, r5
 80068e2:	f7ff fe3f 	bl	8006564 <_fflush_r>
 80068e6:	b9e0      	cbnz	r0, 8006922 <__swbuf_r+0x74>
 80068e8:	68a3      	ldr	r3, [r4, #8]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	60a3      	str	r3, [r4, #8]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	701e      	strb	r6, [r3, #0]
 80068f6:	6962      	ldr	r2, [r4, #20]
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d004      	beq.n	8006908 <__swbuf_r+0x5a>
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	07db      	lsls	r3, r3, #31
 8006902:	d506      	bpl.n	8006912 <__swbuf_r+0x64>
 8006904:	2e0a      	cmp	r6, #10
 8006906:	d104      	bne.n	8006912 <__swbuf_r+0x64>
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	f7ff fe2a 	bl	8006564 <_fflush_r>
 8006910:	b938      	cbnz	r0, 8006922 <__swbuf_r+0x74>
 8006912:	4638      	mov	r0, r7
 8006914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006916:	4621      	mov	r1, r4
 8006918:	4628      	mov	r0, r5
 800691a:	f000 f805 	bl	8006928 <__swsetup_r>
 800691e:	2800      	cmp	r0, #0
 8006920:	d0d5      	beq.n	80068ce <__swbuf_r+0x20>
 8006922:	f04f 37ff 	mov.w	r7, #4294967295
 8006926:	e7f4      	b.n	8006912 <__swbuf_r+0x64>

08006928 <__swsetup_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4b2a      	ldr	r3, [pc, #168]	; (80069d4 <__swsetup_r+0xac>)
 800692c:	4605      	mov	r5, r0
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	460c      	mov	r4, r1
 8006932:	b118      	cbz	r0, 800693c <__swsetup_r+0x14>
 8006934:	6a03      	ldr	r3, [r0, #32]
 8006936:	b90b      	cbnz	r3, 800693c <__swsetup_r+0x14>
 8006938:	f7fe fda4 	bl	8005484 <__sinit>
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006942:	0718      	lsls	r0, r3, #28
 8006944:	d422      	bmi.n	800698c <__swsetup_r+0x64>
 8006946:	06d9      	lsls	r1, r3, #27
 8006948:	d407      	bmi.n	800695a <__swsetup_r+0x32>
 800694a:	2309      	movs	r3, #9
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e034      	b.n	80069c4 <__swsetup_r+0x9c>
 800695a:	0758      	lsls	r0, r3, #29
 800695c:	d512      	bpl.n	8006984 <__swsetup_r+0x5c>
 800695e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006960:	b141      	cbz	r1, 8006974 <__swsetup_r+0x4c>
 8006962:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006966:	4299      	cmp	r1, r3
 8006968:	d002      	beq.n	8006970 <__swsetup_r+0x48>
 800696a:	4628      	mov	r0, r5
 800696c:	f7fe fea4 	bl	80056b8 <_free_r>
 8006970:	2300      	movs	r3, #0
 8006972:	6363      	str	r3, [r4, #52]	; 0x34
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	2300      	movs	r3, #0
 800697e:	6063      	str	r3, [r4, #4]
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	6023      	str	r3, [r4, #0]
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f043 0308 	orr.w	r3, r3, #8
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	b94b      	cbnz	r3, 80069a4 <__swsetup_r+0x7c>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699a:	d003      	beq.n	80069a4 <__swsetup_r+0x7c>
 800699c:	4621      	mov	r1, r4
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 f986 	bl	8006cb0 <__smakebuf_r>
 80069a4:	89a0      	ldrh	r0, [r4, #12]
 80069a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069aa:	f010 0301 	ands.w	r3, r0, #1
 80069ae:	d00a      	beq.n	80069c6 <__swsetup_r+0x9e>
 80069b0:	2300      	movs	r3, #0
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	6963      	ldr	r3, [r4, #20]
 80069b6:	425b      	negs	r3, r3
 80069b8:	61a3      	str	r3, [r4, #24]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	b943      	cbnz	r3, 80069d0 <__swsetup_r+0xa8>
 80069be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c2:	d1c4      	bne.n	800694e <__swsetup_r+0x26>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	0781      	lsls	r1, r0, #30
 80069c8:	bf58      	it	pl
 80069ca:	6963      	ldrpl	r3, [r4, #20]
 80069cc:	60a3      	str	r3, [r4, #8]
 80069ce:	e7f4      	b.n	80069ba <__swsetup_r+0x92>
 80069d0:	2000      	movs	r0, #0
 80069d2:	e7f7      	b.n	80069c4 <__swsetup_r+0x9c>
 80069d4:	2000008c 	.word	0x2000008c

080069d8 <_sbrk_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4d06      	ldr	r5, [pc, #24]	; (80069f4 <_sbrk_r+0x1c>)
 80069dc:	2300      	movs	r3, #0
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	602b      	str	r3, [r5, #0]
 80069e4:	f7fa fe3c 	bl	8001660 <_sbrk>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d102      	bne.n	80069f2 <_sbrk_r+0x1a>
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	b103      	cbz	r3, 80069f2 <_sbrk_r+0x1a>
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	2000032c 	.word	0x2000032c

080069f8 <memcpy>:
 80069f8:	440a      	add	r2, r1
 80069fa:	4291      	cmp	r1, r2
 80069fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a00:	d100      	bne.n	8006a04 <memcpy+0xc>
 8006a02:	4770      	bx	lr
 8006a04:	b510      	push	{r4, lr}
 8006a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0e:	4291      	cmp	r1, r2
 8006a10:	d1f9      	bne.n	8006a06 <memcpy+0xe>
 8006a12:	bd10      	pop	{r4, pc}

08006a14 <_realloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4680      	mov	r8, r0
 8006a1a:	4614      	mov	r4, r2
 8006a1c:	460e      	mov	r6, r1
 8006a1e:	b921      	cbnz	r1, 8006a2a <_realloc_r+0x16>
 8006a20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	4611      	mov	r1, r2
 8006a26:	f7fe beb3 	b.w	8005790 <_malloc_r>
 8006a2a:	b92a      	cbnz	r2, 8006a38 <_realloc_r+0x24>
 8006a2c:	f7fe fe44 	bl	80056b8 <_free_r>
 8006a30:	4625      	mov	r5, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	f000 f998 	bl	8006d6c <_malloc_usable_size_r>
 8006a3c:	4284      	cmp	r4, r0
 8006a3e:	4607      	mov	r7, r0
 8006a40:	d802      	bhi.n	8006a48 <_realloc_r+0x34>
 8006a42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a46:	d812      	bhi.n	8006a6e <_realloc_r+0x5a>
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7fe fea0 	bl	8005790 <_malloc_r>
 8006a50:	4605      	mov	r5, r0
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d0ed      	beq.n	8006a32 <_realloc_r+0x1e>
 8006a56:	42bc      	cmp	r4, r7
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	bf28      	it	cs
 8006a5e:	463a      	movcs	r2, r7
 8006a60:	f7ff ffca 	bl	80069f8 <memcpy>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7fe fe26 	bl	80056b8 <_free_r>
 8006a6c:	e7e1      	b.n	8006a32 <_realloc_r+0x1e>
 8006a6e:	4635      	mov	r5, r6
 8006a70:	e7df      	b.n	8006a32 <_realloc_r+0x1e>
	...

08006a74 <_strtol_l.constprop.0>:
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7a:	d001      	beq.n	8006a80 <_strtol_l.constprop.0+0xc>
 8006a7c:	2b24      	cmp	r3, #36	; 0x24
 8006a7e:	d906      	bls.n	8006a8e <_strtol_l.constprop.0+0x1a>
 8006a80:	f7fe fdec 	bl	800565c <__errno>
 8006a84:	2316      	movs	r3, #22
 8006a86:	6003      	str	r3, [r0, #0]
 8006a88:	2000      	movs	r0, #0
 8006a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b74 <_strtol_l.constprop.0+0x100>
 8006a92:	460d      	mov	r5, r1
 8006a94:	462e      	mov	r6, r5
 8006a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006a9e:	f017 0708 	ands.w	r7, r7, #8
 8006aa2:	d1f7      	bne.n	8006a94 <_strtol_l.constprop.0+0x20>
 8006aa4:	2c2d      	cmp	r4, #45	; 0x2d
 8006aa6:	d132      	bne.n	8006b0e <_strtol_l.constprop.0+0x9a>
 8006aa8:	782c      	ldrb	r4, [r5, #0]
 8006aaa:	2701      	movs	r7, #1
 8006aac:	1cb5      	adds	r5, r6, #2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d05b      	beq.n	8006b6a <_strtol_l.constprop.0+0xf6>
 8006ab2:	2b10      	cmp	r3, #16
 8006ab4:	d109      	bne.n	8006aca <_strtol_l.constprop.0+0x56>
 8006ab6:	2c30      	cmp	r4, #48	; 0x30
 8006ab8:	d107      	bne.n	8006aca <_strtol_l.constprop.0+0x56>
 8006aba:	782c      	ldrb	r4, [r5, #0]
 8006abc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ac0:	2c58      	cmp	r4, #88	; 0x58
 8006ac2:	d14d      	bne.n	8006b60 <_strtol_l.constprop.0+0xec>
 8006ac4:	786c      	ldrb	r4, [r5, #1]
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	3502      	adds	r5, #2
 8006aca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006ace:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ad2:	f04f 0e00 	mov.w	lr, #0
 8006ad6:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ada:	4676      	mov	r6, lr
 8006adc:	fb03 8a19 	mls	sl, r3, r9, r8
 8006ae0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006ae4:	f1bc 0f09 	cmp.w	ip, #9
 8006ae8:	d816      	bhi.n	8006b18 <_strtol_l.constprop.0+0xa4>
 8006aea:	4664      	mov	r4, ip
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	dd24      	ble.n	8006b3a <_strtol_l.constprop.0+0xc6>
 8006af0:	f1be 3fff 	cmp.w	lr, #4294967295
 8006af4:	d008      	beq.n	8006b08 <_strtol_l.constprop.0+0x94>
 8006af6:	45b1      	cmp	r9, r6
 8006af8:	d31c      	bcc.n	8006b34 <_strtol_l.constprop.0+0xc0>
 8006afa:	d101      	bne.n	8006b00 <_strtol_l.constprop.0+0x8c>
 8006afc:	45a2      	cmp	sl, r4
 8006afe:	db19      	blt.n	8006b34 <_strtol_l.constprop.0+0xc0>
 8006b00:	fb06 4603 	mla	r6, r6, r3, r4
 8006b04:	f04f 0e01 	mov.w	lr, #1
 8006b08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b0c:	e7e8      	b.n	8006ae0 <_strtol_l.constprop.0+0x6c>
 8006b0e:	2c2b      	cmp	r4, #43	; 0x2b
 8006b10:	bf04      	itt	eq
 8006b12:	782c      	ldrbeq	r4, [r5, #0]
 8006b14:	1cb5      	addeq	r5, r6, #2
 8006b16:	e7ca      	b.n	8006aae <_strtol_l.constprop.0+0x3a>
 8006b18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006b1c:	f1bc 0f19 	cmp.w	ip, #25
 8006b20:	d801      	bhi.n	8006b26 <_strtol_l.constprop.0+0xb2>
 8006b22:	3c37      	subs	r4, #55	; 0x37
 8006b24:	e7e2      	b.n	8006aec <_strtol_l.constprop.0+0x78>
 8006b26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006b2a:	f1bc 0f19 	cmp.w	ip, #25
 8006b2e:	d804      	bhi.n	8006b3a <_strtol_l.constprop.0+0xc6>
 8006b30:	3c57      	subs	r4, #87	; 0x57
 8006b32:	e7db      	b.n	8006aec <_strtol_l.constprop.0+0x78>
 8006b34:	f04f 3eff 	mov.w	lr, #4294967295
 8006b38:	e7e6      	b.n	8006b08 <_strtol_l.constprop.0+0x94>
 8006b3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8006b3e:	d105      	bne.n	8006b4c <_strtol_l.constprop.0+0xd8>
 8006b40:	2322      	movs	r3, #34	; 0x22
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	4646      	mov	r6, r8
 8006b46:	b942      	cbnz	r2, 8006b5a <_strtol_l.constprop.0+0xe6>
 8006b48:	4630      	mov	r0, r6
 8006b4a:	e79e      	b.n	8006a8a <_strtol_l.constprop.0+0x16>
 8006b4c:	b107      	cbz	r7, 8006b50 <_strtol_l.constprop.0+0xdc>
 8006b4e:	4276      	negs	r6, r6
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	d0f9      	beq.n	8006b48 <_strtol_l.constprop.0+0xd4>
 8006b54:	f1be 0f00 	cmp.w	lr, #0
 8006b58:	d000      	beq.n	8006b5c <_strtol_l.constprop.0+0xe8>
 8006b5a:	1e69      	subs	r1, r5, #1
 8006b5c:	6011      	str	r1, [r2, #0]
 8006b5e:	e7f3      	b.n	8006b48 <_strtol_l.constprop.0+0xd4>
 8006b60:	2430      	movs	r4, #48	; 0x30
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1b1      	bne.n	8006aca <_strtol_l.constprop.0+0x56>
 8006b66:	2308      	movs	r3, #8
 8006b68:	e7af      	b.n	8006aca <_strtol_l.constprop.0+0x56>
 8006b6a:	2c30      	cmp	r4, #48	; 0x30
 8006b6c:	d0a5      	beq.n	8006aba <_strtol_l.constprop.0+0x46>
 8006b6e:	230a      	movs	r3, #10
 8006b70:	e7ab      	b.n	8006aca <_strtol_l.constprop.0+0x56>
 8006b72:	bf00      	nop
 8006b74:	08007b57 	.word	0x08007b57

08006b78 <_strtol_r>:
 8006b78:	f7ff bf7c 	b.w	8006a74 <_strtol_l.constprop.0>

08006b7c <_strtoul_l.constprop.0>:
 8006b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b80:	4f36      	ldr	r7, [pc, #216]	; (8006c5c <_strtoul_l.constprop.0+0xe0>)
 8006b82:	4686      	mov	lr, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	4628      	mov	r0, r5
 8006b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b8c:	5d3e      	ldrb	r6, [r7, r4]
 8006b8e:	f016 0608 	ands.w	r6, r6, #8
 8006b92:	d1f8      	bne.n	8006b86 <_strtoul_l.constprop.0+0xa>
 8006b94:	2c2d      	cmp	r4, #45	; 0x2d
 8006b96:	d130      	bne.n	8006bfa <_strtoul_l.constprop.0+0x7e>
 8006b98:	782c      	ldrb	r4, [r5, #0]
 8006b9a:	2601      	movs	r6, #1
 8006b9c:	1c85      	adds	r5, r0, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d057      	beq.n	8006c52 <_strtoul_l.constprop.0+0xd6>
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d109      	bne.n	8006bba <_strtoul_l.constprop.0+0x3e>
 8006ba6:	2c30      	cmp	r4, #48	; 0x30
 8006ba8:	d107      	bne.n	8006bba <_strtoul_l.constprop.0+0x3e>
 8006baa:	7828      	ldrb	r0, [r5, #0]
 8006bac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006bb0:	2858      	cmp	r0, #88	; 0x58
 8006bb2:	d149      	bne.n	8006c48 <_strtoul_l.constprop.0+0xcc>
 8006bb4:	786c      	ldrb	r4, [r5, #1]
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	3502      	adds	r5, #2
 8006bba:	f04f 38ff 	mov.w	r8, #4294967295
 8006bbe:	2700      	movs	r7, #0
 8006bc0:	fbb8 f8f3 	udiv	r8, r8, r3
 8006bc4:	fb03 f908 	mul.w	r9, r3, r8
 8006bc8:	ea6f 0909 	mvn.w	r9, r9
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006bd2:	f1bc 0f09 	cmp.w	ip, #9
 8006bd6:	d815      	bhi.n	8006c04 <_strtoul_l.constprop.0+0x88>
 8006bd8:	4664      	mov	r4, ip
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	dd23      	ble.n	8006c26 <_strtoul_l.constprop.0+0xaa>
 8006bde:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006be2:	d007      	beq.n	8006bf4 <_strtoul_l.constprop.0+0x78>
 8006be4:	4580      	cmp	r8, r0
 8006be6:	d31b      	bcc.n	8006c20 <_strtoul_l.constprop.0+0xa4>
 8006be8:	d101      	bne.n	8006bee <_strtoul_l.constprop.0+0x72>
 8006bea:	45a1      	cmp	r9, r4
 8006bec:	db18      	blt.n	8006c20 <_strtoul_l.constprop.0+0xa4>
 8006bee:	fb00 4003 	mla	r0, r0, r3, r4
 8006bf2:	2701      	movs	r7, #1
 8006bf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bf8:	e7e9      	b.n	8006bce <_strtoul_l.constprop.0+0x52>
 8006bfa:	2c2b      	cmp	r4, #43	; 0x2b
 8006bfc:	bf04      	itt	eq
 8006bfe:	782c      	ldrbeq	r4, [r5, #0]
 8006c00:	1c85      	addeq	r5, r0, #2
 8006c02:	e7cc      	b.n	8006b9e <_strtoul_l.constprop.0+0x22>
 8006c04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006c08:	f1bc 0f19 	cmp.w	ip, #25
 8006c0c:	d801      	bhi.n	8006c12 <_strtoul_l.constprop.0+0x96>
 8006c0e:	3c37      	subs	r4, #55	; 0x37
 8006c10:	e7e3      	b.n	8006bda <_strtoul_l.constprop.0+0x5e>
 8006c12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c16:	f1bc 0f19 	cmp.w	ip, #25
 8006c1a:	d804      	bhi.n	8006c26 <_strtoul_l.constprop.0+0xaa>
 8006c1c:	3c57      	subs	r4, #87	; 0x57
 8006c1e:	e7dc      	b.n	8006bda <_strtoul_l.constprop.0+0x5e>
 8006c20:	f04f 37ff 	mov.w	r7, #4294967295
 8006c24:	e7e6      	b.n	8006bf4 <_strtoul_l.constprop.0+0x78>
 8006c26:	1c7b      	adds	r3, r7, #1
 8006c28:	d106      	bne.n	8006c38 <_strtoul_l.constprop.0+0xbc>
 8006c2a:	2322      	movs	r3, #34	; 0x22
 8006c2c:	f8ce 3000 	str.w	r3, [lr]
 8006c30:	4638      	mov	r0, r7
 8006c32:	b932      	cbnz	r2, 8006c42 <_strtoul_l.constprop.0+0xc6>
 8006c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c38:	b106      	cbz	r6, 8006c3c <_strtoul_l.constprop.0+0xc0>
 8006c3a:	4240      	negs	r0, r0
 8006c3c:	2a00      	cmp	r2, #0
 8006c3e:	d0f9      	beq.n	8006c34 <_strtoul_l.constprop.0+0xb8>
 8006c40:	b107      	cbz	r7, 8006c44 <_strtoul_l.constprop.0+0xc8>
 8006c42:	1e69      	subs	r1, r5, #1
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	e7f5      	b.n	8006c34 <_strtoul_l.constprop.0+0xb8>
 8006c48:	2430      	movs	r4, #48	; 0x30
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1b5      	bne.n	8006bba <_strtoul_l.constprop.0+0x3e>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	e7b3      	b.n	8006bba <_strtoul_l.constprop.0+0x3e>
 8006c52:	2c30      	cmp	r4, #48	; 0x30
 8006c54:	d0a9      	beq.n	8006baa <_strtoul_l.constprop.0+0x2e>
 8006c56:	230a      	movs	r3, #10
 8006c58:	e7af      	b.n	8006bba <_strtoul_l.constprop.0+0x3e>
 8006c5a:	bf00      	nop
 8006c5c:	08007b57 	.word	0x08007b57

08006c60 <_strtoul_r>:
 8006c60:	f7ff bf8c 	b.w	8006b7c <_strtoul_l.constprop.0>

08006c64 <__swhatbuf_r>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	460c      	mov	r4, r1
 8006c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c6c:	2900      	cmp	r1, #0
 8006c6e:	b096      	sub	sp, #88	; 0x58
 8006c70:	4615      	mov	r5, r2
 8006c72:	461e      	mov	r6, r3
 8006c74:	da0d      	bge.n	8006c92 <__swhatbuf_r+0x2e>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c7c:	f04f 0100 	mov.w	r1, #0
 8006c80:	bf0c      	ite	eq
 8006c82:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006c86:	2340      	movne	r3, #64	; 0x40
 8006c88:	2000      	movs	r0, #0
 8006c8a:	6031      	str	r1, [r6, #0]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	b016      	add	sp, #88	; 0x58
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	466a      	mov	r2, sp
 8006c94:	f000 f848 	bl	8006d28 <_fstat_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dbec      	blt.n	8006c76 <__swhatbuf_r+0x12>
 8006c9c:	9901      	ldr	r1, [sp, #4]
 8006c9e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006ca2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006ca6:	4259      	negs	r1, r3
 8006ca8:	4159      	adcs	r1, r3
 8006caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cae:	e7eb      	b.n	8006c88 <__swhatbuf_r+0x24>

08006cb0 <__smakebuf_r>:
 8006cb0:	898b      	ldrh	r3, [r1, #12]
 8006cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cb4:	079d      	lsls	r5, r3, #30
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460c      	mov	r4, r1
 8006cba:	d507      	bpl.n	8006ccc <__smakebuf_r+0x1c>
 8006cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	6163      	str	r3, [r4, #20]
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	ab01      	add	r3, sp, #4
 8006cce:	466a      	mov	r2, sp
 8006cd0:	f7ff ffc8 	bl	8006c64 <__swhatbuf_r>
 8006cd4:	9900      	ldr	r1, [sp, #0]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7fe fd59 	bl	8005790 <_malloc_r>
 8006cde:	b948      	cbnz	r0, 8006cf4 <__smakebuf_r+0x44>
 8006ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ce4:	059a      	lsls	r2, r3, #22
 8006ce6:	d4ef      	bmi.n	8006cc8 <__smakebuf_r+0x18>
 8006ce8:	f023 0303 	bic.w	r3, r3, #3
 8006cec:	f043 0302 	orr.w	r3, r3, #2
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	e7e3      	b.n	8006cbc <__smakebuf_r+0xc>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	6020      	str	r0, [r4, #0]
 8006cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfc:	81a3      	strh	r3, [r4, #12]
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	6163      	str	r3, [r4, #20]
 8006d02:	9b01      	ldr	r3, [sp, #4]
 8006d04:	6120      	str	r0, [r4, #16]
 8006d06:	b15b      	cbz	r3, 8006d20 <__smakebuf_r+0x70>
 8006d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f000 f81d 	bl	8006d4c <_isatty_r>
 8006d12:	b128      	cbz	r0, 8006d20 <__smakebuf_r+0x70>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	431d      	orrs	r5, r3
 8006d24:	81a5      	strh	r5, [r4, #12]
 8006d26:	e7cf      	b.n	8006cc8 <__smakebuf_r+0x18>

08006d28 <_fstat_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	; (8006d48 <_fstat_r+0x20>)
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	602b      	str	r3, [r5, #0]
 8006d36:	f7fa fc6b 	bl	8001610 <_fstat>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	d102      	bne.n	8006d44 <_fstat_r+0x1c>
 8006d3e:	682b      	ldr	r3, [r5, #0]
 8006d40:	b103      	cbz	r3, 8006d44 <_fstat_r+0x1c>
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	bf00      	nop
 8006d48:	2000032c 	.word	0x2000032c

08006d4c <_isatty_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d06      	ldr	r5, [pc, #24]	; (8006d68 <_isatty_r+0x1c>)
 8006d50:	2300      	movs	r3, #0
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7fa fc6a 	bl	8001630 <_isatty>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d102      	bne.n	8006d66 <_isatty_r+0x1a>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	b103      	cbz	r3, 8006d66 <_isatty_r+0x1a>
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	bd38      	pop	{r3, r4, r5, pc}
 8006d68:	2000032c 	.word	0x2000032c

08006d6c <_malloc_usable_size_r>:
 8006d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d70:	1f18      	subs	r0, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfbc      	itt	lt
 8006d76:	580b      	ldrlt	r3, [r1, r0]
 8006d78:	18c0      	addlt	r0, r0, r3
 8006d7a:	4770      	bx	lr

08006d7c <_init>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr

08006d88 <_fini>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr
