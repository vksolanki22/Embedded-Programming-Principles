
gps example F2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  0800b8c8  0800b8c8  0001b8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbf8  0800cbf8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbf8  0800cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc00  0800cc00  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800cc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d8  0800cde0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800cde0  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150a6  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d5c  00000000  00000000  000352f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00038050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003974  00000000  00000000  00039350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b33  00000000  00000000  0003ccc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee84  00000000  00000000  000537f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000ec1  00000000  00000000  0012267b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067c4  00000000  00000000  0012353c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00129d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8b0 	.word	0x0800b8b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b8b0 	.word	0x0800b8b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PFP */
/*
 * 	This is the callback function that gets called when a receive is complete.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	// write some code when reception is complete

	if (recChar == '$')	//STX! so let's start storing char in the recBuffer
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b24      	cmp	r3, #36	; 0x24
 8000ffe:	d114      	bne.n	800102a <HAL_UART_RxCpltCallback+0x3a>
	{
		recBufferIndex = 0;			//$ is the first char in a sentence.
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
		recBuffer[recBufferIndex] = recChar;	//so we've got to store it at the
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001008:	f993 3000 	ldrsb.w	r3, [r3]
 800100c:	461a      	mov	r2, r3
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001010:	7819      	ldrb	r1, [r3, #0]
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_UART_RxCpltCallback+0xc4>)
 8001014:	5499      	strb	r1, [r3, r2]
		                                        //start of our recBuffer
		recBufferIndex++;			//and inc the index so the next char
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001018:	f993 3000 	ldrsb.w	r3, [r3]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	3301      	adds	r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	b25a      	sxtb	r2, r3
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e021      	b.n	800106e <HAL_UART_RxCpltCallback+0x7e>
		                            //is stored in the next position in
		                            //the buffer
	}
	else if (recBufferIndex > 0)		//then we're receiving the rest of the sentence
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 800102c:	f993 3000 	ldrsb.w	r3, [r3]
 8001030:	2b00      	cmp	r3, #0
 8001032:	dd1c      	ble.n	800106e <HAL_UART_RxCpltCallback+0x7e>
	{
		recBuffer[recBufferIndex] = recChar;	//so place the rec'd char in the buffer
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001036:	f993 3000 	ldrsb.w	r3, [r3]
 800103a:	461a      	mov	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 800103e:	7819      	ldrb	r1, [r3, #0]
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_UART_RxCpltCallback+0xc4>)
 8001042:	5499      	strb	r1, [r3, r2]
		if (recBufferIndex < REC_BUFFER_SIZE)		//and increment the index as long as
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001046:	f993 3000 	ldrsb.w	r3, [r3]
 800104a:	2b63      	cmp	r3, #99	; 0x63
 800104c:	dc09      	bgt.n	8001062 <HAL_UART_RxCpltCallback+0x72>
		{						//we don't exceed the size of the buffer
			recBufferIndex++;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001050:	f993 3000 	ldrsb.w	r3, [r3]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	3301      	adds	r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	b25a      	sxtb	r2, r3
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e005      	b.n	800106e <HAL_UART_RxCpltCallback+0x7e>
		}
		else
		{
			recBufferIndex = 0;	//if we're we've exceeded the size of our
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
			printf ("recBuffer Overflow\r\n");	//buffer so let's say so
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <HAL_UART_RxCpltCallback+0xc8>)
 800106a:	f007 fd6f 	bl	8008b4c <puts>
		}
	}

	if (recChar == '\r' || recChar == '\n')	//if we get a cr then we know we're at the
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b0d      	cmp	r3, #13
 8001074:	d003      	beq.n	800107e <HAL_UART_RxCpltCallback+0x8e>
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d10c      	bne.n	8001098 <HAL_UART_RxCpltCallback+0xa8>
	{									//end of our sentence
		recBuffer[recBufferIndex] = '\0';		//put a null instead of cr in the buffer
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001080:	f993 3000 	ldrsb.w	r3, [r3]
 8001084:	461a      	mov	r2, r3
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_UART_RxCpltCallback+0xc4>)
 8001088:	2100      	movs	r1, #0
 800108a:	5499      	strb	r1, [r3, r2]
		                                        //'cause that's what strings need
		recBufferIndex = 0;					//and reset the buffer index
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
		sentenceReceived = 1;	//and set the flag 'cause we've got a
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_UART_RxCpltCallback+0xcc>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
		                        //complete senetence now.
	}

	HAL_UART_Receive_IT (&huart2, (uint8_t*) &recChar, 1); // now call this function to receive next data.
 8001098:	2201      	movs	r2, #1
 800109a:	4904      	ldr	r1, [pc, #16]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <HAL_UART_RxCpltCallback+0xd0>)
 800109e:	f004 fb65 	bl	800576c <HAL_UART_Receive_IT>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000032c 	.word	0x2000032c
 80010b0:	20000394 	.word	0x20000394
 80010b4:	20000330 	.word	0x20000330
 80010b8:	0800b8e8 	.word	0x0800b8e8
 80010bc:	20000395 	.word	0x20000395
 80010c0:	200002a4 	.word	0x200002a4

080010c4 <startUpLCDSplashScreen>:
 * DESCRIPTION   : displays GPS Parcing on line 1 of the display and Disappears
 *
 *******************************************************************************
 */
void startUpLCDSplashScreen(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen (BLACK);
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 ffe2 	bl	80020a2 <ssd1331_clear_screen>
	snprintf (stringBuffer, 16, "GPS Parsing");
 80010de:	463b      	mov	r3, r7
 80010e0:	4a0c      	ldr	r2, [pc, #48]	; (8001114 <startUpLCDSplashScreen+0x50>)
 80010e2:	2110      	movs	r1, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fd39 	bl	8008b5c <sniprintf>
	ssd1331_display_string (10, 0, stringBuffer, FONT_1206, GREEN);
 80010ea:	463a      	mov	r2, r7
 80010ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	230c      	movs	r3, #12
 80010f4:	2100      	movs	r1, #0
 80010f6:	200a      	movs	r0, #10
 80010f8:	f000 ff8a 	bl	8002010 <ssd1331_display_string>
	HAL_Delay (10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f001 fbb3 	bl	8002868 <HAL_Delay>


	// This function is defined in ssd1331.c
	// It will rotate the heading of Assignmnet (GPS Parsing) countinuous on line 1
	EnableHorizontalCountinuousScroll (0, FONT_1206);
 8001102:	210c      	movs	r1, #12
 8001104:	2000      	movs	r0, #0
 8001106:	f001 f8a1 	bl	800224c <EnableHorizontalCountinuousScroll>
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	0800b8fc 	.word	0x0800b8fc

08001118 <parseUSTTime>:
 * 				   appropriate sata type
 *
 *******************************************************************************
 */
static void parseUSTTime(gpsData_t *gpsData, char *iUstTime)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	char tempStr[TEMP_BUFFER_SIZE];

	// Parse hour
	strncpy (tempStr, iUstTime, 2);
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2202      	movs	r2, #2
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f007 fe5c 	bl	8008de8 <strncpy>
	gpsData->utcTime.hour = atoi (tempStr);
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	4618      	mov	r0, r3
 8001136:	f005 fe3c 	bl	8006db2 <atoi>
 800113a:	4603      	mov	r3, r0
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	701a      	strb	r2, [r3, #0]

	// Parse minute
	strncpy (tempStr, iUstTime + 2, 2);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	1c99      	adds	r1, r3, #2
 8001146:	f107 0308 	add.w	r3, r7, #8
 800114a:	2202      	movs	r2, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f007 fe4b 	bl	8008de8 <strncpy>
	gpsData->utcTime.minute = atoi (tempStr);
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	4618      	mov	r0, r3
 8001158:	f005 fe2b 	bl	8006db2 <atoi>
 800115c:	4603      	mov	r3, r0
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	705a      	strb	r2, [r3, #1]

	// Parse second part 1
	strncpy (tempStr, iUstTime + 4, 2);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	1d19      	adds	r1, r3, #4
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	2202      	movs	r2, #2
 800116e:	4618      	mov	r0, r3
 8001170:	f007 fe3a 	bl	8008de8 <strncpy>
	gpsData->utcTime.second = atoi (tempStr);
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f005 fe1a 	bl	8006db2 <atoi>
 800117e:	4603      	mov	r3, r0
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	709a      	strb	r2, [r3, #2]

	// Parse second part 2
	strncpy (tempStr, iUstTime + 7, 2);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	1dd9      	adds	r1, r3, #7
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	2202      	movs	r2, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fe29 	bl	8008de8 <strncpy>
	gpsData->utcTime.second2 = atoi (tempStr);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f005 fe09 	bl	8006db2 <atoi>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	70da      	strb	r2, [r3, #3]
}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <parseLatitude>:
 * 				data into main gpsData structure after converting that data into
 * 				appropriate sata type
 *  *******************************************************************************
 */
static void parseLatitude(gpsData_t *gpsData, char *iLatiTude)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	char tempStr[TEMP_BUFFER_SIZE];

	// Parse degrees
	strncpy (tempStr, iLatiTude, 2);
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2202      	movs	r2, #2
 80011c0:	6839      	ldr	r1, [r7, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f007 fe10 	bl	8008de8 <strncpy>
	gpsData->latiTude.degree = atoi (tempStr);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 fdf0 	bl	8006db2 <atoi>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	711a      	strb	r2, [r3, #4]

	// Parse minutes
	strncpy (tempStr, iLatiTude + 2, 2);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	1c99      	adds	r1, r3, #2
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2202      	movs	r2, #2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f007 fdff 	bl	8008de8 <strncpy>
	gpsData->latiTude.minute = atoi (tempStr);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fddf 	bl	8006db2 <atoi>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	715a      	strb	r2, [r3, #5]

	// Parse decimal degrees
	strncpy (tempStr, iLatiTude + 5, 4);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	1d59      	adds	r1, r3, #5
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2204      	movs	r2, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f007 fdee 	bl	8008de8 <strncpy>
	gpsData->latiTude.decimalDegree = atoi (tempStr);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f005 fdce 	bl	8006db2 <atoi>
 8001216:	4603      	mov	r3, r0
 8001218:	b29a      	uxth	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	80da      	strh	r2, [r3, #6]

}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <parseLongitude>:
 * 				   appropriate sata type
 *
 *******************************************************************************
 */
static void parseLongitude(gpsData_t *gpsData, char *iLongiTude)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	char tempStr[TEMP_BUFFER_SIZE];

	// Parse degrees
	strncpy (tempStr, iLongiTude, 3);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2203      	movs	r2, #3
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fdd5 	bl	8008de8 <strncpy>
	gpsData->longiTude.degree = atoi (tempStr);
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fdb5 	bl	8006db2 <atoi>
 8001248:	4603      	mov	r3, r0
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	815a      	strh	r2, [r3, #10]

	// Parse minutes
	strncpy (tempStr, iLongiTude + 3, 2);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	1cd9      	adds	r1, r3, #3
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2202      	movs	r2, #2
 800125a:	4618      	mov	r0, r3
 800125c:	f007 fdc4 	bl	8008de8 <strncpy>
	gpsData->longiTude.minute = atoi (tempStr);
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4618      	mov	r0, r3
 8001266:	f005 fda4 	bl	8006db2 <atoi>
 800126a:	4603      	mov	r3, r0
 800126c:	b2da      	uxtb	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	731a      	strb	r2, [r3, #12]

	// Parse decimal degrees
	strncpy (tempStr, iLongiTude + 6, 4);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	1d99      	adds	r1, r3, #6
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	2204      	movs	r2, #4
 800127c:	4618      	mov	r0, r3
 800127e:	f007 fdb3 	bl	8008de8 <strncpy>
	gpsData->longiTude.decimalDegree = atoi (tempStr);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fd93 	bl	8006db2 <atoi>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	81da      	strh	r2, [r3, #14]
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <printDataOnOLED>:
 * DESCRIPTION   : This function prints data on OLED stored in gpsData
 *
 *******************************************************************************
 */
void printDataOnOLED(gpsData_t gpsData)
{
 800129c:	b084      	sub	sp, #16
 800129e:	b580      	push	{r7, lr}
 80012a0:	b08a      	sub	sp, #40	; 0x28
 80012a2:	af02      	add	r7, sp, #8
 80012a4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80012a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t index = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
	char stringBuffer[25] = { 0 };
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	751a      	strb	r2, [r3, #20]

	//Display UTC time on OLED
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC Hour = %d", gpsData.utcTime.hour);
 80012c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012ca:	1d38      	adds	r0, r7, #4
 80012cc:	4ad9      	ldr	r2, [pc, #868]	; (8001634 <printDataOnOLED+0x398>)
 80012ce:	2119      	movs	r1, #25
 80012d0:	f007 fc44 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80012d4:	7ffb      	ldrb	r3, [r7, #31]
 80012d6:	461a      	mov	r2, r3
 80012d8:	0052      	lsls	r2, r2, #1
 80012da:	441a      	add	r2, r3
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	4413      	add	r3, r2
 80012e0:	b2d9      	uxtb	r1, r3
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	230c      	movs	r3, #12
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 fe8f 	bl	8002010 <ssd1331_display_string>
	index++;
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC Min. = %d",
	          gpsData.utcTime.minute);
 80012f8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC Min. = %d",
 80012fc:	1d38      	adds	r0, r7, #4
 80012fe:	4ace      	ldr	r2, [pc, #824]	; (8001638 <printDataOnOLED+0x39c>)
 8001300:	2119      	movs	r1, #25
 8001302:	f007 fc2b 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	461a      	mov	r2, r3
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	441a      	add	r2, r3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4413      	add	r3, r2
 8001312:	b2d9      	uxtb	r1, r3
 8001314:	1d3a      	adds	r2, r7, #4
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	230c      	movs	r3, #12
 800131e:	2000      	movs	r0, #0
 8001320:	f000 fe76 	bl	8002010 <ssd1331_display_string>
	index++;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	3301      	adds	r3, #1
 8001328:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC Second = %d",
	          gpsData.utcTime.second);
 800132a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC Second = %d",
 800132e:	1d38      	adds	r0, r7, #4
 8001330:	4ac2      	ldr	r2, [pc, #776]	; (800163c <printDataOnOLED+0x3a0>)
 8001332:	2119      	movs	r1, #25
 8001334:	f007 fc12 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	461a      	mov	r2, r3
 800133c:	0052      	lsls	r2, r2, #1
 800133e:	441a      	add	r2, r3
 8001340:	0092      	lsls	r2, r2, #2
 8001342:	4413      	add	r3, r2
 8001344:	b2d9      	uxtb	r1, r3
 8001346:	1d3a      	adds	r2, r7, #4
 8001348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	230c      	movs	r3, #12
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fe5d 	bl	8002010 <ssd1331_display_string>
	index++;
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	3301      	adds	r3, #1
 800135a:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC mSec = %d",
	          gpsData.utcTime.second2);
 800135c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	snprintf (stringBuffer, sizeof(stringBuffer), "UTC mSec = %d",
 8001360:	1d38      	adds	r0, r7, #4
 8001362:	4ab7      	ldr	r2, [pc, #732]	; (8001640 <printDataOnOLED+0x3a4>)
 8001364:	2119      	movs	r1, #25
 8001366:	f007 fbf9 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	461a      	mov	r2, r3
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	441a      	add	r2, r3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4413      	add	r3, r2
 8001376:	b2d9      	uxtb	r1, r3
 8001378:	1d3a      	adds	r2, r7, #4
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	230c      	movs	r3, #12
 8001382:	2000      	movs	r0, #0
 8001384:	f000 fe44 	bl	8002010 <ssd1331_display_string>

	// Clear OLED
	ssd1331_clear_screen (BLACK);
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fe8a 	bl	80020a2 <ssd1331_clear_screen>
	startUpLCDSplashScreen ();
 800138e:	f7ff fe99 	bl	80010c4 <startUpLCDSplashScreen>
	index = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	77fb      	strb	r3, [r7, #31]

	//Display Latitude data on OLED
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. deg. = %d",
	          gpsData.latiTude.degree);
 8001396:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. deg. = %d",
 800139a:	1d38      	adds	r0, r7, #4
 800139c:	4aa9      	ldr	r2, [pc, #676]	; (8001644 <printDataOnOLED+0x3a8>)
 800139e:	2119      	movs	r1, #25
 80013a0:	f007 fbdc 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80013a4:	7ffb      	ldrb	r3, [r7, #31]
 80013a6:	461a      	mov	r2, r3
 80013a8:	0052      	lsls	r2, r2, #1
 80013aa:	441a      	add	r2, r3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	1d3a      	adds	r2, r7, #4
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	230c      	movs	r3, #12
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 fe27 	bl	8002010 <ssd1331_display_string>
	index++;
 80013c2:	7ffb      	ldrb	r3, [r7, #31]
 80013c4:	3301      	adds	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Min. = %d",
	          gpsData.latiTude.minute);
 80013c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Min. = %d",
 80013cc:	1d38      	adds	r0, r7, #4
 80013ce:	4a9e      	ldr	r2, [pc, #632]	; (8001648 <printDataOnOLED+0x3ac>)
 80013d0:	2119      	movs	r1, #25
 80013d2:	f007 fbc3 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	461a      	mov	r2, r3
 80013da:	0052      	lsls	r2, r2, #1
 80013dc:	441a      	add	r2, r3
 80013de:	0092      	lsls	r2, r2, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	b2d9      	uxtb	r1, r3
 80013e4:	1d3a      	adds	r2, r7, #4
 80013e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	230c      	movs	r3, #12
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 fe0e 	bl	8002010 <ssd1331_display_string>
	index++;
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	3301      	adds	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Dd = %d",
	          gpsData.latiTude.decimalDegree);
 80013fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Dd = %d",
 80013fc:	1d38      	adds	r0, r7, #4
 80013fe:	4a93      	ldr	r2, [pc, #588]	; (800164c <printDataOnOLED+0x3b0>)
 8001400:	2119      	movs	r1, #25
 8001402:	f007 fbab 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001406:	7ffb      	ldrb	r3, [r7, #31]
 8001408:	461a      	mov	r2, r3
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	441a      	add	r2, r3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4413      	add	r3, r2
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	1d3a      	adds	r2, r7, #4
 8001416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	230c      	movs	r3, #12
 800141e:	2000      	movs	r0, #0
 8001420:	f000 fdf6 	bl	8002010 <ssd1331_display_string>
	index++;
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	3301      	adds	r3, #1
 8001428:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Dire. = %c",
	          gpsData.latiTude.latiTudeDirection);
 800142a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
	snprintf (stringBuffer, sizeof(stringBuffer), "lat. Dire. = %c",
 800142e:	1d38      	adds	r0, r7, #4
 8001430:	4a87      	ldr	r2, [pc, #540]	; (8001650 <printDataOnOLED+0x3b4>)
 8001432:	2119      	movs	r1, #25
 8001434:	f007 fb92 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	461a      	mov	r2, r3
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	441a      	add	r2, r3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4413      	add	r3, r2
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	1d3a      	adds	r2, r7, #4
 8001448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	230c      	movs	r3, #12
 8001450:	2000      	movs	r0, #0
 8001452:	f000 fddd 	bl	8002010 <ssd1331_display_string>

	// Clear OLED
	ssd1331_clear_screen (BLACK);
 8001456:	2000      	movs	r0, #0
 8001458:	f000 fe23 	bl	80020a2 <ssd1331_clear_screen>
	startUpLCDSplashScreen ();
 800145c:	f7ff fe32 	bl	80010c4 <startUpLCDSplashScreen>
	index = 1;
 8001460:	2301      	movs	r3, #1
 8001462:	77fb      	strb	r3, [r7, #31]

	//Display Longitude data on OLED
	snprintf (stringBuffer, sizeof(stringBuffer), "long. deg. = %d",
	          gpsData.longiTude.degree);
 8001464:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
	snprintf (stringBuffer, sizeof(stringBuffer), "long. deg. = %d",
 8001466:	1d38      	adds	r0, r7, #4
 8001468:	4a7a      	ldr	r2, [pc, #488]	; (8001654 <printDataOnOLED+0x3b8>)
 800146a:	2119      	movs	r1, #25
 800146c:	f007 fb76 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	461a      	mov	r2, r3
 8001474:	0052      	lsls	r2, r2, #1
 8001476:	441a      	add	r2, r3
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	4413      	add	r3, r2
 800147c:	b2d9      	uxtb	r1, r3
 800147e:	1d3a      	adds	r2, r7, #4
 8001480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	230c      	movs	r3, #12
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fdc1 	bl	8002010 <ssd1331_display_string>
	index++;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
 8001490:	3301      	adds	r3, #1
 8001492:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Min. = %d",
	          gpsData.longiTude.minute);
 8001494:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Min. = %d",
 8001498:	1d38      	adds	r0, r7, #4
 800149a:	4a6f      	ldr	r2, [pc, #444]	; (8001658 <printDataOnOLED+0x3bc>)
 800149c:	2119      	movs	r1, #25
 800149e:	f007 fb5d 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	461a      	mov	r2, r3
 80014a6:	0052      	lsls	r2, r2, #1
 80014a8:	441a      	add	r2, r3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	b2d9      	uxtb	r1, r3
 80014b0:	1d3a      	adds	r2, r7, #4
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	230c      	movs	r3, #12
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 fda8 	bl	8002010 <ssd1331_display_string>
	index++;
 80014c0:	7ffb      	ldrb	r3, [r7, #31]
 80014c2:	3301      	adds	r3, #1
 80014c4:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Dd = %d",
	          gpsData.longiTude.decimalDegree);
 80014c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Dd = %d",
 80014c8:	1d38      	adds	r0, r7, #4
 80014ca:	4a64      	ldr	r2, [pc, #400]	; (800165c <printDataOnOLED+0x3c0>)
 80014cc:	2119      	movs	r1, #25
 80014ce:	f007 fb45 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	461a      	mov	r2, r3
 80014d6:	0052      	lsls	r2, r2, #1
 80014d8:	441a      	add	r2, r3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4413      	add	r3, r2
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	1d3a      	adds	r2, r7, #4
 80014e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	230c      	movs	r3, #12
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 fd90 	bl	8002010 <ssd1331_display_string>
	index++;
 80014f0:	7ffb      	ldrb	r3, [r7, #31]
 80014f2:	3301      	adds	r3, #1
 80014f4:	77fb      	strb	r3, [r7, #31]
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Dire. = %c",
	          gpsData.longiTude.longiTudeDirection);
 80014f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	snprintf (stringBuffer, sizeof(stringBuffer), "long. Dire. = %c",
 80014fa:	1d38      	adds	r0, r7, #4
 80014fc:	4a58      	ldr	r2, [pc, #352]	; (8001660 <printDataOnOLED+0x3c4>)
 80014fe:	2119      	movs	r1, #25
 8001500:	f007 fb2c 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001504:	7ffb      	ldrb	r3, [r7, #31]
 8001506:	461a      	mov	r2, r3
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	441a      	add	r2, r3
 800150c:	0092      	lsls	r2, r2, #2
 800150e:	4413      	add	r3, r2
 8001510:	b2d9      	uxtb	r1, r3
 8001512:	1d3a      	adds	r2, r7, #4
 8001514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	230c      	movs	r3, #12
 800151c:	2000      	movs	r0, #0
 800151e:	f000 fd77 	bl	8002010 <ssd1331_display_string>

	// Clear OLED
	ssd1331_clear_screen (BLACK);
 8001522:	2000      	movs	r0, #0
 8001524:	f000 fdbd 	bl	80020a2 <ssd1331_clear_screen>
	startUpLCDSplashScreen ();
 8001528:	f7ff fdcc 	bl	80010c4 <startUpLCDSplashScreen>
	index = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	77fb      	strb	r3, [r7, #31]

	//Display Position of Satelite
	snprintf (stringBuffer, sizeof(stringBuffer), "Positoin = %d", gpsData.position);
 8001530:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001534:	1d38      	adds	r0, r7, #4
 8001536:	4a4b      	ldr	r2, [pc, #300]	; (8001664 <printDataOnOLED+0x3c8>)
 8001538:	2119      	movs	r1, #25
 800153a:	f007 fb0f 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	461a      	mov	r2, r3
 8001542:	0052      	lsls	r2, r2, #1
 8001544:	441a      	add	r2, r3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4413      	add	r3, r2
 800154a:	b2d9      	uxtb	r1, r3
 800154c:	1d3a      	adds	r2, r7, #4
 800154e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	230c      	movs	r3, #12
 8001556:	2000      	movs	r0, #0
 8001558:	f000 fd5a 	bl	8002010 <ssd1331_display_string>
	index++;
 800155c:	7ffb      	ldrb	r3, [r7, #31]
 800155e:	3301      	adds	r3, #1
 8001560:	77fb      	strb	r3, [r7, #31]

	//Display Satelite Number
	snprintf (stringBuffer, sizeof(stringBuffer), "Sat. Num. = %d",
	          gpsData.sateliteNumber);
 8001562:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
	snprintf (stringBuffer, sizeof(stringBuffer), "Sat. Num. = %d",
 8001566:	1d38      	adds	r0, r7, #4
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <printDataOnOLED+0x3cc>)
 800156a:	2119      	movs	r1, #25
 800156c:	f007 faf6 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	461a      	mov	r2, r3
 8001574:	0052      	lsls	r2, r2, #1
 8001576:	441a      	add	r2, r3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4413      	add	r3, r2
 800157c:	b2d9      	uxtb	r1, r3
 800157e:	1d3a      	adds	r2, r7, #4
 8001580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	230c      	movs	r3, #12
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fd41 	bl	8002010 <ssd1331_display_string>
	index++;
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	3301      	adds	r3, #1
 8001592:	77fb      	strb	r3, [r7, #31]

	//Display HDOP
	snprintf (stringBuffer, sizeof(stringBuffer), "HDOP = %0.3f", gpsData.hdop);
 8001594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	1d38      	adds	r0, r7, #4
 80015a2:	e9cd 2300 	strd	r2, r3, [sp]
 80015a6:	4a31      	ldr	r2, [pc, #196]	; (800166c <printDataOnOLED+0x3d0>)
 80015a8:	2119      	movs	r1, #25
 80015aa:	f007 fad7 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80015ae:	7ffb      	ldrb	r3, [r7, #31]
 80015b0:	461a      	mov	r2, r3
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	441a      	add	r2, r3
 80015b6:	0092      	lsls	r2, r2, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	b2d9      	uxtb	r1, r3
 80015bc:	1d3a      	adds	r2, r7, #4
 80015be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	230c      	movs	r3, #12
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 fd22 	bl	8002010 <ssd1331_display_string>
	index++;
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
 80015ce:	3301      	adds	r3, #1
 80015d0:	77fb      	strb	r3, [r7, #31]

	//Display Altitude
	snprintf (stringBuffer, sizeof(stringBuffer), "Alt. = %0.3f", gpsData.altitude);
 80015d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	1d38      	adds	r0, r7, #4
 80015e0:	e9cd 2300 	strd	r2, r3, [sp]
 80015e4:	4a22      	ldr	r2, [pc, #136]	; (8001670 <printDataOnOLED+0x3d4>)
 80015e6:	2119      	movs	r1, #25
 80015e8:	f007 fab8 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	461a      	mov	r2, r3
 80015f0:	0052      	lsls	r2, r2, #1
 80015f2:	441a      	add	r2, r3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	b2d9      	uxtb	r1, r3
 80015fa:	1d3a      	adds	r2, r7, #4
 80015fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	230c      	movs	r3, #12
 8001604:	2000      	movs	r0, #0
 8001606:	f000 fd03 	bl	8002010 <ssd1331_display_string>
	index++;
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	3301      	adds	r3, #1
 800160e:	77fb      	strb	r3, [r7, #31]

	// Clear OLED
	ssd1331_clear_screen (BLACK);
 8001610:	2000      	movs	r0, #0
 8001612:	f000 fd46 	bl	80020a2 <ssd1331_clear_screen>
	startUpLCDSplashScreen ();
 8001616:	f7ff fd55 	bl	80010c4 <startUpLCDSplashScreen>
	index = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	77fb      	strb	r3, [r7, #31]

	//Display Altitude unit
	snprintf (stringBuffer, sizeof(stringBuffer), "Alt. Unit = %c", gpsData.altitudeUnit);
 800161e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001622:	1d38      	adds	r0, r7, #4
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <printDataOnOLED+0x3d8>)
 8001626:	2119      	movs	r1, #25
 8001628:	f007 fa98 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 800162c:	7ffb      	ldrb	r3, [r7, #31]
 800162e:	461a      	mov	r2, r3
 8001630:	0052      	lsls	r2, r2, #1
 8001632:	e021      	b.n	8001678 <printDataOnOLED+0x3dc>
 8001634:	0800b908 	.word	0x0800b908
 8001638:	0800b918 	.word	0x0800b918
 800163c:	0800b928 	.word	0x0800b928
 8001640:	0800b938 	.word	0x0800b938
 8001644:	0800b948 	.word	0x0800b948
 8001648:	0800b958 	.word	0x0800b958
 800164c:	0800b968 	.word	0x0800b968
 8001650:	0800b978 	.word	0x0800b978
 8001654:	0800b988 	.word	0x0800b988
 8001658:	0800b998 	.word	0x0800b998
 800165c:	0800b9a8 	.word	0x0800b9a8
 8001660:	0800b9b8 	.word	0x0800b9b8
 8001664:	0800b9cc 	.word	0x0800b9cc
 8001668:	0800b9dc 	.word	0x0800b9dc
 800166c:	0800b9ec 	.word	0x0800b9ec
 8001670:	0800b9fc 	.word	0x0800b9fc
 8001674:	0800ba0c 	.word	0x0800ba0c
 8001678:	441a      	add	r2, r3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4413      	add	r3, r2
 800167e:	b2d9      	uxtb	r1, r3
 8001680:	1d3a      	adds	r2, r7, #4
 8001682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	230c      	movs	r3, #12
 800168a:	2000      	movs	r0, #0
 800168c:	f000 fcc0 	bl	8002010 <ssd1331_display_string>
	index++;
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	3301      	adds	r3, #1
 8001694:	77fb      	strb	r3, [r7, #31]

	//Display Geopid Separation
	snprintf (stringBuffer, sizeof(stringBuffer), "Geoid Sep. = %c",
	          gpsData.geoidSeparation);
 8001696:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	snprintf (stringBuffer, sizeof(stringBuffer), "Geoid Sep. = %c",
 800169a:	1d38      	adds	r0, r7, #4
 800169c:	4a36      	ldr	r2, [pc, #216]	; (8001778 <printDataOnOLED+0x4dc>)
 800169e:	2119      	movs	r1, #25
 80016a0:	f007 fa5c 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80016a4:	7ffb      	ldrb	r3, [r7, #31]
 80016a6:	461a      	mov	r2, r3
 80016a8:	0052      	lsls	r2, r2, #1
 80016aa:	441a      	add	r2, r3
 80016ac:	0092      	lsls	r2, r2, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	1d3a      	adds	r2, r7, #4
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	230c      	movs	r3, #12
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 fca7 	bl	8002010 <ssd1331_display_string>
	index++;
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	3301      	adds	r3, #1
 80016c6:	77fb      	strb	r3, [r7, #31]

	//Display Geopid Separation unit
	snprintf (stringBuffer, sizeof(stringBuffer), "G.Sep.Unit.= %c",
	          gpsData.geoidSeparationUnit);
 80016c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	snprintf (stringBuffer, sizeof(stringBuffer), "G.Sep.Unit.= %c",
 80016cc:	1d38      	adds	r0, r7, #4
 80016ce:	4a2b      	ldr	r2, [pc, #172]	; (800177c <printDataOnOLED+0x4e0>)
 80016d0:	2119      	movs	r1, #25
 80016d2:	f007 fa43 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	461a      	mov	r2, r3
 80016da:	0052      	lsls	r2, r2, #1
 80016dc:	441a      	add	r2, r3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	b2d9      	uxtb	r1, r3
 80016e4:	1d3a      	adds	r2, r7, #4
 80016e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	230c      	movs	r3, #12
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 fc8e 	bl	8002010 <ssd1331_display_string>
	index++;
 80016f4:	7ffb      	ldrb	r3, [r7, #31]
 80016f6:	3301      	adds	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]

	// Clear OLED
	ssd1331_clear_screen (BLACK);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f000 fcd1 	bl	80020a2 <ssd1331_clear_screen>
	startUpLCDSplashScreen ();
 8001700:	f7ff fce0 	bl	80010c4 <startUpLCDSplashScreen>
	index = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	77fb      	strb	r3, [r7, #31]

	//Display DGPS Age
	snprintf (stringBuffer, sizeof(stringBuffer), "DGPS = %d", gpsData.dgps);
 8001708:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800170c:	1d38      	adds	r0, r7, #4
 800170e:	4a1c      	ldr	r2, [pc, #112]	; (8001780 <printDataOnOLED+0x4e4>)
 8001710:	2119      	movs	r1, #25
 8001712:	f007 fa23 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	461a      	mov	r2, r3
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	441a      	add	r2, r3
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	4413      	add	r3, r2
 8001722:	b2d9      	uxtb	r1, r3
 8001724:	1d3a      	adds	r2, r7, #4
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	230c      	movs	r3, #12
 800172e:	2000      	movs	r0, #0
 8001730:	f000 fc6e 	bl	8002010 <ssd1331_display_string>
	index++;
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	3301      	adds	r3, #1
 8001738:	77fb      	strb	r3, [r7, #31]

	snprintf (stringBuffer, sizeof(stringBuffer), "Checksum = %ld", gpsData.checkSum);
 800173a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800173c:	1d38      	adds	r0, r7, #4
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <printDataOnOLED+0x4e8>)
 8001740:	2119      	movs	r1, #25
 8001742:	f007 fa0b 	bl	8008b5c <sniprintf>
	ssd1331_display_string (0, index + index * FONT_1206, stringBuffer, FONT_1206, WHITE);
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	461a      	mov	r2, r3
 800174a:	0052      	lsls	r2, r2, #1
 800174c:	441a      	add	r2, r3
 800174e:	0092      	lsls	r2, r2, #2
 8001750:	4413      	add	r3, r2
 8001752:	b2d9      	uxtb	r1, r3
 8001754:	1d3a      	adds	r2, r7, #4
 8001756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	230c      	movs	r3, #12
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fc56 	bl	8002010 <ssd1331_display_string>
	index++;
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	3301      	adds	r3, #1
 8001768:	77fb      	strb	r3, [r7, #31]
}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001774:	b004      	add	sp, #16
 8001776:	4770      	bx	lr
 8001778:	0800ba1c 	.word	0x0800ba1c
 800177c:	0800ba2c 	.word	0x0800ba2c
 8001780:	0800ba3c 	.word	0x0800ba3c
 8001784:	0800ba48 	.word	0x0800ba48

08001788 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001788:	b5b0      	push	{r4, r5, r7, lr}
 800178a:	b092      	sub	sp, #72	; 0x48
 800178c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init ();
 800178e:	f000 fff6 	bl	800277e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config ();
 8001792:	f000 f9a3 	bl	8001adc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init ();
 8001796:	f000 fb03 	bl	8001da0 <MX_GPIO_Init>
	MX_TIM1_Init ();
 800179a:	f000 fa41 	bl	8001c20 <MX_TIM1_Init>
	MX_USART2_UART_Init ();
 800179e:	f000 facf 	bl	8001d40 <MX_USART2_UART_Init>
	MX_SPI1_Init ();
 80017a2:	f000 f9ff 	bl	8001ba4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit_IT (&huart2, (uint8_t*) info, strlen (info)); //Transmit data in interrupt mode
 80017a6:	4baf      	ldr	r3, [pc, #700]	; (8001a64 <main+0x2dc>)
 80017a8:	681c      	ldr	r4, [r3, #0]
 80017aa:	4bae      	ldr	r3, [pc, #696]	; (8001a64 <main+0x2dc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd5e 	bl	8000270 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4621      	mov	r1, r4
 80017bc:	48aa      	ldr	r0, [pc, #680]	; (8001a68 <main+0x2e0>)
 80017be:	f003 ff77 	bl	80056b0 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT (&huart2, (uint8_t*) &recChar, 1); //receive data from data buffer interrupt mode
 80017c2:	2201      	movs	r2, #1
 80017c4:	49a9      	ldr	r1, [pc, #676]	; (8001a6c <main+0x2e4>)
 80017c6:	48a8      	ldr	r0, [pc, #672]	; (8001a68 <main+0x2e0>)
 80017c8:	f003 ffd0 	bl	800576c <HAL_UART_Receive_IT>
	printf ("Ready to Receive GPS string\r\n");
 80017cc:	48a8      	ldr	r0, [pc, #672]	; (8001a70 <main+0x2e8>)
 80017ce:	f007 f9bd 	bl	8008b4c <puts>
	ssd1331_init ();
 80017d2:	f000 fc8f 	bl	80020f4 <ssd1331_init>
	startUpLCDSplashScreen ();
 80017d6:	f7ff fc75 	bl	80010c4 <startUpLCDSplashScreen>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		gpsData_t gpsData;

		if (sentenceReceived)
 80017da:	4ba6      	ldr	r3, [pc, #664]	; (8001a74 <main+0x2ec>)
 80017dc:	f993 3000 	ldrsb.w	r3, [r3]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0fa      	beq.n	80017da <main+0x52>
		{
			/* your code goes here to parse the string inside recBuffer */
			printf ("recBuffer: %s\r\n", recBuffer);
 80017e4:	49a4      	ldr	r1, [pc, #656]	; (8001a78 <main+0x2f0>)
 80017e6:	48a5      	ldr	r0, [pc, #660]	; (8001a7c <main+0x2f4>)
 80017e8:	f007 f94a 	bl	8008a80 <iprintf>
			char *tokPtr = NULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28

			// Take First Data from input string
			tokPtr = strtok (recBuffer, ",");
 80017f0:	49a3      	ldr	r1, [pc, #652]	; (8001a80 <main+0x2f8>)
 80017f2:	48a1      	ldr	r0, [pc, #644]	; (8001a78 <main+0x2f0>)
 80017f4:	f007 fb0c 	bl	8008e10 <strtok>
 80017f8:	62b8      	str	r0, [r7, #40]	; 0x28

			printf ("Identification String : %s\r\n", tokPtr);
 80017fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017fc:	48a1      	ldr	r0, [pc, #644]	; (8001a84 <main+0x2fc>)
 80017fe:	f007 f93f 	bl	8008a80 <iprintf>
			for (gpsData_e gpsDataIdx = GPS_DATA_UTC_TIME; gpsDataIdx < GPS_DATA_MAX;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001808:	e09f      	b.n	800194a <main+0x1c2>
			                gpsDataIdx++)
			{
				tokPtr = strtok (NULL, ",");
 800180a:	499d      	ldr	r1, [pc, #628]	; (8001a80 <main+0x2f8>)
 800180c:	2000      	movs	r0, #0
 800180e:	f007 faff 	bl	8008e10 <strtok>
 8001812:	62b8      	str	r0, [r7, #40]	; 0x28

				switch (gpsDataIdx)
 8001814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001818:	2b0d      	cmp	r3, #13
 800181a:	f200 8090 	bhi.w	800193e <main+0x1b6>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <main+0x9c>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	0800185d 	.word	0x0800185d
 8001828:	08001869 	.word	0x08001869
 800182c:	08001875 	.word	0x08001875
 8001830:	08001885 	.word	0x08001885
 8001834:	08001891 	.word	0x08001891
 8001838:	080018a1 	.word	0x080018a1
 800183c:	080018af 	.word	0x080018af
 8001840:	080018bd 	.word	0x080018bd
 8001844:	080018d5 	.word	0x080018d5
 8001848:	080018ed 	.word	0x080018ed
 800184c:	080018fd 	.word	0x080018fd
 8001850:	0800190d 	.word	0x0800190d
 8001854:	0800191d 	.word	0x0800191d
 8001858:	0800192b 	.word	0x0800192b
				{
					case GPS_DATA_UTC_TIME:
					{
						parseUSTTime (&gpsData, tokPtr);
 800185c:	463b      	mov	r3, r7
 800185e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc59 	bl	8001118 <parseUSTTime>
						break;
 8001866:	e06b      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_LATITUDE:
					{
						parseLatitude (&gpsData, tokPtr);
 8001868:	463b      	mov	r3, r7
 800186a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc9f 	bl	80011b0 <parseLatitude>
						break;
 8001872:	e065      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_LATITUDE_DIRECTION:
					{
						strncpy (&gpsData.latiTude.latiTudeDirection, tokPtr,
 8001874:	463b      	mov	r3, r7
 8001876:	3308      	adds	r3, #8
 8001878:	2201      	movs	r2, #1
 800187a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800187c:	4618      	mov	r0, r3
 800187e:	f007 fab3 	bl	8008de8 <strncpy>
						         sizeof(gpsData.latiTude.latiTudeDirection));
						break;
 8001882:	e05d      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_LONGITUDE:
					{
						parseLongitude (&gpsData, tokPtr);
 8001884:	463b      	mov	r3, r7
 8001886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fccc 	bl	8001226 <parseLongitude>
						break;
 800188e:	e057      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_LONGITUDE_DIRECTION:
					{
						strncpy (&gpsData.longiTude.longiTudeDirection, tokPtr,
 8001890:	463b      	mov	r3, r7
 8001892:	3310      	adds	r3, #16
 8001894:	2201      	movs	r2, #1
 8001896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001898:	4618      	mov	r0, r3
 800189a:	f007 faa5 	bl	8008de8 <strncpy>
						         sizeof(gpsData.longiTude.longiTudeDirection));

						break;
 800189e:	e04f      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_POSITION:
					{
						gpsData.position = atoi (tokPtr);
 80018a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018a2:	f005 fa86 	bl	8006db2 <atoi>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	74bb      	strb	r3, [r7, #18]
						break;
 80018ac:	e048      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_SATELITE_NUMBER:
					{
						gpsData.sateliteNumber = atoi (tokPtr);
 80018ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018b0:	f005 fa7f 	bl	8006db2 <atoi>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	74fb      	strb	r3, [r7, #19]
						break;
 80018ba:	e041      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_HDOP:
					{
						gpsData.hdop = atof (tokPtr);
 80018bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018be:	f005 fa75 	bl	8006dac <atof>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f98d 	bl	8000be8 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	617b      	str	r3, [r7, #20]
						break;
 80018d2:	e035      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_ALTITUDE:
					{
						gpsData.altitude = atof (tokPtr);
 80018d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018d6:	f005 fa69 	bl	8006dac <atof>
 80018da:	ec53 2b10 	vmov	r2, r3, d0
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f981 	bl	8000be8 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]
						break;
 80018ea:	e029      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_ALTITUDE_UNIT:
					{
						strncpy (&gpsData.altitudeUnit, tokPtr,
 80018ec:	463b      	mov	r3, r7
 80018ee:	331c      	adds	r3, #28
 80018f0:	2201      	movs	r2, #1
 80018f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f4:	4618      	mov	r0, r3
 80018f6:	f007 fa77 	bl	8008de8 <strncpy>
						         sizeof(gpsData.altitudeUnit));
						break;
 80018fa:	e021      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_GEOID_SEPARATION:
					{
						strncpy (&gpsData.geoidSeparation, tokPtr,
 80018fc:	463b      	mov	r3, r7
 80018fe:	331d      	adds	r3, #29
 8001900:	2201      	movs	r2, #1
 8001902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001904:	4618      	mov	r0, r3
 8001906:	f007 fa6f 	bl	8008de8 <strncpy>
						         sizeof(gpsData.geoidSeparation));
						break;
 800190a:	e019      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_GEOID_SEPARATION_UNIT:
					{
						strncpy (&gpsData.geoidSeparationUnit, tokPtr,
 800190c:	463b      	mov	r3, r7
 800190e:	331e      	adds	r3, #30
 8001910:	2201      	movs	r2, #1
 8001912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001914:	4618      	mov	r0, r3
 8001916:	f007 fa67 	bl	8008de8 <strncpy>
						         sizeof(gpsData.geoidSeparationUnit));
						break;
 800191a:	e011      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_DGPS:
					{
						gpsData.dgps = atoi (tokPtr);
 800191c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800191e:	f005 fa48 	bl	8006db2 <atoi>
 8001922:	4603      	mov	r3, r0
 8001924:	b29b      	uxth	r3, r3
 8001926:	843b      	strh	r3, [r7, #32]
						break;
 8001928:	e00a      	b.n	8001940 <main+0x1b8>
					}

					case GPS_DATA_CHECKSUM:
					{
						gpsData.checkSum = strtoul (tokPtr + 1, NULL, 16);
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	3301      	adds	r3, #1
 800192e:	2210      	movs	r2, #16
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 f962 	bl	8007bfc <strtoul>
 8001938:	4603      	mov	r3, r0
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 800193c:	e000      	b.n	8001940 <main+0x1b8>
					}

					default:
					{
						break;
 800193e:	bf00      	nop
			                gpsDataIdx++)
 8001940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001944:	3301      	adds	r3, #1
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			for (gpsData_e gpsDataIdx = GPS_DATA_UTC_TIME; gpsDataIdx < GPS_DATA_MAX;
 800194a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800194e:	2b0d      	cmp	r3, #13
 8001950:	f67f af5b 	bls.w	800180a <main+0x82>
					}
				}
			}

			printf ("UTC Time -> Hour = %d\r\n", gpsData.utcTime.hour);
 8001954:	783b      	ldrb	r3, [r7, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	484b      	ldr	r0, [pc, #300]	; (8001a88 <main+0x300>)
 800195a:	f007 f891 	bl	8008a80 <iprintf>
			printf ("UTC Time -> Minute = %d\r\n", gpsData.utcTime.minute);
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	4619      	mov	r1, r3
 8001962:	484a      	ldr	r0, [pc, #296]	; (8001a8c <main+0x304>)
 8001964:	f007 f88c 	bl	8008a80 <iprintf>
			printf ("UTC Time -> Second = %d\r\n", gpsData.utcTime.second);
 8001968:	78bb      	ldrb	r3, [r7, #2]
 800196a:	4619      	mov	r1, r3
 800196c:	4848      	ldr	r0, [pc, #288]	; (8001a90 <main+0x308>)
 800196e:	f007 f887 	bl	8008a80 <iprintf>
			printf ("UTC Time -> Milisecond = %d\r\n", gpsData.utcTime.second2);
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	4619      	mov	r1, r3
 8001976:	4847      	ldr	r0, [pc, #284]	; (8001a94 <main+0x30c>)
 8001978:	f007 f882 	bl	8008a80 <iprintf>
			printf ("Latitude -> Degree = %d\r\n", gpsData.latiTude.degree);
 800197c:	793b      	ldrb	r3, [r7, #4]
 800197e:	4619      	mov	r1, r3
 8001980:	4845      	ldr	r0, [pc, #276]	; (8001a98 <main+0x310>)
 8001982:	f007 f87d 	bl	8008a80 <iprintf>
			printf ("Latitude -> Minute = %d\r\n", gpsData.latiTude.minute);
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	4619      	mov	r1, r3
 800198a:	4844      	ldr	r0, [pc, #272]	; (8001a9c <main+0x314>)
 800198c:	f007 f878 	bl	8008a80 <iprintf>
			printf ("Latitude -> DecimalDegree = %d\r\n", gpsData.latiTude.decimalDegree);
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4619      	mov	r1, r3
 8001994:	4842      	ldr	r0, [pc, #264]	; (8001aa0 <main+0x318>)
 8001996:	f007 f873 	bl	8008a80 <iprintf>
			printf ("Latitude -> Direction = %c\r\n", gpsData.latiTude.latiTudeDirection);
 800199a:	7a3b      	ldrb	r3, [r7, #8]
 800199c:	4619      	mov	r1, r3
 800199e:	4841      	ldr	r0, [pc, #260]	; (8001aa4 <main+0x31c>)
 80019a0:	f007 f86e 	bl	8008a80 <iprintf>
			printf ("Longitude -> Degree = %d\r\n", gpsData.longiTude.degree);
 80019a4:	897b      	ldrh	r3, [r7, #10]
 80019a6:	4619      	mov	r1, r3
 80019a8:	483f      	ldr	r0, [pc, #252]	; (8001aa8 <main+0x320>)
 80019aa:	f007 f869 	bl	8008a80 <iprintf>
			printf ("Longitude -> Minute = %d\r\n", gpsData.longiTude.minute);
 80019ae:	7b3b      	ldrb	r3, [r7, #12]
 80019b0:	4619      	mov	r1, r3
 80019b2:	483e      	ldr	r0, [pc, #248]	; (8001aac <main+0x324>)
 80019b4:	f007 f864 	bl	8008a80 <iprintf>
			printf ("Longitude -> DecimalDegree = %d\r\n",
			        gpsData.longiTude.decimalDegree);
 80019b8:	89fb      	ldrh	r3, [r7, #14]
			printf ("Longitude -> DecimalDegree = %d\r\n",
 80019ba:	4619      	mov	r1, r3
 80019bc:	483c      	ldr	r0, [pc, #240]	; (8001ab0 <main+0x328>)
 80019be:	f007 f85f 	bl	8008a80 <iprintf>
			printf ("Longitude -> Direction = %c\r\n",
			        gpsData.longiTude.longiTudeDirection);
 80019c2:	7c3b      	ldrb	r3, [r7, #16]
			printf ("Longitude -> Direction = %c\r\n",
 80019c4:	4619      	mov	r1, r3
 80019c6:	483b      	ldr	r0, [pc, #236]	; (8001ab4 <main+0x32c>)
 80019c8:	f007 f85a 	bl	8008a80 <iprintf>
			printf ("Position = %d\r\n", gpsData.position);
 80019cc:	7cbb      	ldrb	r3, [r7, #18]
 80019ce:	4619      	mov	r1, r3
 80019d0:	4839      	ldr	r0, [pc, #228]	; (8001ab8 <main+0x330>)
 80019d2:	f007 f855 	bl	8008a80 <iprintf>
			printf ("Satelitinumber = %d\r\n", gpsData.sateliteNumber);
 80019d6:	7cfb      	ldrb	r3, [r7, #19]
 80019d8:	4619      	mov	r1, r3
 80019da:	4838      	ldr	r0, [pc, #224]	; (8001abc <main+0x334>)
 80019dc:	f007 f850 	bl	8008a80 <iprintf>
			printf ("HDOP = %.3f\r\n", gpsData.hdop);
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4834      	ldr	r0, [pc, #208]	; (8001ac0 <main+0x338>)
 80019ee:	f007 f847 	bl	8008a80 <iprintf>
			printf ("Altitude = %.3f\r\n", gpsData.altitude);
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fda7 	bl	8000548 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4831      	ldr	r0, [pc, #196]	; (8001ac4 <main+0x33c>)
 8001a00:	f007 f83e 	bl	8008a80 <iprintf>
			printf ("AltitudeUnit = %c\r\n", gpsData.altitudeUnit);
 8001a04:	7f3b      	ldrb	r3, [r7, #28]
 8001a06:	4619      	mov	r1, r3
 8001a08:	482f      	ldr	r0, [pc, #188]	; (8001ac8 <main+0x340>)
 8001a0a:	f007 f839 	bl	8008a80 <iprintf>
			printf ("GeoidSeparation = %c\r\n", gpsData.geoidSeparation);
 8001a0e:	7f7b      	ldrb	r3, [r7, #29]
 8001a10:	4619      	mov	r1, r3
 8001a12:	482e      	ldr	r0, [pc, #184]	; (8001acc <main+0x344>)
 8001a14:	f007 f834 	bl	8008a80 <iprintf>
			printf ("GeoidSeparationUnit = %c\r\n", gpsData.geoidSeparationUnit);
 8001a18:	7fbb      	ldrb	r3, [r7, #30]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	482c      	ldr	r0, [pc, #176]	; (8001ad0 <main+0x348>)
 8001a1e:	f007 f82f 	bl	8008a80 <iprintf>
			printf ("DGPS = %d\r\n", gpsData.dgps);
 8001a22:	8c3b      	ldrh	r3, [r7, #32]
 8001a24:	4619      	mov	r1, r3
 8001a26:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <main+0x34c>)
 8001a28:	f007 f82a 	bl	8008a80 <iprintf>
			printf ("CheckSum: %ld\r\n", gpsData.checkSum);
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4829      	ldr	r0, [pc, #164]	; (8001ad8 <main+0x350>)
 8001a32:	f007 f825 	bl	8008a80 <iprintf>

			printDataOnOLED (gpsData);
 8001a36:	466d      	mov	r5, sp
 8001a38:	f107 0410 	add.w	r4, r7, #16
 8001a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a48:	463b      	mov	r3, r7
 8001a4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a4c:	f7ff fc26 	bl	800129c <printDataOnOLED>
			ssd1331_clear_screen (BLACK);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 fb26 	bl	80020a2 <ssd1331_clear_screen>
			startUpLCDSplashScreen ();
 8001a56:	f7ff fb35 	bl	80010c4 <startUpLCDSplashScreen>

			sentenceReceived = 0;	//as we've finished processing the sentence
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <main+0x2ec>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
	{
 8001a60:	e6bb      	b.n	80017da <main+0x52>
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000
 8001a68:	200002a4 	.word	0x200002a4
 8001a6c:	2000032c 	.word	0x2000032c
 8001a70:	0800ba58 	.word	0x0800ba58
 8001a74:	20000395 	.word	0x20000395
 8001a78:	20000330 	.word	0x20000330
 8001a7c:	0800ba78 	.word	0x0800ba78
 8001a80:	0800ba88 	.word	0x0800ba88
 8001a84:	0800ba8c 	.word	0x0800ba8c
 8001a88:	0800baac 	.word	0x0800baac
 8001a8c:	0800bac4 	.word	0x0800bac4
 8001a90:	0800bae0 	.word	0x0800bae0
 8001a94:	0800bafc 	.word	0x0800bafc
 8001a98:	0800bb1c 	.word	0x0800bb1c
 8001a9c:	0800bb38 	.word	0x0800bb38
 8001aa0:	0800bb54 	.word	0x0800bb54
 8001aa4:	0800bb78 	.word	0x0800bb78
 8001aa8:	0800bb98 	.word	0x0800bb98
 8001aac:	0800bbb4 	.word	0x0800bbb4
 8001ab0:	0800bbd0 	.word	0x0800bbd0
 8001ab4:	0800bbf4 	.word	0x0800bbf4
 8001ab8:	0800bc14 	.word	0x0800bc14
 8001abc:	0800bc24 	.word	0x0800bc24
 8001ac0:	0800bc3c 	.word	0x0800bc3c
 8001ac4:	0800bc4c 	.word	0x0800bc4c
 8001ac8:	0800bc60 	.word	0x0800bc60
 8001acc:	0800bc74 	.word	0x0800bc74
 8001ad0:	0800bc8c 	.word	0x0800bc8c
 8001ad4:	0800bca8 	.word	0x0800bca8
 8001ad8:	0800bcb4 	.word	0x0800bcb4

08001adc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
 8001ae0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	2244      	movs	r2, #68	; 0x44
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f007 f962 	bl	8008db4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001afe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b02:	f001 fa05 	bl	8002f10 <HAL_PWREx_ControlVoltageScaling>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x34>
	{
		Error_Handler ();
 8001b0c:	f000 f992 	bl	8001e34 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8001b10:	f001 f9e0 	bl	8002ed4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <SystemClock_Config+0xc4>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <SystemClock_Config+0xc4>)
 8001b1c:	f023 0318 	bic.w	r3, r3, #24
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001b24:	2314      	movs	r3, #20
 8001b26:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b34:	2360      	movs	r3, #96	; 0x60
 8001b36:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001b44:	2310      	movs	r3, #16
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b48:	2307      	movs	r3, #7
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fa2f 	bl	8002fbc <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x8c>
	{
		Error_Handler ();
 8001b64:	f000 f966 	bl	8001e34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	603b      	str	r3, [r7, #0]
	                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001b78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b7c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	2101      	movs	r1, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f001 fe2e 	bl	80037e4 <HAL_RCC_ClockConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <SystemClock_Config+0xb6>
	{
		Error_Handler ();
 8001b8e:	f000 f951 	bl	8001e34 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 8001b92:	f002 fa41 	bl	8004018 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001b96:	bf00      	nop
 8001b98:	3758      	adds	r7, #88	; 0x58
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001baa:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <MX_SPI1_Init+0x78>)
 8001bac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bc2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bda:	2210      	movs	r2, #16
 8001bdc:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001bfe:	2208      	movs	r2, #8
 8001c00:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_SPI1_Init+0x74>)
 8001c04:	f002 fb0a 	bl	800421c <HAL_SPI_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_SPI1_Init+0x6e>
	{
		Error_Handler ();
 8001c0e:	f000 f911 	bl	8001e34 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200001f4 	.word	0x200001f4
 8001c1c:	40013000 	.word	0x40013000

08001c20 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b096      	sub	sp, #88	; 0x58
 8001c24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	222c      	movs	r2, #44	; 0x2c
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f007 f8b1 	bl	8008db4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c54:	4a39      	ldr	r2, [pc, #228]	; (8001d3c <MX_TIM1_Init+0x11c>)
 8001c56:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 9090;
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c66:	f242 3282 	movw	r2, #9090	; 0x2382
 8001c6a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init (&htim1) != HAL_OK)
 8001c7e:	482e      	ldr	r0, [pc, #184]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001c80:	f002 fe48 	bl	8004914 <HAL_TIM_PWM_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x6e>
	{
		Error_Handler ();
 8001c8a:	f000 f8d3 	bl	8001e34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization (&htim1, &sMasterConfig) != HAL_OK)
 8001c9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4825      	ldr	r0, [pc, #148]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001ca2:	f003 fa85 	bl	80051b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x90>
	{
		Error_Handler ();
 8001cac:	f000 f8c2 	bl	8001e34 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb0:	2360      	movs	r3, #96	; 0x60
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 4045;
 8001cb4:	f640 73cd 	movw	r3, #4045	; 0xfcd
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4818      	ldr	r0, [pc, #96]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001cd8:	f002 fe74 	bl	80049c4 <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0xc6>
	{
		Error_Handler ();
 8001ce2:	f000 f8a7 	bl	8001e34 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cfe:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime (&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001d1c:	f003 faae 	bl	800527c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0x10a>
	{
		Error_Handler ();
 8001d26:	f000 f885 	bl	8001e34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 8001d2a:	4803      	ldr	r0, [pc, #12]	; (8001d38 <MX_TIM1_Init+0x118>)
 8001d2c:	f000 fb44 	bl	80023b8 <HAL_TIM_MspPostInit>

}
 8001d30:	bf00      	nop
 8001d32:	3758      	adds	r7, #88	; 0x58
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000258 	.word	0x20000258
 8001d3c:	40012c00 	.word	0x40012c00

08001d40 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <MX_USART2_UART_Init+0x5c>)
 8001d48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init (&huart2) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_USART2_UART_Init+0x58>)
 8001d84:	f003 faf2 	bl	800536c <HAL_UART_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler ();
 8001d8e:	f000 f851 	bl	8001e34 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002a4 	.word	0x200002a4
 8001d9c:	40004400 	.word	0x40004400

08001da0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	4a16      	ldr	r2, [pc, #88]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <MX_GPIO_Init+0x8c>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB,
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <MX_GPIO_Init+0x90>)
 8001e04:	f001 f84e 	bl	8002ea4 <HAL_GPIO_WritePin>
	GPIO_PIN_3 | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin,
	                   GPIO_PIN_RESET);

	/*Configure GPIO pins : PB3 SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_3 | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin;
 8001e08:	2378      	movs	r3, #120	; 0x78
 8001e0a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4804      	ldr	r0, [pc, #16]	; (8001e30 <MX_GPIO_Init+0x90>)
 8001e20:	f000 fed6 	bl	8002bd0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400

08001e34 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2120      	movs	r1, #32
 8001e5e:	4811      	ldr	r0, [pc, #68]	; (8001ea4 <ssd1331_write_byte+0x60>)
 8001e60:	f001 f820 	bl	8002ea4 <HAL_GPIO_WritePin>
 8001e64:	e004      	b.n	8001e70 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	480e      	ldr	r0, [pc, #56]	; (8001ea4 <ssd1331_write_byte+0x60>)
 8001e6c:	f001 f81a 	bl	8002ea4 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8001e70:	2200      	movs	r2, #0
 8001e72:	2110      	movs	r1, #16
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <ssd1331_write_byte+0x60>)
 8001e76:	f001 f815 	bl	8002ea4 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001e7a:	1df9      	adds	r1, r7, #7
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4809      	ldr	r0, [pc, #36]	; (8001ea8 <ssd1331_write_byte+0x64>)
 8001e82:	f002 fa6e 	bl	8004362 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 8001e86:	2201      	movs	r2, #1
 8001e88:	2110      	movs	r1, #16
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <ssd1331_write_byte+0x60>)
 8001e8c:	f001 f80a 	bl	8002ea4 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001e90:	2201      	movs	r2, #1
 8001e92:	2120      	movs	r1, #32
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <ssd1331_write_byte+0x60>)
 8001e96:	f001 f805 	bl	8002ea4 <HAL_GPIO_WritePin>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	200001f4 	.word	0x200001f4

08001eac <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	71bb      	strb	r3, [r7, #6]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	2b5f      	cmp	r3, #95	; 0x5f
 8001ec2:	d82b      	bhi.n	8001f1c <ssd1331_draw_point+0x70>
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8001ec8:	d828      	bhi.n	8001f1c <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001eca:	2100      	movs	r1, #0
 8001ecc:	2015      	movs	r0, #21
 8001ece:	f7ff ffb9 	bl	8001e44 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ffb4 	bl	8001e44 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001edc:	2100      	movs	r1, #0
 8001ede:	205f      	movs	r0, #95	; 0x5f
 8001ee0:	f7ff ffb0 	bl	8001e44 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2075      	movs	r0, #117	; 0x75
 8001ee8:	f7ff ffac 	bl	8001e44 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001eec:	79bb      	ldrb	r3, [r7, #6]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ffa7 	bl	8001e44 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	203f      	movs	r0, #63	; 0x3f
 8001efa:	f7ff ffa3 	bl	8001e44 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001efe:	88bb      	ldrh	r3, [r7, #4]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2101      	movs	r1, #1
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff9b 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff95 	bl	8001e44 <ssd1331_write_byte>
 8001f1a:	e000      	b.n	8001f1e <ssd1331_draw_point+0x72>
		return;
 8001f1c:	bf00      	nop
}
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4623      	mov	r3, r4
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	4603      	mov	r3, r0
 8001f38:	71bb      	strb	r3, [r7, #6]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	717b      	strb	r3, [r7, #5]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	2b5f      	cmp	r3, #95	; 0x5f
 8001f4e:	d857      	bhi.n	8002000 <ssd1331_display_char+0xdc>
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	2b3f      	cmp	r3, #63	; 0x3f
 8001f54:	d854      	bhi.n	8002000 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e04c      	b.n	8001ff6 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001f5c:	793b      	ldrb	r3, [r7, #4]
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	d10d      	bne.n	8001f7e <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8001f62:	797b      	ldrb	r3, [r7, #5]
 8001f64:	f1a3 0220 	sub.w	r2, r3, #32
 8001f68:	7bf9      	ldrb	r1, [r7, #15]
 8001f6a:	4827      	ldr	r0, [pc, #156]	; (8002008 <ssd1331_display_char+0xe4>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4403      	add	r3, r0
 8001f76:	440b      	add	r3, r1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	737b      	strb	r3, [r7, #13]
 8001f7c:	e00c      	b.n	8001f98 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8001f7e:	793b      	ldrb	r3, [r7, #4]
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d109      	bne.n	8001f98 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	f1a3 0220 	sub.w	r2, r3, #32
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	491f      	ldr	r1, [pc, #124]	; (800200c <ssd1331_display_char+0xe8>)
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	440a      	add	r2, r1
 8001f92:	4413      	add	r3, r2
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73bb      	strb	r3, [r7, #14]
 8001f9c:	e025      	b.n	8001fea <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001f9e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	da06      	bge.n	8001fb4 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001fa6:	8c3a      	ldrh	r2, [r7, #32]
 8001fa8:	79b9      	ldrb	r1, [r7, #6]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff7d 	bl	8001eac <ssd1331_draw_point>
 8001fb2:	e005      	b.n	8001fc0 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001fb4:	79b9      	ldrb	r1, [r7, #6]
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff76 	bl	8001eac <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001fc6:	79bb      	ldrb	r3, [r7, #6]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001fcc:	79ba      	ldrb	r2, [r7, #6]
 8001fce:	7b3b      	ldrb	r3, [r7, #12]
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	793b      	ldrb	r3, [r7, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d105      	bne.n	8001fe4 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001fd8:	7b3b      	ldrb	r3, [r7, #12]
 8001fda:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	71fb      	strb	r3, [r7, #7]
				break;
 8001fe2:	e005      	b.n	8001ff0 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	73bb      	strb	r3, [r7, #14]
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	2b07      	cmp	r3, #7
 8001fee:	d9d6      	bls.n	8001f9e <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	793b      	ldrb	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3ae      	bcc.n	8001f5c <ssd1331_display_char+0x38>
 8001ffe:	e000      	b.n	8002002 <ssd1331_display_char+0xde>
		return;
 8002000:	bf00      	nop
			}
		}  	 
    } 
}
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	0800bcc4 	.word	0x0800bcc4
 800200c:	0800c138 	.word	0x0800c138

08002010 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af02      	add	r7, sp, #8
 8002016:	603a      	str	r2, [r7, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	460b      	mov	r3, r1
 8002020:	71bb      	strb	r3, [r7, #6]
 8002022:	4613      	mov	r3, r2
 8002024:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b5f      	cmp	r3, #95	; 0x5f
 800202a:	d836      	bhi.n	800209a <ssd1331_display_string+0x8a>
 800202c:	79bb      	ldrb	r3, [r7, #6]
 800202e:	2b3f      	cmp	r3, #63	; 0x3f
 8002030:	d833      	bhi.n	800209a <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8002032:	e02d      	b.n	8002090 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	797b      	ldrb	r3, [r7, #5]
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002040:	429a      	cmp	r2, r3
 8002042:	dd12      	ble.n	800206a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8002048:	79ba      	ldrb	r2, [r7, #6]
 800204a:	797b      	ldrb	r3, [r7, #5]
 800204c:	4413      	add	r3, r2
 800204e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002050:	79ba      	ldrb	r2, [r7, #6]
 8002052:	797b      	ldrb	r3, [r7, #5]
 8002054:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002058:	429a      	cmp	r2, r3
 800205a:	dd06      	ble.n	800206a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f81c 	bl	80020a2 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	797c      	ldrb	r4, [r7, #5]
 8002070:	79b9      	ldrb	r1, [r7, #6]
 8002072:	79f8      	ldrb	r0, [r7, #7]
 8002074:	8b3b      	ldrh	r3, [r7, #24]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4623      	mov	r3, r4
 800207a:	f7ff ff53 	bl	8001f24 <ssd1331_display_char>
        chXpos += chSize / 2;
 800207e:	797b      	ldrb	r3, [r7, #5]
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	4413      	add	r3, r2
 8002088:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1cd      	bne.n	8002034 <ssd1331_display_string+0x24>
 8002098:	e000      	b.n	800209c <ssd1331_display_string+0x8c>
		return;
 800209a:	bf00      	nop
    } 
}
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}

080020a2 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 80020ac:	2100      	movs	r1, #0
 80020ae:	202e      	movs	r0, #46	; 0x2e
 80020b0:	f7ff fec8 	bl	8001e44 <ssd1331_write_byte>

	for(i = 0; i < OLED_HEIGHT; i ++){
 80020b4:	2300      	movs	r3, #0
 80020b6:	81fb      	strh	r3, [r7, #14]
 80020b8:	e013      	b.n	80020e2 <ssd1331_clear_screen+0x40>
		for(j = 0; j < OLED_WIDTH; j ++){
 80020ba:	2300      	movs	r3, #0
 80020bc:	81bb      	strh	r3, [r7, #12]
 80020be:	e00a      	b.n	80020d6 <ssd1331_clear_screen+0x34>
			ssd1331_draw_point(j, i, hwColor);
 80020c0:	89bb      	ldrh	r3, [r7, #12]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	89fa      	ldrh	r2, [r7, #14]
 80020c6:	b2d1      	uxtb	r1, r2
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff feee 	bl	8001eac <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	81bb      	strh	r3, [r7, #12]
 80020d6:	89bb      	ldrh	r3, [r7, #12]
 80020d8:	2b5f      	cmp	r3, #95	; 0x5f
 80020da:	d9f1      	bls.n	80020c0 <ssd1331_clear_screen+0x1e>
	for(i = 0; i < OLED_HEIGHT; i ++){
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	3301      	adds	r3, #1
 80020e0:	81fb      	strh	r3, [r7, #14]
 80020e2:	89fb      	ldrh	r3, [r7, #14]
 80020e4:	2b3f      	cmp	r3, #63	; 0x3f
 80020e6:	d9e8      	bls.n	80020ba <ssd1331_clear_screen+0x18>
		}
	}
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <ssd1331_init>:
		}
	}
}

void ssd1331_init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 80020f8:	2201      	movs	r2, #1
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	4852      	ldr	r0, [pc, #328]	; (8002248 <ssd1331_init+0x154>)
 80020fe:	f000 fed1 	bl	8002ea4 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8002102:	2201      	movs	r2, #1
 8002104:	2110      	movs	r1, #16
 8002106:	4850      	ldr	r0, [pc, #320]	; (8002248 <ssd1331_init+0x154>)
 8002108:	f000 fecc 	bl	8002ea4 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 800210c:	2100      	movs	r1, #0
 800210e:	20ae      	movs	r0, #174	; 0xae
 8002110:	f7ff fe98 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8002114:	2100      	movs	r1, #0
 8002116:	2081      	movs	r0, #129	; 0x81
 8002118:	f7ff fe94 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 800211c:	2100      	movs	r1, #0
 800211e:	20ff      	movs	r0, #255	; 0xff
 8002120:	f7ff fe90 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8002124:	2100      	movs	r1, #0
 8002126:	2082      	movs	r0, #130	; 0x82
 8002128:	f7ff fe8c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 800212c:	2100      	movs	r1, #0
 800212e:	20ff      	movs	r0, #255	; 0xff
 8002130:	f7ff fe88 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8002134:	2100      	movs	r1, #0
 8002136:	2083      	movs	r0, #131	; 0x83
 8002138:	f7ff fe84 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 800213c:	2100      	movs	r1, #0
 800213e:	20ff      	movs	r0, #255	; 0xff
 8002140:	f7ff fe80 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8002144:	2100      	movs	r1, #0
 8002146:	2087      	movs	r0, #135	; 0x87
 8002148:	f7ff fe7c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 800214c:	2100      	movs	r1, #0
 800214e:	2006      	movs	r0, #6
 8002150:	f7ff fe78 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8002154:	2100      	movs	r1, #0
 8002156:	208a      	movs	r0, #138	; 0x8a
 8002158:	f7ff fe74 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800215c:	2100      	movs	r1, #0
 800215e:	2064      	movs	r0, #100	; 0x64
 8002160:	f7ff fe70 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8002164:	2100      	movs	r1, #0
 8002166:	208b      	movs	r0, #139	; 0x8b
 8002168:	f7ff fe6c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 800216c:	2100      	movs	r1, #0
 800216e:	2078      	movs	r0, #120	; 0x78
 8002170:	f7ff fe68 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8002174:	2100      	movs	r1, #0
 8002176:	208c      	movs	r0, #140	; 0x8c
 8002178:	f7ff fe64 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800217c:	2100      	movs	r1, #0
 800217e:	2064      	movs	r0, #100	; 0x64
 8002180:	f7ff fe60 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8002184:	2100      	movs	r1, #0
 8002186:	20a0      	movs	r0, #160	; 0xa0
 8002188:	f7ff fe5c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 800218c:	2100      	movs	r1, #0
 800218e:	2072      	movs	r0, #114	; 0x72
 8002190:	f7ff fe58 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8002194:	2100      	movs	r1, #0
 8002196:	20a1      	movs	r0, #161	; 0xa1
 8002198:	f7ff fe54 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 800219c:	2100      	movs	r1, #0
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff fe50 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 80021a4:	2100      	movs	r1, #0
 80021a6:	20a2      	movs	r0, #162	; 0xa2
 80021a8:	f7ff fe4c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80021ac:	2100      	movs	r1, #0
 80021ae:	2000      	movs	r0, #0
 80021b0:	f7ff fe48 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80021b4:	2100      	movs	r1, #0
 80021b6:	20a4      	movs	r0, #164	; 0xa4
 80021b8:	f7ff fe44 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80021bc:	2100      	movs	r1, #0
 80021be:	20a8      	movs	r0, #168	; 0xa8
 80021c0:	f7ff fe40 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80021c4:	2100      	movs	r1, #0
 80021c6:	203f      	movs	r0, #63	; 0x3f
 80021c8:	f7ff fe3c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80021cc:	2100      	movs	r1, #0
 80021ce:	20ad      	movs	r0, #173	; 0xad
 80021d0:	f7ff fe38 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80021d4:	2100      	movs	r1, #0
 80021d6:	208e      	movs	r0, #142	; 0x8e
 80021d8:	f7ff fe34 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 80021dc:	2100      	movs	r1, #0
 80021de:	20b0      	movs	r0, #176	; 0xb0
 80021e0:	f7ff fe30 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 80021e4:	2100      	movs	r1, #0
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fe2c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 80021ec:	2100      	movs	r1, #0
 80021ee:	20b1      	movs	r0, #177	; 0xb1
 80021f0:	f7ff fe28 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 80021f4:	2100      	movs	r1, #0
 80021f6:	2031      	movs	r0, #49	; 0x31
 80021f8:	f7ff fe24 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80021fc:	2100      	movs	r1, #0
 80021fe:	20b3      	movs	r0, #179	; 0xb3
 8002200:	f7ff fe20 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8002204:	2100      	movs	r1, #0
 8002206:	20f0      	movs	r0, #240	; 0xf0
 8002208:	f7ff fe1c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 800220c:	2100      	movs	r1, #0
 800220e:	20bb      	movs	r0, #187	; 0xbb
 8002210:	f7ff fe18 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8002214:	2100      	movs	r1, #0
 8002216:	203a      	movs	r0, #58	; 0x3a
 8002218:	f7ff fe14 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 800221c:	2100      	movs	r1, #0
 800221e:	20be      	movs	r0, #190	; 0xbe
 8002220:	f7ff fe10 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8002224:	2100      	movs	r1, #0
 8002226:	203e      	movs	r0, #62	; 0x3e
 8002228:	f7ff fe0c 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 800222c:	2100      	movs	r1, #0
 800222e:	202e      	movs	r0, #46	; 0x2e
 8002230:	f7ff fe08 	bl	8001e44 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8002234:	2100      	movs	r1, #0
 8002236:	20af      	movs	r0, #175	; 0xaf
 8002238:	f7ff fe04 	bl	8001e44 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff ff30 	bl	80020a2 <ssd1331_clear_screen>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	48000400 	.word	0x48000400

0800224c <EnableHorizontalCountinuousScroll>:

void EnableHorizontalCountinuousScroll(uint16_t iStartRow,uint8_t chSize)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	80fb      	strh	r3, [r7, #6]
 8002258:	4613      	mov	r3, r2
 800225a:	717b      	strb	r3, [r7, #5]
	// Below code is to scroll the data present on first line in to OLED
	ssd1331_write_byte (CONTINUOUS_SCROLLING_SETUP, 0);					// Continuous scrolling
 800225c:	2100      	movs	r1, #0
 800225e:	2027      	movs	r0, #39	; 0x27
 8002260:	f7ff fdf0 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (0x01, 0);					// Horizontal scroll by 1 column
 8002264:	2100      	movs	r1, #0
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff fdec 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (iStartRow + iStartRow, 0);	// Start row address
 800226c:	88fb      	ldrh	r3, [r7, #6]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fde4 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (chSize, 0);					// Total rows to be scrolled
 800227c:	797b      	ldrb	r3, [r7, #5]
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fddf 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (0x00, 0);					// No vertical scroll
 8002286:	2100      	movs	r1, #0
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff fddb 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (0x00, 0);					// Time interval between each scroll
 800228e:	2100      	movs	r1, #0
 8002290:	2000      	movs	r0, #0
 8002292:	f7ff fdd7 	bl	8001e44 <ssd1331_write_byte>
	ssd1331_write_byte (ACTIVE_SCROLLING, 0);  		//enable scrolling
 8002296:	2100      	movs	r1, #0
 8002298:	202f      	movs	r0, #47	; 0x2f
 800229a:	f7ff fdd3 	bl	8001e44 <ssd1331_write_byte>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_MspInit+0x44>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <HAL_MspInit+0x44>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_MspInit+0x44>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_MspInit+0x44>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_MspInit+0x44>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6593      	str	r3, [r2, #88]	; 0x58
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_MspInit+0x44>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_SPI_MspInit+0x80>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d129      	bne.n	8002366 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231c:	6613      	str	r3, [r2, #96]	; 0x60
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002326:	613b      	str	r3, [r7, #16]
 8002328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_SPI_MspInit+0x84>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_SPI_MspInit+0x84>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8002342:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002354:	2305      	movs	r3, #5
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002362:	f000 fc35 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40013000 	.word	0x40013000
 8002374:	40021000 	.word	0x40021000

08002378 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	6613      	str	r3, [r2, #96]	; 0x60
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40012c00 	.word	0x40012c00
 80023b4:	40021000 	.word	0x40021000

080023b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
 80023ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x64>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11c      	bne.n	8002414 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a10      	ldr	r2, [pc, #64]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_TIM_MspPostInit+0x68>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002402:	2301      	movs	r3, #1
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 030c 	add.w	r3, r7, #12
 800240a:	4619      	mov	r1, r3
 800240c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002410:	f000 fbde 	bl	8002bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b09e      	sub	sp, #120	; 0x78
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	2254      	movs	r2, #84	; 0x54
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f006 fcb5 	bl	8008db4 <memset>
  if(huart->Instance==USART2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <HAL_UART_MspInit+0xdc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d150      	bne.n	80024f6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002454:	2302      	movs	r3, #2
 8002456:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fbe3 	bl	8003c2c <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800246c:	f7ff fce2 	bl	8001e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_UART_MspInit+0xe0>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_UART_MspInit+0xe0>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b21      	ldr	r3, [pc, #132]	; (8002504 <HAL_UART_MspInit+0xe0>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_UART_MspInit+0xe0>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_UART_MspInit+0xe0>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_UART_MspInit+0xe0>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024a0:	2304      	movs	r3, #4
 80024a2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024b0:	2307      	movs	r3, #7
 80024b2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024be:	f000 fb87 	bl	8002bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80024d4:	2303      	movs	r3, #3
 80024d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80024dc:	4619      	mov	r1, r3
 80024de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e2:	f000 fb75 	bl	8002bd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2026      	movs	r0, #38	; 0x26
 80024ec:	f000 fabb 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024f0:	2026      	movs	r0, #38	; 0x26
 80024f2:	f000 fad4 	bl	8002a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024f6:	bf00      	nop
 80024f8:	3778      	adds	r7, #120	; 0x78
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004400 	.word	0x40004400
 8002504:	40021000 	.word	0x40021000

08002508 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250c:	f000 f98c 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}

08002514 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART2_IRQHandler+0x10>)
 800251a:	f003 f973 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200002a4 	.word	0x200002a4

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_kill>:

int _kill(int pid, int sig)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002542:	f006 fd0b 	bl	8008f5c <__errno>
 8002546:	4603      	mov	r3, r0
 8002548:	2216      	movs	r2, #22
 800254a:	601a      	str	r2, [r3, #0]
	return -1;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_exit>:

void _exit (int status)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffe7 	bl	8002538 <_kill>
	while (1) {}		/* Make sure we hang here */
 800256a:	e7fe      	b.n	800256a <_exit+0x12>

0800256c <_read>:
}

int _read (int file, char *ptr, int len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8002578:	2301      	movs	r3, #1
 800257a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <_read+0x38>)
 8002588:	f002 ffc8 	bl	800551c <HAL_UART_Receive>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	607b      	str	r3, [r7, #4]

	return len;
 8002598:	687b      	ldr	r3, [r7, #4]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200002a4 	.word	0x200002a4

080025a8 <_write>:

int _write(int file, char *ptr, int len)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	4809      	ldr	r0, [pc, #36]	; (80025e8 <_write+0x40>)
 80025c4:	f002 ff20 	bl	8005408 <HAL_UART_Transmit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d002      	beq.n	80025d8 <_write+0x30>
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d101      	bne.n	80025dc <_write+0x34>
	{
		Error_Handler();
 80025d8:	f7ff fc2c 	bl	8001e34 <Error_Handler>
	}

	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200002a4 	.word	0x200002a4

080025ec <_close>:



int _close(int file)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002614:	605a      	str	r2, [r3, #4]
	return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_isatty>:

int _isatty(int file)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	return 1;
 800262c:	2301      	movs	r3, #1
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
	return 0;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f006 fc6a 	bl	8008f5c <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20010000 	.word	0x20010000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	20000398 	.word	0x20000398
 80026bc:	200004f0 	.word	0x200004f0

080026c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <SystemInit+0x64>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <SystemInit+0x64>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <SystemInit+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <SystemInit+0x68>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <SystemInit+0x68>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <SystemInit+0x68>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <SystemInit+0x68>)
 80026ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <SystemInit+0x68>)
 80026f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <SystemInit+0x68>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <SystemInit+0x68>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <SystemInit+0x68>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SystemInit+0x64>)
 8002712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002716:	609a      	str	r2, [r3, #8]
#endif
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	40021000 	.word	0x40021000

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff ffc6 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002736:	e003      	b.n	8002740 <LoopCopyDataInit>

08002738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800273a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800273c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800273e:	3104      	adds	r1, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002740:	480a      	ldr	r0, [pc, #40]	; (800276c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002748:	d3f6      	bcc.n	8002738 <CopyDataInit>
	ldr	r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <LoopForever+0x12>)
	b	LoopFillZerobss
 800274c:	e002      	b.n	8002754 <LoopFillZerobss>

0800274e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800274e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002750:	f842 3b04 	str.w	r3, [r2], #4

08002754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <LoopForever+0x16>)
	cmp	r2, r3
 8002756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002758:	d3f9      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f006 fc05 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff f813 	bl	8001788 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002764:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002768:	0800cc08 	.word	0x0800cc08
	ldr	r0, =_sdata
 800276c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002770:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002774:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002778:	200004ec 	.word	0x200004ec

0800277c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_IRQHandler>

0800277e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 f961 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800278e:	2000      	movs	r0, #0
 8002790:	f000 f80e 	bl	80027b0 <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e001      	b.n	80027a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a0:	f7ff fd82 	bl	80022a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a4:	79fb      	ldrb	r3, [r7, #7]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_InitTick+0x70>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_InitTick+0x6c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f96d 	bl	8002aba <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d809      	bhi.n	8002800 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f000 f937 	bl	8002a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_InitTick+0x74>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e007      	b.n	8002810 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e004      	b.n	8002810 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e001      	b.n	8002810 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000000c 	.word	0x2000000c
 8002820:	20000004 	.word	0x20000004
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c
 800284c:	2000039c 	.word	0x2000039c

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	2000039c 	.word	0x2000039c

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000000c 	.word	0x2000000c

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2204      	movs	r2, #4
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e022      	b.n	8002b42 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020e 	bic.w	r2, r2, #14
 8002b0a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	f003 021c 	and.w	r2, r3, #28
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e029      	b.n	8002bc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 020e 	bic.w	r2, r2, #14
 8002b80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 021c 	and.w	r2, r3, #28
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	4798      	blx	r3
    }
  }
  return status;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e148      	b.n	8002e72 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 813a 	beq.w	8002e6c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d005      	beq.n	8002c10 <HAL_GPIO_Init+0x40>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d130      	bne.n	8002c72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c46:	2201      	movs	r2, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4013      	ands	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	f003 0201 	and.w	r2, r3, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d017      	beq.n	8002cae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2203      	movs	r2, #3
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4013      	ands	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d123      	bne.n	8002d02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	08da      	lsrs	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	220f      	movs	r2, #15
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	08da      	lsrs	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3208      	adds	r2, #8
 8002cfc:	6939      	ldr	r1, [r7, #16]
 8002cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8094 	beq.w	8002e6c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_GPIO_Init+0x2c0>)
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_GPIO_Init+0x2c0>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6613      	str	r3, [r2, #96]	; 0x60
 8002d50:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <HAL_GPIO_Init+0x2c0>)
 8002d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d5c:	4a4d      	ldr	r2, [pc, #308]	; (8002e94 <HAL_GPIO_Init+0x2c4>)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	220f      	movs	r2, #15
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d86:	d00d      	beq.n	8002da4 <HAL_GPIO_Init+0x1d4>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	; (8002e98 <HAL_GPIO_Init+0x2c8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d007      	beq.n	8002da0 <HAL_GPIO_Init+0x1d0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_GPIO_Init+0x2cc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <HAL_GPIO_Init+0x1cc>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e004      	b.n	8002da6 <HAL_GPIO_Init+0x1d6>
 8002d9c:	2307      	movs	r3, #7
 8002d9e:	e002      	b.n	8002da6 <HAL_GPIO_Init+0x1d6>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <HAL_GPIO_Init+0x1d6>
 8002da4:	2300      	movs	r3, #0
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	0092      	lsls	r2, r2, #2
 8002dae:	4093      	lsls	r3, r2
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002db6:	4937      	ldr	r1, [pc, #220]	; (8002e94 <HAL_GPIO_Init+0x2c4>)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	089b      	lsrs	r3, r3, #2
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002de8:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e12:	4a23      	ldr	r2, [pc, #140]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4013      	ands	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e3c:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_GPIO_Init+0x2d0>)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f47f aeaf 	bne.w	8002be0 <HAL_GPIO_Init+0x10>
  }
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	371c      	adds	r7, #28
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40010000 	.word	0x40010000
 8002e98:	48000400 	.word	0x48000400
 8002e9c:	48000800 	.word	0x48000800
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb4:	787b      	ldrb	r3, [r7, #1]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a04      	ldr	r2, [pc, #16]	; (8002ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40007000 	.word	0x40007000

08002ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40007000 	.word	0x40007000

08002f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1e:	d130      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f20:	4b23      	ldr	r3, [pc, #140]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d038      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f36:	4a1e      	ldr	r2, [pc, #120]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2232      	movs	r2, #50	; 0x32
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	3301      	adds	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f54:	e002      	b.n	8002f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f68:	d102      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f2      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7c:	d110      	bne.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d007      	beq.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f90:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f98:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	431bde83 	.word	0x431bde83

08002fbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f000 bc02 	b.w	80037d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd0:	4b96      	ldr	r3, [pc, #600]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fda:	4b94      	ldr	r3, [pc, #592]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80e4 	beq.w	80031ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_RCC_OscConfig+0x4c>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	f040 808b 	bne.w	8003116 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 8087 	bne.w	8003116 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003008:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x64>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e3d9      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_RCC_OscConfig+0x7e>
 8003030:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003038:	e005      	b.n	8003046 <HAL_RCC_OscConfig+0x8a>
 800303a:	4b7c      	ldr	r3, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800303c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003046:	4293      	cmp	r3, r2
 8003048:	d223      	bcs.n	8003092 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd8c 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e3ba      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305e:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a72      	ldr	r2, [pc, #456]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b70      	ldr	r3, [pc, #448]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	496d      	ldr	r1, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307c:	4b6b      	ldr	r3, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	4968      	ldr	r1, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e025      	b.n	80030de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003092:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4960      	ldr	r1, [pc, #384]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	495b      	ldr	r1, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd4c 	bl	8003b6c <RCC_SetFlashLatencyFromMSIRange>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e37a      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030de:	f000 fc81 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4950      	ldr	r1, [pc, #320]	; (8003230 <HAL_RCC_OscConfig+0x274>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <HAL_RCC_OscConfig+0x278>)
 80030fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030fe:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fb54 	bl	80027b0 <HAL_InitTick>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d052      	beq.n	80031b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	e35e      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d032      	beq.n	8003184 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800311e:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800312a:	f7ff fb91 	bl	8002850 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003132:	f7ff fb8d 	bl	8002850 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e347      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a35      	ldr	r2, [pc, #212]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4930      	ldr	r1, [pc, #192]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	492b      	ldr	r1, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e01a      	b.n	80031ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003190:	f7ff fb5e 	bl	8002850 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003198:	f7ff fb5a 	bl	8002850 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e314      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x1dc>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d073      	beq.n	80032ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x21c>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d10e      	bne.n	80031f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d063      	beq.n	80032ac <HAL_RCC_OscConfig+0x2f0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d15f      	bne.n	80032ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e2f1      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x24c>
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e025      	b.n	8003254 <HAL_RCC_OscConfig+0x298>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d114      	bne.n	800323c <HAL_RCC_OscConfig+0x280>
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a05      	ldr	r2, [pc, #20]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a02      	ldr	r2, [pc, #8]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e013      	b.n	8003254 <HAL_RCC_OscConfig+0x298>
 800322c:	40021000 	.word	0x40021000
 8003230:	0800c728 	.word	0x0800c728
 8003234:	20000004 	.word	0x20000004
 8003238:	20000008 	.word	0x20000008
 800323c:	4ba0      	ldr	r3, [pc, #640]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a9f      	ldr	r2, [pc, #636]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b9d      	ldr	r3, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a9c      	ldr	r2, [pc, #624]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7ff faf8 	bl	8002850 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7ff faf4 	bl	8002850 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e2ae      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003276:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x2a8>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff fae4 	bl	8002850 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7ff fae0 	bl	8002850 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e29a      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x2d0>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d005      	beq.n	80032cc <HAL_RCC_OscConfig+0x310>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d116      	bne.n	80032fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_OscConfig+0x328>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e277      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	4973      	ldr	r1, [pc, #460]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	e040      	b.n	800337c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d023      	beq.n	800334a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7ff fa9f 	bl	8002850 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7ff fa9b 	bl	8002850 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e255      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003328:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	495f      	ldr	r1, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e018      	b.n	800337c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7ff fa7b 	bl	8002850 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7ff fa77 	bl	8002850 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e231      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03c      	beq.n	8003402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7ff fa56 	bl	8002850 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7ff fa52 	bl	8002850 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e20c      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3ec>
 80033c8:	e01b      	b.n	8003402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d0:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7ff fa39 	bl	8002850 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7ff fa35 	bl	8002850 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1ef      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a6 	beq.w	800355c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10d      	bne.n	800343c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003454:	f7ff f9fc 	bl	8002850 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7ff f9f8 	bl	8002850 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1b2      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_RCC_OscConfig+0x4d8>
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003492:	e029      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_OscConfig+0x50c>
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	4b9a      	ldr	r3, [pc, #616]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a99      	ldr	r2, [pc, #612]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	4b96      	ldr	r3, [pc, #600]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a95      	ldr	r2, [pc, #596]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7ff f9ae 	bl	8002850 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7ff f9aa 	bl	8002850 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e162      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	4b89      	ldr	r3, [pc, #548]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ed      	beq.n	80034f8 <HAL_RCC_OscConfig+0x53c>
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7ff f997 	bl	8002850 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7ff f993 	bl	8002850 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e14b      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353c:	4b7d      	ldr	r3, [pc, #500]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ed      	bne.n	8003526 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b78      	ldr	r3, [pc, #480]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a77      	ldr	r2, [pc, #476]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003570:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7ff f966 	bl	8002850 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003588:	f7ff f962 	bl	8002850 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e11c      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 800359c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCC_OscConfig+0x5cc>
 80035a8:	e01b      	b.n	80035e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035aa:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80035ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b0:	4a60      	ldr	r2, [pc, #384]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7ff f949 	bl	8002850 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c2:	f7ff f945 	bl	8002850 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0ff      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d4:	4b57      	ldr	r3, [pc, #348]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80035d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ef      	bne.n	80035c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80f3 	beq.w	80037d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 80c9 	bne.w	8003788 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f6:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	429a      	cmp	r2, r3
 8003608:	d12c      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	3b01      	subs	r3, #1
 8003616:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d123      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d11b      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d113      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	3b01      	subs	r3, #1
 800364a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d109      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	3b01      	subs	r3, #1
 800365e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d06b      	beq.n	800373c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d062      	beq.n	8003730 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0ac      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003684:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003686:	f7ff f8e3 	bl	8002850 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7ff f8df 	bl	8002850 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e099      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x77c>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036bc:	3a01      	subs	r2, #1
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c6:	0212      	lsls	r2, r2, #8
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ce:	0852      	lsrs	r2, r2, #1
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0552      	lsls	r2, r2, #21
 80036d4:	4311      	orrs	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036da:	0852      	lsrs	r2, r2, #1
 80036dc:	3a01      	subs	r2, #1
 80036de:	0652      	lsls	r2, r2, #25
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e6:	06d2      	lsls	r2, r2, #27
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4912      	ldr	r1, [pc, #72]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003708:	f7ff f8a2 	bl	8002850 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7ff f89e 	bl	8002850 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e058      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_OscConfig+0x778>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372e:	e050      	b.n	80037d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e04f      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
 8003734:	40021000 	.word	0x40021000
 8003738:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d144      	bne.n	80037d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003760:	f7ff f876 	bl	8002850 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7ff f872 	bl	8002850 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e02c      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x7ac>
 8003786:	e024      	b.n	80037d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d01f      	beq.n	80037ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7ff f859 	bl	8002850 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7ff f855 	bl	8002850 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00f      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4905      	ldr	r1, [pc, #20]	; (80037dc <HAL_RCC_OscConfig+0x820>)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x824>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e001      	b.n	80037d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	feeefffc 	.word	0xfeeefffc

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0e7      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f8:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d910      	bls.n	8003828 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f023 0207 	bic.w	r2, r3, #7
 800380e:	4970      	ldr	r1, [pc, #448]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	4313      	orrs	r3, r2
 8003814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b6e      	ldr	r3, [pc, #440]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cf      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b66      	ldr	r3, [pc, #408]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003840:	429a      	cmp	r2, r3
 8003842:	d908      	bls.n	8003856 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4960      	ldr	r1, [pc, #384]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d04c      	beq.n	80038fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386a:	4b5a      	ldr	r3, [pc, #360]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0a6      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003882:	4b54      	ldr	r3, [pc, #336]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d115      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e09a      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e08e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e086      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	4b46      	ldr	r3, [pc, #280]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0203 	bic.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4943      	ldr	r1, [pc, #268]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038cc:	f7fe ffc0 	bl	8002850 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fe ffbc 	bl	8002850 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e06e      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	4b3a      	ldr	r3, [pc, #232]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 020c 	and.w	r2, r3, #12
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d1eb      	bne.n	80038d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b31      	ldr	r3, [pc, #196]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003914:	429a      	cmp	r2, r3
 8003916:	d208      	bcs.n	800392a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	492b      	ldr	r1, [pc, #172]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800392a:	4b29      	ldr	r3, [pc, #164]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d210      	bcs.n	800395a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003938:	4b25      	ldr	r3, [pc, #148]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4923      	ldr	r1, [pc, #140]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e036      	b.n	80039c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003966:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4918      	ldr	r1, [pc, #96]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4910      	ldr	r1, [pc, #64]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003998:	f000 f824 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	490b      	ldr	r1, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1f4>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1f8>)
 80039b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1fc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fef7 	bl	80027b0 <HAL_InitTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80039c6:	7afb      	ldrb	r3, [r7, #11]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	0800c728 	.word	0x0800c728
 80039dc:	20000004 	.word	0x20000004
 80039e0:	20000008 	.word	0x20000008

080039e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	; 0x24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	2300      	movs	r3, #0
 80039f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f2:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039fc:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0303 	and.w	r3, r3, #3
 8003a04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x34>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d121      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d11e      	bne.n	8003a56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a18:	4b34      	ldr	r3, [pc, #208]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a24:	4b31      	ldr	r3, [pc, #196]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a40:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a5c:	4b25      	ldr	r3, [pc, #148]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e004      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d134      	bne.n	8003adc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d003      	beq.n	8003a90 <HAL_RCC_GetSysClockFreq+0xac>
 8003a88:	e005      	b.n	8003a96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a8a:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a8c:	617b      	str	r3, [r7, #20]
      break;
 8003a8e:	e005      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a90:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a92:	617b      	str	r3, [r7, #20]
      break;
 8003a94:	e002      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	fb03 f202 	mul.w	r2, r3, r2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	0e5b      	lsrs	r3, r3, #25
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	3301      	adds	r3, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003adc:	69bb      	ldr	r3, [r7, #24]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	0800c740 	.word	0x0800c740
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	007a1200 	.word	0x007a1200

08003afc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b18:	f7ff fff0 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	0800c738 	.word	0x0800c738

08003b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b44:	f7ff ffda 	bl	8003afc <HAL_RCC_GetHCLKFreq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	0adb      	lsrs	r3, r3, #11
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	4904      	ldr	r1, [pc, #16]	; (8003b68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b56:	5ccb      	ldrb	r3, [r1, r3]
 8003b58:	f003 031f 	and.w	r3, r3, #31
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	0800c738 	.word	0x0800c738

08003b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b84:	f7ff f9b6 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003b88:	6178      	str	r0, [r7, #20]
 8003b8a:	e014      	b.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b8c:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b90:	4a24      	ldr	r2, [pc, #144]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
 8003b98:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ba4:	f7ff f9a6 	bl	8002ef4 <HAL_PWREx_GetVoltageRange>
 8003ba8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003baa:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bbc:	d10b      	bne.n	8003bd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b80      	cmp	r3, #128	; 0x80
 8003bc2:	d919      	bls.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc8:	d902      	bls.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bca:	2302      	movs	r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	e013      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	e010      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d902      	bls.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bdc:	2303      	movs	r3, #3
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e00a      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d102      	bne.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003be8:	2302      	movs	r3, #2
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e004      	b.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b70      	cmp	r3, #112	; 0x70
 8003bf2:	d101      	bne.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf8:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	4909      	ldr	r1, [pc, #36]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40022000 	.word	0x40022000

08003c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d031      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c50:	d01a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c56:	d814      	bhi.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c60:	d10f      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c62:	4b5d      	ldr	r3, [pc, #372]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a5c      	ldr	r2, [pc, #368]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c6e:	e00c      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f9de 	bl	8004038 <RCCEx_PLLSAI1_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	74fb      	strb	r3, [r7, #19]
      break;
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c90:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	494e      	ldr	r1, [pc, #312]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ca6:	e001      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 809e 	beq.w	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cbe:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd4:	4b40      	ldr	r3, [pc, #256]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	4a3f      	ldr	r2, [pc, #252]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6593      	str	r3, [r2, #88]	; 0x58
 8003ce0:	4b3d      	ldr	r3, [pc, #244]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cec:	2301      	movs	r3, #1
 8003cee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a39      	ldr	r2, [pc, #228]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe fda8 	bl	8002850 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fe fda4 	bl	8002850 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d902      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	74fb      	strb	r3, [r7, #19]
        break;
 8003d16:	e005      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d15a      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01e      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d019      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d68:	4a1b      	ldr	r2, [pc, #108]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d016      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fd64 	bl	8002850 <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fd60 	bl	8002850 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d902      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	74fb      	strb	r3, [r7, #19]
            break;
 8003da2:	e006      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0ec      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10b      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003dce:	e009      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	74bb      	strb	r3, [r7, #18]
 8003dd4:	e006      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003de4:	7c7b      	ldrb	r3, [r7, #17]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dea:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	4a89      	ldr	r2, [pc, #548]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e02:	4b84      	ldr	r3, [pc, #528]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f023 0203 	bic.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4980      	ldr	r1, [pc, #512]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e24:	4b7b      	ldr	r3, [pc, #492]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	f023 020c 	bic.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	4978      	ldr	r1, [pc, #480]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00a      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e46:	4b73      	ldr	r3, [pc, #460]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	496f      	ldr	r1, [pc, #444]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e68:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	4967      	ldr	r1, [pc, #412]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e8a:	4b62      	ldr	r3, [pc, #392]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	495e      	ldr	r1, [pc, #376]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4956      	ldr	r1, [pc, #344]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ece:	4b51      	ldr	r3, [pc, #324]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	494d      	ldr	r1, [pc, #308]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d028      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ef0:	4b48      	ldr	r3, [pc, #288]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4945      	ldr	r1, [pc, #276]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f0e:	d106      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f1a:	60d3      	str	r3, [r2, #12]
 8003f1c:	e011      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 f882 	bl	8004038 <RCCEx_PLLSAI1_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003f3e:	7cfb      	ldrb	r3, [r7, #19]
 8003f40:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5c:	492d      	ldr	r1, [pc, #180]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a28      	ldr	r2, [pc, #160]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f78:	60d3      	str	r3, [r2, #12]
 8003f7a:	e011      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f853 	bl	8004038 <RCCEx_PLLSAI1_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d01c      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fba:	4916      	ldr	r1, [pc, #88]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f830 	bl	8004038 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003fe2:	7cfb      	ldrb	r3, [r7, #19]
 8003fe4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004000:	4904      	ldr	r1, [pc, #16]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004008:	7cbb      	ldrb	r3, [r7, #18]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000

08004018 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a04      	ldr	r2, [pc, #16]	; (8004034 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004022:	f043 0304 	orr.w	r3, r3, #4
 8004026:	6013      	str	r3, [r2, #0]
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000

08004038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004046:	4b74      	ldr	r3, [pc, #464]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d018      	beq.n	8004084 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004052:	4b71      	ldr	r3, [pc, #452]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d10d      	bne.n	800407e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
       ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d009      	beq.n	800407e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800406a:	4b6b      	ldr	r3, [pc, #428]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
       ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d047      	beq.n	800410e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e044      	b.n	800410e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d018      	beq.n	80040be <RCCEx_PLLSAI1_Config+0x86>
 800408c:	2b03      	cmp	r3, #3
 800408e:	d825      	bhi.n	80040dc <RCCEx_PLLSAI1_Config+0xa4>
 8004090:	2b01      	cmp	r3, #1
 8004092:	d002      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x62>
 8004094:	2b02      	cmp	r3, #2
 8004096:	d009      	beq.n	80040ac <RCCEx_PLLSAI1_Config+0x74>
 8004098:	e020      	b.n	80040dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11d      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040aa:	e01a      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ac:	4b5a      	ldr	r3, [pc, #360]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d116      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040bc:	e013      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040da:	e006      	b.n	80040ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e004      	b.n	80040ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e2:	bf00      	nop
 80040e4:	e002      	b.n	80040ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10d      	bne.n	800410e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040f2:	4b49      	ldr	r3, [pc, #292]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6819      	ldr	r1, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	430b      	orrs	r3, r1
 8004108:	4943      	ldr	r1, [pc, #268]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d17c      	bne.n	800420e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3f      	ldr	r2, [pc, #252]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800411a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800411e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fe fb96 	bl	8002850 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004128:	f7fe fb92 	bl	8002850 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
        break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ef      	bne.n	8004128 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d15f      	bne.n	800420e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d110      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004154:	4b30      	ldr	r3, [pc, #192]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800415c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6892      	ldr	r2, [r2, #8]
 8004164:	0211      	lsls	r1, r2, #8
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	68d2      	ldr	r2, [r2, #12]
 800416a:	06d2      	lsls	r2, r2, #27
 800416c:	430a      	orrs	r2, r1
 800416e:	492a      	ldr	r1, [pc, #168]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004170:	4313      	orrs	r3, r2
 8004172:	610b      	str	r3, [r1, #16]
 8004174:	e027      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d112      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6892      	ldr	r2, [r2, #8]
 800418c:	0211      	lsls	r1, r2, #8
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6912      	ldr	r2, [r2, #16]
 8004192:	0852      	lsrs	r2, r2, #1
 8004194:	3a01      	subs	r2, #1
 8004196:	0552      	lsls	r2, r2, #21
 8004198:	430a      	orrs	r2, r1
 800419a:	491f      	ldr	r1, [pc, #124]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	610b      	str	r3, [r1, #16]
 80041a0:	e011      	b.n	80041c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041a2:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6892      	ldr	r2, [r2, #8]
 80041b2:	0211      	lsls	r1, r2, #8
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6952      	ldr	r2, [r2, #20]
 80041b8:	0852      	lsrs	r2, r2, #1
 80041ba:	3a01      	subs	r2, #1
 80041bc:	0652      	lsls	r2, r2, #25
 80041be:	430a      	orrs	r2, r1
 80041c0:	4915      	ldr	r1, [pc, #84]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a13      	ldr	r2, [pc, #76]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d2:	f7fe fb3d 	bl	8002850 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d8:	e009      	b.n	80041ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041da:	f7fe fb39 	bl	8002850 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d902      	bls.n	80041ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	73fb      	strb	r3, [r7, #15]
          break;
 80041ec:	e005      	b.n	80041fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ef      	beq.n	80041da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	4903      	ldr	r1, [pc, #12]	; (8004218 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	4313      	orrs	r3, r2
 800420c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e095      	b.n	800435a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800423e:	d009      	beq.n	8004254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
 8004246:	e005      	b.n	8004254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe f83e 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004294:	d902      	bls.n	800429c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e002      	b.n	80042a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800429c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042aa:	d007      	beq.n	80042bc <HAL_SPI_Init+0xa0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042b4:	d002      	beq.n	80042bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	ea42 0103 	orr.w	r1, r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f003 0204 	and.w	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004338:	ea42 0103 	orr.w	r1, r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b088      	sub	sp, #32
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_SPI_Transmit+0x22>
 8004380:	2302      	movs	r3, #2
 8004382:	e15f      	b.n	8004644 <HAL_SPI_Transmit+0x2e2>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800438c:	f7fe fa60 	bl	8002850 <HAL_GetTick>
 8004390:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d002      	beq.n	80043a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043a6:	e148      	b.n	800463a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_Transmit+0x52>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043b8:	e13f      	b.n	800463a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2203      	movs	r2, #3
 80043be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	88fa      	ldrh	r2, [r7, #6]
 80043d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	d10f      	bne.n	8004426 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004414:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004424:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d007      	beq.n	8004444 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800444c:	d94f      	bls.n	80044ee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_SPI_Transmit+0xfa>
 8004456:	8afb      	ldrh	r3, [r7, #22]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d142      	bne.n	80044e2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	1c9a      	adds	r2, r3, #2
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004480:	e02f      	b.n	80044e2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d112      	bne.n	80044b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	881a      	ldrh	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	1c9a      	adds	r2, r3, #2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b4:	e015      	b.n	80044e2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b6:	f7fe f9cb 	bl	8002850 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d803      	bhi.n	80044ce <HAL_SPI_Transmit+0x16c>
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044cc:	d102      	bne.n	80044d4 <HAL_SPI_Transmit+0x172>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d106      	bne.n	80044e2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80044e0:	e0ab      	b.n	800463a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ca      	bne.n	8004482 <HAL_SPI_Transmit+0x120>
 80044ec:	e080      	b.n	80045f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Transmit+0x19a>
 80044f6:	8afb      	ldrh	r3, [r7, #22]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d174      	bne.n	80045e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	d912      	bls.n	800452c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b02      	subs	r3, #2
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800452a:	e05c      	b.n	80045e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	7812      	ldrb	r2, [r2, #0]
 8004538:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004552:	e048      	b.n	80045e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b02      	cmp	r3, #2
 8004560:	d12b      	bne.n	80045ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d912      	bls.n	8004592 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b02      	subs	r3, #2
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004590:	e029      	b.n	80045e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045b8:	e015      	b.n	80045e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ba:	f7fe f949 	bl	8002850 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d803      	bhi.n	80045d2 <HAL_SPI_Transmit+0x270>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d102      	bne.n	80045d8 <HAL_SPI_Transmit+0x276>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045e4:	e029      	b.n	800463a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1b1      	bne.n	8004554 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	6839      	ldr	r1, [r7, #0]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f947 	bl	8004888 <SPI_EndRxTxTransaction>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	77fb      	strb	r3, [r7, #31]
 8004630:	e003      	b.n	800463a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004642:	7ffb      	ldrb	r3, [r7, #31]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800465c:	f7fe f8f8 	bl	8002850 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4413      	add	r3, r2
 800466a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800466c:	f7fe f8f0 	bl	8002850 <HAL_GetTick>
 8004670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	015b      	lsls	r3, r3, #5
 8004678:	0d1b      	lsrs	r3, r3, #20
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004682:	e054      	b.n	800472e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d050      	beq.n	800472e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800468c:	f7fe f8e0 	bl	8002850 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	d902      	bls.n	80046a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d13d      	bne.n	800471e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ba:	d111      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c4:	d004      	beq.n	80046d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ce:	d107      	bne.n	80046e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e8:	d10f      	bne.n	800470a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e017      	b.n	800474e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3b01      	subs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4013      	ands	r3, r2
 8004738:	68ba      	ldr	r2, [r7, #8]
 800473a:	429a      	cmp	r2, r3
 800473c:	bf0c      	ite	eq
 800473e:	2301      	moveq	r3, #1
 8004740:	2300      	movne	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	429a      	cmp	r2, r3
 800474a:	d19b      	bne.n	8004684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000004 	.word	0x20000004

0800475c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800476e:	f7fe f86f 	bl	8002850 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	1a9b      	subs	r3, r3, r2
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	4413      	add	r3, r2
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800477e:	f7fe f867 	bl	8002850 <HAL_GetTick>
 8004782:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800478c:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00da      	lsls	r2, r3, #3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	0d1b      	lsrs	r3, r3, #20
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047a4:	e060      	b.n	8004868 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047ac:	d107      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x62>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d050      	beq.n	8004868 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047c6:	f7fe f843 	bl	8002850 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d902      	bls.n	80047dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d13d      	bne.n	8004858 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f4:	d111      	bne.n	800481a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047fe:	d004      	beq.n	800480a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d107      	bne.n	800481a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004822:	d10f      	bne.n	8004844 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e010      	b.n	800487a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3b01      	subs	r3, #1
 8004866:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	429a      	cmp	r2, r3
 8004876:	d196      	bne.n	80047a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3728      	adds	r7, #40	; 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000004 	.word	0x20000004

08004888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ff5b 	bl	800475c <SPI_WaitFifoStateUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e027      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2180      	movs	r1, #128	; 0x80
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fec0 	bl	800464c <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e014      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff ff34 	bl	800475c <SPI_WaitFifoStateUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e000      	b.n	800490c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e049      	b.n	80049ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fd1c 	bl	8002378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f000 f94a 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049de:	2302      	movs	r3, #2
 80049e0:	e0ff      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b14      	cmp	r3, #20
 80049ee:	f200 80f0 	bhi.w	8004bd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049f2:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f8:	08004a4d 	.word	0x08004a4d
 80049fc:	08004bd3 	.word	0x08004bd3
 8004a00:	08004bd3 	.word	0x08004bd3
 8004a04:	08004bd3 	.word	0x08004bd3
 8004a08:	08004a8d 	.word	0x08004a8d
 8004a0c:	08004bd3 	.word	0x08004bd3
 8004a10:	08004bd3 	.word	0x08004bd3
 8004a14:	08004bd3 	.word	0x08004bd3
 8004a18:	08004acf 	.word	0x08004acf
 8004a1c:	08004bd3 	.word	0x08004bd3
 8004a20:	08004bd3 	.word	0x08004bd3
 8004a24:	08004bd3 	.word	0x08004bd3
 8004a28:	08004b0f 	.word	0x08004b0f
 8004a2c:	08004bd3 	.word	0x08004bd3
 8004a30:	08004bd3 	.word	0x08004bd3
 8004a34:	08004bd3 	.word	0x08004bd3
 8004a38:	08004b51 	.word	0x08004b51
 8004a3c:	08004bd3 	.word	0x08004bd3
 8004a40:	08004bd3 	.word	0x08004bd3
 8004a44:	08004bd3 	.word	0x08004bd3
 8004a48:	08004b91 	.word	0x08004b91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f92e 	bl	8004cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
      break;
 8004a8a:	e0a5      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f98a 	bl	8004dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	619a      	str	r2, [r3, #24]
      break;
 8004acc:	e084      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9e3 	bl	8004ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0204 	bic.w	r2, r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
      break;
 8004b0c:	e064      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa3b 	bl	8004f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	61da      	str	r2, [r3, #28]
      break;
 8004b4e:	e043      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa78 	bl	800504c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0204 	bic.w	r2, r2, #4
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b8e:	e023      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fab0 	bl	80050fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	021a      	lsls	r2, r3, #8
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bd0:	e002      	b.n	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	; (8004ca8 <TIM_Base_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x20>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d108      	bne.n	8004c1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a21      	ldr	r2, [pc, #132]	; (8004ca8 <TIM_Base_SetConfig+0xbc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <TIM_Base_SetConfig+0x52>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d007      	beq.n	8004c3e <TIM_Base_SetConfig+0x52>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <TIM_Base_SetConfig+0xc0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_Base_SetConfig+0x52>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	; (8004cb0 <TIM_Base_SetConfig+0xc4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d108      	bne.n	8004c50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0c      	ldr	r2, [pc, #48]	; (8004ca8 <TIM_Base_SetConfig+0xbc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_Base_SetConfig+0xa0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	; (8004cac <TIM_Base_SetConfig+0xc0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_Base_SetConfig+0xa0>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <TIM_Base_SetConfig+0xc4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	615a      	str	r2, [r3, #20]
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	40014000 	.word	0x40014000
 8004cb0:	40014400 	.word	0x40014400

08004cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 0201 	bic.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0302 	bic.w	r3, r3, #2
 8004d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <TIM_OC1_SetConfig+0xec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC1_SetConfig+0x70>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a23      	ldr	r2, [pc, #140]	; (8004da4 <TIM_OC1_SetConfig+0xf0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC1_SetConfig+0x70>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a22      	ldr	r2, [pc, #136]	; (8004da8 <TIM_OC1_SetConfig+0xf4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0308 	bic.w	r3, r3, #8
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f023 0304 	bic.w	r3, r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <TIM_OC1_SetConfig+0xec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d007      	beq.n	8004d56 <TIM_OC1_SetConfig+0xa2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <TIM_OC1_SetConfig+0xf0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d003      	beq.n	8004d56 <TIM_OC1_SetConfig+0xa2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC1_SetConfig+0xf4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40014000 	.word	0x40014000
 8004da8:	40014400 	.word	0x40014400

08004dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	f023 0210 	bic.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0320 	bic.w	r3, r3, #32
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <TIM_OC2_SetConfig+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10d      	bne.n	8004e2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <TIM_OC2_SetConfig+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d007      	beq.n	8004e44 <TIM_OC2_SetConfig+0x98>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <TIM_OC2_SetConfig+0xec>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC2_SetConfig+0x98>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <TIM_OC2_SetConfig+0xf0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d113      	bne.n	8004e6c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400

08004ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a21      	ldr	r2, [pc, #132]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <TIM_OC3_SetConfig+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <TIM_OC3_SetConfig+0x96>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <TIM_OC3_SetConfig+0xe8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_OC3_SetConfig+0x96>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <TIM_OC3_SetConfig+0xec>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d113      	bne.n	8004f5e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40014000 	.word	0x40014000
 8004f8c:	40014400 	.word	0x40014400

08004f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <TIM_OC4_SetConfig+0xb0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_OC4_SetConfig+0x74>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a13      	ldr	r2, [pc, #76]	; (8005044 <TIM_OC4_SetConfig+0xb4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC4_SetConfig+0x74>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	; (8005048 <TIM_OC4_SetConfig+0xb8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d109      	bne.n	8005018 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	019b      	lsls	r3, r3, #6
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	621a      	str	r2, [r3, #32]
}
 8005032:	bf00      	nop
 8005034:	371c      	adds	r7, #28
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	40012c00 	.word	0x40012c00
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400

0800504c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <TIM_OC5_SetConfig+0xa4>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_OC5_SetConfig+0x6a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <TIM_OC5_SetConfig+0xa8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_OC5_SetConfig+0x6a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <TIM_OC5_SetConfig+0xac>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d109      	bne.n	80050ca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	621a      	str	r2, [r3, #32]
}
 80050e4:	bf00      	nop
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40014400 	.word	0x40014400

080050fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	051b      	lsls	r3, r3, #20
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a14      	ldr	r2, [pc, #80]	; (80051a4 <TIM_OC6_SetConfig+0xa8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_OC6_SetConfig+0x6c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <TIM_OC6_SetConfig+0xac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC6_SetConfig+0x6c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <TIM_OC6_SetConfig+0xb0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d109      	bne.n	800517c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400

080051b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d101      	bne.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c4:	2302      	movs	r3, #2
 80051c6:	e04f      	b.n	8005268 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d009      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005230:	d004      	beq.n	800523c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	4313      	orrs	r3, r2
 800524c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40014000 	.word	0x40014000

0800527c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005294:	2302      	movs	r3, #2
 8005296:	e060      	b.n	800535a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a14      	ldr	r2, [pc, #80]	; (8005368 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d115      	bne.n	8005348 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	051b      	lsls	r3, r3, #20
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00

0800536c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e040      	b.n	8005400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fd f848 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	; 0x24
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 ff5c 	bl	8006270 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fd2d 	bl	8005e18 <UART_SetConfig>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e01b      	b.n	8005400 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 ffdb 	bl	80063b4 <UART_CheckIdleState>
 80053fe:	4603      	mov	r3, r0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541c:	2b20      	cmp	r3, #32
 800541e:	d178      	bne.n	8005512 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_UART_Transmit+0x24>
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e071      	b.n	8005514 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2221      	movs	r2, #33	; 0x21
 800543c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543e:	f7fd fa07 	bl	8002850 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d108      	bne.n	8005470 <HAL_UART_Transmit+0x68>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	61bb      	str	r3, [r7, #24]
 800546e:	e003      	b.n	8005478 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005478:	e030      	b.n	80054dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f001 f83d 	bl	8006504 <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e03c      	b.n	8005514 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ac:	b292      	uxth	r2, r2
 80054ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3302      	adds	r3, #2
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e008      	b.n	80054ca <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b292      	uxth	r2, r2
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1c8      	bne.n	800547a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2200      	movs	r2, #0
 80054f0:	2140      	movs	r1, #64	; 0x40
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f001 f806 	bl	8006504 <UART_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e005      	b.n	8005514 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	e000      	b.n	8005514 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005512:	2302      	movs	r3, #2
  }
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	; 0x28
 8005520:	af02      	add	r7, sp, #8
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005532:	2b20      	cmp	r3, #32
 8005534:	f040 80b6 	bne.w	80056a4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_UART_Receive+0x28>
 800553e:	88fb      	ldrh	r3, [r7, #6]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0ae      	b.n	80056a6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2222      	movs	r2, #34	; 0x22
 8005554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800555e:	f7fd f977 	bl	8002850 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	88fa      	ldrh	r2, [r7, #6]
 8005570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557c:	d10e      	bne.n	800559c <HAL_UART_Receive+0x80>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <HAL_UART_Receive+0x76>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f240 12ff 	movw	r2, #511	; 0x1ff
 800558c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005590:	e02d      	b.n	80055ee <HAL_UART_Receive+0xd2>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	22ff      	movs	r2, #255	; 0xff
 8005596:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800559a:	e028      	b.n	80055ee <HAL_UART_Receive+0xd2>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <HAL_UART_Receive+0xa4>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <HAL_UART_Receive+0x9a>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	22ff      	movs	r2, #255	; 0xff
 80055b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055b4:	e01b      	b.n	80055ee <HAL_UART_Receive+0xd2>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	227f      	movs	r2, #127	; 0x7f
 80055ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055be:	e016      	b.n	80055ee <HAL_UART_Receive+0xd2>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c8:	d10d      	bne.n	80055e6 <HAL_UART_Receive+0xca>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <HAL_UART_Receive+0xc0>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	227f      	movs	r2, #127	; 0x7f
 80055d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055da:	e008      	b.n	80055ee <HAL_UART_Receive+0xd2>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	223f      	movs	r2, #63	; 0x3f
 80055e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80055e4:	e003      	b.n	80055ee <HAL_UART_Receive+0xd2>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	d108      	bne.n	8005612 <HAL_UART_Receive+0xf6>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	e003      	b.n	800561a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800561a:	e037      	b.n	800568c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	2120      	movs	r1, #32
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 ff6c 	bl	8006504 <UART_WaitOnFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e033      	b.n	80056a6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10c      	bne.n	800565e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800564a:	b29a      	uxth	r2, r3
 800564c:	8a7b      	ldrh	r3, [r7, #18]
 800564e:	4013      	ands	r3, r2
 8005650:	b29a      	uxth	r2, r3
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	3302      	adds	r3, #2
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	e00d      	b.n	800567a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005664:	b29b      	uxth	r3, r3
 8005666:	b2da      	uxtb	r2, r3
 8005668:	8a7b      	ldrh	r3, [r7, #18]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	4013      	ands	r3, r2
 800566e:	b2da      	uxtb	r2, r3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	3301      	adds	r3, #1
 8005678:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1c1      	bne.n	800561c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b08b      	sub	sp, #44	; 0x2c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d147      	bne.n	8005756 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_UART_Transmit_IT+0x22>
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e040      	b.n	8005758 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	88fa      	ldrh	r2, [r7, #6]
 80056e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	88fa      	ldrh	r2, [r7, #6]
 80056e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2221      	movs	r2, #33	; 0x21
 80056fe:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	d107      	bne.n	800571a <HAL_UART_Transmit_IT+0x6a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <HAL_UART_Transmit_IT+0xb4>)
 8005716:	66da      	str	r2, [r3, #108]	; 0x6c
 8005718:	e002      	b.n	8005720 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a12      	ldr	r2, [pc, #72]	; (8005768 <HAL_UART_Transmit_IT+0xb8>)
 800571e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	613b      	str	r3, [r7, #16]
   return(result);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	69f9      	ldr	r1, [r7, #28]
 8005744:	6a3a      	ldr	r2, [r7, #32]
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	61bb      	str	r3, [r7, #24]
   return(result);
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e6      	bne.n	8005720 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	372c      	adds	r7, #44	; 0x2c
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	0800690d 	.word	0x0800690d
 8005768:	08006855 	.word	0x08006855

0800576c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005780:	2b20      	cmp	r3, #32
 8005782:	d137      	bne.n	80057f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_UART_Receive_IT+0x24>
 800578a:	88fb      	ldrh	r3, [r7, #6]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e030      	b.n	80057f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a18      	ldr	r2, [pc, #96]	; (8005800 <HAL_UART_Receive_IT+0x94>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d01f      	beq.n	80057e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d4:	69f9      	ldr	r1, [r7, #28]
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	e841 2300 	strex	r3, r2, [r1]
 80057dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1e6      	bne.n	80057b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	461a      	mov	r2, r3
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fef2 	bl	80065d4 <UART_Start_Receive_IT>
 80057f0:	4603      	mov	r3, r0
 80057f2:	e000      	b.n	80057f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3728      	adds	r7, #40	; 0x28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40008000 	.word	0x40008000

08005804 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b0ba      	sub	sp, #232	; 0xe8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800582a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800582e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005832:	4013      	ands	r3, r2
 8005834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d115      	bne.n	800586c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00f      	beq.n	800586c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 82ae 	beq.w	8005dbe <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
      }
      return;
 800586a:	e2a8      	b.n	8005dbe <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800586c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8117 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005886:	4b85      	ldr	r3, [pc, #532]	; (8005a9c <HAL_UART_IRQHandler+0x298>)
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 810a 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d011      	beq.n	80058c0 <HAL_UART_IRQHandler+0xbc>
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d011      	beq.n	80058f0 <HAL_UART_IRQHandler+0xec>
 80058cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	f043 0204 	orr.w	r2, r3, #4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d011      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
 80058fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2204      	movs	r2, #4
 800590e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005916:	f043 0202 	orr.w	r2, r3, #2
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2208      	movs	r2, #8
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005952:	f043 0208 	orr.w	r2, r3, #8
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005964:	2b00      	cmp	r3, #0
 8005966:	d012      	beq.n	800598e <HAL_UART_IRQHandler+0x18a>
 8005968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800597c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8214 	beq.w	8005dc2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04f      	beq.n	8005a86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 feba 	bl	8006760 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d141      	bne.n	8005a7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1d9      	bne.n	80059fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d013      	beq.n	8005a76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <HAL_UART_IRQHandler+0x29c>)
 8005a54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fd f877 	bl	8002b4e <HAL_DMA_Abort_IT>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d017      	beq.n	8005a96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	e00f      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9b8 	bl	8005dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	e00b      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9b4 	bl	8005dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e007      	b.n	8005a96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9b0 	bl	8005dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005a94:	e195      	b.n	8005dc2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a96:	bf00      	nop
    return;
 8005a98:	e193      	b.n	8005dc2 <HAL_UART_IRQHandler+0x5be>
 8005a9a:	bf00      	nop
 8005a9c:	04000120 	.word	0x04000120
 8005aa0:	08006829 	.word	0x08006829

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	f040 814e 	bne.w	8005d4a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8147 	beq.w	8005d4a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac0:	f003 0310 	and.w	r3, r3, #16
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8140 	beq.w	8005d4a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2210      	movs	r2, #16
 8005ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b40      	cmp	r3, #64	; 0x40
 8005ade:	f040 80b8 	bne.w	8005c52 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8167 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b02:	429a      	cmp	r2, r3
 8005b04:	f080 815f 	bcs.w	8005dc6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 8086 	bne.w	8005c30 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1da      	bne.n	8005b24 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3308      	adds	r3, #8
 8005b74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	3308      	adds	r3, #8
 8005b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e1      	bne.n	8005b6e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005bd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e4      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fc ff51 	bl	8002ad2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f8d8 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c50:	e0b9      	b.n	8005dc6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 80ab 	beq.w	8005dca <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80a6 	beq.w	8005dca <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e4      	bne.n	8005c7e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e3      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0310 	bic.w	r3, r3, #16
 8005d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	69b9      	ldr	r1, [r7, #24]
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e4      	bne.n	8005d00 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f85c 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d48:	e03f      	b.n	8005dca <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <HAL_UART_IRQHandler+0x570>
 8005d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f001 f813 	bl	8006d98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d72:	e02d      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00e      	beq.n	8005d9e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
    }
    return;
 8005d9c:	e017      	b.n	8005dce <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d012      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00c      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fe08 	bl	80069cc <UART_EndTransmit_IT>
    return;
 8005dbc:	e008      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005dbe:	bf00      	nop
 8005dc0:	e006      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005dc2:	bf00      	nop
 8005dc4:	e004      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005dce:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005dd0:	37e8      	adds	r7, #232	; 0xe8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop

08005dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b08a      	sub	sp, #40	; 0x28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4bb4      	ldr	r3, [pc, #720]	; (8006118 <UART_SetConfig+0x300>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa9      	ldr	r2, [pc, #676]	; (800611c <UART_SetConfig+0x304>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e80:	4313      	orrs	r3, r2
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e94:	430a      	orrs	r2, r1
 8005e96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4aa0      	ldr	r2, [pc, #640]	; (8006120 <UART_SetConfig+0x308>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d126      	bne.n	8005ef0 <UART_SetConfig+0xd8>
 8005ea2:	4ba0      	ldr	r3, [pc, #640]	; (8006124 <UART_SetConfig+0x30c>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d81b      	bhi.n	8005ee8 <UART_SetConfig+0xd0>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0xa0>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ed1 	.word	0x08005ed1
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e080      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e07c      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ede:	e078      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ee6:	e074      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eee:	e070      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a8c      	ldr	r2, [pc, #560]	; (8006128 <UART_SetConfig+0x310>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d138      	bne.n	8005f6c <UART_SetConfig+0x154>
 8005efa:	4b8a      	ldr	r3, [pc, #552]	; (8006124 <UART_SetConfig+0x30c>)
 8005efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f00:	f003 030c 	and.w	r3, r3, #12
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d82d      	bhi.n	8005f64 <UART_SetConfig+0x14c>
 8005f08:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <UART_SetConfig+0xf8>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08005f65 	.word	0x08005f65
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f65 	.word	0x08005f65
 8005f20:	08005f55 	.word	0x08005f55
 8005f24:	08005f65 	.word	0x08005f65
 8005f28:	08005f65 	.word	0x08005f65
 8005f2c:	08005f65 	.word	0x08005f65
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e042      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e03e      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005f54:	2304      	movs	r3, #4
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e03a      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e036      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005f64:	2310      	movs	r3, #16
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e032      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a6a      	ldr	r2, [pc, #424]	; (800611c <UART_SetConfig+0x304>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d12a      	bne.n	8005fcc <UART_SetConfig+0x1b4>
 8005f76:	4b6b      	ldr	r3, [pc, #428]	; (8006124 <UART_SetConfig+0x30c>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f84:	d01a      	beq.n	8005fbc <UART_SetConfig+0x1a4>
 8005f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f8a:	d81b      	bhi.n	8005fc4 <UART_SetConfig+0x1ac>
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f90:	d00c      	beq.n	8005fac <UART_SetConfig+0x194>
 8005f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f96:	d815      	bhi.n	8005fc4 <UART_SetConfig+0x1ac>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <UART_SetConfig+0x18c>
 8005f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa0:	d008      	beq.n	8005fb4 <UART_SetConfig+0x19c>
 8005fa2:	e00f      	b.n	8005fc4 <UART_SetConfig+0x1ac>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e012      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e00e      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e00a      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e006      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e002      	b.n	8005fd2 <UART_SetConfig+0x1ba>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a51      	ldr	r2, [pc, #324]	; (800611c <UART_SetConfig+0x304>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d17a      	bne.n	80060d2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d824      	bhi.n	800602e <UART_SetConfig+0x216>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x1d4>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006011 	.word	0x08006011
 8005ff0:	0800602f 	.word	0x0800602f
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	0800602f 	.word	0x0800602f
 8005ffc:	0800601f 	.word	0x0800601f
 8006000:	0800602f 	.word	0x0800602f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800602f 	.word	0x0800602f
 800600c:	08006027 	.word	0x08006027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006010:	f7fd fd80 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8006014:	61f8      	str	r0, [r7, #28]
        break;
 8006016:	e010      	b.n	800603a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006018:	4b44      	ldr	r3, [pc, #272]	; (800612c <UART_SetConfig+0x314>)
 800601a:	61fb      	str	r3, [r7, #28]
        break;
 800601c:	e00d      	b.n	800603a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601e:	f7fd fce1 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8006022:	61f8      	str	r0, [r7, #28]
        break;
 8006024:	e009      	b.n	800603a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602a:	61fb      	str	r3, [r7, #28]
        break;
 800602c:	e005      	b.n	800603a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006038:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8107 	beq.w	8006250 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	429a      	cmp	r2, r3
 8006050:	d305      	bcc.n	800605e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	429a      	cmp	r2, r3
 800605c:	d903      	bls.n	8006066 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006064:	e0f4      	b.n	8006250 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	2200      	movs	r2, #0
 800606a:	461c      	mov	r4, r3
 800606c:	4615      	mov	r5, r2
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	022b      	lsls	r3, r5, #8
 8006078:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800607c:	0222      	lsls	r2, r4, #8
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	6849      	ldr	r1, [r1, #4]
 8006082:	0849      	lsrs	r1, r1, #1
 8006084:	2000      	movs	r0, #0
 8006086:	4688      	mov	r8, r1
 8006088:	4681      	mov	r9, r0
 800608a:	eb12 0a08 	adds.w	sl, r2, r8
 800608e:	eb43 0b09 	adc.w	fp, r3, r9
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	4650      	mov	r0, sl
 80060a2:	4659      	mov	r1, fp
 80060a4:	f7fa fdf0 	bl	8000c88 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4613      	mov	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b6:	d308      	bcc.n	80060ca <UART_SetConfig+0x2b2>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060be:	d204      	bcs.n	80060ca <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	60da      	str	r2, [r3, #12]
 80060c8:	e0c2      	b.n	8006250 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060d0:	e0be      	b.n	8006250 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060da:	d16a      	bne.n	80061b2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80060dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d834      	bhi.n	800614e <UART_SetConfig+0x336>
 80060e4:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x2d4>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006111 	.word	0x08006111
 80060f0:	08006131 	.word	0x08006131
 80060f4:	08006139 	.word	0x08006139
 80060f8:	0800614f 	.word	0x0800614f
 80060fc:	0800613f 	.word	0x0800613f
 8006100:	0800614f 	.word	0x0800614f
 8006104:	0800614f 	.word	0x0800614f
 8006108:	0800614f 	.word	0x0800614f
 800610c:	08006147 	.word	0x08006147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd fd00 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 8006114:	61f8      	str	r0, [r7, #28]
        break;
 8006116:	e020      	b.n	800615a <UART_SetConfig+0x342>
 8006118:	efff69f3 	.word	0xefff69f3
 800611c:	40008000 	.word	0x40008000
 8006120:	40013800 	.word	0x40013800
 8006124:	40021000 	.word	0x40021000
 8006128:	40004400 	.word	0x40004400
 800612c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fd fd06 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 8006134:	61f8      	str	r0, [r7, #28]
        break;
 8006136:	e010      	b.n	800615a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006138:	4b4c      	ldr	r3, [pc, #304]	; (800626c <UART_SetConfig+0x454>)
 800613a:	61fb      	str	r3, [r7, #28]
        break;
 800613c:	e00d      	b.n	800615a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800613e:	f7fd fc51 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8006142:	61f8      	str	r0, [r7, #28]
        break;
 8006144:	e009      	b.n	800615a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e005      	b.n	800615a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d077      	beq.n	8006250 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005a      	lsls	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b0f      	cmp	r3, #15
 800617a:	d916      	bls.n	80061aa <UART_SetConfig+0x392>
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006182:	d212      	bcs.n	80061aa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f023 030f 	bic.w	r3, r3, #15
 800618c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	b29b      	uxth	r3, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	b29a      	uxth	r2, r3
 800619a:	8afb      	ldrh	r3, [r7, #22]
 800619c:	4313      	orrs	r3, r2
 800619e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	8afa      	ldrh	r2, [r7, #22]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e052      	b.n	8006250 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b0:	e04e      	b.n	8006250 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d827      	bhi.n	800620a <UART_SetConfig+0x3f2>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x3a8>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fd fc96 	bl	8003b14 <HAL_RCC_GetPCLK1Freq>
 80061e8:	61f8      	str	r0, [r7, #28]
        break;
 80061ea:	e014      	b.n	8006216 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fd fca8 	bl	8003b40 <HAL_RCC_GetPCLK2Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e010      	b.n	8006216 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <UART_SetConfig+0x454>)
 80061f6:	61fb      	str	r3, [r7, #28]
        break;
 80061f8:	e00d      	b.n	8006216 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fd fbf3 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 80061fe:	61f8      	str	r0, [r7, #28]
        break;
 8006200:	e009      	b.n	8006216 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006206:	61fb      	str	r3, [r7, #28]
        break;
 8006208:	e005      	b.n	8006216 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006214:	bf00      	nop
    }

    if (pclk != 0U)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d019      	beq.n	8006250 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	085a      	lsrs	r2, r3, #1
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	2b0f      	cmp	r3, #15
 8006234:	d909      	bls.n	800624a <UART_SetConfig+0x432>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d205      	bcs.n	800624a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e002      	b.n	8006250 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800625c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006260:	4618      	mov	r0, r3
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626a:	bf00      	nop
 800626c:	00f42400 	.word	0x00f42400

08006270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01a      	beq.n	8006386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800636e:	d10a      	bne.n	8006386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b098      	sub	sp, #96	; 0x60
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063c4:	f7fc fa44 	bl	8002850 <HAL_GetTick>
 80063c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d12e      	bne.n	8006436 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063e0:	2200      	movs	r2, #0
 80063e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f88c 	bl	8006504 <UART_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d021      	beq.n	8006436 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006406:	653b      	str	r3, [r7, #80]	; 0x50
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006410:	647b      	str	r3, [r7, #68]	; 0x44
 8006412:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800641e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e6      	bne.n	80063f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e062      	b.n	80064fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d149      	bne.n	80064d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800644c:	2200      	movs	r2, #0
 800644e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f856 	bl	8006504 <UART_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d03c      	beq.n	80064d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	623b      	str	r3, [r7, #32]
   return(result);
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800647c:	633b      	str	r3, [r7, #48]	; 0x30
 800647e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e6      	bne.n	800645e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3308      	adds	r3, #8
 8006496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	60fb      	str	r3, [r7, #12]
   return(result);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0301 	bic.w	r3, r3, #1
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3308      	adds	r3, #8
 80064ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064b0:	61fa      	str	r2, [r7, #28]
 80064b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	69b9      	ldr	r1, [r7, #24]
 80064b6:	69fa      	ldr	r2, [r7, #28]
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	617b      	str	r3, [r7, #20]
   return(result);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e011      	b.n	80064fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3758      	adds	r7, #88	; 0x58
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006514:	e049      	b.n	80065aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d045      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651e:	f7fc f997 	bl	8002850 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	429a      	cmp	r2, r3
 800652c:	d302      	bcc.n	8006534 <UART_WaitOnFlagUntilTimeout+0x30>
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e048      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d031      	beq.n	80065aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b08      	cmp	r3, #8
 8006552:	d110      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2208      	movs	r2, #8
 800655a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 f8ff 	bl	8006760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2208      	movs	r2, #8
 8006566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e029      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006584:	d111      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800658e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f8e5 	bl	8006760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e00f      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d0a6      	beq.n	8006516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b097      	sub	sp, #92	; 0x5c
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4613      	mov	r3, r2
 80065e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	88fa      	ldrh	r2, [r7, #6]
 80065ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	88fa      	ldrh	r2, [r7, #6]
 80065f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d10e      	bne.n	8006626 <UART_Start_Receive_IT+0x52>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d105      	bne.n	800661c <UART_Start_Receive_IT+0x48>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006616:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800661a:	e02d      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006624:	e028      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <UART_Start_Receive_IT+0x76>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <UART_Start_Receive_IT+0x6c>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800663e:	e01b      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	227f      	movs	r2, #127	; 0x7f
 8006644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006648:	e016      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006652:	d10d      	bne.n	8006670 <UART_Start_Receive_IT+0x9c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <UART_Start_Receive_IT+0x92>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	227f      	movs	r2, #127	; 0x7f
 8006660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006664:	e008      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	223f      	movs	r2, #63	; 0x3f
 800666a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800666e:	e003      	b.n	8006678 <UART_Start_Receive_IT+0xa4>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2222      	movs	r2, #34	; 0x22
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	657b      	str	r3, [r7, #84]	; 0x54
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80066aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e5      	bne.n	8006688 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c4:	d107      	bne.n	80066d6 <UART_Start_Receive_IT+0x102>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4a21      	ldr	r2, [pc, #132]	; (8006758 <UART_Start_Receive_IT+0x184>)
 80066d2:	669a      	str	r2, [r3, #104]	; 0x68
 80066d4:	e002      	b.n	80066dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a20      	ldr	r2, [pc, #128]	; (800675c <UART_Start_Receive_IT+0x188>)
 80066da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d019      	beq.n	8006718 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80066f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e6      	bne.n	80066e4 <UART_Start_Receive_IT+0x110>
 8006716:	e018      	b.n	800674a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	613b      	str	r3, [r7, #16]
   return(result);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f043 0320 	orr.w	r3, r3, #32
 800672c:	653b      	str	r3, [r7, #80]	; 0x50
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006736:	623b      	str	r3, [r7, #32]
 8006738:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	69f9      	ldr	r1, [r7, #28]
 800673c:	6a3a      	ldr	r2, [r7, #32]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	61bb      	str	r3, [r7, #24]
   return(result);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	375c      	adds	r7, #92	; 0x5c
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	08006bdd 	.word	0x08006bdd
 800675c:	08006a21 	.word	0x08006a21

08006760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b095      	sub	sp, #84	; 0x54
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
 8006788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e6      	bne.n	8006768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	e853 3f00 	ldrex	r3, [r3]
 80067a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e5      	bne.n	800679a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d118      	bne.n	8006808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0310 	bic.w	r3, r3, #16
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f4:	61bb      	str	r3, [r7, #24]
 80067f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6979      	ldr	r1, [r7, #20]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	613b      	str	r3, [r7, #16]
   return(result);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e6      	bne.n	80067d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2220      	movs	r2, #32
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800681c:	bf00      	nop
 800681e:	3754      	adds	r7, #84	; 0x54
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006834:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff fad0 	bl	8005dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b08f      	sub	sp, #60	; 0x3c
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006860:	2b21      	cmp	r3, #33	; 0x21
 8006862:	d14d      	bne.n	8006900 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d132      	bne.n	80068d6 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	61fb      	str	r3, [r7, #28]
   return(result);
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006890:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b6:	633b      	str	r3, [r7, #48]	; 0x30
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80068d4:	e014      	b.n	8006900 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	b292      	uxth	r2, r2
 80068e2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006900:	bf00      	nop
 8006902:	373c      	adds	r7, #60	; 0x3c
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b091      	sub	sp, #68	; 0x44
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006918:	2b21      	cmp	r3, #33	; 0x21
 800691a:	d151      	bne.n	80069c0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d132      	bne.n	800698e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	623b      	str	r3, [r7, #32]
   return(result);
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693c:	63bb      	str	r3, [r7, #56]	; 0x38
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
 8006948:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800694c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60fb      	str	r3, [r7, #12]
   return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	461a      	mov	r2, r3
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697c:	69b9      	ldr	r1, [r7, #24]
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	e841 2300 	strex	r3, r2, [r1]
 8006984:	617b      	str	r3, [r7, #20]
   return(result);
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e6      	bne.n	800695a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800698c:	e018      	b.n	80069c0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006992:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069a0:	b292      	uxth	r2, r2
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a8:	1c9a      	adds	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80069c0:	bf00      	nop
 80069c2:	3744      	adds	r7, #68	; 0x44
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e6      	bne.n	80069d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff f9e0 	bl	8005dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a18:	bf00      	nop
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b09c      	sub	sp, #112	; 0x70
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a2e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a38:	2b22      	cmp	r3, #34	; 0x22
 8006a3a:	f040 80be 	bne.w	8006bba <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006a44:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a4c:	b2d9      	uxtb	r1, r3
 8006a4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	400a      	ands	r2, r1
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 80a3 	bne.w	8006bce <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006aa6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aa8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e6      	bne.n	8006a88 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	f023 0301 	bic.w	r3, r3, #1
 8006ad0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ada:	647a      	str	r2, [r7, #68]	; 0x44
 8006adc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e5      	bne.n	8006aba <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <UART_RxISR_8BIT+0x1b8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d01f      	beq.n	8006b4c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	e853 3f00 	ldrex	r3, [r3]
 8006b26:	623b      	str	r3, [r7, #32]
   return(result);
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b38:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b40:	e841 2300 	strex	r3, r2, [r1]
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1e6      	bne.n	8006b1a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d12e      	bne.n	8006bb2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	69fa      	ldr	r2, [r7, #28]
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	617b      	str	r3, [r7, #20]
   return(result);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e6      	bne.n	8006b5a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b10      	cmp	r3, #16
 8006b98:	d103      	bne.n	8006ba2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2210      	movs	r2, #16
 8006ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff f928 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bb0:	e00d      	b.n	8006bce <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fa fa1c 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8006bb8:	e009      	b.n	8006bce <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	8b1b      	ldrh	r3, [r3, #24]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0208 	orr.w	r2, r2, #8
 8006bca:	b292      	uxth	r2, r2
 8006bcc:	831a      	strh	r2, [r3, #24]
}
 8006bce:	bf00      	nop
 8006bd0:	3770      	adds	r7, #112	; 0x70
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40008000 	.word	0x40008000

08006bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b09c      	sub	sp, #112	; 0x70
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf4:	2b22      	cmp	r3, #34	; 0x22
 8006bf6:	f040 80be 	bne.w	8006d76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 80a3 	bne.w	8006d8a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c58:	667b      	str	r3, [r7, #100]	; 0x64
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c62:	657b      	str	r3, [r7, #84]	; 0x54
 8006c64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c96:	643a      	str	r2, [r7, #64]	; 0x40
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <UART_RxISR_16BIT+0x1b8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01f      	beq.n	8006d08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d018      	beq.n	8006d08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d12e      	bne.n	8006d6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f023 0310 	bic.w	r3, r3, #16
 8006d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	613b      	str	r3, [r7, #16]
   return(result);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d103      	bne.n	8006d5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff f84a 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d6c:	e00d      	b.n	8006d8a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa f93e 	bl	8000ff0 <HAL_UART_RxCpltCallback>
}
 8006d74:	e009      	b.n	8006d8a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	8b1b      	ldrh	r3, [r3, #24]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0208 	orr.w	r2, r2, #8
 8006d86:	b292      	uxth	r2, r2
 8006d88:	831a      	strh	r2, [r3, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	3770      	adds	r7, #112	; 0x70
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40008000 	.word	0x40008000

08006d98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <atof>:
 8006dac:	2100      	movs	r1, #0
 8006dae:	f000 be19 	b.w	80079e4 <strtod>

08006db2 <atoi>:
 8006db2:	220a      	movs	r2, #10
 8006db4:	2100      	movs	r1, #0
 8006db6:	f000 bea5 	b.w	8007b04 <strtol>

08006dba <sulp>:
 8006dba:	b570      	push	{r4, r5, r6, lr}
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	460d      	mov	r5, r1
 8006dc0:	ec45 4b10 	vmov	d0, r4, r5
 8006dc4:	4616      	mov	r6, r2
 8006dc6:	f003 ff83 	bl	800acd0 <__ulp>
 8006dca:	ec51 0b10 	vmov	r0, r1, d0
 8006dce:	b17e      	cbz	r6, 8006df0 <sulp+0x36>
 8006dd0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006dd4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dd09      	ble.n	8006df0 <sulp+0x36>
 8006ddc:	051b      	lsls	r3, r3, #20
 8006dde:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006de2:	2400      	movs	r4, #0
 8006de4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	0000      	movs	r0, r0
 8006df4:	0000      	movs	r0, r0
	...

08006df8 <_strtod_l>:
 8006df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dfc:	ed2d 8b02 	vpush	{d8}
 8006e00:	b09b      	sub	sp, #108	; 0x6c
 8006e02:	4604      	mov	r4, r0
 8006e04:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e06:	2200      	movs	r2, #0
 8006e08:	9216      	str	r2, [sp, #88]	; 0x58
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	460a      	mov	r2, r1
 8006e16:	9215      	str	r2, [sp, #84]	; 0x54
 8006e18:	7811      	ldrb	r1, [r2, #0]
 8006e1a:	292b      	cmp	r1, #43	; 0x2b
 8006e1c:	d04c      	beq.n	8006eb8 <_strtod_l+0xc0>
 8006e1e:	d83a      	bhi.n	8006e96 <_strtod_l+0x9e>
 8006e20:	290d      	cmp	r1, #13
 8006e22:	d834      	bhi.n	8006e8e <_strtod_l+0x96>
 8006e24:	2908      	cmp	r1, #8
 8006e26:	d834      	bhi.n	8006e92 <_strtod_l+0x9a>
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d03d      	beq.n	8006ea8 <_strtod_l+0xb0>
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006e32:	7832      	ldrb	r2, [r6, #0]
 8006e34:	2a30      	cmp	r2, #48	; 0x30
 8006e36:	f040 80b4 	bne.w	8006fa2 <_strtod_l+0x1aa>
 8006e3a:	7872      	ldrb	r2, [r6, #1]
 8006e3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006e40:	2a58      	cmp	r2, #88	; 0x58
 8006e42:	d170      	bne.n	8006f26 <_strtod_l+0x12e>
 8006e44:	9302      	str	r3, [sp, #8]
 8006e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	ab16      	add	r3, sp, #88	; 0x58
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	4a8e      	ldr	r2, [pc, #568]	; (8007088 <_strtod_l+0x290>)
 8006e50:	ab17      	add	r3, sp, #92	; 0x5c
 8006e52:	a915      	add	r1, sp, #84	; 0x54
 8006e54:	4620      	mov	r0, r4
 8006e56:	f003 f819 	bl	8009e8c <__gethex>
 8006e5a:	f010 070f 	ands.w	r7, r0, #15
 8006e5e:	4605      	mov	r5, r0
 8006e60:	d005      	beq.n	8006e6e <_strtod_l+0x76>
 8006e62:	2f06      	cmp	r7, #6
 8006e64:	d12a      	bne.n	8006ebc <_strtod_l+0xc4>
 8006e66:	3601      	adds	r6, #1
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9615      	str	r6, [sp, #84]	; 0x54
 8006e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f040 857f 	bne.w	8007974 <_strtod_l+0xb7c>
 8006e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e78:	b1db      	cbz	r3, 8006eb2 <_strtod_l+0xba>
 8006e7a:	4642      	mov	r2, r8
 8006e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e80:	ec43 2b10 	vmov	d0, r2, r3
 8006e84:	b01b      	add	sp, #108	; 0x6c
 8006e86:	ecbd 8b02 	vpop	{d8}
 8006e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e8e:	2920      	cmp	r1, #32
 8006e90:	d1cc      	bne.n	8006e2c <_strtod_l+0x34>
 8006e92:	3201      	adds	r2, #1
 8006e94:	e7bf      	b.n	8006e16 <_strtod_l+0x1e>
 8006e96:	292d      	cmp	r1, #45	; 0x2d
 8006e98:	d1c8      	bne.n	8006e2c <_strtod_l+0x34>
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	910a      	str	r1, [sp, #40]	; 0x28
 8006e9e:	1c51      	adds	r1, r2, #1
 8006ea0:	9115      	str	r1, [sp, #84]	; 0x54
 8006ea2:	7852      	ldrb	r2, [r2, #1]
 8006ea4:	2a00      	cmp	r2, #0
 8006ea6:	d1c3      	bne.n	8006e30 <_strtod_l+0x38>
 8006ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006eaa:	9515      	str	r5, [sp, #84]	; 0x54
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f040 855f 	bne.w	8007970 <_strtod_l+0xb78>
 8006eb2:	4642      	mov	r2, r8
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	e7e3      	b.n	8006e80 <_strtod_l+0x88>
 8006eb8:	2100      	movs	r1, #0
 8006eba:	e7ef      	b.n	8006e9c <_strtod_l+0xa4>
 8006ebc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ebe:	b13a      	cbz	r2, 8006ed0 <_strtod_l+0xd8>
 8006ec0:	2135      	movs	r1, #53	; 0x35
 8006ec2:	a818      	add	r0, sp, #96	; 0x60
 8006ec4:	f004 f801 	bl	800aeca <__copybits>
 8006ec8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f003 fbd4 	bl	800a678 <_Bfree>
 8006ed0:	3f01      	subs	r7, #1
 8006ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ed4:	2f04      	cmp	r7, #4
 8006ed6:	d806      	bhi.n	8006ee6 <_strtod_l+0xee>
 8006ed8:	e8df f007 	tbb	[pc, r7]
 8006edc:	201d0314 	.word	0x201d0314
 8006ee0:	14          	.byte	0x14
 8006ee1:	00          	.byte	0x00
 8006ee2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006ee6:	05e9      	lsls	r1, r5, #23
 8006ee8:	bf48      	it	mi
 8006eea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006eee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ef2:	0d1b      	lsrs	r3, r3, #20
 8006ef4:	051b      	lsls	r3, r3, #20
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1b9      	bne.n	8006e6e <_strtod_l+0x76>
 8006efa:	f002 f82f 	bl	8008f5c <__errno>
 8006efe:	2322      	movs	r3, #34	; 0x22
 8006f00:	6003      	str	r3, [r0, #0]
 8006f02:	e7b4      	b.n	8006e6e <_strtod_l+0x76>
 8006f04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006f08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006f14:	e7e7      	b.n	8006ee6 <_strtod_l+0xee>
 8006f16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007090 <_strtod_l+0x298>
 8006f1a:	e7e4      	b.n	8006ee6 <_strtod_l+0xee>
 8006f1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006f20:	f04f 38ff 	mov.w	r8, #4294967295
 8006f24:	e7df      	b.n	8006ee6 <_strtod_l+0xee>
 8006f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	9215      	str	r2, [sp, #84]	; 0x54
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b30      	cmp	r3, #48	; 0x30
 8006f30:	d0f9      	beq.n	8006f26 <_strtod_l+0x12e>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d09b      	beq.n	8006e6e <_strtod_l+0x76>
 8006f36:	2301      	movs	r3, #1
 8006f38:	f04f 0a00 	mov.w	sl, #0
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006f46:	46d3      	mov	fp, sl
 8006f48:	220a      	movs	r2, #10
 8006f4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006f4c:	7806      	ldrb	r6, [r0, #0]
 8006f4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006f52:	b2d9      	uxtb	r1, r3
 8006f54:	2909      	cmp	r1, #9
 8006f56:	d926      	bls.n	8006fa6 <_strtod_l+0x1ae>
 8006f58:	494c      	ldr	r1, [pc, #304]	; (800708c <_strtod_l+0x294>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f001 ff32 	bl	8008dc4 <strncmp>
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d030      	beq.n	8006fc6 <_strtod_l+0x1ce>
 8006f64:	2000      	movs	r0, #0
 8006f66:	4632      	mov	r2, r6
 8006f68:	9005      	str	r0, [sp, #20]
 8006f6a:	465e      	mov	r6, fp
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2a65      	cmp	r2, #101	; 0x65
 8006f70:	d001      	beq.n	8006f76 <_strtod_l+0x17e>
 8006f72:	2a45      	cmp	r2, #69	; 0x45
 8006f74:	d113      	bne.n	8006f9e <_strtod_l+0x1a6>
 8006f76:	b91e      	cbnz	r6, 8006f80 <_strtod_l+0x188>
 8006f78:	9a04      	ldr	r2, [sp, #16]
 8006f7a:	4302      	orrs	r2, r0
 8006f7c:	d094      	beq.n	8006ea8 <_strtod_l+0xb0>
 8006f7e:	2600      	movs	r6, #0
 8006f80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006f82:	1c6a      	adds	r2, r5, #1
 8006f84:	9215      	str	r2, [sp, #84]	; 0x54
 8006f86:	786a      	ldrb	r2, [r5, #1]
 8006f88:	2a2b      	cmp	r2, #43	; 0x2b
 8006f8a:	d074      	beq.n	8007076 <_strtod_l+0x27e>
 8006f8c:	2a2d      	cmp	r2, #45	; 0x2d
 8006f8e:	d078      	beq.n	8007082 <_strtod_l+0x28a>
 8006f90:	f04f 0c00 	mov.w	ip, #0
 8006f94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f98:	2909      	cmp	r1, #9
 8006f9a:	d97f      	bls.n	800709c <_strtod_l+0x2a4>
 8006f9c:	9515      	str	r5, [sp, #84]	; 0x54
 8006f9e:	2700      	movs	r7, #0
 8006fa0:	e09e      	b.n	80070e0 <_strtod_l+0x2e8>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e7c8      	b.n	8006f38 <_strtod_l+0x140>
 8006fa6:	f1bb 0f08 	cmp.w	fp, #8
 8006faa:	bfd8      	it	le
 8006fac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006fae:	f100 0001 	add.w	r0, r0, #1
 8006fb2:	bfda      	itte	le
 8006fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8006fba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006fbe:	f10b 0b01 	add.w	fp, fp, #1
 8006fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8006fc4:	e7c1      	b.n	8006f4a <_strtod_l+0x152>
 8006fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	9215      	str	r2, [sp, #84]	; 0x54
 8006fcc:	785a      	ldrb	r2, [r3, #1]
 8006fce:	f1bb 0f00 	cmp.w	fp, #0
 8006fd2:	d037      	beq.n	8007044 <_strtod_l+0x24c>
 8006fd4:	9005      	str	r0, [sp, #20]
 8006fd6:	465e      	mov	r6, fp
 8006fd8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006fdc:	2b09      	cmp	r3, #9
 8006fde:	d912      	bls.n	8007006 <_strtod_l+0x20e>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e7c4      	b.n	8006f6e <_strtod_l+0x176>
 8006fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	9215      	str	r2, [sp, #84]	; 0x54
 8006fea:	785a      	ldrb	r2, [r3, #1]
 8006fec:	3001      	adds	r0, #1
 8006fee:	2a30      	cmp	r2, #48	; 0x30
 8006ff0:	d0f8      	beq.n	8006fe4 <_strtod_l+0x1ec>
 8006ff2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	f200 84c1 	bhi.w	800797e <_strtod_l+0xb86>
 8006ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ffe:	9005      	str	r0, [sp, #20]
 8007000:	2000      	movs	r0, #0
 8007002:	930b      	str	r3, [sp, #44]	; 0x2c
 8007004:	4606      	mov	r6, r0
 8007006:	3a30      	subs	r2, #48	; 0x30
 8007008:	f100 0301 	add.w	r3, r0, #1
 800700c:	d014      	beq.n	8007038 <_strtod_l+0x240>
 800700e:	9905      	ldr	r1, [sp, #20]
 8007010:	4419      	add	r1, r3
 8007012:	9105      	str	r1, [sp, #20]
 8007014:	4633      	mov	r3, r6
 8007016:	eb00 0c06 	add.w	ip, r0, r6
 800701a:	210a      	movs	r1, #10
 800701c:	4563      	cmp	r3, ip
 800701e:	d113      	bne.n	8007048 <_strtod_l+0x250>
 8007020:	1833      	adds	r3, r6, r0
 8007022:	2b08      	cmp	r3, #8
 8007024:	f106 0601 	add.w	r6, r6, #1
 8007028:	4406      	add	r6, r0
 800702a:	dc1a      	bgt.n	8007062 <_strtod_l+0x26a>
 800702c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800702e:	230a      	movs	r3, #10
 8007030:	fb03 2301 	mla	r3, r3, r1, r2
 8007034:	9309      	str	r3, [sp, #36]	; 0x24
 8007036:	2300      	movs	r3, #0
 8007038:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800703a:	1c51      	adds	r1, r2, #1
 800703c:	9115      	str	r1, [sp, #84]	; 0x54
 800703e:	7852      	ldrb	r2, [r2, #1]
 8007040:	4618      	mov	r0, r3
 8007042:	e7c9      	b.n	8006fd8 <_strtod_l+0x1e0>
 8007044:	4658      	mov	r0, fp
 8007046:	e7d2      	b.n	8006fee <_strtod_l+0x1f6>
 8007048:	2b08      	cmp	r3, #8
 800704a:	f103 0301 	add.w	r3, r3, #1
 800704e:	dc03      	bgt.n	8007058 <_strtod_l+0x260>
 8007050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007052:	434f      	muls	r7, r1
 8007054:	9709      	str	r7, [sp, #36]	; 0x24
 8007056:	e7e1      	b.n	800701c <_strtod_l+0x224>
 8007058:	2b10      	cmp	r3, #16
 800705a:	bfd8      	it	le
 800705c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007060:	e7dc      	b.n	800701c <_strtod_l+0x224>
 8007062:	2e10      	cmp	r6, #16
 8007064:	bfdc      	itt	le
 8007066:	230a      	movle	r3, #10
 8007068:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800706c:	e7e3      	b.n	8007036 <_strtod_l+0x23e>
 800706e:	2300      	movs	r3, #0
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	2301      	movs	r3, #1
 8007074:	e780      	b.n	8006f78 <_strtod_l+0x180>
 8007076:	f04f 0c00 	mov.w	ip, #0
 800707a:	1caa      	adds	r2, r5, #2
 800707c:	9215      	str	r2, [sp, #84]	; 0x54
 800707e:	78aa      	ldrb	r2, [r5, #2]
 8007080:	e788      	b.n	8006f94 <_strtod_l+0x19c>
 8007082:	f04f 0c01 	mov.w	ip, #1
 8007086:	e7f8      	b.n	800707a <_strtod_l+0x282>
 8007088:	0800c774 	.word	0x0800c774
 800708c:	0800c770 	.word	0x0800c770
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007096:	1c51      	adds	r1, r2, #1
 8007098:	9115      	str	r1, [sp, #84]	; 0x54
 800709a:	7852      	ldrb	r2, [r2, #1]
 800709c:	2a30      	cmp	r2, #48	; 0x30
 800709e:	d0f9      	beq.n	8007094 <_strtod_l+0x29c>
 80070a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80070a4:	2908      	cmp	r1, #8
 80070a6:	f63f af7a 	bhi.w	8006f9e <_strtod_l+0x1a6>
 80070aa:	3a30      	subs	r2, #48	; 0x30
 80070ac:	9208      	str	r2, [sp, #32]
 80070ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070b0:	920c      	str	r2, [sp, #48]	; 0x30
 80070b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80070b4:	1c57      	adds	r7, r2, #1
 80070b6:	9715      	str	r7, [sp, #84]	; 0x54
 80070b8:	7852      	ldrb	r2, [r2, #1]
 80070ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80070be:	f1be 0f09 	cmp.w	lr, #9
 80070c2:	d938      	bls.n	8007136 <_strtod_l+0x33e>
 80070c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070c6:	1a7f      	subs	r7, r7, r1
 80070c8:	2f08      	cmp	r7, #8
 80070ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80070ce:	dc03      	bgt.n	80070d8 <_strtod_l+0x2e0>
 80070d0:	9908      	ldr	r1, [sp, #32]
 80070d2:	428f      	cmp	r7, r1
 80070d4:	bfa8      	it	ge
 80070d6:	460f      	movge	r7, r1
 80070d8:	f1bc 0f00 	cmp.w	ip, #0
 80070dc:	d000      	beq.n	80070e0 <_strtod_l+0x2e8>
 80070de:	427f      	negs	r7, r7
 80070e0:	2e00      	cmp	r6, #0
 80070e2:	d14f      	bne.n	8007184 <_strtod_l+0x38c>
 80070e4:	9904      	ldr	r1, [sp, #16]
 80070e6:	4301      	orrs	r1, r0
 80070e8:	f47f aec1 	bne.w	8006e6e <_strtod_l+0x76>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f aedb 	bne.w	8006ea8 <_strtod_l+0xb0>
 80070f2:	2a69      	cmp	r2, #105	; 0x69
 80070f4:	d029      	beq.n	800714a <_strtod_l+0x352>
 80070f6:	dc26      	bgt.n	8007146 <_strtod_l+0x34e>
 80070f8:	2a49      	cmp	r2, #73	; 0x49
 80070fa:	d026      	beq.n	800714a <_strtod_l+0x352>
 80070fc:	2a4e      	cmp	r2, #78	; 0x4e
 80070fe:	f47f aed3 	bne.w	8006ea8 <_strtod_l+0xb0>
 8007102:	499b      	ldr	r1, [pc, #620]	; (8007370 <_strtod_l+0x578>)
 8007104:	a815      	add	r0, sp, #84	; 0x54
 8007106:	f003 f901 	bl	800a30c <__match>
 800710a:	2800      	cmp	r0, #0
 800710c:	f43f aecc 	beq.w	8006ea8 <_strtod_l+0xb0>
 8007110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b28      	cmp	r3, #40	; 0x28
 8007116:	d12f      	bne.n	8007178 <_strtod_l+0x380>
 8007118:	4996      	ldr	r1, [pc, #600]	; (8007374 <_strtod_l+0x57c>)
 800711a:	aa18      	add	r2, sp, #96	; 0x60
 800711c:	a815      	add	r0, sp, #84	; 0x54
 800711e:	f003 f909 	bl	800a334 <__hexnan>
 8007122:	2805      	cmp	r0, #5
 8007124:	d128      	bne.n	8007178 <_strtod_l+0x380>
 8007126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800712c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007130:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007134:	e69b      	b.n	8006e6e <_strtod_l+0x76>
 8007136:	9f08      	ldr	r7, [sp, #32]
 8007138:	210a      	movs	r1, #10
 800713a:	fb01 2107 	mla	r1, r1, r7, r2
 800713e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007142:	9208      	str	r2, [sp, #32]
 8007144:	e7b5      	b.n	80070b2 <_strtod_l+0x2ba>
 8007146:	2a6e      	cmp	r2, #110	; 0x6e
 8007148:	e7d9      	b.n	80070fe <_strtod_l+0x306>
 800714a:	498b      	ldr	r1, [pc, #556]	; (8007378 <_strtod_l+0x580>)
 800714c:	a815      	add	r0, sp, #84	; 0x54
 800714e:	f003 f8dd 	bl	800a30c <__match>
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f aea8 	beq.w	8006ea8 <_strtod_l+0xb0>
 8007158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715a:	4988      	ldr	r1, [pc, #544]	; (800737c <_strtod_l+0x584>)
 800715c:	3b01      	subs	r3, #1
 800715e:	a815      	add	r0, sp, #84	; 0x54
 8007160:	9315      	str	r3, [sp, #84]	; 0x54
 8007162:	f003 f8d3 	bl	800a30c <__match>
 8007166:	b910      	cbnz	r0, 800716e <_strtod_l+0x376>
 8007168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800716a:	3301      	adds	r3, #1
 800716c:	9315      	str	r3, [sp, #84]	; 0x54
 800716e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800738c <_strtod_l+0x594>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	e67a      	b.n	8006e6e <_strtod_l+0x76>
 8007178:	4881      	ldr	r0, [pc, #516]	; (8007380 <_strtod_l+0x588>)
 800717a:	f001 ff2d 	bl	8008fd8 <nan>
 800717e:	ec59 8b10 	vmov	r8, r9, d0
 8007182:	e674      	b.n	8006e6e <_strtod_l+0x76>
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007188:	1afb      	subs	r3, r7, r3
 800718a:	f1bb 0f00 	cmp.w	fp, #0
 800718e:	bf08      	it	eq
 8007190:	46b3      	moveq	fp, r6
 8007192:	2e10      	cmp	r6, #16
 8007194:	9308      	str	r3, [sp, #32]
 8007196:	4635      	mov	r5, r6
 8007198:	bfa8      	it	ge
 800719a:	2510      	movge	r5, #16
 800719c:	f7f9 f9b2 	bl	8000504 <__aeabi_ui2d>
 80071a0:	2e09      	cmp	r6, #9
 80071a2:	4680      	mov	r8, r0
 80071a4:	4689      	mov	r9, r1
 80071a6:	dd13      	ble.n	80071d0 <_strtod_l+0x3d8>
 80071a8:	4b76      	ldr	r3, [pc, #472]	; (8007384 <_strtod_l+0x58c>)
 80071aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80071ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80071b2:	f7f9 fa21 	bl	80005f8 <__aeabi_dmul>
 80071b6:	4680      	mov	r8, r0
 80071b8:	4650      	mov	r0, sl
 80071ba:	4689      	mov	r9, r1
 80071bc:	f7f9 f9a2 	bl	8000504 <__aeabi_ui2d>
 80071c0:	4602      	mov	r2, r0
 80071c2:	460b      	mov	r3, r1
 80071c4:	4640      	mov	r0, r8
 80071c6:	4649      	mov	r1, r9
 80071c8:	f7f9 f860 	bl	800028c <__adddf3>
 80071cc:	4680      	mov	r8, r0
 80071ce:	4689      	mov	r9, r1
 80071d0:	2e0f      	cmp	r6, #15
 80071d2:	dc38      	bgt.n	8007246 <_strtod_l+0x44e>
 80071d4:	9b08      	ldr	r3, [sp, #32]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f43f ae49 	beq.w	8006e6e <_strtod_l+0x76>
 80071dc:	dd24      	ble.n	8007228 <_strtod_l+0x430>
 80071de:	2b16      	cmp	r3, #22
 80071e0:	dc0b      	bgt.n	80071fa <_strtod_l+0x402>
 80071e2:	4968      	ldr	r1, [pc, #416]	; (8007384 <_strtod_l+0x58c>)
 80071e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ec:	4642      	mov	r2, r8
 80071ee:	464b      	mov	r3, r9
 80071f0:	f7f9 fa02 	bl	80005f8 <__aeabi_dmul>
 80071f4:	4680      	mov	r8, r0
 80071f6:	4689      	mov	r9, r1
 80071f8:	e639      	b.n	8006e6e <_strtod_l+0x76>
 80071fa:	9a08      	ldr	r2, [sp, #32]
 80071fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007200:	4293      	cmp	r3, r2
 8007202:	db20      	blt.n	8007246 <_strtod_l+0x44e>
 8007204:	4c5f      	ldr	r4, [pc, #380]	; (8007384 <_strtod_l+0x58c>)
 8007206:	f1c6 060f 	rsb	r6, r6, #15
 800720a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800720e:	4642      	mov	r2, r8
 8007210:	464b      	mov	r3, r9
 8007212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007216:	f7f9 f9ef 	bl	80005f8 <__aeabi_dmul>
 800721a:	9b08      	ldr	r3, [sp, #32]
 800721c:	1b9e      	subs	r6, r3, r6
 800721e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007222:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007226:	e7e3      	b.n	80071f0 <_strtod_l+0x3f8>
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	3316      	adds	r3, #22
 800722c:	db0b      	blt.n	8007246 <_strtod_l+0x44e>
 800722e:	9b05      	ldr	r3, [sp, #20]
 8007230:	1bdf      	subs	r7, r3, r7
 8007232:	4b54      	ldr	r3, [pc, #336]	; (8007384 <_strtod_l+0x58c>)
 8007234:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723c:	4640      	mov	r0, r8
 800723e:	4649      	mov	r1, r9
 8007240:	f7f9 fb04 	bl	800084c <__aeabi_ddiv>
 8007244:	e7d6      	b.n	80071f4 <_strtod_l+0x3fc>
 8007246:	9b08      	ldr	r3, [sp, #32]
 8007248:	1b75      	subs	r5, r6, r5
 800724a:	441d      	add	r5, r3
 800724c:	2d00      	cmp	r5, #0
 800724e:	dd70      	ble.n	8007332 <_strtod_l+0x53a>
 8007250:	f015 030f 	ands.w	r3, r5, #15
 8007254:	d00a      	beq.n	800726c <_strtod_l+0x474>
 8007256:	494b      	ldr	r1, [pc, #300]	; (8007384 <_strtod_l+0x58c>)
 8007258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007264:	f7f9 f9c8 	bl	80005f8 <__aeabi_dmul>
 8007268:	4680      	mov	r8, r0
 800726a:	4689      	mov	r9, r1
 800726c:	f035 050f 	bics.w	r5, r5, #15
 8007270:	d04d      	beq.n	800730e <_strtod_l+0x516>
 8007272:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007276:	dd22      	ble.n	80072be <_strtod_l+0x4c6>
 8007278:	2500      	movs	r5, #0
 800727a:	46ab      	mov	fp, r5
 800727c:	9509      	str	r5, [sp, #36]	; 0x24
 800727e:	9505      	str	r5, [sp, #20]
 8007280:	2322      	movs	r3, #34	; 0x22
 8007282:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800738c <_strtod_l+0x594>
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	f04f 0800 	mov.w	r8, #0
 800728c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	f43f aded 	beq.w	8006e6e <_strtod_l+0x76>
 8007294:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007296:	4620      	mov	r0, r4
 8007298:	f003 f9ee 	bl	800a678 <_Bfree>
 800729c:	9905      	ldr	r1, [sp, #20]
 800729e:	4620      	mov	r0, r4
 80072a0:	f003 f9ea 	bl	800a678 <_Bfree>
 80072a4:	4659      	mov	r1, fp
 80072a6:	4620      	mov	r0, r4
 80072a8:	f003 f9e6 	bl	800a678 <_Bfree>
 80072ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ae:	4620      	mov	r0, r4
 80072b0:	f003 f9e2 	bl	800a678 <_Bfree>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4620      	mov	r0, r4
 80072b8:	f003 f9de 	bl	800a678 <_Bfree>
 80072bc:	e5d7      	b.n	8006e6e <_strtod_l+0x76>
 80072be:	4b32      	ldr	r3, [pc, #200]	; (8007388 <_strtod_l+0x590>)
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	2300      	movs	r3, #0
 80072c4:	112d      	asrs	r5, r5, #4
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	469a      	mov	sl, r3
 80072cc:	2d01      	cmp	r5, #1
 80072ce:	dc21      	bgt.n	8007314 <_strtod_l+0x51c>
 80072d0:	b10b      	cbz	r3, 80072d6 <_strtod_l+0x4de>
 80072d2:	4680      	mov	r8, r0
 80072d4:	4689      	mov	r9, r1
 80072d6:	492c      	ldr	r1, [pc, #176]	; (8007388 <_strtod_l+0x590>)
 80072d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80072dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072e8:	f7f9 f986 	bl	80005f8 <__aeabi_dmul>
 80072ec:	4b27      	ldr	r3, [pc, #156]	; (800738c <_strtod_l+0x594>)
 80072ee:	460a      	mov	r2, r1
 80072f0:	400b      	ands	r3, r1
 80072f2:	4927      	ldr	r1, [pc, #156]	; (8007390 <_strtod_l+0x598>)
 80072f4:	428b      	cmp	r3, r1
 80072f6:	4680      	mov	r8, r0
 80072f8:	d8be      	bhi.n	8007278 <_strtod_l+0x480>
 80072fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072fe:	428b      	cmp	r3, r1
 8007300:	bf86      	itte	hi
 8007302:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007394 <_strtod_l+0x59c>
 8007306:	f04f 38ff 	movhi.w	r8, #4294967295
 800730a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800730e:	2300      	movs	r3, #0
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	e07b      	b.n	800740c <_strtod_l+0x614>
 8007314:	07ea      	lsls	r2, r5, #31
 8007316:	d505      	bpl.n	8007324 <_strtod_l+0x52c>
 8007318:	9b04      	ldr	r3, [sp, #16]
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f7f9 f96b 	bl	80005f8 <__aeabi_dmul>
 8007322:	2301      	movs	r3, #1
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	3208      	adds	r2, #8
 8007328:	f10a 0a01 	add.w	sl, sl, #1
 800732c:	106d      	asrs	r5, r5, #1
 800732e:	9204      	str	r2, [sp, #16]
 8007330:	e7cc      	b.n	80072cc <_strtod_l+0x4d4>
 8007332:	d0ec      	beq.n	800730e <_strtod_l+0x516>
 8007334:	426d      	negs	r5, r5
 8007336:	f015 020f 	ands.w	r2, r5, #15
 800733a:	d00a      	beq.n	8007352 <_strtod_l+0x55a>
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <_strtod_l+0x58c>)
 800733e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007342:	4640      	mov	r0, r8
 8007344:	4649      	mov	r1, r9
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f7f9 fa7f 	bl	800084c <__aeabi_ddiv>
 800734e:	4680      	mov	r8, r0
 8007350:	4689      	mov	r9, r1
 8007352:	112d      	asrs	r5, r5, #4
 8007354:	d0db      	beq.n	800730e <_strtod_l+0x516>
 8007356:	2d1f      	cmp	r5, #31
 8007358:	dd1e      	ble.n	8007398 <_strtod_l+0x5a0>
 800735a:	2500      	movs	r5, #0
 800735c:	46ab      	mov	fp, r5
 800735e:	9509      	str	r5, [sp, #36]	; 0x24
 8007360:	9505      	str	r5, [sp, #20]
 8007362:	2322      	movs	r3, #34	; 0x22
 8007364:	f04f 0800 	mov.w	r8, #0
 8007368:	f04f 0900 	mov.w	r9, #0
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	e78d      	b.n	800728c <_strtod_l+0x494>
 8007370:	0800c8d6 	.word	0x0800c8d6
 8007374:	0800c788 	.word	0x0800c788
 8007378:	0800c8ce 	.word	0x0800c8ce
 800737c:	0800c9ba 	.word	0x0800c9ba
 8007380:	0800c9b6 	.word	0x0800c9b6
 8007384:	0800cb10 	.word	0x0800cb10
 8007388:	0800cae8 	.word	0x0800cae8
 800738c:	7ff00000 	.word	0x7ff00000
 8007390:	7ca00000 	.word	0x7ca00000
 8007394:	7fefffff 	.word	0x7fefffff
 8007398:	f015 0310 	ands.w	r3, r5, #16
 800739c:	bf18      	it	ne
 800739e:	236a      	movne	r3, #106	; 0x6a
 80073a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007744 <_strtod_l+0x94c>
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	4640      	mov	r0, r8
 80073a8:	4649      	mov	r1, r9
 80073aa:	2300      	movs	r3, #0
 80073ac:	07ea      	lsls	r2, r5, #31
 80073ae:	d504      	bpl.n	80073ba <_strtod_l+0x5c2>
 80073b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	2301      	movs	r3, #1
 80073ba:	106d      	asrs	r5, r5, #1
 80073bc:	f10a 0a08 	add.w	sl, sl, #8
 80073c0:	d1f4      	bne.n	80073ac <_strtod_l+0x5b4>
 80073c2:	b10b      	cbz	r3, 80073c8 <_strtod_l+0x5d0>
 80073c4:	4680      	mov	r8, r0
 80073c6:	4689      	mov	r9, r1
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	b1bb      	cbz	r3, 80073fc <_strtod_l+0x604>
 80073cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80073d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	4649      	mov	r1, r9
 80073d8:	dd10      	ble.n	80073fc <_strtod_l+0x604>
 80073da:	2b1f      	cmp	r3, #31
 80073dc:	f340 811e 	ble.w	800761c <_strtod_l+0x824>
 80073e0:	2b34      	cmp	r3, #52	; 0x34
 80073e2:	bfde      	ittt	le
 80073e4:	f04f 33ff 	movle.w	r3, #4294967295
 80073e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80073ec:	4093      	lslle	r3, r2
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	bfcc      	ite	gt
 80073f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80073f8:	ea03 0901 	andle.w	r9, r3, r1
 80073fc:	2200      	movs	r2, #0
 80073fe:	2300      	movs	r3, #0
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d1a6      	bne.n	800735a <_strtod_l+0x562>
 800740c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007412:	4633      	mov	r3, r6
 8007414:	465a      	mov	r2, fp
 8007416:	4620      	mov	r0, r4
 8007418:	f003 f996 	bl	800a748 <__s2b>
 800741c:	9009      	str	r0, [sp, #36]	; 0x24
 800741e:	2800      	cmp	r0, #0
 8007420:	f43f af2a 	beq.w	8007278 <_strtod_l+0x480>
 8007424:	9a08      	ldr	r2, [sp, #32]
 8007426:	9b05      	ldr	r3, [sp, #20]
 8007428:	2a00      	cmp	r2, #0
 800742a:	eba3 0307 	sub.w	r3, r3, r7
 800742e:	bfa8      	it	ge
 8007430:	2300      	movge	r3, #0
 8007432:	930c      	str	r3, [sp, #48]	; 0x30
 8007434:	2500      	movs	r5, #0
 8007436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800743a:	9312      	str	r3, [sp, #72]	; 0x48
 800743c:	46ab      	mov	fp, r5
 800743e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007440:	4620      	mov	r0, r4
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	f003 f8d8 	bl	800a5f8 <_Balloc>
 8007448:	9005      	str	r0, [sp, #20]
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f af18 	beq.w	8007280 <_strtod_l+0x488>
 8007450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	3202      	adds	r2, #2
 8007456:	f103 010c 	add.w	r1, r3, #12
 800745a:	0092      	lsls	r2, r2, #2
 800745c:	300c      	adds	r0, #12
 800745e:	f001 fdaa 	bl	8008fb6 <memcpy>
 8007462:	ec49 8b10 	vmov	d0, r8, r9
 8007466:	aa18      	add	r2, sp, #96	; 0x60
 8007468:	a917      	add	r1, sp, #92	; 0x5c
 800746a:	4620      	mov	r0, r4
 800746c:	f003 fca0 	bl	800adb0 <__d2b>
 8007470:	ec49 8b18 	vmov	d8, r8, r9
 8007474:	9016      	str	r0, [sp, #88]	; 0x58
 8007476:	2800      	cmp	r0, #0
 8007478:	f43f af02 	beq.w	8007280 <_strtod_l+0x488>
 800747c:	2101      	movs	r1, #1
 800747e:	4620      	mov	r0, r4
 8007480:	f003 f9fa 	bl	800a878 <__i2b>
 8007484:	4683      	mov	fp, r0
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f aefa 	beq.w	8007280 <_strtod_l+0x488>
 800748c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800748e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007490:	2e00      	cmp	r6, #0
 8007492:	bfab      	itete	ge
 8007494:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007496:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800749a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800749e:	bfac      	ite	ge
 80074a0:	eb06 0a03 	addge.w	sl, r6, r3
 80074a4:	1b9f      	sublt	r7, r3, r6
 80074a6:	9b04      	ldr	r3, [sp, #16]
 80074a8:	1af6      	subs	r6, r6, r3
 80074aa:	4416      	add	r6, r2
 80074ac:	4ba0      	ldr	r3, [pc, #640]	; (8007730 <_strtod_l+0x938>)
 80074ae:	3e01      	subs	r6, #1
 80074b0:	429e      	cmp	r6, r3
 80074b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80074b6:	f280 80c4 	bge.w	8007642 <_strtod_l+0x84a>
 80074ba:	1b9b      	subs	r3, r3, r6
 80074bc:	2b1f      	cmp	r3, #31
 80074be:	eba2 0203 	sub.w	r2, r2, r3
 80074c2:	f04f 0101 	mov.w	r1, #1
 80074c6:	f300 80b0 	bgt.w	800762a <_strtod_l+0x832>
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	930e      	str	r3, [sp, #56]	; 0x38
 80074d0:	2300      	movs	r3, #0
 80074d2:	930d      	str	r3, [sp, #52]	; 0x34
 80074d4:	eb0a 0602 	add.w	r6, sl, r2
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	45b2      	cmp	sl, r6
 80074dc:	4417      	add	r7, r2
 80074de:	441f      	add	r7, r3
 80074e0:	4653      	mov	r3, sl
 80074e2:	bfa8      	it	ge
 80074e4:	4633      	movge	r3, r6
 80074e6:	42bb      	cmp	r3, r7
 80074e8:	bfa8      	it	ge
 80074ea:	463b      	movge	r3, r7
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfc2      	ittt	gt
 80074f0:	1af6      	subgt	r6, r6, r3
 80074f2:	1aff      	subgt	r7, r7, r3
 80074f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80074f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	dd17      	ble.n	800752e <_strtod_l+0x736>
 80074fe:	4659      	mov	r1, fp
 8007500:	461a      	mov	r2, r3
 8007502:	4620      	mov	r0, r4
 8007504:	f003 fa78 	bl	800a9f8 <__pow5mult>
 8007508:	4683      	mov	fp, r0
 800750a:	2800      	cmp	r0, #0
 800750c:	f43f aeb8 	beq.w	8007280 <_strtod_l+0x488>
 8007510:	4601      	mov	r1, r0
 8007512:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007514:	4620      	mov	r0, r4
 8007516:	f003 f9c5 	bl	800a8a4 <__multiply>
 800751a:	900b      	str	r0, [sp, #44]	; 0x2c
 800751c:	2800      	cmp	r0, #0
 800751e:	f43f aeaf 	beq.w	8007280 <_strtod_l+0x488>
 8007522:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007524:	4620      	mov	r0, r4
 8007526:	f003 f8a7 	bl	800a678 <_Bfree>
 800752a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752c:	9316      	str	r3, [sp, #88]	; 0x58
 800752e:	2e00      	cmp	r6, #0
 8007530:	f300 808c 	bgt.w	800764c <_strtod_l+0x854>
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd08      	ble.n	800754c <_strtod_l+0x754>
 800753a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800753c:	9905      	ldr	r1, [sp, #20]
 800753e:	4620      	mov	r0, r4
 8007540:	f003 fa5a 	bl	800a9f8 <__pow5mult>
 8007544:	9005      	str	r0, [sp, #20]
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f ae9a 	beq.w	8007280 <_strtod_l+0x488>
 800754c:	2f00      	cmp	r7, #0
 800754e:	dd08      	ble.n	8007562 <_strtod_l+0x76a>
 8007550:	9905      	ldr	r1, [sp, #20]
 8007552:	463a      	mov	r2, r7
 8007554:	4620      	mov	r0, r4
 8007556:	f003 faa9 	bl	800aaac <__lshift>
 800755a:	9005      	str	r0, [sp, #20]
 800755c:	2800      	cmp	r0, #0
 800755e:	f43f ae8f 	beq.w	8007280 <_strtod_l+0x488>
 8007562:	f1ba 0f00 	cmp.w	sl, #0
 8007566:	dd08      	ble.n	800757a <_strtod_l+0x782>
 8007568:	4659      	mov	r1, fp
 800756a:	4652      	mov	r2, sl
 800756c:	4620      	mov	r0, r4
 800756e:	f003 fa9d 	bl	800aaac <__lshift>
 8007572:	4683      	mov	fp, r0
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f ae83 	beq.w	8007280 <_strtod_l+0x488>
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800757e:	4620      	mov	r0, r4
 8007580:	f003 fb1c 	bl	800abbc <__mdiff>
 8007584:	4605      	mov	r5, r0
 8007586:	2800      	cmp	r0, #0
 8007588:	f43f ae7a 	beq.w	8007280 <_strtod_l+0x488>
 800758c:	68c3      	ldr	r3, [r0, #12]
 800758e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007590:	2300      	movs	r3, #0
 8007592:	60c3      	str	r3, [r0, #12]
 8007594:	4659      	mov	r1, fp
 8007596:	f003 faf5 	bl	800ab84 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	da60      	bge.n	8007660 <_strtod_l+0x868>
 800759e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075a0:	ea53 0308 	orrs.w	r3, r3, r8
 80075a4:	f040 8084 	bne.w	80076b0 <_strtod_l+0x8b8>
 80075a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d17f      	bne.n	80076b0 <_strtod_l+0x8b8>
 80075b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075b4:	0d1b      	lsrs	r3, r3, #20
 80075b6:	051b      	lsls	r3, r3, #20
 80075b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80075bc:	d978      	bls.n	80076b0 <_strtod_l+0x8b8>
 80075be:	696b      	ldr	r3, [r5, #20]
 80075c0:	b913      	cbnz	r3, 80075c8 <_strtod_l+0x7d0>
 80075c2:	692b      	ldr	r3, [r5, #16]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	dd73      	ble.n	80076b0 <_strtod_l+0x8b8>
 80075c8:	4629      	mov	r1, r5
 80075ca:	2201      	movs	r2, #1
 80075cc:	4620      	mov	r0, r4
 80075ce:	f003 fa6d 	bl	800aaac <__lshift>
 80075d2:	4659      	mov	r1, fp
 80075d4:	4605      	mov	r5, r0
 80075d6:	f003 fad5 	bl	800ab84 <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	dd68      	ble.n	80076b0 <_strtod_l+0x8b8>
 80075de:	9904      	ldr	r1, [sp, #16]
 80075e0:	4a54      	ldr	r2, [pc, #336]	; (8007734 <_strtod_l+0x93c>)
 80075e2:	464b      	mov	r3, r9
 80075e4:	2900      	cmp	r1, #0
 80075e6:	f000 8084 	beq.w	80076f2 <_strtod_l+0x8fa>
 80075ea:	ea02 0109 	and.w	r1, r2, r9
 80075ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075f2:	dc7e      	bgt.n	80076f2 <_strtod_l+0x8fa>
 80075f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075f8:	f77f aeb3 	ble.w	8007362 <_strtod_l+0x56a>
 80075fc:	4b4e      	ldr	r3, [pc, #312]	; (8007738 <_strtod_l+0x940>)
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	2200      	movs	r2, #0
 8007604:	f7f8 fff8 	bl	80005f8 <__aeabi_dmul>
 8007608:	4b4a      	ldr	r3, [pc, #296]	; (8007734 <_strtod_l+0x93c>)
 800760a:	400b      	ands	r3, r1
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f ae3f 	bne.w	8007294 <_strtod_l+0x49c>
 8007616:	2322      	movs	r3, #34	; 0x22
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	e63b      	b.n	8007294 <_strtod_l+0x49c>
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	ea03 0808 	and.w	r8, r3, r8
 8007628:	e6e8      	b.n	80073fc <_strtod_l+0x604>
 800762a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800762e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007632:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007636:	36e2      	adds	r6, #226	; 0xe2
 8007638:	fa01 f306 	lsl.w	r3, r1, r6
 800763c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007640:	e748      	b.n	80074d4 <_strtod_l+0x6dc>
 8007642:	2100      	movs	r1, #0
 8007644:	2301      	movs	r3, #1
 8007646:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800764a:	e743      	b.n	80074d4 <_strtod_l+0x6dc>
 800764c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800764e:	4632      	mov	r2, r6
 8007650:	4620      	mov	r0, r4
 8007652:	f003 fa2b 	bl	800aaac <__lshift>
 8007656:	9016      	str	r0, [sp, #88]	; 0x58
 8007658:	2800      	cmp	r0, #0
 800765a:	f47f af6b 	bne.w	8007534 <_strtod_l+0x73c>
 800765e:	e60f      	b.n	8007280 <_strtod_l+0x488>
 8007660:	46ca      	mov	sl, r9
 8007662:	d171      	bne.n	8007748 <_strtod_l+0x950>
 8007664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007666:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800766a:	b352      	cbz	r2, 80076c2 <_strtod_l+0x8ca>
 800766c:	4a33      	ldr	r2, [pc, #204]	; (800773c <_strtod_l+0x944>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d12a      	bne.n	80076c8 <_strtod_l+0x8d0>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	4641      	mov	r1, r8
 8007676:	b1fb      	cbz	r3, 80076b8 <_strtod_l+0x8c0>
 8007678:	4b2e      	ldr	r3, [pc, #184]	; (8007734 <_strtod_l+0x93c>)
 800767a:	ea09 0303 	and.w	r3, r9, r3
 800767e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007682:	f04f 32ff 	mov.w	r2, #4294967295
 8007686:	d81a      	bhi.n	80076be <_strtod_l+0x8c6>
 8007688:	0d1b      	lsrs	r3, r3, #20
 800768a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	4299      	cmp	r1, r3
 8007694:	d118      	bne.n	80076c8 <_strtod_l+0x8d0>
 8007696:	4b2a      	ldr	r3, [pc, #168]	; (8007740 <_strtod_l+0x948>)
 8007698:	459a      	cmp	sl, r3
 800769a:	d102      	bne.n	80076a2 <_strtod_l+0x8aa>
 800769c:	3101      	adds	r1, #1
 800769e:	f43f adef 	beq.w	8007280 <_strtod_l+0x488>
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <_strtod_l+0x93c>)
 80076a4:	ea0a 0303 	and.w	r3, sl, r3
 80076a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80076ac:	f04f 0800 	mov.w	r8, #0
 80076b0:	9b04      	ldr	r3, [sp, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1a2      	bne.n	80075fc <_strtod_l+0x804>
 80076b6:	e5ed      	b.n	8007294 <_strtod_l+0x49c>
 80076b8:	f04f 33ff 	mov.w	r3, #4294967295
 80076bc:	e7e9      	b.n	8007692 <_strtod_l+0x89a>
 80076be:	4613      	mov	r3, r2
 80076c0:	e7e7      	b.n	8007692 <_strtod_l+0x89a>
 80076c2:	ea53 0308 	orrs.w	r3, r3, r8
 80076c6:	d08a      	beq.n	80075de <_strtod_l+0x7e6>
 80076c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ca:	b1e3      	cbz	r3, 8007706 <_strtod_l+0x90e>
 80076cc:	ea13 0f0a 	tst.w	r3, sl
 80076d0:	d0ee      	beq.n	80076b0 <_strtod_l+0x8b8>
 80076d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d4:	9a04      	ldr	r2, [sp, #16]
 80076d6:	4640      	mov	r0, r8
 80076d8:	4649      	mov	r1, r9
 80076da:	b1c3      	cbz	r3, 800770e <_strtod_l+0x916>
 80076dc:	f7ff fb6d 	bl	8006dba <sulp>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	ec51 0b18 	vmov	r0, r1, d8
 80076e8:	f7f8 fdd0 	bl	800028c <__adddf3>
 80076ec:	4680      	mov	r8, r0
 80076ee:	4689      	mov	r9, r1
 80076f0:	e7de      	b.n	80076b0 <_strtod_l+0x8b8>
 80076f2:	4013      	ands	r3, r2
 80076f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007700:	f04f 38ff 	mov.w	r8, #4294967295
 8007704:	e7d4      	b.n	80076b0 <_strtod_l+0x8b8>
 8007706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007708:	ea13 0f08 	tst.w	r3, r8
 800770c:	e7e0      	b.n	80076d0 <_strtod_l+0x8d8>
 800770e:	f7ff fb54 	bl	8006dba <sulp>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	ec51 0b18 	vmov	r0, r1, d8
 800771a:	f7f8 fdb5 	bl	8000288 <__aeabi_dsub>
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	4680      	mov	r8, r0
 8007724:	4689      	mov	r9, r1
 8007726:	f7f9 f9cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800772a:	2800      	cmp	r0, #0
 800772c:	d0c0      	beq.n	80076b0 <_strtod_l+0x8b8>
 800772e:	e618      	b.n	8007362 <_strtod_l+0x56a>
 8007730:	fffffc02 	.word	0xfffffc02
 8007734:	7ff00000 	.word	0x7ff00000
 8007738:	39500000 	.word	0x39500000
 800773c:	000fffff 	.word	0x000fffff
 8007740:	7fefffff 	.word	0x7fefffff
 8007744:	0800c7a0 	.word	0x0800c7a0
 8007748:	4659      	mov	r1, fp
 800774a:	4628      	mov	r0, r5
 800774c:	f003 fb8a 	bl	800ae64 <__ratio>
 8007750:	ec57 6b10 	vmov	r6, r7, d0
 8007754:	ee10 0a10 	vmov	r0, s0
 8007758:	2200      	movs	r2, #0
 800775a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800775e:	4639      	mov	r1, r7
 8007760:	f7f9 f9c6 	bl	8000af0 <__aeabi_dcmple>
 8007764:	2800      	cmp	r0, #0
 8007766:	d071      	beq.n	800784c <_strtod_l+0xa54>
 8007768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d17c      	bne.n	8007868 <_strtod_l+0xa70>
 800776e:	f1b8 0f00 	cmp.w	r8, #0
 8007772:	d15a      	bne.n	800782a <_strtod_l+0xa32>
 8007774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007778:	2b00      	cmp	r3, #0
 800777a:	d15d      	bne.n	8007838 <_strtod_l+0xa40>
 800777c:	4b90      	ldr	r3, [pc, #576]	; (80079c0 <_strtod_l+0xbc8>)
 800777e:	2200      	movs	r2, #0
 8007780:	4630      	mov	r0, r6
 8007782:	4639      	mov	r1, r7
 8007784:	f7f9 f9aa 	bl	8000adc <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d15c      	bne.n	8007846 <_strtod_l+0xa4e>
 800778c:	4630      	mov	r0, r6
 800778e:	4639      	mov	r1, r7
 8007790:	4b8c      	ldr	r3, [pc, #560]	; (80079c4 <_strtod_l+0xbcc>)
 8007792:	2200      	movs	r2, #0
 8007794:	f7f8 ff30 	bl	80005f8 <__aeabi_dmul>
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80077a0:	9606      	str	r6, [sp, #24]
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80077ac:	4b86      	ldr	r3, [pc, #536]	; (80079c8 <_strtod_l+0xbd0>)
 80077ae:	ea0a 0303 	and.w	r3, sl, r3
 80077b2:	930d      	str	r3, [sp, #52]	; 0x34
 80077b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077b6:	4b85      	ldr	r3, [pc, #532]	; (80079cc <_strtod_l+0xbd4>)
 80077b8:	429a      	cmp	r2, r3
 80077ba:	f040 8090 	bne.w	80078de <_strtod_l+0xae6>
 80077be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80077c2:	ec49 8b10 	vmov	d0, r8, r9
 80077c6:	f003 fa83 	bl	800acd0 <__ulp>
 80077ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ce:	ec51 0b10 	vmov	r0, r1, d0
 80077d2:	f7f8 ff11 	bl	80005f8 <__aeabi_dmul>
 80077d6:	4642      	mov	r2, r8
 80077d8:	464b      	mov	r3, r9
 80077da:	f7f8 fd57 	bl	800028c <__adddf3>
 80077de:	460b      	mov	r3, r1
 80077e0:	4979      	ldr	r1, [pc, #484]	; (80079c8 <_strtod_l+0xbd0>)
 80077e2:	4a7b      	ldr	r2, [pc, #492]	; (80079d0 <_strtod_l+0xbd8>)
 80077e4:	4019      	ands	r1, r3
 80077e6:	4291      	cmp	r1, r2
 80077e8:	4680      	mov	r8, r0
 80077ea:	d944      	bls.n	8007876 <_strtod_l+0xa7e>
 80077ec:	ee18 2a90 	vmov	r2, s17
 80077f0:	4b78      	ldr	r3, [pc, #480]	; (80079d4 <_strtod_l+0xbdc>)
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d104      	bne.n	8007800 <_strtod_l+0xa08>
 80077f6:	ee18 3a10 	vmov	r3, s16
 80077fa:	3301      	adds	r3, #1
 80077fc:	f43f ad40 	beq.w	8007280 <_strtod_l+0x488>
 8007800:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80079d4 <_strtod_l+0xbdc>
 8007804:	f04f 38ff 	mov.w	r8, #4294967295
 8007808:	9916      	ldr	r1, [sp, #88]	; 0x58
 800780a:	4620      	mov	r0, r4
 800780c:	f002 ff34 	bl	800a678 <_Bfree>
 8007810:	9905      	ldr	r1, [sp, #20]
 8007812:	4620      	mov	r0, r4
 8007814:	f002 ff30 	bl	800a678 <_Bfree>
 8007818:	4659      	mov	r1, fp
 800781a:	4620      	mov	r0, r4
 800781c:	f002 ff2c 	bl	800a678 <_Bfree>
 8007820:	4629      	mov	r1, r5
 8007822:	4620      	mov	r0, r4
 8007824:	f002 ff28 	bl	800a678 <_Bfree>
 8007828:	e609      	b.n	800743e <_strtod_l+0x646>
 800782a:	f1b8 0f01 	cmp.w	r8, #1
 800782e:	d103      	bne.n	8007838 <_strtod_l+0xa40>
 8007830:	f1b9 0f00 	cmp.w	r9, #0
 8007834:	f43f ad95 	beq.w	8007362 <_strtod_l+0x56a>
 8007838:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007990 <_strtod_l+0xb98>
 800783c:	4f60      	ldr	r7, [pc, #384]	; (80079c0 <_strtod_l+0xbc8>)
 800783e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007842:	2600      	movs	r6, #0
 8007844:	e7ae      	b.n	80077a4 <_strtod_l+0x9ac>
 8007846:	4f5f      	ldr	r7, [pc, #380]	; (80079c4 <_strtod_l+0xbcc>)
 8007848:	2600      	movs	r6, #0
 800784a:	e7a7      	b.n	800779c <_strtod_l+0x9a4>
 800784c:	4b5d      	ldr	r3, [pc, #372]	; (80079c4 <_strtod_l+0xbcc>)
 800784e:	4630      	mov	r0, r6
 8007850:	4639      	mov	r1, r7
 8007852:	2200      	movs	r2, #0
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d09c      	beq.n	800779c <_strtod_l+0x9a4>
 8007862:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007866:	e79d      	b.n	80077a4 <_strtod_l+0x9ac>
 8007868:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007998 <_strtod_l+0xba0>
 800786c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007870:	ec57 6b17 	vmov	r6, r7, d7
 8007874:	e796      	b.n	80077a4 <_strtod_l+0x9ac>
 8007876:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800787a:	9b04      	ldr	r3, [sp, #16]
 800787c:	46ca      	mov	sl, r9
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1c2      	bne.n	8007808 <_strtod_l+0xa10>
 8007882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007888:	0d1b      	lsrs	r3, r3, #20
 800788a:	051b      	lsls	r3, r3, #20
 800788c:	429a      	cmp	r2, r3
 800788e:	d1bb      	bne.n	8007808 <_strtod_l+0xa10>
 8007890:	4630      	mov	r0, r6
 8007892:	4639      	mov	r1, r7
 8007894:	f7f9 fa10 	bl	8000cb8 <__aeabi_d2lz>
 8007898:	f7f8 fe80 	bl	800059c <__aeabi_l2d>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f8 fcf0 	bl	8000288 <__aeabi_dsub>
 80078a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ae:	ea43 0308 	orr.w	r3, r3, r8
 80078b2:	4313      	orrs	r3, r2
 80078b4:	4606      	mov	r6, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	d054      	beq.n	8007964 <_strtod_l+0xb6c>
 80078ba:	a339      	add	r3, pc, #228	; (adr r3, 80079a0 <_strtod_l+0xba8>)
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f7f9 f90c 	bl	8000adc <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f47f ace5 	bne.w	8007294 <_strtod_l+0x49c>
 80078ca:	a337      	add	r3, pc, #220	; (adr r3, 80079a8 <_strtod_l+0xbb0>)
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	4630      	mov	r0, r6
 80078d2:	4639      	mov	r1, r7
 80078d4:	f7f9 f920 	bl	8000b18 <__aeabi_dcmpgt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d095      	beq.n	8007808 <_strtod_l+0xa10>
 80078dc:	e4da      	b.n	8007294 <_strtod_l+0x49c>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	b333      	cbz	r3, 8007930 <_strtod_l+0xb38>
 80078e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078e8:	d822      	bhi.n	8007930 <_strtod_l+0xb38>
 80078ea:	a331      	add	r3, pc, #196	; (adr r3, 80079b0 <_strtod_l+0xbb8>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	f7f9 f8fc 	bl	8000af0 <__aeabi_dcmple>
 80078f8:	b1a0      	cbz	r0, 8007924 <_strtod_l+0xb2c>
 80078fa:	4639      	mov	r1, r7
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7f9 f953 	bl	8000ba8 <__aeabi_d2uiz>
 8007902:	2801      	cmp	r0, #1
 8007904:	bf38      	it	cc
 8007906:	2001      	movcc	r0, #1
 8007908:	f7f8 fdfc 	bl	8000504 <__aeabi_ui2d>
 800790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	bb23      	cbnz	r3, 800795e <_strtod_l+0xb66>
 8007914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007918:	9010      	str	r0, [sp, #64]	; 0x40
 800791a:	9311      	str	r3, [sp, #68]	; 0x44
 800791c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007928:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007930:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007934:	eeb0 0a48 	vmov.f32	s0, s16
 8007938:	eef0 0a68 	vmov.f32	s1, s17
 800793c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007940:	f003 f9c6 	bl	800acd0 <__ulp>
 8007944:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007948:	ec53 2b10 	vmov	r2, r3, d0
 800794c:	f7f8 fe54 	bl	80005f8 <__aeabi_dmul>
 8007950:	ec53 2b18 	vmov	r2, r3, d8
 8007954:	f7f8 fc9a 	bl	800028c <__adddf3>
 8007958:	4680      	mov	r8, r0
 800795a:	4689      	mov	r9, r1
 800795c:	e78d      	b.n	800787a <_strtod_l+0xa82>
 800795e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007962:	e7db      	b.n	800791c <_strtod_l+0xb24>
 8007964:	a314      	add	r3, pc, #80	; (adr r3, 80079b8 <_strtod_l+0xbc0>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f9 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800796e:	e7b3      	b.n	80078d8 <_strtod_l+0xae0>
 8007970:	2300      	movs	r3, #0
 8007972:	930a      	str	r3, [sp, #40]	; 0x28
 8007974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	f7ff ba7c 	b.w	8006e76 <_strtod_l+0x7e>
 800797e:	2a65      	cmp	r2, #101	; 0x65
 8007980:	f43f ab75 	beq.w	800706e <_strtod_l+0x276>
 8007984:	2a45      	cmp	r2, #69	; 0x45
 8007986:	f43f ab72 	beq.w	800706e <_strtod_l+0x276>
 800798a:	2301      	movs	r3, #1
 800798c:	f7ff bbaa 	b.w	80070e4 <_strtod_l+0x2ec>
 8007990:	00000000 	.word	0x00000000
 8007994:	bff00000 	.word	0xbff00000
 8007998:	00000000 	.word	0x00000000
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	94a03595 	.word	0x94a03595
 80079a4:	3fdfffff 	.word	0x3fdfffff
 80079a8:	35afe535 	.word	0x35afe535
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	ffc00000 	.word	0xffc00000
 80079b4:	41dfffff 	.word	0x41dfffff
 80079b8:	94a03595 	.word	0x94a03595
 80079bc:	3fcfffff 	.word	0x3fcfffff
 80079c0:	3ff00000 	.word	0x3ff00000
 80079c4:	3fe00000 	.word	0x3fe00000
 80079c8:	7ff00000 	.word	0x7ff00000
 80079cc:	7fe00000 	.word	0x7fe00000
 80079d0:	7c9fffff 	.word	0x7c9fffff
 80079d4:	7fefffff 	.word	0x7fefffff

080079d8 <_strtod_r>:
 80079d8:	4b01      	ldr	r3, [pc, #4]	; (80079e0 <_strtod_r+0x8>)
 80079da:	f7ff ba0d 	b.w	8006df8 <_strtod_l>
 80079de:	bf00      	nop
 80079e0:	2000001c 	.word	0x2000001c

080079e4 <strtod>:
 80079e4:	460a      	mov	r2, r1
 80079e6:	4601      	mov	r1, r0
 80079e8:	4802      	ldr	r0, [pc, #8]	; (80079f4 <strtod+0x10>)
 80079ea:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <strtod+0x14>)
 80079ec:	6800      	ldr	r0, [r0, #0]
 80079ee:	f7ff ba03 	b.w	8006df8 <_strtod_l>
 80079f2:	bf00      	nop
 80079f4:	200001d4 	.word	0x200001d4
 80079f8:	2000001c 	.word	0x2000001c

080079fc <_strtol_l.constprop.0>:
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	d001      	beq.n	8007a08 <_strtol_l.constprop.0+0xc>
 8007a04:	2b24      	cmp	r3, #36	; 0x24
 8007a06:	d906      	bls.n	8007a16 <_strtol_l.constprop.0+0x1a>
 8007a08:	f001 faa8 	bl	8008f5c <__errno>
 8007a0c:	2316      	movs	r3, #22
 8007a0e:	6003      	str	r3, [r0, #0]
 8007a10:	2000      	movs	r0, #0
 8007a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007afc <_strtol_l.constprop.0+0x100>
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	462e      	mov	r6, r5
 8007a1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a22:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007a26:	f017 0708 	ands.w	r7, r7, #8
 8007a2a:	d1f7      	bne.n	8007a1c <_strtol_l.constprop.0+0x20>
 8007a2c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a2e:	d132      	bne.n	8007a96 <_strtol_l.constprop.0+0x9a>
 8007a30:	782c      	ldrb	r4, [r5, #0]
 8007a32:	2701      	movs	r7, #1
 8007a34:	1cb5      	adds	r5, r6, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d05b      	beq.n	8007af2 <_strtol_l.constprop.0+0xf6>
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d109      	bne.n	8007a52 <_strtol_l.constprop.0+0x56>
 8007a3e:	2c30      	cmp	r4, #48	; 0x30
 8007a40:	d107      	bne.n	8007a52 <_strtol_l.constprop.0+0x56>
 8007a42:	782c      	ldrb	r4, [r5, #0]
 8007a44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a48:	2c58      	cmp	r4, #88	; 0x58
 8007a4a:	d14d      	bne.n	8007ae8 <_strtol_l.constprop.0+0xec>
 8007a4c:	786c      	ldrb	r4, [r5, #1]
 8007a4e:	2310      	movs	r3, #16
 8007a50:	3502      	adds	r5, #2
 8007a52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007a56:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a5a:	f04f 0e00 	mov.w	lr, #0
 8007a5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007a62:	4676      	mov	r6, lr
 8007a64:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a6c:	f1bc 0f09 	cmp.w	ip, #9
 8007a70:	d816      	bhi.n	8007aa0 <_strtol_l.constprop.0+0xa4>
 8007a72:	4664      	mov	r4, ip
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	dd24      	ble.n	8007ac2 <_strtol_l.constprop.0+0xc6>
 8007a78:	f1be 3fff 	cmp.w	lr, #4294967295
 8007a7c:	d008      	beq.n	8007a90 <_strtol_l.constprop.0+0x94>
 8007a7e:	45b1      	cmp	r9, r6
 8007a80:	d31c      	bcc.n	8007abc <_strtol_l.constprop.0+0xc0>
 8007a82:	d101      	bne.n	8007a88 <_strtol_l.constprop.0+0x8c>
 8007a84:	45a2      	cmp	sl, r4
 8007a86:	db19      	blt.n	8007abc <_strtol_l.constprop.0+0xc0>
 8007a88:	fb06 4603 	mla	r6, r6, r3, r4
 8007a8c:	f04f 0e01 	mov.w	lr, #1
 8007a90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a94:	e7e8      	b.n	8007a68 <_strtol_l.constprop.0+0x6c>
 8007a96:	2c2b      	cmp	r4, #43	; 0x2b
 8007a98:	bf04      	itt	eq
 8007a9a:	782c      	ldrbeq	r4, [r5, #0]
 8007a9c:	1cb5      	addeq	r5, r6, #2
 8007a9e:	e7ca      	b.n	8007a36 <_strtol_l.constprop.0+0x3a>
 8007aa0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007aa4:	f1bc 0f19 	cmp.w	ip, #25
 8007aa8:	d801      	bhi.n	8007aae <_strtol_l.constprop.0+0xb2>
 8007aaa:	3c37      	subs	r4, #55	; 0x37
 8007aac:	e7e2      	b.n	8007a74 <_strtol_l.constprop.0+0x78>
 8007aae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007ab2:	f1bc 0f19 	cmp.w	ip, #25
 8007ab6:	d804      	bhi.n	8007ac2 <_strtol_l.constprop.0+0xc6>
 8007ab8:	3c57      	subs	r4, #87	; 0x57
 8007aba:	e7db      	b.n	8007a74 <_strtol_l.constprop.0+0x78>
 8007abc:	f04f 3eff 	mov.w	lr, #4294967295
 8007ac0:	e7e6      	b.n	8007a90 <_strtol_l.constprop.0+0x94>
 8007ac2:	f1be 3fff 	cmp.w	lr, #4294967295
 8007ac6:	d105      	bne.n	8007ad4 <_strtol_l.constprop.0+0xd8>
 8007ac8:	2322      	movs	r3, #34	; 0x22
 8007aca:	6003      	str	r3, [r0, #0]
 8007acc:	4646      	mov	r6, r8
 8007ace:	b942      	cbnz	r2, 8007ae2 <_strtol_l.constprop.0+0xe6>
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	e79e      	b.n	8007a12 <_strtol_l.constprop.0+0x16>
 8007ad4:	b107      	cbz	r7, 8007ad8 <_strtol_l.constprop.0+0xdc>
 8007ad6:	4276      	negs	r6, r6
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	d0f9      	beq.n	8007ad0 <_strtol_l.constprop.0+0xd4>
 8007adc:	f1be 0f00 	cmp.w	lr, #0
 8007ae0:	d000      	beq.n	8007ae4 <_strtol_l.constprop.0+0xe8>
 8007ae2:	1e69      	subs	r1, r5, #1
 8007ae4:	6011      	str	r1, [r2, #0]
 8007ae6:	e7f3      	b.n	8007ad0 <_strtol_l.constprop.0+0xd4>
 8007ae8:	2430      	movs	r4, #48	; 0x30
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1b1      	bne.n	8007a52 <_strtol_l.constprop.0+0x56>
 8007aee:	2308      	movs	r3, #8
 8007af0:	e7af      	b.n	8007a52 <_strtol_l.constprop.0+0x56>
 8007af2:	2c30      	cmp	r4, #48	; 0x30
 8007af4:	d0a5      	beq.n	8007a42 <_strtol_l.constprop.0+0x46>
 8007af6:	230a      	movs	r3, #10
 8007af8:	e7ab      	b.n	8007a52 <_strtol_l.constprop.0+0x56>
 8007afa:	bf00      	nop
 8007afc:	0800c7c9 	.word	0x0800c7c9

08007b00 <_strtol_r>:
 8007b00:	f7ff bf7c 	b.w	80079fc <_strtol_l.constprop.0>

08007b04 <strtol>:
 8007b04:	4613      	mov	r3, r2
 8007b06:	460a      	mov	r2, r1
 8007b08:	4601      	mov	r1, r0
 8007b0a:	4802      	ldr	r0, [pc, #8]	; (8007b14 <strtol+0x10>)
 8007b0c:	6800      	ldr	r0, [r0, #0]
 8007b0e:	f7ff bf75 	b.w	80079fc <_strtol_l.constprop.0>
 8007b12:	bf00      	nop
 8007b14:	200001d4 	.word	0x200001d4

08007b18 <_strtoul_l.constprop.0>:
 8007b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b1c:	4f36      	ldr	r7, [pc, #216]	; (8007bf8 <_strtoul_l.constprop.0+0xe0>)
 8007b1e:	4686      	mov	lr, r0
 8007b20:	460d      	mov	r5, r1
 8007b22:	4628      	mov	r0, r5
 8007b24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b28:	5d3e      	ldrb	r6, [r7, r4]
 8007b2a:	f016 0608 	ands.w	r6, r6, #8
 8007b2e:	d1f8      	bne.n	8007b22 <_strtoul_l.constprop.0+0xa>
 8007b30:	2c2d      	cmp	r4, #45	; 0x2d
 8007b32:	d130      	bne.n	8007b96 <_strtoul_l.constprop.0+0x7e>
 8007b34:	782c      	ldrb	r4, [r5, #0]
 8007b36:	2601      	movs	r6, #1
 8007b38:	1c85      	adds	r5, r0, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d057      	beq.n	8007bee <_strtoul_l.constprop.0+0xd6>
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d109      	bne.n	8007b56 <_strtoul_l.constprop.0+0x3e>
 8007b42:	2c30      	cmp	r4, #48	; 0x30
 8007b44:	d107      	bne.n	8007b56 <_strtoul_l.constprop.0+0x3e>
 8007b46:	7828      	ldrb	r0, [r5, #0]
 8007b48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007b4c:	2858      	cmp	r0, #88	; 0x58
 8007b4e:	d149      	bne.n	8007be4 <_strtoul_l.constprop.0+0xcc>
 8007b50:	786c      	ldrb	r4, [r5, #1]
 8007b52:	2310      	movs	r3, #16
 8007b54:	3502      	adds	r5, #2
 8007b56:	f04f 38ff 	mov.w	r8, #4294967295
 8007b5a:	2700      	movs	r7, #0
 8007b5c:	fbb8 f8f3 	udiv	r8, r8, r3
 8007b60:	fb03 f908 	mul.w	r9, r3, r8
 8007b64:	ea6f 0909 	mvn.w	r9, r9
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b6e:	f1bc 0f09 	cmp.w	ip, #9
 8007b72:	d815      	bhi.n	8007ba0 <_strtoul_l.constprop.0+0x88>
 8007b74:	4664      	mov	r4, ip
 8007b76:	42a3      	cmp	r3, r4
 8007b78:	dd23      	ble.n	8007bc2 <_strtoul_l.constprop.0+0xaa>
 8007b7a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007b7e:	d007      	beq.n	8007b90 <_strtoul_l.constprop.0+0x78>
 8007b80:	4580      	cmp	r8, r0
 8007b82:	d31b      	bcc.n	8007bbc <_strtoul_l.constprop.0+0xa4>
 8007b84:	d101      	bne.n	8007b8a <_strtoul_l.constprop.0+0x72>
 8007b86:	45a1      	cmp	r9, r4
 8007b88:	db18      	blt.n	8007bbc <_strtoul_l.constprop.0+0xa4>
 8007b8a:	fb00 4003 	mla	r0, r0, r3, r4
 8007b8e:	2701      	movs	r7, #1
 8007b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b94:	e7e9      	b.n	8007b6a <_strtoul_l.constprop.0+0x52>
 8007b96:	2c2b      	cmp	r4, #43	; 0x2b
 8007b98:	bf04      	itt	eq
 8007b9a:	782c      	ldrbeq	r4, [r5, #0]
 8007b9c:	1c85      	addeq	r5, r0, #2
 8007b9e:	e7cc      	b.n	8007b3a <_strtoul_l.constprop.0+0x22>
 8007ba0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007ba4:	f1bc 0f19 	cmp.w	ip, #25
 8007ba8:	d801      	bhi.n	8007bae <_strtoul_l.constprop.0+0x96>
 8007baa:	3c37      	subs	r4, #55	; 0x37
 8007bac:	e7e3      	b.n	8007b76 <_strtoul_l.constprop.0+0x5e>
 8007bae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007bb2:	f1bc 0f19 	cmp.w	ip, #25
 8007bb6:	d804      	bhi.n	8007bc2 <_strtoul_l.constprop.0+0xaa>
 8007bb8:	3c57      	subs	r4, #87	; 0x57
 8007bba:	e7dc      	b.n	8007b76 <_strtoul_l.constprop.0+0x5e>
 8007bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007bc0:	e7e6      	b.n	8007b90 <_strtoul_l.constprop.0+0x78>
 8007bc2:	1c7b      	adds	r3, r7, #1
 8007bc4:	d106      	bne.n	8007bd4 <_strtoul_l.constprop.0+0xbc>
 8007bc6:	2322      	movs	r3, #34	; 0x22
 8007bc8:	f8ce 3000 	str.w	r3, [lr]
 8007bcc:	4638      	mov	r0, r7
 8007bce:	b932      	cbnz	r2, 8007bde <_strtoul_l.constprop.0+0xc6>
 8007bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd4:	b106      	cbz	r6, 8007bd8 <_strtoul_l.constprop.0+0xc0>
 8007bd6:	4240      	negs	r0, r0
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	d0f9      	beq.n	8007bd0 <_strtoul_l.constprop.0+0xb8>
 8007bdc:	b107      	cbz	r7, 8007be0 <_strtoul_l.constprop.0+0xc8>
 8007bde:	1e69      	subs	r1, r5, #1
 8007be0:	6011      	str	r1, [r2, #0]
 8007be2:	e7f5      	b.n	8007bd0 <_strtoul_l.constprop.0+0xb8>
 8007be4:	2430      	movs	r4, #48	; 0x30
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1b5      	bne.n	8007b56 <_strtoul_l.constprop.0+0x3e>
 8007bea:	2308      	movs	r3, #8
 8007bec:	e7b3      	b.n	8007b56 <_strtoul_l.constprop.0+0x3e>
 8007bee:	2c30      	cmp	r4, #48	; 0x30
 8007bf0:	d0a9      	beq.n	8007b46 <_strtoul_l.constprop.0+0x2e>
 8007bf2:	230a      	movs	r3, #10
 8007bf4:	e7af      	b.n	8007b56 <_strtoul_l.constprop.0+0x3e>
 8007bf6:	bf00      	nop
 8007bf8:	0800c7c9 	.word	0x0800c7c9

08007bfc <strtoul>:
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	460a      	mov	r2, r1
 8007c00:	4601      	mov	r1, r0
 8007c02:	4802      	ldr	r0, [pc, #8]	; (8007c0c <strtoul+0x10>)
 8007c04:	6800      	ldr	r0, [r0, #0]
 8007c06:	f7ff bf87 	b.w	8007b18 <_strtoul_l.constprop.0>
 8007c0a:	bf00      	nop
 8007c0c:	200001d4 	.word	0x200001d4

08007c10 <__cvt>:
 8007c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	ec55 4b10 	vmov	r4, r5, d0
 8007c18:	2d00      	cmp	r5, #0
 8007c1a:	460e      	mov	r6, r1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	462b      	mov	r3, r5
 8007c20:	bfbb      	ittet	lt
 8007c22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c26:	461d      	movlt	r5, r3
 8007c28:	2300      	movge	r3, #0
 8007c2a:	232d      	movlt	r3, #45	; 0x2d
 8007c2c:	700b      	strb	r3, [r1, #0]
 8007c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c34:	4691      	mov	r9, r2
 8007c36:	f023 0820 	bic.w	r8, r3, #32
 8007c3a:	bfbc      	itt	lt
 8007c3c:	4622      	movlt	r2, r4
 8007c3e:	4614      	movlt	r4, r2
 8007c40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c44:	d005      	beq.n	8007c52 <__cvt+0x42>
 8007c46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c4a:	d100      	bne.n	8007c4e <__cvt+0x3e>
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	2102      	movs	r1, #2
 8007c50:	e000      	b.n	8007c54 <__cvt+0x44>
 8007c52:	2103      	movs	r1, #3
 8007c54:	ab03      	add	r3, sp, #12
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	ab02      	add	r3, sp, #8
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	ec45 4b10 	vmov	d0, r4, r5
 8007c60:	4653      	mov	r3, sl
 8007c62:	4632      	mov	r2, r6
 8007c64:	f001 fa6c 	bl	8009140 <_dtoa_r>
 8007c68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	d102      	bne.n	8007c76 <__cvt+0x66>
 8007c70:	f019 0f01 	tst.w	r9, #1
 8007c74:	d022      	beq.n	8007cbc <__cvt+0xac>
 8007c76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c7a:	eb07 0906 	add.w	r9, r7, r6
 8007c7e:	d110      	bne.n	8007ca2 <__cvt+0x92>
 8007c80:	783b      	ldrb	r3, [r7, #0]
 8007c82:	2b30      	cmp	r3, #48	; 0x30
 8007c84:	d10a      	bne.n	8007c9c <__cvt+0x8c>
 8007c86:	2200      	movs	r2, #0
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c92:	b918      	cbnz	r0, 8007c9c <__cvt+0x8c>
 8007c94:	f1c6 0601 	rsb	r6, r6, #1
 8007c98:	f8ca 6000 	str.w	r6, [sl]
 8007c9c:	f8da 3000 	ldr.w	r3, [sl]
 8007ca0:	4499      	add	r9, r3
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 ff0d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cae:	b108      	cbz	r0, 8007cb4 <__cvt+0xa4>
 8007cb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cb4:	2230      	movs	r2, #48	; 0x30
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	454b      	cmp	r3, r9
 8007cba:	d307      	bcc.n	8007ccc <__cvt+0xbc>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cc0:	1bdb      	subs	r3, r3, r7
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	b004      	add	sp, #16
 8007cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ccc:	1c59      	adds	r1, r3, #1
 8007cce:	9103      	str	r1, [sp, #12]
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e7f0      	b.n	8007cb6 <__cvt+0xa6>

08007cd4 <__exponent>:
 8007cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	bfb8      	it	lt
 8007cdc:	4249      	neglt	r1, r1
 8007cde:	f803 2b02 	strb.w	r2, [r3], #2
 8007ce2:	bfb4      	ite	lt
 8007ce4:	222d      	movlt	r2, #45	; 0x2d
 8007ce6:	222b      	movge	r2, #43	; 0x2b
 8007ce8:	2909      	cmp	r1, #9
 8007cea:	7042      	strb	r2, [r0, #1]
 8007cec:	dd2a      	ble.n	8007d44 <__exponent+0x70>
 8007cee:	f10d 0207 	add.w	r2, sp, #7
 8007cf2:	4617      	mov	r7, r2
 8007cf4:	260a      	movs	r6, #10
 8007cf6:	4694      	mov	ip, r2
 8007cf8:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cfc:	fb06 1415 	mls	r4, r6, r5, r1
 8007d00:	3430      	adds	r4, #48	; 0x30
 8007d02:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007d06:	460c      	mov	r4, r1
 8007d08:	2c63      	cmp	r4, #99	; 0x63
 8007d0a:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d0e:	4629      	mov	r1, r5
 8007d10:	dcf1      	bgt.n	8007cf6 <__exponent+0x22>
 8007d12:	3130      	adds	r1, #48	; 0x30
 8007d14:	f1ac 0402 	sub.w	r4, ip, #2
 8007d18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d1c:	1c41      	adds	r1, r0, #1
 8007d1e:	4622      	mov	r2, r4
 8007d20:	42ba      	cmp	r2, r7
 8007d22:	d30a      	bcc.n	8007d3a <__exponent+0x66>
 8007d24:	f10d 0209 	add.w	r2, sp, #9
 8007d28:	eba2 020c 	sub.w	r2, r2, ip
 8007d2c:	42bc      	cmp	r4, r7
 8007d2e:	bf88      	it	hi
 8007d30:	2200      	movhi	r2, #0
 8007d32:	4413      	add	r3, r2
 8007d34:	1a18      	subs	r0, r3, r0
 8007d36:	b003      	add	sp, #12
 8007d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d3a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d3e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d42:	e7ed      	b.n	8007d20 <__exponent+0x4c>
 8007d44:	2330      	movs	r3, #48	; 0x30
 8007d46:	3130      	adds	r1, #48	; 0x30
 8007d48:	7083      	strb	r3, [r0, #2]
 8007d4a:	70c1      	strb	r1, [r0, #3]
 8007d4c:	1d03      	adds	r3, r0, #4
 8007d4e:	e7f1      	b.n	8007d34 <__exponent+0x60>

08007d50 <_printf_float>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	ed2d 8b02 	vpush	{d8}
 8007d58:	b08d      	sub	sp, #52	; 0x34
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d60:	4616      	mov	r6, r2
 8007d62:	461f      	mov	r7, r3
 8007d64:	4605      	mov	r5, r0
 8007d66:	f001 f8af 	bl	8008ec8 <_localeconv_r>
 8007d6a:	f8d0 a000 	ldr.w	sl, [r0]
 8007d6e:	4650      	mov	r0, sl
 8007d70:	f7f8 fa7e 	bl	8000270 <strlen>
 8007d74:	2300      	movs	r3, #0
 8007d76:	930a      	str	r3, [sp, #40]	; 0x28
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	9305      	str	r3, [sp, #20]
 8007d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8007d80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d84:	3307      	adds	r3, #7
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	f103 0208 	add.w	r2, r3, #8
 8007d8e:	f8c8 2000 	str.w	r2, [r8]
 8007d92:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d9a:	9307      	str	r3, [sp, #28]
 8007d9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007da0:	ee08 0a10 	vmov	s16, r0
 8007da4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dac:	4b9e      	ldr	r3, [pc, #632]	; (8008028 <_printf_float+0x2d8>)
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
 8007db2:	f7f8 febb 	bl	8000b2c <__aeabi_dcmpun>
 8007db6:	bb88      	cbnz	r0, 8007e1c <_printf_float+0xcc>
 8007db8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dbc:	4b9a      	ldr	r3, [pc, #616]	; (8008028 <_printf_float+0x2d8>)
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc2:	f7f8 fe95 	bl	8000af0 <__aeabi_dcmple>
 8007dc6:	bb48      	cbnz	r0, 8007e1c <_printf_float+0xcc>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 fe84 	bl	8000adc <__aeabi_dcmplt>
 8007dd4:	b110      	cbz	r0, 8007ddc <_printf_float+0x8c>
 8007dd6:	232d      	movs	r3, #45	; 0x2d
 8007dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ddc:	4a93      	ldr	r2, [pc, #588]	; (800802c <_printf_float+0x2dc>)
 8007dde:	4b94      	ldr	r3, [pc, #592]	; (8008030 <_printf_float+0x2e0>)
 8007de0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007de4:	bf94      	ite	ls
 8007de6:	4690      	movls	r8, r2
 8007de8:	4698      	movhi	r8, r3
 8007dea:	2303      	movs	r3, #3
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	9b05      	ldr	r3, [sp, #20]
 8007df0:	f023 0304 	bic.w	r3, r3, #4
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	9700      	str	r7, [sp, #0]
 8007dfc:	4633      	mov	r3, r6
 8007dfe:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f9da 	bl	80081bc <_printf_common>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	f040 8090 	bne.w	8007f2e <_printf_float+0x1de>
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	b00d      	add	sp, #52	; 0x34
 8007e14:	ecbd 8b02 	vpop	{d8}
 8007e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fe82 	bl	8000b2c <__aeabi_dcmpun>
 8007e28:	b140      	cbz	r0, 8007e3c <_printf_float+0xec>
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bfbc      	itt	lt
 8007e30:	232d      	movlt	r3, #45	; 0x2d
 8007e32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e36:	4a7f      	ldr	r2, [pc, #508]	; (8008034 <_printf_float+0x2e4>)
 8007e38:	4b7f      	ldr	r3, [pc, #508]	; (8008038 <_printf_float+0x2e8>)
 8007e3a:	e7d1      	b.n	8007de0 <_printf_float+0x90>
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e42:	9206      	str	r2, [sp, #24]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	d13f      	bne.n	8007ec8 <_printf_float+0x178>
 8007e48:	2306      	movs	r3, #6
 8007e4a:	6063      	str	r3, [r4, #4]
 8007e4c:	9b05      	ldr	r3, [sp, #20]
 8007e4e:	6861      	ldr	r1, [r4, #4]
 8007e50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e54:	2300      	movs	r3, #0
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	ab0a      	add	r3, sp, #40	; 0x28
 8007e5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e5e:	ab09      	add	r3, sp, #36	; 0x24
 8007e60:	ec49 8b10 	vmov	d0, r8, r9
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	f7ff fecf 	bl	8007c10 <__cvt>
 8007e72:	9b06      	ldr	r3, [sp, #24]
 8007e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e76:	2b47      	cmp	r3, #71	; 0x47
 8007e78:	4680      	mov	r8, r0
 8007e7a:	d108      	bne.n	8007e8e <_printf_float+0x13e>
 8007e7c:	1cc8      	adds	r0, r1, #3
 8007e7e:	db02      	blt.n	8007e86 <_printf_float+0x136>
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	4299      	cmp	r1, r3
 8007e84:	dd41      	ble.n	8007f0a <_printf_float+0x1ba>
 8007e86:	f1ab 0302 	sub.w	r3, fp, #2
 8007e8a:	fa5f fb83 	uxtb.w	fp, r3
 8007e8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e92:	d820      	bhi.n	8007ed6 <_printf_float+0x186>
 8007e94:	3901      	subs	r1, #1
 8007e96:	465a      	mov	r2, fp
 8007e98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e9c:	9109      	str	r1, [sp, #36]	; 0x24
 8007e9e:	f7ff ff19 	bl	8007cd4 <__exponent>
 8007ea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ea4:	1813      	adds	r3, r2, r0
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	4681      	mov	r9, r0
 8007eaa:	6123      	str	r3, [r4, #16]
 8007eac:	dc02      	bgt.n	8007eb4 <_printf_float+0x164>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	07d2      	lsls	r2, r2, #31
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_float+0x168>
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d09c      	beq.n	8007dfa <_printf_float+0xaa>
 8007ec0:	232d      	movs	r3, #45	; 0x2d
 8007ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec6:	e798      	b.n	8007dfa <_printf_float+0xaa>
 8007ec8:	9a06      	ldr	r2, [sp, #24]
 8007eca:	2a47      	cmp	r2, #71	; 0x47
 8007ecc:	d1be      	bne.n	8007e4c <_printf_float+0xfc>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1bc      	bne.n	8007e4c <_printf_float+0xfc>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e7b9      	b.n	8007e4a <_printf_float+0xfa>
 8007ed6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007eda:	d118      	bne.n	8007f0e <_printf_float+0x1be>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	6863      	ldr	r3, [r4, #4]
 8007ee0:	dd0b      	ble.n	8007efa <_printf_float+0x1aa>
 8007ee2:	6121      	str	r1, [r4, #16]
 8007ee4:	b913      	cbnz	r3, 8007eec <_printf_float+0x19c>
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	07d0      	lsls	r0, r2, #31
 8007eea:	d502      	bpl.n	8007ef2 <_printf_float+0x1a2>
 8007eec:	3301      	adds	r3, #1
 8007eee:	440b      	add	r3, r1
 8007ef0:	6123      	str	r3, [r4, #16]
 8007ef2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	e7de      	b.n	8007eb8 <_printf_float+0x168>
 8007efa:	b913      	cbnz	r3, 8007f02 <_printf_float+0x1b2>
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	07d2      	lsls	r2, r2, #31
 8007f00:	d501      	bpl.n	8007f06 <_printf_float+0x1b6>
 8007f02:	3302      	adds	r3, #2
 8007f04:	e7f4      	b.n	8007ef0 <_printf_float+0x1a0>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e7f2      	b.n	8007ef0 <_printf_float+0x1a0>
 8007f0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f10:	4299      	cmp	r1, r3
 8007f12:	db05      	blt.n	8007f20 <_printf_float+0x1d0>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	6121      	str	r1, [r4, #16]
 8007f18:	07d8      	lsls	r0, r3, #31
 8007f1a:	d5ea      	bpl.n	8007ef2 <_printf_float+0x1a2>
 8007f1c:	1c4b      	adds	r3, r1, #1
 8007f1e:	e7e7      	b.n	8007ef0 <_printf_float+0x1a0>
 8007f20:	2900      	cmp	r1, #0
 8007f22:	bfd4      	ite	le
 8007f24:	f1c1 0202 	rsble	r2, r1, #2
 8007f28:	2201      	movgt	r2, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	e7e0      	b.n	8007ef0 <_printf_float+0x1a0>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	055a      	lsls	r2, r3, #21
 8007f32:	d407      	bmi.n	8007f44 <_printf_float+0x1f4>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	4642      	mov	r2, r8
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	47b8      	blx	r7
 8007f3e:	3001      	adds	r0, #1
 8007f40:	d12c      	bne.n	8007f9c <_printf_float+0x24c>
 8007f42:	e764      	b.n	8007e0e <_printf_float+0xbe>
 8007f44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f48:	f240 80e0 	bls.w	800810c <_printf_float+0x3bc>
 8007f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	f7f8 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d034      	beq.n	8007fc6 <_printf_float+0x276>
 8007f5c:	4a37      	ldr	r2, [pc, #220]	; (800803c <_printf_float+0x2ec>)
 8007f5e:	2301      	movs	r3, #1
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f af51 	beq.w	8007e0e <_printf_float+0xbe>
 8007f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f70:	429a      	cmp	r2, r3
 8007f72:	db02      	blt.n	8007f7a <_printf_float+0x22a>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	07d8      	lsls	r0, r3, #31
 8007f78:	d510      	bpl.n	8007f9c <_printf_float+0x24c>
 8007f7a:	ee18 3a10 	vmov	r3, s16
 8007f7e:	4652      	mov	r2, sl
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	f43f af41 	beq.w	8007e0e <_printf_float+0xbe>
 8007f8c:	f04f 0800 	mov.w	r8, #0
 8007f90:	f104 091a 	add.w	r9, r4, #26
 8007f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f96:	3b01      	subs	r3, #1
 8007f98:	4543      	cmp	r3, r8
 8007f9a:	dc09      	bgt.n	8007fb0 <_printf_float+0x260>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	079b      	lsls	r3, r3, #30
 8007fa0:	f100 8107 	bmi.w	80081b2 <_printf_float+0x462>
 8007fa4:	68e0      	ldr	r0, [r4, #12]
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa8:	4298      	cmp	r0, r3
 8007faa:	bfb8      	it	lt
 8007fac:	4618      	movlt	r0, r3
 8007fae:	e730      	b.n	8007e12 <_printf_float+0xc2>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	464a      	mov	r2, r9
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f43f af27 	beq.w	8007e0e <_printf_float+0xbe>
 8007fc0:	f108 0801 	add.w	r8, r8, #1
 8007fc4:	e7e6      	b.n	8007f94 <_printf_float+0x244>
 8007fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	dc39      	bgt.n	8008040 <_printf_float+0x2f0>
 8007fcc:	4a1b      	ldr	r2, [pc, #108]	; (800803c <_printf_float+0x2ec>)
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af19 	beq.w	8007e0e <_printf_float+0xbe>
 8007fdc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	d102      	bne.n	8007fea <_printf_float+0x29a>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	07d9      	lsls	r1, r3, #31
 8007fe8:	d5d8      	bpl.n	8007f9c <_printf_float+0x24c>
 8007fea:	ee18 3a10 	vmov	r3, s16
 8007fee:	4652      	mov	r2, sl
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af09 	beq.w	8007e0e <_printf_float+0xbe>
 8007ffc:	f04f 0900 	mov.w	r9, #0
 8008000:	f104 0a1a 	add.w	sl, r4, #26
 8008004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008006:	425b      	negs	r3, r3
 8008008:	454b      	cmp	r3, r9
 800800a:	dc01      	bgt.n	8008010 <_printf_float+0x2c0>
 800800c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800e:	e792      	b.n	8007f36 <_printf_float+0x1e6>
 8008010:	2301      	movs	r3, #1
 8008012:	4652      	mov	r2, sl
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f aef7 	beq.w	8007e0e <_printf_float+0xbe>
 8008020:	f109 0901 	add.w	r9, r9, #1
 8008024:	e7ee      	b.n	8008004 <_printf_float+0x2b4>
 8008026:	bf00      	nop
 8008028:	7fefffff 	.word	0x7fefffff
 800802c:	0800c8c9 	.word	0x0800c8c9
 8008030:	0800c8cd 	.word	0x0800c8cd
 8008034:	0800c8d1 	.word	0x0800c8d1
 8008038:	0800c8d5 	.word	0x0800c8d5
 800803c:	0800c8d9 	.word	0x0800c8d9
 8008040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008044:	429a      	cmp	r2, r3
 8008046:	bfa8      	it	ge
 8008048:	461a      	movge	r2, r3
 800804a:	2a00      	cmp	r2, #0
 800804c:	4691      	mov	r9, r2
 800804e:	dc37      	bgt.n	80080c0 <_printf_float+0x370>
 8008050:	f04f 0b00 	mov.w	fp, #0
 8008054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008058:	f104 021a 	add.w	r2, r4, #26
 800805c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800805e:	9305      	str	r3, [sp, #20]
 8008060:	eba3 0309 	sub.w	r3, r3, r9
 8008064:	455b      	cmp	r3, fp
 8008066:	dc33      	bgt.n	80080d0 <_printf_float+0x380>
 8008068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800806c:	429a      	cmp	r2, r3
 800806e:	db3b      	blt.n	80080e8 <_printf_float+0x398>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	07da      	lsls	r2, r3, #31
 8008074:	d438      	bmi.n	80080e8 <_printf_float+0x398>
 8008076:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800807a:	eba2 0903 	sub.w	r9, r2, r3
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	1ad2      	subs	r2, r2, r3
 8008082:	4591      	cmp	r9, r2
 8008084:	bfa8      	it	ge
 8008086:	4691      	movge	r9, r2
 8008088:	f1b9 0f00 	cmp.w	r9, #0
 800808c:	dc35      	bgt.n	80080fa <_printf_float+0x3aa>
 800808e:	f04f 0800 	mov.w	r8, #0
 8008092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008096:	f104 0a1a 	add.w	sl, r4, #26
 800809a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	eba3 0309 	sub.w	r3, r3, r9
 80080a4:	4543      	cmp	r3, r8
 80080a6:	f77f af79 	ble.w	8007f9c <_printf_float+0x24c>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4652      	mov	r2, sl
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f aeaa 	beq.w	8007e0e <_printf_float+0xbe>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	e7ec      	b.n	800809a <_printf_float+0x34a>
 80080c0:	4613      	mov	r3, r2
 80080c2:	4631      	mov	r1, r6
 80080c4:	4642      	mov	r2, r8
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	d1c0      	bne.n	8008050 <_printf_float+0x300>
 80080ce:	e69e      	b.n	8007e0e <_printf_float+0xbe>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	9205      	str	r2, [sp, #20]
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	f43f ae97 	beq.w	8007e0e <_printf_float+0xbe>
 80080e0:	9a05      	ldr	r2, [sp, #20]
 80080e2:	f10b 0b01 	add.w	fp, fp, #1
 80080e6:	e7b9      	b.n	800805c <_printf_float+0x30c>
 80080e8:	ee18 3a10 	vmov	r3, s16
 80080ec:	4652      	mov	r2, sl
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	d1be      	bne.n	8008076 <_printf_float+0x326>
 80080f8:	e689      	b.n	8007e0e <_printf_float+0xbe>
 80080fa:	9a05      	ldr	r2, [sp, #20]
 80080fc:	464b      	mov	r3, r9
 80080fe:	4442      	add	r2, r8
 8008100:	4631      	mov	r1, r6
 8008102:	4628      	mov	r0, r5
 8008104:	47b8      	blx	r7
 8008106:	3001      	adds	r0, #1
 8008108:	d1c1      	bne.n	800808e <_printf_float+0x33e>
 800810a:	e680      	b.n	8007e0e <_printf_float+0xbe>
 800810c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810e:	2a01      	cmp	r2, #1
 8008110:	dc01      	bgt.n	8008116 <_printf_float+0x3c6>
 8008112:	07db      	lsls	r3, r3, #31
 8008114:	d53a      	bpl.n	800818c <_printf_float+0x43c>
 8008116:	2301      	movs	r3, #1
 8008118:	4642      	mov	r2, r8
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	f43f ae74 	beq.w	8007e0e <_printf_float+0xbe>
 8008126:	ee18 3a10 	vmov	r3, s16
 800812a:	4652      	mov	r2, sl
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f ae6b 	beq.w	8007e0e <_printf_float+0xbe>
 8008138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800813c:	2200      	movs	r2, #0
 800813e:	2300      	movs	r3, #0
 8008140:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008144:	f7f8 fcc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008148:	b9d8      	cbnz	r0, 8008182 <_printf_float+0x432>
 800814a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800814e:	f108 0201 	add.w	r2, r8, #1
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	d10e      	bne.n	800817a <_printf_float+0x42a>
 800815c:	e657      	b.n	8007e0e <_printf_float+0xbe>
 800815e:	2301      	movs	r3, #1
 8008160:	4652      	mov	r2, sl
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	f43f ae50 	beq.w	8007e0e <_printf_float+0xbe>
 800816e:	f108 0801 	add.w	r8, r8, #1
 8008172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008174:	3b01      	subs	r3, #1
 8008176:	4543      	cmp	r3, r8
 8008178:	dcf1      	bgt.n	800815e <_printf_float+0x40e>
 800817a:	464b      	mov	r3, r9
 800817c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008180:	e6da      	b.n	8007f38 <_printf_float+0x1e8>
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	f104 0a1a 	add.w	sl, r4, #26
 800818a:	e7f2      	b.n	8008172 <_printf_float+0x422>
 800818c:	2301      	movs	r3, #1
 800818e:	4642      	mov	r2, r8
 8008190:	e7df      	b.n	8008152 <_printf_float+0x402>
 8008192:	2301      	movs	r3, #1
 8008194:	464a      	mov	r2, r9
 8008196:	4631      	mov	r1, r6
 8008198:	4628      	mov	r0, r5
 800819a:	47b8      	blx	r7
 800819c:	3001      	adds	r0, #1
 800819e:	f43f ae36 	beq.w	8007e0e <_printf_float+0xbe>
 80081a2:	f108 0801 	add.w	r8, r8, #1
 80081a6:	68e3      	ldr	r3, [r4, #12]
 80081a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081aa:	1a5b      	subs	r3, r3, r1
 80081ac:	4543      	cmp	r3, r8
 80081ae:	dcf0      	bgt.n	8008192 <_printf_float+0x442>
 80081b0:	e6f8      	b.n	8007fa4 <_printf_float+0x254>
 80081b2:	f04f 0800 	mov.w	r8, #0
 80081b6:	f104 0919 	add.w	r9, r4, #25
 80081ba:	e7f4      	b.n	80081a6 <_printf_float+0x456>

080081bc <_printf_common>:
 80081bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c0:	4616      	mov	r6, r2
 80081c2:	4699      	mov	r9, r3
 80081c4:	688a      	ldr	r2, [r1, #8]
 80081c6:	690b      	ldr	r3, [r1, #16]
 80081c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081cc:	4293      	cmp	r3, r2
 80081ce:	bfb8      	it	lt
 80081d0:	4613      	movlt	r3, r2
 80081d2:	6033      	str	r3, [r6, #0]
 80081d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081d8:	4607      	mov	r7, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	b10a      	cbz	r2, 80081e2 <_printf_common+0x26>
 80081de:	3301      	adds	r3, #1
 80081e0:	6033      	str	r3, [r6, #0]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	0699      	lsls	r1, r3, #26
 80081e6:	bf42      	ittt	mi
 80081e8:	6833      	ldrmi	r3, [r6, #0]
 80081ea:	3302      	addmi	r3, #2
 80081ec:	6033      	strmi	r3, [r6, #0]
 80081ee:	6825      	ldr	r5, [r4, #0]
 80081f0:	f015 0506 	ands.w	r5, r5, #6
 80081f4:	d106      	bne.n	8008204 <_printf_common+0x48>
 80081f6:	f104 0a19 	add.w	sl, r4, #25
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	6832      	ldr	r2, [r6, #0]
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	42ab      	cmp	r3, r5
 8008202:	dc26      	bgt.n	8008252 <_printf_common+0x96>
 8008204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008208:	1e13      	subs	r3, r2, #0
 800820a:	6822      	ldr	r2, [r4, #0]
 800820c:	bf18      	it	ne
 800820e:	2301      	movne	r3, #1
 8008210:	0692      	lsls	r2, r2, #26
 8008212:	d42b      	bmi.n	800826c <_printf_common+0xb0>
 8008214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008218:	4649      	mov	r1, r9
 800821a:	4638      	mov	r0, r7
 800821c:	47c0      	blx	r8
 800821e:	3001      	adds	r0, #1
 8008220:	d01e      	beq.n	8008260 <_printf_common+0xa4>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	6922      	ldr	r2, [r4, #16]
 8008226:	f003 0306 	and.w	r3, r3, #6
 800822a:	2b04      	cmp	r3, #4
 800822c:	bf02      	ittt	eq
 800822e:	68e5      	ldreq	r5, [r4, #12]
 8008230:	6833      	ldreq	r3, [r6, #0]
 8008232:	1aed      	subeq	r5, r5, r3
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	bf0c      	ite	eq
 8008238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800823c:	2500      	movne	r5, #0
 800823e:	4293      	cmp	r3, r2
 8008240:	bfc4      	itt	gt
 8008242:	1a9b      	subgt	r3, r3, r2
 8008244:	18ed      	addgt	r5, r5, r3
 8008246:	2600      	movs	r6, #0
 8008248:	341a      	adds	r4, #26
 800824a:	42b5      	cmp	r5, r6
 800824c:	d11a      	bne.n	8008284 <_printf_common+0xc8>
 800824e:	2000      	movs	r0, #0
 8008250:	e008      	b.n	8008264 <_printf_common+0xa8>
 8008252:	2301      	movs	r3, #1
 8008254:	4652      	mov	r2, sl
 8008256:	4649      	mov	r1, r9
 8008258:	4638      	mov	r0, r7
 800825a:	47c0      	blx	r8
 800825c:	3001      	adds	r0, #1
 800825e:	d103      	bne.n	8008268 <_printf_common+0xac>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008268:	3501      	adds	r5, #1
 800826a:	e7c6      	b.n	80081fa <_printf_common+0x3e>
 800826c:	18e1      	adds	r1, r4, r3
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	2030      	movs	r0, #48	; 0x30
 8008272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008276:	4422      	add	r2, r4
 8008278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800827c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008280:	3302      	adds	r3, #2
 8008282:	e7c7      	b.n	8008214 <_printf_common+0x58>
 8008284:	2301      	movs	r3, #1
 8008286:	4622      	mov	r2, r4
 8008288:	4649      	mov	r1, r9
 800828a:	4638      	mov	r0, r7
 800828c:	47c0      	blx	r8
 800828e:	3001      	adds	r0, #1
 8008290:	d0e6      	beq.n	8008260 <_printf_common+0xa4>
 8008292:	3601      	adds	r6, #1
 8008294:	e7d9      	b.n	800824a <_printf_common+0x8e>
	...

08008298 <_printf_i>:
 8008298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800829c:	7e0f      	ldrb	r7, [r1, #24]
 800829e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082a0:	2f78      	cmp	r7, #120	; 0x78
 80082a2:	4691      	mov	r9, r2
 80082a4:	4680      	mov	r8, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	469a      	mov	sl, r3
 80082aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ae:	d807      	bhi.n	80082c0 <_printf_i+0x28>
 80082b0:	2f62      	cmp	r7, #98	; 0x62
 80082b2:	d80a      	bhi.n	80082ca <_printf_i+0x32>
 80082b4:	2f00      	cmp	r7, #0
 80082b6:	f000 80d4 	beq.w	8008462 <_printf_i+0x1ca>
 80082ba:	2f58      	cmp	r7, #88	; 0x58
 80082bc:	f000 80c0 	beq.w	8008440 <_printf_i+0x1a8>
 80082c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082c8:	e03a      	b.n	8008340 <_printf_i+0xa8>
 80082ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082ce:	2b15      	cmp	r3, #21
 80082d0:	d8f6      	bhi.n	80082c0 <_printf_i+0x28>
 80082d2:	a101      	add	r1, pc, #4	; (adr r1, 80082d8 <_printf_i+0x40>)
 80082d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d8:	08008331 	.word	0x08008331
 80082dc:	08008345 	.word	0x08008345
 80082e0:	080082c1 	.word	0x080082c1
 80082e4:	080082c1 	.word	0x080082c1
 80082e8:	080082c1 	.word	0x080082c1
 80082ec:	080082c1 	.word	0x080082c1
 80082f0:	08008345 	.word	0x08008345
 80082f4:	080082c1 	.word	0x080082c1
 80082f8:	080082c1 	.word	0x080082c1
 80082fc:	080082c1 	.word	0x080082c1
 8008300:	080082c1 	.word	0x080082c1
 8008304:	08008449 	.word	0x08008449
 8008308:	08008371 	.word	0x08008371
 800830c:	08008403 	.word	0x08008403
 8008310:	080082c1 	.word	0x080082c1
 8008314:	080082c1 	.word	0x080082c1
 8008318:	0800846b 	.word	0x0800846b
 800831c:	080082c1 	.word	0x080082c1
 8008320:	08008371 	.word	0x08008371
 8008324:	080082c1 	.word	0x080082c1
 8008328:	080082c1 	.word	0x080082c1
 800832c:	0800840b 	.word	0x0800840b
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	1d1a      	adds	r2, r3, #4
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	602a      	str	r2, [r5, #0]
 8008338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800833c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008340:	2301      	movs	r3, #1
 8008342:	e09f      	b.n	8008484 <_printf_i+0x1ec>
 8008344:	6820      	ldr	r0, [r4, #0]
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	0607      	lsls	r7, r0, #24
 800834a:	f103 0104 	add.w	r1, r3, #4
 800834e:	6029      	str	r1, [r5, #0]
 8008350:	d501      	bpl.n	8008356 <_printf_i+0xbe>
 8008352:	681e      	ldr	r6, [r3, #0]
 8008354:	e003      	b.n	800835e <_printf_i+0xc6>
 8008356:	0646      	lsls	r6, r0, #25
 8008358:	d5fb      	bpl.n	8008352 <_printf_i+0xba>
 800835a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800835e:	2e00      	cmp	r6, #0
 8008360:	da03      	bge.n	800836a <_printf_i+0xd2>
 8008362:	232d      	movs	r3, #45	; 0x2d
 8008364:	4276      	negs	r6, r6
 8008366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836a:	485a      	ldr	r0, [pc, #360]	; (80084d4 <_printf_i+0x23c>)
 800836c:	230a      	movs	r3, #10
 800836e:	e012      	b.n	8008396 <_printf_i+0xfe>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	6820      	ldr	r0, [r4, #0]
 8008374:	1d19      	adds	r1, r3, #4
 8008376:	6029      	str	r1, [r5, #0]
 8008378:	0605      	lsls	r5, r0, #24
 800837a:	d501      	bpl.n	8008380 <_printf_i+0xe8>
 800837c:	681e      	ldr	r6, [r3, #0]
 800837e:	e002      	b.n	8008386 <_printf_i+0xee>
 8008380:	0641      	lsls	r1, r0, #25
 8008382:	d5fb      	bpl.n	800837c <_printf_i+0xe4>
 8008384:	881e      	ldrh	r6, [r3, #0]
 8008386:	4853      	ldr	r0, [pc, #332]	; (80084d4 <_printf_i+0x23c>)
 8008388:	2f6f      	cmp	r7, #111	; 0x6f
 800838a:	bf0c      	ite	eq
 800838c:	2308      	moveq	r3, #8
 800838e:	230a      	movne	r3, #10
 8008390:	2100      	movs	r1, #0
 8008392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008396:	6865      	ldr	r5, [r4, #4]
 8008398:	60a5      	str	r5, [r4, #8]
 800839a:	2d00      	cmp	r5, #0
 800839c:	bfa2      	ittt	ge
 800839e:	6821      	ldrge	r1, [r4, #0]
 80083a0:	f021 0104 	bicge.w	r1, r1, #4
 80083a4:	6021      	strge	r1, [r4, #0]
 80083a6:	b90e      	cbnz	r6, 80083ac <_printf_i+0x114>
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	d04b      	beq.n	8008444 <_printf_i+0x1ac>
 80083ac:	4615      	mov	r5, r2
 80083ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80083b2:	fb03 6711 	mls	r7, r3, r1, r6
 80083b6:	5dc7      	ldrb	r7, [r0, r7]
 80083b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083bc:	4637      	mov	r7, r6
 80083be:	42bb      	cmp	r3, r7
 80083c0:	460e      	mov	r6, r1
 80083c2:	d9f4      	bls.n	80083ae <_printf_i+0x116>
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d10b      	bne.n	80083e0 <_printf_i+0x148>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	07de      	lsls	r6, r3, #31
 80083cc:	d508      	bpl.n	80083e0 <_printf_i+0x148>
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	6861      	ldr	r1, [r4, #4]
 80083d2:	4299      	cmp	r1, r3
 80083d4:	bfde      	ittt	le
 80083d6:	2330      	movle	r3, #48	; 0x30
 80083d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083e0:	1b52      	subs	r2, r2, r5
 80083e2:	6122      	str	r2, [r4, #16]
 80083e4:	f8cd a000 	str.w	sl, [sp]
 80083e8:	464b      	mov	r3, r9
 80083ea:	aa03      	add	r2, sp, #12
 80083ec:	4621      	mov	r1, r4
 80083ee:	4640      	mov	r0, r8
 80083f0:	f7ff fee4 	bl	80081bc <_printf_common>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d14a      	bne.n	800848e <_printf_i+0x1f6>
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	b004      	add	sp, #16
 80083fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	f043 0320 	orr.w	r3, r3, #32
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	4833      	ldr	r0, [pc, #204]	; (80084d8 <_printf_i+0x240>)
 800840c:	2778      	movs	r7, #120	; 0x78
 800840e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	6829      	ldr	r1, [r5, #0]
 8008416:	061f      	lsls	r7, r3, #24
 8008418:	f851 6b04 	ldr.w	r6, [r1], #4
 800841c:	d402      	bmi.n	8008424 <_printf_i+0x18c>
 800841e:	065f      	lsls	r7, r3, #25
 8008420:	bf48      	it	mi
 8008422:	b2b6      	uxthmi	r6, r6
 8008424:	07df      	lsls	r7, r3, #31
 8008426:	bf48      	it	mi
 8008428:	f043 0320 	orrmi.w	r3, r3, #32
 800842c:	6029      	str	r1, [r5, #0]
 800842e:	bf48      	it	mi
 8008430:	6023      	strmi	r3, [r4, #0]
 8008432:	b91e      	cbnz	r6, 800843c <_printf_i+0x1a4>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	f023 0320 	bic.w	r3, r3, #32
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	2310      	movs	r3, #16
 800843e:	e7a7      	b.n	8008390 <_printf_i+0xf8>
 8008440:	4824      	ldr	r0, [pc, #144]	; (80084d4 <_printf_i+0x23c>)
 8008442:	e7e4      	b.n	800840e <_printf_i+0x176>
 8008444:	4615      	mov	r5, r2
 8008446:	e7bd      	b.n	80083c4 <_printf_i+0x12c>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	6826      	ldr	r6, [r4, #0]
 800844c:	6961      	ldr	r1, [r4, #20]
 800844e:	1d18      	adds	r0, r3, #4
 8008450:	6028      	str	r0, [r5, #0]
 8008452:	0635      	lsls	r5, r6, #24
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	d501      	bpl.n	800845c <_printf_i+0x1c4>
 8008458:	6019      	str	r1, [r3, #0]
 800845a:	e002      	b.n	8008462 <_printf_i+0x1ca>
 800845c:	0670      	lsls	r0, r6, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0x1c0>
 8008460:	8019      	strh	r1, [r3, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	6123      	str	r3, [r4, #16]
 8008466:	4615      	mov	r5, r2
 8008468:	e7bc      	b.n	80083e4 <_printf_i+0x14c>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	1d1a      	adds	r2, r3, #4
 800846e:	602a      	str	r2, [r5, #0]
 8008470:	681d      	ldr	r5, [r3, #0]
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	2100      	movs	r1, #0
 8008476:	4628      	mov	r0, r5
 8008478:	f7f7 feaa 	bl	80001d0 <memchr>
 800847c:	b108      	cbz	r0, 8008482 <_printf_i+0x1ea>
 800847e:	1b40      	subs	r0, r0, r5
 8008480:	6060      	str	r0, [r4, #4]
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	6123      	str	r3, [r4, #16]
 8008486:	2300      	movs	r3, #0
 8008488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848c:	e7aa      	b.n	80083e4 <_printf_i+0x14c>
 800848e:	6923      	ldr	r3, [r4, #16]
 8008490:	462a      	mov	r2, r5
 8008492:	4649      	mov	r1, r9
 8008494:	4640      	mov	r0, r8
 8008496:	47d0      	blx	sl
 8008498:	3001      	adds	r0, #1
 800849a:	d0ad      	beq.n	80083f8 <_printf_i+0x160>
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	079b      	lsls	r3, r3, #30
 80084a0:	d413      	bmi.n	80084ca <_printf_i+0x232>
 80084a2:	68e0      	ldr	r0, [r4, #12]
 80084a4:	9b03      	ldr	r3, [sp, #12]
 80084a6:	4298      	cmp	r0, r3
 80084a8:	bfb8      	it	lt
 80084aa:	4618      	movlt	r0, r3
 80084ac:	e7a6      	b.n	80083fc <_printf_i+0x164>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4632      	mov	r2, r6
 80084b2:	4649      	mov	r1, r9
 80084b4:	4640      	mov	r0, r8
 80084b6:	47d0      	blx	sl
 80084b8:	3001      	adds	r0, #1
 80084ba:	d09d      	beq.n	80083f8 <_printf_i+0x160>
 80084bc:	3501      	adds	r5, #1
 80084be:	68e3      	ldr	r3, [r4, #12]
 80084c0:	9903      	ldr	r1, [sp, #12]
 80084c2:	1a5b      	subs	r3, r3, r1
 80084c4:	42ab      	cmp	r3, r5
 80084c6:	dcf2      	bgt.n	80084ae <_printf_i+0x216>
 80084c8:	e7eb      	b.n	80084a2 <_printf_i+0x20a>
 80084ca:	2500      	movs	r5, #0
 80084cc:	f104 0619 	add.w	r6, r4, #25
 80084d0:	e7f5      	b.n	80084be <_printf_i+0x226>
 80084d2:	bf00      	nop
 80084d4:	0800c8db 	.word	0x0800c8db
 80084d8:	0800c8ec 	.word	0x0800c8ec

080084dc <_scanf_float>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	b087      	sub	sp, #28
 80084e2:	4617      	mov	r7, r2
 80084e4:	9303      	str	r3, [sp, #12]
 80084e6:	688b      	ldr	r3, [r1, #8]
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80084ee:	bf83      	ittte	hi
 80084f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084f4:	195b      	addhi	r3, r3, r5
 80084f6:	9302      	strhi	r3, [sp, #8]
 80084f8:	2300      	movls	r3, #0
 80084fa:	bf86      	itte	hi
 80084fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008500:	608b      	strhi	r3, [r1, #8]
 8008502:	9302      	strls	r3, [sp, #8]
 8008504:	680b      	ldr	r3, [r1, #0]
 8008506:	468b      	mov	fp, r1
 8008508:	2500      	movs	r5, #0
 800850a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800850e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008512:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008516:	4680      	mov	r8, r0
 8008518:	460c      	mov	r4, r1
 800851a:	465e      	mov	r6, fp
 800851c:	46aa      	mov	sl, r5
 800851e:	46a9      	mov	r9, r5
 8008520:	9501      	str	r5, [sp, #4]
 8008522:	68a2      	ldr	r2, [r4, #8]
 8008524:	b152      	cbz	r2, 800853c <_scanf_float+0x60>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b4e      	cmp	r3, #78	; 0x4e
 800852c:	d864      	bhi.n	80085f8 <_scanf_float+0x11c>
 800852e:	2b40      	cmp	r3, #64	; 0x40
 8008530:	d83c      	bhi.n	80085ac <_scanf_float+0xd0>
 8008532:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008536:	b2c8      	uxtb	r0, r1
 8008538:	280e      	cmp	r0, #14
 800853a:	d93a      	bls.n	80085b2 <_scanf_float+0xd6>
 800853c:	f1b9 0f00 	cmp.w	r9, #0
 8008540:	d003      	beq.n	800854a <_scanf_float+0x6e>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800854e:	f1ba 0f01 	cmp.w	sl, #1
 8008552:	f200 8113 	bhi.w	800877c <_scanf_float+0x2a0>
 8008556:	455e      	cmp	r6, fp
 8008558:	f200 8105 	bhi.w	8008766 <_scanf_float+0x28a>
 800855c:	2501      	movs	r5, #1
 800855e:	4628      	mov	r0, r5
 8008560:	b007      	add	sp, #28
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008566:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800856a:	2a0d      	cmp	r2, #13
 800856c:	d8e6      	bhi.n	800853c <_scanf_float+0x60>
 800856e:	a101      	add	r1, pc, #4	; (adr r1, 8008574 <_scanf_float+0x98>)
 8008570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008574:	080086b3 	.word	0x080086b3
 8008578:	0800853d 	.word	0x0800853d
 800857c:	0800853d 	.word	0x0800853d
 8008580:	0800853d 	.word	0x0800853d
 8008584:	08008713 	.word	0x08008713
 8008588:	080086eb 	.word	0x080086eb
 800858c:	0800853d 	.word	0x0800853d
 8008590:	0800853d 	.word	0x0800853d
 8008594:	080086c1 	.word	0x080086c1
 8008598:	0800853d 	.word	0x0800853d
 800859c:	0800853d 	.word	0x0800853d
 80085a0:	0800853d 	.word	0x0800853d
 80085a4:	0800853d 	.word	0x0800853d
 80085a8:	08008679 	.word	0x08008679
 80085ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80085b0:	e7db      	b.n	800856a <_scanf_float+0x8e>
 80085b2:	290e      	cmp	r1, #14
 80085b4:	d8c2      	bhi.n	800853c <_scanf_float+0x60>
 80085b6:	a001      	add	r0, pc, #4	; (adr r0, 80085bc <_scanf_float+0xe0>)
 80085b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085bc:	0800866b 	.word	0x0800866b
 80085c0:	0800853d 	.word	0x0800853d
 80085c4:	0800866b 	.word	0x0800866b
 80085c8:	080086ff 	.word	0x080086ff
 80085cc:	0800853d 	.word	0x0800853d
 80085d0:	08008619 	.word	0x08008619
 80085d4:	08008655 	.word	0x08008655
 80085d8:	08008655 	.word	0x08008655
 80085dc:	08008655 	.word	0x08008655
 80085e0:	08008655 	.word	0x08008655
 80085e4:	08008655 	.word	0x08008655
 80085e8:	08008655 	.word	0x08008655
 80085ec:	08008655 	.word	0x08008655
 80085f0:	08008655 	.word	0x08008655
 80085f4:	08008655 	.word	0x08008655
 80085f8:	2b6e      	cmp	r3, #110	; 0x6e
 80085fa:	d809      	bhi.n	8008610 <_scanf_float+0x134>
 80085fc:	2b60      	cmp	r3, #96	; 0x60
 80085fe:	d8b2      	bhi.n	8008566 <_scanf_float+0x8a>
 8008600:	2b54      	cmp	r3, #84	; 0x54
 8008602:	d077      	beq.n	80086f4 <_scanf_float+0x218>
 8008604:	2b59      	cmp	r3, #89	; 0x59
 8008606:	d199      	bne.n	800853c <_scanf_float+0x60>
 8008608:	2d07      	cmp	r5, #7
 800860a:	d197      	bne.n	800853c <_scanf_float+0x60>
 800860c:	2508      	movs	r5, #8
 800860e:	e029      	b.n	8008664 <_scanf_float+0x188>
 8008610:	2b74      	cmp	r3, #116	; 0x74
 8008612:	d06f      	beq.n	80086f4 <_scanf_float+0x218>
 8008614:	2b79      	cmp	r3, #121	; 0x79
 8008616:	e7f6      	b.n	8008606 <_scanf_float+0x12a>
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	05c8      	lsls	r0, r1, #23
 800861c:	d51a      	bpl.n	8008654 <_scanf_float+0x178>
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008624:	6021      	str	r1, [r4, #0]
 8008626:	f109 0901 	add.w	r9, r9, #1
 800862a:	b11b      	cbz	r3, 8008634 <_scanf_float+0x158>
 800862c:	3b01      	subs	r3, #1
 800862e:	3201      	adds	r2, #1
 8008630:	9302      	str	r3, [sp, #8]
 8008632:	60a2      	str	r2, [r4, #8]
 8008634:	68a3      	ldr	r3, [r4, #8]
 8008636:	3b01      	subs	r3, #1
 8008638:	60a3      	str	r3, [r4, #8]
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	3301      	adds	r3, #1
 800863e:	6123      	str	r3, [r4, #16]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3b01      	subs	r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	607b      	str	r3, [r7, #4]
 8008648:	f340 8084 	ble.w	8008754 <_scanf_float+0x278>
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	603b      	str	r3, [r7, #0]
 8008652:	e766      	b.n	8008522 <_scanf_float+0x46>
 8008654:	eb1a 0f05 	cmn.w	sl, r5
 8008658:	f47f af70 	bne.w	800853c <_scanf_float+0x60>
 800865c:	6822      	ldr	r2, [r4, #0]
 800865e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008662:	6022      	str	r2, [r4, #0]
 8008664:	f806 3b01 	strb.w	r3, [r6], #1
 8008668:	e7e4      	b.n	8008634 <_scanf_float+0x158>
 800866a:	6822      	ldr	r2, [r4, #0]
 800866c:	0610      	lsls	r0, r2, #24
 800866e:	f57f af65 	bpl.w	800853c <_scanf_float+0x60>
 8008672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008676:	e7f4      	b.n	8008662 <_scanf_float+0x186>
 8008678:	f1ba 0f00 	cmp.w	sl, #0
 800867c:	d10e      	bne.n	800869c <_scanf_float+0x1c0>
 800867e:	f1b9 0f00 	cmp.w	r9, #0
 8008682:	d10e      	bne.n	80086a2 <_scanf_float+0x1c6>
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800868a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800868e:	d108      	bne.n	80086a2 <_scanf_float+0x1c6>
 8008690:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	f04f 0a01 	mov.w	sl, #1
 800869a:	e7e3      	b.n	8008664 <_scanf_float+0x188>
 800869c:	f1ba 0f02 	cmp.w	sl, #2
 80086a0:	d055      	beq.n	800874e <_scanf_float+0x272>
 80086a2:	2d01      	cmp	r5, #1
 80086a4:	d002      	beq.n	80086ac <_scanf_float+0x1d0>
 80086a6:	2d04      	cmp	r5, #4
 80086a8:	f47f af48 	bne.w	800853c <_scanf_float+0x60>
 80086ac:	3501      	adds	r5, #1
 80086ae:	b2ed      	uxtb	r5, r5
 80086b0:	e7d8      	b.n	8008664 <_scanf_float+0x188>
 80086b2:	f1ba 0f01 	cmp.w	sl, #1
 80086b6:	f47f af41 	bne.w	800853c <_scanf_float+0x60>
 80086ba:	f04f 0a02 	mov.w	sl, #2
 80086be:	e7d1      	b.n	8008664 <_scanf_float+0x188>
 80086c0:	b97d      	cbnz	r5, 80086e2 <_scanf_float+0x206>
 80086c2:	f1b9 0f00 	cmp.w	r9, #0
 80086c6:	f47f af3c 	bne.w	8008542 <_scanf_float+0x66>
 80086ca:	6822      	ldr	r2, [r4, #0]
 80086cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80086d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80086d4:	f47f af39 	bne.w	800854a <_scanf_float+0x6e>
 80086d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086dc:	6022      	str	r2, [r4, #0]
 80086de:	2501      	movs	r5, #1
 80086e0:	e7c0      	b.n	8008664 <_scanf_float+0x188>
 80086e2:	2d03      	cmp	r5, #3
 80086e4:	d0e2      	beq.n	80086ac <_scanf_float+0x1d0>
 80086e6:	2d05      	cmp	r5, #5
 80086e8:	e7de      	b.n	80086a8 <_scanf_float+0x1cc>
 80086ea:	2d02      	cmp	r5, #2
 80086ec:	f47f af26 	bne.w	800853c <_scanf_float+0x60>
 80086f0:	2503      	movs	r5, #3
 80086f2:	e7b7      	b.n	8008664 <_scanf_float+0x188>
 80086f4:	2d06      	cmp	r5, #6
 80086f6:	f47f af21 	bne.w	800853c <_scanf_float+0x60>
 80086fa:	2507      	movs	r5, #7
 80086fc:	e7b2      	b.n	8008664 <_scanf_float+0x188>
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	0591      	lsls	r1, r2, #22
 8008702:	f57f af1b 	bpl.w	800853c <_scanf_float+0x60>
 8008706:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008710:	e7a8      	b.n	8008664 <_scanf_float+0x188>
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008718:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800871c:	d006      	beq.n	800872c <_scanf_float+0x250>
 800871e:	0550      	lsls	r0, r2, #21
 8008720:	f57f af0c 	bpl.w	800853c <_scanf_float+0x60>
 8008724:	f1b9 0f00 	cmp.w	r9, #0
 8008728:	f43f af0f 	beq.w	800854a <_scanf_float+0x6e>
 800872c:	0591      	lsls	r1, r2, #22
 800872e:	bf58      	it	pl
 8008730:	9901      	ldrpl	r1, [sp, #4]
 8008732:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008736:	bf58      	it	pl
 8008738:	eba9 0101 	subpl.w	r1, r9, r1
 800873c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008740:	bf58      	it	pl
 8008742:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008746:	6022      	str	r2, [r4, #0]
 8008748:	f04f 0900 	mov.w	r9, #0
 800874c:	e78a      	b.n	8008664 <_scanf_float+0x188>
 800874e:	f04f 0a03 	mov.w	sl, #3
 8008752:	e787      	b.n	8008664 <_scanf_float+0x188>
 8008754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008758:	4639      	mov	r1, r7
 800875a:	4640      	mov	r0, r8
 800875c:	4798      	blx	r3
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f aedf 	beq.w	8008522 <_scanf_float+0x46>
 8008764:	e6ea      	b.n	800853c <_scanf_float+0x60>
 8008766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800876a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800876e:	463a      	mov	r2, r7
 8008770:	4640      	mov	r0, r8
 8008772:	4798      	blx	r3
 8008774:	6923      	ldr	r3, [r4, #16]
 8008776:	3b01      	subs	r3, #1
 8008778:	6123      	str	r3, [r4, #16]
 800877a:	e6ec      	b.n	8008556 <_scanf_float+0x7a>
 800877c:	1e6b      	subs	r3, r5, #1
 800877e:	2b06      	cmp	r3, #6
 8008780:	d825      	bhi.n	80087ce <_scanf_float+0x2f2>
 8008782:	2d02      	cmp	r5, #2
 8008784:	d836      	bhi.n	80087f4 <_scanf_float+0x318>
 8008786:	455e      	cmp	r6, fp
 8008788:	f67f aee8 	bls.w	800855c <_scanf_float+0x80>
 800878c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008790:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008794:	463a      	mov	r2, r7
 8008796:	4640      	mov	r0, r8
 8008798:	4798      	blx	r3
 800879a:	6923      	ldr	r3, [r4, #16]
 800879c:	3b01      	subs	r3, #1
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	e7f1      	b.n	8008786 <_scanf_float+0x2aa>
 80087a2:	9802      	ldr	r0, [sp, #8]
 80087a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80087ac:	9002      	str	r0, [sp, #8]
 80087ae:	463a      	mov	r2, r7
 80087b0:	4640      	mov	r0, r8
 80087b2:	4798      	blx	r3
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087be:	fa5f fa8a 	uxtb.w	sl, sl
 80087c2:	f1ba 0f02 	cmp.w	sl, #2
 80087c6:	d1ec      	bne.n	80087a2 <_scanf_float+0x2c6>
 80087c8:	3d03      	subs	r5, #3
 80087ca:	b2ed      	uxtb	r5, r5
 80087cc:	1b76      	subs	r6, r6, r5
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	05da      	lsls	r2, r3, #23
 80087d2:	d52f      	bpl.n	8008834 <_scanf_float+0x358>
 80087d4:	055b      	lsls	r3, r3, #21
 80087d6:	d510      	bpl.n	80087fa <_scanf_float+0x31e>
 80087d8:	455e      	cmp	r6, fp
 80087da:	f67f aebf 	bls.w	800855c <_scanf_float+0x80>
 80087de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087e6:	463a      	mov	r2, r7
 80087e8:	4640      	mov	r0, r8
 80087ea:	4798      	blx	r3
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	e7f1      	b.n	80087d8 <_scanf_float+0x2fc>
 80087f4:	46aa      	mov	sl, r5
 80087f6:	9602      	str	r6, [sp, #8]
 80087f8:	e7df      	b.n	80087ba <_scanf_float+0x2de>
 80087fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	2965      	cmp	r1, #101	; 0x65
 8008802:	f103 33ff 	add.w	r3, r3, #4294967295
 8008806:	f106 35ff 	add.w	r5, r6, #4294967295
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	d00c      	beq.n	8008828 <_scanf_float+0x34c>
 800880e:	2945      	cmp	r1, #69	; 0x45
 8008810:	d00a      	beq.n	8008828 <_scanf_float+0x34c>
 8008812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008816:	463a      	mov	r2, r7
 8008818:	4640      	mov	r0, r8
 800881a:	4798      	blx	r3
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008822:	3b01      	subs	r3, #1
 8008824:	1eb5      	subs	r5, r6, #2
 8008826:	6123      	str	r3, [r4, #16]
 8008828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800882c:	463a      	mov	r2, r7
 800882e:	4640      	mov	r0, r8
 8008830:	4798      	blx	r3
 8008832:	462e      	mov	r6, r5
 8008834:	6825      	ldr	r5, [r4, #0]
 8008836:	f015 0510 	ands.w	r5, r5, #16
 800883a:	d158      	bne.n	80088ee <_scanf_float+0x412>
 800883c:	7035      	strb	r5, [r6, #0]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008848:	d11c      	bne.n	8008884 <_scanf_float+0x3a8>
 800884a:	9b01      	ldr	r3, [sp, #4]
 800884c:	454b      	cmp	r3, r9
 800884e:	eba3 0209 	sub.w	r2, r3, r9
 8008852:	d124      	bne.n	800889e <_scanf_float+0x3c2>
 8008854:	2200      	movs	r2, #0
 8008856:	4659      	mov	r1, fp
 8008858:	4640      	mov	r0, r8
 800885a:	f7ff f8bd 	bl	80079d8 <_strtod_r>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	6821      	ldr	r1, [r4, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f011 0f02 	tst.w	r1, #2
 8008868:	ec57 6b10 	vmov	r6, r7, d0
 800886c:	f103 0204 	add.w	r2, r3, #4
 8008870:	d020      	beq.n	80088b4 <_scanf_float+0x3d8>
 8008872:	9903      	ldr	r1, [sp, #12]
 8008874:	600a      	str	r2, [r1, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	e9c3 6700 	strd	r6, r7, [r3]
 800887c:	68e3      	ldr	r3, [r4, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60e3      	str	r3, [r4, #12]
 8008882:	e66c      	b.n	800855e <_scanf_float+0x82>
 8008884:	9b04      	ldr	r3, [sp, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0e4      	beq.n	8008854 <_scanf_float+0x378>
 800888a:	9905      	ldr	r1, [sp, #20]
 800888c:	230a      	movs	r3, #10
 800888e:	462a      	mov	r2, r5
 8008890:	3101      	adds	r1, #1
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff f934 	bl	8007b00 <_strtol_r>
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	9e05      	ldr	r6, [sp, #20]
 800889c:	1ac2      	subs	r2, r0, r3
 800889e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088a2:	429e      	cmp	r6, r3
 80088a4:	bf28      	it	cs
 80088a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80088aa:	4912      	ldr	r1, [pc, #72]	; (80088f4 <_scanf_float+0x418>)
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 f989 	bl	8008bc4 <siprintf>
 80088b2:	e7cf      	b.n	8008854 <_scanf_float+0x378>
 80088b4:	f011 0f04 	tst.w	r1, #4
 80088b8:	9903      	ldr	r1, [sp, #12]
 80088ba:	600a      	str	r2, [r1, #0]
 80088bc:	d1db      	bne.n	8008876 <_scanf_float+0x39a>
 80088be:	f8d3 8000 	ldr.w	r8, [r3]
 80088c2:	ee10 2a10 	vmov	r2, s0
 80088c6:	ee10 0a10 	vmov	r0, s0
 80088ca:	463b      	mov	r3, r7
 80088cc:	4639      	mov	r1, r7
 80088ce:	f7f8 f92d 	bl	8000b2c <__aeabi_dcmpun>
 80088d2:	b128      	cbz	r0, 80088e0 <_scanf_float+0x404>
 80088d4:	4808      	ldr	r0, [pc, #32]	; (80088f8 <_scanf_float+0x41c>)
 80088d6:	f000 fb87 	bl	8008fe8 <nanf>
 80088da:	ed88 0a00 	vstr	s0, [r8]
 80088de:	e7cd      	b.n	800887c <_scanf_float+0x3a0>
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f8 f980 	bl	8000be8 <__aeabi_d2f>
 80088e8:	f8c8 0000 	str.w	r0, [r8]
 80088ec:	e7c6      	b.n	800887c <_scanf_float+0x3a0>
 80088ee:	2500      	movs	r5, #0
 80088f0:	e635      	b.n	800855e <_scanf_float+0x82>
 80088f2:	bf00      	nop
 80088f4:	0800c8fd 	.word	0x0800c8fd
 80088f8:	0800c9b6 	.word	0x0800c9b6

080088fc <std>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b510      	push	{r4, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	e9c0 3300 	strd	r3, r3, [r0]
 8008906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800890a:	6083      	str	r3, [r0, #8]
 800890c:	8181      	strh	r1, [r0, #12]
 800890e:	6643      	str	r3, [r0, #100]	; 0x64
 8008910:	81c2      	strh	r2, [r0, #14]
 8008912:	6183      	str	r3, [r0, #24]
 8008914:	4619      	mov	r1, r3
 8008916:	2208      	movs	r2, #8
 8008918:	305c      	adds	r0, #92	; 0x5c
 800891a:	f000 fa4b 	bl	8008db4 <memset>
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <std+0x58>)
 8008920:	6263      	str	r3, [r4, #36]	; 0x24
 8008922:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <std+0x5c>)
 8008924:	62a3      	str	r3, [r4, #40]	; 0x28
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <std+0x60>)
 8008928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800892a:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <std+0x64>)
 800892c:	6323      	str	r3, [r4, #48]	; 0x30
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <std+0x68>)
 8008930:	6224      	str	r4, [r4, #32]
 8008932:	429c      	cmp	r4, r3
 8008934:	d006      	beq.n	8008944 <std+0x48>
 8008936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800893a:	4294      	cmp	r4, r2
 800893c:	d002      	beq.n	8008944 <std+0x48>
 800893e:	33d0      	adds	r3, #208	; 0xd0
 8008940:	429c      	cmp	r4, r3
 8008942:	d105      	bne.n	8008950 <std+0x54>
 8008944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f000 bb30 	b.w	8008fb0 <__retarget_lock_init_recursive>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	bf00      	nop
 8008954:	08008c05 	.word	0x08008c05
 8008958:	08008c27 	.word	0x08008c27
 800895c:	08008c5f 	.word	0x08008c5f
 8008960:	08008c83 	.word	0x08008c83
 8008964:	200003a0 	.word	0x200003a0

08008968 <stdio_exit_handler>:
 8008968:	4a02      	ldr	r2, [pc, #8]	; (8008974 <stdio_exit_handler+0xc>)
 800896a:	4903      	ldr	r1, [pc, #12]	; (8008978 <stdio_exit_handler+0x10>)
 800896c:	4803      	ldr	r0, [pc, #12]	; (800897c <stdio_exit_handler+0x14>)
 800896e:	f000 b869 	b.w	8008a44 <_fwalk_sglue>
 8008972:	bf00      	nop
 8008974:	20000010 	.word	0x20000010
 8008978:	0800b5b1 	.word	0x0800b5b1
 800897c:	20000188 	.word	0x20000188

08008980 <cleanup_stdio>:
 8008980:	6841      	ldr	r1, [r0, #4]
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <cleanup_stdio+0x34>)
 8008984:	4299      	cmp	r1, r3
 8008986:	b510      	push	{r4, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	d001      	beq.n	8008990 <cleanup_stdio+0x10>
 800898c:	f002 fe10 	bl	800b5b0 <_fflush_r>
 8008990:	68a1      	ldr	r1, [r4, #8]
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <cleanup_stdio+0x38>)
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <cleanup_stdio+0x1e>
 8008998:	4620      	mov	r0, r4
 800899a:	f002 fe09 	bl	800b5b0 <_fflush_r>
 800899e:	68e1      	ldr	r1, [r4, #12]
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <cleanup_stdio+0x3c>)
 80089a2:	4299      	cmp	r1, r3
 80089a4:	d004      	beq.n	80089b0 <cleanup_stdio+0x30>
 80089a6:	4620      	mov	r0, r4
 80089a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ac:	f002 be00 	b.w	800b5b0 <_fflush_r>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	bf00      	nop
 80089b4:	200003a0 	.word	0x200003a0
 80089b8:	20000408 	.word	0x20000408
 80089bc:	20000470 	.word	0x20000470

080089c0 <global_stdio_init.part.0>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <global_stdio_init.part.0+0x30>)
 80089c4:	4c0b      	ldr	r4, [pc, #44]	; (80089f4 <global_stdio_init.part.0+0x34>)
 80089c6:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <global_stdio_init.part.0+0x38>)
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	4620      	mov	r0, r4
 80089cc:	2200      	movs	r2, #0
 80089ce:	2104      	movs	r1, #4
 80089d0:	f7ff ff94 	bl	80088fc <std>
 80089d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80089d8:	2201      	movs	r2, #1
 80089da:	2109      	movs	r1, #9
 80089dc:	f7ff ff8e 	bl	80088fc <std>
 80089e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80089e4:	2202      	movs	r2, #2
 80089e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ea:	2112      	movs	r1, #18
 80089ec:	f7ff bf86 	b.w	80088fc <std>
 80089f0:	200004d8 	.word	0x200004d8
 80089f4:	200003a0 	.word	0x200003a0
 80089f8:	08008969 	.word	0x08008969

080089fc <__sfp_lock_acquire>:
 80089fc:	4801      	ldr	r0, [pc, #4]	; (8008a04 <__sfp_lock_acquire+0x8>)
 80089fe:	f000 bad8 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 8008a02:	bf00      	nop
 8008a04:	200004e1 	.word	0x200004e1

08008a08 <__sfp_lock_release>:
 8008a08:	4801      	ldr	r0, [pc, #4]	; (8008a10 <__sfp_lock_release+0x8>)
 8008a0a:	f000 bad3 	b.w	8008fb4 <__retarget_lock_release_recursive>
 8008a0e:	bf00      	nop
 8008a10:	200004e1 	.word	0x200004e1

08008a14 <__sinit>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	f7ff fff0 	bl	80089fc <__sfp_lock_acquire>
 8008a1c:	6a23      	ldr	r3, [r4, #32]
 8008a1e:	b11b      	cbz	r3, 8008a28 <__sinit+0x14>
 8008a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a24:	f7ff bff0 	b.w	8008a08 <__sfp_lock_release>
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <__sinit+0x28>)
 8008a2a:	6223      	str	r3, [r4, #32]
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <__sinit+0x2c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f5      	bne.n	8008a20 <__sinit+0xc>
 8008a34:	f7ff ffc4 	bl	80089c0 <global_stdio_init.part.0>
 8008a38:	e7f2      	b.n	8008a20 <__sinit+0xc>
 8008a3a:	bf00      	nop
 8008a3c:	08008981 	.word	0x08008981
 8008a40:	200004d8 	.word	0x200004d8

08008a44 <_fwalk_sglue>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a54:	f1b9 0901 	subs.w	r9, r9, #1
 8008a58:	d505      	bpl.n	8008a66 <_fwalk_sglue+0x22>
 8008a5a:	6824      	ldr	r4, [r4, #0]
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	d1f7      	bne.n	8008a50 <_fwalk_sglue+0xc>
 8008a60:	4630      	mov	r0, r6
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d907      	bls.n	8008a7c <_fwalk_sglue+0x38>
 8008a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a70:	3301      	adds	r3, #1
 8008a72:	d003      	beq.n	8008a7c <_fwalk_sglue+0x38>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	4306      	orrs	r6, r0
 8008a7c:	3568      	adds	r5, #104	; 0x68
 8008a7e:	e7e9      	b.n	8008a54 <_fwalk_sglue+0x10>

08008a80 <iprintf>:
 8008a80:	b40f      	push	{r0, r1, r2, r3}
 8008a82:	b507      	push	{r0, r1, r2, lr}
 8008a84:	4906      	ldr	r1, [pc, #24]	; (8008aa0 <iprintf+0x20>)
 8008a86:	ab04      	add	r3, sp, #16
 8008a88:	6808      	ldr	r0, [r1, #0]
 8008a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8e:	6881      	ldr	r1, [r0, #8]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	f002 fbed 	bl	800b270 <_vfiprintf_r>
 8008a96:	b003      	add	sp, #12
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	b004      	add	sp, #16
 8008a9e:	4770      	bx	lr
 8008aa0:	200001d4 	.word	0x200001d4

08008aa4 <_puts_r>:
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	6884      	ldr	r4, [r0, #8]
 8008aaa:	4605      	mov	r5, r0
 8008aac:	460e      	mov	r6, r1
 8008aae:	b90b      	cbnz	r3, 8008ab4 <_puts_r+0x10>
 8008ab0:	f7ff ffb0 	bl	8008a14 <__sinit>
 8008ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab6:	07db      	lsls	r3, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_puts_r+0x22>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_puts_r+0x22>
 8008ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac2:	f000 fa76 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	0719      	lsls	r1, r3, #28
 8008aca:	d513      	bpl.n	8008af4 <_puts_r+0x50>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	b18b      	cbz	r3, 8008af4 <_puts_r+0x50>
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	b9e9      	cbnz	r1, 8008b1a <_puts_r+0x76>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da2e      	bge.n	8008b40 <_puts_r+0x9c>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	210a      	movs	r1, #10
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f8cf 	bl	8008c8a <__swbuf_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d007      	beq.n	8008b00 <_puts_r+0x5c>
 8008af0:	250a      	movs	r5, #10
 8008af2:	e007      	b.n	8008b04 <_puts_r+0x60>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 f904 	bl	8008d04 <__swsetup_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0e7      	beq.n	8008ad0 <_puts_r+0x2c>
 8008b00:	f04f 35ff 	mov.w	r5, #4294967295
 8008b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b06:	07da      	lsls	r2, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_puts_r+0x72>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	059b      	lsls	r3, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_puts_r+0x72>
 8008b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b12:	f000 fa4f 	bl	8008fb4 <__retarget_lock_release_recursive>
 8008b16:	4628      	mov	r0, r5
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da04      	bge.n	8008b28 <_puts_r+0x84>
 8008b1e:	69a2      	ldr	r2, [r4, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	dc06      	bgt.n	8008b32 <_puts_r+0x8e>
 8008b24:	290a      	cmp	r1, #10
 8008b26:	d004      	beq.n	8008b32 <_puts_r+0x8e>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	7019      	strb	r1, [r3, #0]
 8008b30:	e7cf      	b.n	8008ad2 <_puts_r+0x2e>
 8008b32:	4622      	mov	r2, r4
 8008b34:	4628      	mov	r0, r5
 8008b36:	f000 f8a8 	bl	8008c8a <__swbuf_r>
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d1c9      	bne.n	8008ad2 <_puts_r+0x2e>
 8008b3e:	e7df      	b.n	8008b00 <_puts_r+0x5c>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	250a      	movs	r5, #10
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	701d      	strb	r5, [r3, #0]
 8008b4a:	e7db      	b.n	8008b04 <_puts_r+0x60>

08008b4c <puts>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <puts+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff bfa7 	b.w	8008aa4 <_puts_r>
 8008b56:	bf00      	nop
 8008b58:	200001d4 	.word	0x200001d4

08008b5c <sniprintf>:
 8008b5c:	b40c      	push	{r2, r3}
 8008b5e:	b530      	push	{r4, r5, lr}
 8008b60:	4b17      	ldr	r3, [pc, #92]	; (8008bc0 <sniprintf+0x64>)
 8008b62:	1e0c      	subs	r4, r1, #0
 8008b64:	681d      	ldr	r5, [r3, #0]
 8008b66:	b09d      	sub	sp, #116	; 0x74
 8008b68:	da08      	bge.n	8008b7c <sniprintf+0x20>
 8008b6a:	238b      	movs	r3, #139	; 0x8b
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b72:	b01d      	add	sp, #116	; 0x74
 8008b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b78:	b002      	add	sp, #8
 8008b7a:	4770      	bx	lr
 8008b7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b84:	bf14      	ite	ne
 8008b86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b8a:	4623      	moveq	r3, r4
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b94:	9002      	str	r0, [sp, #8]
 8008b96:	9006      	str	r0, [sp, #24]
 8008b98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b9e:	ab21      	add	r3, sp, #132	; 0x84
 8008ba0:	a902      	add	r1, sp, #8
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f002 fa3b 	bl	800b020 <_svfiprintf_r>
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	bfbc      	itt	lt
 8008bae:	238b      	movlt	r3, #139	; 0x8b
 8008bb0:	602b      	strlt	r3, [r5, #0]
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d0dd      	beq.n	8008b72 <sniprintf+0x16>
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e7d9      	b.n	8008b72 <sniprintf+0x16>
 8008bbe:	bf00      	nop
 8008bc0:	200001d4 	.word	0x200001d4

08008bc4 <siprintf>:
 8008bc4:	b40e      	push	{r1, r2, r3}
 8008bc6:	b500      	push	{lr}
 8008bc8:	b09c      	sub	sp, #112	; 0x70
 8008bca:	ab1d      	add	r3, sp, #116	; 0x74
 8008bcc:	9002      	str	r0, [sp, #8]
 8008bce:	9006      	str	r0, [sp, #24]
 8008bd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bd4:	4809      	ldr	r0, [pc, #36]	; (8008bfc <siprintf+0x38>)
 8008bd6:	9107      	str	r1, [sp, #28]
 8008bd8:	9104      	str	r1, [sp, #16]
 8008bda:	4909      	ldr	r1, [pc, #36]	; (8008c00 <siprintf+0x3c>)
 8008bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be0:	9105      	str	r1, [sp, #20]
 8008be2:	6800      	ldr	r0, [r0, #0]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	a902      	add	r1, sp, #8
 8008be8:	f002 fa1a 	bl	800b020 <_svfiprintf_r>
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	b01c      	add	sp, #112	; 0x70
 8008bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf8:	b003      	add	sp, #12
 8008bfa:	4770      	bx	lr
 8008bfc:	200001d4 	.word	0x200001d4
 8008c00:	ffff0208 	.word	0xffff0208

08008c04 <__sread>:
 8008c04:	b510      	push	{r4, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	f000 f982 	bl	8008f14 <_read_r>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	bfab      	itete	ge
 8008c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c16:	89a3      	ldrhlt	r3, [r4, #12]
 8008c18:	181b      	addge	r3, r3, r0
 8008c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c1e:	bfac      	ite	ge
 8008c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c22:	81a3      	strhlt	r3, [r4, #12]
 8008c24:	bd10      	pop	{r4, pc}

08008c26 <__swrite>:
 8008c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2a:	461f      	mov	r7, r3
 8008c2c:	898b      	ldrh	r3, [r1, #12]
 8008c2e:	05db      	lsls	r3, r3, #23
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
 8008c34:	4616      	mov	r6, r2
 8008c36:	d505      	bpl.n	8008c44 <__swrite+0x1e>
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f000 f956 	bl	8008ef0 <_lseek_r>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	4632      	mov	r2, r6
 8008c52:	463b      	mov	r3, r7
 8008c54:	4628      	mov	r0, r5
 8008c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	f000 b96d 	b.w	8008f38 <_write_r>

08008c5e <__sseek>:
 8008c5e:	b510      	push	{r4, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	f000 f943 	bl	8008ef0 <_lseek_r>
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	bf15      	itete	ne
 8008c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c7a:	81a3      	strheq	r3, [r4, #12]
 8008c7c:	bf18      	it	ne
 8008c7e:	81a3      	strhne	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__sclose>:
 8008c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c86:	f000 b923 	b.w	8008ed0 <_close_r>

08008c8a <__swbuf_r>:
 8008c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	4614      	mov	r4, r2
 8008c90:	4605      	mov	r5, r0
 8008c92:	b118      	cbz	r0, 8008c9c <__swbuf_r+0x12>
 8008c94:	6a03      	ldr	r3, [r0, #32]
 8008c96:	b90b      	cbnz	r3, 8008c9c <__swbuf_r+0x12>
 8008c98:	f7ff febc 	bl	8008a14 <__sinit>
 8008c9c:	69a3      	ldr	r3, [r4, #24]
 8008c9e:	60a3      	str	r3, [r4, #8]
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	071a      	lsls	r2, r3, #28
 8008ca4:	d525      	bpl.n	8008cf2 <__swbuf_r+0x68>
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	b31b      	cbz	r3, 8008cf2 <__swbuf_r+0x68>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	1a98      	subs	r0, r3, r2
 8008cb0:	6963      	ldr	r3, [r4, #20]
 8008cb2:	b2f6      	uxtb	r6, r6
 8008cb4:	4283      	cmp	r3, r0
 8008cb6:	4637      	mov	r7, r6
 8008cb8:	dc04      	bgt.n	8008cc4 <__swbuf_r+0x3a>
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f002 fc77 	bl	800b5b0 <_fflush_r>
 8008cc2:	b9e0      	cbnz	r0, 8008cfe <__swbuf_r+0x74>
 8008cc4:	68a3      	ldr	r3, [r4, #8]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	60a3      	str	r3, [r4, #8]
 8008cca:	6823      	ldr	r3, [r4, #0]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	701e      	strb	r6, [r3, #0]
 8008cd2:	6962      	ldr	r2, [r4, #20]
 8008cd4:	1c43      	adds	r3, r0, #1
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d004      	beq.n	8008ce4 <__swbuf_r+0x5a>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	07db      	lsls	r3, r3, #31
 8008cde:	d506      	bpl.n	8008cee <__swbuf_r+0x64>
 8008ce0:	2e0a      	cmp	r6, #10
 8008ce2:	d104      	bne.n	8008cee <__swbuf_r+0x64>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f002 fc62 	bl	800b5b0 <_fflush_r>
 8008cec:	b938      	cbnz	r0, 8008cfe <__swbuf_r+0x74>
 8008cee:	4638      	mov	r0, r7
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f000 f805 	bl	8008d04 <__swsetup_r>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0d5      	beq.n	8008caa <__swbuf_r+0x20>
 8008cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8008d02:	e7f4      	b.n	8008cee <__swbuf_r+0x64>

08008d04 <__swsetup_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <__swsetup_r+0xac>)
 8008d08:	4605      	mov	r5, r0
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	b118      	cbz	r0, 8008d18 <__swsetup_r+0x14>
 8008d10:	6a03      	ldr	r3, [r0, #32]
 8008d12:	b90b      	cbnz	r3, 8008d18 <__swsetup_r+0x14>
 8008d14:	f7ff fe7e 	bl	8008a14 <__sinit>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d1e:	0718      	lsls	r0, r3, #28
 8008d20:	d422      	bmi.n	8008d68 <__swsetup_r+0x64>
 8008d22:	06d9      	lsls	r1, r3, #27
 8008d24:	d407      	bmi.n	8008d36 <__swsetup_r+0x32>
 8008d26:	2309      	movs	r3, #9
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e034      	b.n	8008da0 <__swsetup_r+0x9c>
 8008d36:	0758      	lsls	r0, r3, #29
 8008d38:	d512      	bpl.n	8008d60 <__swsetup_r+0x5c>
 8008d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d3c:	b141      	cbz	r1, 8008d50 <__swsetup_r+0x4c>
 8008d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d002      	beq.n	8008d4c <__swsetup_r+0x48>
 8008d46:	4628      	mov	r0, r5
 8008d48:	f000 ffec 	bl	8009d24 <_free_r>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	f043 0308 	orr.w	r3, r3, #8
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	b94b      	cbnz	r3, 8008d80 <__swsetup_r+0x7c>
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d76:	d003      	beq.n	8008d80 <__swsetup_r+0x7c>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f002 fc78 	bl	800b670 <__smakebuf_r>
 8008d80:	89a0      	ldrh	r0, [r4, #12]
 8008d82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d86:	f010 0301 	ands.w	r3, r0, #1
 8008d8a:	d00a      	beq.n	8008da2 <__swsetup_r+0x9e>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	6963      	ldr	r3, [r4, #20]
 8008d92:	425b      	negs	r3, r3
 8008d94:	61a3      	str	r3, [r4, #24]
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	b943      	cbnz	r3, 8008dac <__swsetup_r+0xa8>
 8008d9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d9e:	d1c4      	bne.n	8008d2a <__swsetup_r+0x26>
 8008da0:	bd38      	pop	{r3, r4, r5, pc}
 8008da2:	0781      	lsls	r1, r0, #30
 8008da4:	bf58      	it	pl
 8008da6:	6963      	ldrpl	r3, [r4, #20]
 8008da8:	60a3      	str	r3, [r4, #8]
 8008daa:	e7f4      	b.n	8008d96 <__swsetup_r+0x92>
 8008dac:	2000      	movs	r0, #0
 8008dae:	e7f7      	b.n	8008da0 <__swsetup_r+0x9c>
 8008db0:	200001d4 	.word	0x200001d4

08008db4 <memset>:
 8008db4:	4402      	add	r2, r0
 8008db6:	4603      	mov	r3, r0
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d100      	bne.n	8008dbe <memset+0xa>
 8008dbc:	4770      	bx	lr
 8008dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc2:	e7f9      	b.n	8008db8 <memset+0x4>

08008dc4 <strncmp>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	b16a      	cbz	r2, 8008de4 <strncmp+0x20>
 8008dc8:	3901      	subs	r1, #1
 8008dca:	1884      	adds	r4, r0, r2
 8008dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d103      	bne.n	8008de0 <strncmp+0x1c>
 8008dd8:	42a0      	cmp	r0, r4
 8008dda:	d001      	beq.n	8008de0 <strncmp+0x1c>
 8008ddc:	2a00      	cmp	r2, #0
 8008dde:	d1f5      	bne.n	8008dcc <strncmp+0x8>
 8008de0:	1ad0      	subs	r0, r2, r3
 8008de2:	bd10      	pop	{r4, pc}
 8008de4:	4610      	mov	r0, r2
 8008de6:	e7fc      	b.n	8008de2 <strncmp+0x1e>

08008de8 <strncpy>:
 8008de8:	b510      	push	{r4, lr}
 8008dea:	3901      	subs	r1, #1
 8008dec:	4603      	mov	r3, r0
 8008dee:	b132      	cbz	r2, 8008dfe <strncpy+0x16>
 8008df0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008df4:	f803 4b01 	strb.w	r4, [r3], #1
 8008df8:	3a01      	subs	r2, #1
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	d1f7      	bne.n	8008dee <strncpy+0x6>
 8008dfe:	441a      	add	r2, r3
 8008e00:	2100      	movs	r1, #0
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d100      	bne.n	8008e08 <strncpy+0x20>
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0c:	e7f9      	b.n	8008e02 <strncpy+0x1a>
	...

08008e10 <strtok>:
 8008e10:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <strtok+0x5c>)
 8008e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e14:	681e      	ldr	r6, [r3, #0]
 8008e16:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008e18:	4605      	mov	r5, r0
 8008e1a:	b9fc      	cbnz	r4, 8008e5c <strtok+0x4c>
 8008e1c:	2050      	movs	r0, #80	; 0x50
 8008e1e:	9101      	str	r1, [sp, #4]
 8008e20:	f001 fb24 	bl	800a46c <malloc>
 8008e24:	9901      	ldr	r1, [sp, #4]
 8008e26:	6470      	str	r0, [r6, #68]	; 0x44
 8008e28:	4602      	mov	r2, r0
 8008e2a:	b920      	cbnz	r0, 8008e36 <strtok+0x26>
 8008e2c:	4b10      	ldr	r3, [pc, #64]	; (8008e70 <strtok+0x60>)
 8008e2e:	4811      	ldr	r0, [pc, #68]	; (8008e74 <strtok+0x64>)
 8008e30:	215b      	movs	r1, #91	; 0x5b
 8008e32:	f000 f8df 	bl	8008ff4 <__assert_func>
 8008e36:	e9c0 4400 	strd	r4, r4, [r0]
 8008e3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008e3e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008e42:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008e46:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008e4a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008e4e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008e52:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008e56:	6184      	str	r4, [r0, #24]
 8008e58:	7704      	strb	r4, [r0, #28]
 8008e5a:	6244      	str	r4, [r0, #36]	; 0x24
 8008e5c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4628      	mov	r0, r5
 8008e62:	b002      	add	sp, #8
 8008e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e68:	f000 b806 	b.w	8008e78 <__strtok_r>
 8008e6c:	200001d4 	.word	0x200001d4
 8008e70:	0800c902 	.word	0x0800c902
 8008e74:	0800c919 	.word	0x0800c919

08008e78 <__strtok_r>:
 8008e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7a:	b908      	cbnz	r0, 8008e80 <__strtok_r+0x8>
 8008e7c:	6810      	ldr	r0, [r2, #0]
 8008e7e:	b188      	cbz	r0, 8008ea4 <__strtok_r+0x2c>
 8008e80:	4604      	mov	r4, r0
 8008e82:	4620      	mov	r0, r4
 8008e84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008e88:	460f      	mov	r7, r1
 8008e8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008e8e:	b91e      	cbnz	r6, 8008e98 <__strtok_r+0x20>
 8008e90:	b965      	cbnz	r5, 8008eac <__strtok_r+0x34>
 8008e92:	6015      	str	r5, [r2, #0]
 8008e94:	4628      	mov	r0, r5
 8008e96:	e005      	b.n	8008ea4 <__strtok_r+0x2c>
 8008e98:	42b5      	cmp	r5, r6
 8008e9a:	d1f6      	bne.n	8008e8a <__strtok_r+0x12>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f0      	bne.n	8008e82 <__strtok_r+0xa>
 8008ea0:	6014      	str	r4, [r2, #0]
 8008ea2:	7003      	strb	r3, [r0, #0]
 8008ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea6:	461c      	mov	r4, r3
 8008ea8:	e00c      	b.n	8008ec4 <__strtok_r+0x4c>
 8008eaa:	b915      	cbnz	r5, 8008eb2 <__strtok_r+0x3a>
 8008eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	d1f7      	bne.n	8008eaa <__strtok_r+0x32>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f3      	beq.n	8008ea6 <__strtok_r+0x2e>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ec4:	6014      	str	r4, [r2, #0]
 8008ec6:	e7ed      	b.n	8008ea4 <__strtok_r+0x2c>

08008ec8 <_localeconv_r>:
 8008ec8:	4800      	ldr	r0, [pc, #0]	; (8008ecc <_localeconv_r+0x4>)
 8008eca:	4770      	bx	lr
 8008ecc:	2000010c 	.word	0x2000010c

08008ed0 <_close_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d06      	ldr	r5, [pc, #24]	; (8008eec <_close_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	602b      	str	r3, [r5, #0]
 8008edc:	f7f9 fb86 	bl	80025ec <_close>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_close_r+0x1a>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_close_r+0x1a>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	200004dc 	.word	0x200004dc

08008ef0 <_lseek_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	; (8008f10 <_lseek_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7f9 fb9b 	bl	800263a <_lseek>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_lseek_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_lseek_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	200004dc 	.word	0x200004dc

08008f14 <_read_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4d07      	ldr	r5, [pc, #28]	; (8008f34 <_read_r+0x20>)
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4608      	mov	r0, r1
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	2200      	movs	r2, #0
 8008f20:	602a      	str	r2, [r5, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f7f9 fb22 	bl	800256c <_read>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_read_r+0x1e>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_read_r+0x1e>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	200004dc 	.word	0x200004dc

08008f38 <_write_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	; (8008f58 <_write_r+0x20>)
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	2200      	movs	r2, #0
 8008f44:	602a      	str	r2, [r5, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	f7f9 fb2e 	bl	80025a8 <_write>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_write_r+0x1e>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_write_r+0x1e>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	200004dc 	.word	0x200004dc

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	; (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	200001d4 	.word	0x200001d4

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	; (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	; (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	; (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	; (8008fac <__libc_init_array+0x44>)
 8008f7c:	f002 fc98 	bl	800b8b0 <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	0800cc00 	.word	0x0800cc00
 8008fa4:	0800cc00 	.word	0x0800cc00
 8008fa8:	0800cc00 	.word	0x0800cc00
 8008fac:	0800cc04 	.word	0x0800cc04

08008fb0 <__retarget_lock_init_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_acquire_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <__retarget_lock_release_recursive>:
 8008fb4:	4770      	bx	lr

08008fb6 <memcpy>:
 8008fb6:	440a      	add	r2, r1
 8008fb8:	4291      	cmp	r1, r2
 8008fba:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fbe:	d100      	bne.n	8008fc2 <memcpy+0xc>
 8008fc0:	4770      	bx	lr
 8008fc2:	b510      	push	{r4, lr}
 8008fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fcc:	4291      	cmp	r1, r2
 8008fce:	d1f9      	bne.n	8008fc4 <memcpy+0xe>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	0000      	movs	r0, r0
 8008fd4:	0000      	movs	r0, r0
	...

08008fd8 <nan>:
 8008fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008fe0 <nan+0x8>
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	00000000 	.word	0x00000000
 8008fe4:	7ff80000 	.word	0x7ff80000

08008fe8 <nanf>:
 8008fe8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ff0 <nanf+0x8>
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	7fc00000 	.word	0x7fc00000

08008ff4 <__assert_func>:
 8008ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ff6:	4614      	mov	r4, r2
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <__assert_func+0x2c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4605      	mov	r5, r0
 8009000:	68d8      	ldr	r0, [r3, #12]
 8009002:	b14c      	cbz	r4, 8009018 <__assert_func+0x24>
 8009004:	4b07      	ldr	r3, [pc, #28]	; (8009024 <__assert_func+0x30>)
 8009006:	9100      	str	r1, [sp, #0]
 8009008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800900c:	4906      	ldr	r1, [pc, #24]	; (8009028 <__assert_func+0x34>)
 800900e:	462b      	mov	r3, r5
 8009010:	f002 faf6 	bl	800b600 <fiprintf>
 8009014:	f002 fbb4 	bl	800b780 <abort>
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <__assert_func+0x38>)
 800901a:	461c      	mov	r4, r3
 800901c:	e7f3      	b.n	8009006 <__assert_func+0x12>
 800901e:	bf00      	nop
 8009020:	200001d4 	.word	0x200001d4
 8009024:	0800c97b 	.word	0x0800c97b
 8009028:	0800c988 	.word	0x0800c988
 800902c:	0800c9b6 	.word	0x0800c9b6

08009030 <quorem>:
 8009030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	6903      	ldr	r3, [r0, #16]
 8009036:	690c      	ldr	r4, [r1, #16]
 8009038:	42a3      	cmp	r3, r4
 800903a:	4607      	mov	r7, r0
 800903c:	db7e      	blt.n	800913c <quorem+0x10c>
 800903e:	3c01      	subs	r4, #1
 8009040:	f101 0814 	add.w	r8, r1, #20
 8009044:	f100 0514 	add.w	r5, r0, #20
 8009048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009056:	3301      	adds	r3, #1
 8009058:	429a      	cmp	r2, r3
 800905a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800905e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009062:	fbb2 f6f3 	udiv	r6, r2, r3
 8009066:	d331      	bcc.n	80090cc <quorem+0x9c>
 8009068:	f04f 0e00 	mov.w	lr, #0
 800906c:	4640      	mov	r0, r8
 800906e:	46ac      	mov	ip, r5
 8009070:	46f2      	mov	sl, lr
 8009072:	f850 2b04 	ldr.w	r2, [r0], #4
 8009076:	b293      	uxth	r3, r2
 8009078:	fb06 e303 	mla	r3, r6, r3, lr
 800907c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009080:	0c1a      	lsrs	r2, r3, #16
 8009082:	b29b      	uxth	r3, r3
 8009084:	ebaa 0303 	sub.w	r3, sl, r3
 8009088:	f8dc a000 	ldr.w	sl, [ip]
 800908c:	fa13 f38a 	uxtah	r3, r3, sl
 8009090:	fb06 220e 	mla	r2, r6, lr, r2
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	9b00      	ldr	r3, [sp, #0]
 8009098:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800909c:	b292      	uxth	r2, r2
 800909e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80090a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80090aa:	4581      	cmp	r9, r0
 80090ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090b0:	f84c 3b04 	str.w	r3, [ip], #4
 80090b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80090b8:	d2db      	bcs.n	8009072 <quorem+0x42>
 80090ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80090be:	b92b      	cbnz	r3, 80090cc <quorem+0x9c>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	3b04      	subs	r3, #4
 80090c4:	429d      	cmp	r5, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	d32c      	bcc.n	8009124 <quorem+0xf4>
 80090ca:	613c      	str	r4, [r7, #16]
 80090cc:	4638      	mov	r0, r7
 80090ce:	f001 fd59 	bl	800ab84 <__mcmp>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	db22      	blt.n	800911c <quorem+0xec>
 80090d6:	3601      	adds	r6, #1
 80090d8:	4629      	mov	r1, r5
 80090da:	2000      	movs	r0, #0
 80090dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80090e0:	f8d1 c000 	ldr.w	ip, [r1]
 80090e4:	b293      	uxth	r3, r2
 80090e6:	1ac3      	subs	r3, r0, r3
 80090e8:	0c12      	lsrs	r2, r2, #16
 80090ea:	fa13 f38c 	uxtah	r3, r3, ip
 80090ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80090f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090fc:	45c1      	cmp	r9, r8
 80090fe:	f841 3b04 	str.w	r3, [r1], #4
 8009102:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009106:	d2e9      	bcs.n	80090dc <quorem+0xac>
 8009108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800910c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009110:	b922      	cbnz	r2, 800911c <quorem+0xec>
 8009112:	3b04      	subs	r3, #4
 8009114:	429d      	cmp	r5, r3
 8009116:	461a      	mov	r2, r3
 8009118:	d30a      	bcc.n	8009130 <quorem+0x100>
 800911a:	613c      	str	r4, [r7, #16]
 800911c:	4630      	mov	r0, r6
 800911e:	b003      	add	sp, #12
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	6812      	ldr	r2, [r2, #0]
 8009126:	3b04      	subs	r3, #4
 8009128:	2a00      	cmp	r2, #0
 800912a:	d1ce      	bne.n	80090ca <quorem+0x9a>
 800912c:	3c01      	subs	r4, #1
 800912e:	e7c9      	b.n	80090c4 <quorem+0x94>
 8009130:	6812      	ldr	r2, [r2, #0]
 8009132:	3b04      	subs	r3, #4
 8009134:	2a00      	cmp	r2, #0
 8009136:	d1f0      	bne.n	800911a <quorem+0xea>
 8009138:	3c01      	subs	r4, #1
 800913a:	e7eb      	b.n	8009114 <quorem+0xe4>
 800913c:	2000      	movs	r0, #0
 800913e:	e7ee      	b.n	800911e <quorem+0xee>

08009140 <_dtoa_r>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	ed2d 8b04 	vpush	{d8-d9}
 8009148:	69c5      	ldr	r5, [r0, #28]
 800914a:	b093      	sub	sp, #76	; 0x4c
 800914c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009150:	ec57 6b10 	vmov	r6, r7, d0
 8009154:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009158:	9107      	str	r1, [sp, #28]
 800915a:	4604      	mov	r4, r0
 800915c:	920a      	str	r2, [sp, #40]	; 0x28
 800915e:	930d      	str	r3, [sp, #52]	; 0x34
 8009160:	b975      	cbnz	r5, 8009180 <_dtoa_r+0x40>
 8009162:	2010      	movs	r0, #16
 8009164:	f001 f982 	bl	800a46c <malloc>
 8009168:	4602      	mov	r2, r0
 800916a:	61e0      	str	r0, [r4, #28]
 800916c:	b920      	cbnz	r0, 8009178 <_dtoa_r+0x38>
 800916e:	4bae      	ldr	r3, [pc, #696]	; (8009428 <_dtoa_r+0x2e8>)
 8009170:	21ef      	movs	r1, #239	; 0xef
 8009172:	48ae      	ldr	r0, [pc, #696]	; (800942c <_dtoa_r+0x2ec>)
 8009174:	f7ff ff3e 	bl	8008ff4 <__assert_func>
 8009178:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800917c:	6005      	str	r5, [r0, #0]
 800917e:	60c5      	str	r5, [r0, #12]
 8009180:	69e3      	ldr	r3, [r4, #28]
 8009182:	6819      	ldr	r1, [r3, #0]
 8009184:	b151      	cbz	r1, 800919c <_dtoa_r+0x5c>
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	604a      	str	r2, [r1, #4]
 800918a:	2301      	movs	r3, #1
 800918c:	4093      	lsls	r3, r2
 800918e:	608b      	str	r3, [r1, #8]
 8009190:	4620      	mov	r0, r4
 8009192:	f001 fa71 	bl	800a678 <_Bfree>
 8009196:	69e3      	ldr	r3, [r4, #28]
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	1e3b      	subs	r3, r7, #0
 800919e:	bfbb      	ittet	lt
 80091a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	9303      	strlt	r3, [sp, #12]
 80091a6:	2300      	movge	r3, #0
 80091a8:	2201      	movlt	r2, #1
 80091aa:	bfac      	ite	ge
 80091ac:	f8c8 3000 	strge.w	r3, [r8]
 80091b0:	f8c8 2000 	strlt.w	r2, [r8]
 80091b4:	4b9e      	ldr	r3, [pc, #632]	; (8009430 <_dtoa_r+0x2f0>)
 80091b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80091ba:	ea33 0308 	bics.w	r3, r3, r8
 80091be:	d11b      	bne.n	80091f8 <_dtoa_r+0xb8>
 80091c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80091cc:	4333      	orrs	r3, r6
 80091ce:	f000 8593 	beq.w	8009cf8 <_dtoa_r+0xbb8>
 80091d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091d4:	b963      	cbnz	r3, 80091f0 <_dtoa_r+0xb0>
 80091d6:	4b97      	ldr	r3, [pc, #604]	; (8009434 <_dtoa_r+0x2f4>)
 80091d8:	e027      	b.n	800922a <_dtoa_r+0xea>
 80091da:	4b97      	ldr	r3, [pc, #604]	; (8009438 <_dtoa_r+0x2f8>)
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	3308      	adds	r3, #8
 80091e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	9800      	ldr	r0, [sp, #0]
 80091e6:	b013      	add	sp, #76	; 0x4c
 80091e8:	ecbd 8b04 	vpop	{d8-d9}
 80091ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f0:	4b90      	ldr	r3, [pc, #576]	; (8009434 <_dtoa_r+0x2f4>)
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	3303      	adds	r3, #3
 80091f6:	e7f3      	b.n	80091e0 <_dtoa_r+0xa0>
 80091f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091fc:	2200      	movs	r2, #0
 80091fe:	ec51 0b17 	vmov	r0, r1, d7
 8009202:	eeb0 8a47 	vmov.f32	s16, s14
 8009206:	eef0 8a67 	vmov.f32	s17, s15
 800920a:	2300      	movs	r3, #0
 800920c:	f7f7 fc5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009210:	4681      	mov	r9, r0
 8009212:	b160      	cbz	r0, 800922e <_dtoa_r+0xee>
 8009214:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009216:	2301      	movs	r3, #1
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 8568 	beq.w	8009cf2 <_dtoa_r+0xbb2>
 8009222:	4b86      	ldr	r3, [pc, #536]	; (800943c <_dtoa_r+0x2fc>)
 8009224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	3b01      	subs	r3, #1
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	e7da      	b.n	80091e4 <_dtoa_r+0xa4>
 800922e:	aa10      	add	r2, sp, #64	; 0x40
 8009230:	a911      	add	r1, sp, #68	; 0x44
 8009232:	4620      	mov	r0, r4
 8009234:	eeb0 0a48 	vmov.f32	s0, s16
 8009238:	eef0 0a68 	vmov.f32	s1, s17
 800923c:	f001 fdb8 	bl	800adb0 <__d2b>
 8009240:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009244:	4682      	mov	sl, r0
 8009246:	2d00      	cmp	r5, #0
 8009248:	d07f      	beq.n	800934a <_dtoa_r+0x20a>
 800924a:	ee18 3a90 	vmov	r3, s17
 800924e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009252:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009256:	ec51 0b18 	vmov	r0, r1, d8
 800925a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800925e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009262:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009266:	4619      	mov	r1, r3
 8009268:	2200      	movs	r2, #0
 800926a:	4b75      	ldr	r3, [pc, #468]	; (8009440 <_dtoa_r+0x300>)
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	a367      	add	r3, pc, #412	; (adr r3, 8009410 <_dtoa_r+0x2d0>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f9bf 	bl	80005f8 <__aeabi_dmul>
 800927a:	a367      	add	r3, pc, #412	; (adr r3, 8009418 <_dtoa_r+0x2d8>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f804 	bl	800028c <__adddf3>
 8009284:	4606      	mov	r6, r0
 8009286:	4628      	mov	r0, r5
 8009288:	460f      	mov	r7, r1
 800928a:	f7f7 f94b 	bl	8000524 <__aeabi_i2d>
 800928e:	a364      	add	r3, pc, #400	; (adr r3, 8009420 <_dtoa_r+0x2e0>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f7 f9b0 	bl	80005f8 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	4606      	mov	r6, r0
 80092a6:	460f      	mov	r7, r1
 80092a8:	f7f7 fc56 	bl	8000b58 <__aeabi_d2iz>
 80092ac:	2200      	movs	r2, #0
 80092ae:	4683      	mov	fp, r0
 80092b0:	2300      	movs	r3, #0
 80092b2:	4630      	mov	r0, r6
 80092b4:	4639      	mov	r1, r7
 80092b6:	f7f7 fc11 	bl	8000adc <__aeabi_dcmplt>
 80092ba:	b148      	cbz	r0, 80092d0 <_dtoa_r+0x190>
 80092bc:	4658      	mov	r0, fp
 80092be:	f7f7 f931 	bl	8000524 <__aeabi_i2d>
 80092c2:	4632      	mov	r2, r6
 80092c4:	463b      	mov	r3, r7
 80092c6:	f7f7 fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80092ca:	b908      	cbnz	r0, 80092d0 <_dtoa_r+0x190>
 80092cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092d0:	f1bb 0f16 	cmp.w	fp, #22
 80092d4:	d857      	bhi.n	8009386 <_dtoa_r+0x246>
 80092d6:	4b5b      	ldr	r3, [pc, #364]	; (8009444 <_dtoa_r+0x304>)
 80092d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	ec51 0b18 	vmov	r0, r1, d8
 80092e4:	f7f7 fbfa 	bl	8000adc <__aeabi_dcmplt>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d04e      	beq.n	800938a <_dtoa_r+0x24a>
 80092ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80092f0:	2300      	movs	r3, #0
 80092f2:	930c      	str	r3, [sp, #48]	; 0x30
 80092f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092f6:	1b5b      	subs	r3, r3, r5
 80092f8:	1e5a      	subs	r2, r3, #1
 80092fa:	bf45      	ittet	mi
 80092fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8009300:	9305      	strmi	r3, [sp, #20]
 8009302:	2300      	movpl	r3, #0
 8009304:	2300      	movmi	r3, #0
 8009306:	9206      	str	r2, [sp, #24]
 8009308:	bf54      	ite	pl
 800930a:	9305      	strpl	r3, [sp, #20]
 800930c:	9306      	strmi	r3, [sp, #24]
 800930e:	f1bb 0f00 	cmp.w	fp, #0
 8009312:	db3c      	blt.n	800938e <_dtoa_r+0x24e>
 8009314:	9b06      	ldr	r3, [sp, #24]
 8009316:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800931a:	445b      	add	r3, fp
 800931c:	9306      	str	r3, [sp, #24]
 800931e:	2300      	movs	r3, #0
 8009320:	9308      	str	r3, [sp, #32]
 8009322:	9b07      	ldr	r3, [sp, #28]
 8009324:	2b09      	cmp	r3, #9
 8009326:	d868      	bhi.n	80093fa <_dtoa_r+0x2ba>
 8009328:	2b05      	cmp	r3, #5
 800932a:	bfc4      	itt	gt
 800932c:	3b04      	subgt	r3, #4
 800932e:	9307      	strgt	r3, [sp, #28]
 8009330:	9b07      	ldr	r3, [sp, #28]
 8009332:	f1a3 0302 	sub.w	r3, r3, #2
 8009336:	bfcc      	ite	gt
 8009338:	2500      	movgt	r5, #0
 800933a:	2501      	movle	r5, #1
 800933c:	2b03      	cmp	r3, #3
 800933e:	f200 8085 	bhi.w	800944c <_dtoa_r+0x30c>
 8009342:	e8df f003 	tbb	[pc, r3]
 8009346:	3b2e      	.short	0x3b2e
 8009348:	5839      	.short	0x5839
 800934a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800934e:	441d      	add	r5, r3
 8009350:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009354:	2b20      	cmp	r3, #32
 8009356:	bfc1      	itttt	gt
 8009358:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800935c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009360:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009364:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009368:	bfd6      	itet	le
 800936a:	f1c3 0320 	rsble	r3, r3, #32
 800936e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009372:	fa06 f003 	lslle.w	r0, r6, r3
 8009376:	f7f7 f8c5 	bl	8000504 <__aeabi_ui2d>
 800937a:	2201      	movs	r2, #1
 800937c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009380:	3d01      	subs	r5, #1
 8009382:	920e      	str	r2, [sp, #56]	; 0x38
 8009384:	e76f      	b.n	8009266 <_dtoa_r+0x126>
 8009386:	2301      	movs	r3, #1
 8009388:	e7b3      	b.n	80092f2 <_dtoa_r+0x1b2>
 800938a:	900c      	str	r0, [sp, #48]	; 0x30
 800938c:	e7b2      	b.n	80092f4 <_dtoa_r+0x1b4>
 800938e:	9b05      	ldr	r3, [sp, #20]
 8009390:	eba3 030b 	sub.w	r3, r3, fp
 8009394:	9305      	str	r3, [sp, #20]
 8009396:	f1cb 0300 	rsb	r3, fp, #0
 800939a:	9308      	str	r3, [sp, #32]
 800939c:	2300      	movs	r3, #0
 800939e:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a0:	e7bf      	b.n	8009322 <_dtoa_r+0x1e2>
 80093a2:	2300      	movs	r3, #0
 80093a4:	9309      	str	r3, [sp, #36]	; 0x24
 80093a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dc52      	bgt.n	8009452 <_dtoa_r+0x312>
 80093ac:	2301      	movs	r3, #1
 80093ae:	9301      	str	r3, [sp, #4]
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	461a      	mov	r2, r3
 80093b4:	920a      	str	r2, [sp, #40]	; 0x28
 80093b6:	e00b      	b.n	80093d0 <_dtoa_r+0x290>
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f3      	b.n	80093a4 <_dtoa_r+0x264>
 80093bc:	2300      	movs	r3, #0
 80093be:	9309      	str	r3, [sp, #36]	; 0x24
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	445b      	add	r3, fp
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	3301      	adds	r3, #1
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	9304      	str	r3, [sp, #16]
 80093cc:	bfb8      	it	lt
 80093ce:	2301      	movlt	r3, #1
 80093d0:	69e0      	ldr	r0, [r4, #28]
 80093d2:	2100      	movs	r1, #0
 80093d4:	2204      	movs	r2, #4
 80093d6:	f102 0614 	add.w	r6, r2, #20
 80093da:	429e      	cmp	r6, r3
 80093dc:	d93d      	bls.n	800945a <_dtoa_r+0x31a>
 80093de:	6041      	str	r1, [r0, #4]
 80093e0:	4620      	mov	r0, r4
 80093e2:	f001 f909 	bl	800a5f8 <_Balloc>
 80093e6:	9000      	str	r0, [sp, #0]
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d139      	bne.n	8009460 <_dtoa_r+0x320>
 80093ec:	4b16      	ldr	r3, [pc, #88]	; (8009448 <_dtoa_r+0x308>)
 80093ee:	4602      	mov	r2, r0
 80093f0:	f240 11af 	movw	r1, #431	; 0x1af
 80093f4:	e6bd      	b.n	8009172 <_dtoa_r+0x32>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7e1      	b.n	80093be <_dtoa_r+0x27e>
 80093fa:	2501      	movs	r5, #1
 80093fc:	2300      	movs	r3, #0
 80093fe:	9307      	str	r3, [sp, #28]
 8009400:	9509      	str	r5, [sp, #36]	; 0x24
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	9304      	str	r3, [sp, #16]
 800940a:	2200      	movs	r2, #0
 800940c:	2312      	movs	r3, #18
 800940e:	e7d1      	b.n	80093b4 <_dtoa_r+0x274>
 8009410:	636f4361 	.word	0x636f4361
 8009414:	3fd287a7 	.word	0x3fd287a7
 8009418:	8b60c8b3 	.word	0x8b60c8b3
 800941c:	3fc68a28 	.word	0x3fc68a28
 8009420:	509f79fb 	.word	0x509f79fb
 8009424:	3fd34413 	.word	0x3fd34413
 8009428:	0800c902 	.word	0x0800c902
 800942c:	0800c9c4 	.word	0x0800c9c4
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	0800c9c0 	.word	0x0800c9c0
 8009438:	0800c9b7 	.word	0x0800c9b7
 800943c:	0800c8da 	.word	0x0800c8da
 8009440:	3ff80000 	.word	0x3ff80000
 8009444:	0800cb10 	.word	0x0800cb10
 8009448:	0800ca1c 	.word	0x0800ca1c
 800944c:	2301      	movs	r3, #1
 800944e:	9309      	str	r3, [sp, #36]	; 0x24
 8009450:	e7d7      	b.n	8009402 <_dtoa_r+0x2c2>
 8009452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	9304      	str	r3, [sp, #16]
 8009458:	e7ba      	b.n	80093d0 <_dtoa_r+0x290>
 800945a:	3101      	adds	r1, #1
 800945c:	0052      	lsls	r2, r2, #1
 800945e:	e7ba      	b.n	80093d6 <_dtoa_r+0x296>
 8009460:	69e3      	ldr	r3, [r4, #28]
 8009462:	9a00      	ldr	r2, [sp, #0]
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	9b04      	ldr	r3, [sp, #16]
 8009468:	2b0e      	cmp	r3, #14
 800946a:	f200 80a8 	bhi.w	80095be <_dtoa_r+0x47e>
 800946e:	2d00      	cmp	r5, #0
 8009470:	f000 80a5 	beq.w	80095be <_dtoa_r+0x47e>
 8009474:	f1bb 0f00 	cmp.w	fp, #0
 8009478:	dd38      	ble.n	80094ec <_dtoa_r+0x3ac>
 800947a:	4bc0      	ldr	r3, [pc, #768]	; (800977c <_dtoa_r+0x63c>)
 800947c:	f00b 020f 	and.w	r2, fp, #15
 8009480:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009484:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009488:	e9d3 6700 	ldrd	r6, r7, [r3]
 800948c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009490:	d019      	beq.n	80094c6 <_dtoa_r+0x386>
 8009492:	4bbb      	ldr	r3, [pc, #748]	; (8009780 <_dtoa_r+0x640>)
 8009494:	ec51 0b18 	vmov	r0, r1, d8
 8009498:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800949c:	f7f7 f9d6 	bl	800084c <__aeabi_ddiv>
 80094a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a4:	f008 080f 	and.w	r8, r8, #15
 80094a8:	2503      	movs	r5, #3
 80094aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009780 <_dtoa_r+0x640>
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	d10a      	bne.n	80094ca <_dtoa_r+0x38a>
 80094b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094b8:	4632      	mov	r2, r6
 80094ba:	463b      	mov	r3, r7
 80094bc:	f7f7 f9c6 	bl	800084c <__aeabi_ddiv>
 80094c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c4:	e02b      	b.n	800951e <_dtoa_r+0x3de>
 80094c6:	2502      	movs	r5, #2
 80094c8:	e7ef      	b.n	80094aa <_dtoa_r+0x36a>
 80094ca:	f018 0f01 	tst.w	r8, #1
 80094ce:	d008      	beq.n	80094e2 <_dtoa_r+0x3a2>
 80094d0:	4630      	mov	r0, r6
 80094d2:	4639      	mov	r1, r7
 80094d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80094d8:	f7f7 f88e 	bl	80005f8 <__aeabi_dmul>
 80094dc:	3501      	adds	r5, #1
 80094de:	4606      	mov	r6, r0
 80094e0:	460f      	mov	r7, r1
 80094e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094e6:	f109 0908 	add.w	r9, r9, #8
 80094ea:	e7e0      	b.n	80094ae <_dtoa_r+0x36e>
 80094ec:	f000 809f 	beq.w	800962e <_dtoa_r+0x4ee>
 80094f0:	f1cb 0600 	rsb	r6, fp, #0
 80094f4:	4ba1      	ldr	r3, [pc, #644]	; (800977c <_dtoa_r+0x63c>)
 80094f6:	4fa2      	ldr	r7, [pc, #648]	; (8009780 <_dtoa_r+0x640>)
 80094f8:	f006 020f 	and.w	r2, r6, #15
 80094fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	ec51 0b18 	vmov	r0, r1, d8
 8009508:	f7f7 f876 	bl	80005f8 <__aeabi_dmul>
 800950c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009510:	1136      	asrs	r6, r6, #4
 8009512:	2300      	movs	r3, #0
 8009514:	2502      	movs	r5, #2
 8009516:	2e00      	cmp	r6, #0
 8009518:	d17e      	bne.n	8009618 <_dtoa_r+0x4d8>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1d0      	bne.n	80094c0 <_dtoa_r+0x380>
 800951e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009520:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8084 	beq.w	8009632 <_dtoa_r+0x4f2>
 800952a:	4b96      	ldr	r3, [pc, #600]	; (8009784 <_dtoa_r+0x644>)
 800952c:	2200      	movs	r2, #0
 800952e:	4640      	mov	r0, r8
 8009530:	4649      	mov	r1, r9
 8009532:	f7f7 fad3 	bl	8000adc <__aeabi_dcmplt>
 8009536:	2800      	cmp	r0, #0
 8009538:	d07b      	beq.n	8009632 <_dtoa_r+0x4f2>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d078      	beq.n	8009632 <_dtoa_r+0x4f2>
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	dd39      	ble.n	80095ba <_dtoa_r+0x47a>
 8009546:	4b90      	ldr	r3, [pc, #576]	; (8009788 <_dtoa_r+0x648>)
 8009548:	2200      	movs	r2, #0
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f7 f853 	bl	80005f8 <__aeabi_dmul>
 8009552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009556:	9e01      	ldr	r6, [sp, #4]
 8009558:	f10b 37ff 	add.w	r7, fp, #4294967295
 800955c:	3501      	adds	r5, #1
 800955e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 ffde 	bl	8000524 <__aeabi_i2d>
 8009568:	4642      	mov	r2, r8
 800956a:	464b      	mov	r3, r9
 800956c:	f7f7 f844 	bl	80005f8 <__aeabi_dmul>
 8009570:	4b86      	ldr	r3, [pc, #536]	; (800978c <_dtoa_r+0x64c>)
 8009572:	2200      	movs	r2, #0
 8009574:	f7f6 fe8a 	bl	800028c <__adddf3>
 8009578:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800957c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009580:	9303      	str	r3, [sp, #12]
 8009582:	2e00      	cmp	r6, #0
 8009584:	d158      	bne.n	8009638 <_dtoa_r+0x4f8>
 8009586:	4b82      	ldr	r3, [pc, #520]	; (8009790 <_dtoa_r+0x650>)
 8009588:	2200      	movs	r2, #0
 800958a:	4640      	mov	r0, r8
 800958c:	4649      	mov	r1, r9
 800958e:	f7f6 fe7b 	bl	8000288 <__aeabi_dsub>
 8009592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009596:	4680      	mov	r8, r0
 8009598:	4689      	mov	r9, r1
 800959a:	f7f7 fabd 	bl	8000b18 <__aeabi_dcmpgt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f040 8296 	bne.w	8009ad0 <_dtoa_r+0x990>
 80095a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80095a8:	4640      	mov	r0, r8
 80095aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ae:	4649      	mov	r1, r9
 80095b0:	f7f7 fa94 	bl	8000adc <__aeabi_dcmplt>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f040 8289 	bne.w	8009acc <_dtoa_r+0x98c>
 80095ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80095be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f2c0 814e 	blt.w	8009862 <_dtoa_r+0x722>
 80095c6:	f1bb 0f0e 	cmp.w	fp, #14
 80095ca:	f300 814a 	bgt.w	8009862 <_dtoa_r+0x722>
 80095ce:	4b6b      	ldr	r3, [pc, #428]	; (800977c <_dtoa_r+0x63c>)
 80095d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f280 80dc 	bge.w	8009798 <_dtoa_r+0x658>
 80095e0:	9b04      	ldr	r3, [sp, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f300 80d8 	bgt.w	8009798 <_dtoa_r+0x658>
 80095e8:	f040 826f 	bne.w	8009aca <_dtoa_r+0x98a>
 80095ec:	4b68      	ldr	r3, [pc, #416]	; (8009790 <_dtoa_r+0x650>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	4640      	mov	r0, r8
 80095f2:	4649      	mov	r1, r9
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095fc:	f7f7 fa82 	bl	8000b04 <__aeabi_dcmpge>
 8009600:	9e04      	ldr	r6, [sp, #16]
 8009602:	4637      	mov	r7, r6
 8009604:	2800      	cmp	r0, #0
 8009606:	f040 8245 	bne.w	8009a94 <_dtoa_r+0x954>
 800960a:	9d00      	ldr	r5, [sp, #0]
 800960c:	2331      	movs	r3, #49	; 0x31
 800960e:	f805 3b01 	strb.w	r3, [r5], #1
 8009612:	f10b 0b01 	add.w	fp, fp, #1
 8009616:	e241      	b.n	8009a9c <_dtoa_r+0x95c>
 8009618:	07f2      	lsls	r2, r6, #31
 800961a:	d505      	bpl.n	8009628 <_dtoa_r+0x4e8>
 800961c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009620:	f7f6 ffea 	bl	80005f8 <__aeabi_dmul>
 8009624:	3501      	adds	r5, #1
 8009626:	2301      	movs	r3, #1
 8009628:	1076      	asrs	r6, r6, #1
 800962a:	3708      	adds	r7, #8
 800962c:	e773      	b.n	8009516 <_dtoa_r+0x3d6>
 800962e:	2502      	movs	r5, #2
 8009630:	e775      	b.n	800951e <_dtoa_r+0x3de>
 8009632:	9e04      	ldr	r6, [sp, #16]
 8009634:	465f      	mov	r7, fp
 8009636:	e792      	b.n	800955e <_dtoa_r+0x41e>
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	4b50      	ldr	r3, [pc, #320]	; (800977c <_dtoa_r+0x63c>)
 800963c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009640:	4431      	add	r1, r6
 8009642:	9102      	str	r1, [sp, #8]
 8009644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009646:	eeb0 9a47 	vmov.f32	s18, s14
 800964a:	eef0 9a67 	vmov.f32	s19, s15
 800964e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009652:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009656:	2900      	cmp	r1, #0
 8009658:	d044      	beq.n	80096e4 <_dtoa_r+0x5a4>
 800965a:	494e      	ldr	r1, [pc, #312]	; (8009794 <_dtoa_r+0x654>)
 800965c:	2000      	movs	r0, #0
 800965e:	f7f7 f8f5 	bl	800084c <__aeabi_ddiv>
 8009662:	ec53 2b19 	vmov	r2, r3, d9
 8009666:	f7f6 fe0f 	bl	8000288 <__aeabi_dsub>
 800966a:	9d00      	ldr	r5, [sp, #0]
 800966c:	ec41 0b19 	vmov	d9, r0, r1
 8009670:	4649      	mov	r1, r9
 8009672:	4640      	mov	r0, r8
 8009674:	f7f7 fa70 	bl	8000b58 <__aeabi_d2iz>
 8009678:	4606      	mov	r6, r0
 800967a:	f7f6 ff53 	bl	8000524 <__aeabi_i2d>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 fdff 	bl	8000288 <__aeabi_dsub>
 800968a:	3630      	adds	r6, #48	; 0x30
 800968c:	f805 6b01 	strb.w	r6, [r5], #1
 8009690:	ec53 2b19 	vmov	r2, r3, d9
 8009694:	4680      	mov	r8, r0
 8009696:	4689      	mov	r9, r1
 8009698:	f7f7 fa20 	bl	8000adc <__aeabi_dcmplt>
 800969c:	2800      	cmp	r0, #0
 800969e:	d164      	bne.n	800976a <_dtoa_r+0x62a>
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	4937      	ldr	r1, [pc, #220]	; (8009784 <_dtoa_r+0x644>)
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f6 fdee 	bl	8000288 <__aeabi_dsub>
 80096ac:	ec53 2b19 	vmov	r2, r3, d9
 80096b0:	f7f7 fa14 	bl	8000adc <__aeabi_dcmplt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f040 80b6 	bne.w	8009826 <_dtoa_r+0x6e6>
 80096ba:	9b02      	ldr	r3, [sp, #8]
 80096bc:	429d      	cmp	r5, r3
 80096be:	f43f af7c 	beq.w	80095ba <_dtoa_r+0x47a>
 80096c2:	4b31      	ldr	r3, [pc, #196]	; (8009788 <_dtoa_r+0x648>)
 80096c4:	ec51 0b19 	vmov	r0, r1, d9
 80096c8:	2200      	movs	r2, #0
 80096ca:	f7f6 ff95 	bl	80005f8 <__aeabi_dmul>
 80096ce:	4b2e      	ldr	r3, [pc, #184]	; (8009788 <_dtoa_r+0x648>)
 80096d0:	ec41 0b19 	vmov	d9, r0, r1
 80096d4:	2200      	movs	r2, #0
 80096d6:	4640      	mov	r0, r8
 80096d8:	4649      	mov	r1, r9
 80096da:	f7f6 ff8d 	bl	80005f8 <__aeabi_dmul>
 80096de:	4680      	mov	r8, r0
 80096e0:	4689      	mov	r9, r1
 80096e2:	e7c5      	b.n	8009670 <_dtoa_r+0x530>
 80096e4:	ec51 0b17 	vmov	r0, r1, d7
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	9b02      	ldr	r3, [sp, #8]
 80096ee:	9d00      	ldr	r5, [sp, #0]
 80096f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80096f2:	ec41 0b19 	vmov	d9, r0, r1
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	f7f7 fa2d 	bl	8000b58 <__aeabi_d2iz>
 80096fe:	4606      	mov	r6, r0
 8009700:	f7f6 ff10 	bl	8000524 <__aeabi_i2d>
 8009704:	3630      	adds	r6, #48	; 0x30
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f6 fdbb 	bl	8000288 <__aeabi_dsub>
 8009712:	f805 6b01 	strb.w	r6, [r5], #1
 8009716:	9b02      	ldr	r3, [sp, #8]
 8009718:	429d      	cmp	r5, r3
 800971a:	4680      	mov	r8, r0
 800971c:	4689      	mov	r9, r1
 800971e:	f04f 0200 	mov.w	r2, #0
 8009722:	d124      	bne.n	800976e <_dtoa_r+0x62e>
 8009724:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <_dtoa_r+0x654>)
 8009726:	ec51 0b19 	vmov	r0, r1, d9
 800972a:	f7f6 fdaf 	bl	800028c <__adddf3>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4640      	mov	r0, r8
 8009734:	4649      	mov	r1, r9
 8009736:	f7f7 f9ef 	bl	8000b18 <__aeabi_dcmpgt>
 800973a:	2800      	cmp	r0, #0
 800973c:	d173      	bne.n	8009826 <_dtoa_r+0x6e6>
 800973e:	ec53 2b19 	vmov	r2, r3, d9
 8009742:	4914      	ldr	r1, [pc, #80]	; (8009794 <_dtoa_r+0x654>)
 8009744:	2000      	movs	r0, #0
 8009746:	f7f6 fd9f 	bl	8000288 <__aeabi_dsub>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4640      	mov	r0, r8
 8009750:	4649      	mov	r1, r9
 8009752:	f7f7 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f43f af2f 	beq.w	80095ba <_dtoa_r+0x47a>
 800975c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800975e:	1e6b      	subs	r3, r5, #1
 8009760:	930f      	str	r3, [sp, #60]	; 0x3c
 8009762:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009766:	2b30      	cmp	r3, #48	; 0x30
 8009768:	d0f8      	beq.n	800975c <_dtoa_r+0x61c>
 800976a:	46bb      	mov	fp, r7
 800976c:	e04a      	b.n	8009804 <_dtoa_r+0x6c4>
 800976e:	4b06      	ldr	r3, [pc, #24]	; (8009788 <_dtoa_r+0x648>)
 8009770:	f7f6 ff42 	bl	80005f8 <__aeabi_dmul>
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	e7bd      	b.n	80096f6 <_dtoa_r+0x5b6>
 800977a:	bf00      	nop
 800977c:	0800cb10 	.word	0x0800cb10
 8009780:	0800cae8 	.word	0x0800cae8
 8009784:	3ff00000 	.word	0x3ff00000
 8009788:	40240000 	.word	0x40240000
 800978c:	401c0000 	.word	0x401c0000
 8009790:	40140000 	.word	0x40140000
 8009794:	3fe00000 	.word	0x3fe00000
 8009798:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800979c:	9d00      	ldr	r5, [sp, #0]
 800979e:	4642      	mov	r2, r8
 80097a0:	464b      	mov	r3, r9
 80097a2:	4630      	mov	r0, r6
 80097a4:	4639      	mov	r1, r7
 80097a6:	f7f7 f851 	bl	800084c <__aeabi_ddiv>
 80097aa:	f7f7 f9d5 	bl	8000b58 <__aeabi_d2iz>
 80097ae:	9001      	str	r0, [sp, #4]
 80097b0:	f7f6 feb8 	bl	8000524 <__aeabi_i2d>
 80097b4:	4642      	mov	r2, r8
 80097b6:	464b      	mov	r3, r9
 80097b8:	f7f6 ff1e 	bl	80005f8 <__aeabi_dmul>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f7f6 fd60 	bl	8000288 <__aeabi_dsub>
 80097c8:	9e01      	ldr	r6, [sp, #4]
 80097ca:	9f04      	ldr	r7, [sp, #16]
 80097cc:	3630      	adds	r6, #48	; 0x30
 80097ce:	f805 6b01 	strb.w	r6, [r5], #1
 80097d2:	9e00      	ldr	r6, [sp, #0]
 80097d4:	1bae      	subs	r6, r5, r6
 80097d6:	42b7      	cmp	r7, r6
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	d134      	bne.n	8009848 <_dtoa_r+0x708>
 80097de:	f7f6 fd55 	bl	800028c <__adddf3>
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	f7f7 f995 	bl	8000b18 <__aeabi_dcmpgt>
 80097ee:	b9c8      	cbnz	r0, 8009824 <_dtoa_r+0x6e4>
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	4630      	mov	r0, r6
 80097f6:	4639      	mov	r1, r7
 80097f8:	f7f7 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80097fc:	b110      	cbz	r0, 8009804 <_dtoa_r+0x6c4>
 80097fe:	9b01      	ldr	r3, [sp, #4]
 8009800:	07db      	lsls	r3, r3, #31
 8009802:	d40f      	bmi.n	8009824 <_dtoa_r+0x6e4>
 8009804:	4651      	mov	r1, sl
 8009806:	4620      	mov	r0, r4
 8009808:	f000 ff36 	bl	800a678 <_Bfree>
 800980c:	2300      	movs	r3, #0
 800980e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009810:	702b      	strb	r3, [r5, #0]
 8009812:	f10b 0301 	add.w	r3, fp, #1
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800981a:	2b00      	cmp	r3, #0
 800981c:	f43f ace2 	beq.w	80091e4 <_dtoa_r+0xa4>
 8009820:	601d      	str	r5, [r3, #0]
 8009822:	e4df      	b.n	80091e4 <_dtoa_r+0xa4>
 8009824:	465f      	mov	r7, fp
 8009826:	462b      	mov	r3, r5
 8009828:	461d      	mov	r5, r3
 800982a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800982e:	2a39      	cmp	r2, #57	; 0x39
 8009830:	d106      	bne.n	8009840 <_dtoa_r+0x700>
 8009832:	9a00      	ldr	r2, [sp, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d1f7      	bne.n	8009828 <_dtoa_r+0x6e8>
 8009838:	9900      	ldr	r1, [sp, #0]
 800983a:	2230      	movs	r2, #48	; 0x30
 800983c:	3701      	adds	r7, #1
 800983e:	700a      	strb	r2, [r1, #0]
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	3201      	adds	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	e790      	b.n	800976a <_dtoa_r+0x62a>
 8009848:	4ba3      	ldr	r3, [pc, #652]	; (8009ad8 <_dtoa_r+0x998>)
 800984a:	2200      	movs	r2, #0
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	2200      	movs	r2, #0
 8009852:	2300      	movs	r3, #0
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	f7f7 f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800985c:	2800      	cmp	r0, #0
 800985e:	d09e      	beq.n	800979e <_dtoa_r+0x65e>
 8009860:	e7d0      	b.n	8009804 <_dtoa_r+0x6c4>
 8009862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009864:	2a00      	cmp	r2, #0
 8009866:	f000 80ca 	beq.w	80099fe <_dtoa_r+0x8be>
 800986a:	9a07      	ldr	r2, [sp, #28]
 800986c:	2a01      	cmp	r2, #1
 800986e:	f300 80ad 	bgt.w	80099cc <_dtoa_r+0x88c>
 8009872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009874:	2a00      	cmp	r2, #0
 8009876:	f000 80a5 	beq.w	80099c4 <_dtoa_r+0x884>
 800987a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800987e:	9e08      	ldr	r6, [sp, #32]
 8009880:	9d05      	ldr	r5, [sp, #20]
 8009882:	9a05      	ldr	r2, [sp, #20]
 8009884:	441a      	add	r2, r3
 8009886:	9205      	str	r2, [sp, #20]
 8009888:	9a06      	ldr	r2, [sp, #24]
 800988a:	2101      	movs	r1, #1
 800988c:	441a      	add	r2, r3
 800988e:	4620      	mov	r0, r4
 8009890:	9206      	str	r2, [sp, #24]
 8009892:	f000 fff1 	bl	800a878 <__i2b>
 8009896:	4607      	mov	r7, r0
 8009898:	b165      	cbz	r5, 80098b4 <_dtoa_r+0x774>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	dd09      	ble.n	80098b4 <_dtoa_r+0x774>
 80098a0:	42ab      	cmp	r3, r5
 80098a2:	9a05      	ldr	r2, [sp, #20]
 80098a4:	bfa8      	it	ge
 80098a6:	462b      	movge	r3, r5
 80098a8:	1ad2      	subs	r2, r2, r3
 80098aa:	9205      	str	r2, [sp, #20]
 80098ac:	9a06      	ldr	r2, [sp, #24]
 80098ae:	1aed      	subs	r5, r5, r3
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	9306      	str	r3, [sp, #24]
 80098b4:	9b08      	ldr	r3, [sp, #32]
 80098b6:	b1f3      	cbz	r3, 80098f6 <_dtoa_r+0x7b6>
 80098b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 80a3 	beq.w	8009a06 <_dtoa_r+0x8c6>
 80098c0:	2e00      	cmp	r6, #0
 80098c2:	dd10      	ble.n	80098e6 <_dtoa_r+0x7a6>
 80098c4:	4639      	mov	r1, r7
 80098c6:	4632      	mov	r2, r6
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 f895 	bl	800a9f8 <__pow5mult>
 80098ce:	4652      	mov	r2, sl
 80098d0:	4601      	mov	r1, r0
 80098d2:	4607      	mov	r7, r0
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 ffe5 	bl	800a8a4 <__multiply>
 80098da:	4651      	mov	r1, sl
 80098dc:	4680      	mov	r8, r0
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 feca 	bl	800a678 <_Bfree>
 80098e4:	46c2      	mov	sl, r8
 80098e6:	9b08      	ldr	r3, [sp, #32]
 80098e8:	1b9a      	subs	r2, r3, r6
 80098ea:	d004      	beq.n	80098f6 <_dtoa_r+0x7b6>
 80098ec:	4651      	mov	r1, sl
 80098ee:	4620      	mov	r0, r4
 80098f0:	f001 f882 	bl	800a9f8 <__pow5mult>
 80098f4:	4682      	mov	sl, r0
 80098f6:	2101      	movs	r1, #1
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 ffbd 	bl	800a878 <__i2b>
 80098fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	4606      	mov	r6, r0
 8009904:	f340 8081 	ble.w	8009a0a <_dtoa_r+0x8ca>
 8009908:	461a      	mov	r2, r3
 800990a:	4601      	mov	r1, r0
 800990c:	4620      	mov	r0, r4
 800990e:	f001 f873 	bl	800a9f8 <__pow5mult>
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	2b01      	cmp	r3, #1
 8009916:	4606      	mov	r6, r0
 8009918:	dd7a      	ble.n	8009a10 <_dtoa_r+0x8d0>
 800991a:	f04f 0800 	mov.w	r8, #0
 800991e:	6933      	ldr	r3, [r6, #16]
 8009920:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009924:	6918      	ldr	r0, [r3, #16]
 8009926:	f000 ff59 	bl	800a7dc <__hi0bits>
 800992a:	f1c0 0020 	rsb	r0, r0, #32
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	4418      	add	r0, r3
 8009932:	f010 001f 	ands.w	r0, r0, #31
 8009936:	f000 8094 	beq.w	8009a62 <_dtoa_r+0x922>
 800993a:	f1c0 0320 	rsb	r3, r0, #32
 800993e:	2b04      	cmp	r3, #4
 8009940:	f340 8085 	ble.w	8009a4e <_dtoa_r+0x90e>
 8009944:	9b05      	ldr	r3, [sp, #20]
 8009946:	f1c0 001c 	rsb	r0, r0, #28
 800994a:	4403      	add	r3, r0
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	4403      	add	r3, r0
 8009952:	4405      	add	r5, r0
 8009954:	9306      	str	r3, [sp, #24]
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	dd05      	ble.n	8009968 <_dtoa_r+0x828>
 800995c:	4651      	mov	r1, sl
 800995e:	461a      	mov	r2, r3
 8009960:	4620      	mov	r0, r4
 8009962:	f001 f8a3 	bl	800aaac <__lshift>
 8009966:	4682      	mov	sl, r0
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dd05      	ble.n	800997a <_dtoa_r+0x83a>
 800996e:	4631      	mov	r1, r6
 8009970:	461a      	mov	r2, r3
 8009972:	4620      	mov	r0, r4
 8009974:	f001 f89a 	bl	800aaac <__lshift>
 8009978:	4606      	mov	r6, r0
 800997a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800997c:	2b00      	cmp	r3, #0
 800997e:	d072      	beq.n	8009a66 <_dtoa_r+0x926>
 8009980:	4631      	mov	r1, r6
 8009982:	4650      	mov	r0, sl
 8009984:	f001 f8fe 	bl	800ab84 <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	da6c      	bge.n	8009a66 <_dtoa_r+0x926>
 800998c:	2300      	movs	r3, #0
 800998e:	4651      	mov	r1, sl
 8009990:	220a      	movs	r2, #10
 8009992:	4620      	mov	r0, r4
 8009994:	f000 fe92 	bl	800a6bc <__multadd>
 8009998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800999a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800999e:	4682      	mov	sl, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 81b0 	beq.w	8009d06 <_dtoa_r+0xbc6>
 80099a6:	2300      	movs	r3, #0
 80099a8:	4639      	mov	r1, r7
 80099aa:	220a      	movs	r2, #10
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 fe85 	bl	800a6bc <__multadd>
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	4607      	mov	r7, r0
 80099b8:	f300 8096 	bgt.w	8009ae8 <_dtoa_r+0x9a8>
 80099bc:	9b07      	ldr	r3, [sp, #28]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dc59      	bgt.n	8009a76 <_dtoa_r+0x936>
 80099c2:	e091      	b.n	8009ae8 <_dtoa_r+0x9a8>
 80099c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099ca:	e758      	b.n	800987e <_dtoa_r+0x73e>
 80099cc:	9b04      	ldr	r3, [sp, #16]
 80099ce:	1e5e      	subs	r6, r3, #1
 80099d0:	9b08      	ldr	r3, [sp, #32]
 80099d2:	42b3      	cmp	r3, r6
 80099d4:	bfbf      	itttt	lt
 80099d6:	9b08      	ldrlt	r3, [sp, #32]
 80099d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80099da:	9608      	strlt	r6, [sp, #32]
 80099dc:	1af3      	sublt	r3, r6, r3
 80099de:	bfb4      	ite	lt
 80099e0:	18d2      	addlt	r2, r2, r3
 80099e2:	1b9e      	subge	r6, r3, r6
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	bfbc      	itt	lt
 80099e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80099ea:	2600      	movlt	r6, #0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfb7      	itett	lt
 80099f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80099f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80099f8:	1a9d      	sublt	r5, r3, r2
 80099fa:	2300      	movlt	r3, #0
 80099fc:	e741      	b.n	8009882 <_dtoa_r+0x742>
 80099fe:	9e08      	ldr	r6, [sp, #32]
 8009a00:	9d05      	ldr	r5, [sp, #20]
 8009a02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a04:	e748      	b.n	8009898 <_dtoa_r+0x758>
 8009a06:	9a08      	ldr	r2, [sp, #32]
 8009a08:	e770      	b.n	80098ec <_dtoa_r+0x7ac>
 8009a0a:	9b07      	ldr	r3, [sp, #28]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	dc19      	bgt.n	8009a44 <_dtoa_r+0x904>
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	b9bb      	cbnz	r3, 8009a44 <_dtoa_r+0x904>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a1a:	b99b      	cbnz	r3, 8009a44 <_dtoa_r+0x904>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a22:	0d1b      	lsrs	r3, r3, #20
 8009a24:	051b      	lsls	r3, r3, #20
 8009a26:	b183      	cbz	r3, 8009a4a <_dtoa_r+0x90a>
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	9305      	str	r3, [sp, #20]
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	3301      	adds	r3, #1
 8009a32:	9306      	str	r3, [sp, #24]
 8009a34:	f04f 0801 	mov.w	r8, #1
 8009a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f47f af6f 	bne.w	800991e <_dtoa_r+0x7de>
 8009a40:	2001      	movs	r0, #1
 8009a42:	e774      	b.n	800992e <_dtoa_r+0x7ee>
 8009a44:	f04f 0800 	mov.w	r8, #0
 8009a48:	e7f6      	b.n	8009a38 <_dtoa_r+0x8f8>
 8009a4a:	4698      	mov	r8, r3
 8009a4c:	e7f4      	b.n	8009a38 <_dtoa_r+0x8f8>
 8009a4e:	d082      	beq.n	8009956 <_dtoa_r+0x816>
 8009a50:	9a05      	ldr	r2, [sp, #20]
 8009a52:	331c      	adds	r3, #28
 8009a54:	441a      	add	r2, r3
 8009a56:	9205      	str	r2, [sp, #20]
 8009a58:	9a06      	ldr	r2, [sp, #24]
 8009a5a:	441a      	add	r2, r3
 8009a5c:	441d      	add	r5, r3
 8009a5e:	9206      	str	r2, [sp, #24]
 8009a60:	e779      	b.n	8009956 <_dtoa_r+0x816>
 8009a62:	4603      	mov	r3, r0
 8009a64:	e7f4      	b.n	8009a50 <_dtoa_r+0x910>
 8009a66:	9b04      	ldr	r3, [sp, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dc37      	bgt.n	8009adc <_dtoa_r+0x99c>
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	dd34      	ble.n	8009adc <_dtoa_r+0x99c>
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	b963      	cbnz	r3, 8009a94 <_dtoa_r+0x954>
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	2205      	movs	r2, #5
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fe1c 	bl	800a6bc <__multadd>
 8009a84:	4601      	mov	r1, r0
 8009a86:	4606      	mov	r6, r0
 8009a88:	4650      	mov	r0, sl
 8009a8a:	f001 f87b 	bl	800ab84 <__mcmp>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f73f adbb 	bgt.w	800960a <_dtoa_r+0x4ca>
 8009a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a96:	9d00      	ldr	r5, [sp, #0]
 8009a98:	ea6f 0b03 	mvn.w	fp, r3
 8009a9c:	f04f 0800 	mov.w	r8, #0
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fde8 	bl	800a678 <_Bfree>
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	f43f aeab 	beq.w	8009804 <_dtoa_r+0x6c4>
 8009aae:	f1b8 0f00 	cmp.w	r8, #0
 8009ab2:	d005      	beq.n	8009ac0 <_dtoa_r+0x980>
 8009ab4:	45b8      	cmp	r8, r7
 8009ab6:	d003      	beq.n	8009ac0 <_dtoa_r+0x980>
 8009ab8:	4641      	mov	r1, r8
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 fddc 	bl	800a678 <_Bfree>
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fdd8 	bl	800a678 <_Bfree>
 8009ac8:	e69c      	b.n	8009804 <_dtoa_r+0x6c4>
 8009aca:	2600      	movs	r6, #0
 8009acc:	4637      	mov	r7, r6
 8009ace:	e7e1      	b.n	8009a94 <_dtoa_r+0x954>
 8009ad0:	46bb      	mov	fp, r7
 8009ad2:	4637      	mov	r7, r6
 8009ad4:	e599      	b.n	800960a <_dtoa_r+0x4ca>
 8009ad6:	bf00      	nop
 8009ad8:	40240000 	.word	0x40240000
 8009adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 80c8 	beq.w	8009c74 <_dtoa_r+0xb34>
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	2d00      	cmp	r5, #0
 8009aea:	dd05      	ble.n	8009af8 <_dtoa_r+0x9b8>
 8009aec:	4639      	mov	r1, r7
 8009aee:	462a      	mov	r2, r5
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 ffdb 	bl	800aaac <__lshift>
 8009af6:	4607      	mov	r7, r0
 8009af8:	f1b8 0f00 	cmp.w	r8, #0
 8009afc:	d05b      	beq.n	8009bb6 <_dtoa_r+0xa76>
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	4620      	mov	r0, r4
 8009b02:	f000 fd79 	bl	800a5f8 <_Balloc>
 8009b06:	4605      	mov	r5, r0
 8009b08:	b928      	cbnz	r0, 8009b16 <_dtoa_r+0x9d6>
 8009b0a:	4b83      	ldr	r3, [pc, #524]	; (8009d18 <_dtoa_r+0xbd8>)
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009b12:	f7ff bb2e 	b.w	8009172 <_dtoa_r+0x32>
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	3202      	adds	r2, #2
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	f107 010c 	add.w	r1, r7, #12
 8009b20:	300c      	adds	r0, #12
 8009b22:	f7ff fa48 	bl	8008fb6 <memcpy>
 8009b26:	2201      	movs	r2, #1
 8009b28:	4629      	mov	r1, r5
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 ffbe 	bl	800aaac <__lshift>
 8009b30:	9b00      	ldr	r3, [sp, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	9308      	str	r3, [sp, #32]
 8009b3e:	9b02      	ldr	r3, [sp, #8]
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	46b8      	mov	r8, r7
 8009b46:	9306      	str	r3, [sp, #24]
 8009b48:	4607      	mov	r7, r0
 8009b4a:	9b04      	ldr	r3, [sp, #16]
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	4650      	mov	r0, sl
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	f7ff fa6c 	bl	8009030 <quorem>
 8009b58:	4641      	mov	r1, r8
 8009b5a:	9002      	str	r0, [sp, #8]
 8009b5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b60:	4650      	mov	r0, sl
 8009b62:	f001 f80f 	bl	800ab84 <__mcmp>
 8009b66:	463a      	mov	r2, r7
 8009b68:	9005      	str	r0, [sp, #20]
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f001 f825 	bl	800abbc <__mdiff>
 8009b72:	68c2      	ldr	r2, [r0, #12]
 8009b74:	4605      	mov	r5, r0
 8009b76:	bb02      	cbnz	r2, 8009bba <_dtoa_r+0xa7a>
 8009b78:	4601      	mov	r1, r0
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	f001 f802 	bl	800ab84 <__mcmp>
 8009b80:	4602      	mov	r2, r0
 8009b82:	4629      	mov	r1, r5
 8009b84:	4620      	mov	r0, r4
 8009b86:	9209      	str	r2, [sp, #36]	; 0x24
 8009b88:	f000 fd76 	bl	800a678 <_Bfree>
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b90:	9d04      	ldr	r5, [sp, #16]
 8009b92:	ea43 0102 	orr.w	r1, r3, r2
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	4319      	orrs	r1, r3
 8009b9a:	d110      	bne.n	8009bbe <_dtoa_r+0xa7e>
 8009b9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ba0:	d029      	beq.n	8009bf6 <_dtoa_r+0xab6>
 8009ba2:	9b05      	ldr	r3, [sp, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	dd02      	ble.n	8009bae <_dtoa_r+0xa6e>
 8009ba8:	9b02      	ldr	r3, [sp, #8]
 8009baa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009bae:	9b01      	ldr	r3, [sp, #4]
 8009bb0:	f883 9000 	strb.w	r9, [r3]
 8009bb4:	e774      	b.n	8009aa0 <_dtoa_r+0x960>
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	e7ba      	b.n	8009b30 <_dtoa_r+0x9f0>
 8009bba:	2201      	movs	r2, #1
 8009bbc:	e7e1      	b.n	8009b82 <_dtoa_r+0xa42>
 8009bbe:	9b05      	ldr	r3, [sp, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db04      	blt.n	8009bce <_dtoa_r+0xa8e>
 8009bc4:	9907      	ldr	r1, [sp, #28]
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	9906      	ldr	r1, [sp, #24]
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	d120      	bne.n	8009c10 <_dtoa_r+0xad0>
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	dded      	ble.n	8009bae <_dtoa_r+0xa6e>
 8009bd2:	4651      	mov	r1, sl
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f000 ff68 	bl	800aaac <__lshift>
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4682      	mov	sl, r0
 8009be0:	f000 ffd0 	bl	800ab84 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	dc03      	bgt.n	8009bf0 <_dtoa_r+0xab0>
 8009be8:	d1e1      	bne.n	8009bae <_dtoa_r+0xa6e>
 8009bea:	f019 0f01 	tst.w	r9, #1
 8009bee:	d0de      	beq.n	8009bae <_dtoa_r+0xa6e>
 8009bf0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009bf4:	d1d8      	bne.n	8009ba8 <_dtoa_r+0xa68>
 8009bf6:	9a01      	ldr	r2, [sp, #4]
 8009bf8:	2339      	movs	r3, #57	; 0x39
 8009bfa:	7013      	strb	r3, [r2, #0]
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	461d      	mov	r5, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009c06:	2a39      	cmp	r2, #57	; 0x39
 8009c08:	d06c      	beq.n	8009ce4 <_dtoa_r+0xba4>
 8009c0a:	3201      	adds	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
 8009c0e:	e747      	b.n	8009aa0 <_dtoa_r+0x960>
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	dd07      	ble.n	8009c24 <_dtoa_r+0xae4>
 8009c14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c18:	d0ed      	beq.n	8009bf6 <_dtoa_r+0xab6>
 8009c1a:	9a01      	ldr	r2, [sp, #4]
 8009c1c:	f109 0301 	add.w	r3, r9, #1
 8009c20:	7013      	strb	r3, [r2, #0]
 8009c22:	e73d      	b.n	8009aa0 <_dtoa_r+0x960>
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	9a08      	ldr	r2, [sp, #32]
 8009c28:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d043      	beq.n	8009cb8 <_dtoa_r+0xb78>
 8009c30:	4651      	mov	r1, sl
 8009c32:	2300      	movs	r3, #0
 8009c34:	220a      	movs	r2, #10
 8009c36:	4620      	mov	r0, r4
 8009c38:	f000 fd40 	bl	800a6bc <__multadd>
 8009c3c:	45b8      	cmp	r8, r7
 8009c3e:	4682      	mov	sl, r0
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	f04f 020a 	mov.w	r2, #10
 8009c48:	4641      	mov	r1, r8
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	d107      	bne.n	8009c5e <_dtoa_r+0xb1e>
 8009c4e:	f000 fd35 	bl	800a6bc <__multadd>
 8009c52:	4680      	mov	r8, r0
 8009c54:	4607      	mov	r7, r0
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	9304      	str	r3, [sp, #16]
 8009c5c:	e775      	b.n	8009b4a <_dtoa_r+0xa0a>
 8009c5e:	f000 fd2d 	bl	800a6bc <__multadd>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4680      	mov	r8, r0
 8009c66:	2300      	movs	r3, #0
 8009c68:	220a      	movs	r2, #10
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 fd26 	bl	800a6bc <__multadd>
 8009c70:	4607      	mov	r7, r0
 8009c72:	e7f0      	b.n	8009c56 <_dtoa_r+0xb16>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	9d00      	ldr	r5, [sp, #0]
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	f7ff f9d7 	bl	8009030 <quorem>
 8009c82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c86:	9b00      	ldr	r3, [sp, #0]
 8009c88:	f805 9b01 	strb.w	r9, [r5], #1
 8009c8c:	1aea      	subs	r2, r5, r3
 8009c8e:	9b01      	ldr	r3, [sp, #4]
 8009c90:	4293      	cmp	r3, r2
 8009c92:	dd07      	ble.n	8009ca4 <_dtoa_r+0xb64>
 8009c94:	4651      	mov	r1, sl
 8009c96:	2300      	movs	r3, #0
 8009c98:	220a      	movs	r2, #10
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f000 fd0e 	bl	800a6bc <__multadd>
 8009ca0:	4682      	mov	sl, r0
 8009ca2:	e7ea      	b.n	8009c7a <_dtoa_r+0xb3a>
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfc8      	it	gt
 8009caa:	461d      	movgt	r5, r3
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	bfd8      	it	le
 8009cb0:	2501      	movle	r5, #1
 8009cb2:	441d      	add	r5, r3
 8009cb4:	f04f 0800 	mov.w	r8, #0
 8009cb8:	4651      	mov	r1, sl
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fef5 	bl	800aaac <__lshift>
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	f000 ff5d 	bl	800ab84 <__mcmp>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	dc96      	bgt.n	8009bfc <_dtoa_r+0xabc>
 8009cce:	d102      	bne.n	8009cd6 <_dtoa_r+0xb96>
 8009cd0:	f019 0f01 	tst.w	r9, #1
 8009cd4:	d192      	bne.n	8009bfc <_dtoa_r+0xabc>
 8009cd6:	462b      	mov	r3, r5
 8009cd8:	461d      	mov	r5, r3
 8009cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cde:	2a30      	cmp	r2, #48	; 0x30
 8009ce0:	d0fa      	beq.n	8009cd8 <_dtoa_r+0xb98>
 8009ce2:	e6dd      	b.n	8009aa0 <_dtoa_r+0x960>
 8009ce4:	9a00      	ldr	r2, [sp, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d189      	bne.n	8009bfe <_dtoa_r+0xabe>
 8009cea:	f10b 0b01 	add.w	fp, fp, #1
 8009cee:	2331      	movs	r3, #49	; 0x31
 8009cf0:	e796      	b.n	8009c20 <_dtoa_r+0xae0>
 8009cf2:	4b0a      	ldr	r3, [pc, #40]	; (8009d1c <_dtoa_r+0xbdc>)
 8009cf4:	f7ff ba99 	b.w	800922a <_dtoa_r+0xea>
 8009cf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f47f aa6d 	bne.w	80091da <_dtoa_r+0x9a>
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <_dtoa_r+0xbe0>)
 8009d02:	f7ff ba92 	b.w	800922a <_dtoa_r+0xea>
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dcb5      	bgt.n	8009c78 <_dtoa_r+0xb38>
 8009d0c:	9b07      	ldr	r3, [sp, #28]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	f73f aeb1 	bgt.w	8009a76 <_dtoa_r+0x936>
 8009d14:	e7b0      	b.n	8009c78 <_dtoa_r+0xb38>
 8009d16:	bf00      	nop
 8009d18:	0800ca1c 	.word	0x0800ca1c
 8009d1c:	0800c8d9 	.word	0x0800c8d9
 8009d20:	0800c9b7 	.word	0x0800c9b7

08009d24 <_free_r>:
 8009d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d044      	beq.n	8009db4 <_free_r+0x90>
 8009d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d2e:	9001      	str	r0, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f1a1 0404 	sub.w	r4, r1, #4
 8009d36:	bfb8      	it	lt
 8009d38:	18e4      	addlt	r4, r4, r3
 8009d3a:	f000 fc51 	bl	800a5e0 <__malloc_lock>
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	; (8009db8 <_free_r+0x94>)
 8009d40:	9801      	ldr	r0, [sp, #4]
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	b933      	cbnz	r3, 8009d54 <_free_r+0x30>
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6014      	str	r4, [r2, #0]
 8009d4a:	b003      	add	sp, #12
 8009d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d50:	f000 bc4c 	b.w	800a5ec <__malloc_unlock>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x46>
 8009d58:	6825      	ldr	r5, [r4, #0]
 8009d5a:	1961      	adds	r1, r4, r5
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf01      	itttt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	1949      	addeq	r1, r1, r5
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	e7ed      	b.n	8009d46 <_free_r+0x22>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b10b      	cbz	r3, 8009d74 <_free_r+0x50>
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x46>
 8009d74:	6811      	ldr	r1, [r2, #0]
 8009d76:	1855      	adds	r5, r2, r1
 8009d78:	42a5      	cmp	r5, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x70>
 8009d7c:	6824      	ldr	r4, [r4, #0]
 8009d7e:	4421      	add	r1, r4
 8009d80:	1854      	adds	r4, r2, r1
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	d1e0      	bne.n	8009d4a <_free_r+0x26>
 8009d88:	681c      	ldr	r4, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	6053      	str	r3, [r2, #4]
 8009d8e:	440c      	add	r4, r1
 8009d90:	6014      	str	r4, [r2, #0]
 8009d92:	e7da      	b.n	8009d4a <_free_r+0x26>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x78>
 8009d96:	230c      	movs	r3, #12
 8009d98:	6003      	str	r3, [r0, #0]
 8009d9a:	e7d6      	b.n	8009d4a <_free_r+0x26>
 8009d9c:	6825      	ldr	r5, [r4, #0]
 8009d9e:	1961      	adds	r1, r4, r5
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf04      	itt	eq
 8009da4:	6819      	ldreq	r1, [r3, #0]
 8009da6:	685b      	ldreq	r3, [r3, #4]
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	bf04      	itt	eq
 8009dac:	1949      	addeq	r1, r1, r5
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	6054      	str	r4, [r2, #4]
 8009db2:	e7ca      	b.n	8009d4a <_free_r+0x26>
 8009db4:	b003      	add	sp, #12
 8009db6:	bd30      	pop	{r4, r5, pc}
 8009db8:	200004e4 	.word	0x200004e4

08009dbc <rshift>:
 8009dbc:	6903      	ldr	r3, [r0, #16]
 8009dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dca:	f100 0414 	add.w	r4, r0, #20
 8009dce:	dd45      	ble.n	8009e5c <rshift+0xa0>
 8009dd0:	f011 011f 	ands.w	r1, r1, #31
 8009dd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ddc:	d10c      	bne.n	8009df8 <rshift+0x3c>
 8009dde:	f100 0710 	add.w	r7, r0, #16
 8009de2:	4629      	mov	r1, r5
 8009de4:	42b1      	cmp	r1, r6
 8009de6:	d334      	bcc.n	8009e52 <rshift+0x96>
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	1eea      	subs	r2, r5, #3
 8009dee:	4296      	cmp	r6, r2
 8009df0:	bf38      	it	cc
 8009df2:	2300      	movcc	r3, #0
 8009df4:	4423      	add	r3, r4
 8009df6:	e015      	b.n	8009e24 <rshift+0x68>
 8009df8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009dfc:	f1c1 0820 	rsb	r8, r1, #32
 8009e00:	40cf      	lsrs	r7, r1
 8009e02:	f105 0e04 	add.w	lr, r5, #4
 8009e06:	46a1      	mov	r9, r4
 8009e08:	4576      	cmp	r6, lr
 8009e0a:	46f4      	mov	ip, lr
 8009e0c:	d815      	bhi.n	8009e3a <rshift+0x7e>
 8009e0e:	1a9a      	subs	r2, r3, r2
 8009e10:	0092      	lsls	r2, r2, #2
 8009e12:	3a04      	subs	r2, #4
 8009e14:	3501      	adds	r5, #1
 8009e16:	42ae      	cmp	r6, r5
 8009e18:	bf38      	it	cc
 8009e1a:	2200      	movcc	r2, #0
 8009e1c:	18a3      	adds	r3, r4, r2
 8009e1e:	50a7      	str	r7, [r4, r2]
 8009e20:	b107      	cbz	r7, 8009e24 <rshift+0x68>
 8009e22:	3304      	adds	r3, #4
 8009e24:	1b1a      	subs	r2, r3, r4
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e2c:	bf08      	it	eq
 8009e2e:	2300      	moveq	r3, #0
 8009e30:	6102      	str	r2, [r0, #16]
 8009e32:	bf08      	it	eq
 8009e34:	6143      	streq	r3, [r0, #20]
 8009e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e3a:	f8dc c000 	ldr.w	ip, [ip]
 8009e3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e42:	ea4c 0707 	orr.w	r7, ip, r7
 8009e46:	f849 7b04 	str.w	r7, [r9], #4
 8009e4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e4e:	40cf      	lsrs	r7, r1
 8009e50:	e7da      	b.n	8009e08 <rshift+0x4c>
 8009e52:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e56:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e5a:	e7c3      	b.n	8009de4 <rshift+0x28>
 8009e5c:	4623      	mov	r3, r4
 8009e5e:	e7e1      	b.n	8009e24 <rshift+0x68>

08009e60 <__hexdig_fun>:
 8009e60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e64:	2b09      	cmp	r3, #9
 8009e66:	d802      	bhi.n	8009e6e <__hexdig_fun+0xe>
 8009e68:	3820      	subs	r0, #32
 8009e6a:	b2c0      	uxtb	r0, r0
 8009e6c:	4770      	bx	lr
 8009e6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e72:	2b05      	cmp	r3, #5
 8009e74:	d801      	bhi.n	8009e7a <__hexdig_fun+0x1a>
 8009e76:	3847      	subs	r0, #71	; 0x47
 8009e78:	e7f7      	b.n	8009e6a <__hexdig_fun+0xa>
 8009e7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e7e:	2b05      	cmp	r3, #5
 8009e80:	d801      	bhi.n	8009e86 <__hexdig_fun+0x26>
 8009e82:	3827      	subs	r0, #39	; 0x27
 8009e84:	e7f1      	b.n	8009e6a <__hexdig_fun+0xa>
 8009e86:	2000      	movs	r0, #0
 8009e88:	4770      	bx	lr
	...

08009e8c <__gethex>:
 8009e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	4617      	mov	r7, r2
 8009e92:	680a      	ldr	r2, [r1, #0]
 8009e94:	b085      	sub	sp, #20
 8009e96:	f102 0b02 	add.w	fp, r2, #2
 8009e9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ea2:	4681      	mov	r9, r0
 8009ea4:	468a      	mov	sl, r1
 8009ea6:	9302      	str	r3, [sp, #8]
 8009ea8:	32fe      	adds	r2, #254	; 0xfe
 8009eaa:	eb02 030b 	add.w	r3, r2, fp
 8009eae:	46d8      	mov	r8, fp
 8009eb0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	2830      	cmp	r0, #48	; 0x30
 8009eb8:	d0f7      	beq.n	8009eaa <__gethex+0x1e>
 8009eba:	f7ff ffd1 	bl	8009e60 <__hexdig_fun>
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d138      	bne.n	8009f36 <__gethex+0xaa>
 8009ec4:	49a7      	ldr	r1, [pc, #668]	; (800a164 <__gethex+0x2d8>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	4640      	mov	r0, r8
 8009eca:	f7fe ff7b 	bl	8008dc4 <strncmp>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	d169      	bne.n	8009fa8 <__gethex+0x11c>
 8009ed4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009ed8:	465d      	mov	r5, fp
 8009eda:	f7ff ffc1 	bl	8009e60 <__hexdig_fun>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d064      	beq.n	8009fac <__gethex+0x120>
 8009ee2:	465a      	mov	r2, fp
 8009ee4:	7810      	ldrb	r0, [r2, #0]
 8009ee6:	2830      	cmp	r0, #48	; 0x30
 8009ee8:	4690      	mov	r8, r2
 8009eea:	f102 0201 	add.w	r2, r2, #1
 8009eee:	d0f9      	beq.n	8009ee4 <__gethex+0x58>
 8009ef0:	f7ff ffb6 	bl	8009e60 <__hexdig_fun>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	fab0 f480 	clz	r4, r0
 8009efa:	0964      	lsrs	r4, r4, #5
 8009efc:	465e      	mov	r6, fp
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	4642      	mov	r2, r8
 8009f02:	4615      	mov	r5, r2
 8009f04:	3201      	adds	r2, #1
 8009f06:	7828      	ldrb	r0, [r5, #0]
 8009f08:	f7ff ffaa 	bl	8009e60 <__hexdig_fun>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d1f8      	bne.n	8009f02 <__gethex+0x76>
 8009f10:	4994      	ldr	r1, [pc, #592]	; (800a164 <__gethex+0x2d8>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	4628      	mov	r0, r5
 8009f16:	f7fe ff55 	bl	8008dc4 <strncmp>
 8009f1a:	b978      	cbnz	r0, 8009f3c <__gethex+0xb0>
 8009f1c:	b946      	cbnz	r6, 8009f30 <__gethex+0xa4>
 8009f1e:	1c6e      	adds	r6, r5, #1
 8009f20:	4632      	mov	r2, r6
 8009f22:	4615      	mov	r5, r2
 8009f24:	3201      	adds	r2, #1
 8009f26:	7828      	ldrb	r0, [r5, #0]
 8009f28:	f7ff ff9a 	bl	8009e60 <__hexdig_fun>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1f8      	bne.n	8009f22 <__gethex+0x96>
 8009f30:	1b73      	subs	r3, r6, r5
 8009f32:	009e      	lsls	r6, r3, #2
 8009f34:	e004      	b.n	8009f40 <__gethex+0xb4>
 8009f36:	2400      	movs	r4, #0
 8009f38:	4626      	mov	r6, r4
 8009f3a:	e7e1      	b.n	8009f00 <__gethex+0x74>
 8009f3c:	2e00      	cmp	r6, #0
 8009f3e:	d1f7      	bne.n	8009f30 <__gethex+0xa4>
 8009f40:	782b      	ldrb	r3, [r5, #0]
 8009f42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f46:	2b50      	cmp	r3, #80	; 0x50
 8009f48:	d13d      	bne.n	8009fc6 <__gethex+0x13a>
 8009f4a:	786b      	ldrb	r3, [r5, #1]
 8009f4c:	2b2b      	cmp	r3, #43	; 0x2b
 8009f4e:	d02f      	beq.n	8009fb0 <__gethex+0x124>
 8009f50:	2b2d      	cmp	r3, #45	; 0x2d
 8009f52:	d031      	beq.n	8009fb8 <__gethex+0x12c>
 8009f54:	1c69      	adds	r1, r5, #1
 8009f56:	f04f 0b00 	mov.w	fp, #0
 8009f5a:	7808      	ldrb	r0, [r1, #0]
 8009f5c:	f7ff ff80 	bl	8009e60 <__hexdig_fun>
 8009f60:	1e42      	subs	r2, r0, #1
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	2a18      	cmp	r2, #24
 8009f66:	d82e      	bhi.n	8009fc6 <__gethex+0x13a>
 8009f68:	f1a0 0210 	sub.w	r2, r0, #16
 8009f6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f70:	f7ff ff76 	bl	8009e60 <__hexdig_fun>
 8009f74:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f78:	fa5f fc8c 	uxtb.w	ip, ip
 8009f7c:	f1bc 0f18 	cmp.w	ip, #24
 8009f80:	d91d      	bls.n	8009fbe <__gethex+0x132>
 8009f82:	f1bb 0f00 	cmp.w	fp, #0
 8009f86:	d000      	beq.n	8009f8a <__gethex+0xfe>
 8009f88:	4252      	negs	r2, r2
 8009f8a:	4416      	add	r6, r2
 8009f8c:	f8ca 1000 	str.w	r1, [sl]
 8009f90:	b1dc      	cbz	r4, 8009fca <__gethex+0x13e>
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bf14      	ite	ne
 8009f98:	f04f 0800 	movne.w	r8, #0
 8009f9c:	f04f 0806 	moveq.w	r8, #6
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	b005      	add	sp, #20
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	4645      	mov	r5, r8
 8009faa:	4626      	mov	r6, r4
 8009fac:	2401      	movs	r4, #1
 8009fae:	e7c7      	b.n	8009f40 <__gethex+0xb4>
 8009fb0:	f04f 0b00 	mov.w	fp, #0
 8009fb4:	1ca9      	adds	r1, r5, #2
 8009fb6:	e7d0      	b.n	8009f5a <__gethex+0xce>
 8009fb8:	f04f 0b01 	mov.w	fp, #1
 8009fbc:	e7fa      	b.n	8009fb4 <__gethex+0x128>
 8009fbe:	230a      	movs	r3, #10
 8009fc0:	fb03 0002 	mla	r0, r3, r2, r0
 8009fc4:	e7d0      	b.n	8009f68 <__gethex+0xdc>
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	e7e0      	b.n	8009f8c <__gethex+0x100>
 8009fca:	eba5 0308 	sub.w	r3, r5, r8
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	4621      	mov	r1, r4
 8009fd2:	2b07      	cmp	r3, #7
 8009fd4:	dc0a      	bgt.n	8009fec <__gethex+0x160>
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f000 fb0e 	bl	800a5f8 <_Balloc>
 8009fdc:	4604      	mov	r4, r0
 8009fde:	b940      	cbnz	r0, 8009ff2 <__gethex+0x166>
 8009fe0:	4b61      	ldr	r3, [pc, #388]	; (800a168 <__gethex+0x2dc>)
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	21e4      	movs	r1, #228	; 0xe4
 8009fe6:	4861      	ldr	r0, [pc, #388]	; (800a16c <__gethex+0x2e0>)
 8009fe8:	f7ff f804 	bl	8008ff4 <__assert_func>
 8009fec:	3101      	adds	r1, #1
 8009fee:	105b      	asrs	r3, r3, #1
 8009ff0:	e7ef      	b.n	8009fd2 <__gethex+0x146>
 8009ff2:	f100 0a14 	add.w	sl, r0, #20
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	495a      	ldr	r1, [pc, #360]	; (800a164 <__gethex+0x2d8>)
 8009ffa:	f8cd a004 	str.w	sl, [sp, #4]
 8009ffe:	469b      	mov	fp, r3
 800a000:	45a8      	cmp	r8, r5
 800a002:	d342      	bcc.n	800a08a <__gethex+0x1fe>
 800a004:	9801      	ldr	r0, [sp, #4]
 800a006:	f840 bb04 	str.w	fp, [r0], #4
 800a00a:	eba0 000a 	sub.w	r0, r0, sl
 800a00e:	1080      	asrs	r0, r0, #2
 800a010:	6120      	str	r0, [r4, #16]
 800a012:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a016:	4658      	mov	r0, fp
 800a018:	f000 fbe0 	bl	800a7dc <__hi0bits>
 800a01c:	683d      	ldr	r5, [r7, #0]
 800a01e:	eba8 0000 	sub.w	r0, r8, r0
 800a022:	42a8      	cmp	r0, r5
 800a024:	dd59      	ble.n	800a0da <__gethex+0x24e>
 800a026:	eba0 0805 	sub.w	r8, r0, r5
 800a02a:	4641      	mov	r1, r8
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 ff6f 	bl	800af10 <__any_on>
 800a032:	4683      	mov	fp, r0
 800a034:	b1b8      	cbz	r0, 800a066 <__gethex+0x1da>
 800a036:	f108 33ff 	add.w	r3, r8, #4294967295
 800a03a:	1159      	asrs	r1, r3, #5
 800a03c:	f003 021f 	and.w	r2, r3, #31
 800a040:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a044:	f04f 0b01 	mov.w	fp, #1
 800a048:	fa0b f202 	lsl.w	r2, fp, r2
 800a04c:	420a      	tst	r2, r1
 800a04e:	d00a      	beq.n	800a066 <__gethex+0x1da>
 800a050:	455b      	cmp	r3, fp
 800a052:	dd06      	ble.n	800a062 <__gethex+0x1d6>
 800a054:	f1a8 0102 	sub.w	r1, r8, #2
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 ff59 	bl	800af10 <__any_on>
 800a05e:	2800      	cmp	r0, #0
 800a060:	d138      	bne.n	800a0d4 <__gethex+0x248>
 800a062:	f04f 0b02 	mov.w	fp, #2
 800a066:	4641      	mov	r1, r8
 800a068:	4620      	mov	r0, r4
 800a06a:	f7ff fea7 	bl	8009dbc <rshift>
 800a06e:	4446      	add	r6, r8
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	42b3      	cmp	r3, r6
 800a074:	da41      	bge.n	800a0fa <__gethex+0x26e>
 800a076:	4621      	mov	r1, r4
 800a078:	4648      	mov	r0, r9
 800a07a:	f000 fafd 	bl	800a678 <_Bfree>
 800a07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a080:	2300      	movs	r3, #0
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a088:	e78a      	b.n	8009fa0 <__gethex+0x114>
 800a08a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a08e:	2a2e      	cmp	r2, #46	; 0x2e
 800a090:	d014      	beq.n	800a0bc <__gethex+0x230>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d106      	bne.n	800a0a4 <__gethex+0x218>
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	f843 bb04 	str.w	fp, [r3], #4
 800a09c:	f04f 0b00 	mov.w	fp, #0
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	465b      	mov	r3, fp
 800a0a4:	7828      	ldrb	r0, [r5, #0]
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	f7ff feda 	bl	8009e60 <__hexdig_fun>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	f000 000f 	and.w	r0, r0, #15
 800a0b2:	4098      	lsls	r0, r3
 800a0b4:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	e7a1      	b.n	800a000 <__gethex+0x174>
 800a0bc:	45a8      	cmp	r8, r5
 800a0be:	d8e8      	bhi.n	800a092 <__gethex+0x206>
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	f7fe fe7d 	bl	8008dc4 <strncmp>
 800a0ca:	4926      	ldr	r1, [pc, #152]	; (800a164 <__gethex+0x2d8>)
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d1df      	bne.n	800a092 <__gethex+0x206>
 800a0d2:	e795      	b.n	800a000 <__gethex+0x174>
 800a0d4:	f04f 0b03 	mov.w	fp, #3
 800a0d8:	e7c5      	b.n	800a066 <__gethex+0x1da>
 800a0da:	da0b      	bge.n	800a0f4 <__gethex+0x268>
 800a0dc:	eba5 0800 	sub.w	r8, r5, r0
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4642      	mov	r2, r8
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	f000 fce1 	bl	800aaac <__lshift>
 800a0ea:	eba6 0608 	sub.w	r6, r6, r8
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	f100 0a14 	add.w	sl, r0, #20
 800a0f4:	f04f 0b00 	mov.w	fp, #0
 800a0f8:	e7ba      	b.n	800a070 <__gethex+0x1e4>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	42b3      	cmp	r3, r6
 800a0fe:	dd73      	ble.n	800a1e8 <__gethex+0x35c>
 800a100:	1b9e      	subs	r6, r3, r6
 800a102:	42b5      	cmp	r5, r6
 800a104:	dc34      	bgt.n	800a170 <__gethex+0x2e4>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d023      	beq.n	800a154 <__gethex+0x2c8>
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d025      	beq.n	800a15c <__gethex+0x2d0>
 800a110:	2b01      	cmp	r3, #1
 800a112:	d115      	bne.n	800a140 <__gethex+0x2b4>
 800a114:	42b5      	cmp	r5, r6
 800a116:	d113      	bne.n	800a140 <__gethex+0x2b4>
 800a118:	2d01      	cmp	r5, #1
 800a11a:	d10b      	bne.n	800a134 <__gethex+0x2a8>
 800a11c:	9a02      	ldr	r2, [sp, #8]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	2301      	movs	r3, #1
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	f8ca 3000 	str.w	r3, [sl]
 800a12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a12c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a130:	601c      	str	r4, [r3, #0]
 800a132:	e735      	b.n	8009fa0 <__gethex+0x114>
 800a134:	1e69      	subs	r1, r5, #1
 800a136:	4620      	mov	r0, r4
 800a138:	f000 feea 	bl	800af10 <__any_on>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d1ed      	bne.n	800a11c <__gethex+0x290>
 800a140:	4621      	mov	r1, r4
 800a142:	4648      	mov	r0, r9
 800a144:	f000 fa98 	bl	800a678 <_Bfree>
 800a148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a14a:	2300      	movs	r3, #0
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a152:	e725      	b.n	8009fa0 <__gethex+0x114>
 800a154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1f2      	bne.n	800a140 <__gethex+0x2b4>
 800a15a:	e7df      	b.n	800a11c <__gethex+0x290>
 800a15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1dc      	bne.n	800a11c <__gethex+0x290>
 800a162:	e7ed      	b.n	800a140 <__gethex+0x2b4>
 800a164:	0800c770 	.word	0x0800c770
 800a168:	0800ca1c 	.word	0x0800ca1c
 800a16c:	0800ca2d 	.word	0x0800ca2d
 800a170:	f106 38ff 	add.w	r8, r6, #4294967295
 800a174:	f1bb 0f00 	cmp.w	fp, #0
 800a178:	d133      	bne.n	800a1e2 <__gethex+0x356>
 800a17a:	f1b8 0f00 	cmp.w	r8, #0
 800a17e:	d004      	beq.n	800a18a <__gethex+0x2fe>
 800a180:	4641      	mov	r1, r8
 800a182:	4620      	mov	r0, r4
 800a184:	f000 fec4 	bl	800af10 <__any_on>
 800a188:	4683      	mov	fp, r0
 800a18a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a18e:	2301      	movs	r3, #1
 800a190:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a194:	f008 081f 	and.w	r8, r8, #31
 800a198:	fa03 f308 	lsl.w	r3, r3, r8
 800a19c:	4213      	tst	r3, r2
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	bf18      	it	ne
 800a1a4:	f04b 0b02 	orrne.w	fp, fp, #2
 800a1a8:	1bad      	subs	r5, r5, r6
 800a1aa:	f7ff fe07 	bl	8009dbc <rshift>
 800a1ae:	687e      	ldr	r6, [r7, #4]
 800a1b0:	f04f 0802 	mov.w	r8, #2
 800a1b4:	f1bb 0f00 	cmp.w	fp, #0
 800a1b8:	d04a      	beq.n	800a250 <__gethex+0x3c4>
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d016      	beq.n	800a1ee <__gethex+0x362>
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d018      	beq.n	800a1f6 <__gethex+0x36a>
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d109      	bne.n	800a1dc <__gethex+0x350>
 800a1c8:	f01b 0f02 	tst.w	fp, #2
 800a1cc:	d006      	beq.n	800a1dc <__gethex+0x350>
 800a1ce:	f8da 3000 	ldr.w	r3, [sl]
 800a1d2:	ea4b 0b03 	orr.w	fp, fp, r3
 800a1d6:	f01b 0f01 	tst.w	fp, #1
 800a1da:	d10f      	bne.n	800a1fc <__gethex+0x370>
 800a1dc:	f048 0810 	orr.w	r8, r8, #16
 800a1e0:	e036      	b.n	800a250 <__gethex+0x3c4>
 800a1e2:	f04f 0b01 	mov.w	fp, #1
 800a1e6:	e7d0      	b.n	800a18a <__gethex+0x2fe>
 800a1e8:	f04f 0801 	mov.w	r8, #1
 800a1ec:	e7e2      	b.n	800a1b4 <__gethex+0x328>
 800a1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f0:	f1c3 0301 	rsb	r3, r3, #1
 800a1f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d0ef      	beq.n	800a1dc <__gethex+0x350>
 800a1fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a200:	f104 0214 	add.w	r2, r4, #20
 800a204:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a20e:	2300      	movs	r3, #0
 800a210:	4694      	mov	ip, r2
 800a212:	f852 1b04 	ldr.w	r1, [r2], #4
 800a216:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a21a:	d01e      	beq.n	800a25a <__gethex+0x3ce>
 800a21c:	3101      	adds	r1, #1
 800a21e:	f8cc 1000 	str.w	r1, [ip]
 800a222:	f1b8 0f02 	cmp.w	r8, #2
 800a226:	f104 0214 	add.w	r2, r4, #20
 800a22a:	d13d      	bne.n	800a2a8 <__gethex+0x41c>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	3b01      	subs	r3, #1
 800a230:	42ab      	cmp	r3, r5
 800a232:	d10b      	bne.n	800a24c <__gethex+0x3c0>
 800a234:	1169      	asrs	r1, r5, #5
 800a236:	2301      	movs	r3, #1
 800a238:	f005 051f 	and.w	r5, r5, #31
 800a23c:	fa03 f505 	lsl.w	r5, r3, r5
 800a240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a244:	421d      	tst	r5, r3
 800a246:	bf18      	it	ne
 800a248:	f04f 0801 	movne.w	r8, #1
 800a24c:	f048 0820 	orr.w	r8, r8, #32
 800a250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a252:	601c      	str	r4, [r3, #0]
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	601e      	str	r6, [r3, #0]
 800a258:	e6a2      	b.n	8009fa0 <__gethex+0x114>
 800a25a:	4290      	cmp	r0, r2
 800a25c:	f842 3c04 	str.w	r3, [r2, #-4]
 800a260:	d8d6      	bhi.n	800a210 <__gethex+0x384>
 800a262:	68a2      	ldr	r2, [r4, #8]
 800a264:	4593      	cmp	fp, r2
 800a266:	db17      	blt.n	800a298 <__gethex+0x40c>
 800a268:	6861      	ldr	r1, [r4, #4]
 800a26a:	4648      	mov	r0, r9
 800a26c:	3101      	adds	r1, #1
 800a26e:	f000 f9c3 	bl	800a5f8 <_Balloc>
 800a272:	4682      	mov	sl, r0
 800a274:	b918      	cbnz	r0, 800a27e <__gethex+0x3f2>
 800a276:	4b1b      	ldr	r3, [pc, #108]	; (800a2e4 <__gethex+0x458>)
 800a278:	4602      	mov	r2, r0
 800a27a:	2184      	movs	r1, #132	; 0x84
 800a27c:	e6b3      	b.n	8009fe6 <__gethex+0x15a>
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	3202      	adds	r2, #2
 800a282:	f104 010c 	add.w	r1, r4, #12
 800a286:	0092      	lsls	r2, r2, #2
 800a288:	300c      	adds	r0, #12
 800a28a:	f7fe fe94 	bl	8008fb6 <memcpy>
 800a28e:	4621      	mov	r1, r4
 800a290:	4648      	mov	r0, r9
 800a292:	f000 f9f1 	bl	800a678 <_Bfree>
 800a296:	4654      	mov	r4, sl
 800a298:	6922      	ldr	r2, [r4, #16]
 800a29a:	1c51      	adds	r1, r2, #1
 800a29c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a2a0:	6121      	str	r1, [r4, #16]
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	6151      	str	r1, [r2, #20]
 800a2a6:	e7bc      	b.n	800a222 <__gethex+0x396>
 800a2a8:	6921      	ldr	r1, [r4, #16]
 800a2aa:	4559      	cmp	r1, fp
 800a2ac:	dd0b      	ble.n	800a2c6 <__gethex+0x43a>
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7ff fd83 	bl	8009dbc <rshift>
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	3601      	adds	r6, #1
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	f6ff aedb 	blt.w	800a076 <__gethex+0x1ea>
 800a2c0:	f04f 0801 	mov.w	r8, #1
 800a2c4:	e7c2      	b.n	800a24c <__gethex+0x3c0>
 800a2c6:	f015 051f 	ands.w	r5, r5, #31
 800a2ca:	d0f9      	beq.n	800a2c0 <__gethex+0x434>
 800a2cc:	9b01      	ldr	r3, [sp, #4]
 800a2ce:	441a      	add	r2, r3
 800a2d0:	f1c5 0520 	rsb	r5, r5, #32
 800a2d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a2d8:	f000 fa80 	bl	800a7dc <__hi0bits>
 800a2dc:	42a8      	cmp	r0, r5
 800a2de:	dbe6      	blt.n	800a2ae <__gethex+0x422>
 800a2e0:	e7ee      	b.n	800a2c0 <__gethex+0x434>
 800a2e2:	bf00      	nop
 800a2e4:	0800ca1c 	.word	0x0800ca1c

0800a2e8 <L_shift>:
 800a2e8:	f1c2 0208 	rsb	r2, r2, #8
 800a2ec:	0092      	lsls	r2, r2, #2
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	f1c2 0620 	rsb	r6, r2, #32
 800a2f4:	6843      	ldr	r3, [r0, #4]
 800a2f6:	6804      	ldr	r4, [r0, #0]
 800a2f8:	fa03 f506 	lsl.w	r5, r3, r6
 800a2fc:	432c      	orrs	r4, r5
 800a2fe:	40d3      	lsrs	r3, r2
 800a300:	6004      	str	r4, [r0, #0]
 800a302:	f840 3f04 	str.w	r3, [r0, #4]!
 800a306:	4288      	cmp	r0, r1
 800a308:	d3f4      	bcc.n	800a2f4 <L_shift+0xc>
 800a30a:	bd70      	pop	{r4, r5, r6, pc}

0800a30c <__match>:
 800a30c:	b530      	push	{r4, r5, lr}
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a316:	b914      	cbnz	r4, 800a31e <__match+0x12>
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	bd30      	pop	{r4, r5, pc}
 800a31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a326:	2d19      	cmp	r5, #25
 800a328:	bf98      	it	ls
 800a32a:	3220      	addls	r2, #32
 800a32c:	42a2      	cmp	r2, r4
 800a32e:	d0f0      	beq.n	800a312 <__match+0x6>
 800a330:	2000      	movs	r0, #0
 800a332:	e7f3      	b.n	800a31c <__match+0x10>

0800a334 <__hexnan>:
 800a334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	6801      	ldr	r1, [r0, #0]
 800a33c:	115e      	asrs	r6, r3, #5
 800a33e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a342:	f013 031f 	ands.w	r3, r3, #31
 800a346:	b087      	sub	sp, #28
 800a348:	bf18      	it	ne
 800a34a:	3604      	addne	r6, #4
 800a34c:	2500      	movs	r5, #0
 800a34e:	1f37      	subs	r7, r6, #4
 800a350:	4682      	mov	sl, r0
 800a352:	4690      	mov	r8, r2
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f846 5c04 	str.w	r5, [r6, #-4]
 800a35a:	46b9      	mov	r9, r7
 800a35c:	463c      	mov	r4, r7
 800a35e:	9502      	str	r5, [sp, #8]
 800a360:	46ab      	mov	fp, r5
 800a362:	784a      	ldrb	r2, [r1, #1]
 800a364:	1c4b      	adds	r3, r1, #1
 800a366:	9303      	str	r3, [sp, #12]
 800a368:	b342      	cbz	r2, 800a3bc <__hexnan+0x88>
 800a36a:	4610      	mov	r0, r2
 800a36c:	9105      	str	r1, [sp, #20]
 800a36e:	9204      	str	r2, [sp, #16]
 800a370:	f7ff fd76 	bl	8009e60 <__hexdig_fun>
 800a374:	2800      	cmp	r0, #0
 800a376:	d14f      	bne.n	800a418 <__hexnan+0xe4>
 800a378:	9a04      	ldr	r2, [sp, #16]
 800a37a:	9905      	ldr	r1, [sp, #20]
 800a37c:	2a20      	cmp	r2, #32
 800a37e:	d818      	bhi.n	800a3b2 <__hexnan+0x7e>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	459b      	cmp	fp, r3
 800a384:	dd13      	ble.n	800a3ae <__hexnan+0x7a>
 800a386:	454c      	cmp	r4, r9
 800a388:	d206      	bcs.n	800a398 <__hexnan+0x64>
 800a38a:	2d07      	cmp	r5, #7
 800a38c:	dc04      	bgt.n	800a398 <__hexnan+0x64>
 800a38e:	462a      	mov	r2, r5
 800a390:	4649      	mov	r1, r9
 800a392:	4620      	mov	r0, r4
 800a394:	f7ff ffa8 	bl	800a2e8 <L_shift>
 800a398:	4544      	cmp	r4, r8
 800a39a:	d950      	bls.n	800a43e <__hexnan+0x10a>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f1a4 0904 	sub.w	r9, r4, #4
 800a3a2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3a6:	f8cd b008 	str.w	fp, [sp, #8]
 800a3aa:	464c      	mov	r4, r9
 800a3ac:	461d      	mov	r5, r3
 800a3ae:	9903      	ldr	r1, [sp, #12]
 800a3b0:	e7d7      	b.n	800a362 <__hexnan+0x2e>
 800a3b2:	2a29      	cmp	r2, #41	; 0x29
 800a3b4:	d155      	bne.n	800a462 <__hexnan+0x12e>
 800a3b6:	3102      	adds	r1, #2
 800a3b8:	f8ca 1000 	str.w	r1, [sl]
 800a3bc:	f1bb 0f00 	cmp.w	fp, #0
 800a3c0:	d04f      	beq.n	800a462 <__hexnan+0x12e>
 800a3c2:	454c      	cmp	r4, r9
 800a3c4:	d206      	bcs.n	800a3d4 <__hexnan+0xa0>
 800a3c6:	2d07      	cmp	r5, #7
 800a3c8:	dc04      	bgt.n	800a3d4 <__hexnan+0xa0>
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4649      	mov	r1, r9
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f7ff ff8a 	bl	800a2e8 <L_shift>
 800a3d4:	4544      	cmp	r4, r8
 800a3d6:	d934      	bls.n	800a442 <__hexnan+0x10e>
 800a3d8:	f1a8 0204 	sub.w	r2, r8, #4
 800a3dc:	4623      	mov	r3, r4
 800a3de:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3e2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3e6:	429f      	cmp	r7, r3
 800a3e8:	d2f9      	bcs.n	800a3de <__hexnan+0xaa>
 800a3ea:	1b3b      	subs	r3, r7, r4
 800a3ec:	f023 0303 	bic.w	r3, r3, #3
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	3e03      	subs	r6, #3
 800a3f4:	3401      	adds	r4, #1
 800a3f6:	42a6      	cmp	r6, r4
 800a3f8:	bf38      	it	cc
 800a3fa:	2304      	movcc	r3, #4
 800a3fc:	4443      	add	r3, r8
 800a3fe:	2200      	movs	r2, #0
 800a400:	f843 2b04 	str.w	r2, [r3], #4
 800a404:	429f      	cmp	r7, r3
 800a406:	d2fb      	bcs.n	800a400 <__hexnan+0xcc>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	b91b      	cbnz	r3, 800a414 <__hexnan+0xe0>
 800a40c:	4547      	cmp	r7, r8
 800a40e:	d126      	bne.n	800a45e <__hexnan+0x12a>
 800a410:	2301      	movs	r3, #1
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	2005      	movs	r0, #5
 800a416:	e025      	b.n	800a464 <__hexnan+0x130>
 800a418:	3501      	adds	r5, #1
 800a41a:	2d08      	cmp	r5, #8
 800a41c:	f10b 0b01 	add.w	fp, fp, #1
 800a420:	dd06      	ble.n	800a430 <__hexnan+0xfc>
 800a422:	4544      	cmp	r4, r8
 800a424:	d9c3      	bls.n	800a3ae <__hexnan+0x7a>
 800a426:	2300      	movs	r3, #0
 800a428:	f844 3c04 	str.w	r3, [r4, #-4]
 800a42c:	2501      	movs	r5, #1
 800a42e:	3c04      	subs	r4, #4
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	f000 000f 	and.w	r0, r0, #15
 800a436:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	e7b7      	b.n	800a3ae <__hexnan+0x7a>
 800a43e:	2508      	movs	r5, #8
 800a440:	e7b5      	b.n	800a3ae <__hexnan+0x7a>
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0df      	beq.n	800a408 <__hexnan+0xd4>
 800a448:	f1c3 0320 	rsb	r3, r3, #32
 800a44c:	f04f 32ff 	mov.w	r2, #4294967295
 800a450:	40da      	lsrs	r2, r3
 800a452:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a456:	4013      	ands	r3, r2
 800a458:	f846 3c04 	str.w	r3, [r6, #-4]
 800a45c:	e7d4      	b.n	800a408 <__hexnan+0xd4>
 800a45e:	3f04      	subs	r7, #4
 800a460:	e7d2      	b.n	800a408 <__hexnan+0xd4>
 800a462:	2004      	movs	r0, #4
 800a464:	b007      	add	sp, #28
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a46c <malloc>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <malloc+0xc>)
 800a46e:	4601      	mov	r1, r0
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f000 b823 	b.w	800a4bc <_malloc_r>
 800a476:	bf00      	nop
 800a478:	200001d4 	.word	0x200001d4

0800a47c <sbrk_aligned>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	4e0e      	ldr	r6, [pc, #56]	; (800a4b8 <sbrk_aligned+0x3c>)
 800a480:	460c      	mov	r4, r1
 800a482:	6831      	ldr	r1, [r6, #0]
 800a484:	4605      	mov	r5, r0
 800a486:	b911      	cbnz	r1, 800a48e <sbrk_aligned+0x12>
 800a488:	f001 f96a 	bl	800b760 <_sbrk_r>
 800a48c:	6030      	str	r0, [r6, #0]
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f001 f965 	bl	800b760 <_sbrk_r>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d00a      	beq.n	800a4b0 <sbrk_aligned+0x34>
 800a49a:	1cc4      	adds	r4, r0, #3
 800a49c:	f024 0403 	bic.w	r4, r4, #3
 800a4a0:	42a0      	cmp	r0, r4
 800a4a2:	d007      	beq.n	800a4b4 <sbrk_aligned+0x38>
 800a4a4:	1a21      	subs	r1, r4, r0
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f001 f95a 	bl	800b760 <_sbrk_r>
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d101      	bne.n	800a4b4 <sbrk_aligned+0x38>
 800a4b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	200004e8 	.word	0x200004e8

0800a4bc <_malloc_r>:
 800a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	1ccd      	adds	r5, r1, #3
 800a4c2:	f025 0503 	bic.w	r5, r5, #3
 800a4c6:	3508      	adds	r5, #8
 800a4c8:	2d0c      	cmp	r5, #12
 800a4ca:	bf38      	it	cc
 800a4cc:	250c      	movcc	r5, #12
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	db01      	blt.n	800a4d8 <_malloc_r+0x1c>
 800a4d4:	42a9      	cmp	r1, r5
 800a4d6:	d905      	bls.n	800a4e4 <_malloc_r+0x28>
 800a4d8:	230c      	movs	r3, #12
 800a4da:	603b      	str	r3, [r7, #0]
 800a4dc:	2600      	movs	r6, #0
 800a4de:	4630      	mov	r0, r6
 800a4e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5b8 <_malloc_r+0xfc>
 800a4e8:	f000 f87a 	bl	800a5e0 <__malloc_lock>
 800a4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f0:	461c      	mov	r4, r3
 800a4f2:	bb5c      	cbnz	r4, 800a54c <_malloc_r+0x90>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f7ff ffc0 	bl	800a47c <sbrk_aligned>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	4604      	mov	r4, r0
 800a500:	d155      	bne.n	800a5ae <_malloc_r+0xf2>
 800a502:	f8d8 4000 	ldr.w	r4, [r8]
 800a506:	4626      	mov	r6, r4
 800a508:	2e00      	cmp	r6, #0
 800a50a:	d145      	bne.n	800a598 <_malloc_r+0xdc>
 800a50c:	2c00      	cmp	r4, #0
 800a50e:	d048      	beq.n	800a5a2 <_malloc_r+0xe6>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	4631      	mov	r1, r6
 800a514:	4638      	mov	r0, r7
 800a516:	eb04 0903 	add.w	r9, r4, r3
 800a51a:	f001 f921 	bl	800b760 <_sbrk_r>
 800a51e:	4581      	cmp	r9, r0
 800a520:	d13f      	bne.n	800a5a2 <_malloc_r+0xe6>
 800a522:	6821      	ldr	r1, [r4, #0]
 800a524:	1a6d      	subs	r5, r5, r1
 800a526:	4629      	mov	r1, r5
 800a528:	4638      	mov	r0, r7
 800a52a:	f7ff ffa7 	bl	800a47c <sbrk_aligned>
 800a52e:	3001      	adds	r0, #1
 800a530:	d037      	beq.n	800a5a2 <_malloc_r+0xe6>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	442b      	add	r3, r5
 800a536:	6023      	str	r3, [r4, #0]
 800a538:	f8d8 3000 	ldr.w	r3, [r8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d038      	beq.n	800a5b2 <_malloc_r+0xf6>
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	42a2      	cmp	r2, r4
 800a544:	d12b      	bne.n	800a59e <_malloc_r+0xe2>
 800a546:	2200      	movs	r2, #0
 800a548:	605a      	str	r2, [r3, #4]
 800a54a:	e00f      	b.n	800a56c <_malloc_r+0xb0>
 800a54c:	6822      	ldr	r2, [r4, #0]
 800a54e:	1b52      	subs	r2, r2, r5
 800a550:	d41f      	bmi.n	800a592 <_malloc_r+0xd6>
 800a552:	2a0b      	cmp	r2, #11
 800a554:	d917      	bls.n	800a586 <_malloc_r+0xca>
 800a556:	1961      	adds	r1, r4, r5
 800a558:	42a3      	cmp	r3, r4
 800a55a:	6025      	str	r5, [r4, #0]
 800a55c:	bf18      	it	ne
 800a55e:	6059      	strne	r1, [r3, #4]
 800a560:	6863      	ldr	r3, [r4, #4]
 800a562:	bf08      	it	eq
 800a564:	f8c8 1000 	streq.w	r1, [r8]
 800a568:	5162      	str	r2, [r4, r5]
 800a56a:	604b      	str	r3, [r1, #4]
 800a56c:	4638      	mov	r0, r7
 800a56e:	f104 060b 	add.w	r6, r4, #11
 800a572:	f000 f83b 	bl	800a5ec <__malloc_unlock>
 800a576:	f026 0607 	bic.w	r6, r6, #7
 800a57a:	1d23      	adds	r3, r4, #4
 800a57c:	1af2      	subs	r2, r6, r3
 800a57e:	d0ae      	beq.n	800a4de <_malloc_r+0x22>
 800a580:	1b9b      	subs	r3, r3, r6
 800a582:	50a3      	str	r3, [r4, r2]
 800a584:	e7ab      	b.n	800a4de <_malloc_r+0x22>
 800a586:	42a3      	cmp	r3, r4
 800a588:	6862      	ldr	r2, [r4, #4]
 800a58a:	d1dd      	bne.n	800a548 <_malloc_r+0x8c>
 800a58c:	f8c8 2000 	str.w	r2, [r8]
 800a590:	e7ec      	b.n	800a56c <_malloc_r+0xb0>
 800a592:	4623      	mov	r3, r4
 800a594:	6864      	ldr	r4, [r4, #4]
 800a596:	e7ac      	b.n	800a4f2 <_malloc_r+0x36>
 800a598:	4634      	mov	r4, r6
 800a59a:	6876      	ldr	r6, [r6, #4]
 800a59c:	e7b4      	b.n	800a508 <_malloc_r+0x4c>
 800a59e:	4613      	mov	r3, r2
 800a5a0:	e7cc      	b.n	800a53c <_malloc_r+0x80>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	603b      	str	r3, [r7, #0]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f000 f820 	bl	800a5ec <__malloc_unlock>
 800a5ac:	e797      	b.n	800a4de <_malloc_r+0x22>
 800a5ae:	6025      	str	r5, [r4, #0]
 800a5b0:	e7dc      	b.n	800a56c <_malloc_r+0xb0>
 800a5b2:	605b      	str	r3, [r3, #4]
 800a5b4:	deff      	udf	#255	; 0xff
 800a5b6:	bf00      	nop
 800a5b8:	200004e4 	.word	0x200004e4

0800a5bc <__ascii_mbtowc>:
 800a5bc:	b082      	sub	sp, #8
 800a5be:	b901      	cbnz	r1, 800a5c2 <__ascii_mbtowc+0x6>
 800a5c0:	a901      	add	r1, sp, #4
 800a5c2:	b142      	cbz	r2, 800a5d6 <__ascii_mbtowc+0x1a>
 800a5c4:	b14b      	cbz	r3, 800a5da <__ascii_mbtowc+0x1e>
 800a5c6:	7813      	ldrb	r3, [r2, #0]
 800a5c8:	600b      	str	r3, [r1, #0]
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	1e10      	subs	r0, r2, #0
 800a5ce:	bf18      	it	ne
 800a5d0:	2001      	movne	r0, #1
 800a5d2:	b002      	add	sp, #8
 800a5d4:	4770      	bx	lr
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	e7fb      	b.n	800a5d2 <__ascii_mbtowc+0x16>
 800a5da:	f06f 0001 	mvn.w	r0, #1
 800a5de:	e7f8      	b.n	800a5d2 <__ascii_mbtowc+0x16>

0800a5e0 <__malloc_lock>:
 800a5e0:	4801      	ldr	r0, [pc, #4]	; (800a5e8 <__malloc_lock+0x8>)
 800a5e2:	f7fe bce6 	b.w	8008fb2 <__retarget_lock_acquire_recursive>
 800a5e6:	bf00      	nop
 800a5e8:	200004e0 	.word	0x200004e0

0800a5ec <__malloc_unlock>:
 800a5ec:	4801      	ldr	r0, [pc, #4]	; (800a5f4 <__malloc_unlock+0x8>)
 800a5ee:	f7fe bce1 	b.w	8008fb4 <__retarget_lock_release_recursive>
 800a5f2:	bf00      	nop
 800a5f4:	200004e0 	.word	0x200004e0

0800a5f8 <_Balloc>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	69c6      	ldr	r6, [r0, #28]
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	b976      	cbnz	r6, 800a620 <_Balloc+0x28>
 800a602:	2010      	movs	r0, #16
 800a604:	f7ff ff32 	bl	800a46c <malloc>
 800a608:	4602      	mov	r2, r0
 800a60a:	61e0      	str	r0, [r4, #28]
 800a60c:	b920      	cbnz	r0, 800a618 <_Balloc+0x20>
 800a60e:	4b18      	ldr	r3, [pc, #96]	; (800a670 <_Balloc+0x78>)
 800a610:	4818      	ldr	r0, [pc, #96]	; (800a674 <_Balloc+0x7c>)
 800a612:	216b      	movs	r1, #107	; 0x6b
 800a614:	f7fe fcee 	bl	8008ff4 <__assert_func>
 800a618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a61c:	6006      	str	r6, [r0, #0]
 800a61e:	60c6      	str	r6, [r0, #12]
 800a620:	69e6      	ldr	r6, [r4, #28]
 800a622:	68f3      	ldr	r3, [r6, #12]
 800a624:	b183      	cbz	r3, 800a648 <_Balloc+0x50>
 800a626:	69e3      	ldr	r3, [r4, #28]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a62e:	b9b8      	cbnz	r0, 800a660 <_Balloc+0x68>
 800a630:	2101      	movs	r1, #1
 800a632:	fa01 f605 	lsl.w	r6, r1, r5
 800a636:	1d72      	adds	r2, r6, #5
 800a638:	0092      	lsls	r2, r2, #2
 800a63a:	4620      	mov	r0, r4
 800a63c:	f001 f8a7 	bl	800b78e <_calloc_r>
 800a640:	b160      	cbz	r0, 800a65c <_Balloc+0x64>
 800a642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a646:	e00e      	b.n	800a666 <_Balloc+0x6e>
 800a648:	2221      	movs	r2, #33	; 0x21
 800a64a:	2104      	movs	r1, #4
 800a64c:	4620      	mov	r0, r4
 800a64e:	f001 f89e 	bl	800b78e <_calloc_r>
 800a652:	69e3      	ldr	r3, [r4, #28]
 800a654:	60f0      	str	r0, [r6, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e4      	bne.n	800a626 <_Balloc+0x2e>
 800a65c:	2000      	movs	r0, #0
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	6802      	ldr	r2, [r0, #0]
 800a662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a666:	2300      	movs	r3, #0
 800a668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a66c:	e7f7      	b.n	800a65e <_Balloc+0x66>
 800a66e:	bf00      	nop
 800a670:	0800c902 	.word	0x0800c902
 800a674:	0800ca8d 	.word	0x0800ca8d

0800a678 <_Bfree>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	69c6      	ldr	r6, [r0, #28]
 800a67c:	4605      	mov	r5, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	b976      	cbnz	r6, 800a6a0 <_Bfree+0x28>
 800a682:	2010      	movs	r0, #16
 800a684:	f7ff fef2 	bl	800a46c <malloc>
 800a688:	4602      	mov	r2, r0
 800a68a:	61e8      	str	r0, [r5, #28]
 800a68c:	b920      	cbnz	r0, 800a698 <_Bfree+0x20>
 800a68e:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <_Bfree+0x3c>)
 800a690:	4809      	ldr	r0, [pc, #36]	; (800a6b8 <_Bfree+0x40>)
 800a692:	218f      	movs	r1, #143	; 0x8f
 800a694:	f7fe fcae 	bl	8008ff4 <__assert_func>
 800a698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a69c:	6006      	str	r6, [r0, #0]
 800a69e:	60c6      	str	r6, [r0, #12]
 800a6a0:	b13c      	cbz	r4, 800a6b2 <_Bfree+0x3a>
 800a6a2:	69eb      	ldr	r3, [r5, #28]
 800a6a4:	6862      	ldr	r2, [r4, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6ac:	6021      	str	r1, [r4, #0]
 800a6ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	0800c902 	.word	0x0800c902
 800a6b8:	0800ca8d 	.word	0x0800ca8d

0800a6bc <__multadd>:
 800a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c0:	690d      	ldr	r5, [r1, #16]
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	461e      	mov	r6, r3
 800a6c8:	f101 0c14 	add.w	ip, r1, #20
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f8dc 3000 	ldr.w	r3, [ip]
 800a6d2:	b299      	uxth	r1, r3
 800a6d4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6d8:	0c1e      	lsrs	r6, r3, #16
 800a6da:	0c0b      	lsrs	r3, r1, #16
 800a6dc:	fb02 3306 	mla	r3, r2, r6, r3
 800a6e0:	b289      	uxth	r1, r1
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6e8:	4285      	cmp	r5, r0
 800a6ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6f2:	dcec      	bgt.n	800a6ce <__multadd+0x12>
 800a6f4:	b30e      	cbz	r6, 800a73a <__multadd+0x7e>
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	dc19      	bgt.n	800a730 <__multadd+0x74>
 800a6fc:	6861      	ldr	r1, [r4, #4]
 800a6fe:	4638      	mov	r0, r7
 800a700:	3101      	adds	r1, #1
 800a702:	f7ff ff79 	bl	800a5f8 <_Balloc>
 800a706:	4680      	mov	r8, r0
 800a708:	b928      	cbnz	r0, 800a716 <__multadd+0x5a>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4b0c      	ldr	r3, [pc, #48]	; (800a740 <__multadd+0x84>)
 800a70e:	480d      	ldr	r0, [pc, #52]	; (800a744 <__multadd+0x88>)
 800a710:	21ba      	movs	r1, #186	; 0xba
 800a712:	f7fe fc6f 	bl	8008ff4 <__assert_func>
 800a716:	6922      	ldr	r2, [r4, #16]
 800a718:	3202      	adds	r2, #2
 800a71a:	f104 010c 	add.w	r1, r4, #12
 800a71e:	0092      	lsls	r2, r2, #2
 800a720:	300c      	adds	r0, #12
 800a722:	f7fe fc48 	bl	8008fb6 <memcpy>
 800a726:	4621      	mov	r1, r4
 800a728:	4638      	mov	r0, r7
 800a72a:	f7ff ffa5 	bl	800a678 <_Bfree>
 800a72e:	4644      	mov	r4, r8
 800a730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a734:	3501      	adds	r5, #1
 800a736:	615e      	str	r6, [r3, #20]
 800a738:	6125      	str	r5, [r4, #16]
 800a73a:	4620      	mov	r0, r4
 800a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a740:	0800ca1c 	.word	0x0800ca1c
 800a744:	0800ca8d 	.word	0x0800ca8d

0800a748 <__s2b>:
 800a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a74c:	460c      	mov	r4, r1
 800a74e:	4615      	mov	r5, r2
 800a750:	461f      	mov	r7, r3
 800a752:	2209      	movs	r2, #9
 800a754:	3308      	adds	r3, #8
 800a756:	4606      	mov	r6, r0
 800a758:	fb93 f3f2 	sdiv	r3, r3, r2
 800a75c:	2100      	movs	r1, #0
 800a75e:	2201      	movs	r2, #1
 800a760:	429a      	cmp	r2, r3
 800a762:	db09      	blt.n	800a778 <__s2b+0x30>
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff ff47 	bl	800a5f8 <_Balloc>
 800a76a:	b940      	cbnz	r0, 800a77e <__s2b+0x36>
 800a76c:	4602      	mov	r2, r0
 800a76e:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <__s2b+0x8c>)
 800a770:	4819      	ldr	r0, [pc, #100]	; (800a7d8 <__s2b+0x90>)
 800a772:	21d3      	movs	r1, #211	; 0xd3
 800a774:	f7fe fc3e 	bl	8008ff4 <__assert_func>
 800a778:	0052      	lsls	r2, r2, #1
 800a77a:	3101      	adds	r1, #1
 800a77c:	e7f0      	b.n	800a760 <__s2b+0x18>
 800a77e:	9b08      	ldr	r3, [sp, #32]
 800a780:	6143      	str	r3, [r0, #20]
 800a782:	2d09      	cmp	r5, #9
 800a784:	f04f 0301 	mov.w	r3, #1
 800a788:	6103      	str	r3, [r0, #16]
 800a78a:	dd16      	ble.n	800a7ba <__s2b+0x72>
 800a78c:	f104 0909 	add.w	r9, r4, #9
 800a790:	46c8      	mov	r8, r9
 800a792:	442c      	add	r4, r5
 800a794:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a798:	4601      	mov	r1, r0
 800a79a:	3b30      	subs	r3, #48	; 0x30
 800a79c:	220a      	movs	r2, #10
 800a79e:	4630      	mov	r0, r6
 800a7a0:	f7ff ff8c 	bl	800a6bc <__multadd>
 800a7a4:	45a0      	cmp	r8, r4
 800a7a6:	d1f5      	bne.n	800a794 <__s2b+0x4c>
 800a7a8:	f1a5 0408 	sub.w	r4, r5, #8
 800a7ac:	444c      	add	r4, r9
 800a7ae:	1b2d      	subs	r5, r5, r4
 800a7b0:	1963      	adds	r3, r4, r5
 800a7b2:	42bb      	cmp	r3, r7
 800a7b4:	db04      	blt.n	800a7c0 <__s2b+0x78>
 800a7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ba:	340a      	adds	r4, #10
 800a7bc:	2509      	movs	r5, #9
 800a7be:	e7f6      	b.n	800a7ae <__s2b+0x66>
 800a7c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	3b30      	subs	r3, #48	; 0x30
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ff76 	bl	800a6bc <__multadd>
 800a7d0:	e7ee      	b.n	800a7b0 <__s2b+0x68>
 800a7d2:	bf00      	nop
 800a7d4:	0800ca1c 	.word	0x0800ca1c
 800a7d8:	0800ca8d 	.word	0x0800ca8d

0800a7dc <__hi0bits>:
 800a7dc:	0c03      	lsrs	r3, r0, #16
 800a7de:	041b      	lsls	r3, r3, #16
 800a7e0:	b9d3      	cbnz	r3, 800a818 <__hi0bits+0x3c>
 800a7e2:	0400      	lsls	r0, r0, #16
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7ea:	bf04      	itt	eq
 800a7ec:	0200      	lsleq	r0, r0, #8
 800a7ee:	3308      	addeq	r3, #8
 800a7f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7f4:	bf04      	itt	eq
 800a7f6:	0100      	lsleq	r0, r0, #4
 800a7f8:	3304      	addeq	r3, #4
 800a7fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7fe:	bf04      	itt	eq
 800a800:	0080      	lsleq	r0, r0, #2
 800a802:	3302      	addeq	r3, #2
 800a804:	2800      	cmp	r0, #0
 800a806:	db05      	blt.n	800a814 <__hi0bits+0x38>
 800a808:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a80c:	f103 0301 	add.w	r3, r3, #1
 800a810:	bf08      	it	eq
 800a812:	2320      	moveq	r3, #32
 800a814:	4618      	mov	r0, r3
 800a816:	4770      	bx	lr
 800a818:	2300      	movs	r3, #0
 800a81a:	e7e4      	b.n	800a7e6 <__hi0bits+0xa>

0800a81c <__lo0bits>:
 800a81c:	6803      	ldr	r3, [r0, #0]
 800a81e:	f013 0207 	ands.w	r2, r3, #7
 800a822:	d00c      	beq.n	800a83e <__lo0bits+0x22>
 800a824:	07d9      	lsls	r1, r3, #31
 800a826:	d422      	bmi.n	800a86e <__lo0bits+0x52>
 800a828:	079a      	lsls	r2, r3, #30
 800a82a:	bf49      	itett	mi
 800a82c:	085b      	lsrmi	r3, r3, #1
 800a82e:	089b      	lsrpl	r3, r3, #2
 800a830:	6003      	strmi	r3, [r0, #0]
 800a832:	2201      	movmi	r2, #1
 800a834:	bf5c      	itt	pl
 800a836:	6003      	strpl	r3, [r0, #0]
 800a838:	2202      	movpl	r2, #2
 800a83a:	4610      	mov	r0, r2
 800a83c:	4770      	bx	lr
 800a83e:	b299      	uxth	r1, r3
 800a840:	b909      	cbnz	r1, 800a846 <__lo0bits+0x2a>
 800a842:	0c1b      	lsrs	r3, r3, #16
 800a844:	2210      	movs	r2, #16
 800a846:	b2d9      	uxtb	r1, r3
 800a848:	b909      	cbnz	r1, 800a84e <__lo0bits+0x32>
 800a84a:	3208      	adds	r2, #8
 800a84c:	0a1b      	lsrs	r3, r3, #8
 800a84e:	0719      	lsls	r1, r3, #28
 800a850:	bf04      	itt	eq
 800a852:	091b      	lsreq	r3, r3, #4
 800a854:	3204      	addeq	r2, #4
 800a856:	0799      	lsls	r1, r3, #30
 800a858:	bf04      	itt	eq
 800a85a:	089b      	lsreq	r3, r3, #2
 800a85c:	3202      	addeq	r2, #2
 800a85e:	07d9      	lsls	r1, r3, #31
 800a860:	d403      	bmi.n	800a86a <__lo0bits+0x4e>
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	f102 0201 	add.w	r2, r2, #1
 800a868:	d003      	beq.n	800a872 <__lo0bits+0x56>
 800a86a:	6003      	str	r3, [r0, #0]
 800a86c:	e7e5      	b.n	800a83a <__lo0bits+0x1e>
 800a86e:	2200      	movs	r2, #0
 800a870:	e7e3      	b.n	800a83a <__lo0bits+0x1e>
 800a872:	2220      	movs	r2, #32
 800a874:	e7e1      	b.n	800a83a <__lo0bits+0x1e>
	...

0800a878 <__i2b>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	2101      	movs	r1, #1
 800a87e:	f7ff febb 	bl	800a5f8 <_Balloc>
 800a882:	4602      	mov	r2, r0
 800a884:	b928      	cbnz	r0, 800a892 <__i2b+0x1a>
 800a886:	4b05      	ldr	r3, [pc, #20]	; (800a89c <__i2b+0x24>)
 800a888:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <__i2b+0x28>)
 800a88a:	f240 1145 	movw	r1, #325	; 0x145
 800a88e:	f7fe fbb1 	bl	8008ff4 <__assert_func>
 800a892:	2301      	movs	r3, #1
 800a894:	6144      	str	r4, [r0, #20]
 800a896:	6103      	str	r3, [r0, #16]
 800a898:	bd10      	pop	{r4, pc}
 800a89a:	bf00      	nop
 800a89c:	0800ca1c 	.word	0x0800ca1c
 800a8a0:	0800ca8d 	.word	0x0800ca8d

0800a8a4 <__multiply>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4691      	mov	r9, r2
 800a8aa:	690a      	ldr	r2, [r1, #16]
 800a8ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	bfb8      	it	lt
 800a8b4:	460b      	movlt	r3, r1
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	bfbc      	itt	lt
 800a8ba:	464c      	movlt	r4, r9
 800a8bc:	4699      	movlt	r9, r3
 800a8be:	6927      	ldr	r7, [r4, #16]
 800a8c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8c4:	68a3      	ldr	r3, [r4, #8]
 800a8c6:	6861      	ldr	r1, [r4, #4]
 800a8c8:	eb07 060a 	add.w	r6, r7, sl
 800a8cc:	42b3      	cmp	r3, r6
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	bfb8      	it	lt
 800a8d2:	3101      	addlt	r1, #1
 800a8d4:	f7ff fe90 	bl	800a5f8 <_Balloc>
 800a8d8:	b930      	cbnz	r0, 800a8e8 <__multiply+0x44>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	4b44      	ldr	r3, [pc, #272]	; (800a9f0 <__multiply+0x14c>)
 800a8de:	4845      	ldr	r0, [pc, #276]	; (800a9f4 <__multiply+0x150>)
 800a8e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a8e4:	f7fe fb86 	bl	8008ff4 <__assert_func>
 800a8e8:	f100 0514 	add.w	r5, r0, #20
 800a8ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4543      	cmp	r3, r8
 800a8f6:	d321      	bcc.n	800a93c <__multiply+0x98>
 800a8f8:	f104 0314 	add.w	r3, r4, #20
 800a8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a900:	f109 0314 	add.w	r3, r9, #20
 800a904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a908:	9202      	str	r2, [sp, #8]
 800a90a:	1b3a      	subs	r2, r7, r4
 800a90c:	3a15      	subs	r2, #21
 800a90e:	f022 0203 	bic.w	r2, r2, #3
 800a912:	3204      	adds	r2, #4
 800a914:	f104 0115 	add.w	r1, r4, #21
 800a918:	428f      	cmp	r7, r1
 800a91a:	bf38      	it	cc
 800a91c:	2204      	movcc	r2, #4
 800a91e:	9201      	str	r2, [sp, #4]
 800a920:	9a02      	ldr	r2, [sp, #8]
 800a922:	9303      	str	r3, [sp, #12]
 800a924:	429a      	cmp	r2, r3
 800a926:	d80c      	bhi.n	800a942 <__multiply+0x9e>
 800a928:	2e00      	cmp	r6, #0
 800a92a:	dd03      	ble.n	800a934 <__multiply+0x90>
 800a92c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a930:	2b00      	cmp	r3, #0
 800a932:	d05b      	beq.n	800a9ec <__multiply+0x148>
 800a934:	6106      	str	r6, [r0, #16]
 800a936:	b005      	add	sp, #20
 800a938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93c:	f843 2b04 	str.w	r2, [r3], #4
 800a940:	e7d8      	b.n	800a8f4 <__multiply+0x50>
 800a942:	f8b3 a000 	ldrh.w	sl, [r3]
 800a946:	f1ba 0f00 	cmp.w	sl, #0
 800a94a:	d024      	beq.n	800a996 <__multiply+0xf2>
 800a94c:	f104 0e14 	add.w	lr, r4, #20
 800a950:	46a9      	mov	r9, r5
 800a952:	f04f 0c00 	mov.w	ip, #0
 800a956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a95a:	f8d9 1000 	ldr.w	r1, [r9]
 800a95e:	fa1f fb82 	uxth.w	fp, r2
 800a962:	b289      	uxth	r1, r1
 800a964:	fb0a 110b 	mla	r1, sl, fp, r1
 800a968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a96c:	f8d9 2000 	ldr.w	r2, [r9]
 800a970:	4461      	add	r1, ip
 800a972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a976:	fb0a c20b 	mla	r2, sl, fp, ip
 800a97a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a97e:	b289      	uxth	r1, r1
 800a980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a984:	4577      	cmp	r7, lr
 800a986:	f849 1b04 	str.w	r1, [r9], #4
 800a98a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a98e:	d8e2      	bhi.n	800a956 <__multiply+0xb2>
 800a990:	9a01      	ldr	r2, [sp, #4]
 800a992:	f845 c002 	str.w	ip, [r5, r2]
 800a996:	9a03      	ldr	r2, [sp, #12]
 800a998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a99c:	3304      	adds	r3, #4
 800a99e:	f1b9 0f00 	cmp.w	r9, #0
 800a9a2:	d021      	beq.n	800a9e8 <__multiply+0x144>
 800a9a4:	6829      	ldr	r1, [r5, #0]
 800a9a6:	f104 0c14 	add.w	ip, r4, #20
 800a9aa:	46ae      	mov	lr, r5
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a9b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a9b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a9bc:	4452      	add	r2, sl
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a9c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a9cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9d0:	f8be 1000 	ldrh.w	r1, [lr]
 800a9d4:	fb09 110a 	mla	r1, r9, sl, r1
 800a9d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a9dc:	4567      	cmp	r7, ip
 800a9de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9e2:	d8e5      	bhi.n	800a9b0 <__multiply+0x10c>
 800a9e4:	9a01      	ldr	r2, [sp, #4]
 800a9e6:	50a9      	str	r1, [r5, r2]
 800a9e8:	3504      	adds	r5, #4
 800a9ea:	e799      	b.n	800a920 <__multiply+0x7c>
 800a9ec:	3e01      	subs	r6, #1
 800a9ee:	e79b      	b.n	800a928 <__multiply+0x84>
 800a9f0:	0800ca1c 	.word	0x0800ca1c
 800a9f4:	0800ca8d 	.word	0x0800ca8d

0800a9f8 <__pow5mult>:
 800a9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9fc:	4615      	mov	r5, r2
 800a9fe:	f012 0203 	ands.w	r2, r2, #3
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	d007      	beq.n	800aa18 <__pow5mult+0x20>
 800aa08:	4c25      	ldr	r4, [pc, #148]	; (800aaa0 <__pow5mult+0xa8>)
 800aa0a:	3a01      	subs	r2, #1
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa12:	f7ff fe53 	bl	800a6bc <__multadd>
 800aa16:	4607      	mov	r7, r0
 800aa18:	10ad      	asrs	r5, r5, #2
 800aa1a:	d03d      	beq.n	800aa98 <__pow5mult+0xa0>
 800aa1c:	69f4      	ldr	r4, [r6, #28]
 800aa1e:	b97c      	cbnz	r4, 800aa40 <__pow5mult+0x48>
 800aa20:	2010      	movs	r0, #16
 800aa22:	f7ff fd23 	bl	800a46c <malloc>
 800aa26:	4602      	mov	r2, r0
 800aa28:	61f0      	str	r0, [r6, #28]
 800aa2a:	b928      	cbnz	r0, 800aa38 <__pow5mult+0x40>
 800aa2c:	4b1d      	ldr	r3, [pc, #116]	; (800aaa4 <__pow5mult+0xac>)
 800aa2e:	481e      	ldr	r0, [pc, #120]	; (800aaa8 <__pow5mult+0xb0>)
 800aa30:	f240 11b3 	movw	r1, #435	; 0x1b3
 800aa34:	f7fe fade 	bl	8008ff4 <__assert_func>
 800aa38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa3c:	6004      	str	r4, [r0, #0]
 800aa3e:	60c4      	str	r4, [r0, #12]
 800aa40:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800aa44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa48:	b94c      	cbnz	r4, 800aa5e <__pow5mult+0x66>
 800aa4a:	f240 2171 	movw	r1, #625	; 0x271
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f7ff ff12 	bl	800a878 <__i2b>
 800aa54:	2300      	movs	r3, #0
 800aa56:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	07eb      	lsls	r3, r5, #31
 800aa64:	d50a      	bpl.n	800aa7c <__pow5mult+0x84>
 800aa66:	4639      	mov	r1, r7
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ff1a 	bl	800a8a4 <__multiply>
 800aa70:	4639      	mov	r1, r7
 800aa72:	4680      	mov	r8, r0
 800aa74:	4630      	mov	r0, r6
 800aa76:	f7ff fdff 	bl	800a678 <_Bfree>
 800aa7a:	4647      	mov	r7, r8
 800aa7c:	106d      	asrs	r5, r5, #1
 800aa7e:	d00b      	beq.n	800aa98 <__pow5mult+0xa0>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	b938      	cbnz	r0, 800aa94 <__pow5mult+0x9c>
 800aa84:	4622      	mov	r2, r4
 800aa86:	4621      	mov	r1, r4
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7ff ff0b 	bl	800a8a4 <__multiply>
 800aa8e:	6020      	str	r0, [r4, #0]
 800aa90:	f8c0 9000 	str.w	r9, [r0]
 800aa94:	4604      	mov	r4, r0
 800aa96:	e7e4      	b.n	800aa62 <__pow5mult+0x6a>
 800aa98:	4638      	mov	r0, r7
 800aa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800cbd8 	.word	0x0800cbd8
 800aaa4:	0800c902 	.word	0x0800c902
 800aaa8:	0800ca8d 	.word	0x0800ca8d

0800aaac <__lshift>:
 800aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab0:	460c      	mov	r4, r1
 800aab2:	6849      	ldr	r1, [r1, #4]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	4607      	mov	r7, r0
 800aabe:	4691      	mov	r9, r2
 800aac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aac4:	f108 0601 	add.w	r6, r8, #1
 800aac8:	42b3      	cmp	r3, r6
 800aaca:	db0b      	blt.n	800aae4 <__lshift+0x38>
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff fd93 	bl	800a5f8 <_Balloc>
 800aad2:	4605      	mov	r5, r0
 800aad4:	b948      	cbnz	r0, 800aaea <__lshift+0x3e>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b28      	ldr	r3, [pc, #160]	; (800ab7c <__lshift+0xd0>)
 800aada:	4829      	ldr	r0, [pc, #164]	; (800ab80 <__lshift+0xd4>)
 800aadc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aae0:	f7fe fa88 	bl	8008ff4 <__assert_func>
 800aae4:	3101      	adds	r1, #1
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	e7ee      	b.n	800aac8 <__lshift+0x1c>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f100 0114 	add.w	r1, r0, #20
 800aaf0:	f100 0210 	add.w	r2, r0, #16
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	4553      	cmp	r3, sl
 800aaf8:	db33      	blt.n	800ab62 <__lshift+0xb6>
 800aafa:	6920      	ldr	r0, [r4, #16]
 800aafc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab00:	f104 0314 	add.w	r3, r4, #20
 800ab04:	f019 091f 	ands.w	r9, r9, #31
 800ab08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab10:	d02b      	beq.n	800ab6a <__lshift+0xbe>
 800ab12:	f1c9 0e20 	rsb	lr, r9, #32
 800ab16:	468a      	mov	sl, r1
 800ab18:	2200      	movs	r2, #0
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab20:	4310      	orrs	r0, r2
 800ab22:	f84a 0b04 	str.w	r0, [sl], #4
 800ab26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab2a:	459c      	cmp	ip, r3
 800ab2c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab30:	d8f3      	bhi.n	800ab1a <__lshift+0x6e>
 800ab32:	ebac 0304 	sub.w	r3, ip, r4
 800ab36:	3b15      	subs	r3, #21
 800ab38:	f023 0303 	bic.w	r3, r3, #3
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	f104 0015 	add.w	r0, r4, #21
 800ab42:	4584      	cmp	ip, r0
 800ab44:	bf38      	it	cc
 800ab46:	2304      	movcc	r3, #4
 800ab48:	50ca      	str	r2, [r1, r3]
 800ab4a:	b10a      	cbz	r2, 800ab50 <__lshift+0xa4>
 800ab4c:	f108 0602 	add.w	r6, r8, #2
 800ab50:	3e01      	subs	r6, #1
 800ab52:	4638      	mov	r0, r7
 800ab54:	612e      	str	r6, [r5, #16]
 800ab56:	4621      	mov	r1, r4
 800ab58:	f7ff fd8e 	bl	800a678 <_Bfree>
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab66:	3301      	adds	r3, #1
 800ab68:	e7c5      	b.n	800aaf6 <__lshift+0x4a>
 800ab6a:	3904      	subs	r1, #4
 800ab6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab74:	459c      	cmp	ip, r3
 800ab76:	d8f9      	bhi.n	800ab6c <__lshift+0xc0>
 800ab78:	e7ea      	b.n	800ab50 <__lshift+0xa4>
 800ab7a:	bf00      	nop
 800ab7c:	0800ca1c 	.word	0x0800ca1c
 800ab80:	0800ca8d 	.word	0x0800ca8d

0800ab84 <__mcmp>:
 800ab84:	b530      	push	{r4, r5, lr}
 800ab86:	6902      	ldr	r2, [r0, #16]
 800ab88:	690c      	ldr	r4, [r1, #16]
 800ab8a:	1b12      	subs	r2, r2, r4
 800ab8c:	d10e      	bne.n	800abac <__mcmp+0x28>
 800ab8e:	f100 0314 	add.w	r3, r0, #20
 800ab92:	3114      	adds	r1, #20
 800ab94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aba4:	42a5      	cmp	r5, r4
 800aba6:	d003      	beq.n	800abb0 <__mcmp+0x2c>
 800aba8:	d305      	bcc.n	800abb6 <__mcmp+0x32>
 800abaa:	2201      	movs	r2, #1
 800abac:	4610      	mov	r0, r2
 800abae:	bd30      	pop	{r4, r5, pc}
 800abb0:	4283      	cmp	r3, r0
 800abb2:	d3f3      	bcc.n	800ab9c <__mcmp+0x18>
 800abb4:	e7fa      	b.n	800abac <__mcmp+0x28>
 800abb6:	f04f 32ff 	mov.w	r2, #4294967295
 800abba:	e7f7      	b.n	800abac <__mcmp+0x28>

0800abbc <__mdiff>:
 800abbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc0:	460c      	mov	r4, r1
 800abc2:	4606      	mov	r6, r0
 800abc4:	4611      	mov	r1, r2
 800abc6:	4620      	mov	r0, r4
 800abc8:	4690      	mov	r8, r2
 800abca:	f7ff ffdb 	bl	800ab84 <__mcmp>
 800abce:	1e05      	subs	r5, r0, #0
 800abd0:	d110      	bne.n	800abf4 <__mdiff+0x38>
 800abd2:	4629      	mov	r1, r5
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff fd0f 	bl	800a5f8 <_Balloc>
 800abda:	b930      	cbnz	r0, 800abea <__mdiff+0x2e>
 800abdc:	4b3a      	ldr	r3, [pc, #232]	; (800acc8 <__mdiff+0x10c>)
 800abde:	4602      	mov	r2, r0
 800abe0:	f240 2137 	movw	r1, #567	; 0x237
 800abe4:	4839      	ldr	r0, [pc, #228]	; (800accc <__mdiff+0x110>)
 800abe6:	f7fe fa05 	bl	8008ff4 <__assert_func>
 800abea:	2301      	movs	r3, #1
 800abec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf4:	bfa4      	itt	ge
 800abf6:	4643      	movge	r3, r8
 800abf8:	46a0      	movge	r8, r4
 800abfa:	4630      	mov	r0, r6
 800abfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac00:	bfa6      	itte	ge
 800ac02:	461c      	movge	r4, r3
 800ac04:	2500      	movge	r5, #0
 800ac06:	2501      	movlt	r5, #1
 800ac08:	f7ff fcf6 	bl	800a5f8 <_Balloc>
 800ac0c:	b920      	cbnz	r0, 800ac18 <__mdiff+0x5c>
 800ac0e:	4b2e      	ldr	r3, [pc, #184]	; (800acc8 <__mdiff+0x10c>)
 800ac10:	4602      	mov	r2, r0
 800ac12:	f240 2145 	movw	r1, #581	; 0x245
 800ac16:	e7e5      	b.n	800abe4 <__mdiff+0x28>
 800ac18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac1c:	6926      	ldr	r6, [r4, #16]
 800ac1e:	60c5      	str	r5, [r0, #12]
 800ac20:	f104 0914 	add.w	r9, r4, #20
 800ac24:	f108 0514 	add.w	r5, r8, #20
 800ac28:	f100 0e14 	add.w	lr, r0, #20
 800ac2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac34:	f108 0210 	add.w	r2, r8, #16
 800ac38:	46f2      	mov	sl, lr
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac44:	fa11 f88b 	uxtah	r8, r1, fp
 800ac48:	b299      	uxth	r1, r3
 800ac4a:	0c1b      	lsrs	r3, r3, #16
 800ac4c:	eba8 0801 	sub.w	r8, r8, r1
 800ac50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac58:	fa1f f888 	uxth.w	r8, r8
 800ac5c:	1419      	asrs	r1, r3, #16
 800ac5e:	454e      	cmp	r6, r9
 800ac60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac64:	f84a 3b04 	str.w	r3, [sl], #4
 800ac68:	d8e8      	bhi.n	800ac3c <__mdiff+0x80>
 800ac6a:	1b33      	subs	r3, r6, r4
 800ac6c:	3b15      	subs	r3, #21
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	3304      	adds	r3, #4
 800ac74:	3415      	adds	r4, #21
 800ac76:	42a6      	cmp	r6, r4
 800ac78:	bf38      	it	cc
 800ac7a:	2304      	movcc	r3, #4
 800ac7c:	441d      	add	r5, r3
 800ac7e:	4473      	add	r3, lr
 800ac80:	469e      	mov	lr, r3
 800ac82:	462e      	mov	r6, r5
 800ac84:	4566      	cmp	r6, ip
 800ac86:	d30e      	bcc.n	800aca6 <__mdiff+0xea>
 800ac88:	f10c 0203 	add.w	r2, ip, #3
 800ac8c:	1b52      	subs	r2, r2, r5
 800ac8e:	f022 0203 	bic.w	r2, r2, #3
 800ac92:	3d03      	subs	r5, #3
 800ac94:	45ac      	cmp	ip, r5
 800ac96:	bf38      	it	cc
 800ac98:	2200      	movcc	r2, #0
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aca0:	b17a      	cbz	r2, 800acc2 <__mdiff+0x106>
 800aca2:	6107      	str	r7, [r0, #16]
 800aca4:	e7a4      	b.n	800abf0 <__mdiff+0x34>
 800aca6:	f856 8b04 	ldr.w	r8, [r6], #4
 800acaa:	fa11 f288 	uxtah	r2, r1, r8
 800acae:	1414      	asrs	r4, r2, #16
 800acb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800acb4:	b292      	uxth	r2, r2
 800acb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800acba:	f84e 2b04 	str.w	r2, [lr], #4
 800acbe:	1421      	asrs	r1, r4, #16
 800acc0:	e7e0      	b.n	800ac84 <__mdiff+0xc8>
 800acc2:	3f01      	subs	r7, #1
 800acc4:	e7ea      	b.n	800ac9c <__mdiff+0xe0>
 800acc6:	bf00      	nop
 800acc8:	0800ca1c 	.word	0x0800ca1c
 800accc:	0800ca8d 	.word	0x0800ca8d

0800acd0 <__ulp>:
 800acd0:	b082      	sub	sp, #8
 800acd2:	ed8d 0b00 	vstr	d0, [sp]
 800acd6:	9a01      	ldr	r2, [sp, #4]
 800acd8:	4b0f      	ldr	r3, [pc, #60]	; (800ad18 <__ulp+0x48>)
 800acda:	4013      	ands	r3, r2
 800acdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dc08      	bgt.n	800acf6 <__ulp+0x26>
 800ace4:	425b      	negs	r3, r3
 800ace6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800acea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800acee:	da04      	bge.n	800acfa <__ulp+0x2a>
 800acf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800acf4:	4113      	asrs	r3, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	e008      	b.n	800ad0c <__ulp+0x3c>
 800acfa:	f1a2 0314 	sub.w	r3, r2, #20
 800acfe:	2b1e      	cmp	r3, #30
 800ad00:	bfda      	itte	le
 800ad02:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ad06:	40da      	lsrle	r2, r3
 800ad08:	2201      	movgt	r2, #1
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4610      	mov	r0, r2
 800ad10:	ec41 0b10 	vmov	d0, r0, r1
 800ad14:	b002      	add	sp, #8
 800ad16:	4770      	bx	lr
 800ad18:	7ff00000 	.word	0x7ff00000

0800ad1c <__b2d>:
 800ad1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad20:	6906      	ldr	r6, [r0, #16]
 800ad22:	f100 0814 	add.w	r8, r0, #20
 800ad26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ad2a:	1f37      	subs	r7, r6, #4
 800ad2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7ff fd53 	bl	800a7dc <__hi0bits>
 800ad36:	f1c0 0320 	rsb	r3, r0, #32
 800ad3a:	280a      	cmp	r0, #10
 800ad3c:	600b      	str	r3, [r1, #0]
 800ad3e:	491b      	ldr	r1, [pc, #108]	; (800adac <__b2d+0x90>)
 800ad40:	dc15      	bgt.n	800ad6e <__b2d+0x52>
 800ad42:	f1c0 0c0b 	rsb	ip, r0, #11
 800ad46:	fa22 f30c 	lsr.w	r3, r2, ip
 800ad4a:	45b8      	cmp	r8, r7
 800ad4c:	ea43 0501 	orr.w	r5, r3, r1
 800ad50:	bf34      	ite	cc
 800ad52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ad56:	2300      	movcs	r3, #0
 800ad58:	3015      	adds	r0, #21
 800ad5a:	fa02 f000 	lsl.w	r0, r2, r0
 800ad5e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ad62:	4303      	orrs	r3, r0
 800ad64:	461c      	mov	r4, r3
 800ad66:	ec45 4b10 	vmov	d0, r4, r5
 800ad6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6e:	45b8      	cmp	r8, r7
 800ad70:	bf3a      	itte	cc
 800ad72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ad76:	f1a6 0708 	subcc.w	r7, r6, #8
 800ad7a:	2300      	movcs	r3, #0
 800ad7c:	380b      	subs	r0, #11
 800ad7e:	d012      	beq.n	800ada6 <__b2d+0x8a>
 800ad80:	f1c0 0120 	rsb	r1, r0, #32
 800ad84:	fa23 f401 	lsr.w	r4, r3, r1
 800ad88:	4082      	lsls	r2, r0
 800ad8a:	4322      	orrs	r2, r4
 800ad8c:	4547      	cmp	r7, r8
 800ad8e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ad92:	bf8c      	ite	hi
 800ad94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ad98:	2200      	movls	r2, #0
 800ad9a:	4083      	lsls	r3, r0
 800ad9c:	40ca      	lsrs	r2, r1
 800ad9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ada2:	4313      	orrs	r3, r2
 800ada4:	e7de      	b.n	800ad64 <__b2d+0x48>
 800ada6:	ea42 0501 	orr.w	r5, r2, r1
 800adaa:	e7db      	b.n	800ad64 <__b2d+0x48>
 800adac:	3ff00000 	.word	0x3ff00000

0800adb0 <__d2b>:
 800adb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	460f      	mov	r7, r1
 800adb6:	2101      	movs	r1, #1
 800adb8:	ec59 8b10 	vmov	r8, r9, d0
 800adbc:	4616      	mov	r6, r2
 800adbe:	f7ff fc1b 	bl	800a5f8 <_Balloc>
 800adc2:	4604      	mov	r4, r0
 800adc4:	b930      	cbnz	r0, 800add4 <__d2b+0x24>
 800adc6:	4602      	mov	r2, r0
 800adc8:	4b24      	ldr	r3, [pc, #144]	; (800ae5c <__d2b+0xac>)
 800adca:	4825      	ldr	r0, [pc, #148]	; (800ae60 <__d2b+0xb0>)
 800adcc:	f240 310f 	movw	r1, #783	; 0x30f
 800add0:	f7fe f910 	bl	8008ff4 <__assert_func>
 800add4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800add8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800addc:	bb2d      	cbnz	r5, 800ae2a <__d2b+0x7a>
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	f1b8 0300 	subs.w	r3, r8, #0
 800ade4:	d026      	beq.n	800ae34 <__d2b+0x84>
 800ade6:	4668      	mov	r0, sp
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	f7ff fd17 	bl	800a81c <__lo0bits>
 800adee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adf2:	b1e8      	cbz	r0, 800ae30 <__d2b+0x80>
 800adf4:	f1c0 0320 	rsb	r3, r0, #32
 800adf8:	fa02 f303 	lsl.w	r3, r2, r3
 800adfc:	430b      	orrs	r3, r1
 800adfe:	40c2      	lsrs	r2, r0
 800ae00:	6163      	str	r3, [r4, #20]
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	61a3      	str	r3, [r4, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2202      	movne	r2, #2
 800ae0e:	2201      	moveq	r2, #1
 800ae10:	6122      	str	r2, [r4, #16]
 800ae12:	b1bd      	cbz	r5, 800ae44 <__d2b+0x94>
 800ae14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae18:	4405      	add	r5, r0
 800ae1a:	603d      	str	r5, [r7, #0]
 800ae1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae20:	6030      	str	r0, [r6, #0]
 800ae22:	4620      	mov	r0, r4
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae2e:	e7d6      	b.n	800adde <__d2b+0x2e>
 800ae30:	6161      	str	r1, [r4, #20]
 800ae32:	e7e7      	b.n	800ae04 <__d2b+0x54>
 800ae34:	a801      	add	r0, sp, #4
 800ae36:	f7ff fcf1 	bl	800a81c <__lo0bits>
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	6163      	str	r3, [r4, #20]
 800ae3e:	3020      	adds	r0, #32
 800ae40:	2201      	movs	r2, #1
 800ae42:	e7e5      	b.n	800ae10 <__d2b+0x60>
 800ae44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae4c:	6038      	str	r0, [r7, #0]
 800ae4e:	6918      	ldr	r0, [r3, #16]
 800ae50:	f7ff fcc4 	bl	800a7dc <__hi0bits>
 800ae54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae58:	e7e2      	b.n	800ae20 <__d2b+0x70>
 800ae5a:	bf00      	nop
 800ae5c:	0800ca1c 	.word	0x0800ca1c
 800ae60:	0800ca8d 	.word	0x0800ca8d

0800ae64 <__ratio>:
 800ae64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	4688      	mov	r8, r1
 800ae6a:	4669      	mov	r1, sp
 800ae6c:	4681      	mov	r9, r0
 800ae6e:	f7ff ff55 	bl	800ad1c <__b2d>
 800ae72:	a901      	add	r1, sp, #4
 800ae74:	4640      	mov	r0, r8
 800ae76:	ec55 4b10 	vmov	r4, r5, d0
 800ae7a:	f7ff ff4f 	bl	800ad1c <__b2d>
 800ae7e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae82:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ae86:	eba3 0c02 	sub.w	ip, r3, r2
 800ae8a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ae8e:	1a9b      	subs	r3, r3, r2
 800ae90:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ae94:	ec51 0b10 	vmov	r0, r1, d0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	bfd6      	itet	le
 800ae9c:	460a      	movle	r2, r1
 800ae9e:	462a      	movgt	r2, r5
 800aea0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aea4:	468b      	mov	fp, r1
 800aea6:	462f      	mov	r7, r5
 800aea8:	bfd4      	ite	le
 800aeaa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aeae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	ee10 2a10 	vmov	r2, s0
 800aeb8:	465b      	mov	r3, fp
 800aeba:	4639      	mov	r1, r7
 800aebc:	f7f5 fcc6 	bl	800084c <__aeabi_ddiv>
 800aec0:	ec41 0b10 	vmov	d0, r0, r1
 800aec4:	b003      	add	sp, #12
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aeca <__copybits>:
 800aeca:	3901      	subs	r1, #1
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	1149      	asrs	r1, r1, #5
 800aed0:	6914      	ldr	r4, [r2, #16]
 800aed2:	3101      	adds	r1, #1
 800aed4:	f102 0314 	add.w	r3, r2, #20
 800aed8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aedc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aee0:	1f05      	subs	r5, r0, #4
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	d30c      	bcc.n	800af00 <__copybits+0x36>
 800aee6:	1aa3      	subs	r3, r4, r2
 800aee8:	3b11      	subs	r3, #17
 800aeea:	f023 0303 	bic.w	r3, r3, #3
 800aeee:	3211      	adds	r2, #17
 800aef0:	42a2      	cmp	r2, r4
 800aef2:	bf88      	it	hi
 800aef4:	2300      	movhi	r3, #0
 800aef6:	4418      	add	r0, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	4288      	cmp	r0, r1
 800aefc:	d305      	bcc.n	800af0a <__copybits+0x40>
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
 800af00:	f853 6b04 	ldr.w	r6, [r3], #4
 800af04:	f845 6f04 	str.w	r6, [r5, #4]!
 800af08:	e7eb      	b.n	800aee2 <__copybits+0x18>
 800af0a:	f840 3b04 	str.w	r3, [r0], #4
 800af0e:	e7f4      	b.n	800aefa <__copybits+0x30>

0800af10 <__any_on>:
 800af10:	f100 0214 	add.w	r2, r0, #20
 800af14:	6900      	ldr	r0, [r0, #16]
 800af16:	114b      	asrs	r3, r1, #5
 800af18:	4298      	cmp	r0, r3
 800af1a:	b510      	push	{r4, lr}
 800af1c:	db11      	blt.n	800af42 <__any_on+0x32>
 800af1e:	dd0a      	ble.n	800af36 <__any_on+0x26>
 800af20:	f011 011f 	ands.w	r1, r1, #31
 800af24:	d007      	beq.n	800af36 <__any_on+0x26>
 800af26:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800af2a:	fa24 f001 	lsr.w	r0, r4, r1
 800af2e:	fa00 f101 	lsl.w	r1, r0, r1
 800af32:	428c      	cmp	r4, r1
 800af34:	d10b      	bne.n	800af4e <__any_on+0x3e>
 800af36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d803      	bhi.n	800af46 <__any_on+0x36>
 800af3e:	2000      	movs	r0, #0
 800af40:	bd10      	pop	{r4, pc}
 800af42:	4603      	mov	r3, r0
 800af44:	e7f7      	b.n	800af36 <__any_on+0x26>
 800af46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af4a:	2900      	cmp	r1, #0
 800af4c:	d0f5      	beq.n	800af3a <__any_on+0x2a>
 800af4e:	2001      	movs	r0, #1
 800af50:	e7f6      	b.n	800af40 <__any_on+0x30>

0800af52 <__ascii_wctomb>:
 800af52:	b149      	cbz	r1, 800af68 <__ascii_wctomb+0x16>
 800af54:	2aff      	cmp	r2, #255	; 0xff
 800af56:	bf85      	ittet	hi
 800af58:	238a      	movhi	r3, #138	; 0x8a
 800af5a:	6003      	strhi	r3, [r0, #0]
 800af5c:	700a      	strbls	r2, [r1, #0]
 800af5e:	f04f 30ff 	movhi.w	r0, #4294967295
 800af62:	bf98      	it	ls
 800af64:	2001      	movls	r0, #1
 800af66:	4770      	bx	lr
 800af68:	4608      	mov	r0, r1
 800af6a:	4770      	bx	lr

0800af6c <__ssputs_r>:
 800af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af70:	688e      	ldr	r6, [r1, #8]
 800af72:	461f      	mov	r7, r3
 800af74:	42be      	cmp	r6, r7
 800af76:	680b      	ldr	r3, [r1, #0]
 800af78:	4682      	mov	sl, r0
 800af7a:	460c      	mov	r4, r1
 800af7c:	4690      	mov	r8, r2
 800af7e:	d82c      	bhi.n	800afda <__ssputs_r+0x6e>
 800af80:	898a      	ldrh	r2, [r1, #12]
 800af82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af86:	d026      	beq.n	800afd6 <__ssputs_r+0x6a>
 800af88:	6965      	ldr	r5, [r4, #20]
 800af8a:	6909      	ldr	r1, [r1, #16]
 800af8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af90:	eba3 0901 	sub.w	r9, r3, r1
 800af94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af98:	1c7b      	adds	r3, r7, #1
 800af9a:	444b      	add	r3, r9
 800af9c:	106d      	asrs	r5, r5, #1
 800af9e:	429d      	cmp	r5, r3
 800afa0:	bf38      	it	cc
 800afa2:	461d      	movcc	r5, r3
 800afa4:	0553      	lsls	r3, r2, #21
 800afa6:	d527      	bpl.n	800aff8 <__ssputs_r+0x8c>
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7ff fa87 	bl	800a4bc <_malloc_r>
 800afae:	4606      	mov	r6, r0
 800afb0:	b360      	cbz	r0, 800b00c <__ssputs_r+0xa0>
 800afb2:	6921      	ldr	r1, [r4, #16]
 800afb4:	464a      	mov	r2, r9
 800afb6:	f7fd fffe 	bl	8008fb6 <memcpy>
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	6126      	str	r6, [r4, #16]
 800afc8:	6165      	str	r5, [r4, #20]
 800afca:	444e      	add	r6, r9
 800afcc:	eba5 0509 	sub.w	r5, r5, r9
 800afd0:	6026      	str	r6, [r4, #0]
 800afd2:	60a5      	str	r5, [r4, #8]
 800afd4:	463e      	mov	r6, r7
 800afd6:	42be      	cmp	r6, r7
 800afd8:	d900      	bls.n	800afdc <__ssputs_r+0x70>
 800afda:	463e      	mov	r6, r7
 800afdc:	6820      	ldr	r0, [r4, #0]
 800afde:	4632      	mov	r2, r6
 800afe0:	4641      	mov	r1, r8
 800afe2:	f000 fb81 	bl	800b6e8 <memmove>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	1b9b      	subs	r3, r3, r6
 800afea:	60a3      	str	r3, [r4, #8]
 800afec:	6823      	ldr	r3, [r4, #0]
 800afee:	4433      	add	r3, r6
 800aff0:	6023      	str	r3, [r4, #0]
 800aff2:	2000      	movs	r0, #0
 800aff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff8:	462a      	mov	r2, r5
 800affa:	f000 fbde 	bl	800b7ba <_realloc_r>
 800affe:	4606      	mov	r6, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	d1e0      	bne.n	800afc6 <__ssputs_r+0x5a>
 800b004:	6921      	ldr	r1, [r4, #16]
 800b006:	4650      	mov	r0, sl
 800b008:	f7fe fe8c 	bl	8009d24 <_free_r>
 800b00c:	230c      	movs	r3, #12
 800b00e:	f8ca 3000 	str.w	r3, [sl]
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	f04f 30ff 	mov.w	r0, #4294967295
 800b01e:	e7e9      	b.n	800aff4 <__ssputs_r+0x88>

0800b020 <_svfiprintf_r>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	4698      	mov	r8, r3
 800b026:	898b      	ldrh	r3, [r1, #12]
 800b028:	061b      	lsls	r3, r3, #24
 800b02a:	b09d      	sub	sp, #116	; 0x74
 800b02c:	4607      	mov	r7, r0
 800b02e:	460d      	mov	r5, r1
 800b030:	4614      	mov	r4, r2
 800b032:	d50e      	bpl.n	800b052 <_svfiprintf_r+0x32>
 800b034:	690b      	ldr	r3, [r1, #16]
 800b036:	b963      	cbnz	r3, 800b052 <_svfiprintf_r+0x32>
 800b038:	2140      	movs	r1, #64	; 0x40
 800b03a:	f7ff fa3f 	bl	800a4bc <_malloc_r>
 800b03e:	6028      	str	r0, [r5, #0]
 800b040:	6128      	str	r0, [r5, #16]
 800b042:	b920      	cbnz	r0, 800b04e <_svfiprintf_r+0x2e>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e0d0      	b.n	800b1f0 <_svfiprintf_r+0x1d0>
 800b04e:	2340      	movs	r3, #64	; 0x40
 800b050:	616b      	str	r3, [r5, #20]
 800b052:	2300      	movs	r3, #0
 800b054:	9309      	str	r3, [sp, #36]	; 0x24
 800b056:	2320      	movs	r3, #32
 800b058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b060:	2330      	movs	r3, #48	; 0x30
 800b062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b208 <_svfiprintf_r+0x1e8>
 800b066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b06a:	f04f 0901 	mov.w	r9, #1
 800b06e:	4623      	mov	r3, r4
 800b070:	469a      	mov	sl, r3
 800b072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b076:	b10a      	cbz	r2, 800b07c <_svfiprintf_r+0x5c>
 800b078:	2a25      	cmp	r2, #37	; 0x25
 800b07a:	d1f9      	bne.n	800b070 <_svfiprintf_r+0x50>
 800b07c:	ebba 0b04 	subs.w	fp, sl, r4
 800b080:	d00b      	beq.n	800b09a <_svfiprintf_r+0x7a>
 800b082:	465b      	mov	r3, fp
 800b084:	4622      	mov	r2, r4
 800b086:	4629      	mov	r1, r5
 800b088:	4638      	mov	r0, r7
 800b08a:	f7ff ff6f 	bl	800af6c <__ssputs_r>
 800b08e:	3001      	adds	r0, #1
 800b090:	f000 80a9 	beq.w	800b1e6 <_svfiprintf_r+0x1c6>
 800b094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b096:	445a      	add	r2, fp
 800b098:	9209      	str	r2, [sp, #36]	; 0x24
 800b09a:	f89a 3000 	ldrb.w	r3, [sl]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 80a1 	beq.w	800b1e6 <_svfiprintf_r+0x1c6>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ae:	f10a 0a01 	add.w	sl, sl, #1
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	9307      	str	r3, [sp, #28]
 800b0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800b0bc:	4654      	mov	r4, sl
 800b0be:	2205      	movs	r2, #5
 800b0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c4:	4850      	ldr	r0, [pc, #320]	; (800b208 <_svfiprintf_r+0x1e8>)
 800b0c6:	f7f5 f883 	bl	80001d0 <memchr>
 800b0ca:	9a04      	ldr	r2, [sp, #16]
 800b0cc:	b9d8      	cbnz	r0, 800b106 <_svfiprintf_r+0xe6>
 800b0ce:	06d0      	lsls	r0, r2, #27
 800b0d0:	bf44      	itt	mi
 800b0d2:	2320      	movmi	r3, #32
 800b0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d8:	0711      	lsls	r1, r2, #28
 800b0da:	bf44      	itt	mi
 800b0dc:	232b      	movmi	r3, #43	; 0x2b
 800b0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e8:	d015      	beq.n	800b116 <_svfiprintf_r+0xf6>
 800b0ea:	9a07      	ldr	r2, [sp, #28]
 800b0ec:	4654      	mov	r4, sl
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	f04f 0c0a 	mov.w	ip, #10
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0fa:	3b30      	subs	r3, #48	; 0x30
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	d94d      	bls.n	800b19c <_svfiprintf_r+0x17c>
 800b100:	b1b0      	cbz	r0, 800b130 <_svfiprintf_r+0x110>
 800b102:	9207      	str	r2, [sp, #28]
 800b104:	e014      	b.n	800b130 <_svfiprintf_r+0x110>
 800b106:	eba0 0308 	sub.w	r3, r0, r8
 800b10a:	fa09 f303 	lsl.w	r3, r9, r3
 800b10e:	4313      	orrs	r3, r2
 800b110:	9304      	str	r3, [sp, #16]
 800b112:	46a2      	mov	sl, r4
 800b114:	e7d2      	b.n	800b0bc <_svfiprintf_r+0x9c>
 800b116:	9b03      	ldr	r3, [sp, #12]
 800b118:	1d19      	adds	r1, r3, #4
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	9103      	str	r1, [sp, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bfbb      	ittet	lt
 800b122:	425b      	neglt	r3, r3
 800b124:	f042 0202 	orrlt.w	r2, r2, #2
 800b128:	9307      	strge	r3, [sp, #28]
 800b12a:	9307      	strlt	r3, [sp, #28]
 800b12c:	bfb8      	it	lt
 800b12e:	9204      	strlt	r2, [sp, #16]
 800b130:	7823      	ldrb	r3, [r4, #0]
 800b132:	2b2e      	cmp	r3, #46	; 0x2e
 800b134:	d10c      	bne.n	800b150 <_svfiprintf_r+0x130>
 800b136:	7863      	ldrb	r3, [r4, #1]
 800b138:	2b2a      	cmp	r3, #42	; 0x2a
 800b13a:	d134      	bne.n	800b1a6 <_svfiprintf_r+0x186>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	1d1a      	adds	r2, r3, #4
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	9203      	str	r2, [sp, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	bfb8      	it	lt
 800b148:	f04f 33ff 	movlt.w	r3, #4294967295
 800b14c:	3402      	adds	r4, #2
 800b14e:	9305      	str	r3, [sp, #20]
 800b150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b218 <_svfiprintf_r+0x1f8>
 800b154:	7821      	ldrb	r1, [r4, #0]
 800b156:	2203      	movs	r2, #3
 800b158:	4650      	mov	r0, sl
 800b15a:	f7f5 f839 	bl	80001d0 <memchr>
 800b15e:	b138      	cbz	r0, 800b170 <_svfiprintf_r+0x150>
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	eba0 000a 	sub.w	r0, r0, sl
 800b166:	2240      	movs	r2, #64	; 0x40
 800b168:	4082      	lsls	r2, r0
 800b16a:	4313      	orrs	r3, r2
 800b16c:	3401      	adds	r4, #1
 800b16e:	9304      	str	r3, [sp, #16]
 800b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b174:	4825      	ldr	r0, [pc, #148]	; (800b20c <_svfiprintf_r+0x1ec>)
 800b176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b17a:	2206      	movs	r2, #6
 800b17c:	f7f5 f828 	bl	80001d0 <memchr>
 800b180:	2800      	cmp	r0, #0
 800b182:	d038      	beq.n	800b1f6 <_svfiprintf_r+0x1d6>
 800b184:	4b22      	ldr	r3, [pc, #136]	; (800b210 <_svfiprintf_r+0x1f0>)
 800b186:	bb1b      	cbnz	r3, 800b1d0 <_svfiprintf_r+0x1b0>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	3307      	adds	r3, #7
 800b18c:	f023 0307 	bic.w	r3, r3, #7
 800b190:	3308      	adds	r3, #8
 800b192:	9303      	str	r3, [sp, #12]
 800b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b196:	4433      	add	r3, r6
 800b198:	9309      	str	r3, [sp, #36]	; 0x24
 800b19a:	e768      	b.n	800b06e <_svfiprintf_r+0x4e>
 800b19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7a6      	b.n	800b0f4 <_svfiprintf_r+0xd4>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	3401      	adds	r4, #1
 800b1aa:	9305      	str	r3, [sp, #20]
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	f04f 0c0a 	mov.w	ip, #10
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b8:	3a30      	subs	r2, #48	; 0x30
 800b1ba:	2a09      	cmp	r2, #9
 800b1bc:	d903      	bls.n	800b1c6 <_svfiprintf_r+0x1a6>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0c6      	beq.n	800b150 <_svfiprintf_r+0x130>
 800b1c2:	9105      	str	r1, [sp, #20]
 800b1c4:	e7c4      	b.n	800b150 <_svfiprintf_r+0x130>
 800b1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e7f0      	b.n	800b1b2 <_svfiprintf_r+0x192>
 800b1d0:	ab03      	add	r3, sp, #12
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <_svfiprintf_r+0x1f4>)
 800b1d8:	a904      	add	r1, sp, #16
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f7fc fdb8 	bl	8007d50 <_printf_float>
 800b1e0:	1c42      	adds	r2, r0, #1
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	d1d6      	bne.n	800b194 <_svfiprintf_r+0x174>
 800b1e6:	89ab      	ldrh	r3, [r5, #12]
 800b1e8:	065b      	lsls	r3, r3, #25
 800b1ea:	f53f af2d 	bmi.w	800b048 <_svfiprintf_r+0x28>
 800b1ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1f0:	b01d      	add	sp, #116	; 0x74
 800b1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f6:	ab03      	add	r3, sp, #12
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	462a      	mov	r2, r5
 800b1fc:	4b05      	ldr	r3, [pc, #20]	; (800b214 <_svfiprintf_r+0x1f4>)
 800b1fe:	a904      	add	r1, sp, #16
 800b200:	4638      	mov	r0, r7
 800b202:	f7fd f849 	bl	8008298 <_printf_i>
 800b206:	e7eb      	b.n	800b1e0 <_svfiprintf_r+0x1c0>
 800b208:	0800cbe4 	.word	0x0800cbe4
 800b20c:	0800cbee 	.word	0x0800cbee
 800b210:	08007d51 	.word	0x08007d51
 800b214:	0800af6d 	.word	0x0800af6d
 800b218:	0800cbea 	.word	0x0800cbea

0800b21c <__sfputc_r>:
 800b21c:	6893      	ldr	r3, [r2, #8]
 800b21e:	3b01      	subs	r3, #1
 800b220:	2b00      	cmp	r3, #0
 800b222:	b410      	push	{r4}
 800b224:	6093      	str	r3, [r2, #8]
 800b226:	da08      	bge.n	800b23a <__sfputc_r+0x1e>
 800b228:	6994      	ldr	r4, [r2, #24]
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	db01      	blt.n	800b232 <__sfputc_r+0x16>
 800b22e:	290a      	cmp	r1, #10
 800b230:	d103      	bne.n	800b23a <__sfputc_r+0x1e>
 800b232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b236:	f7fd bd28 	b.w	8008c8a <__swbuf_r>
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	1c58      	adds	r0, r3, #1
 800b23e:	6010      	str	r0, [r2, #0]
 800b240:	7019      	strb	r1, [r3, #0]
 800b242:	4608      	mov	r0, r1
 800b244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <__sfputs_r>:
 800b24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	4614      	mov	r4, r2
 800b252:	18d5      	adds	r5, r2, r3
 800b254:	42ac      	cmp	r4, r5
 800b256:	d101      	bne.n	800b25c <__sfputs_r+0x12>
 800b258:	2000      	movs	r0, #0
 800b25a:	e007      	b.n	800b26c <__sfputs_r+0x22>
 800b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b260:	463a      	mov	r2, r7
 800b262:	4630      	mov	r0, r6
 800b264:	f7ff ffda 	bl	800b21c <__sfputc_r>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d1f3      	bne.n	800b254 <__sfputs_r+0xa>
 800b26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b270 <_vfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	460d      	mov	r5, r1
 800b276:	b09d      	sub	sp, #116	; 0x74
 800b278:	4614      	mov	r4, r2
 800b27a:	4698      	mov	r8, r3
 800b27c:	4606      	mov	r6, r0
 800b27e:	b118      	cbz	r0, 800b288 <_vfiprintf_r+0x18>
 800b280:	6a03      	ldr	r3, [r0, #32]
 800b282:	b90b      	cbnz	r3, 800b288 <_vfiprintf_r+0x18>
 800b284:	f7fd fbc6 	bl	8008a14 <__sinit>
 800b288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b28a:	07d9      	lsls	r1, r3, #31
 800b28c:	d405      	bmi.n	800b29a <_vfiprintf_r+0x2a>
 800b28e:	89ab      	ldrh	r3, [r5, #12]
 800b290:	059a      	lsls	r2, r3, #22
 800b292:	d402      	bmi.n	800b29a <_vfiprintf_r+0x2a>
 800b294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b296:	f7fd fe8c 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	071b      	lsls	r3, r3, #28
 800b29e:	d501      	bpl.n	800b2a4 <_vfiprintf_r+0x34>
 800b2a0:	692b      	ldr	r3, [r5, #16]
 800b2a2:	b99b      	cbnz	r3, 800b2cc <_vfiprintf_r+0x5c>
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f7fd fd2c 	bl	8008d04 <__swsetup_r>
 800b2ac:	b170      	cbz	r0, 800b2cc <_vfiprintf_r+0x5c>
 800b2ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b0:	07dc      	lsls	r4, r3, #31
 800b2b2:	d504      	bpl.n	800b2be <_vfiprintf_r+0x4e>
 800b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b8:	b01d      	add	sp, #116	; 0x74
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	89ab      	ldrh	r3, [r5, #12]
 800b2c0:	0598      	lsls	r0, r3, #22
 800b2c2:	d4f7      	bmi.n	800b2b4 <_vfiprintf_r+0x44>
 800b2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2c6:	f7fd fe75 	bl	8008fb4 <__retarget_lock_release_recursive>
 800b2ca:	e7f3      	b.n	800b2b4 <_vfiprintf_r+0x44>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d0:	2320      	movs	r3, #32
 800b2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2da:	2330      	movs	r3, #48	; 0x30
 800b2dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b490 <_vfiprintf_r+0x220>
 800b2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e4:	f04f 0901 	mov.w	r9, #1
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	469a      	mov	sl, r3
 800b2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f0:	b10a      	cbz	r2, 800b2f6 <_vfiprintf_r+0x86>
 800b2f2:	2a25      	cmp	r2, #37	; 0x25
 800b2f4:	d1f9      	bne.n	800b2ea <_vfiprintf_r+0x7a>
 800b2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fa:	d00b      	beq.n	800b314 <_vfiprintf_r+0xa4>
 800b2fc:	465b      	mov	r3, fp
 800b2fe:	4622      	mov	r2, r4
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ffa1 	bl	800b24a <__sfputs_r>
 800b308:	3001      	adds	r0, #1
 800b30a:	f000 80a9 	beq.w	800b460 <_vfiprintf_r+0x1f0>
 800b30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b310:	445a      	add	r2, fp
 800b312:	9209      	str	r2, [sp, #36]	; 0x24
 800b314:	f89a 3000 	ldrb.w	r3, [sl]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80a1 	beq.w	800b460 <_vfiprintf_r+0x1f0>
 800b31e:	2300      	movs	r3, #0
 800b320:	f04f 32ff 	mov.w	r2, #4294967295
 800b324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b328:	f10a 0a01 	add.w	sl, sl, #1
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	9307      	str	r3, [sp, #28]
 800b330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b334:	931a      	str	r3, [sp, #104]	; 0x68
 800b336:	4654      	mov	r4, sl
 800b338:	2205      	movs	r2, #5
 800b33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b33e:	4854      	ldr	r0, [pc, #336]	; (800b490 <_vfiprintf_r+0x220>)
 800b340:	f7f4 ff46 	bl	80001d0 <memchr>
 800b344:	9a04      	ldr	r2, [sp, #16]
 800b346:	b9d8      	cbnz	r0, 800b380 <_vfiprintf_r+0x110>
 800b348:	06d1      	lsls	r1, r2, #27
 800b34a:	bf44      	itt	mi
 800b34c:	2320      	movmi	r3, #32
 800b34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b352:	0713      	lsls	r3, r2, #28
 800b354:	bf44      	itt	mi
 800b356:	232b      	movmi	r3, #43	; 0x2b
 800b358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b35c:	f89a 3000 	ldrb.w	r3, [sl]
 800b360:	2b2a      	cmp	r3, #42	; 0x2a
 800b362:	d015      	beq.n	800b390 <_vfiprintf_r+0x120>
 800b364:	9a07      	ldr	r2, [sp, #28]
 800b366:	4654      	mov	r4, sl
 800b368:	2000      	movs	r0, #0
 800b36a:	f04f 0c0a 	mov.w	ip, #10
 800b36e:	4621      	mov	r1, r4
 800b370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b374:	3b30      	subs	r3, #48	; 0x30
 800b376:	2b09      	cmp	r3, #9
 800b378:	d94d      	bls.n	800b416 <_vfiprintf_r+0x1a6>
 800b37a:	b1b0      	cbz	r0, 800b3aa <_vfiprintf_r+0x13a>
 800b37c:	9207      	str	r2, [sp, #28]
 800b37e:	e014      	b.n	800b3aa <_vfiprintf_r+0x13a>
 800b380:	eba0 0308 	sub.w	r3, r0, r8
 800b384:	fa09 f303 	lsl.w	r3, r9, r3
 800b388:	4313      	orrs	r3, r2
 800b38a:	9304      	str	r3, [sp, #16]
 800b38c:	46a2      	mov	sl, r4
 800b38e:	e7d2      	b.n	800b336 <_vfiprintf_r+0xc6>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	1d19      	adds	r1, r3, #4
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	9103      	str	r1, [sp, #12]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	bfbb      	ittet	lt
 800b39c:	425b      	neglt	r3, r3
 800b39e:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a2:	9307      	strge	r3, [sp, #28]
 800b3a4:	9307      	strlt	r3, [sp, #28]
 800b3a6:	bfb8      	it	lt
 800b3a8:	9204      	strlt	r2, [sp, #16]
 800b3aa:	7823      	ldrb	r3, [r4, #0]
 800b3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ae:	d10c      	bne.n	800b3ca <_vfiprintf_r+0x15a>
 800b3b0:	7863      	ldrb	r3, [r4, #1]
 800b3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b4:	d134      	bne.n	800b420 <_vfiprintf_r+0x1b0>
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	1d1a      	adds	r2, r3, #4
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	9203      	str	r2, [sp, #12]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	bfb8      	it	lt
 800b3c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c6:	3402      	adds	r4, #2
 800b3c8:	9305      	str	r3, [sp, #20]
 800b3ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b4a0 <_vfiprintf_r+0x230>
 800b3ce:	7821      	ldrb	r1, [r4, #0]
 800b3d0:	2203      	movs	r2, #3
 800b3d2:	4650      	mov	r0, sl
 800b3d4:	f7f4 fefc 	bl	80001d0 <memchr>
 800b3d8:	b138      	cbz	r0, 800b3ea <_vfiprintf_r+0x17a>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	eba0 000a 	sub.w	r0, r0, sl
 800b3e0:	2240      	movs	r2, #64	; 0x40
 800b3e2:	4082      	lsls	r2, r0
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	3401      	adds	r4, #1
 800b3e8:	9304      	str	r3, [sp, #16]
 800b3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ee:	4829      	ldr	r0, [pc, #164]	; (800b494 <_vfiprintf_r+0x224>)
 800b3f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f4:	2206      	movs	r2, #6
 800b3f6:	f7f4 feeb 	bl	80001d0 <memchr>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d03f      	beq.n	800b47e <_vfiprintf_r+0x20e>
 800b3fe:	4b26      	ldr	r3, [pc, #152]	; (800b498 <_vfiprintf_r+0x228>)
 800b400:	bb1b      	cbnz	r3, 800b44a <_vfiprintf_r+0x1da>
 800b402:	9b03      	ldr	r3, [sp, #12]
 800b404:	3307      	adds	r3, #7
 800b406:	f023 0307 	bic.w	r3, r3, #7
 800b40a:	3308      	adds	r3, #8
 800b40c:	9303      	str	r3, [sp, #12]
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	443b      	add	r3, r7
 800b412:	9309      	str	r3, [sp, #36]	; 0x24
 800b414:	e768      	b.n	800b2e8 <_vfiprintf_r+0x78>
 800b416:	fb0c 3202 	mla	r2, ip, r2, r3
 800b41a:	460c      	mov	r4, r1
 800b41c:	2001      	movs	r0, #1
 800b41e:	e7a6      	b.n	800b36e <_vfiprintf_r+0xfe>
 800b420:	2300      	movs	r3, #0
 800b422:	3401      	adds	r4, #1
 800b424:	9305      	str	r3, [sp, #20]
 800b426:	4619      	mov	r1, r3
 800b428:	f04f 0c0a 	mov.w	ip, #10
 800b42c:	4620      	mov	r0, r4
 800b42e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b432:	3a30      	subs	r2, #48	; 0x30
 800b434:	2a09      	cmp	r2, #9
 800b436:	d903      	bls.n	800b440 <_vfiprintf_r+0x1d0>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d0c6      	beq.n	800b3ca <_vfiprintf_r+0x15a>
 800b43c:	9105      	str	r1, [sp, #20]
 800b43e:	e7c4      	b.n	800b3ca <_vfiprintf_r+0x15a>
 800b440:	fb0c 2101 	mla	r1, ip, r1, r2
 800b444:	4604      	mov	r4, r0
 800b446:	2301      	movs	r3, #1
 800b448:	e7f0      	b.n	800b42c <_vfiprintf_r+0x1bc>
 800b44a:	ab03      	add	r3, sp, #12
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	462a      	mov	r2, r5
 800b450:	4b12      	ldr	r3, [pc, #72]	; (800b49c <_vfiprintf_r+0x22c>)
 800b452:	a904      	add	r1, sp, #16
 800b454:	4630      	mov	r0, r6
 800b456:	f7fc fc7b 	bl	8007d50 <_printf_float>
 800b45a:	4607      	mov	r7, r0
 800b45c:	1c78      	adds	r0, r7, #1
 800b45e:	d1d6      	bne.n	800b40e <_vfiprintf_r+0x19e>
 800b460:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b462:	07d9      	lsls	r1, r3, #31
 800b464:	d405      	bmi.n	800b472 <_vfiprintf_r+0x202>
 800b466:	89ab      	ldrh	r3, [r5, #12]
 800b468:	059a      	lsls	r2, r3, #22
 800b46a:	d402      	bmi.n	800b472 <_vfiprintf_r+0x202>
 800b46c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46e:	f7fd fda1 	bl	8008fb4 <__retarget_lock_release_recursive>
 800b472:	89ab      	ldrh	r3, [r5, #12]
 800b474:	065b      	lsls	r3, r3, #25
 800b476:	f53f af1d 	bmi.w	800b2b4 <_vfiprintf_r+0x44>
 800b47a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b47c:	e71c      	b.n	800b2b8 <_vfiprintf_r+0x48>
 800b47e:	ab03      	add	r3, sp, #12
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	462a      	mov	r2, r5
 800b484:	4b05      	ldr	r3, [pc, #20]	; (800b49c <_vfiprintf_r+0x22c>)
 800b486:	a904      	add	r1, sp, #16
 800b488:	4630      	mov	r0, r6
 800b48a:	f7fc ff05 	bl	8008298 <_printf_i>
 800b48e:	e7e4      	b.n	800b45a <_vfiprintf_r+0x1ea>
 800b490:	0800cbe4 	.word	0x0800cbe4
 800b494:	0800cbee 	.word	0x0800cbee
 800b498:	08007d51 	.word	0x08007d51
 800b49c:	0800b24b 	.word	0x0800b24b
 800b4a0:	0800cbea 	.word	0x0800cbea

0800b4a4 <__sflush_r>:
 800b4a4:	898a      	ldrh	r2, [r1, #12]
 800b4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4aa:	4605      	mov	r5, r0
 800b4ac:	0710      	lsls	r0, r2, #28
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	d458      	bmi.n	800b564 <__sflush_r+0xc0>
 800b4b2:	684b      	ldr	r3, [r1, #4]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dc05      	bgt.n	800b4c4 <__sflush_r+0x20>
 800b4b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	dc02      	bgt.n	800b4c4 <__sflush_r+0x20>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	d0f9      	beq.n	800b4be <__sflush_r+0x1a>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4d0:	682f      	ldr	r7, [r5, #0]
 800b4d2:	6a21      	ldr	r1, [r4, #32]
 800b4d4:	602b      	str	r3, [r5, #0]
 800b4d6:	d032      	beq.n	800b53e <__sflush_r+0x9a>
 800b4d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4da:	89a3      	ldrh	r3, [r4, #12]
 800b4dc:	075a      	lsls	r2, r3, #29
 800b4de:	d505      	bpl.n	800b4ec <__sflush_r+0x48>
 800b4e0:	6863      	ldr	r3, [r4, #4]
 800b4e2:	1ac0      	subs	r0, r0, r3
 800b4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4e6:	b10b      	cbz	r3, 800b4ec <__sflush_r+0x48>
 800b4e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4ea:	1ac0      	subs	r0, r0, r3
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4f2:	6a21      	ldr	r1, [r4, #32]
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b0      	blx	r6
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	89a3      	ldrh	r3, [r4, #12]
 800b4fc:	d106      	bne.n	800b50c <__sflush_r+0x68>
 800b4fe:	6829      	ldr	r1, [r5, #0]
 800b500:	291d      	cmp	r1, #29
 800b502:	d82b      	bhi.n	800b55c <__sflush_r+0xb8>
 800b504:	4a29      	ldr	r2, [pc, #164]	; (800b5ac <__sflush_r+0x108>)
 800b506:	410a      	asrs	r2, r1
 800b508:	07d6      	lsls	r6, r2, #31
 800b50a:	d427      	bmi.n	800b55c <__sflush_r+0xb8>
 800b50c:	2200      	movs	r2, #0
 800b50e:	6062      	str	r2, [r4, #4]
 800b510:	04d9      	lsls	r1, r3, #19
 800b512:	6922      	ldr	r2, [r4, #16]
 800b514:	6022      	str	r2, [r4, #0]
 800b516:	d504      	bpl.n	800b522 <__sflush_r+0x7e>
 800b518:	1c42      	adds	r2, r0, #1
 800b51a:	d101      	bne.n	800b520 <__sflush_r+0x7c>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b903      	cbnz	r3, 800b522 <__sflush_r+0x7e>
 800b520:	6560      	str	r0, [r4, #84]	; 0x54
 800b522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b524:	602f      	str	r7, [r5, #0]
 800b526:	2900      	cmp	r1, #0
 800b528:	d0c9      	beq.n	800b4be <__sflush_r+0x1a>
 800b52a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b52e:	4299      	cmp	r1, r3
 800b530:	d002      	beq.n	800b538 <__sflush_r+0x94>
 800b532:	4628      	mov	r0, r5
 800b534:	f7fe fbf6 	bl	8009d24 <_free_r>
 800b538:	2000      	movs	r0, #0
 800b53a:	6360      	str	r0, [r4, #52]	; 0x34
 800b53c:	e7c0      	b.n	800b4c0 <__sflush_r+0x1c>
 800b53e:	2301      	movs	r3, #1
 800b540:	4628      	mov	r0, r5
 800b542:	47b0      	blx	r6
 800b544:	1c41      	adds	r1, r0, #1
 800b546:	d1c8      	bne.n	800b4da <__sflush_r+0x36>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0c5      	beq.n	800b4da <__sflush_r+0x36>
 800b54e:	2b1d      	cmp	r3, #29
 800b550:	d001      	beq.n	800b556 <__sflush_r+0xb2>
 800b552:	2b16      	cmp	r3, #22
 800b554:	d101      	bne.n	800b55a <__sflush_r+0xb6>
 800b556:	602f      	str	r7, [r5, #0]
 800b558:	e7b1      	b.n	800b4be <__sflush_r+0x1a>
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	e7ad      	b.n	800b4c0 <__sflush_r+0x1c>
 800b564:	690f      	ldr	r7, [r1, #16]
 800b566:	2f00      	cmp	r7, #0
 800b568:	d0a9      	beq.n	800b4be <__sflush_r+0x1a>
 800b56a:	0793      	lsls	r3, r2, #30
 800b56c:	680e      	ldr	r6, [r1, #0]
 800b56e:	bf08      	it	eq
 800b570:	694b      	ldreq	r3, [r1, #20]
 800b572:	600f      	str	r7, [r1, #0]
 800b574:	bf18      	it	ne
 800b576:	2300      	movne	r3, #0
 800b578:	eba6 0807 	sub.w	r8, r6, r7
 800b57c:	608b      	str	r3, [r1, #8]
 800b57e:	f1b8 0f00 	cmp.w	r8, #0
 800b582:	dd9c      	ble.n	800b4be <__sflush_r+0x1a>
 800b584:	6a21      	ldr	r1, [r4, #32]
 800b586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b588:	4643      	mov	r3, r8
 800b58a:	463a      	mov	r2, r7
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b0      	blx	r6
 800b590:	2800      	cmp	r0, #0
 800b592:	dc06      	bgt.n	800b5a2 <__sflush_r+0xfe>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a0:	e78e      	b.n	800b4c0 <__sflush_r+0x1c>
 800b5a2:	4407      	add	r7, r0
 800b5a4:	eba8 0800 	sub.w	r8, r8, r0
 800b5a8:	e7e9      	b.n	800b57e <__sflush_r+0xda>
 800b5aa:	bf00      	nop
 800b5ac:	dfbffffe 	.word	0xdfbffffe

0800b5b0 <_fflush_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	690b      	ldr	r3, [r1, #16]
 800b5b4:	4605      	mov	r5, r0
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	b913      	cbnz	r3, 800b5c0 <_fflush_r+0x10>
 800b5ba:	2500      	movs	r5, #0
 800b5bc:	4628      	mov	r0, r5
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	b118      	cbz	r0, 800b5ca <_fflush_r+0x1a>
 800b5c2:	6a03      	ldr	r3, [r0, #32]
 800b5c4:	b90b      	cbnz	r3, 800b5ca <_fflush_r+0x1a>
 800b5c6:	f7fd fa25 	bl	8008a14 <__sinit>
 800b5ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0f3      	beq.n	800b5ba <_fflush_r+0xa>
 800b5d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5d4:	07d0      	lsls	r0, r2, #31
 800b5d6:	d404      	bmi.n	800b5e2 <_fflush_r+0x32>
 800b5d8:	0599      	lsls	r1, r3, #22
 800b5da:	d402      	bmi.n	800b5e2 <_fflush_r+0x32>
 800b5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5de:	f7fd fce8 	bl	8008fb2 <__retarget_lock_acquire_recursive>
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	f7ff ff5d 	bl	800b4a4 <__sflush_r>
 800b5ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5ec:	07da      	lsls	r2, r3, #31
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	d4e4      	bmi.n	800b5bc <_fflush_r+0xc>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	059b      	lsls	r3, r3, #22
 800b5f6:	d4e1      	bmi.n	800b5bc <_fflush_r+0xc>
 800b5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5fa:	f7fd fcdb 	bl	8008fb4 <__retarget_lock_release_recursive>
 800b5fe:	e7dd      	b.n	800b5bc <_fflush_r+0xc>

0800b600 <fiprintf>:
 800b600:	b40e      	push	{r1, r2, r3}
 800b602:	b503      	push	{r0, r1, lr}
 800b604:	4601      	mov	r1, r0
 800b606:	ab03      	add	r3, sp, #12
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <fiprintf+0x20>)
 800b60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60e:	6800      	ldr	r0, [r0, #0]
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	f7ff fe2d 	bl	800b270 <_vfiprintf_r>
 800b616:	b002      	add	sp, #8
 800b618:	f85d eb04 	ldr.w	lr, [sp], #4
 800b61c:	b003      	add	sp, #12
 800b61e:	4770      	bx	lr
 800b620:	200001d4 	.word	0x200001d4

0800b624 <__swhatbuf_r>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	2900      	cmp	r1, #0
 800b62e:	b096      	sub	sp, #88	; 0x58
 800b630:	4615      	mov	r5, r2
 800b632:	461e      	mov	r6, r3
 800b634:	da0d      	bge.n	800b652 <__swhatbuf_r+0x2e>
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b63c:	f04f 0100 	mov.w	r1, #0
 800b640:	bf0c      	ite	eq
 800b642:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b646:	2340      	movne	r3, #64	; 0x40
 800b648:	2000      	movs	r0, #0
 800b64a:	6031      	str	r1, [r6, #0]
 800b64c:	602b      	str	r3, [r5, #0]
 800b64e:	b016      	add	sp, #88	; 0x58
 800b650:	bd70      	pop	{r4, r5, r6, pc}
 800b652:	466a      	mov	r2, sp
 800b654:	f000 f862 	bl	800b71c <_fstat_r>
 800b658:	2800      	cmp	r0, #0
 800b65a:	dbec      	blt.n	800b636 <__swhatbuf_r+0x12>
 800b65c:	9901      	ldr	r1, [sp, #4]
 800b65e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b662:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b666:	4259      	negs	r1, r3
 800b668:	4159      	adcs	r1, r3
 800b66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b66e:	e7eb      	b.n	800b648 <__swhatbuf_r+0x24>

0800b670 <__smakebuf_r>:
 800b670:	898b      	ldrh	r3, [r1, #12]
 800b672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b674:	079d      	lsls	r5, r3, #30
 800b676:	4606      	mov	r6, r0
 800b678:	460c      	mov	r4, r1
 800b67a:	d507      	bpl.n	800b68c <__smakebuf_r+0x1c>
 800b67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	2301      	movs	r3, #1
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	b002      	add	sp, #8
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
 800b68c:	ab01      	add	r3, sp, #4
 800b68e:	466a      	mov	r2, sp
 800b690:	f7ff ffc8 	bl	800b624 <__swhatbuf_r>
 800b694:	9900      	ldr	r1, [sp, #0]
 800b696:	4605      	mov	r5, r0
 800b698:	4630      	mov	r0, r6
 800b69a:	f7fe ff0f 	bl	800a4bc <_malloc_r>
 800b69e:	b948      	cbnz	r0, 800b6b4 <__smakebuf_r+0x44>
 800b6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a4:	059a      	lsls	r2, r3, #22
 800b6a6:	d4ef      	bmi.n	800b688 <__smakebuf_r+0x18>
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	f043 0302 	orr.w	r3, r3, #2
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	e7e3      	b.n	800b67c <__smakebuf_r+0xc>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	6020      	str	r0, [r4, #0]
 800b6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	6163      	str	r3, [r4, #20]
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	6120      	str	r0, [r4, #16]
 800b6c6:	b15b      	cbz	r3, 800b6e0 <__smakebuf_r+0x70>
 800b6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 f837 	bl	800b740 <_isatty_r>
 800b6d2:	b128      	cbz	r0, 800b6e0 <__smakebuf_r+0x70>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	f043 0301 	orr.w	r3, r3, #1
 800b6de:	81a3      	strh	r3, [r4, #12]
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	431d      	orrs	r5, r3
 800b6e4:	81a5      	strh	r5, [r4, #12]
 800b6e6:	e7cf      	b.n	800b688 <__smakebuf_r+0x18>

0800b6e8 <memmove>:
 800b6e8:	4288      	cmp	r0, r1
 800b6ea:	b510      	push	{r4, lr}
 800b6ec:	eb01 0402 	add.w	r4, r1, r2
 800b6f0:	d902      	bls.n	800b6f8 <memmove+0x10>
 800b6f2:	4284      	cmp	r4, r0
 800b6f4:	4623      	mov	r3, r4
 800b6f6:	d807      	bhi.n	800b708 <memmove+0x20>
 800b6f8:	1e43      	subs	r3, r0, #1
 800b6fa:	42a1      	cmp	r1, r4
 800b6fc:	d008      	beq.n	800b710 <memmove+0x28>
 800b6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b706:	e7f8      	b.n	800b6fa <memmove+0x12>
 800b708:	4402      	add	r2, r0
 800b70a:	4601      	mov	r1, r0
 800b70c:	428a      	cmp	r2, r1
 800b70e:	d100      	bne.n	800b712 <memmove+0x2a>
 800b710:	bd10      	pop	{r4, pc}
 800b712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b71a:	e7f7      	b.n	800b70c <memmove+0x24>

0800b71c <_fstat_r>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4d07      	ldr	r5, [pc, #28]	; (800b73c <_fstat_r+0x20>)
 800b720:	2300      	movs	r3, #0
 800b722:	4604      	mov	r4, r0
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	f7f6 ff6b 	bl	8002604 <_fstat>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d102      	bne.n	800b738 <_fstat_r+0x1c>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	b103      	cbz	r3, 800b738 <_fstat_r+0x1c>
 800b736:	6023      	str	r3, [r4, #0]
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	bf00      	nop
 800b73c:	200004dc 	.word	0x200004dc

0800b740 <_isatty_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	; (800b75c <_isatty_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f6 ff6a 	bl	8002624 <_isatty>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_isatty_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_isatty_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	200004dc 	.word	0x200004dc

0800b760 <_sbrk_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d06      	ldr	r5, [pc, #24]	; (800b77c <_sbrk_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7f6 ff72 	bl	8002654 <_sbrk>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_sbrk_r+0x1a>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_sbrk_r+0x1a>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	200004dc 	.word	0x200004dc

0800b780 <abort>:
 800b780:	b508      	push	{r3, lr}
 800b782:	2006      	movs	r0, #6
 800b784:	f000 f870 	bl	800b868 <raise>
 800b788:	2001      	movs	r0, #1
 800b78a:	f7f6 fee5 	bl	8002558 <_exit>

0800b78e <_calloc_r>:
 800b78e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b790:	fba1 2402 	umull	r2, r4, r1, r2
 800b794:	b94c      	cbnz	r4, 800b7aa <_calloc_r+0x1c>
 800b796:	4611      	mov	r1, r2
 800b798:	9201      	str	r2, [sp, #4]
 800b79a:	f7fe fe8f 	bl	800a4bc <_malloc_r>
 800b79e:	9a01      	ldr	r2, [sp, #4]
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	b930      	cbnz	r0, 800b7b2 <_calloc_r+0x24>
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	b003      	add	sp, #12
 800b7a8:	bd30      	pop	{r4, r5, pc}
 800b7aa:	220c      	movs	r2, #12
 800b7ac:	6002      	str	r2, [r0, #0]
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	e7f8      	b.n	800b7a4 <_calloc_r+0x16>
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	f7fd fafe 	bl	8008db4 <memset>
 800b7b8:	e7f4      	b.n	800b7a4 <_calloc_r+0x16>

0800b7ba <_realloc_r>:
 800b7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7be:	4680      	mov	r8, r0
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	460e      	mov	r6, r1
 800b7c4:	b921      	cbnz	r1, 800b7d0 <_realloc_r+0x16>
 800b7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	f7fe be76 	b.w	800a4bc <_malloc_r>
 800b7d0:	b92a      	cbnz	r2, 800b7de <_realloc_r+0x24>
 800b7d2:	f7fe faa7 	bl	8009d24 <_free_r>
 800b7d6:	4625      	mov	r5, r4
 800b7d8:	4628      	mov	r0, r5
 800b7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7de:	f000 f85f 	bl	800b8a0 <_malloc_usable_size_r>
 800b7e2:	4284      	cmp	r4, r0
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	d802      	bhi.n	800b7ee <_realloc_r+0x34>
 800b7e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7ec:	d812      	bhi.n	800b814 <_realloc_r+0x5a>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4640      	mov	r0, r8
 800b7f2:	f7fe fe63 	bl	800a4bc <_malloc_r>
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d0ed      	beq.n	800b7d8 <_realloc_r+0x1e>
 800b7fc:	42bc      	cmp	r4, r7
 800b7fe:	4622      	mov	r2, r4
 800b800:	4631      	mov	r1, r6
 800b802:	bf28      	it	cs
 800b804:	463a      	movcs	r2, r7
 800b806:	f7fd fbd6 	bl	8008fb6 <memcpy>
 800b80a:	4631      	mov	r1, r6
 800b80c:	4640      	mov	r0, r8
 800b80e:	f7fe fa89 	bl	8009d24 <_free_r>
 800b812:	e7e1      	b.n	800b7d8 <_realloc_r+0x1e>
 800b814:	4635      	mov	r5, r6
 800b816:	e7df      	b.n	800b7d8 <_realloc_r+0x1e>

0800b818 <_raise_r>:
 800b818:	291f      	cmp	r1, #31
 800b81a:	b538      	push	{r3, r4, r5, lr}
 800b81c:	4604      	mov	r4, r0
 800b81e:	460d      	mov	r5, r1
 800b820:	d904      	bls.n	800b82c <_raise_r+0x14>
 800b822:	2316      	movs	r3, #22
 800b824:	6003      	str	r3, [r0, #0]
 800b826:	f04f 30ff 	mov.w	r0, #4294967295
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b82e:	b112      	cbz	r2, 800b836 <_raise_r+0x1e>
 800b830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b834:	b94b      	cbnz	r3, 800b84a <_raise_r+0x32>
 800b836:	4620      	mov	r0, r4
 800b838:	f000 f830 	bl	800b89c <_getpid_r>
 800b83c:	462a      	mov	r2, r5
 800b83e:	4601      	mov	r1, r0
 800b840:	4620      	mov	r0, r4
 800b842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b846:	f000 b817 	b.w	800b878 <_kill_r>
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d00a      	beq.n	800b864 <_raise_r+0x4c>
 800b84e:	1c59      	adds	r1, r3, #1
 800b850:	d103      	bne.n	800b85a <_raise_r+0x42>
 800b852:	2316      	movs	r3, #22
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	2001      	movs	r0, #1
 800b858:	e7e7      	b.n	800b82a <_raise_r+0x12>
 800b85a:	2400      	movs	r4, #0
 800b85c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b860:	4628      	mov	r0, r5
 800b862:	4798      	blx	r3
 800b864:	2000      	movs	r0, #0
 800b866:	e7e0      	b.n	800b82a <_raise_r+0x12>

0800b868 <raise>:
 800b868:	4b02      	ldr	r3, [pc, #8]	; (800b874 <raise+0xc>)
 800b86a:	4601      	mov	r1, r0
 800b86c:	6818      	ldr	r0, [r3, #0]
 800b86e:	f7ff bfd3 	b.w	800b818 <_raise_r>
 800b872:	bf00      	nop
 800b874:	200001d4 	.word	0x200001d4

0800b878 <_kill_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4d07      	ldr	r5, [pc, #28]	; (800b898 <_kill_r+0x20>)
 800b87c:	2300      	movs	r3, #0
 800b87e:	4604      	mov	r4, r0
 800b880:	4608      	mov	r0, r1
 800b882:	4611      	mov	r1, r2
 800b884:	602b      	str	r3, [r5, #0]
 800b886:	f7f6 fe57 	bl	8002538 <_kill>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	d102      	bne.n	800b894 <_kill_r+0x1c>
 800b88e:	682b      	ldr	r3, [r5, #0]
 800b890:	b103      	cbz	r3, 800b894 <_kill_r+0x1c>
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	bd38      	pop	{r3, r4, r5, pc}
 800b896:	bf00      	nop
 800b898:	200004dc 	.word	0x200004dc

0800b89c <_getpid_r>:
 800b89c:	f7f6 be44 	b.w	8002528 <_getpid>

0800b8a0 <_malloc_usable_size_r>:
 800b8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8a4:	1f18      	subs	r0, r3, #4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bfbc      	itt	lt
 800b8aa:	580b      	ldrlt	r3, [r1, r0]
 800b8ac:	18c0      	addlt	r0, r0, r3
 800b8ae:	4770      	bx	lr

0800b8b0 <_init>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr

0800b8bc <_fini>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr
