
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e24  08006c34  08006c34  00016c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a58  08007a58  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a60  08007a60  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000090  08007af8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08007af8  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001313c  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c5  00000000  00000000  0003323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00035a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022897  00000000  00000000  00036c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015072  00000000  00000000  000594bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce887  00000000  00000000  0006e531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000e14  00000000  00000000  0013cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000573c  00000000  00000000  0013dbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00143308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c1c 	.word	0x08006c1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08006c1c 	.word	0x08006c1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <isPasswordMatched>:
  * FUNCTION      : isPasswordMatched()
  * PARAMETERS    : iUserEnteredPasswd
  * RETURNS       : True if matched else False
  * DESCRIPTION   : Validates the user entered password is valid or not
  * ******************************************************************************
  */
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
bool isPasswordMatched(uint32_t iUserEnteredPasswd)
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
 8000578:	e00b      	b.n	8000592 <isPasswordMatched+0x26>
{
	for(uint8_t traverseIndex = 0; traverseIndex < MAX_PASSWORD_STORAGE; traverseIndex++)
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <isPasswordMatched+0x3c>)
 800057e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	d101      	bne.n	800058c <isPasswordMatched+0x20>
	{
 8000588:	2301      	movs	r3, #1
 800058a:	e006      	b.n	800059a <isPasswordMatched+0x2e>
bool isPasswordMatched(uint32_t iUserEnteredPasswd)
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	3301      	adds	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b09      	cmp	r3, #9
 8000596:	d9f0      	bls.n	800057a <isPasswordMatched+0xe>
		if(iUserEnteredPasswd == UserConfiguredPasswd[traverseIndex])
			return true;
 8000598:	2300      	movs	r3, #0
	}
 800059a:	4618      	mov	r0, r3
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <changeSpeakerFrequency>:
  * RETURNS       : none
  * DESCRIPTION   : Control the frequency on TIM1 PWM output on PA7
  *
  * ******************************************************************************
  */
static void changeSpeakerFrequency(TIM_HandleTypeDef *htim,
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09c      	sub	sp, #112	; 0x70
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
		uint32_t newFrequency)
{

	HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);

 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	22fa      	movs	r2, #250	; 0xfa
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	4a58      	ldr	r2, [pc, #352]	; (8000720 <changeSpeakerFrequency+0x174>)
 80005c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	// calculate the new period based off of frequency input
	uint32_t newPeriod = 1000000000 / (newFrequency * 250);
 80005c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]

 80005d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	222c      	movs	r2, #44	; 0x2c
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 ff2e 	bl	800545e <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a47      	ldr	r2, [pc, #284]	; (8000724 <changeSpeakerFrequency+0x178>)
 8000606:	601a      	str	r2, [r3, #0]

 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
	htim->Instance = TIM1;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	htim->Init.Prescaler = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000618:	60da      	str	r2, [r3, #12]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	htim->Init.Period = newPeriod;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
	htim->Init.RepetitionCounter = 0;
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f002 fff9 	bl	8003624 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <changeSpeakerFrequency+0x90>
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_Base_Init(htim) != HAL_OK)
 8000638:	f000 fb96 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
	}
 8000642:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f003 f9b7 	bl	80039bc <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <changeSpeakerFrequency+0xac>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 8000654:	f000 fb88 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f003 f83a 	bl	80036d2 <HAL_TIM_PWM_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <changeSpeakerFrequency+0xbc>
	}
	if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8000664:	f000 fb80 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 8000668:	2300      	movs	r3, #0
 800066a:	653b      	str	r3, [r7, #80]	; 0x50
	}
 800066c:	2300      	movs	r3, #0
 800066e:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000670:	2300      	movs	r3, #0
 8000672:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000678:	4619      	mov	r1, r3
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f003 fee0 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <changeSpeakerFrequency+0xde>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)
			!= HAL_OK)
 8000686:	f000 fb6f 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 800068a:	2360      	movs	r3, #96	; 0x60
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
	}
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <changeSpeakerFrequency+0x17c>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	085b      	lsrs	r3, r3, #1
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000696:	2300      	movs	r3, #0
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.Pulse = htim1.Init.Period/2;
 800069a:	2300      	movs	r3, #0
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a2:	2300      	movs	r3, #0
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ae:	2200      	movs	r2, #0
 80006b0:	4619      	mov	r1, r3
 80006b2:	481d      	ldr	r0, [pc, #116]	; (8000728 <changeSpeakerFrequency+0x17c>)
 80006b4:	f003 f86e 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <changeSpeakerFrequency+0x116>
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
			!= HAL_OK)
 80006be:	f000 fb53 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
	}
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006da:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.BreakFilter = 0;
 80006e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
	sBreakDeadTimeConfig.Break2Filter = 0;
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4619      	mov	r1, r3
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f003 ff07 	bl	800450c <HAL_TIMEx_ConfigBreakDeadTime>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <changeSpeakerFrequency+0x15c>
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig)
			!= HAL_OK)
 8000704:	f000 fb30 	bl	8000d68 <Error_Handler>
	{
		Error_Handler();
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 fdbb 	bl	8001284 <HAL_TIM_MspPostInit>
	}
	HAL_TIM_MspPostInit(htim);

 800070e:	2100      	movs	r1, #0
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f003 fd99 	bl	8004248 <HAL_TIMEx_PWMN_Start>
	// must restart the timer once changes are complete
 8000716:	bf00      	nop
 8000718:	3770      	adds	r7, #112	; 0x70
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	3b9aca00 	.word	0x3b9aca00
 8000724:	40012c00 	.word	0x40012c00
 8000728:	20000110 	.word	0x20000110

0800072c <ErrorSound>:
  * FUNCTION      : ErrorSound()
  * PARAMETERS    : none
  * RETURNS       : none
  * DESCRIPTION   : Play the error sound on speaker connected on PA7
  * ******************************************************************************
  */
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
void ErrorSound()
{
 8000732:	2300      	movs	r3, #0
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	e016      	b.n	8000766 <ErrorSound+0x3a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
	for(uint8_t count = 0; count < 10; count++)
 8000738:	2300      	movs	r3, #0
 800073a:	80bb      	strh	r3, [r7, #4]
 800073c:	e00b      	b.n	8000756 <ErrorSound+0x2a>
	{
		for(uint16_t freq = 0; freq < 5000; freq+=500)
		{
 800073e:	88bb      	ldrh	r3, [r7, #4]
 8000740:	4619      	mov	r1, r3
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <ErrorSound+0x50>)
 8000744:	f7ff ff32 	bl	80005ac <changeSpeakerFrequency>
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 8000748:	200a      	movs	r0, #10
 800074a:	f000 ffbf 	bl	80016cc <HAL_Delay>
	for(uint8_t count = 0; count < 10; count++)
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000754:	80bb      	strh	r3, [r7, #4]
 8000756:	88bb      	ldrh	r3, [r7, #4]
 8000758:	f241 3287 	movw	r2, #4999	; 0x1387
 800075c:	4293      	cmp	r3, r2
 800075e:	d9ee      	bls.n	800073e <ErrorSound+0x12>
{
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	3301      	adds	r3, #1
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b09      	cmp	r3, #9
 800076a:	d9e5      	bls.n	8000738 <ErrorSound+0xc>
			HAL_Delay(10);							// delay for 10 milisecond
		}
	}

 800076c:	2100      	movs	r1, #0
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <ErrorSound+0x50>)
 8000770:	f003 fe08 	bl	8004384 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);

 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000110 	.word	0x20000110

08000780 <SuccessSound>:
  * PARAMETERS    : none
  * RETURNS       : none
  * DESCRIPTION   : Play the success sound on speaker connected on PA7
  * ******************************************************************************
  */
void SuccessSound()
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
{
 8000786:	2300      	movs	r3, #0
 8000788:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	uint8_t count = 0;
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d114      	bne.n	80007ba <SuccessSound+0x3a>

	if(count < 1)
 8000790:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000794:	80fb      	strh	r3, [r7, #6]
 8000796:	e00a      	b.n	80007ae <SuccessSound+0x2e>
	{
		for(uint16_t freq = 2000; freq > 100; freq -= 70)
		{
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	4619      	mov	r1, r3
 800079c:	480b      	ldr	r0, [pc, #44]	; (80007cc <SuccessSound+0x4c>)
 800079e:	f7ff ff05 	bl	80005ac <changeSpeakerFrequency>
			changeSpeakerFrequency(&htim1, freq);		// set new frequency
 80007a2:	2023      	movs	r0, #35	; 0x23
 80007a4:	f000 ff92 	bl	80016cc <HAL_Delay>
	if(count < 1)
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	3bc8      	subs	r3, #200	; 0xc8
 80007ac:	80fb      	strh	r3, [r7, #6]
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f1      	bne.n	8000798 <SuccessSound+0x18>
			HAL_Delay(35);								// delay for 25 milisecond
		}
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	3301      	adds	r3, #1
 80007b8:	717b      	strb	r3, [r7, #5]
		count++;
	}
 80007ba:	2100      	movs	r1, #0
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <SuccessSound+0x4c>)
 80007be:	f003 fde1 	bl	8004384 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000110 	.word	0x20000110

080007d0 <configurePassword>:
  * RETURNS       : none
  * DESCRIPTION   : Asks master password and allows to overright new password at desired index to master
  *
  *******************************************************************************
  */
void configurePassword()
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
{
 80007d6:	2300      	movs	r3, #0
 80007d8:	80fb      	strh	r3, [r7, #6]
 80007da:	2300      	movs	r3, #0
 80007dc:	80bb      	strh	r3, [r7, #4]
	uint16_t tMasterPassword = 0,index = 0;
 80007de:	4819      	ldr	r0, [pc, #100]	; (8000844 <configurePassword+0x74>)
 80007e0:	f004 fdd6 	bl	8005390 <iprintf>
	printf("Enter master password to configure password\n\r");
 80007e4:	1dbb      	adds	r3, r7, #6
 80007e6:	4619      	mov	r1, r3
 80007e8:	4817      	ldr	r0, [pc, #92]	; (8000848 <configurePassword+0x78>)
 80007ea:	f004 fde3 	bl	80053b4 <iscanf>
	scanf("%hu",&tMasterPassword);

 80007ee:	88fb      	ldrh	r3, [r7, #6]
 80007f0:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 80007f4:	d122      	bne.n	800083c <configurePassword+0x6c>
	if(tMasterPassword != MASTER_PASSWORD)
	{
		ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 80007f6:	4815      	ldr	r0, [pc, #84]	; (800084c <configurePassword+0x7c>)
 80007f8:	f004 fdca 	bl	8005390 <iprintf>
		ssd1331_display_string(2, 2, "Wrong master password entered", FONT_1206, WHITE);
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	4619      	mov	r1, r3
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <configurePassword+0x78>)
 8000802:	f004 fdd7 	bl	80053b4 <iscanf>
		HAL_Delay(1500);								// delay for 25 milisecond
		return;
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <configurePassword+0x80>)
 8000808:	f004 fdc2 	bl	8005390 <iprintf>
	}
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <configurePassword+0x78>)
 8000812:	f004 fdcf 	bl	80053b4 <iscanf>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000816:	88bb      	ldrh	r3, [r7, #4]
 8000818:	2b0a      	cmp	r3, #10
 800081a:	d904      	bls.n	8000826 <configurePassword+0x56>
	ssd1331_clear_screen(BLACK);				//Clear OLED Screen
	ssd1331_display_string(2, 2, "In master mode --> configure password", FONT_1206, BLUE);
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	461a      	mov	r2, r3
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <configurePassword+0x84>)
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
 8000824:	e006      	b.n	8000834 <configurePassword+0x64>
	printf("Enter new password\n\r");
	scanf("%hu",&tMasterPassword);

	printf("Enter which password you want to replace from total 10 passwords\n\r");
 8000826:	88fa      	ldrh	r2, [r7, #6]
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	4611      	mov	r1, r2
 800082e:	4a09      	ldr	r2, [pc, #36]	; (8000854 <configurePassword+0x84>)
 8000830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	scanf("%hu",&index);

	if(index > 10)
 8000834:	4808      	ldr	r0, [pc, #32]	; (8000858 <configurePassword+0x88>)
 8000836:	f004 fdab 	bl	8005390 <iprintf>
 800083a:	e000      	b.n	800083e <configurePassword+0x6e>
	if(tMasterPassword != MASTER_PASSWORD)
 800083c:	bf00      	nop
	{
		UserConfiguredPasswd[MAX_PASSWORD_STORAGE-1] = tMasterPassword;
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08006c34 	.word	0x08006c34
 8000848:	08006c64 	.word	0x08006c64
 800084c:	08006c68 	.word	0x08006c68
 8000850:	08006c80 	.word	0x08006c80
 8000854:	20000000 	.word	0x20000000
 8000858:	08006cc4 	.word	0x08006cc4

0800085c <main>:
		UserConfiguredPasswd[index-1] = tMasterPassword;
	}

	ssd1331_clear_screen(BLACK);				//Clear OLED Screen
	ssd1331_display_string(2, 2, "New password set successfully", FONT_1206, WHITE);
	HAL_Delay(1500);								// delay for 25 milisecond
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

}

/* USER CODE END 0 */

 8000862:	f000 febe 	bl	80015e2 <HAL_Init>
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
 8000866:	f000 f8b9 	bl	80009dc <SystemClock_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fa33 	bl	8000cd4 <MX_GPIO_Init>

 800086e:	f000 fa01 	bl	8000c74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN Init */
 8000872:	f000 f915 	bl	8000aa0 <MX_SPI1_Init>

 8000876:	f000 f951 	bl	8000b1c <MX_TIM1_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
 800087a:	2100      	movs	r1, #0
 800087c:	4846      	ldr	r0, [pc, #280]	; (8000998 <main+0x13c>)
 800087e:	f003 fce3 	bl	8004248 <HAL_TIMEx_PWMN_Start>
  SystemClock_Config();
 8000882:	4846      	ldr	r0, [pc, #280]	; (800099c <main+0x140>)
 8000884:	f004 fd84 	bl	8005390 <iprintf>

  /* USER CODE BEGIN SysInit */
 8000888:	f000 fbc8 	bl	800101c <ssd1331_init>

 800088c:	2000      	movs	r0, #0
 800088e:	f000 fba0 	bl	8000fd2 <ssd1331_clear_screen>

  ssd1331_init();									//Init OLED library
  ssd1331_clear_screen(BLACK);						//Clear OLED Screen

  /* USER CODE END 2 */

 8000892:	2100      	movs	r1, #0
 8000894:	4840      	ldr	r0, [pc, #256]	; (8000998 <main+0x13c>)
 8000896:	f7ff fe89 	bl	80005ac <changeSpeakerFrequency>
  /* Infinite loop */
 800089a:	4841      	ldr	r0, [pc, #260]	; (80009a0 <main+0x144>)
 800089c:	f004 fd78 	bl	8005390 <iprintf>
  /* USER CODE BEGIN WHILE */
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fb96 	bl	8000fd2 <ssd1331_clear_screen>
  USER_CHOICEOPTION_e choice;

 80008a6:	1dbb      	adds	r3, r7, #6
 80008a8:	4619      	mov	r1, r3
 80008aa:	483e      	ldr	r0, [pc, #248]	; (80009a4 <main+0x148>)
 80008ac:	f004 fd82 	bl	80053b4 <iscanf>
	while (1)
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	d041      	beq.n	800093a <main+0xde>
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	dc67      	bgt.n	800098a <main+0x12e>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d002      	beq.n	80008c4 <main+0x68>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d003      	beq.n	80008ca <main+0x6e>
				scanf("%hu",&tMasterPassword);

				if(tMasterPassword != MASTER_PASSWORD)
				{
					ssd1331_clear_screen(BLACK);				//Clear OLED Screen
					ssd1331_display_string(2, 2, "Wrong master password entered", FONT_1206, WHITE);
 80008c2:	e062      	b.n	800098a <main+0x12e>
		ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 80008c4:	f7ff ff84 	bl	80007d0 <configurePassword>
		ssd1331_display_string(1, 1, "Validate your  self via putty  to access       system ", FONT_1206, GOLDEN);
 80008c8:	e060      	b.n	800098c <main+0x130>
		{
 80008ca:	4837      	ldr	r0, [pc, #220]	; (80009a8 <main+0x14c>)
 80008cc:	f004 fd60 	bl	8005390 <iprintf>
			case CHOICEOPTION_CONFIGURE_PASSWORD:	// Master mode - configure password
 80008d0:	4936      	ldr	r1, [pc, #216]	; (80009ac <main+0x150>)
 80008d2:	4837      	ldr	r0, [pc, #220]	; (80009b0 <main+0x154>)
 80008d4:	f004 fd6e 	bl	80053b4 <iscanf>
			{
 80008d8:	4b34      	ldr	r3, [pc, #208]	; (80009ac <main+0x150>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe45 	bl	800056c <isPasswordMatched>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f083 0301 	eor.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d012      	beq.n	8000914 <main+0xb8>
				break;
 80008ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	230c      	movs	r3, #12
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <main+0x158>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	2002      	movs	r0, #2
 80008fc:	f000 fb20 	bl	8000f40 <ssd1331_display_string>
			}
 8000900:	f7ff ff14 	bl	800072c <ErrorSound>

 8000904:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000908:	f000 fee0 	bl	80016cc <HAL_Delay>
			case CHOICEOPTION_VALIDATE_ACCESS:		// User mode - validate user
 800090c:	482a      	ldr	r0, [pc, #168]	; (80009b8 <main+0x15c>)
 800090e:	f004 fd3f 	bl	8005390 <iprintf>

 8000912:	e03b      	b.n	800098c <main+0x130>
				{
 8000914:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	230c      	movs	r3, #12
 800091c:	4a27      	ldr	r2, [pc, #156]	; (80009bc <main+0x160>)
 800091e:	2102      	movs	r1, #2
 8000920:	2002      	movs	r0, #2
 8000922:	f000 fb0d 	bl	8000f40 <ssd1331_display_string>
					ssd1331_clear_screen(BLACK);				//Clear OLED Screen
 8000926:	f7ff ff2b 	bl	8000780 <SuccessSound>
					ssd1331_display_string(2, 2, "Access denied", FONT_1206, RED);
 800092a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800092e:	f000 fecd 	bl	80016cc <HAL_Delay>
					ErrorSound();
 8000932:	4823      	ldr	r0, [pc, #140]	; (80009c0 <main+0x164>)
 8000934:	f004 fd2c 	bl	8005390 <iprintf>

 8000938:	e028      	b.n	800098c <main+0x130>
					ssd1331_display_string(2, 2, "Access granted", FONT_1206, GREEN);
 800093a:	2300      	movs	r3, #0
 800093c:	80bb      	strh	r3, [r7, #4]
					SuccessSound();
 800093e:	4821      	ldr	r0, [pc, #132]	; (80009c4 <main+0x168>)
 8000940:	f004 fd26 	bl	8005390 <iprintf>
					HAL_Delay(2000);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	481f      	ldr	r0, [pc, #124]	; (80009c8 <main+0x16c>)
 800094a:	f004 fd33 	bl	80053b4 <iscanf>
				}
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 8000954:	d001      	beq.n	800095a <main+0xfe>

 8000956:	2300      	movs	r3, #0
 8000958:	e019      	b.n	800098e <main+0x132>
			}
 800095a:	481c      	ldr	r0, [pc, #112]	; (80009cc <main+0x170>)
 800095c:	f004 fd18 	bl	8005390 <iprintf>

 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	e00a      	b.n	800097c <main+0x120>
			{
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <main+0x174>)
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	4619      	mov	r1, r3
 8000970:	4818      	ldr	r0, [pc, #96]	; (80009d4 <main+0x178>)
 8000972:	f004 fd0d 	bl	8005390 <iprintf>

 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	3301      	adds	r3, #1
 800097a:	71fb      	strb	r3, [r7, #7]
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b09      	cmp	r3, #9
 8000980:	d9f1      	bls.n	8000966 <main+0x10a>
				printf("Enter master password to see all password\n\r");
 8000982:	4815      	ldr	r0, [pc, #84]	; (80009d8 <main+0x17c>)
 8000984:	f004 fd04 	bl	8005390 <iprintf>
 8000988:	e783      	b.n	8000892 <main+0x36>
					ssd1331_display_string(2, 2, "Wrong master password entered", FONT_1206, WHITE);
 800098a:	bf00      	nop

 800098c:	e781      	b.n	8000892 <main+0x36>
				}

				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
				ssd1331_clear_screen(BLACK);				//Clear OLED Screen
				ssd1331_display_string(2, 2, "In master mode --> see password password on Putty", FONT_1206, BLUE);
				printf("Stored passwords are [");
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000110 	.word	0x20000110
 800099c:	08006ce8 	.word	0x08006ce8
 80009a0:	08006cf4 	.word	0x08006cf4
 80009a4:	08006d54 	.word	0x08006d54
 80009a8:	08006d5c 	.word	0x08006d5c
 80009ac:	200001e4 	.word	0x200001e4
 80009b0:	08006d88 	.word	0x08006d88
 80009b4:	08006d8c 	.word	0x08006d8c
 80009b8:	08006d9c 	.word	0x08006d9c
 80009bc:	08006dc4 	.word	0x08006dc4
 80009c0:	08006dd4 	.word	0x08006dd4
 80009c4:	08006e00 	.word	0x08006e00
 80009c8:	08006c64 	.word	0x08006c64
 80009cc:	08006e2c 	.word	0x08006e2c
 80009d0:	20000000 	.word	0x20000000
 80009d4:	08006e44 	.word	0x08006e44
 80009d8:	08006e4c 	.word	0x08006e4c

080009dc <SystemClock_Config>:
					printf(" %lu",UserConfiguredPasswd[index]);
				}
				printf("]\n\r");
				HAL_Delay(2000);
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
				break;
 80009dc:	b580      	push	{r7, lr}
 80009de:	b096      	sub	sp, #88	; 0x58
 80009e0:	af00      	add	r7, sp, #0
			}
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2244      	movs	r2, #68	; 0x44
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f004 fd37 	bl	800545e <memset>

 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
			default:
			{
				break;
			}
 80009fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a02:	f001 f90d 	bl	8001c20 <HAL_PWREx_ControlVoltageScaling>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x34>
		}
    /* USER CODE END WHILE */
 8000a0c:	f000 f9ac 	bl	8000d68 <Error_Handler>

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a10:	f001 f8e8 	bl	8001be4 <HAL_PWR_EnableBkUpAccess>

 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <SystemClock_Config+0xc0>)
 8000a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <SystemClock_Config+0xc0>)
 8000a1c:	f023 0318 	bic.w	r3, r3, #24
 8000a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
 8000a24:	2314      	movs	r3, #20
 8000a26:	617b      	str	r3, [r7, #20]
{
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30

 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  /** Configure the main internal regulator output voltage
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  */
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a40:	2301      	movs	r3, #1
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  {
 8000a44:	2310      	movs	r3, #16
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
    Error_Handler();
 8000a48:	2307      	movs	r3, #7
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50

 8000a50:	2302      	movs	r3, #2
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
  /** Configure LSE Drive Capability
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f937 	bl	8001ccc <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x8c>
  */
  HAL_PWR_EnableBkUpAccess();
 8000a64:	f000 f980 	bl	8000d68 <Error_Handler>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
 8000a68:	230f      	movs	r3, #15
 8000a6a:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fd37 	bl	80024f4 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xb4>
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a8c:	f000 f96c 	bl	8000d68 <Error_Handler>
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
 8000a90:	f002 f94a 	bl	8002d28 <HAL_RCCEx_EnableMSIPLLMode>
    Error_Handler();
 8000a94:	bf00      	nop
 8000a96:	3758      	adds	r7, #88	; 0x58
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <MX_SPI1_Init>:
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  {
    Error_Handler();
  }

  /** Enable MSI Auto calibration
  */
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_SPI1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  HAL_RCCEx_EnableMSIPLLMode();
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
}
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000abe:	60da      	str	r2, [r3, #12]
/**
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  * @brief SPI1 Initialization Function
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  * @param None
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad2:	619a      	str	r2, [r3, #24]
  * @retval None
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	61da      	str	r2, [r3, #28]
  */
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
static void MX_SPI1_Init(void)
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
{
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28

 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000aee:	2207      	movs	r2, #7
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN SPI1_Init 0 */
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	631a      	str	r2, [r3, #48]	; 0x30

 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000afa:	2208      	movs	r2, #8
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END SPI1_Init 0 */
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_SPI1_Init+0x74>)
 8000b00:	f002 fa14 	bl	8002f2c <HAL_SPI_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SPI1_Init+0x6e>

  /* USER CODE BEGIN SPI1_Init 1 */
 8000b0a:	f000 f92d 	bl	8000d68 <Error_Handler>

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200000ac 	.word	0x200000ac
 8000b18:	40013000 	.word	0x40013000

08000b1c <MX_TIM1_Init>:
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b09a      	sub	sp, #104	; 0x68
 8000b20:	af00      	add	r7, sp, #0
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
 8000b22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
    Error_Handler();
 8000b30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
  }
 8000b3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
 8000b4e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SPI1_Init 2 */
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	222c      	movs	r2, #44	; 0x2c
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fc81 	bl	800545e <memset>

  /* USER CODE END SPI1_Init 2 */

}

 8000b5c:	4b43      	ldr	r3, [pc, #268]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b5e:	4a44      	ldr	r2, [pc, #272]	; (8000c70 <MX_TIM1_Init+0x154>)
 8000b60:	601a      	str	r2, [r3, #0]
/**
 8000b62:	4b42      	ldr	r3, [pc, #264]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  * @brief TIM1 Initialization Function
 8000b68:	4b40      	ldr	r3, [pc, #256]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  * @param None
 8000b6e:	4b3f      	ldr	r3, [pc, #252]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b74:	60da      	str	r2, [r3, #12]
  * @retval None
 8000b76:	4b3d      	ldr	r3, [pc, #244]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  */
 8000b7c:	4b3b      	ldr	r3, [pc, #236]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
static void MX_TIM1_Init(void)
 8000b82:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
{
 8000b88:	4838      	ldr	r0, [pc, #224]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000b8a:	f002 fd4b 	bl	8003624 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x7c>

  /* USER CODE BEGIN TIM1_Init 0 */
 8000b94:	f000 f8e8 	bl	8000d68 <Error_Handler>

  /* USER CODE END TIM1_Init 0 */
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58

 8000b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4831      	ldr	r0, [pc, #196]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000ba6:	f002 ff09 	bl	80039bc <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x98>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f000 f8da 	bl	8000d68 <Error_Handler>
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb4:	482d      	ldr	r0, [pc, #180]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000bb6:	f002 fd8c 	bl	80036d2 <HAL_TIM_PWM_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0xa8>

  /* USER CODE BEGIN TIM1_Init 1 */
 8000bc0:	f000 f8d2 	bl	8000d68 <Error_Handler>

  /* USER CODE END TIM1_Init 1 */
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  htim1.Instance = TIM1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
  htim1.Init.Prescaler = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	657b      	str	r3, [r7, #84]	; 0x54
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000bd8:	f003 fc32 	bl	8004440 <HAL_TIMEx_MasterConfigSynchronization>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0xca>
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	f000 f8c1 	bl	8000d68 <Error_Handler>
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bea:	2300      	movs	r3, #0
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    Error_Handler();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	64bb      	str	r3, [r7, #72]	; 0x48
  {
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4818      	ldr	r0, [pc, #96]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000c0c:	f002 fdc2 	bl	8003794 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0xfe>
    Error_Handler();
  }
 8000c16:	f000 f8a7 	bl	8000d68 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
    Error_Handler();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  }
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
    Error_Handler();
 8000c3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  }
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000c50:	f003 fc5c 	bl	800450c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM1_Init+0x142>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c5a:	f000 f885 	bl	8000d68 <Error_Handler>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <MX_TIM1_Init+0x150>)
 8000c60:	f000 fb10 	bl	8001284 <HAL_TIM_MspPostInit>
    Error_Handler();
  }
 8000c64:	bf00      	nop
 8000c66:	3768      	adds	r7, #104	; 0x68
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000110 	.word	0x20000110
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <MX_USART2_UART_Init>:
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c7a:	4a15      	ldr	r2, [pc, #84]	; (8000cd0 <MX_USART2_UART_Init+0x5c>)
 8000c7c:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM1_Init 2 */
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  HAL_TIM_MspPostInit(&htim1);
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]

 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
}
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]

 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
/**
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  * @brief USART2 Initialization Function
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  * @param None
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  * @retval None
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  */
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USART2_UART_Init+0x58>)
 8000cb8:	f003 fcc5 	bl	8004646 <HAL_UART_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USART2_UART_Init+0x52>
static void MX_USART2_UART_Init(void)
{
 8000cc2:	f000 f851 	bl	8000d68 <Error_Handler>

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000015c 	.word	0x2000015c
 8000cd0:	40004400 	.word	0x40004400

08000cd4 <MX_GPIO_Init>:
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    Error_Handler();
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  }
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_GPIO_Init+0x8c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
 8000d32:	2200      	movs	r2, #0
 8000d34:	2178      	movs	r1, #120	; 0x78
 8000d36:	480b      	ldr	r0, [pc, #44]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000d38:	f000 ff3c 	bl	8001bb4 <HAL_GPIO_WritePin>

}

 8000d3c:	2378      	movs	r3, #120	; 0x78
 8000d3e:	60fb      	str	r3, [r7, #12]
/**
 8000d40:	2301      	movs	r3, #1
 8000d42:	613b      	str	r3, [r7, #16]
  * @brief GPIO Initialization Function
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  * @param None
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  * @retval None
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_GPIO_Init+0x90>)
 8000d54:	f000 fdc4 	bl	80018e0 <HAL_GPIO_Init>
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	bf00      	nop
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400

08000d68 <Error_Handler>:
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA8 PA10 PA11 */
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d005      	beq.n	8000d96 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <ssd1331_write_byte+0x60>)
 8000d90:	f000 ff10 	bl	8001bb4 <HAL_GPIO_WritePin>
 8000d94:	e004      	b.n	8000da0 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <ssd1331_write_byte+0x60>)
 8000d9c:	f000 ff0a 	bl	8001bb4 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8000da0:	2200      	movs	r2, #0
 8000da2:	2110      	movs	r1, #16
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <ssd1331_write_byte+0x60>)
 8000da6:	f000 ff05 	bl	8001bb4 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000daa:	1df9      	adds	r1, r7, #7
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2201      	movs	r2, #1
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <ssd1331_write_byte+0x64>)
 8000db2:	f002 f95e 	bl	8003072 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8000db6:	2201      	movs	r2, #1
 8000db8:	2110      	movs	r1, #16
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <ssd1331_write_byte+0x60>)
 8000dbc:	f000 fefa 	bl	8001bb4 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <ssd1331_write_byte+0x60>)
 8000dc6:	f000 fef5 	bl	8001bb4 <HAL_GPIO_WritePin>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	48000400 	.word	0x48000400
 8000dd8:	200000ac 	.word	0x200000ac

08000ddc <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	460b      	mov	r3, r1
 8000de8:	71bb      	strb	r3, [r7, #6]
 8000dea:	4613      	mov	r3, r2
 8000dec:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b5f      	cmp	r3, #95	; 0x5f
 8000df2:	d82b      	bhi.n	8000e4c <ssd1331_draw_point+0x70>
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b3f      	cmp	r3, #63	; 0x3f
 8000df8:	d828      	bhi.n	8000e4c <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2015      	movs	r0, #21
 8000dfe:	f7ff ffb9 	bl	8000d74 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffb4 	bl	8000d74 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	205f      	movs	r0, #95	; 0x5f
 8000e10:	f7ff ffb0 	bl	8000d74 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000e14:	2100      	movs	r1, #0
 8000e16:	2075      	movs	r0, #117	; 0x75
 8000e18:	f7ff ffac 	bl	8000d74 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000e1c:	79bb      	ldrb	r3, [r7, #6]
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ffa7 	bl	8000d74 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000e26:	2100      	movs	r1, #0
 8000e28:	203f      	movs	r0, #63	; 0x3f
 8000e2a:	f7ff ffa3 	bl	8000d74 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000e2e:	88bb      	ldrh	r3, [r7, #4]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2101      	movs	r1, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff9b 	bl	8000d74 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2101      	movs	r1, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff95 	bl	8000d74 <ssd1331_write_byte>
 8000e4a:	e000      	b.n	8000e4e <ssd1331_draw_point+0x72>
		return;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	4611      	mov	r1, r2
 8000e60:	461a      	mov	r2, r3
 8000e62:	4623      	mov	r3, r4
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	4603      	mov	r3, r0
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	717b      	strb	r3, [r7, #5]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e7e:	d857      	bhi.n	8000f30 <ssd1331_display_char+0xdc>
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	2b3f      	cmp	r3, #63	; 0x3f
 8000e84:	d854      	bhi.n	8000f30 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	73fb      	strb	r3, [r7, #15]
 8000e8a:	e04c      	b.n	8000f26 <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8000e8c:	793b      	ldrb	r3, [r7, #4]
 8000e8e:	2b0c      	cmp	r3, #12
 8000e90:	d10d      	bne.n	8000eae <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8000e92:	797b      	ldrb	r3, [r7, #5]
 8000e94:	f1a3 0220 	sub.w	r2, r3, #32
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	4827      	ldr	r0, [pc, #156]	; (8000f38 <ssd1331_display_char+0xe4>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4403      	add	r3, r0
 8000ea6:	440b      	add	r3, r1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	737b      	strb	r3, [r7, #13]
 8000eac:	e00c      	b.n	8000ec8 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8000eae:	793b      	ldrb	r3, [r7, #4]
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d109      	bne.n	8000ec8 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8000eb4:	797b      	ldrb	r3, [r7, #5]
 8000eb6:	f1a3 0220 	sub.w	r2, r3, #32
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	491f      	ldr	r1, [pc, #124]	; (8000f3c <ssd1331_display_char+0xe8>)
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	440a      	add	r2, r1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]
 8000ecc:	e025      	b.n	8000f1a <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8000ece:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da06      	bge.n	8000ee4 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8000ed6:	8c3a      	ldrh	r2, [r7, #32]
 8000ed8:	79b9      	ldrb	r1, [r7, #6]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff7d 	bl	8000ddc <ssd1331_draw_point>
 8000ee2:	e005      	b.n	8000ef0 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8000ee4:	79b9      	ldrb	r1, [r7, #6]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff76 	bl	8000ddc <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8000ef0:	7b7b      	ldrb	r3, [r7, #13]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8000ef6:	79bb      	ldrb	r3, [r7, #6]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8000efc:	79ba      	ldrb	r2, [r7, #6]
 8000efe:	7b3b      	ldrb	r3, [r7, #12]
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	793b      	ldrb	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d105      	bne.n	8000f14 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8000f08:	7b3b      	ldrb	r3, [r7, #12]
 8000f0a:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
				break;
 8000f12:	e005      	b.n	8000f20 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	3301      	adds	r3, #1
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	d9d6      	bls.n	8000ece <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	3301      	adds	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	793b      	ldrb	r3, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d3ae      	bcc.n	8000e8c <ssd1331_display_char+0x38>
 8000f2e:	e000      	b.n	8000f32 <ssd1331_display_char+0xde>
		return;
 8000f30:	bf00      	nop
			}
		}
    }
}
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	08006e5c 	.word	0x08006e5c
 8000f3c:	080072d0 	.word	0x080072d0

08000f40 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	603a      	str	r2, [r7, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	71bb      	strb	r3, [r7, #6]
 8000f52:	4613      	mov	r3, r2
 8000f54:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b5f      	cmp	r3, #95	; 0x5f
 8000f5a:	d836      	bhi.n	8000fca <ssd1331_display_string+0x8a>
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f60:	d833      	bhi.n	8000fca <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8000f62:	e02d      	b.n	8000fc0 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	085b      	lsrs	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dd12      	ble.n	8000f9a <ssd1331_display_string+0x5a>
			chXpos = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8000f78:	79ba      	ldrb	r2, [r7, #6]
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	797b      	ldrb	r3, [r7, #5]
 8000f84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dd06      	ble.n	8000f9a <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f81c 	bl	8000fd2 <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	781a      	ldrb	r2, [r3, #0]
 8000f9e:	797c      	ldrb	r4, [r7, #5]
 8000fa0:	79b9      	ldrb	r1, [r7, #6]
 8000fa2:	79f8      	ldrb	r0, [r7, #7]
 8000fa4:	8b3b      	ldrh	r3, [r7, #24]
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4623      	mov	r3, r4
 8000faa:	f7ff ff53 	bl	8000e54 <ssd1331_display_char>
        chXpos += chSize / 2;
 8000fae:	797b      	ldrb	r3, [r7, #5]
 8000fb0:	085b      	lsrs	r3, r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1cd      	bne.n	8000f64 <ssd1331_display_string+0x24>
 8000fc8:	e000      	b.n	8000fcc <ssd1331_display_string+0x8c>
		return;
 8000fca:	bf00      	nop
    }
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}

08000fd2 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	81fb      	strh	r3, [r7, #14]
 8000fe0:	e013      	b.n	800100a <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	e00a      	b.n	8000ffe <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	89fa      	ldrh	r2, [r7, #14]
 8000fee:	b2d1      	uxtb	r1, r2
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fef2 	bl	8000ddc <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000ff8:	89bb      	ldrh	r3, [r7, #12]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	81bb      	strh	r3, [r7, #12]
 8000ffe:	89bb      	ldrh	r3, [r7, #12]
 8001000:	2b5f      	cmp	r3, #95	; 0x5f
 8001002:	d9f1      	bls.n	8000fe8 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	3301      	adds	r3, #1
 8001008:	81fb      	strh	r3, [r7, #14]
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	2b3f      	cmp	r3, #63	; 0x3f
 800100e:	d9e8      	bls.n	8000fe2 <ssd1331_clear_screen+0x10>
		}
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <ssd1331_init>:


void ssd1331_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001020:	2201      	movs	r2, #1
 8001022:	2140      	movs	r1, #64	; 0x40
 8001024:	4852      	ldr	r0, [pc, #328]	; (8001170 <ssd1331_init+0x154>)
 8001026:	f000 fdc5 	bl	8001bb4 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 800102a:	2201      	movs	r2, #1
 800102c:	2110      	movs	r1, #16
 800102e:	4850      	ldr	r0, [pc, #320]	; (8001170 <ssd1331_init+0x154>)
 8001030:	f000 fdc0 	bl	8001bb4 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001034:	2100      	movs	r1, #0
 8001036:	20ae      	movs	r0, #174	; 0xae
 8001038:	f7ff fe9c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 800103c:	2100      	movs	r1, #0
 800103e:	2081      	movs	r0, #129	; 0x81
 8001040:	f7ff fe98 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001044:	2100      	movs	r1, #0
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	f7ff fe94 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 800104c:	2100      	movs	r1, #0
 800104e:	2082      	movs	r0, #130	; 0x82
 8001050:	f7ff fe90 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001054:	2100      	movs	r1, #0
 8001056:	20ff      	movs	r0, #255	; 0xff
 8001058:	f7ff fe8c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 800105c:	2100      	movs	r1, #0
 800105e:	2083      	movs	r0, #131	; 0x83
 8001060:	f7ff fe88 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001064:	2100      	movs	r1, #0
 8001066:	20ff      	movs	r0, #255	; 0xff
 8001068:	f7ff fe84 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 800106c:	2100      	movs	r1, #0
 800106e:	2087      	movs	r0, #135	; 0x87
 8001070:	f7ff fe80 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001074:	2100      	movs	r1, #0
 8001076:	2006      	movs	r0, #6
 8001078:	f7ff fe7c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 800107c:	2100      	movs	r1, #0
 800107e:	208a      	movs	r0, #138	; 0x8a
 8001080:	f7ff fe78 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001084:	2100      	movs	r1, #0
 8001086:	2064      	movs	r0, #100	; 0x64
 8001088:	f7ff fe74 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 800108c:	2100      	movs	r1, #0
 800108e:	208b      	movs	r0, #139	; 0x8b
 8001090:	f7ff fe70 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001094:	2100      	movs	r1, #0
 8001096:	2078      	movs	r0, #120	; 0x78
 8001098:	f7ff fe6c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 800109c:	2100      	movs	r1, #0
 800109e:	208c      	movs	r0, #140	; 0x8c
 80010a0:	f7ff fe68 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 80010a4:	2100      	movs	r1, #0
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f7ff fe64 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 80010ac:	2100      	movs	r1, #0
 80010ae:	20a0      	movs	r0, #160	; 0xa0
 80010b0:	f7ff fe60 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 80010b4:	2100      	movs	r1, #0
 80010b6:	2072      	movs	r0, #114	; 0x72
 80010b8:	f7ff fe5c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 80010bc:	2100      	movs	r1, #0
 80010be:	20a1      	movs	r0, #161	; 0xa1
 80010c0:	f7ff fe58 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe54 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 80010cc:	2100      	movs	r1, #0
 80010ce:	20a2      	movs	r0, #162	; 0xa2
 80010d0:	f7ff fe50 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fe4c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80010dc:	2100      	movs	r1, #0
 80010de:	20a4      	movs	r0, #164	; 0xa4
 80010e0:	f7ff fe48 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80010e4:	2100      	movs	r1, #0
 80010e6:	20a8      	movs	r0, #168	; 0xa8
 80010e8:	f7ff fe44 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80010ec:	2100      	movs	r1, #0
 80010ee:	203f      	movs	r0, #63	; 0x3f
 80010f0:	f7ff fe40 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80010f4:	2100      	movs	r1, #0
 80010f6:	20ad      	movs	r0, #173	; 0xad
 80010f8:	f7ff fe3c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80010fc:	2100      	movs	r1, #0
 80010fe:	208e      	movs	r0, #142	; 0x8e
 8001100:	f7ff fe38 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001104:	2100      	movs	r1, #0
 8001106:	20b0      	movs	r0, #176	; 0xb0
 8001108:	f7ff fe34 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fe30 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001114:	2100      	movs	r1, #0
 8001116:	20b1      	movs	r0, #177	; 0xb1
 8001118:	f7ff fe2c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 800111c:	2100      	movs	r1, #0
 800111e:	2031      	movs	r0, #49	; 0x31
 8001120:	f7ff fe28 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001124:	2100      	movs	r1, #0
 8001126:	20b3      	movs	r0, #179	; 0xb3
 8001128:	f7ff fe24 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 800112c:	2100      	movs	r1, #0
 800112e:	20f0      	movs	r0, #240	; 0xf0
 8001130:	f7ff fe20 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001134:	2100      	movs	r1, #0
 8001136:	20bb      	movs	r0, #187	; 0xbb
 8001138:	f7ff fe1c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 800113c:	2100      	movs	r1, #0
 800113e:	203a      	movs	r0, #58	; 0x3a
 8001140:	f7ff fe18 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001144:	2100      	movs	r1, #0
 8001146:	20be      	movs	r0, #190	; 0xbe
 8001148:	f7ff fe14 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 800114c:	2100      	movs	r1, #0
 800114e:	203e      	movs	r0, #62	; 0x3e
 8001150:	f7ff fe10 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001154:	2100      	movs	r1, #0
 8001156:	202e      	movs	r0, #46	; 0x2e
 8001158:	f7ff fe0c 	bl	8000d74 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 800115c:	2100      	movs	r1, #0
 800115e:	20af      	movs	r0, #175	; 0xaf
 8001160:	f7ff fe08 	bl	8000d74 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff34 	bl	8000fd2 <ssd1331_clear_screen>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	48000400 	.word	0x48000400

08001174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_MspInit+0x44>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <HAL_MspInit+0x44>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <HAL_MspInit+0x44>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x44>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x44>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x44>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_SPI_MspInit+0x80>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d129      	bne.n	8001232 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <HAL_SPI_MspInit+0x84>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_SPI_MspInit+0x84>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800120e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001220:	2305      	movs	r3, #5
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f000 fb57 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40013000 	.word	0x40013000
 8001240:	40021000 	.word	0x40021000

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_TIM_Base_MspInit+0x38>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10b      	bne.n	800126e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125a:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 800125c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001260:	6613      	str	r3, [r2, #96]	; 0x60
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <HAL_TIM_Base_MspInit+0x3c>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40012c00 	.word	0x40012c00
 8001280:	40021000 	.word	0x40021000

08001284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_TIM_MspPostInit+0x64>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d11c      	bne.n	80012e0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a10      	ldr	r2, [pc, #64]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_TIM_MspPostInit+0x68>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f000 fb00 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40012c00 	.word	0x40012c00
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09e      	sub	sp, #120	; 0x78
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2254      	movs	r2, #84	; 0x54
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f004 f8a4 	bl	800545e <memset>
  if(huart->Instance==USART2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_UART_MspInit+0xcc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d148      	bne.n	80013b2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001320:	2302      	movs	r3, #2
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fb05 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001338:	f7ff fd16 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133c:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 8001342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001346:	6593      	str	r3, [r2, #88]	; 0x58
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_UART_MspInit+0xd0>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800136c:	2304      	movs	r3, #4
 800136e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800137c:	2307      	movs	r3, #7
 800137e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f000 faa9 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800138e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001392:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80013a0:	2303      	movs	r3, #3
 80013a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f000 fa97 	bl	80018e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3778      	adds	r7, #120	; 0x78
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40004400 	.word	0x40004400
 80013c0:	40021000 	.word	0x40021000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f93c 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001424:	2301      	movs	r3, #1
 8001426:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <_read+0x38>)
 8001434:	f003 f9df 	bl	80047f6 <HAL_UART_Receive>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	607b      	str	r3, [r7, #4]

	return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000015c 	.word	0x2000015c

08001454 <_write>:

int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	b29a      	uxth	r2, r3
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <_write+0x40>)
 8001470:	f003 f937 	bl	80046e2 <HAL_UART_Transmit>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d002      	beq.n	8001484 <_write+0x30>
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d101      	bne.n	8001488 <_write+0x34>
	{
		Error_Handler();
 8001484:	f7ff fc70 	bl	8000d68 <Error_Handler>
	}

	return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000015c 	.word	0x2000015c

08001498 <_close>:



int _close(int file)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014c0:	605a      	str	r2, [r3, #4]
	return 0;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_isatty>:

int _isatty(int file)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	return 1;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
	return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f003 ffe4 	bl	80054fc <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20010000 	.word	0x20010000
 8001560:	00000400 	.word	0x00000400
 8001564:	200001e8 	.word	0x200001e8
 8001568:	20000340 	.word	0x20000340

0800156c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff ffea 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopForever+0x6>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopForever+0xe>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopForever+0x16>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f003 ffa3 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff f94b 	bl	800085c <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80015d4:	08007a68 	.word	0x08007a68
  ldr r2, =_sbss
 80015d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80015dc:	2000033c 	.word	0x2000033c

080015e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_IRQHandler>

080015e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f943 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f80e 	bl	8001614 <HAL_InitTick>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	e001      	b.n	8001608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001604:	f7ff fdb6 	bl	8001174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001608:	79fb      	ldrb	r3, [r7, #7]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_InitTick+0x6c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d023      	beq.n	8001670 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_InitTick+0x70>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_InitTick+0x6c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f941 	bl	80018c6 <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10f      	bne.n	800166a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d809      	bhi.n	8001664 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f919 	bl	800188e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_InitTick+0x74>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e007      	b.n	8001674 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e001      	b.n	8001674 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000030 	.word	0x20000030
 8001684:	20000028 	.word	0x20000028
 8001688:	2000002c 	.word	0x2000002c

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000030 	.word	0x20000030
 80016b0:	200001ec 	.word	0x200001ec

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200001ec 	.word	0x200001ec

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000030 	.word	0x20000030

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff47 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff5c 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffb0 	bl	8001834 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	e148      	b.n	8001b82 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	4013      	ands	r3, r2
 80018fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 813a 	beq.w	8001b7c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <HAL_GPIO_Init+0x40>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d017      	beq.n	80019be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d123      	bne.n	8001a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	691a      	ldr	r2, [r3, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	6939      	ldr	r1, [r7, #16]
 8001a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0203 	and.w	r2, r3, #3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8094 	beq.w	8001b7c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a96:	d00d      	beq.n	8001ab4 <HAL_GPIO_Init+0x1d4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d007      	beq.n	8001ab0 <HAL_GPIO_Init+0x1d0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a42      	ldr	r2, [pc, #264]	; (8001bac <HAL_GPIO_Init+0x2cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_GPIO_Init+0x1cc>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001aac:	2307      	movs	r3, #7
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x1d6>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac6:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad4:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af8:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b22:	4a23      	ldr	r2, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b76:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f aeaf 	bne.w	80018f0 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40007000 	.word	0x40007000

08001c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2e:	d130      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3c:	d038      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2232      	movs	r2, #50	; 0x32
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c64:	e002      	b.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d102      	bne.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d110      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e00f      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d007      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d102      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f000 bc02 	b.w	80024e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce0:	4b96      	ldr	r3, [pc, #600]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cea:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80e4 	beq.w	8001eca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4c>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	f040 808b 	bne.w	8001e26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	f040 8087 	bne.w	8001e26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x64>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e3d9      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_RCC_OscConfig+0x7e>
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	e005      	b.n	8001d56 <HAL_RCC_OscConfig+0x8a>
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d223      	bcs.n	8001da2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fd8c 	bl	800287c <RCC_SetFlashLatencyFromMSIRange>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e3ba      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	496d      	ldr	r1, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	4968      	ldr	r1, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	e025      	b.n	8001dee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4960      	ldr	r1, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	495b      	ldr	r1, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fd4c 	bl	800287c <RCC_SetFlashLatencyFromMSIRange>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e37a      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dee:	f000 fc81 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8001df2:	4602      	mov	r2, r0
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	4950      	ldr	r1, [pc, #320]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001e00:	5ccb      	ldrb	r3, [r1, r3]
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0a:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_RCC_OscConfig+0x278>)
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e0e:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fbfe 	bl	8001614 <HAL_InitTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d052      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	e35e      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d032      	beq.n	8001e94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e2e:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fc3b 	bl	80016b4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e42:	f7ff fc37 	bl	80016b4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e347      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4930      	ldr	r1, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	492b      	ldr	r1, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
 8001e92:	e01a      	b.n	8001eca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fc08 	bl	80016b4 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fc04 	bl	80016b4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e314      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x1dc>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d073      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d005      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x21c>
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b0c      	cmp	r3, #12
 8001ee0:	d10e      	bne.n	8001f00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d063      	beq.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d15f      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e2f1      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x24c>
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e025      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d114      	bne.n	8001f4c <HAL_RCC_OscConfig+0x280>
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a02      	ldr	r2, [pc, #8]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e013      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	080078c0 	.word	0x080078c0
 8001f44:	20000028 	.word	0x20000028
 8001f48:	2000002c 	.word	0x2000002c
 8001f4c:	4ba0      	ldr	r3, [pc, #640]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a9f      	ldr	r2, [pc, #636]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b9d      	ldr	r3, [pc, #628]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a9c      	ldr	r2, [pc, #624]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fba2 	bl	80016b4 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fb9e 	bl	80016b4 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e2ae      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2a8>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb8e 	bl	80016b4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fb8a 	bl	80016b4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e29a      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d0>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d060      	beq.n	800208c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x310>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d116      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e277      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	4973      	ldr	r1, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	e040      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fb49 	bl	80016b4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fb45 	bl	80016b4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e255      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002038:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	495f      	ldr	r1, [pc, #380]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e018      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff fb25 	bl	80016b4 <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7ff fb21 	bl	80016b4 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e231      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a0:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff fb00 	bl	80016b4 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fafc 	bl	80016b4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e20c      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3ec>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	4a3b      	ldr	r2, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff fae3 	bl	80016b4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7ff fadf 	bl	80016b4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1ef      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ef      	bne.n	80020f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a6 	beq.w	800226c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002148:	2301      	movs	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d118      	bne.n	800218a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002164:	f7ff faa6 	bl	80016b4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff faa2 	bl	80016b4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1b2      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4d8>
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d115      	bne.n	80021d8 <HAL_RCC_OscConfig+0x50c>
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	4b9a      	ldr	r3, [pc, #616]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a99      	ldr	r2, [pc, #612]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	4b96      	ldr	r3, [pc, #600]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a95      	ldr	r2, [pc, #596]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff fa58 	bl	80016b4 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff fa54 	bl	80016b4 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e162      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ed      	beq.n	8002208 <HAL_RCC_OscConfig+0x53c>
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff fa41 	bl	80016b4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fa3d 	bl	80016b4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e14b      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ed      	bne.n	8002236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01c      	beq.n	80022ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002286:	4a6f      	ldr	r2, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff fa10 	bl	80016b4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002298:	f7ff fa0c 	bl	80016b4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e11c      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022aa:	4b66      	ldr	r3, [pc, #408]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80022ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ef      	beq.n	8002298 <HAL_RCC_OscConfig+0x5cc>
 80022b8:	e01b      	b.n	80022f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80022bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022c0:	4a60      	ldr	r2, [pc, #384]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ca:	f7ff f9f3 	bl	80016b4 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d2:	f7ff f9ef 	bl	80016b4 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0ff      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022e4:	4b57      	ldr	r3, [pc, #348]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80022e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ef      	bne.n	80022d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80f3 	beq.w	80024e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	2b02      	cmp	r3, #2
 8002302:	f040 80c9 	bne.w	8002498 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002306:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f003 0203 	and.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	429a      	cmp	r2, r3
 8002318:	d12c      	bne.n	8002374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	3b01      	subs	r3, #1
 8002326:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d123      	bne.n	8002374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d11b      	bne.n	8002374 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d113      	bne.n	8002374 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d109      	bne.n	8002374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d06b      	beq.n	800244c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d062      	beq.n	8002440 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e0ac      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002394:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002396:	f7ff f98d 	bl	80016b4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff f989 	bl	80016b4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e099      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCC_OscConfig+0x77c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023cc:	3a01      	subs	r2, #1
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	4311      	orrs	r1, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023de:	0852      	lsrs	r2, r2, #1
 80023e0:	3a01      	subs	r2, #1
 80023e2:	0552      	lsls	r2, r2, #21
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023ea:	0852      	lsrs	r2, r2, #1
 80023ec:	3a01      	subs	r2, #1
 80023ee:	0652      	lsls	r2, r2, #25
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f6:	06d2      	lsls	r2, r2, #27
 80023f8:	430a      	orrs	r2, r1
 80023fa:	4912      	ldr	r1, [pc, #72]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002406:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800240a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002418:	f7ff f94c 	bl	80016b4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7ff f948 	bl	80016b4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e058      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_RCC_OscConfig+0x778>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243e:	e050      	b.n	80024e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e04f      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
 8002444:	40021000 	.word	0x40021000
 8002448:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d144      	bne.n	80024e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 800246a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800246e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002470:	f7ff f920 	bl	80016b4 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f91c 	bl	80016b4 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e02c      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0x7ac>
 8002496:	e024      	b.n	80024e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d01f      	beq.n	80024de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 80024a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7ff f903 	bl	80016b4 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff f8ff 	bl	80016b4 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e00f      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4905      	ldr	r1, [pc, #20]	; (80024ec <HAL_RCC_OscConfig+0x820>)
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x824>)
 80024d8:	4013      	ands	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
 80024dc:	e001      	b.n	80024e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000
 80024f0:	feeefffc 	.word	0xfeeefffc

080024f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0e7      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002508:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	429a      	cmp	r2, r3
 8002514:	d910      	bls.n	8002538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002516:	4b72      	ldr	r3, [pc, #456]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0207 	bic.w	r2, r3, #7
 800251e:	4970      	ldr	r1, [pc, #448]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cf      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d010      	beq.n	8002566 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002550:	429a      	cmp	r2, r3
 8002552:	d908      	bls.n	8002566 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002554:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4960      	ldr	r1, [pc, #384]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d04c      	beq.n	800260c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	4b5a      	ldr	r3, [pc, #360]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d121      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0a6      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e09a      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025aa:	4b4e      	ldr	r3, [pc, #312]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e08e      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e086      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4943      	ldr	r1, [pc, #268]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025dc:	f7ff f86a 	bl	80016b4 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff f866 	bl	80016b4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e06e      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002624:	429a      	cmp	r2, r3
 8002626:	d208      	bcs.n	800263a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	492b      	ldr	r1, [pc, #172]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d210      	bcs.n	800266a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 0207 	bic.w	r2, r3, #7
 8002650:	4923      	ldr	r1, [pc, #140]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_RCC_ClockConfig+0x1ec>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e036      	b.n	80026d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4918      	ldr	r1, [pc, #96]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4910      	ldr	r1, [pc, #64]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026a8:	f000 f824 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCC_ClockConfig+0x1f0>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	490b      	ldr	r1, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x1f4>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1fc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe ffa1 	bl	8001614 <HAL_InitTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80026d6:	7afb      	ldrb	r3, [r7, #11]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	080078c0 	.word	0x080078c0
 80026ec:	20000028 	.word	0x20000028
 80026f0:	2000002c 	.word	0x2000002c

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d121      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d11e      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002734:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e005      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002750:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002764:	e00a      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d102      	bne.n	8002772 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_RCC_GetSysClockFreq+0x110>)
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e004      	b.n	800277c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b08      	cmp	r3, #8
 8002776:	d101      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_RCC_GetSysClockFreq+0x114>)
 800277a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b0c      	cmp	r3, #12
 8002780:	d134      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0xa6>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d003      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002798:	e005      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800279a:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCC_GetSysClockFreq+0x110>)
 800279c:	617b      	str	r3, [r7, #20]
      break;
 800279e:	e005      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_RCC_GetSysClockFreq+0x114>)
 80027a2:	617b      	str	r3, [r7, #20]
      break;
 80027a4:	e002      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	617b      	str	r3, [r7, #20]
      break;
 80027aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	3301      	adds	r3, #1
 80027b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	fb03 f202 	mul.w	r2, r3, r2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_GetSysClockFreq+0x108>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	0e5b      	lsrs	r3, r3, #25
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	3301      	adds	r3, #1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027ec:	69bb      	ldr	r3, [r7, #24]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	080078d8 	.word	0x080078d8
 8002804:	00f42400 	.word	0x00f42400
 8002808:	007a1200 	.word	0x007a1200

0800280c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000028 	.word	0x20000028

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002828:	f7ff fff0 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4904      	ldr	r1, [pc, #16]	; (800284c <HAL_RCC_GetPCLK1Freq+0x28>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	080078d0 	.word	0x080078d0

08002850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002854:	f7ff ffda 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0adb      	lsrs	r3, r3, #11
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	080078d0 	.word	0x080078d0

0800287c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002894:	f7ff f9b6 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 8002898:	6178      	str	r0, [r7, #20]
 800289a:	e014      	b.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028b4:	f7ff f9a6 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 80028b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028cc:	d10b      	bne.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d919      	bls.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2ba0      	cmp	r3, #160	; 0xa0
 80028d8:	d902      	bls.n	80028e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028da:	2302      	movs	r3, #2
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e013      	b.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028e0:	2301      	movs	r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	e010      	b.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d902      	bls.n	80028f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028ec:	2303      	movs	r3, #3
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	e00a      	b.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d102      	bne.n	80028fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028f8:	2302      	movs	r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	e004      	b.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b70      	cmp	r3, #112	; 0x70
 8002902:	d101      	bne.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002904:	2301      	movs	r3, #1
 8002906:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 0207 	bic.w	r2, r3, #7
 8002910:	4909      	ldr	r1, [pc, #36]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002944:	2300      	movs	r3, #0
 8002946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002948:	2300      	movs	r3, #0
 800294a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002960:	d01a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002962:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002966:	d814      	bhi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800296c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002970:	d10f      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002972:	4b5d      	ldr	r3, [pc, #372]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a5c      	ldr	r2, [pc, #368]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800297e:	e00c      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3304      	adds	r3, #4
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f9de 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002990:	e003      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	74fb      	strb	r3, [r7, #19]
      break;
 8002996:	e000      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002998:	bf00      	nop
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	494e      	ldr	r1, [pc, #312]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029b6:	e001      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 809e 	beq.w	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ce:	4b46      	ldr	r3, [pc, #280]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fe52 	bl	80016b4 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a12:	e009      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a14:	f7fe fe4e 	bl	80016b4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	74fb      	strb	r3, [r7, #19]
        break;
 8002a26:	e005      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d15a      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01e      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d019      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	4a1f      	ldr	r2, [pc, #124]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fe0e 	bl	80016b4 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fe0a 	bl	80016b4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab2:	e006      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ec      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac8:	4b07      	ldr	r3, [pc, #28]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad6:	4904      	ldr	r1, [pc, #16]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ade:	e009      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
 8002ae4:	e006      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af4:	7c7b      	ldrb	r3, [r7, #17]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d105      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b8a      	ldr	r3, [pc, #552]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	4a89      	ldr	r2, [pc, #548]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b12:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f023 0203 	bic.w	r2, r3, #3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4980      	ldr	r1, [pc, #512]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b34:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 020c 	bic.w	r2, r3, #12
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	4978      	ldr	r1, [pc, #480]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	496f      	ldr	r1, [pc, #444]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b78:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	4967      	ldr	r1, [pc, #412]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	495e      	ldr	r1, [pc, #376]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bbc:	4b59      	ldr	r3, [pc, #356]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	4956      	ldr	r1, [pc, #344]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bde:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	494d      	ldr	r1, [pc, #308]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d028      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c00:	4b48      	ldr	r3, [pc, #288]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4945      	ldr	r1, [pc, #276]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
 8002c2c:	e011      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f882 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c5e:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	492d      	ldr	r1, [pc, #180]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c7e:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002c84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c88:	60d3      	str	r3, [r2, #12]
 8002c8a:	e011      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c94:	d10c      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f853 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002cac:	7cfb      	ldrb	r3, [r7, #19]
 8002cae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cca:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3304      	adds	r3, #4
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f830 	bl	8002d48 <RCCEx_PLLSAI1_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002cf2:	7cfb      	ldrb	r3, [r7, #19]
 8002cf4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000

08002d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d56:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d018      	beq.n	8002d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d62:	4b71      	ldr	r3, [pc, #452]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10d      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
       ||
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
       ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d047      	beq.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e044      	b.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d018      	beq.n	8002dce <RCCEx_PLLSAI1_Config+0x86>
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d825      	bhi.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d002      	beq.n	8002daa <RCCEx_PLLSAI1_Config+0x62>
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d009      	beq.n	8002dbc <RCCEx_PLLSAI1_Config+0x74>
 8002da8:	e020      	b.n	8002dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dba:	e01a      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e013      	b.n	8002df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dea:	e006      	b.n	8002dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
      break;
 8002df0:	e004      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10d      	bne.n	8002e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e02:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	430b      	orrs	r3, r1
 8002e18:	4943      	ldr	r1, [pc, #268]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d17c      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e24:	4b40      	ldr	r3, [pc, #256]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe fc40 	bl	80016b4 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e36:	e009      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e38:	f7fe fc3c 	bl	80016b4 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d902      	bls.n	8002e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	73fb      	strb	r3, [r7, #15]
        break;
 8002e4a:	e005      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e4c:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ef      	bne.n	8002e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d15f      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
 8002e74:	0211      	lsls	r1, r2, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68d2      	ldr	r2, [r2, #12]
 8002e7a:	06d2      	lsls	r2, r2, #27
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	492a      	ldr	r1, [pc, #168]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
 8002e84:	e027      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d112      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6892      	ldr	r2, [r2, #8]
 8002e9c:	0211      	lsls	r1, r2, #8
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6912      	ldr	r2, [r2, #16]
 8002ea2:	0852      	lsrs	r2, r2, #1
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0552      	lsls	r2, r2, #21
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	491f      	ldr	r1, [pc, #124]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
 8002eb0:	e011      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002eba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	0211      	lsls	r1, r2, #8
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6952      	ldr	r2, [r2, #20]
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0652      	lsls	r2, r2, #25
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	4915      	ldr	r1, [pc, #84]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fbe7 	bl	80016b4 <HAL_GetTick>
 8002ee6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee8:	e009      	b.n	8002efe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eea:	f7fe fbe3 	bl	80016b4 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	73fb      	strb	r3, [r7, #15]
          break;
 8002efc:	e005      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ef      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	4903      	ldr	r1, [pc, #12]	; (8002f28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e095      	b.n	800306a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f4e:	d009      	beq.n	8002f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
 8002f56:	e005      	b.n	8002f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fe f91c 	bl	80011bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa4:	d902      	bls.n	8002fac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e002      	b.n	8002fb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002fba:	d007      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	ea42 0103 	orr.w	r1, r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 0204 	and.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b088      	sub	sp, #32
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_SPI_Transmit+0x22>
 8003090:	2302      	movs	r3, #2
 8003092:	e15f      	b.n	8003354 <HAL_SPI_Transmit+0x2e2>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309c:	f7fe fb0a 	bl	80016b4 <HAL_GetTick>
 80030a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030b6:	e148      	b.n	800334a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Transmit+0x52>
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030c8:	e13f      	b.n	800334a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2203      	movs	r2, #3
 80030ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	88fa      	ldrh	r2, [r7, #6]
 80030e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003114:	d10f      	bne.n	8003136 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003134:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d007      	beq.n	8003154 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800315c:	d94f      	bls.n	80031fe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_SPI_Transmit+0xfa>
 8003166:	8afb      	ldrh	r3, [r7, #22]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d142      	bne.n	80031f2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	881a      	ldrh	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	1c9a      	adds	r2, r3, #2
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003190:	e02f      	b.n	80031f2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b02      	cmp	r3, #2
 800319e:	d112      	bne.n	80031c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	881a      	ldrh	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031c4:	e015      	b.n	80031f2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c6:	f7fe fa75 	bl	80016b4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d803      	bhi.n	80031de <HAL_SPI_Transmit+0x16c>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_Transmit+0x172>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80031f0:	e0ab      	b.n	800334a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ca      	bne.n	8003192 <HAL_SPI_Transmit+0x120>
 80031fc:	e080      	b.n	8003300 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d002      	beq.n	800320c <HAL_SPI_Transmit+0x19a>
 8003206:	8afb      	ldrh	r3, [r7, #22]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d174      	bne.n	80032f6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d912      	bls.n	800323c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	881a      	ldrh	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	1c9a      	adds	r2, r3, #2
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b02      	subs	r3, #2
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	87da      	strh	r2, [r3, #62]	; 0x3e
 800323a:	e05c      	b.n	80032f6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003262:	e048      	b.n	80032f6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d12b      	bne.n	80032ca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d912      	bls.n	80032a2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	881a      	ldrh	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	1c9a      	adds	r2, r3, #2
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b02      	subs	r3, #2
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a0:	e029      	b.n	80032f6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	7812      	ldrb	r2, [r2, #0]
 80032ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c8:	e015      	b.n	80032f6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ca:	f7fe f9f3 	bl	80016b4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d803      	bhi.n	80032e2 <HAL_SPI_Transmit+0x270>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_Transmit+0x276>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80032f4:	e029      	b.n	800334a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1b1      	bne.n	8003264 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f947 	bl	8003598 <SPI_EndRxTxTransaction>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e003      	b.n	800334a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003352:	7ffb      	ldrb	r3, [r7, #31]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800336c:	f7fe f9a2 	bl	80016b4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800337c:	f7fe f99a 	bl	80016b4 <HAL_GetTick>
 8003380:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	015b      	lsls	r3, r3, #5
 8003388:	0d1b      	lsrs	r3, r3, #20
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003392:	e054      	b.n	800343e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d050      	beq.n	800343e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800339c:	f7fe f98a 	bl	80016b4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d902      	bls.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d13d      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ca:	d111      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d004      	beq.n	80033e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d107      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d10f      	bne.n	800341a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e017      	b.n	800345e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3b01      	subs	r3, #1
 800343c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d19b      	bne.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20000028 	.word	0x20000028

0800346c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800347e:	f7fe f919 	bl	80016b4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	4413      	add	r3, r2
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800348e:	f7fe f911 	bl	80016b4 <HAL_GetTick>
 8003492:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800349c:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00da      	lsls	r2, r3, #3
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	0d1b      	lsrs	r3, r3, #20
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034b4:	e060      	b.n	8003578 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034bc:	d107      	bne.n	80034ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d104      	bne.n	80034ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d050      	beq.n	8003578 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d6:	f7fe f8ed 	bl	80016b4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d902      	bls.n	80034ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d13d      	bne.n	8003568 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003504:	d111      	bne.n	800352a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350e:	d004      	beq.n	800351a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d107      	bne.n	800352a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003528:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003532:	d10f      	bne.n	8003554 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003552:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e010      	b.n	800358a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3b01      	subs	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d196      	bne.n	80034b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000028 	.word	0x20000028

08003598 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff ff5b 	bl	800346c <SPI_WaitFifoStateUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e027      	b.n	800361c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fec0 	bl	800335c <SPI_WaitFlagStateUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e014      	b.n	800361c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff ff34 	bl	800346c <SPI_WaitFifoStateUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e000      	b.n	800361c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e049      	b.n	80036ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fdfa 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 fa74 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e049      	b.n	8003778 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f841 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 fa1d 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0ff      	b.n	80039b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b14      	cmp	r3, #20
 80037be:	f200 80f0 	bhi.w	80039a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	080039a3 	.word	0x080039a3
 80037d0:	080039a3 	.word	0x080039a3
 80037d4:	080039a3 	.word	0x080039a3
 80037d8:	0800385d 	.word	0x0800385d
 80037dc:	080039a3 	.word	0x080039a3
 80037e0:	080039a3 	.word	0x080039a3
 80037e4:	080039a3 	.word	0x080039a3
 80037e8:	0800389f 	.word	0x0800389f
 80037ec:	080039a3 	.word	0x080039a3
 80037f0:	080039a3 	.word	0x080039a3
 80037f4:	080039a3 	.word	0x080039a3
 80037f8:	080038df 	.word	0x080038df
 80037fc:	080039a3 	.word	0x080039a3
 8003800:	080039a3 	.word	0x080039a3
 8003804:	080039a3 	.word	0x080039a3
 8003808:	08003921 	.word	0x08003921
 800380c:	080039a3 	.word	0x080039a3
 8003810:	080039a3 	.word	0x080039a3
 8003814:	080039a3 	.word	0x080039a3
 8003818:	08003961 	.word	0x08003961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f9f8 	bl	8003c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	619a      	str	r2, [r3, #24]
      break;
 800385a:	e0a5      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fa54 	bl	8003d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      break;
 800389c:	e084      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 faad 	bl	8003e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0204 	bic.w	r2, r2, #4
 80038c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      break;
 80038dc:	e064      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fb05 	bl	8003ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	61da      	str	r2, [r3, #28]
      break;
 800391e:	e043      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb42 	bl	8003fb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0208 	orr.w	r2, r2, #8
 800393a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800395e:	e023      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fb7a 	bl	8004060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039a0:	e002      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
      break;
 80039a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop

080039bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_TIM_ConfigClockSource+0x1c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e0b6      	b.n	8003b46 <HAL_TIM_ConfigClockSource+0x18a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a14:	d03e      	beq.n	8003a94 <HAL_TIM_ConfigClockSource+0xd8>
 8003a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1a:	f200 8087 	bhi.w	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a22:	f000 8086 	beq.w	8003b32 <HAL_TIM_ConfigClockSource+0x176>
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d87f      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a2c:	2b70      	cmp	r3, #112	; 0x70
 8003a2e:	d01a      	beq.n	8003a66 <HAL_TIM_ConfigClockSource+0xaa>
 8003a30:	2b70      	cmp	r3, #112	; 0x70
 8003a32:	d87b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a34:	2b60      	cmp	r3, #96	; 0x60
 8003a36:	d050      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x11e>
 8003a38:	2b60      	cmp	r3, #96	; 0x60
 8003a3a:	d877      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a3c:	2b50      	cmp	r3, #80	; 0x50
 8003a3e:	d03c      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0xfe>
 8003a40:	2b50      	cmp	r3, #80	; 0x50
 8003a42:	d873      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d058      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x13e>
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d86f      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a4c:	2b30      	cmp	r3, #48	; 0x30
 8003a4e:	d064      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15e>
 8003a50:	2b30      	cmp	r3, #48	; 0x30
 8003a52:	d86b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d060      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15e>
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d867      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d05c      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15e>
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d05a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x15e>
 8003a64:	e062      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	f000 fbc7 	bl	8004208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	609a      	str	r2, [r3, #8]
      break;
 8003a92:	e04f      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	f000 fbb0 	bl	8004208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ab6:	609a      	str	r2, [r3, #8]
      break;
 8003ab8:	e03c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f000 fb24 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2150      	movs	r1, #80	; 0x50
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fb7d 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e02c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fb43 	bl	8004172 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2160      	movs	r1, #96	; 0x60
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb6d 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e01c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fb04 	bl	8004114 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2140      	movs	r1, #64	; 0x40
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb5d 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e00c      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f000 fb54 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003b2a:	e003      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e000      	b.n	8003b34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a2a      	ldr	r2, [pc, #168]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d003      	beq.n	8003b70 <TIM_Base_SetConfig+0x20>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d108      	bne.n	8003b82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_Base_SetConfig+0x52>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b90:	d007      	beq.n	8003ba2 <TIM_Base_SetConfig+0x52>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_Base_SetConfig+0x52>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <TIM_Base_SetConfig+0xc4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <TIM_Base_SetConfig+0xa0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d003      	beq.n	8003bf0 <TIM_Base_SetConfig+0xa0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <TIM_Base_SetConfig+0xc4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40012c00 	.word	0x40012c00
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400

08003c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 0201 	bic.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 0302 	bic.w	r3, r3, #2
 8003c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a24      	ldr	r2, [pc, #144]	; (8003d04 <TIM_OC1_SetConfig+0xec>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d007      	beq.n	8003c88 <TIM_OC1_SetConfig+0x70>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <TIM_OC1_SetConfig+0xf0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <TIM_OC1_SetConfig+0x70>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <TIM_OC1_SetConfig+0xf4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10c      	bne.n	8003ca2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0308 	bic.w	r3, r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f023 0304 	bic.w	r3, r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <TIM_OC1_SetConfig+0xec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <TIM_OC1_SetConfig+0xa2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a16      	ldr	r2, [pc, #88]	; (8003d08 <TIM_OC1_SetConfig+0xf0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <TIM_OC1_SetConfig+0xa2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a15      	ldr	r2, [pc, #84]	; (8003d0c <TIM_OC1_SetConfig+0xf4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d111      	bne.n	8003cde <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400

08003d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 0210 	bic.w	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_OC2_SetConfig+0xe8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10d      	bne.n	8003d90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_OC2_SetConfig+0xe8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_OC2_SetConfig+0x98>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <TIM_OC2_SetConfig+0xec>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC2_SetConfig+0x98>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <TIM_OC2_SetConfig+0xf0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d113      	bne.n	8003dd0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40012c00 	.word	0x40012c00
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400

08003e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a21      	ldr	r2, [pc, #132]	; (8003ee8 <TIM_OC3_SetConfig+0xe4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10d      	bne.n	8003e82 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	021b      	lsls	r3, r3, #8
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <TIM_OC3_SetConfig+0xe4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <TIM_OC3_SetConfig+0x96>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a17      	ldr	r2, [pc, #92]	; (8003eec <TIM_OC3_SetConfig+0xe8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_OC3_SetConfig+0x96>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <TIM_OC3_SetConfig+0xec>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d113      	bne.n	8003ec2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400

08003ef4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <TIM_OC4_SetConfig+0xb0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d007      	beq.n	8003f68 <TIM_OC4_SetConfig+0x74>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <TIM_OC4_SetConfig+0xb4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC4_SetConfig+0x74>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <TIM_OC4_SetConfig+0xb8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d109      	bne.n	8003f7c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	019b      	lsls	r3, r3, #6
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	621a      	str	r2, [r3, #32]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400

08003fb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ff4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a13      	ldr	r2, [pc, #76]	; (8004054 <TIM_OC5_SetConfig+0xa4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_OC5_SetConfig+0x6a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <TIM_OC5_SetConfig+0xa8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC5_SetConfig+0x6a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a11      	ldr	r2, [pc, #68]	; (800405c <TIM_OC5_SetConfig+0xac>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d109      	bne.n	800402e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	621a      	str	r2, [r3, #32]
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400

08004060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	051b      	lsls	r3, r3, #20
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC6_SetConfig+0xa8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <TIM_OC6_SetConfig+0x6c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a13      	ldr	r2, [pc, #76]	; (800410c <TIM_OC6_SetConfig+0xac>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC6_SetConfig+0x6c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <TIM_OC6_SetConfig+0xb0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d109      	bne.n	80040e0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40012c00 	.word	0x40012c00
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f023 0210 	bic.w	r2, r3, #16
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <HAL_TIMEx_PWMN_Start+0x24>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e022      	b.n	80042b2 <HAL_TIMEx_PWMN_Start+0x6a>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b04      	cmp	r3, #4
 8004270:	d109      	bne.n	8004286 <HAL_TIMEx_PWMN_Start+0x3e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e015      	b.n	80042b2 <HAL_TIMEx_PWMN_Start+0x6a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d109      	bne.n	80042a0 <HAL_TIMEx_PWMN_Start+0x58>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e008      	b.n	80042b2 <HAL_TIMEx_PWMN_Start+0x6a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e05a      	b.n	8004370 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_TIMEx_PWMN_Start+0x82>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c8:	e013      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d104      	bne.n	80042da <HAL_TIMEx_PWMN_Start+0x92>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d8:	e00b      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d104      	bne.n	80042ea <HAL_TIMEx_PWMN_Start+0xa2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e8:	e003      	b.n	80042f2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2204      	movs	r2, #4
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f97e 	bl	80045fc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_TIMEx_PWMN_Start+0x130>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_TIMEx_PWMN_Start+0xe6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004322:	d004      	beq.n	800432e <HAL_TIMEx_PWMN_Start+0xe6>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a14      	ldr	r2, [pc, #80]	; (800437c <HAL_TIMEx_PWMN_Start+0x134>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d115      	bne.n	800435a <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_TIMEx_PWMN_Start+0x138>)
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b06      	cmp	r3, #6
 800433e:	d015      	beq.n	800436c <HAL_TIMEx_PWMN_Start+0x124>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004346:	d011      	beq.n	800436c <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004358:	e008      	b.n	800436c <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e000      	b.n	800436e <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40014000 	.word	0x40014000
 8004380:	00010007 	.word	0x00010007

08004384 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f930 	bl	80045fc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <HAL_TIMEx_PWMN_Stop+0x48>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a1a      	ldr	r2, [r3, #32]
 80043b2:	f240 4344 	movw	r3, #1092	; 0x444
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_TIMEx_PWMN_Stop+0x48>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <HAL_TIMEx_PWMN_Stop+0x78>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	f240 4344 	movw	r3, #1092	; 0x444
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_TIMEx_PWMN_Stop+0x78>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_TIMEx_PWMN_Stop+0x88>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440a:	e013      	b.n	8004434 <HAL_TIMEx_PWMN_Stop+0xb0>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b04      	cmp	r3, #4
 8004410:	d104      	bne.n	800441c <HAL_TIMEx_PWMN_Stop+0x98>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800441a:	e00b      	b.n	8004434 <HAL_TIMEx_PWMN_Stop+0xb0>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d104      	bne.n	800442c <HAL_TIMEx_PWMN_Stop+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800442a:	e003      	b.n	8004434 <HAL_TIMEx_PWMN_Stop+0xb0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004454:	2302      	movs	r3, #2
 8004456:	e04f      	b.n	80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d108      	bne.n	8004494 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004488:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4313      	orrs	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a14      	ldr	r2, [pc, #80]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d009      	beq.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d004      	beq.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10c      	bne.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4313      	orrs	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40014000 	.word	0x40014000

0800450c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004524:	2302      	movs	r3, #2
 8004526:	e060      	b.n	80045ea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d115      	bne.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	051b      	lsls	r3, r3, #20
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40012c00 	.word	0x40012c00

080045fc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	2204      	movs	r2, #4
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1a      	ldr	r2, [r3, #32]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	43db      	mvns	r3, r3
 800461e:	401a      	ands	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e040      	b.n	80046da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fe41 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2224      	movs	r2, #36	; 0x24
 8004672:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fba7 	bl	8004de0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f978 	bl	8004988 <UART_SetConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e01b      	b.n	80046da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fc26 	bl	8004f24 <UART_CheckIdleState>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08a      	sub	sp, #40	; 0x28
 80046e6:	af02      	add	r7, sp, #8
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d178      	bne.n	80047ec <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_UART_Transmit+0x24>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e071      	b.n	80047ee <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2221      	movs	r2, #33	; 0x21
 8004716:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004718:	f7fc ffcc 	bl	80016b4 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	88fa      	ldrh	r2, [r7, #6]
 800472a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d108      	bne.n	800474a <HAL_UART_Transmit+0x68>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e003      	b.n	8004752 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004752:	e030      	b.n	80047b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	2180      	movs	r1, #128	; 0x80
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fc88 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e03c      	b.n	80047ee <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004786:	b292      	uxth	r2, r2
 8004788:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	3302      	adds	r3, #2
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e008      	b.n	80047a4 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	781a      	ldrb	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	b292      	uxth	r2, r2
 800479c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	3301      	adds	r3, #1
 80047a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1c8      	bne.n	8004754 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2140      	movs	r1, #64	; 0x40
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 fc51 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e005      	b.n	80047ee <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b08a      	sub	sp, #40	; 0x28
 80047fa:	af02      	add	r7, sp, #8
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800480c:	2b20      	cmp	r3, #32
 800480e:	f040 80b6 	bne.w	800497e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <HAL_UART_Receive+0x28>
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0ae      	b.n	8004980 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004838:	f7fc ff3c 	bl	80016b4 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	88fa      	ldrh	r2, [r7, #6]
 8004842:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004856:	d10e      	bne.n	8004876 <HAL_UART_Receive+0x80>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_UART_Receive+0x76>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004866:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800486a:	e02d      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	22ff      	movs	r2, #255	; 0xff
 8004870:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004874:	e028      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_UART_Receive+0xa4>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_UART_Receive+0x9a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800488e:	e01b      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	227f      	movs	r2, #127	; 0x7f
 8004894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004898:	e016      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a2:	d10d      	bne.n	80048c0 <HAL_UART_Receive+0xca>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <HAL_UART_Receive+0xc0>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	227f      	movs	r2, #127	; 0x7f
 80048b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b4:	e008      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	223f      	movs	r2, #63	; 0x3f
 80048ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048be:	e003      	b.n	80048c8 <HAL_UART_Receive+0xd2>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048ce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d8:	d108      	bne.n	80048ec <HAL_UART_Receive+0xf6>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d104      	bne.n	80048ec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	e003      	b.n	80048f4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048f4:	e037      	b.n	8004966 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2120      	movs	r1, #32
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fbb7 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e033      	b.n	8004980 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004924:	b29a      	uxth	r2, r3
 8004926:	8a7b      	ldrh	r3, [r7, #18]
 8004928:	4013      	ands	r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	3302      	adds	r3, #2
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	e00d      	b.n	8004954 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800493e:	b29b      	uxth	r3, r3
 8004940:	b2da      	uxtb	r2, r3
 8004942:	8a7b      	ldrh	r3, [r7, #18]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4013      	ands	r3, r2
 8004948:	b2da      	uxtb	r2, r3
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800496c:	b29b      	uxth	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1c1      	bne.n	80048f6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b08a      	sub	sp, #40	; 0x28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4bb4      	ldr	r3, [pc, #720]	; (8004c88 <UART_SetConfig+0x300>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4aa9      	ldr	r2, [pc, #676]	; (8004c8c <UART_SetConfig+0x304>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d004      	beq.n	80049f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	4313      	orrs	r3, r2
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4aa0      	ldr	r2, [pc, #640]	; (8004c90 <UART_SetConfig+0x308>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d126      	bne.n	8004a60 <UART_SetConfig+0xd8>
 8004a12:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <UART_SetConfig+0x30c>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	2b03      	cmp	r3, #3
 8004a1e:	d81b      	bhi.n	8004a58 <UART_SetConfig+0xd0>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <UART_SetConfig+0xa0>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a49 	.word	0x08004a49
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a51 	.word	0x08004a51
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e080      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004a40:	2302      	movs	r3, #2
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e07c      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e078      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004a50:	2308      	movs	r3, #8
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a56:	e074      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004a58:	2310      	movs	r3, #16
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5e:	e070      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a8c      	ldr	r2, [pc, #560]	; (8004c98 <UART_SetConfig+0x310>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d138      	bne.n	8004adc <UART_SetConfig+0x154>
 8004a6a:	4b8a      	ldr	r3, [pc, #552]	; (8004c94 <UART_SetConfig+0x30c>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d82d      	bhi.n	8004ad4 <UART_SetConfig+0x14c>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0xf8>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004ad5 	.word	0x08004ad5
 8004a88:	08004ad5 	.word	0x08004ad5
 8004a8c:	08004ad5 	.word	0x08004ad5
 8004a90:	08004ac5 	.word	0x08004ac5
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004ad5 	.word	0x08004ad5
 8004aa0:	08004abd 	.word	0x08004abd
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004ad5 	.word	0x08004ad5
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e042      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e03e      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e03a      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e036      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e032      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <UART_SetConfig+0x304>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d12a      	bne.n	8004b3c <UART_SetConfig+0x1b4>
 8004ae6:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <UART_SetConfig+0x30c>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004af4:	d01a      	beq.n	8004b2c <UART_SetConfig+0x1a4>
 8004af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afa:	d81b      	bhi.n	8004b34 <UART_SetConfig+0x1ac>
 8004afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b00:	d00c      	beq.n	8004b1c <UART_SetConfig+0x194>
 8004b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b06:	d815      	bhi.n	8004b34 <UART_SetConfig+0x1ac>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <UART_SetConfig+0x18c>
 8004b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b10:	d008      	beq.n	8004b24 <UART_SetConfig+0x19c>
 8004b12:	e00f      	b.n	8004b34 <UART_SetConfig+0x1ac>
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e012      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e00e      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e00a      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e006      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e002      	b.n	8004b42 <UART_SetConfig+0x1ba>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a51      	ldr	r2, [pc, #324]	; (8004c8c <UART_SetConfig+0x304>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d17a      	bne.n	8004c42 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d824      	bhi.n	8004b9e <UART_SetConfig+0x216>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x1d4>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b8f 	.word	0x08004b8f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b9f 	.word	0x08004b9f
 8004b78:	08004b9f 	.word	0x08004b9f
 8004b7c:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fd fe50 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004b84:	61f8      	str	r0, [r7, #28]
        break;
 8004b86:	e010      	b.n	8004baa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b44      	ldr	r3, [pc, #272]	; (8004c9c <UART_SetConfig+0x314>)
 8004b8a:	61fb      	str	r3, [r7, #28]
        break;
 8004b8c:	e00d      	b.n	8004baa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fd fdb1 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004b92:	61f8      	str	r0, [r7, #28]
        break;
 8004b94:	e009      	b.n	8004baa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	61fb      	str	r3, [r7, #28]
        break;
 8004b9c:	e005      	b.n	8004baa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8107 	beq.w	8004dc0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d305      	bcc.n	8004bce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d903      	bls.n	8004bd6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bd4:	e0f4      	b.n	8004dc0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	461c      	mov	r4, r3
 8004bdc:	4615      	mov	r5, r2
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	022b      	lsls	r3, r5, #8
 8004be8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bec:	0222      	lsls	r2, r4, #8
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	6849      	ldr	r1, [r1, #4]
 8004bf2:	0849      	lsrs	r1, r1, #1
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	4688      	mov	r8, r1
 8004bf8:	4681      	mov	r9, r0
 8004bfa:	eb12 0a08 	adds.w	sl, r2, r8
 8004bfe:	eb43 0b09 	adc.w	fp, r3, r9
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c10:	4650      	mov	r0, sl
 8004c12:	4659      	mov	r1, fp
 8004c14:	f7fb fb2c 	bl	8000270 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c26:	d308      	bcc.n	8004c3a <UART_SetConfig+0x2b2>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2e:	d204      	bcs.n	8004c3a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	e0c2      	b.n	8004dc0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c40:	e0be      	b.n	8004dc0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4a:	d16a      	bne.n	8004d22 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d834      	bhi.n	8004cbe <UART_SetConfig+0x336>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <UART_SetConfig+0x2d4>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004ca1 	.word	0x08004ca1
 8004c64:	08004ca9 	.word	0x08004ca9
 8004c68:	08004cbf 	.word	0x08004cbf
 8004c6c:	08004caf 	.word	0x08004caf
 8004c70:	08004cbf 	.word	0x08004cbf
 8004c74:	08004cbf 	.word	0x08004cbf
 8004c78:	08004cbf 	.word	0x08004cbf
 8004c7c:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd fdd0 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004c84:	61f8      	str	r0, [r7, #28]
        break;
 8004c86:	e020      	b.n	8004cca <UART_SetConfig+0x342>
 8004c88:	efff69f3 	.word	0xefff69f3
 8004c8c:	40008000 	.word	0x40008000
 8004c90:	40013800 	.word	0x40013800
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40004400 	.word	0x40004400
 8004c9c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fd fdd6 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	61f8      	str	r0, [r7, #28]
        break;
 8004ca6:	e010      	b.n	8004cca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b4c      	ldr	r3, [pc, #304]	; (8004ddc <UART_SetConfig+0x454>)
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e00d      	b.n	8004cca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fd fd21 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61f8      	str	r0, [r7, #28]
        break;
 8004cb4:	e009      	b.n	8004cca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e005      	b.n	8004cca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d077      	beq.n	8004dc0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005a      	lsls	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	441a      	add	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b0f      	cmp	r3, #15
 8004cea:	d916      	bls.n	8004d1a <UART_SetConfig+0x392>
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf2:	d212      	bcs.n	8004d1a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f023 030f 	bic.w	r3, r3, #15
 8004cfc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	8afb      	ldrh	r3, [r7, #22]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	8afa      	ldrh	r2, [r7, #22]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	e052      	b.n	8004dc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d20:	e04e      	b.n	8004dc0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d827      	bhi.n	8004d7a <UART_SetConfig+0x3f2>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x3a8>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d55 	.word	0x08004d55
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	08004d65 	.word	0x08004d65
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d6b 	.word	0x08004d6b
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d7b 	.word	0x08004d7b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d54:	f7fd fd66 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 8004d58:	61f8      	str	r0, [r7, #28]
        break;
 8004d5a:	e014      	b.n	8004d86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d5c:	f7fd fd78 	bl	8002850 <HAL_RCC_GetPCLK2Freq>
 8004d60:	61f8      	str	r0, [r7, #28]
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <UART_SetConfig+0x454>)
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fd fcc3 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 8004d6e:	61f8      	str	r0, [r7, #28]
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d84:	bf00      	nop
    }

    if (pclk != 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085a      	lsrs	r2, r3, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b0f      	cmp	r3, #15
 8004da4:	d909      	bls.n	8004dba <UART_SetConfig+0x432>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d205      	bcs.n	8004dba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e002      	b.n	8004dc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004dcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3728      	adds	r7, #40	; 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dda:	bf00      	nop
 8004ddc:	00f42400 	.word	0x00f42400

08004de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00a      	beq.n	8004e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00a      	beq.n	8004e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0304 	and.w	r3, r3, #4
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01a      	beq.n	8004ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ede:	d10a      	bne.n	8004ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	430a      	orrs	r2, r1
 8004f16:	605a      	str	r2, [r3, #4]
  }
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b098      	sub	sp, #96	; 0x60
 8004f28:	af02      	add	r7, sp, #8
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f34:	f7fc fbbe 	bl	80016b4 <HAL_GetTick>
 8004f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d12e      	bne.n	8004fa6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f50:	2200      	movs	r2, #0
 8004f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f88c 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d021      	beq.n	8004fa6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	e853 3f00 	ldrex	r3, [r3]
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f76:	653b      	str	r3, [r7, #80]	; 0x50
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	647b      	str	r3, [r7, #68]	; 0x44
 8004f82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e6      	bne.n	8004f62 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e062      	b.n	800506c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d149      	bne.n	8005048 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f856 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d03c      	beq.n	8005048 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	623b      	str	r3, [r7, #32]
   return(result);
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fec:	633b      	str	r3, [r7, #48]	; 0x30
 8004fee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	64bb      	str	r3, [r7, #72]	; 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005020:	61fa      	str	r2, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	617b      	str	r3, [r7, #20]
   return(result);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e011      	b.n	800506c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3758      	adds	r7, #88	; 0x58
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	e049      	b.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d045      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fc fb11 	bl	80016b4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e048      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d031      	beq.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d110      	bne.n	80050e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2208      	movs	r2, #8
 80050ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f838 	bl	8005142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2208      	movs	r2, #8
 80050d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e029      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d111      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f81e 	bl	8005142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e00f      	b.n	800513a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d0a6      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005142:	b480      	push	{r7}
 8005144:	b095      	sub	sp, #84	; 0x54
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
 800516a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800516e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e6      	bne.n	800514a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	61fb      	str	r3, [r7, #28]
   return(result);
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	64bb      	str	r3, [r7, #72]	; 0x48
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800519c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e5      	bne.n	800517c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d118      	bne.n	80051ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0310 	bic.w	r3, r3, #16
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d6:	61bb      	str	r3, [r7, #24]
 80051d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6979      	ldr	r1, [r7, #20]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	613b      	str	r3, [r7, #16]
   return(result);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e6      	bne.n	80051b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051fe:	bf00      	nop
 8005200:	3754      	adds	r7, #84	; 0x54
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <std>:
 800520c:	2300      	movs	r3, #0
 800520e:	b510      	push	{r4, lr}
 8005210:	4604      	mov	r4, r0
 8005212:	e9c0 3300 	strd	r3, r3, [r0]
 8005216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800521a:	6083      	str	r3, [r0, #8]
 800521c:	8181      	strh	r1, [r0, #12]
 800521e:	6643      	str	r3, [r0, #100]	; 0x64
 8005220:	81c2      	strh	r2, [r0, #14]
 8005222:	6183      	str	r3, [r0, #24]
 8005224:	4619      	mov	r1, r3
 8005226:	2208      	movs	r2, #8
 8005228:	305c      	adds	r0, #92	; 0x5c
 800522a:	f000 f918 	bl	800545e <memset>
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <std+0x58>)
 8005230:	6263      	str	r3, [r4, #36]	; 0x24
 8005232:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <std+0x5c>)
 8005234:	62a3      	str	r3, [r4, #40]	; 0x28
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <std+0x60>)
 8005238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <std+0x64>)
 800523c:	6323      	str	r3, [r4, #48]	; 0x30
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <std+0x68>)
 8005240:	6224      	str	r4, [r4, #32]
 8005242:	429c      	cmp	r4, r3
 8005244:	d006      	beq.n	8005254 <std+0x48>
 8005246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800524a:	4294      	cmp	r4, r2
 800524c:	d002      	beq.n	8005254 <std+0x48>
 800524e:	33d0      	adds	r3, #208	; 0xd0
 8005250:	429c      	cmp	r4, r3
 8005252:	d105      	bne.n	8005260 <std+0x54>
 8005254:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f000 b978 	b.w	8005550 <__retarget_lock_init_recursive>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	080053d9 	.word	0x080053d9
 8005268:	080053fb 	.word	0x080053fb
 800526c:	08005433 	.word	0x08005433
 8005270:	08005457 	.word	0x08005457
 8005274:	200001f0 	.word	0x200001f0

08005278 <stdio_exit_handler>:
 8005278:	4a02      	ldr	r2, [pc, #8]	; (8005284 <stdio_exit_handler+0xc>)
 800527a:	4903      	ldr	r1, [pc, #12]	; (8005288 <stdio_exit_handler+0x10>)
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <stdio_exit_handler+0x14>)
 800527e:	f000 b869 	b.w	8005354 <_fwalk_sglue>
 8005282:	bf00      	nop
 8005284:	20000034 	.word	0x20000034
 8005288:	08006405 	.word	0x08006405
 800528c:	20000040 	.word	0x20000040

08005290 <cleanup_stdio>:
 8005290:	6841      	ldr	r1, [r0, #4]
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <cleanup_stdio+0x34>)
 8005294:	4299      	cmp	r1, r3
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	d001      	beq.n	80052a0 <cleanup_stdio+0x10>
 800529c:	f001 f8b2 	bl	8006404 <_fflush_r>
 80052a0:	68a1      	ldr	r1, [r4, #8]
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <cleanup_stdio+0x38>)
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d002      	beq.n	80052ae <cleanup_stdio+0x1e>
 80052a8:	4620      	mov	r0, r4
 80052aa:	f001 f8ab 	bl	8006404 <_fflush_r>
 80052ae:	68e1      	ldr	r1, [r4, #12]
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <cleanup_stdio+0x3c>)
 80052b2:	4299      	cmp	r1, r3
 80052b4:	d004      	beq.n	80052c0 <cleanup_stdio+0x30>
 80052b6:	4620      	mov	r0, r4
 80052b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052bc:	f001 b8a2 	b.w	8006404 <_fflush_r>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	200001f0 	.word	0x200001f0
 80052c8:	20000258 	.word	0x20000258
 80052cc:	200002c0 	.word	0x200002c0

080052d0 <global_stdio_init.part.0>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <global_stdio_init.part.0+0x30>)
 80052d4:	4c0b      	ldr	r4, [pc, #44]	; (8005304 <global_stdio_init.part.0+0x34>)
 80052d6:	4a0c      	ldr	r2, [pc, #48]	; (8005308 <global_stdio_init.part.0+0x38>)
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	4620      	mov	r0, r4
 80052dc:	2200      	movs	r2, #0
 80052de:	2104      	movs	r1, #4
 80052e0:	f7ff ff94 	bl	800520c <std>
 80052e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052e8:	2201      	movs	r2, #1
 80052ea:	2109      	movs	r1, #9
 80052ec:	f7ff ff8e 	bl	800520c <std>
 80052f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052f4:	2202      	movs	r2, #2
 80052f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fa:	2112      	movs	r1, #18
 80052fc:	f7ff bf86 	b.w	800520c <std>
 8005300:	20000328 	.word	0x20000328
 8005304:	200001f0 	.word	0x200001f0
 8005308:	08005279 	.word	0x08005279

0800530c <__sfp_lock_acquire>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__sfp_lock_acquire+0x8>)
 800530e:	f000 b920 	b.w	8005552 <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	20000331 	.word	0x20000331

08005318 <__sfp_lock_release>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__sfp_lock_release+0x8>)
 800531a:	f000 b91b 	b.w	8005554 <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	20000331 	.word	0x20000331

08005324 <__sinit>:
 8005324:	b510      	push	{r4, lr}
 8005326:	4604      	mov	r4, r0
 8005328:	f7ff fff0 	bl	800530c <__sfp_lock_acquire>
 800532c:	6a23      	ldr	r3, [r4, #32]
 800532e:	b11b      	cbz	r3, 8005338 <__sinit+0x14>
 8005330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005334:	f7ff bff0 	b.w	8005318 <__sfp_lock_release>
 8005338:	4b04      	ldr	r3, [pc, #16]	; (800534c <__sinit+0x28>)
 800533a:	6223      	str	r3, [r4, #32]
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <__sinit+0x2c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f5      	bne.n	8005330 <__sinit+0xc>
 8005344:	f7ff ffc4 	bl	80052d0 <global_stdio_init.part.0>
 8005348:	e7f2      	b.n	8005330 <__sinit+0xc>
 800534a:	bf00      	nop
 800534c:	08005291 	.word	0x08005291
 8005350:	20000328 	.word	0x20000328

08005354 <_fwalk_sglue>:
 8005354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005358:	4607      	mov	r7, r0
 800535a:	4688      	mov	r8, r1
 800535c:	4614      	mov	r4, r2
 800535e:	2600      	movs	r6, #0
 8005360:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005364:	f1b9 0901 	subs.w	r9, r9, #1
 8005368:	d505      	bpl.n	8005376 <_fwalk_sglue+0x22>
 800536a:	6824      	ldr	r4, [r4, #0]
 800536c:	2c00      	cmp	r4, #0
 800536e:	d1f7      	bne.n	8005360 <_fwalk_sglue+0xc>
 8005370:	4630      	mov	r0, r6
 8005372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005376:	89ab      	ldrh	r3, [r5, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d907      	bls.n	800538c <_fwalk_sglue+0x38>
 800537c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005380:	3301      	adds	r3, #1
 8005382:	d003      	beq.n	800538c <_fwalk_sglue+0x38>
 8005384:	4629      	mov	r1, r5
 8005386:	4638      	mov	r0, r7
 8005388:	47c0      	blx	r8
 800538a:	4306      	orrs	r6, r0
 800538c:	3568      	adds	r5, #104	; 0x68
 800538e:	e7e9      	b.n	8005364 <_fwalk_sglue+0x10>

08005390 <iprintf>:
 8005390:	b40f      	push	{r0, r1, r2, r3}
 8005392:	b507      	push	{r0, r1, r2, lr}
 8005394:	4906      	ldr	r1, [pc, #24]	; (80053b0 <iprintf+0x20>)
 8005396:	ab04      	add	r3, sp, #16
 8005398:	6808      	ldr	r0, [r1, #0]
 800539a:	f853 2b04 	ldr.w	r2, [r3], #4
 800539e:	6881      	ldr	r1, [r0, #8]
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	f000 f9fb 	bl	800579c <_vfiprintf_r>
 80053a6:	b003      	add	sp, #12
 80053a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ac:	b004      	add	sp, #16
 80053ae:	4770      	bx	lr
 80053b0:	2000008c 	.word	0x2000008c

080053b4 <iscanf>:
 80053b4:	b40f      	push	{r0, r1, r2, r3}
 80053b6:	b507      	push	{r0, r1, r2, lr}
 80053b8:	4906      	ldr	r1, [pc, #24]	; (80053d4 <iscanf+0x20>)
 80053ba:	ab04      	add	r3, sp, #16
 80053bc:	6808      	ldr	r0, [r1, #0]
 80053be:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c2:	6841      	ldr	r1, [r0, #4]
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	f000 fe35 	bl	8006034 <_vfiscanf_r>
 80053ca:	b003      	add	sp, #12
 80053cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053d0:	b004      	add	sp, #16
 80053d2:	4770      	bx	lr
 80053d4:	2000008c 	.word	0x2000008c

080053d8 <__sread>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	f000 f868 	bl	80054b4 <_read_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	bfab      	itete	ge
 80053e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ea:	89a3      	ldrhlt	r3, [r4, #12]
 80053ec:	181b      	addge	r3, r3, r0
 80053ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053f2:	bfac      	ite	ge
 80053f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053f6:	81a3      	strhlt	r3, [r4, #12]
 80053f8:	bd10      	pop	{r4, pc}

080053fa <__swrite>:
 80053fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	461f      	mov	r7, r3
 8005400:	898b      	ldrh	r3, [r1, #12]
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	4605      	mov	r5, r0
 8005406:	460c      	mov	r4, r1
 8005408:	4616      	mov	r6, r2
 800540a:	d505      	bpl.n	8005418 <__swrite+0x1e>
 800540c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f000 f83c 	bl	8005490 <_lseek_r>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	4632      	mov	r2, r6
 8005426:	463b      	mov	r3, r7
 8005428:	4628      	mov	r0, r5
 800542a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800542e:	f000 b853 	b.w	80054d8 <_write_r>

08005432 <__sseek>:
 8005432:	b510      	push	{r4, lr}
 8005434:	460c      	mov	r4, r1
 8005436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543a:	f000 f829 	bl	8005490 <_lseek_r>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	bf15      	itete	ne
 8005444:	6560      	strne	r0, [r4, #84]	; 0x54
 8005446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800544a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800544e:	81a3      	strheq	r3, [r4, #12]
 8005450:	bf18      	it	ne
 8005452:	81a3      	strhne	r3, [r4, #12]
 8005454:	bd10      	pop	{r4, pc}

08005456 <__sclose>:
 8005456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545a:	f000 b809 	b.w	8005470 <_close_r>

0800545e <memset>:
 800545e:	4402      	add	r2, r0
 8005460:	4603      	mov	r3, r0
 8005462:	4293      	cmp	r3, r2
 8005464:	d100      	bne.n	8005468 <memset+0xa>
 8005466:	4770      	bx	lr
 8005468:	f803 1b01 	strb.w	r1, [r3], #1
 800546c:	e7f9      	b.n	8005462 <memset+0x4>
	...

08005470 <_close_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_close_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fc f80c 	bl	8001498 <_close>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_close_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_close_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	2000032c 	.word	0x2000032c

08005490 <_lseek_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d07      	ldr	r5, [pc, #28]	; (80054b0 <_lseek_r+0x20>)
 8005494:	4604      	mov	r4, r0
 8005496:	4608      	mov	r0, r1
 8005498:	4611      	mov	r1, r2
 800549a:	2200      	movs	r2, #0
 800549c:	602a      	str	r2, [r5, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	f7fc f821 	bl	80014e6 <_lseek>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_lseek_r+0x1e>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_lseek_r+0x1e>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	2000032c 	.word	0x2000032c

080054b4 <_read_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_read_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fb ffa8 	bl	8001418 <_read>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_read_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_read_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	2000032c 	.word	0x2000032c

080054d8 <_write_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_write_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fb ffb4 	bl	8001454 <_write>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_write_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_write_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	2000032c 	.word	0x2000032c

080054fc <__errno>:
 80054fc:	4b01      	ldr	r3, [pc, #4]	; (8005504 <__errno+0x8>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	2000008c 	.word	0x2000008c

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	; (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	; (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	; (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	; (800554c <__libc_init_array+0x44>)
 800551c:	f001 fb7e 	bl	8006c1c <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	08007a60 	.word	0x08007a60
 8005544:	08007a60 	.word	0x08007a60
 8005548:	08007a60 	.word	0x08007a60
 800554c:	08007a64 	.word	0x08007a64

08005550 <__retarget_lock_init_recursive>:
 8005550:	4770      	bx	lr

08005552 <__retarget_lock_acquire_recursive>:
 8005552:	4770      	bx	lr

08005554 <__retarget_lock_release_recursive>:
 8005554:	4770      	bx	lr
	...

08005558 <_free_r>:
 8005558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800555a:	2900      	cmp	r1, #0
 800555c:	d044      	beq.n	80055e8 <_free_r+0x90>
 800555e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005562:	9001      	str	r0, [sp, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	f1a1 0404 	sub.w	r4, r1, #4
 800556a:	bfb8      	it	lt
 800556c:	18e4      	addlt	r4, r4, r3
 800556e:	f000 f8df 	bl	8005730 <__malloc_lock>
 8005572:	4a1e      	ldr	r2, [pc, #120]	; (80055ec <_free_r+0x94>)
 8005574:	9801      	ldr	r0, [sp, #4]
 8005576:	6813      	ldr	r3, [r2, #0]
 8005578:	b933      	cbnz	r3, 8005588 <_free_r+0x30>
 800557a:	6063      	str	r3, [r4, #4]
 800557c:	6014      	str	r4, [r2, #0]
 800557e:	b003      	add	sp, #12
 8005580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005584:	f000 b8da 	b.w	800573c <__malloc_unlock>
 8005588:	42a3      	cmp	r3, r4
 800558a:	d908      	bls.n	800559e <_free_r+0x46>
 800558c:	6825      	ldr	r5, [r4, #0]
 800558e:	1961      	adds	r1, r4, r5
 8005590:	428b      	cmp	r3, r1
 8005592:	bf01      	itttt	eq
 8005594:	6819      	ldreq	r1, [r3, #0]
 8005596:	685b      	ldreq	r3, [r3, #4]
 8005598:	1949      	addeq	r1, r1, r5
 800559a:	6021      	streq	r1, [r4, #0]
 800559c:	e7ed      	b.n	800557a <_free_r+0x22>
 800559e:	461a      	mov	r2, r3
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	b10b      	cbz	r3, 80055a8 <_free_r+0x50>
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	d9fa      	bls.n	800559e <_free_r+0x46>
 80055a8:	6811      	ldr	r1, [r2, #0]
 80055aa:	1855      	adds	r5, r2, r1
 80055ac:	42a5      	cmp	r5, r4
 80055ae:	d10b      	bne.n	80055c8 <_free_r+0x70>
 80055b0:	6824      	ldr	r4, [r4, #0]
 80055b2:	4421      	add	r1, r4
 80055b4:	1854      	adds	r4, r2, r1
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	6011      	str	r1, [r2, #0]
 80055ba:	d1e0      	bne.n	800557e <_free_r+0x26>
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	6053      	str	r3, [r2, #4]
 80055c2:	440c      	add	r4, r1
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	e7da      	b.n	800557e <_free_r+0x26>
 80055c8:	d902      	bls.n	80055d0 <_free_r+0x78>
 80055ca:	230c      	movs	r3, #12
 80055cc:	6003      	str	r3, [r0, #0]
 80055ce:	e7d6      	b.n	800557e <_free_r+0x26>
 80055d0:	6825      	ldr	r5, [r4, #0]
 80055d2:	1961      	adds	r1, r4, r5
 80055d4:	428b      	cmp	r3, r1
 80055d6:	bf04      	itt	eq
 80055d8:	6819      	ldreq	r1, [r3, #0]
 80055da:	685b      	ldreq	r3, [r3, #4]
 80055dc:	6063      	str	r3, [r4, #4]
 80055de:	bf04      	itt	eq
 80055e0:	1949      	addeq	r1, r1, r5
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	6054      	str	r4, [r2, #4]
 80055e6:	e7ca      	b.n	800557e <_free_r+0x26>
 80055e8:	b003      	add	sp, #12
 80055ea:	bd30      	pop	{r4, r5, pc}
 80055ec:	20000334 	.word	0x20000334

080055f0 <sbrk_aligned>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	4e0e      	ldr	r6, [pc, #56]	; (800562c <sbrk_aligned+0x3c>)
 80055f4:	460c      	mov	r4, r1
 80055f6:	6831      	ldr	r1, [r6, #0]
 80055f8:	4605      	mov	r5, r0
 80055fa:	b911      	cbnz	r1, 8005602 <sbrk_aligned+0x12>
 80055fc:	f001 f93c 	bl	8006878 <_sbrk_r>
 8005600:	6030      	str	r0, [r6, #0]
 8005602:	4621      	mov	r1, r4
 8005604:	4628      	mov	r0, r5
 8005606:	f001 f937 	bl	8006878 <_sbrk_r>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	d00a      	beq.n	8005624 <sbrk_aligned+0x34>
 800560e:	1cc4      	adds	r4, r0, #3
 8005610:	f024 0403 	bic.w	r4, r4, #3
 8005614:	42a0      	cmp	r0, r4
 8005616:	d007      	beq.n	8005628 <sbrk_aligned+0x38>
 8005618:	1a21      	subs	r1, r4, r0
 800561a:	4628      	mov	r0, r5
 800561c:	f001 f92c 	bl	8006878 <_sbrk_r>
 8005620:	3001      	adds	r0, #1
 8005622:	d101      	bne.n	8005628 <sbrk_aligned+0x38>
 8005624:	f04f 34ff 	mov.w	r4, #4294967295
 8005628:	4620      	mov	r0, r4
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	20000338 	.word	0x20000338

08005630 <_malloc_r>:
 8005630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005634:	1ccd      	adds	r5, r1, #3
 8005636:	f025 0503 	bic.w	r5, r5, #3
 800563a:	3508      	adds	r5, #8
 800563c:	2d0c      	cmp	r5, #12
 800563e:	bf38      	it	cc
 8005640:	250c      	movcc	r5, #12
 8005642:	2d00      	cmp	r5, #0
 8005644:	4607      	mov	r7, r0
 8005646:	db01      	blt.n	800564c <_malloc_r+0x1c>
 8005648:	42a9      	cmp	r1, r5
 800564a:	d905      	bls.n	8005658 <_malloc_r+0x28>
 800564c:	230c      	movs	r3, #12
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	2600      	movs	r6, #0
 8005652:	4630      	mov	r0, r6
 8005654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005658:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800572c <_malloc_r+0xfc>
 800565c:	f000 f868 	bl	8005730 <__malloc_lock>
 8005660:	f8d8 3000 	ldr.w	r3, [r8]
 8005664:	461c      	mov	r4, r3
 8005666:	bb5c      	cbnz	r4, 80056c0 <_malloc_r+0x90>
 8005668:	4629      	mov	r1, r5
 800566a:	4638      	mov	r0, r7
 800566c:	f7ff ffc0 	bl	80055f0 <sbrk_aligned>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	4604      	mov	r4, r0
 8005674:	d155      	bne.n	8005722 <_malloc_r+0xf2>
 8005676:	f8d8 4000 	ldr.w	r4, [r8]
 800567a:	4626      	mov	r6, r4
 800567c:	2e00      	cmp	r6, #0
 800567e:	d145      	bne.n	800570c <_malloc_r+0xdc>
 8005680:	2c00      	cmp	r4, #0
 8005682:	d048      	beq.n	8005716 <_malloc_r+0xe6>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	4631      	mov	r1, r6
 8005688:	4638      	mov	r0, r7
 800568a:	eb04 0903 	add.w	r9, r4, r3
 800568e:	f001 f8f3 	bl	8006878 <_sbrk_r>
 8005692:	4581      	cmp	r9, r0
 8005694:	d13f      	bne.n	8005716 <_malloc_r+0xe6>
 8005696:	6821      	ldr	r1, [r4, #0]
 8005698:	1a6d      	subs	r5, r5, r1
 800569a:	4629      	mov	r1, r5
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff ffa7 	bl	80055f0 <sbrk_aligned>
 80056a2:	3001      	adds	r0, #1
 80056a4:	d037      	beq.n	8005716 <_malloc_r+0xe6>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	442b      	add	r3, r5
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	f8d8 3000 	ldr.w	r3, [r8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d038      	beq.n	8005726 <_malloc_r+0xf6>
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	42a2      	cmp	r2, r4
 80056b8:	d12b      	bne.n	8005712 <_malloc_r+0xe2>
 80056ba:	2200      	movs	r2, #0
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	e00f      	b.n	80056e0 <_malloc_r+0xb0>
 80056c0:	6822      	ldr	r2, [r4, #0]
 80056c2:	1b52      	subs	r2, r2, r5
 80056c4:	d41f      	bmi.n	8005706 <_malloc_r+0xd6>
 80056c6:	2a0b      	cmp	r2, #11
 80056c8:	d917      	bls.n	80056fa <_malloc_r+0xca>
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	6025      	str	r5, [r4, #0]
 80056d0:	bf18      	it	ne
 80056d2:	6059      	strne	r1, [r3, #4]
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	bf08      	it	eq
 80056d8:	f8c8 1000 	streq.w	r1, [r8]
 80056dc:	5162      	str	r2, [r4, r5]
 80056de:	604b      	str	r3, [r1, #4]
 80056e0:	4638      	mov	r0, r7
 80056e2:	f104 060b 	add.w	r6, r4, #11
 80056e6:	f000 f829 	bl	800573c <__malloc_unlock>
 80056ea:	f026 0607 	bic.w	r6, r6, #7
 80056ee:	1d23      	adds	r3, r4, #4
 80056f0:	1af2      	subs	r2, r6, r3
 80056f2:	d0ae      	beq.n	8005652 <_malloc_r+0x22>
 80056f4:	1b9b      	subs	r3, r3, r6
 80056f6:	50a3      	str	r3, [r4, r2]
 80056f8:	e7ab      	b.n	8005652 <_malloc_r+0x22>
 80056fa:	42a3      	cmp	r3, r4
 80056fc:	6862      	ldr	r2, [r4, #4]
 80056fe:	d1dd      	bne.n	80056bc <_malloc_r+0x8c>
 8005700:	f8c8 2000 	str.w	r2, [r8]
 8005704:	e7ec      	b.n	80056e0 <_malloc_r+0xb0>
 8005706:	4623      	mov	r3, r4
 8005708:	6864      	ldr	r4, [r4, #4]
 800570a:	e7ac      	b.n	8005666 <_malloc_r+0x36>
 800570c:	4634      	mov	r4, r6
 800570e:	6876      	ldr	r6, [r6, #4]
 8005710:	e7b4      	b.n	800567c <_malloc_r+0x4c>
 8005712:	4613      	mov	r3, r2
 8005714:	e7cc      	b.n	80056b0 <_malloc_r+0x80>
 8005716:	230c      	movs	r3, #12
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4638      	mov	r0, r7
 800571c:	f000 f80e 	bl	800573c <__malloc_unlock>
 8005720:	e797      	b.n	8005652 <_malloc_r+0x22>
 8005722:	6025      	str	r5, [r4, #0]
 8005724:	e7dc      	b.n	80056e0 <_malloc_r+0xb0>
 8005726:	605b      	str	r3, [r3, #4]
 8005728:	deff      	udf	#255	; 0xff
 800572a:	bf00      	nop
 800572c:	20000334 	.word	0x20000334

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_lock+0x8>)
 8005732:	f7ff bf0e 	b.w	8005552 <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	20000330 	.word	0x20000330

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_unlock+0x8>)
 800573e:	f7ff bf09 	b.w	8005554 <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	20000330 	.word	0x20000330

08005748 <__sfputc_r>:
 8005748:	6893      	ldr	r3, [r2, #8]
 800574a:	3b01      	subs	r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	b410      	push	{r4}
 8005750:	6093      	str	r3, [r2, #8]
 8005752:	da08      	bge.n	8005766 <__sfputc_r+0x1e>
 8005754:	6994      	ldr	r4, [r2, #24]
 8005756:	42a3      	cmp	r3, r4
 8005758:	db01      	blt.n	800575e <__sfputc_r+0x16>
 800575a:	290a      	cmp	r1, #10
 800575c:	d103      	bne.n	8005766 <__sfputc_r+0x1e>
 800575e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005762:	f000 bff4 	b.w	800674e <__swbuf_r>
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	1c58      	adds	r0, r3, #1
 800576a:	6010      	str	r0, [r2, #0]
 800576c:	7019      	strb	r1, [r3, #0]
 800576e:	4608      	mov	r0, r1
 8005770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005774:	4770      	bx	lr

08005776 <__sfputs_r>:
 8005776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	4614      	mov	r4, r2
 800577e:	18d5      	adds	r5, r2, r3
 8005780:	42ac      	cmp	r4, r5
 8005782:	d101      	bne.n	8005788 <__sfputs_r+0x12>
 8005784:	2000      	movs	r0, #0
 8005786:	e007      	b.n	8005798 <__sfputs_r+0x22>
 8005788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800578c:	463a      	mov	r2, r7
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff ffda 	bl	8005748 <__sfputc_r>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d1f3      	bne.n	8005780 <__sfputs_r+0xa>
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800579c <_vfiprintf_r>:
 800579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a0:	460d      	mov	r5, r1
 80057a2:	b09d      	sub	sp, #116	; 0x74
 80057a4:	4614      	mov	r4, r2
 80057a6:	4698      	mov	r8, r3
 80057a8:	4606      	mov	r6, r0
 80057aa:	b118      	cbz	r0, 80057b4 <_vfiprintf_r+0x18>
 80057ac:	6a03      	ldr	r3, [r0, #32]
 80057ae:	b90b      	cbnz	r3, 80057b4 <_vfiprintf_r+0x18>
 80057b0:	f7ff fdb8 	bl	8005324 <__sinit>
 80057b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_vfiprintf_r+0x2a>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_vfiprintf_r+0x2a>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f7ff fec6 	bl	8005552 <__retarget_lock_acquire_recursive>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	d501      	bpl.n	80057d0 <_vfiprintf_r+0x34>
 80057cc:	692b      	ldr	r3, [r5, #16]
 80057ce:	b99b      	cbnz	r3, 80057f8 <_vfiprintf_r+0x5c>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 fff8 	bl	80067c8 <__swsetup_r>
 80057d8:	b170      	cbz	r0, 80057f8 <_vfiprintf_r+0x5c>
 80057da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057dc:	07dc      	lsls	r4, r3, #31
 80057de:	d504      	bpl.n	80057ea <_vfiprintf_r+0x4e>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b01d      	add	sp, #116	; 0x74
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	0598      	lsls	r0, r3, #22
 80057ee:	d4f7      	bmi.n	80057e0 <_vfiprintf_r+0x44>
 80057f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057f2:	f7ff feaf 	bl	8005554 <__retarget_lock_release_recursive>
 80057f6:	e7f3      	b.n	80057e0 <_vfiprintf_r+0x44>
 80057f8:	2300      	movs	r3, #0
 80057fa:	9309      	str	r3, [sp, #36]	; 0x24
 80057fc:	2320      	movs	r3, #32
 80057fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005802:	f8cd 800c 	str.w	r8, [sp, #12]
 8005806:	2330      	movs	r3, #48	; 0x30
 8005808:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80059bc <_vfiprintf_r+0x220>
 800580c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005810:	f04f 0901 	mov.w	r9, #1
 8005814:	4623      	mov	r3, r4
 8005816:	469a      	mov	sl, r3
 8005818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800581c:	b10a      	cbz	r2, 8005822 <_vfiprintf_r+0x86>
 800581e:	2a25      	cmp	r2, #37	; 0x25
 8005820:	d1f9      	bne.n	8005816 <_vfiprintf_r+0x7a>
 8005822:	ebba 0b04 	subs.w	fp, sl, r4
 8005826:	d00b      	beq.n	8005840 <_vfiprintf_r+0xa4>
 8005828:	465b      	mov	r3, fp
 800582a:	4622      	mov	r2, r4
 800582c:	4629      	mov	r1, r5
 800582e:	4630      	mov	r0, r6
 8005830:	f7ff ffa1 	bl	8005776 <__sfputs_r>
 8005834:	3001      	adds	r0, #1
 8005836:	f000 80a9 	beq.w	800598c <_vfiprintf_r+0x1f0>
 800583a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800583c:	445a      	add	r2, fp
 800583e:	9209      	str	r2, [sp, #36]	; 0x24
 8005840:	f89a 3000 	ldrb.w	r3, [sl]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a1 	beq.w	800598c <_vfiprintf_r+0x1f0>
 800584a:	2300      	movs	r3, #0
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005854:	f10a 0a01 	add.w	sl, sl, #1
 8005858:	9304      	str	r3, [sp, #16]
 800585a:	9307      	str	r3, [sp, #28]
 800585c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005860:	931a      	str	r3, [sp, #104]	; 0x68
 8005862:	4654      	mov	r4, sl
 8005864:	2205      	movs	r2, #5
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4854      	ldr	r0, [pc, #336]	; (80059bc <_vfiprintf_r+0x220>)
 800586c:	f7fa fcb0 	bl	80001d0 <memchr>
 8005870:	9a04      	ldr	r2, [sp, #16]
 8005872:	b9d8      	cbnz	r0, 80058ac <_vfiprintf_r+0x110>
 8005874:	06d1      	lsls	r1, r2, #27
 8005876:	bf44      	itt	mi
 8005878:	2320      	movmi	r3, #32
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587e:	0713      	lsls	r3, r2, #28
 8005880:	bf44      	itt	mi
 8005882:	232b      	movmi	r3, #43	; 0x2b
 8005884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005888:	f89a 3000 	ldrb.w	r3, [sl]
 800588c:	2b2a      	cmp	r3, #42	; 0x2a
 800588e:	d015      	beq.n	80058bc <_vfiprintf_r+0x120>
 8005890:	9a07      	ldr	r2, [sp, #28]
 8005892:	4654      	mov	r4, sl
 8005894:	2000      	movs	r0, #0
 8005896:	f04f 0c0a 	mov.w	ip, #10
 800589a:	4621      	mov	r1, r4
 800589c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058a0:	3b30      	subs	r3, #48	; 0x30
 80058a2:	2b09      	cmp	r3, #9
 80058a4:	d94d      	bls.n	8005942 <_vfiprintf_r+0x1a6>
 80058a6:	b1b0      	cbz	r0, 80058d6 <_vfiprintf_r+0x13a>
 80058a8:	9207      	str	r2, [sp, #28]
 80058aa:	e014      	b.n	80058d6 <_vfiprintf_r+0x13a>
 80058ac:	eba0 0308 	sub.w	r3, r0, r8
 80058b0:	fa09 f303 	lsl.w	r3, r9, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	9304      	str	r3, [sp, #16]
 80058b8:	46a2      	mov	sl, r4
 80058ba:	e7d2      	b.n	8005862 <_vfiprintf_r+0xc6>
 80058bc:	9b03      	ldr	r3, [sp, #12]
 80058be:	1d19      	adds	r1, r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	9103      	str	r1, [sp, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbb      	ittet	lt
 80058c8:	425b      	neglt	r3, r3
 80058ca:	f042 0202 	orrlt.w	r2, r2, #2
 80058ce:	9307      	strge	r3, [sp, #28]
 80058d0:	9307      	strlt	r3, [sp, #28]
 80058d2:	bfb8      	it	lt
 80058d4:	9204      	strlt	r2, [sp, #16]
 80058d6:	7823      	ldrb	r3, [r4, #0]
 80058d8:	2b2e      	cmp	r3, #46	; 0x2e
 80058da:	d10c      	bne.n	80058f6 <_vfiprintf_r+0x15a>
 80058dc:	7863      	ldrb	r3, [r4, #1]
 80058de:	2b2a      	cmp	r3, #42	; 0x2a
 80058e0:	d134      	bne.n	800594c <_vfiprintf_r+0x1b0>
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	1d1a      	adds	r2, r3, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	9203      	str	r2, [sp, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	bfb8      	it	lt
 80058ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80058f2:	3402      	adds	r4, #2
 80058f4:	9305      	str	r3, [sp, #20]
 80058f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80059cc <_vfiprintf_r+0x230>
 80058fa:	7821      	ldrb	r1, [r4, #0]
 80058fc:	2203      	movs	r2, #3
 80058fe:	4650      	mov	r0, sl
 8005900:	f7fa fc66 	bl	80001d0 <memchr>
 8005904:	b138      	cbz	r0, 8005916 <_vfiprintf_r+0x17a>
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	eba0 000a 	sub.w	r0, r0, sl
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	4082      	lsls	r2, r0
 8005910:	4313      	orrs	r3, r2
 8005912:	3401      	adds	r4, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591a:	4829      	ldr	r0, [pc, #164]	; (80059c0 <_vfiprintf_r+0x224>)
 800591c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005920:	2206      	movs	r2, #6
 8005922:	f7fa fc55 	bl	80001d0 <memchr>
 8005926:	2800      	cmp	r0, #0
 8005928:	d03f      	beq.n	80059aa <_vfiprintf_r+0x20e>
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <_vfiprintf_r+0x228>)
 800592c:	bb1b      	cbnz	r3, 8005976 <_vfiprintf_r+0x1da>
 800592e:	9b03      	ldr	r3, [sp, #12]
 8005930:	3307      	adds	r3, #7
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	3308      	adds	r3, #8
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593c:	443b      	add	r3, r7
 800593e:	9309      	str	r3, [sp, #36]	; 0x24
 8005940:	e768      	b.n	8005814 <_vfiprintf_r+0x78>
 8005942:	fb0c 3202 	mla	r2, ip, r2, r3
 8005946:	460c      	mov	r4, r1
 8005948:	2001      	movs	r0, #1
 800594a:	e7a6      	b.n	800589a <_vfiprintf_r+0xfe>
 800594c:	2300      	movs	r3, #0
 800594e:	3401      	adds	r4, #1
 8005950:	9305      	str	r3, [sp, #20]
 8005952:	4619      	mov	r1, r3
 8005954:	f04f 0c0a 	mov.w	ip, #10
 8005958:	4620      	mov	r0, r4
 800595a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800595e:	3a30      	subs	r2, #48	; 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d903      	bls.n	800596c <_vfiprintf_r+0x1d0>
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0c6      	beq.n	80058f6 <_vfiprintf_r+0x15a>
 8005968:	9105      	str	r1, [sp, #20]
 800596a:	e7c4      	b.n	80058f6 <_vfiprintf_r+0x15a>
 800596c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005970:	4604      	mov	r4, r0
 8005972:	2301      	movs	r3, #1
 8005974:	e7f0      	b.n	8005958 <_vfiprintf_r+0x1bc>
 8005976:	ab03      	add	r3, sp, #12
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	462a      	mov	r2, r5
 800597c:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <_vfiprintf_r+0x22c>)
 800597e:	a904      	add	r1, sp, #16
 8005980:	4630      	mov	r0, r6
 8005982:	f3af 8000 	nop.w
 8005986:	4607      	mov	r7, r0
 8005988:	1c78      	adds	r0, r7, #1
 800598a:	d1d6      	bne.n	800593a <_vfiprintf_r+0x19e>
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x202>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x202>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7ff fddb 	bl	8005554 <__retarget_lock_release_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	065b      	lsls	r3, r3, #25
 80059a2:	f53f af1d 	bmi.w	80057e0 <_vfiprintf_r+0x44>
 80059a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a8:	e71c      	b.n	80057e4 <_vfiprintf_r+0x48>
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <_vfiprintf_r+0x22c>)
 80059b2:	a904      	add	r1, sp, #16
 80059b4:	4630      	mov	r0, r6
 80059b6:	f000 f879 	bl	8005aac <_printf_i>
 80059ba:	e7e4      	b.n	8005986 <_vfiprintf_r+0x1ea>
 80059bc:	08007908 	.word	0x08007908
 80059c0:	08007912 	.word	0x08007912
 80059c4:	00000000 	.word	0x00000000
 80059c8:	08005777 	.word	0x08005777
 80059cc:	0800790e 	.word	0x0800790e

080059d0 <_printf_common>:
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	4616      	mov	r6, r2
 80059d6:	4699      	mov	r9, r3
 80059d8:	688a      	ldr	r2, [r1, #8]
 80059da:	690b      	ldr	r3, [r1, #16]
 80059dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	bfb8      	it	lt
 80059e4:	4613      	movlt	r3, r2
 80059e6:	6033      	str	r3, [r6, #0]
 80059e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ec:	4607      	mov	r7, r0
 80059ee:	460c      	mov	r4, r1
 80059f0:	b10a      	cbz	r2, 80059f6 <_printf_common+0x26>
 80059f2:	3301      	adds	r3, #1
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	0699      	lsls	r1, r3, #26
 80059fa:	bf42      	ittt	mi
 80059fc:	6833      	ldrmi	r3, [r6, #0]
 80059fe:	3302      	addmi	r3, #2
 8005a00:	6033      	strmi	r3, [r6, #0]
 8005a02:	6825      	ldr	r5, [r4, #0]
 8005a04:	f015 0506 	ands.w	r5, r5, #6
 8005a08:	d106      	bne.n	8005a18 <_printf_common+0x48>
 8005a0a:	f104 0a19 	add.w	sl, r4, #25
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	6832      	ldr	r2, [r6, #0]
 8005a12:	1a9b      	subs	r3, r3, r2
 8005a14:	42ab      	cmp	r3, r5
 8005a16:	dc26      	bgt.n	8005a66 <_printf_common+0x96>
 8005a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a1c:	1e13      	subs	r3, r2, #0
 8005a1e:	6822      	ldr	r2, [r4, #0]
 8005a20:	bf18      	it	ne
 8005a22:	2301      	movne	r3, #1
 8005a24:	0692      	lsls	r2, r2, #26
 8005a26:	d42b      	bmi.n	8005a80 <_printf_common+0xb0>
 8005a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	4638      	mov	r0, r7
 8005a30:	47c0      	blx	r8
 8005a32:	3001      	adds	r0, #1
 8005a34:	d01e      	beq.n	8005a74 <_printf_common+0xa4>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	6922      	ldr	r2, [r4, #16]
 8005a3a:	f003 0306 	and.w	r3, r3, #6
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf02      	ittt	eq
 8005a42:	68e5      	ldreq	r5, [r4, #12]
 8005a44:	6833      	ldreq	r3, [r6, #0]
 8005a46:	1aed      	subeq	r5, r5, r3
 8005a48:	68a3      	ldr	r3, [r4, #8]
 8005a4a:	bf0c      	ite	eq
 8005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a50:	2500      	movne	r5, #0
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bfc4      	itt	gt
 8005a56:	1a9b      	subgt	r3, r3, r2
 8005a58:	18ed      	addgt	r5, r5, r3
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	341a      	adds	r4, #26
 8005a5e:	42b5      	cmp	r5, r6
 8005a60:	d11a      	bne.n	8005a98 <_printf_common+0xc8>
 8005a62:	2000      	movs	r0, #0
 8005a64:	e008      	b.n	8005a78 <_printf_common+0xa8>
 8005a66:	2301      	movs	r3, #1
 8005a68:	4652      	mov	r2, sl
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	47c0      	blx	r8
 8005a70:	3001      	adds	r0, #1
 8005a72:	d103      	bne.n	8005a7c <_printf_common+0xac>
 8005a74:	f04f 30ff 	mov.w	r0, #4294967295
 8005a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	e7c6      	b.n	8005a0e <_printf_common+0x3e>
 8005a80:	18e1      	adds	r1, r4, r3
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	2030      	movs	r0, #48	; 0x30
 8005a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a8a:	4422      	add	r2, r4
 8005a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a94:	3302      	adds	r3, #2
 8005a96:	e7c7      	b.n	8005a28 <_printf_common+0x58>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4622      	mov	r2, r4
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	47c0      	blx	r8
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0e6      	beq.n	8005a74 <_printf_common+0xa4>
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	e7d9      	b.n	8005a5e <_printf_common+0x8e>
	...

08005aac <_printf_i>:
 8005aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab0:	7e0f      	ldrb	r7, [r1, #24]
 8005ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ab4:	2f78      	cmp	r7, #120	; 0x78
 8005ab6:	4691      	mov	r9, r2
 8005ab8:	4680      	mov	r8, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	469a      	mov	sl, r3
 8005abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ac2:	d807      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ac4:	2f62      	cmp	r7, #98	; 0x62
 8005ac6:	d80a      	bhi.n	8005ade <_printf_i+0x32>
 8005ac8:	2f00      	cmp	r7, #0
 8005aca:	f000 80d4 	beq.w	8005c76 <_printf_i+0x1ca>
 8005ace:	2f58      	cmp	r7, #88	; 0x58
 8005ad0:	f000 80c0 	beq.w	8005c54 <_printf_i+0x1a8>
 8005ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005adc:	e03a      	b.n	8005b54 <_printf_i+0xa8>
 8005ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ae2:	2b15      	cmp	r3, #21
 8005ae4:	d8f6      	bhi.n	8005ad4 <_printf_i+0x28>
 8005ae6:	a101      	add	r1, pc, #4	; (adr r1, 8005aec <_printf_i+0x40>)
 8005ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aec:	08005b45 	.word	0x08005b45
 8005af0:	08005b59 	.word	0x08005b59
 8005af4:	08005ad5 	.word	0x08005ad5
 8005af8:	08005ad5 	.word	0x08005ad5
 8005afc:	08005ad5 	.word	0x08005ad5
 8005b00:	08005ad5 	.word	0x08005ad5
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005ad5 	.word	0x08005ad5
 8005b0c:	08005ad5 	.word	0x08005ad5
 8005b10:	08005ad5 	.word	0x08005ad5
 8005b14:	08005ad5 	.word	0x08005ad5
 8005b18:	08005c5d 	.word	0x08005c5d
 8005b1c:	08005b85 	.word	0x08005b85
 8005b20:	08005c17 	.word	0x08005c17
 8005b24:	08005ad5 	.word	0x08005ad5
 8005b28:	08005ad5 	.word	0x08005ad5
 8005b2c:	08005c7f 	.word	0x08005c7f
 8005b30:	08005ad5 	.word	0x08005ad5
 8005b34:	08005b85 	.word	0x08005b85
 8005b38:	08005ad5 	.word	0x08005ad5
 8005b3c:	08005ad5 	.word	0x08005ad5
 8005b40:	08005c1f 	.word	0x08005c1f
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	1d1a      	adds	r2, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b54:	2301      	movs	r3, #1
 8005b56:	e09f      	b.n	8005c98 <_printf_i+0x1ec>
 8005b58:	6820      	ldr	r0, [r4, #0]
 8005b5a:	682b      	ldr	r3, [r5, #0]
 8005b5c:	0607      	lsls	r7, r0, #24
 8005b5e:	f103 0104 	add.w	r1, r3, #4
 8005b62:	6029      	str	r1, [r5, #0]
 8005b64:	d501      	bpl.n	8005b6a <_printf_i+0xbe>
 8005b66:	681e      	ldr	r6, [r3, #0]
 8005b68:	e003      	b.n	8005b72 <_printf_i+0xc6>
 8005b6a:	0646      	lsls	r6, r0, #25
 8005b6c:	d5fb      	bpl.n	8005b66 <_printf_i+0xba>
 8005b6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b72:	2e00      	cmp	r6, #0
 8005b74:	da03      	bge.n	8005b7e <_printf_i+0xd2>
 8005b76:	232d      	movs	r3, #45	; 0x2d
 8005b78:	4276      	negs	r6, r6
 8005b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7e:	485a      	ldr	r0, [pc, #360]	; (8005ce8 <_printf_i+0x23c>)
 8005b80:	230a      	movs	r3, #10
 8005b82:	e012      	b.n	8005baa <_printf_i+0xfe>
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	6820      	ldr	r0, [r4, #0]
 8005b88:	1d19      	adds	r1, r3, #4
 8005b8a:	6029      	str	r1, [r5, #0]
 8005b8c:	0605      	lsls	r5, r0, #24
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0xe8>
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0xee>
 8005b94:	0641      	lsls	r1, r0, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0xe4>
 8005b98:	881e      	ldrh	r6, [r3, #0]
 8005b9a:	4853      	ldr	r0, [pc, #332]	; (8005ce8 <_printf_i+0x23c>)
 8005b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2308      	moveq	r3, #8
 8005ba2:	230a      	movne	r3, #10
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005baa:	6865      	ldr	r5, [r4, #4]
 8005bac:	60a5      	str	r5, [r4, #8]
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	bfa2      	ittt	ge
 8005bb2:	6821      	ldrge	r1, [r4, #0]
 8005bb4:	f021 0104 	bicge.w	r1, r1, #4
 8005bb8:	6021      	strge	r1, [r4, #0]
 8005bba:	b90e      	cbnz	r6, 8005bc0 <_printf_i+0x114>
 8005bbc:	2d00      	cmp	r5, #0
 8005bbe:	d04b      	beq.n	8005c58 <_printf_i+0x1ac>
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8005bca:	5dc7      	ldrb	r7, [r0, r7]
 8005bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bd0:	4637      	mov	r7, r6
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	460e      	mov	r6, r1
 8005bd6:	d9f4      	bls.n	8005bc2 <_printf_i+0x116>
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10b      	bne.n	8005bf4 <_printf_i+0x148>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07de      	lsls	r6, r3, #31
 8005be0:	d508      	bpl.n	8005bf4 <_printf_i+0x148>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bfde      	ittt	le
 8005bea:	2330      	movle	r3, #48	; 0x30
 8005bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bf4:	1b52      	subs	r2, r2, r5
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	f8cd a000 	str.w	sl, [sp]
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	aa03      	add	r2, sp, #12
 8005c00:	4621      	mov	r1, r4
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7ff fee4 	bl	80059d0 <_printf_common>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d14a      	bne.n	8005ca2 <_printf_i+0x1f6>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f043 0320 	orr.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	4833      	ldr	r0, [pc, #204]	; (8005cec <_printf_i+0x240>)
 8005c20:	2778      	movs	r7, #120	; 0x78
 8005c22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	061f      	lsls	r7, r3, #24
 8005c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c30:	d402      	bmi.n	8005c38 <_printf_i+0x18c>
 8005c32:	065f      	lsls	r7, r3, #25
 8005c34:	bf48      	it	mi
 8005c36:	b2b6      	uxthmi	r6, r6
 8005c38:	07df      	lsls	r7, r3, #31
 8005c3a:	bf48      	it	mi
 8005c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c40:	6029      	str	r1, [r5, #0]
 8005c42:	bf48      	it	mi
 8005c44:	6023      	strmi	r3, [r4, #0]
 8005c46:	b91e      	cbnz	r6, 8005c50 <_printf_i+0x1a4>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	f023 0320 	bic.w	r3, r3, #32
 8005c4e:	6023      	str	r3, [r4, #0]
 8005c50:	2310      	movs	r3, #16
 8005c52:	e7a7      	b.n	8005ba4 <_printf_i+0xf8>
 8005c54:	4824      	ldr	r0, [pc, #144]	; (8005ce8 <_printf_i+0x23c>)
 8005c56:	e7e4      	b.n	8005c22 <_printf_i+0x176>
 8005c58:	4615      	mov	r5, r2
 8005c5a:	e7bd      	b.n	8005bd8 <_printf_i+0x12c>
 8005c5c:	682b      	ldr	r3, [r5, #0]
 8005c5e:	6826      	ldr	r6, [r4, #0]
 8005c60:	6961      	ldr	r1, [r4, #20]
 8005c62:	1d18      	adds	r0, r3, #4
 8005c64:	6028      	str	r0, [r5, #0]
 8005c66:	0635      	lsls	r5, r6, #24
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	d501      	bpl.n	8005c70 <_printf_i+0x1c4>
 8005c6c:	6019      	str	r1, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <_printf_i+0x1ca>
 8005c70:	0670      	lsls	r0, r6, #25
 8005c72:	d5fb      	bpl.n	8005c6c <_printf_i+0x1c0>
 8005c74:	8019      	strh	r1, [r3, #0]
 8005c76:	2300      	movs	r3, #0
 8005c78:	6123      	str	r3, [r4, #16]
 8005c7a:	4615      	mov	r5, r2
 8005c7c:	e7bc      	b.n	8005bf8 <_printf_i+0x14c>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	1d1a      	adds	r2, r3, #4
 8005c82:	602a      	str	r2, [r5, #0]
 8005c84:	681d      	ldr	r5, [r3, #0]
 8005c86:	6862      	ldr	r2, [r4, #4]
 8005c88:	2100      	movs	r1, #0
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7fa faa0 	bl	80001d0 <memchr>
 8005c90:	b108      	cbz	r0, 8005c96 <_printf_i+0x1ea>
 8005c92:	1b40      	subs	r0, r0, r5
 8005c94:	6060      	str	r0, [r4, #4]
 8005c96:	6863      	ldr	r3, [r4, #4]
 8005c98:	6123      	str	r3, [r4, #16]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca0:	e7aa      	b.n	8005bf8 <_printf_i+0x14c>
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	4640      	mov	r0, r8
 8005caa:	47d0      	blx	sl
 8005cac:	3001      	adds	r0, #1
 8005cae:	d0ad      	beq.n	8005c0c <_printf_i+0x160>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	079b      	lsls	r3, r3, #30
 8005cb4:	d413      	bmi.n	8005cde <_printf_i+0x232>
 8005cb6:	68e0      	ldr	r0, [r4, #12]
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	4298      	cmp	r0, r3
 8005cbc:	bfb8      	it	lt
 8005cbe:	4618      	movlt	r0, r3
 8005cc0:	e7a6      	b.n	8005c10 <_printf_i+0x164>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4640      	mov	r0, r8
 8005cca:	47d0      	blx	sl
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d09d      	beq.n	8005c0c <_printf_i+0x160>
 8005cd0:	3501      	adds	r5, #1
 8005cd2:	68e3      	ldr	r3, [r4, #12]
 8005cd4:	9903      	ldr	r1, [sp, #12]
 8005cd6:	1a5b      	subs	r3, r3, r1
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	dcf2      	bgt.n	8005cc2 <_printf_i+0x216>
 8005cdc:	e7eb      	b.n	8005cb6 <_printf_i+0x20a>
 8005cde:	2500      	movs	r5, #0
 8005ce0:	f104 0619 	add.w	r6, r4, #25
 8005ce4:	e7f5      	b.n	8005cd2 <_printf_i+0x226>
 8005ce6:	bf00      	nop
 8005ce8:	08007919 	.word	0x08007919
 8005cec:	0800792a 	.word	0x0800792a

08005cf0 <__svfiscanf_r>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005cf8:	07df      	lsls	r7, r3, #31
 8005cfa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	4692      	mov	sl, r2
 8005d04:	d405      	bmi.n	8005d12 <__svfiscanf_r+0x22>
 8005d06:	898b      	ldrh	r3, [r1, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d402      	bmi.n	8005d12 <__svfiscanf_r+0x22>
 8005d0c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8005d0e:	f7ff fc20 	bl	8005552 <__retarget_lock_acquire_recursive>
 8005d12:	2300      	movs	r3, #0
 8005d14:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8005d18:	4baa      	ldr	r3, [pc, #680]	; (8005fc4 <__svfiscanf_r+0x2d4>)
 8005d1a:	93a0      	str	r3, [sp, #640]	; 0x280
 8005d1c:	f10d 0804 	add.w	r8, sp, #4
 8005d20:	4ba9      	ldr	r3, [pc, #676]	; (8005fc8 <__svfiscanf_r+0x2d8>)
 8005d22:	4faa      	ldr	r7, [pc, #680]	; (8005fcc <__svfiscanf_r+0x2dc>)
 8005d24:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8005fd0 <__svfiscanf_r+0x2e0>
 8005d28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005d2c:	93a1      	str	r3, [sp, #644]	; 0x284
 8005d2e:	9500      	str	r5, [sp, #0]
 8005d30:	f89a 3000 	ldrb.w	r3, [sl]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8170 	beq.w	800601a <__svfiscanf_r+0x32a>
 8005d3a:	5cf9      	ldrb	r1, [r7, r3]
 8005d3c:	f011 0108 	ands.w	r1, r1, #8
 8005d40:	f10a 0501 	add.w	r5, sl, #1
 8005d44:	d019      	beq.n	8005d7a <__svfiscanf_r+0x8a>
 8005d46:	6863      	ldr	r3, [r4, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	dd0f      	ble.n	8005d6c <__svfiscanf_r+0x7c>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	781a      	ldrb	r2, [r3, #0]
 8005d50:	5cba      	ldrb	r2, [r7, r2]
 8005d52:	0711      	lsls	r1, r2, #28
 8005d54:	d401      	bmi.n	8005d5a <__svfiscanf_r+0x6a>
 8005d56:	46aa      	mov	sl, r5
 8005d58:	e7ea      	b.n	8005d30 <__svfiscanf_r+0x40>
 8005d5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d5c:	3201      	adds	r2, #1
 8005d5e:	9245      	str	r2, [sp, #276]	; 0x114
 8005d60:	6862      	ldr	r2, [r4, #4]
 8005d62:	3301      	adds	r3, #1
 8005d64:	3a01      	subs	r2, #1
 8005d66:	6062      	str	r2, [r4, #4]
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	e7ec      	b.n	8005d46 <__svfiscanf_r+0x56>
 8005d6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4630      	mov	r0, r6
 8005d72:	4798      	blx	r3
 8005d74:	2800      	cmp	r0, #0
 8005d76:	d0e9      	beq.n	8005d4c <__svfiscanf_r+0x5c>
 8005d78:	e7ed      	b.n	8005d56 <__svfiscanf_r+0x66>
 8005d7a:	2b25      	cmp	r3, #37	; 0x25
 8005d7c:	d012      	beq.n	8005da4 <__svfiscanf_r+0xb4>
 8005d7e:	469a      	mov	sl, r3
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f340 8093 	ble.w	8005eae <__svfiscanf_r+0x1be>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	7813      	ldrb	r3, [r2, #0]
 8005d8c:	4553      	cmp	r3, sl
 8005d8e:	f040 8144 	bne.w	800601a <__svfiscanf_r+0x32a>
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005d9a:	3201      	adds	r2, #1
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	6022      	str	r2, [r4, #0]
 8005da0:	9345      	str	r3, [sp, #276]	; 0x114
 8005da2:	e7d8      	b.n	8005d56 <__svfiscanf_r+0x66>
 8005da4:	9141      	str	r1, [sp, #260]	; 0x104
 8005da6:	9143      	str	r1, [sp, #268]	; 0x10c
 8005da8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005dac:	2b2a      	cmp	r3, #42	; 0x2a
 8005dae:	bf02      	ittt	eq
 8005db0:	2310      	moveq	r3, #16
 8005db2:	9341      	streq	r3, [sp, #260]	; 0x104
 8005db4:	f10a 0502 	addeq.w	r5, sl, #2
 8005db8:	220a      	movs	r2, #10
 8005dba:	46aa      	mov	sl, r5
 8005dbc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005dc0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d91d      	bls.n	8005e04 <__svfiscanf_r+0x114>
 8005dc8:	4881      	ldr	r0, [pc, #516]	; (8005fd0 <__svfiscanf_r+0x2e0>)
 8005dca:	2203      	movs	r2, #3
 8005dcc:	f7fa fa00 	bl	80001d0 <memchr>
 8005dd0:	b138      	cbz	r0, 8005de2 <__svfiscanf_r+0xf2>
 8005dd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005dd4:	eba0 0009 	sub.w	r0, r0, r9
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4083      	lsls	r3, r0
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	9341      	str	r3, [sp, #260]	; 0x104
 8005de0:	4655      	mov	r5, sl
 8005de2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005de6:	2b78      	cmp	r3, #120	; 0x78
 8005de8:	d807      	bhi.n	8005dfa <__svfiscanf_r+0x10a>
 8005dea:	2b57      	cmp	r3, #87	; 0x57
 8005dec:	d811      	bhi.n	8005e12 <__svfiscanf_r+0x122>
 8005dee:	2b25      	cmp	r3, #37	; 0x25
 8005df0:	d0c5      	beq.n	8005d7e <__svfiscanf_r+0x8e>
 8005df2:	d857      	bhi.n	8005ea4 <__svfiscanf_r+0x1b4>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 80c6 	beq.w	8005f86 <__svfiscanf_r+0x296>
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	9347      	str	r3, [sp, #284]	; 0x11c
 8005dfe:	230a      	movs	r3, #10
 8005e00:	9342      	str	r3, [sp, #264]	; 0x108
 8005e02:	e07f      	b.n	8005f04 <__svfiscanf_r+0x214>
 8005e04:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005e06:	fb02 1103 	mla	r1, r2, r3, r1
 8005e0a:	3930      	subs	r1, #48	; 0x30
 8005e0c:	9143      	str	r1, [sp, #268]	; 0x10c
 8005e0e:	4655      	mov	r5, sl
 8005e10:	e7d3      	b.n	8005dba <__svfiscanf_r+0xca>
 8005e12:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005e16:	2a20      	cmp	r2, #32
 8005e18:	d8ef      	bhi.n	8005dfa <__svfiscanf_r+0x10a>
 8005e1a:	a101      	add	r1, pc, #4	; (adr r1, 8005e20 <__svfiscanf_r+0x130>)
 8005e1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e20:	08005ee7 	.word	0x08005ee7
 8005e24:	08005dfb 	.word	0x08005dfb
 8005e28:	08005dfb 	.word	0x08005dfb
 8005e2c:	08005f45 	.word	0x08005f45
 8005e30:	08005dfb 	.word	0x08005dfb
 8005e34:	08005dfb 	.word	0x08005dfb
 8005e38:	08005dfb 	.word	0x08005dfb
 8005e3c:	08005dfb 	.word	0x08005dfb
 8005e40:	08005dfb 	.word	0x08005dfb
 8005e44:	08005dfb 	.word	0x08005dfb
 8005e48:	08005dfb 	.word	0x08005dfb
 8005e4c:	08005f5b 	.word	0x08005f5b
 8005e50:	08005f41 	.word	0x08005f41
 8005e54:	08005eab 	.word	0x08005eab
 8005e58:	08005eab 	.word	0x08005eab
 8005e5c:	08005eab 	.word	0x08005eab
 8005e60:	08005dfb 	.word	0x08005dfb
 8005e64:	08005efd 	.word	0x08005efd
 8005e68:	08005dfb 	.word	0x08005dfb
 8005e6c:	08005dfb 	.word	0x08005dfb
 8005e70:	08005dfb 	.word	0x08005dfb
 8005e74:	08005dfb 	.word	0x08005dfb
 8005e78:	08005f6b 	.word	0x08005f6b
 8005e7c:	08005f39 	.word	0x08005f39
 8005e80:	08005edf 	.word	0x08005edf
 8005e84:	08005dfb 	.word	0x08005dfb
 8005e88:	08005dfb 	.word	0x08005dfb
 8005e8c:	08005f67 	.word	0x08005f67
 8005e90:	08005dfb 	.word	0x08005dfb
 8005e94:	08005f41 	.word	0x08005f41
 8005e98:	08005dfb 	.word	0x08005dfb
 8005e9c:	08005dfb 	.word	0x08005dfb
 8005ea0:	08005ee7 	.word	0x08005ee7
 8005ea4:	3b45      	subs	r3, #69	; 0x45
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d8a7      	bhi.n	8005dfa <__svfiscanf_r+0x10a>
 8005eaa:	2305      	movs	r3, #5
 8005eac:	e029      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005eae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	4798      	blx	r3
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	f43f af66 	beq.w	8005d88 <__svfiscanf_r+0x98>
 8005ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ebe:	07da      	lsls	r2, r3, #31
 8005ec0:	f140 80a3 	bpl.w	800600a <__svfiscanf_r+0x31a>
 8005ec4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d066      	beq.n	8005f98 <__svfiscanf_r+0x2a8>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ed0:	bf18      	it	ne
 8005ed2:	f04f 30ff 	movne.w	r0, #4294967295
 8005ed6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ede:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ee0:	f042 0220 	orr.w	r2, r2, #32
 8005ee4:	9241      	str	r2, [sp, #260]	; 0x104
 8005ee6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eec:	9241      	str	r2, [sp, #260]	; 0x104
 8005eee:	2210      	movs	r2, #16
 8005ef0:	2b6f      	cmp	r3, #111	; 0x6f
 8005ef2:	9242      	str	r2, [sp, #264]	; 0x108
 8005ef4:	bf34      	ite	cc
 8005ef6:	2303      	movcc	r3, #3
 8005ef8:	2304      	movcs	r3, #4
 8005efa:	e002      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005efc:	2300      	movs	r3, #0
 8005efe:	9342      	str	r3, [sp, #264]	; 0x108
 8005f00:	2303      	movs	r3, #3
 8005f02:	9347      	str	r3, [sp, #284]	; 0x11c
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd49      	ble.n	8005f9e <__svfiscanf_r+0x2ae>
 8005f0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f0c:	065b      	lsls	r3, r3, #25
 8005f0e:	d404      	bmi.n	8005f1a <__svfiscanf_r+0x22a>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	5cba      	ldrb	r2, [r7, r2]
 8005f16:	0710      	lsls	r0, r2, #28
 8005f18:	d448      	bmi.n	8005fac <__svfiscanf_r+0x2bc>
 8005f1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	dc60      	bgt.n	8005fe2 <__svfiscanf_r+0x2f2>
 8005f20:	466b      	mov	r3, sp
 8005f22:	4622      	mov	r2, r4
 8005f24:	a941      	add	r1, sp, #260	; 0x104
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 f898 	bl	800605c <_scanf_chars>
 8005f2c:	2801      	cmp	r0, #1
 8005f2e:	d074      	beq.n	800601a <__svfiscanf_r+0x32a>
 8005f30:	2802      	cmp	r0, #2
 8005f32:	f47f af10 	bne.w	8005d56 <__svfiscanf_r+0x66>
 8005f36:	e7c1      	b.n	8005ebc <__svfiscanf_r+0x1cc>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	9342      	str	r3, [sp, #264]	; 0x108
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	e7e0      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005f40:	220a      	movs	r2, #10
 8005f42:	e7d5      	b.n	8005ef0 <__svfiscanf_r+0x200>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4640      	mov	r0, r8
 8005f48:	f000 fb0a 	bl	8006560 <__sccl>
 8005f4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f52:	9341      	str	r3, [sp, #260]	; 0x104
 8005f54:	4605      	mov	r5, r0
 8005f56:	2301      	movs	r3, #1
 8005f58:	e7d3      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005f5a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f60:	9341      	str	r3, [sp, #260]	; 0x104
 8005f62:	2300      	movs	r3, #0
 8005f64:	e7cd      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e7cb      	b.n	8005f02 <__svfiscanf_r+0x212>
 8005f6a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005f6c:	06c3      	lsls	r3, r0, #27
 8005f6e:	f53f aef2 	bmi.w	8005d56 <__svfiscanf_r+0x66>
 8005f72:	9b00      	ldr	r3, [sp, #0]
 8005f74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005f76:	1d19      	adds	r1, r3, #4
 8005f78:	9100      	str	r1, [sp, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	07c0      	lsls	r0, r0, #31
 8005f7e:	bf4c      	ite	mi
 8005f80:	801a      	strhmi	r2, [r3, #0]
 8005f82:	601a      	strpl	r2, [r3, #0]
 8005f84:	e6e7      	b.n	8005d56 <__svfiscanf_r+0x66>
 8005f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f88:	07d8      	lsls	r0, r3, #31
 8005f8a:	d405      	bmi.n	8005f98 <__svfiscanf_r+0x2a8>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	0599      	lsls	r1, r3, #22
 8005f90:	d402      	bmi.n	8005f98 <__svfiscanf_r+0x2a8>
 8005f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f94:	f7ff fade 	bl	8005554 <__retarget_lock_release_recursive>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e79b      	b.n	8005ed6 <__svfiscanf_r+0x1e6>
 8005f9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	4798      	blx	r3
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d0af      	beq.n	8005f0a <__svfiscanf_r+0x21a>
 8005faa:	e787      	b.n	8005ebc <__svfiscanf_r+0x1cc>
 8005fac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005fae:	3201      	adds	r2, #1
 8005fb0:	9245      	str	r2, [sp, #276]	; 0x114
 8005fb2:	6862      	ldr	r2, [r4, #4]
 8005fb4:	3a01      	subs	r2, #1
 8005fb6:	2a00      	cmp	r2, #0
 8005fb8:	6062      	str	r2, [r4, #4]
 8005fba:	dd0b      	ble.n	8005fd4 <__svfiscanf_r+0x2e4>
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	e7a6      	b.n	8005f10 <__svfiscanf_r+0x220>
 8005fc2:	bf00      	nop
 8005fc4:	08006647 	.word	0x08006647
 8005fc8:	08006471 	.word	0x08006471
 8005fcc:	08007957 	.word	0x08007957
 8005fd0:	0800790e 	.word	0x0800790e
 8005fd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4798      	blx	r3
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d097      	beq.n	8005f10 <__svfiscanf_r+0x220>
 8005fe0:	e76c      	b.n	8005ebc <__svfiscanf_r+0x1cc>
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	dc06      	bgt.n	8005ff4 <__svfiscanf_r+0x304>
 8005fe6:	466b      	mov	r3, sp
 8005fe8:	4622      	mov	r2, r4
 8005fea:	a941      	add	r1, sp, #260	; 0x104
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 f88f 	bl	8006110 <_scanf_i>
 8005ff2:	e79b      	b.n	8005f2c <__svfiscanf_r+0x23c>
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <__svfiscanf_r+0x340>)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f43f aead 	beq.w	8005d56 <__svfiscanf_r+0x66>
 8005ffc:	466b      	mov	r3, sp
 8005ffe:	4622      	mov	r2, r4
 8006000:	a941      	add	r1, sp, #260	; 0x104
 8006002:	4630      	mov	r0, r6
 8006004:	f3af 8000 	nop.w
 8006008:	e790      	b.n	8005f2c <__svfiscanf_r+0x23c>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	0599      	lsls	r1, r3, #22
 800600e:	f53f af59 	bmi.w	8005ec4 <__svfiscanf_r+0x1d4>
 8006012:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006014:	f7ff fa9e 	bl	8005554 <__retarget_lock_release_recursive>
 8006018:	e754      	b.n	8005ec4 <__svfiscanf_r+0x1d4>
 800601a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601c:	07da      	lsls	r2, r3, #31
 800601e:	d405      	bmi.n	800602c <__svfiscanf_r+0x33c>
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	059b      	lsls	r3, r3, #22
 8006024:	d402      	bmi.n	800602c <__svfiscanf_r+0x33c>
 8006026:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006028:	f7ff fa94 	bl	8005554 <__retarget_lock_release_recursive>
 800602c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800602e:	e752      	b.n	8005ed6 <__svfiscanf_r+0x1e6>
 8006030:	00000000 	.word	0x00000000

08006034 <_vfiscanf_r>:
 8006034:	b530      	push	{r4, r5, lr}
 8006036:	4604      	mov	r4, r0
 8006038:	b085      	sub	sp, #20
 800603a:	b148      	cbz	r0, 8006050 <_vfiscanf_r+0x1c>
 800603c:	6a05      	ldr	r5, [r0, #32]
 800603e:	b93d      	cbnz	r5, 8006050 <_vfiscanf_r+0x1c>
 8006040:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006044:	9101      	str	r1, [sp, #4]
 8006046:	f7ff f96d 	bl	8005324 <__sinit>
 800604a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800604e:	9901      	ldr	r1, [sp, #4]
 8006050:	4620      	mov	r0, r4
 8006052:	b005      	add	sp, #20
 8006054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006058:	f7ff be4a 	b.w	8005cf0 <__svfiscanf_r>

0800605c <_scanf_chars>:
 800605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006060:	4615      	mov	r5, r2
 8006062:	688a      	ldr	r2, [r1, #8]
 8006064:	4680      	mov	r8, r0
 8006066:	460c      	mov	r4, r1
 8006068:	b932      	cbnz	r2, 8006078 <_scanf_chars+0x1c>
 800606a:	698a      	ldr	r2, [r1, #24]
 800606c:	2a00      	cmp	r2, #0
 800606e:	bf0c      	ite	eq
 8006070:	2201      	moveq	r2, #1
 8006072:	f04f 32ff 	movne.w	r2, #4294967295
 8006076:	608a      	str	r2, [r1, #8]
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800610c <_scanf_chars+0xb0>
 800607e:	06d1      	lsls	r1, r2, #27
 8006080:	bf5f      	itttt	pl
 8006082:	681a      	ldrpl	r2, [r3, #0]
 8006084:	1d11      	addpl	r1, r2, #4
 8006086:	6019      	strpl	r1, [r3, #0]
 8006088:	6816      	ldrpl	r6, [r2, #0]
 800608a:	2700      	movs	r7, #0
 800608c:	69a0      	ldr	r0, [r4, #24]
 800608e:	b188      	cbz	r0, 80060b4 <_scanf_chars+0x58>
 8006090:	2801      	cmp	r0, #1
 8006092:	d107      	bne.n	80060a4 <_scanf_chars+0x48>
 8006094:	682a      	ldr	r2, [r5, #0]
 8006096:	7811      	ldrb	r1, [r2, #0]
 8006098:	6962      	ldr	r2, [r4, #20]
 800609a:	5c52      	ldrb	r2, [r2, r1]
 800609c:	b952      	cbnz	r2, 80060b4 <_scanf_chars+0x58>
 800609e:	2f00      	cmp	r7, #0
 80060a0:	d031      	beq.n	8006106 <_scanf_chars+0xaa>
 80060a2:	e022      	b.n	80060ea <_scanf_chars+0x8e>
 80060a4:	2802      	cmp	r0, #2
 80060a6:	d120      	bne.n	80060ea <_scanf_chars+0x8e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d41a      	bmi.n	80060ea <_scanf_chars+0x8e>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	06da      	lsls	r2, r3, #27
 80060b8:	bf5e      	ittt	pl
 80060ba:	682b      	ldrpl	r3, [r5, #0]
 80060bc:	781b      	ldrbpl	r3, [r3, #0]
 80060be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80060c2:	682a      	ldr	r2, [r5, #0]
 80060c4:	686b      	ldr	r3, [r5, #4]
 80060c6:	3201      	adds	r2, #1
 80060c8:	602a      	str	r2, [r5, #0]
 80060ca:	68a2      	ldr	r2, [r4, #8]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	3a01      	subs	r2, #1
 80060d0:	606b      	str	r3, [r5, #4]
 80060d2:	3701      	adds	r7, #1
 80060d4:	60a2      	str	r2, [r4, #8]
 80060d6:	b142      	cbz	r2, 80060ea <_scanf_chars+0x8e>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dcd7      	bgt.n	800608c <_scanf_chars+0x30>
 80060dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80060e0:	4629      	mov	r1, r5
 80060e2:	4640      	mov	r0, r8
 80060e4:	4798      	blx	r3
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0d0      	beq.n	800608c <_scanf_chars+0x30>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	f013 0310 	ands.w	r3, r3, #16
 80060f0:	d105      	bne.n	80060fe <_scanf_chars+0xa2>
 80060f2:	68e2      	ldr	r2, [r4, #12]
 80060f4:	3201      	adds	r2, #1
 80060f6:	60e2      	str	r2, [r4, #12]
 80060f8:	69a2      	ldr	r2, [r4, #24]
 80060fa:	b102      	cbz	r2, 80060fe <_scanf_chars+0xa2>
 80060fc:	7033      	strb	r3, [r6, #0]
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	443b      	add	r3, r7
 8006102:	6123      	str	r3, [r4, #16]
 8006104:	2000      	movs	r0, #0
 8006106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610a:	bf00      	nop
 800610c:	08007957 	.word	0x08007957

08006110 <_scanf_i>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	4698      	mov	r8, r3
 8006116:	4b74      	ldr	r3, [pc, #464]	; (80062e8 <_scanf_i+0x1d8>)
 8006118:	460c      	mov	r4, r1
 800611a:	4682      	mov	sl, r0
 800611c:	4616      	mov	r6, r2
 800611e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006122:	b087      	sub	sp, #28
 8006124:	ab03      	add	r3, sp, #12
 8006126:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800612a:	4b70      	ldr	r3, [pc, #448]	; (80062ec <_scanf_i+0x1dc>)
 800612c:	69a1      	ldr	r1, [r4, #24]
 800612e:	4a70      	ldr	r2, [pc, #448]	; (80062f0 <_scanf_i+0x1e0>)
 8006130:	2903      	cmp	r1, #3
 8006132:	bf18      	it	ne
 8006134:	461a      	movne	r2, r3
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006140:	bf88      	it	hi
 8006142:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006146:	4627      	mov	r7, r4
 8006148:	bf82      	ittt	hi
 800614a:	eb03 0905 	addhi.w	r9, r3, r5
 800614e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006152:	60a3      	strhi	r3, [r4, #8]
 8006154:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006158:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800615c:	bf98      	it	ls
 800615e:	f04f 0900 	movls.w	r9, #0
 8006162:	6023      	str	r3, [r4, #0]
 8006164:	463d      	mov	r5, r7
 8006166:	f04f 0b00 	mov.w	fp, #0
 800616a:	6831      	ldr	r1, [r6, #0]
 800616c:	ab03      	add	r3, sp, #12
 800616e:	7809      	ldrb	r1, [r1, #0]
 8006170:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006174:	2202      	movs	r2, #2
 8006176:	f7fa f82b 	bl	80001d0 <memchr>
 800617a:	b328      	cbz	r0, 80061c8 <_scanf_i+0xb8>
 800617c:	f1bb 0f01 	cmp.w	fp, #1
 8006180:	d159      	bne.n	8006236 <_scanf_i+0x126>
 8006182:	6862      	ldr	r2, [r4, #4]
 8006184:	b92a      	cbnz	r2, 8006192 <_scanf_i+0x82>
 8006186:	6822      	ldr	r2, [r4, #0]
 8006188:	2308      	movs	r3, #8
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	6063      	str	r3, [r4, #4]
 8006190:	6022      	str	r2, [r4, #0]
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	68a2      	ldr	r2, [r4, #8]
 800619c:	1e51      	subs	r1, r2, #1
 800619e:	60a1      	str	r1, [r4, #8]
 80061a0:	b192      	cbz	r2, 80061c8 <_scanf_i+0xb8>
 80061a2:	6832      	ldr	r2, [r6, #0]
 80061a4:	1c51      	adds	r1, r2, #1
 80061a6:	6031      	str	r1, [r6, #0]
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	f805 2b01 	strb.w	r2, [r5], #1
 80061ae:	6872      	ldr	r2, [r6, #4]
 80061b0:	3a01      	subs	r2, #1
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	6072      	str	r2, [r6, #4]
 80061b6:	dc07      	bgt.n	80061c8 <_scanf_i+0xb8>
 80061b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80061bc:	4631      	mov	r1, r6
 80061be:	4650      	mov	r0, sl
 80061c0:	4790      	blx	r2
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f040 8085 	bne.w	80062d2 <_scanf_i+0x1c2>
 80061c8:	f10b 0b01 	add.w	fp, fp, #1
 80061cc:	f1bb 0f03 	cmp.w	fp, #3
 80061d0:	d1cb      	bne.n	800616a <_scanf_i+0x5a>
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	b90b      	cbnz	r3, 80061da <_scanf_i+0xca>
 80061d6:	230a      	movs	r3, #10
 80061d8:	6063      	str	r3, [r4, #4]
 80061da:	6863      	ldr	r3, [r4, #4]
 80061dc:	4945      	ldr	r1, [pc, #276]	; (80062f4 <_scanf_i+0x1e4>)
 80061de:	6960      	ldr	r0, [r4, #20]
 80061e0:	1ac9      	subs	r1, r1, r3
 80061e2:	f000 f9bd 	bl	8006560 <__sccl>
 80061e6:	f04f 0b00 	mov.w	fp, #0
 80061ea:	68a3      	ldr	r3, [r4, #8]
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d03d      	beq.n	800626e <_scanf_i+0x15e>
 80061f2:	6831      	ldr	r1, [r6, #0]
 80061f4:	6960      	ldr	r0, [r4, #20]
 80061f6:	f891 c000 	ldrb.w	ip, [r1]
 80061fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80061fe:	2800      	cmp	r0, #0
 8006200:	d035      	beq.n	800626e <_scanf_i+0x15e>
 8006202:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006206:	d124      	bne.n	8006252 <_scanf_i+0x142>
 8006208:	0510      	lsls	r0, r2, #20
 800620a:	d522      	bpl.n	8006252 <_scanf_i+0x142>
 800620c:	f10b 0b01 	add.w	fp, fp, #1
 8006210:	f1b9 0f00 	cmp.w	r9, #0
 8006214:	d003      	beq.n	800621e <_scanf_i+0x10e>
 8006216:	3301      	adds	r3, #1
 8006218:	f109 39ff 	add.w	r9, r9, #4294967295
 800621c:	60a3      	str	r3, [r4, #8]
 800621e:	6873      	ldr	r3, [r6, #4]
 8006220:	3b01      	subs	r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	6073      	str	r3, [r6, #4]
 8006226:	dd1b      	ble.n	8006260 <_scanf_i+0x150>
 8006228:	6833      	ldr	r3, [r6, #0]
 800622a:	3301      	adds	r3, #1
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	68a3      	ldr	r3, [r4, #8]
 8006230:	3b01      	subs	r3, #1
 8006232:	60a3      	str	r3, [r4, #8]
 8006234:	e7d9      	b.n	80061ea <_scanf_i+0xda>
 8006236:	f1bb 0f02 	cmp.w	fp, #2
 800623a:	d1ae      	bne.n	800619a <_scanf_i+0x8a>
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006242:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006246:	d1bf      	bne.n	80061c8 <_scanf_i+0xb8>
 8006248:	2310      	movs	r3, #16
 800624a:	6063      	str	r3, [r4, #4]
 800624c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006250:	e7a2      	b.n	8006198 <_scanf_i+0x88>
 8006252:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006256:	6022      	str	r2, [r4, #0]
 8006258:	780b      	ldrb	r3, [r1, #0]
 800625a:	f805 3b01 	strb.w	r3, [r5], #1
 800625e:	e7de      	b.n	800621e <_scanf_i+0x10e>
 8006260:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006264:	4631      	mov	r1, r6
 8006266:	4650      	mov	r0, sl
 8006268:	4798      	blx	r3
 800626a:	2800      	cmp	r0, #0
 800626c:	d0df      	beq.n	800622e <_scanf_i+0x11e>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	05d9      	lsls	r1, r3, #23
 8006272:	d50d      	bpl.n	8006290 <_scanf_i+0x180>
 8006274:	42bd      	cmp	r5, r7
 8006276:	d909      	bls.n	800628c <_scanf_i+0x17c>
 8006278:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800627c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006280:	4632      	mov	r2, r6
 8006282:	4650      	mov	r0, sl
 8006284:	4798      	blx	r3
 8006286:	f105 39ff 	add.w	r9, r5, #4294967295
 800628a:	464d      	mov	r5, r9
 800628c:	42bd      	cmp	r5, r7
 800628e:	d028      	beq.n	80062e2 <_scanf_i+0x1d2>
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	f012 0210 	ands.w	r2, r2, #16
 8006296:	d113      	bne.n	80062c0 <_scanf_i+0x1b0>
 8006298:	702a      	strb	r2, [r5, #0]
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	9e01      	ldr	r6, [sp, #4]
 800629e:	4639      	mov	r1, r7
 80062a0:	4650      	mov	r0, sl
 80062a2:	47b0      	blx	r6
 80062a4:	f8d8 3000 	ldr.w	r3, [r8]
 80062a8:	6821      	ldr	r1, [r4, #0]
 80062aa:	1d1a      	adds	r2, r3, #4
 80062ac:	f8c8 2000 	str.w	r2, [r8]
 80062b0:	f011 0f20 	tst.w	r1, #32
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	d00f      	beq.n	80062d8 <_scanf_i+0x1c8>
 80062b8:	6018      	str	r0, [r3, #0]
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	3301      	adds	r3, #1
 80062be:	60e3      	str	r3, [r4, #12]
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	1bed      	subs	r5, r5, r7
 80062c4:	445d      	add	r5, fp
 80062c6:	442b      	add	r3, r5
 80062c8:	6123      	str	r3, [r4, #16]
 80062ca:	2000      	movs	r0, #0
 80062cc:	b007      	add	sp, #28
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	f04f 0b00 	mov.w	fp, #0
 80062d6:	e7ca      	b.n	800626e <_scanf_i+0x15e>
 80062d8:	07ca      	lsls	r2, r1, #31
 80062da:	bf4c      	ite	mi
 80062dc:	8018      	strhmi	r0, [r3, #0]
 80062de:	6018      	strpl	r0, [r3, #0]
 80062e0:	e7eb      	b.n	80062ba <_scanf_i+0x1aa>
 80062e2:	2001      	movs	r0, #1
 80062e4:	e7f2      	b.n	80062cc <_scanf_i+0x1bc>
 80062e6:	bf00      	nop
 80062e8:	08006e50 	.word	0x08006e50
 80062ec:	08006b01 	.word	0x08006b01
 80062f0:	08006a19 	.word	0x08006a19
 80062f4:	0800794b 	.word	0x0800794b

080062f8 <__sflush_r>:
 80062f8:	898a      	ldrh	r2, [r1, #12]
 80062fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fe:	4605      	mov	r5, r0
 8006300:	0710      	lsls	r0, r2, #28
 8006302:	460c      	mov	r4, r1
 8006304:	d458      	bmi.n	80063b8 <__sflush_r+0xc0>
 8006306:	684b      	ldr	r3, [r1, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	dc05      	bgt.n	8006318 <__sflush_r+0x20>
 800630c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	dc02      	bgt.n	8006318 <__sflush_r+0x20>
 8006312:	2000      	movs	r0, #0
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800631a:	2e00      	cmp	r6, #0
 800631c:	d0f9      	beq.n	8006312 <__sflush_r+0x1a>
 800631e:	2300      	movs	r3, #0
 8006320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006324:	682f      	ldr	r7, [r5, #0]
 8006326:	6a21      	ldr	r1, [r4, #32]
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	d032      	beq.n	8006392 <__sflush_r+0x9a>
 800632c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	075a      	lsls	r2, r3, #29
 8006332:	d505      	bpl.n	8006340 <__sflush_r+0x48>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	1ac0      	subs	r0, r0, r3
 8006338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800633a:	b10b      	cbz	r3, 8006340 <__sflush_r+0x48>
 800633c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800633e:	1ac0      	subs	r0, r0, r3
 8006340:	2300      	movs	r3, #0
 8006342:	4602      	mov	r2, r0
 8006344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006346:	6a21      	ldr	r1, [r4, #32]
 8006348:	4628      	mov	r0, r5
 800634a:	47b0      	blx	r6
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	d106      	bne.n	8006360 <__sflush_r+0x68>
 8006352:	6829      	ldr	r1, [r5, #0]
 8006354:	291d      	cmp	r1, #29
 8006356:	d82b      	bhi.n	80063b0 <__sflush_r+0xb8>
 8006358:	4a29      	ldr	r2, [pc, #164]	; (8006400 <__sflush_r+0x108>)
 800635a:	410a      	asrs	r2, r1
 800635c:	07d6      	lsls	r6, r2, #31
 800635e:	d427      	bmi.n	80063b0 <__sflush_r+0xb8>
 8006360:	2200      	movs	r2, #0
 8006362:	6062      	str	r2, [r4, #4]
 8006364:	04d9      	lsls	r1, r3, #19
 8006366:	6922      	ldr	r2, [r4, #16]
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	d504      	bpl.n	8006376 <__sflush_r+0x7e>
 800636c:	1c42      	adds	r2, r0, #1
 800636e:	d101      	bne.n	8006374 <__sflush_r+0x7c>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b903      	cbnz	r3, 8006376 <__sflush_r+0x7e>
 8006374:	6560      	str	r0, [r4, #84]	; 0x54
 8006376:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006378:	602f      	str	r7, [r5, #0]
 800637a:	2900      	cmp	r1, #0
 800637c:	d0c9      	beq.n	8006312 <__sflush_r+0x1a>
 800637e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006382:	4299      	cmp	r1, r3
 8006384:	d002      	beq.n	800638c <__sflush_r+0x94>
 8006386:	4628      	mov	r0, r5
 8006388:	f7ff f8e6 	bl	8005558 <_free_r>
 800638c:	2000      	movs	r0, #0
 800638e:	6360      	str	r0, [r4, #52]	; 0x34
 8006390:	e7c0      	b.n	8006314 <__sflush_r+0x1c>
 8006392:	2301      	movs	r3, #1
 8006394:	4628      	mov	r0, r5
 8006396:	47b0      	blx	r6
 8006398:	1c41      	adds	r1, r0, #1
 800639a:	d1c8      	bne.n	800632e <__sflush_r+0x36>
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0c5      	beq.n	800632e <__sflush_r+0x36>
 80063a2:	2b1d      	cmp	r3, #29
 80063a4:	d001      	beq.n	80063aa <__sflush_r+0xb2>
 80063a6:	2b16      	cmp	r3, #22
 80063a8:	d101      	bne.n	80063ae <__sflush_r+0xb6>
 80063aa:	602f      	str	r7, [r5, #0]
 80063ac:	e7b1      	b.n	8006312 <__sflush_r+0x1a>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	e7ad      	b.n	8006314 <__sflush_r+0x1c>
 80063b8:	690f      	ldr	r7, [r1, #16]
 80063ba:	2f00      	cmp	r7, #0
 80063bc:	d0a9      	beq.n	8006312 <__sflush_r+0x1a>
 80063be:	0793      	lsls	r3, r2, #30
 80063c0:	680e      	ldr	r6, [r1, #0]
 80063c2:	bf08      	it	eq
 80063c4:	694b      	ldreq	r3, [r1, #20]
 80063c6:	600f      	str	r7, [r1, #0]
 80063c8:	bf18      	it	ne
 80063ca:	2300      	movne	r3, #0
 80063cc:	eba6 0807 	sub.w	r8, r6, r7
 80063d0:	608b      	str	r3, [r1, #8]
 80063d2:	f1b8 0f00 	cmp.w	r8, #0
 80063d6:	dd9c      	ble.n	8006312 <__sflush_r+0x1a>
 80063d8:	6a21      	ldr	r1, [r4, #32]
 80063da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063dc:	4643      	mov	r3, r8
 80063de:	463a      	mov	r2, r7
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b0      	blx	r6
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dc06      	bgt.n	80063f6 <__sflush_r+0xfe>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ee:	81a3      	strh	r3, [r4, #12]
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	e78e      	b.n	8006314 <__sflush_r+0x1c>
 80063f6:	4407      	add	r7, r0
 80063f8:	eba8 0800 	sub.w	r8, r8, r0
 80063fc:	e7e9      	b.n	80063d2 <__sflush_r+0xda>
 80063fe:	bf00      	nop
 8006400:	dfbffffe 	.word	0xdfbffffe

08006404 <_fflush_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	690b      	ldr	r3, [r1, #16]
 8006408:	4605      	mov	r5, r0
 800640a:	460c      	mov	r4, r1
 800640c:	b913      	cbnz	r3, 8006414 <_fflush_r+0x10>
 800640e:	2500      	movs	r5, #0
 8006410:	4628      	mov	r0, r5
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	b118      	cbz	r0, 800641e <_fflush_r+0x1a>
 8006416:	6a03      	ldr	r3, [r0, #32]
 8006418:	b90b      	cbnz	r3, 800641e <_fflush_r+0x1a>
 800641a:	f7fe ff83 	bl	8005324 <__sinit>
 800641e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0f3      	beq.n	800640e <_fflush_r+0xa>
 8006426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006428:	07d0      	lsls	r0, r2, #31
 800642a:	d404      	bmi.n	8006436 <_fflush_r+0x32>
 800642c:	0599      	lsls	r1, r3, #22
 800642e:	d402      	bmi.n	8006436 <_fflush_r+0x32>
 8006430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006432:	f7ff f88e 	bl	8005552 <__retarget_lock_acquire_recursive>
 8006436:	4628      	mov	r0, r5
 8006438:	4621      	mov	r1, r4
 800643a:	f7ff ff5d 	bl	80062f8 <__sflush_r>
 800643e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006440:	07da      	lsls	r2, r3, #31
 8006442:	4605      	mov	r5, r0
 8006444:	d4e4      	bmi.n	8006410 <_fflush_r+0xc>
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	d4e1      	bmi.n	8006410 <_fflush_r+0xc>
 800644c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644e:	f7ff f881 	bl	8005554 <__retarget_lock_release_recursive>
 8006452:	e7dd      	b.n	8006410 <_fflush_r+0xc>

08006454 <lflush>:
 8006454:	898b      	ldrh	r3, [r1, #12]
 8006456:	f003 0309 	and.w	r3, r3, #9
 800645a:	2b09      	cmp	r3, #9
 800645c:	d103      	bne.n	8006466 <lflush+0x12>
 800645e:	4b03      	ldr	r3, [pc, #12]	; (800646c <lflush+0x18>)
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f7ff bfcf 	b.w	8006404 <_fflush_r>
 8006466:	2000      	movs	r0, #0
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	2000008c 	.word	0x2000008c

08006470 <__srefill_r>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	460c      	mov	r4, r1
 8006474:	4605      	mov	r5, r0
 8006476:	b118      	cbz	r0, 8006480 <__srefill_r+0x10>
 8006478:	6a03      	ldr	r3, [r0, #32]
 800647a:	b90b      	cbnz	r3, 8006480 <__srefill_r+0x10>
 800647c:	f7fe ff52 	bl	8005324 <__sinit>
 8006480:	2300      	movs	r3, #0
 8006482:	6063      	str	r3, [r4, #4]
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800648a:	069e      	lsls	r6, r3, #26
 800648c:	d502      	bpl.n	8006494 <__srefill_r+0x24>
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	e05c      	b.n	800654e <__srefill_r+0xde>
 8006494:	0758      	lsls	r0, r3, #29
 8006496:	d448      	bmi.n	800652a <__srefill_r+0xba>
 8006498:	06d9      	lsls	r1, r3, #27
 800649a:	d405      	bmi.n	80064a8 <__srefill_r+0x38>
 800649c:	2309      	movs	r3, #9
 800649e:	602b      	str	r3, [r5, #0]
 80064a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	e7f2      	b.n	800648e <__srefill_r+0x1e>
 80064a8:	071a      	lsls	r2, r3, #28
 80064aa:	d50b      	bpl.n	80064c4 <__srefill_r+0x54>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f7ff ffa8 	bl	8006404 <_fflush_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d1ea      	bne.n	800648e <__srefill_r+0x1e>
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	60a0      	str	r0, [r4, #8]
 80064bc:	f023 0308 	bic.w	r3, r3, #8
 80064c0:	81a3      	strh	r3, [r4, #12]
 80064c2:	61a0      	str	r0, [r4, #24]
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f043 0304 	orr.w	r3, r3, #4
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b91b      	cbnz	r3, 80064d8 <__srefill_r+0x68>
 80064d0:	4621      	mov	r1, r4
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 fb3c 	bl	8006b50 <__smakebuf_r>
 80064d8:	89a6      	ldrh	r6, [r4, #12]
 80064da:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80064de:	07b3      	lsls	r3, r6, #30
 80064e0:	d00f      	beq.n	8006502 <__srefill_r+0x92>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4a1b      	ldr	r2, [pc, #108]	; (8006554 <__srefill_r+0xe4>)
 80064e6:	491c      	ldr	r1, [pc, #112]	; (8006558 <__srefill_r+0xe8>)
 80064e8:	481c      	ldr	r0, [pc, #112]	; (800655c <__srefill_r+0xec>)
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	f006 0609 	and.w	r6, r6, #9
 80064f0:	f7fe ff30 	bl	8005354 <_fwalk_sglue>
 80064f4:	2e09      	cmp	r6, #9
 80064f6:	81a7      	strh	r7, [r4, #12]
 80064f8:	d103      	bne.n	8006502 <__srefill_r+0x92>
 80064fa:	4621      	mov	r1, r4
 80064fc:	4628      	mov	r0, r5
 80064fe:	f7ff fefb 	bl	80062f8 <__sflush_r>
 8006502:	6922      	ldr	r2, [r4, #16]
 8006504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006506:	6963      	ldr	r3, [r4, #20]
 8006508:	6a21      	ldr	r1, [r4, #32]
 800650a:	6022      	str	r2, [r4, #0]
 800650c:	4628      	mov	r0, r5
 800650e:	47b0      	blx	r6
 8006510:	2800      	cmp	r0, #0
 8006512:	6060      	str	r0, [r4, #4]
 8006514:	dc1c      	bgt.n	8006550 <__srefill_r+0xe0>
 8006516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651a:	bf17      	itett	ne
 800651c:	2200      	movne	r2, #0
 800651e:	f043 0320 	orreq.w	r3, r3, #32
 8006522:	6062      	strne	r2, [r4, #4]
 8006524:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006528:	e7bc      	b.n	80064a4 <__srefill_r+0x34>
 800652a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652c:	2900      	cmp	r1, #0
 800652e:	d0cd      	beq.n	80064cc <__srefill_r+0x5c>
 8006530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <__srefill_r+0xce>
 8006538:	4628      	mov	r0, r5
 800653a:	f7ff f80d 	bl	8005558 <_free_r>
 800653e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006540:	6063      	str	r3, [r4, #4]
 8006542:	2000      	movs	r0, #0
 8006544:	6360      	str	r0, [r4, #52]	; 0x34
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0c0      	beq.n	80064cc <__srefill_r+0x5c>
 800654a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006550:	2000      	movs	r0, #0
 8006552:	e7fc      	b.n	800654e <__srefill_r+0xde>
 8006554:	20000034 	.word	0x20000034
 8006558:	08006455 	.word	0x08006455
 800655c:	20000040 	.word	0x20000040

08006560 <__sccl>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	780b      	ldrb	r3, [r1, #0]
 8006564:	4604      	mov	r4, r0
 8006566:	2b5e      	cmp	r3, #94	; 0x5e
 8006568:	bf0b      	itete	eq
 800656a:	784b      	ldrbeq	r3, [r1, #1]
 800656c:	1c4a      	addne	r2, r1, #1
 800656e:	1c8a      	addeq	r2, r1, #2
 8006570:	2100      	movne	r1, #0
 8006572:	bf08      	it	eq
 8006574:	2101      	moveq	r1, #1
 8006576:	3801      	subs	r0, #1
 8006578:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800657c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006580:	42a8      	cmp	r0, r5
 8006582:	d1fb      	bne.n	800657c <__sccl+0x1c>
 8006584:	b90b      	cbnz	r3, 800658a <__sccl+0x2a>
 8006586:	1e50      	subs	r0, r2, #1
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	f081 0101 	eor.w	r1, r1, #1
 800658e:	54e1      	strb	r1, [r4, r3]
 8006590:	4610      	mov	r0, r2
 8006592:	4602      	mov	r2, r0
 8006594:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006598:	2d2d      	cmp	r5, #45	; 0x2d
 800659a:	d005      	beq.n	80065a8 <__sccl+0x48>
 800659c:	2d5d      	cmp	r5, #93	; 0x5d
 800659e:	d016      	beq.n	80065ce <__sccl+0x6e>
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	d0f1      	beq.n	8006588 <__sccl+0x28>
 80065a4:	462b      	mov	r3, r5
 80065a6:	e7f2      	b.n	800658e <__sccl+0x2e>
 80065a8:	7846      	ldrb	r6, [r0, #1]
 80065aa:	2e5d      	cmp	r6, #93	; 0x5d
 80065ac:	d0fa      	beq.n	80065a4 <__sccl+0x44>
 80065ae:	42b3      	cmp	r3, r6
 80065b0:	dcf8      	bgt.n	80065a4 <__sccl+0x44>
 80065b2:	3002      	adds	r0, #2
 80065b4:	461a      	mov	r2, r3
 80065b6:	3201      	adds	r2, #1
 80065b8:	4296      	cmp	r6, r2
 80065ba:	54a1      	strb	r1, [r4, r2]
 80065bc:	dcfb      	bgt.n	80065b6 <__sccl+0x56>
 80065be:	1af2      	subs	r2, r6, r3
 80065c0:	3a01      	subs	r2, #1
 80065c2:	1c5d      	adds	r5, r3, #1
 80065c4:	42b3      	cmp	r3, r6
 80065c6:	bfa8      	it	ge
 80065c8:	2200      	movge	r2, #0
 80065ca:	18ab      	adds	r3, r5, r2
 80065cc:	e7e1      	b.n	8006592 <__sccl+0x32>
 80065ce:	4610      	mov	r0, r2
 80065d0:	e7da      	b.n	8006588 <__sccl+0x28>

080065d2 <__submore>:
 80065d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	460c      	mov	r4, r1
 80065d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80065da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065de:	4299      	cmp	r1, r3
 80065e0:	d11d      	bne.n	800661e <__submore+0x4c>
 80065e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e6:	f7ff f823 	bl	8005630 <_malloc_r>
 80065ea:	b918      	cbnz	r0, 80065f4 <__submore+0x22>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80065fa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80065fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006600:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006604:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006608:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800660c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006610:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006614:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006618:	6020      	str	r0, [r4, #0]
 800661a:	2000      	movs	r0, #0
 800661c:	e7e8      	b.n	80065f0 <__submore+0x1e>
 800661e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006620:	0077      	lsls	r7, r6, #1
 8006622:	463a      	mov	r2, r7
 8006624:	f000 f946 	bl	80068b4 <_realloc_r>
 8006628:	4605      	mov	r5, r0
 800662a:	2800      	cmp	r0, #0
 800662c:	d0de      	beq.n	80065ec <__submore+0x1a>
 800662e:	eb00 0806 	add.w	r8, r0, r6
 8006632:	4601      	mov	r1, r0
 8006634:	4632      	mov	r2, r6
 8006636:	4640      	mov	r0, r8
 8006638:	f000 f92e 	bl	8006898 <memcpy>
 800663c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006640:	f8c4 8000 	str.w	r8, [r4]
 8006644:	e7e9      	b.n	800661a <__submore+0x48>

08006646 <_ungetc_r>:
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	4614      	mov	r4, r2
 800664a:	1c4a      	adds	r2, r1, #1
 800664c:	4606      	mov	r6, r0
 800664e:	460d      	mov	r5, r1
 8006650:	d103      	bne.n	800665a <_ungetc_r+0x14>
 8006652:	f04f 35ff 	mov.w	r5, #4294967295
 8006656:	4628      	mov	r0, r5
 8006658:	bd70      	pop	{r4, r5, r6, pc}
 800665a:	b118      	cbz	r0, 8006664 <_ungetc_r+0x1e>
 800665c:	6a03      	ldr	r3, [r0, #32]
 800665e:	b90b      	cbnz	r3, 8006664 <_ungetc_r+0x1e>
 8006660:	f7fe fe60 	bl	8005324 <__sinit>
 8006664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d405      	bmi.n	8006676 <_ungetc_r+0x30>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	0598      	lsls	r0, r3, #22
 800666e:	d402      	bmi.n	8006676 <_ungetc_r+0x30>
 8006670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006672:	f7fe ff6e 	bl	8005552 <__retarget_lock_acquire_recursive>
 8006676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	0759      	lsls	r1, r3, #29
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	b29a      	uxth	r2, r3
 8006684:	d423      	bmi.n	80066ce <_ungetc_r+0x88>
 8006686:	06d3      	lsls	r3, r2, #27
 8006688:	d409      	bmi.n	800669e <_ungetc_r+0x58>
 800668a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800668c:	07dd      	lsls	r5, r3, #31
 800668e:	d4e0      	bmi.n	8006652 <_ungetc_r+0xc>
 8006690:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006694:	d1dd      	bne.n	8006652 <_ungetc_r+0xc>
 8006696:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006698:	f7fe ff5c 	bl	8005554 <__retarget_lock_release_recursive>
 800669c:	e7d9      	b.n	8006652 <_ungetc_r+0xc>
 800669e:	0710      	lsls	r0, r2, #28
 80066a0:	d511      	bpl.n	80066c6 <_ungetc_r+0x80>
 80066a2:	4621      	mov	r1, r4
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff fead 	bl	8006404 <_fflush_r>
 80066aa:	b130      	cbz	r0, 80066ba <_ungetc_r+0x74>
 80066ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d4cf      	bmi.n	8006652 <_ungetc_r+0xc>
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f413 7f00 	tst.w	r3, #512	; 0x200
 80066b8:	e7ec      	b.n	8006694 <_ungetc_r+0x4e>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	60a0      	str	r0, [r4, #8]
 80066be:	f023 0308 	bic.w	r3, r3, #8
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	61a0      	str	r0, [r4, #24]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0304 	orr.w	r3, r3, #4
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	b2ed      	uxtb	r5, r5
 80066d4:	b1d3      	cbz	r3, 800670c <_ungetc_r+0xc6>
 80066d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d8:	4293      	cmp	r3, r2
 80066da:	dc05      	bgt.n	80066e8 <_ungetc_r+0xa2>
 80066dc:	4621      	mov	r1, r4
 80066de:	4630      	mov	r0, r6
 80066e0:	f7ff ff77 	bl	80065d2 <__submore>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d1e1      	bne.n	80066ac <_ungetc_r+0x66>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	1e5a      	subs	r2, r3, #1
 80066ec:	6022      	str	r2, [r4, #0]
 80066ee:	f803 5c01 	strb.w	r5, [r3, #-1]
 80066f2:	6863      	ldr	r3, [r4, #4]
 80066f4:	3301      	adds	r3, #1
 80066f6:	6063      	str	r3, [r4, #4]
 80066f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066fa:	07da      	lsls	r2, r3, #31
 80066fc:	d4ab      	bmi.n	8006656 <_ungetc_r+0x10>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	059b      	lsls	r3, r3, #22
 8006702:	d4a8      	bmi.n	8006656 <_ungetc_r+0x10>
 8006704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006706:	f7fe ff25 	bl	8005554 <__retarget_lock_release_recursive>
 800670a:	e7a4      	b.n	8006656 <_ungetc_r+0x10>
 800670c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800670e:	6920      	ldr	r0, [r4, #16]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	f001 0101 	and.w	r1, r1, #1
 8006716:	b160      	cbz	r0, 8006732 <_ungetc_r+0xec>
 8006718:	4298      	cmp	r0, r3
 800671a:	d20a      	bcs.n	8006732 <_ungetc_r+0xec>
 800671c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006720:	42a8      	cmp	r0, r5
 8006722:	d106      	bne.n	8006732 <_ungetc_r+0xec>
 8006724:	3b01      	subs	r3, #1
 8006726:	3201      	adds	r2, #1
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	6062      	str	r2, [r4, #4]
 800672c:	2900      	cmp	r1, #0
 800672e:	d192      	bne.n	8006656 <_ungetc_r+0x10>
 8006730:	e7e5      	b.n	80066fe <_ungetc_r+0xb8>
 8006732:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800673a:	6363      	str	r3, [r4, #52]	; 0x34
 800673c:	2303      	movs	r3, #3
 800673e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006740:	4623      	mov	r3, r4
 8006742:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	2301      	movs	r3, #1
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	e7ee      	b.n	800672c <_ungetc_r+0xe6>

0800674e <__swbuf_r>:
 800674e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006750:	460e      	mov	r6, r1
 8006752:	4614      	mov	r4, r2
 8006754:	4605      	mov	r5, r0
 8006756:	b118      	cbz	r0, 8006760 <__swbuf_r+0x12>
 8006758:	6a03      	ldr	r3, [r0, #32]
 800675a:	b90b      	cbnz	r3, 8006760 <__swbuf_r+0x12>
 800675c:	f7fe fde2 	bl	8005324 <__sinit>
 8006760:	69a3      	ldr	r3, [r4, #24]
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	89a3      	ldrh	r3, [r4, #12]
 8006766:	071a      	lsls	r2, r3, #28
 8006768:	d525      	bpl.n	80067b6 <__swbuf_r+0x68>
 800676a:	6923      	ldr	r3, [r4, #16]
 800676c:	b31b      	cbz	r3, 80067b6 <__swbuf_r+0x68>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	1a98      	subs	r0, r3, r2
 8006774:	6963      	ldr	r3, [r4, #20]
 8006776:	b2f6      	uxtb	r6, r6
 8006778:	4283      	cmp	r3, r0
 800677a:	4637      	mov	r7, r6
 800677c:	dc04      	bgt.n	8006788 <__swbuf_r+0x3a>
 800677e:	4621      	mov	r1, r4
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fe3f 	bl	8006404 <_fflush_r>
 8006786:	b9e0      	cbnz	r0, 80067c2 <__swbuf_r+0x74>
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	3b01      	subs	r3, #1
 800678c:	60a3      	str	r3, [r4, #8]
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	6022      	str	r2, [r4, #0]
 8006794:	701e      	strb	r6, [r3, #0]
 8006796:	6962      	ldr	r2, [r4, #20]
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	429a      	cmp	r2, r3
 800679c:	d004      	beq.n	80067a8 <__swbuf_r+0x5a>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	07db      	lsls	r3, r3, #31
 80067a2:	d506      	bpl.n	80067b2 <__swbuf_r+0x64>
 80067a4:	2e0a      	cmp	r6, #10
 80067a6:	d104      	bne.n	80067b2 <__swbuf_r+0x64>
 80067a8:	4621      	mov	r1, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7ff fe2a 	bl	8006404 <_fflush_r>
 80067b0:	b938      	cbnz	r0, 80067c2 <__swbuf_r+0x74>
 80067b2:	4638      	mov	r0, r7
 80067b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b6:	4621      	mov	r1, r4
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f805 	bl	80067c8 <__swsetup_r>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d0d5      	beq.n	800676e <__swbuf_r+0x20>
 80067c2:	f04f 37ff 	mov.w	r7, #4294967295
 80067c6:	e7f4      	b.n	80067b2 <__swbuf_r+0x64>

080067c8 <__swsetup_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4b2a      	ldr	r3, [pc, #168]	; (8006874 <__swsetup_r+0xac>)
 80067cc:	4605      	mov	r5, r0
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	460c      	mov	r4, r1
 80067d2:	b118      	cbz	r0, 80067dc <__swsetup_r+0x14>
 80067d4:	6a03      	ldr	r3, [r0, #32]
 80067d6:	b90b      	cbnz	r3, 80067dc <__swsetup_r+0x14>
 80067d8:	f7fe fda4 	bl	8005324 <__sinit>
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067e2:	0718      	lsls	r0, r3, #28
 80067e4:	d422      	bmi.n	800682c <__swsetup_r+0x64>
 80067e6:	06d9      	lsls	r1, r3, #27
 80067e8:	d407      	bmi.n	80067fa <__swsetup_r+0x32>
 80067ea:	2309      	movs	r3, #9
 80067ec:	602b      	str	r3, [r5, #0]
 80067ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	e034      	b.n	8006864 <__swsetup_r+0x9c>
 80067fa:	0758      	lsls	r0, r3, #29
 80067fc:	d512      	bpl.n	8006824 <__swsetup_r+0x5c>
 80067fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006800:	b141      	cbz	r1, 8006814 <__swsetup_r+0x4c>
 8006802:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006806:	4299      	cmp	r1, r3
 8006808:	d002      	beq.n	8006810 <__swsetup_r+0x48>
 800680a:	4628      	mov	r0, r5
 800680c:	f7fe fea4 	bl	8005558 <_free_r>
 8006810:	2300      	movs	r3, #0
 8006812:	6363      	str	r3, [r4, #52]	; 0x34
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	2300      	movs	r3, #0
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	6023      	str	r3, [r4, #0]
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f043 0308 	orr.w	r3, r3, #8
 800682a:	81a3      	strh	r3, [r4, #12]
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	b94b      	cbnz	r3, 8006844 <__swsetup_r+0x7c>
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683a:	d003      	beq.n	8006844 <__swsetup_r+0x7c>
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f000 f986 	bl	8006b50 <__smakebuf_r>
 8006844:	89a0      	ldrh	r0, [r4, #12]
 8006846:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684a:	f010 0301 	ands.w	r3, r0, #1
 800684e:	d00a      	beq.n	8006866 <__swsetup_r+0x9e>
 8006850:	2300      	movs	r3, #0
 8006852:	60a3      	str	r3, [r4, #8]
 8006854:	6963      	ldr	r3, [r4, #20]
 8006856:	425b      	negs	r3, r3
 8006858:	61a3      	str	r3, [r4, #24]
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	b943      	cbnz	r3, 8006870 <__swsetup_r+0xa8>
 800685e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006862:	d1c4      	bne.n	80067ee <__swsetup_r+0x26>
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	0781      	lsls	r1, r0, #30
 8006868:	bf58      	it	pl
 800686a:	6963      	ldrpl	r3, [r4, #20]
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	e7f4      	b.n	800685a <__swsetup_r+0x92>
 8006870:	2000      	movs	r0, #0
 8006872:	e7f7      	b.n	8006864 <__swsetup_r+0x9c>
 8006874:	2000008c 	.word	0x2000008c

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d06      	ldr	r5, [pc, #24]	; (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fe3c 	bl	8001500 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	2000032c 	.word	0x2000032c

08006898 <memcpy>:
 8006898:	440a      	add	r2, r1
 800689a:	4291      	cmp	r1, r2
 800689c:	f100 33ff 	add.w	r3, r0, #4294967295
 80068a0:	d100      	bne.n	80068a4 <memcpy+0xc>
 80068a2:	4770      	bx	lr
 80068a4:	b510      	push	{r4, lr}
 80068a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ae:	4291      	cmp	r1, r2
 80068b0:	d1f9      	bne.n	80068a6 <memcpy+0xe>
 80068b2:	bd10      	pop	{r4, pc}

080068b4 <_realloc_r>:
 80068b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b8:	4680      	mov	r8, r0
 80068ba:	4614      	mov	r4, r2
 80068bc:	460e      	mov	r6, r1
 80068be:	b921      	cbnz	r1, 80068ca <_realloc_r+0x16>
 80068c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	4611      	mov	r1, r2
 80068c6:	f7fe beb3 	b.w	8005630 <_malloc_r>
 80068ca:	b92a      	cbnz	r2, 80068d8 <_realloc_r+0x24>
 80068cc:	f7fe fe44 	bl	8005558 <_free_r>
 80068d0:	4625      	mov	r5, r4
 80068d2:	4628      	mov	r0, r5
 80068d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d8:	f000 f998 	bl	8006c0c <_malloc_usable_size_r>
 80068dc:	4284      	cmp	r4, r0
 80068de:	4607      	mov	r7, r0
 80068e0:	d802      	bhi.n	80068e8 <_realloc_r+0x34>
 80068e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068e6:	d812      	bhi.n	800690e <_realloc_r+0x5a>
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7fe fea0 	bl	8005630 <_malloc_r>
 80068f0:	4605      	mov	r5, r0
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d0ed      	beq.n	80068d2 <_realloc_r+0x1e>
 80068f6:	42bc      	cmp	r4, r7
 80068f8:	4622      	mov	r2, r4
 80068fa:	4631      	mov	r1, r6
 80068fc:	bf28      	it	cs
 80068fe:	463a      	movcs	r2, r7
 8006900:	f7ff ffca 	bl	8006898 <memcpy>
 8006904:	4631      	mov	r1, r6
 8006906:	4640      	mov	r0, r8
 8006908:	f7fe fe26 	bl	8005558 <_free_r>
 800690c:	e7e1      	b.n	80068d2 <_realloc_r+0x1e>
 800690e:	4635      	mov	r5, r6
 8006910:	e7df      	b.n	80068d2 <_realloc_r+0x1e>
	...

08006914 <_strtol_l.constprop.0>:
 8006914:	2b01      	cmp	r3, #1
 8006916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691a:	d001      	beq.n	8006920 <_strtol_l.constprop.0+0xc>
 800691c:	2b24      	cmp	r3, #36	; 0x24
 800691e:	d906      	bls.n	800692e <_strtol_l.constprop.0+0x1a>
 8006920:	f7fe fdec 	bl	80054fc <__errno>
 8006924:	2316      	movs	r3, #22
 8006926:	6003      	str	r3, [r0, #0]
 8006928:	2000      	movs	r0, #0
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006a14 <_strtol_l.constprop.0+0x100>
 8006932:	460d      	mov	r5, r1
 8006934:	462e      	mov	r6, r5
 8006936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800693a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800693e:	f017 0708 	ands.w	r7, r7, #8
 8006942:	d1f7      	bne.n	8006934 <_strtol_l.constprop.0+0x20>
 8006944:	2c2d      	cmp	r4, #45	; 0x2d
 8006946:	d132      	bne.n	80069ae <_strtol_l.constprop.0+0x9a>
 8006948:	782c      	ldrb	r4, [r5, #0]
 800694a:	2701      	movs	r7, #1
 800694c:	1cb5      	adds	r5, r6, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d05b      	beq.n	8006a0a <_strtol_l.constprop.0+0xf6>
 8006952:	2b10      	cmp	r3, #16
 8006954:	d109      	bne.n	800696a <_strtol_l.constprop.0+0x56>
 8006956:	2c30      	cmp	r4, #48	; 0x30
 8006958:	d107      	bne.n	800696a <_strtol_l.constprop.0+0x56>
 800695a:	782c      	ldrb	r4, [r5, #0]
 800695c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006960:	2c58      	cmp	r4, #88	; 0x58
 8006962:	d14d      	bne.n	8006a00 <_strtol_l.constprop.0+0xec>
 8006964:	786c      	ldrb	r4, [r5, #1]
 8006966:	2310      	movs	r3, #16
 8006968:	3502      	adds	r5, #2
 800696a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800696e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006972:	f04f 0e00 	mov.w	lr, #0
 8006976:	fbb8 f9f3 	udiv	r9, r8, r3
 800697a:	4676      	mov	r6, lr
 800697c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006980:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006984:	f1bc 0f09 	cmp.w	ip, #9
 8006988:	d816      	bhi.n	80069b8 <_strtol_l.constprop.0+0xa4>
 800698a:	4664      	mov	r4, ip
 800698c:	42a3      	cmp	r3, r4
 800698e:	dd24      	ble.n	80069da <_strtol_l.constprop.0+0xc6>
 8006990:	f1be 3fff 	cmp.w	lr, #4294967295
 8006994:	d008      	beq.n	80069a8 <_strtol_l.constprop.0+0x94>
 8006996:	45b1      	cmp	r9, r6
 8006998:	d31c      	bcc.n	80069d4 <_strtol_l.constprop.0+0xc0>
 800699a:	d101      	bne.n	80069a0 <_strtol_l.constprop.0+0x8c>
 800699c:	45a2      	cmp	sl, r4
 800699e:	db19      	blt.n	80069d4 <_strtol_l.constprop.0+0xc0>
 80069a0:	fb06 4603 	mla	r6, r6, r3, r4
 80069a4:	f04f 0e01 	mov.w	lr, #1
 80069a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069ac:	e7e8      	b.n	8006980 <_strtol_l.constprop.0+0x6c>
 80069ae:	2c2b      	cmp	r4, #43	; 0x2b
 80069b0:	bf04      	itt	eq
 80069b2:	782c      	ldrbeq	r4, [r5, #0]
 80069b4:	1cb5      	addeq	r5, r6, #2
 80069b6:	e7ca      	b.n	800694e <_strtol_l.constprop.0+0x3a>
 80069b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80069bc:	f1bc 0f19 	cmp.w	ip, #25
 80069c0:	d801      	bhi.n	80069c6 <_strtol_l.constprop.0+0xb2>
 80069c2:	3c37      	subs	r4, #55	; 0x37
 80069c4:	e7e2      	b.n	800698c <_strtol_l.constprop.0+0x78>
 80069c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80069ca:	f1bc 0f19 	cmp.w	ip, #25
 80069ce:	d804      	bhi.n	80069da <_strtol_l.constprop.0+0xc6>
 80069d0:	3c57      	subs	r4, #87	; 0x57
 80069d2:	e7db      	b.n	800698c <_strtol_l.constprop.0+0x78>
 80069d4:	f04f 3eff 	mov.w	lr, #4294967295
 80069d8:	e7e6      	b.n	80069a8 <_strtol_l.constprop.0+0x94>
 80069da:	f1be 3fff 	cmp.w	lr, #4294967295
 80069de:	d105      	bne.n	80069ec <_strtol_l.constprop.0+0xd8>
 80069e0:	2322      	movs	r3, #34	; 0x22
 80069e2:	6003      	str	r3, [r0, #0]
 80069e4:	4646      	mov	r6, r8
 80069e6:	b942      	cbnz	r2, 80069fa <_strtol_l.constprop.0+0xe6>
 80069e8:	4630      	mov	r0, r6
 80069ea:	e79e      	b.n	800692a <_strtol_l.constprop.0+0x16>
 80069ec:	b107      	cbz	r7, 80069f0 <_strtol_l.constprop.0+0xdc>
 80069ee:	4276      	negs	r6, r6
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	d0f9      	beq.n	80069e8 <_strtol_l.constprop.0+0xd4>
 80069f4:	f1be 0f00 	cmp.w	lr, #0
 80069f8:	d000      	beq.n	80069fc <_strtol_l.constprop.0+0xe8>
 80069fa:	1e69      	subs	r1, r5, #1
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	e7f3      	b.n	80069e8 <_strtol_l.constprop.0+0xd4>
 8006a00:	2430      	movs	r4, #48	; 0x30
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1b1      	bne.n	800696a <_strtol_l.constprop.0+0x56>
 8006a06:	2308      	movs	r3, #8
 8006a08:	e7af      	b.n	800696a <_strtol_l.constprop.0+0x56>
 8006a0a:	2c30      	cmp	r4, #48	; 0x30
 8006a0c:	d0a5      	beq.n	800695a <_strtol_l.constprop.0+0x46>
 8006a0e:	230a      	movs	r3, #10
 8006a10:	e7ab      	b.n	800696a <_strtol_l.constprop.0+0x56>
 8006a12:	bf00      	nop
 8006a14:	08007957 	.word	0x08007957

08006a18 <_strtol_r>:
 8006a18:	f7ff bf7c 	b.w	8006914 <_strtol_l.constprop.0>

08006a1c <_strtoul_l.constprop.0>:
 8006a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a20:	4f36      	ldr	r7, [pc, #216]	; (8006afc <_strtoul_l.constprop.0+0xe0>)
 8006a22:	4686      	mov	lr, r0
 8006a24:	460d      	mov	r5, r1
 8006a26:	4628      	mov	r0, r5
 8006a28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a2c:	5d3e      	ldrb	r6, [r7, r4]
 8006a2e:	f016 0608 	ands.w	r6, r6, #8
 8006a32:	d1f8      	bne.n	8006a26 <_strtoul_l.constprop.0+0xa>
 8006a34:	2c2d      	cmp	r4, #45	; 0x2d
 8006a36:	d130      	bne.n	8006a9a <_strtoul_l.constprop.0+0x7e>
 8006a38:	782c      	ldrb	r4, [r5, #0]
 8006a3a:	2601      	movs	r6, #1
 8006a3c:	1c85      	adds	r5, r0, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d057      	beq.n	8006af2 <_strtoul_l.constprop.0+0xd6>
 8006a42:	2b10      	cmp	r3, #16
 8006a44:	d109      	bne.n	8006a5a <_strtoul_l.constprop.0+0x3e>
 8006a46:	2c30      	cmp	r4, #48	; 0x30
 8006a48:	d107      	bne.n	8006a5a <_strtoul_l.constprop.0+0x3e>
 8006a4a:	7828      	ldrb	r0, [r5, #0]
 8006a4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006a50:	2858      	cmp	r0, #88	; 0x58
 8006a52:	d149      	bne.n	8006ae8 <_strtoul_l.constprop.0+0xcc>
 8006a54:	786c      	ldrb	r4, [r5, #1]
 8006a56:	2310      	movs	r3, #16
 8006a58:	3502      	adds	r5, #2
 8006a5a:	f04f 38ff 	mov.w	r8, #4294967295
 8006a5e:	2700      	movs	r7, #0
 8006a60:	fbb8 f8f3 	udiv	r8, r8, r3
 8006a64:	fb03 f908 	mul.w	r9, r3, r8
 8006a68:	ea6f 0909 	mvn.w	r9, r9
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006a72:	f1bc 0f09 	cmp.w	ip, #9
 8006a76:	d815      	bhi.n	8006aa4 <_strtoul_l.constprop.0+0x88>
 8006a78:	4664      	mov	r4, ip
 8006a7a:	42a3      	cmp	r3, r4
 8006a7c:	dd23      	ble.n	8006ac6 <_strtoul_l.constprop.0+0xaa>
 8006a7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8006a82:	d007      	beq.n	8006a94 <_strtoul_l.constprop.0+0x78>
 8006a84:	4580      	cmp	r8, r0
 8006a86:	d31b      	bcc.n	8006ac0 <_strtoul_l.constprop.0+0xa4>
 8006a88:	d101      	bne.n	8006a8e <_strtoul_l.constprop.0+0x72>
 8006a8a:	45a1      	cmp	r9, r4
 8006a8c:	db18      	blt.n	8006ac0 <_strtoul_l.constprop.0+0xa4>
 8006a8e:	fb00 4003 	mla	r0, r0, r3, r4
 8006a92:	2701      	movs	r7, #1
 8006a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a98:	e7e9      	b.n	8006a6e <_strtoul_l.constprop.0+0x52>
 8006a9a:	2c2b      	cmp	r4, #43	; 0x2b
 8006a9c:	bf04      	itt	eq
 8006a9e:	782c      	ldrbeq	r4, [r5, #0]
 8006aa0:	1c85      	addeq	r5, r0, #2
 8006aa2:	e7cc      	b.n	8006a3e <_strtoul_l.constprop.0+0x22>
 8006aa4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006aa8:	f1bc 0f19 	cmp.w	ip, #25
 8006aac:	d801      	bhi.n	8006ab2 <_strtoul_l.constprop.0+0x96>
 8006aae:	3c37      	subs	r4, #55	; 0x37
 8006ab0:	e7e3      	b.n	8006a7a <_strtoul_l.constprop.0+0x5e>
 8006ab2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006ab6:	f1bc 0f19 	cmp.w	ip, #25
 8006aba:	d804      	bhi.n	8006ac6 <_strtoul_l.constprop.0+0xaa>
 8006abc:	3c57      	subs	r4, #87	; 0x57
 8006abe:	e7dc      	b.n	8006a7a <_strtoul_l.constprop.0+0x5e>
 8006ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8006ac4:	e7e6      	b.n	8006a94 <_strtoul_l.constprop.0+0x78>
 8006ac6:	1c7b      	adds	r3, r7, #1
 8006ac8:	d106      	bne.n	8006ad8 <_strtoul_l.constprop.0+0xbc>
 8006aca:	2322      	movs	r3, #34	; 0x22
 8006acc:	f8ce 3000 	str.w	r3, [lr]
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	b932      	cbnz	r2, 8006ae2 <_strtoul_l.constprop.0+0xc6>
 8006ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ad8:	b106      	cbz	r6, 8006adc <_strtoul_l.constprop.0+0xc0>
 8006ada:	4240      	negs	r0, r0
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d0f9      	beq.n	8006ad4 <_strtoul_l.constprop.0+0xb8>
 8006ae0:	b107      	cbz	r7, 8006ae4 <_strtoul_l.constprop.0+0xc8>
 8006ae2:	1e69      	subs	r1, r5, #1
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	e7f5      	b.n	8006ad4 <_strtoul_l.constprop.0+0xb8>
 8006ae8:	2430      	movs	r4, #48	; 0x30
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1b5      	bne.n	8006a5a <_strtoul_l.constprop.0+0x3e>
 8006aee:	2308      	movs	r3, #8
 8006af0:	e7b3      	b.n	8006a5a <_strtoul_l.constprop.0+0x3e>
 8006af2:	2c30      	cmp	r4, #48	; 0x30
 8006af4:	d0a9      	beq.n	8006a4a <_strtoul_l.constprop.0+0x2e>
 8006af6:	230a      	movs	r3, #10
 8006af8:	e7af      	b.n	8006a5a <_strtoul_l.constprop.0+0x3e>
 8006afa:	bf00      	nop
 8006afc:	08007957 	.word	0x08007957

08006b00 <_strtoul_r>:
 8006b00:	f7ff bf8c 	b.w	8006a1c <_strtoul_l.constprop.0>

08006b04 <__swhatbuf_r>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	460c      	mov	r4, r1
 8006b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	b096      	sub	sp, #88	; 0x58
 8006b10:	4615      	mov	r5, r2
 8006b12:	461e      	mov	r6, r3
 8006b14:	da0d      	bge.n	8006b32 <__swhatbuf_r+0x2e>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006b1c:	f04f 0100 	mov.w	r1, #0
 8006b20:	bf0c      	ite	eq
 8006b22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006b26:	2340      	movne	r3, #64	; 0x40
 8006b28:	2000      	movs	r0, #0
 8006b2a:	6031      	str	r1, [r6, #0]
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	b016      	add	sp, #88	; 0x58
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	466a      	mov	r2, sp
 8006b34:	f000 f848 	bl	8006bc8 <_fstat_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dbec      	blt.n	8006b16 <__swhatbuf_r+0x12>
 8006b3c:	9901      	ldr	r1, [sp, #4]
 8006b3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006b42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006b46:	4259      	negs	r1, r3
 8006b48:	4159      	adcs	r1, r3
 8006b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b4e:	e7eb      	b.n	8006b28 <__swhatbuf_r+0x24>

08006b50 <__smakebuf_r>:
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b54:	079d      	lsls	r5, r3, #30
 8006b56:	4606      	mov	r6, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	d507      	bpl.n	8006b6c <__smakebuf_r+0x1c>
 8006b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	2301      	movs	r3, #1
 8006b66:	6163      	str	r3, [r4, #20]
 8006b68:	b002      	add	sp, #8
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	ab01      	add	r3, sp, #4
 8006b6e:	466a      	mov	r2, sp
 8006b70:	f7ff ffc8 	bl	8006b04 <__swhatbuf_r>
 8006b74:	9900      	ldr	r1, [sp, #0]
 8006b76:	4605      	mov	r5, r0
 8006b78:	4630      	mov	r0, r6
 8006b7a:	f7fe fd59 	bl	8005630 <_malloc_r>
 8006b7e:	b948      	cbnz	r0, 8006b94 <__smakebuf_r+0x44>
 8006b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b84:	059a      	lsls	r2, r3, #22
 8006b86:	d4ef      	bmi.n	8006b68 <__smakebuf_r+0x18>
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	f043 0302 	orr.w	r3, r3, #2
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	e7e3      	b.n	8006b5c <__smakebuf_r+0xc>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	6020      	str	r0, [r4, #0]
 8006b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	6163      	str	r3, [r4, #20]
 8006ba2:	9b01      	ldr	r3, [sp, #4]
 8006ba4:	6120      	str	r0, [r4, #16]
 8006ba6:	b15b      	cbz	r3, 8006bc0 <__smakebuf_r+0x70>
 8006ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 f81d 	bl	8006bec <_isatty_r>
 8006bb2:	b128      	cbz	r0, 8006bc0 <__smakebuf_r+0x70>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	431d      	orrs	r5, r3
 8006bc4:	81a5      	strh	r5, [r4, #12]
 8006bc6:	e7cf      	b.n	8006b68 <__smakebuf_r+0x18>

08006bc8 <_fstat_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_fstat_r+0x20>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	f7fa fc6b 	bl	80014b0 <_fstat>
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	d102      	bne.n	8006be4 <_fstat_r+0x1c>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	b103      	cbz	r3, 8006be4 <_fstat_r+0x1c>
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	2000032c 	.word	0x2000032c

08006bec <_isatty_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	; (8006c08 <_isatty_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa fc6a 	bl	80014d0 <_isatty>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_isatty_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_isatty_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	2000032c 	.word	0x2000032c

08006c0c <_malloc_usable_size_r>:
 8006c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c10:	1f18      	subs	r0, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	bfbc      	itt	lt
 8006c16:	580b      	ldrlt	r3, [r1, r0]
 8006c18:	18c0      	addlt	r0, r0, r3
 8006c1a:	4770      	bx	lr

08006c1c <_init>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr

08006c28 <_fini>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr
