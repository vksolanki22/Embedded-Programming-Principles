
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  0800c000  0800c000  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf58  0800cf58  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf58  0800cf58  0001cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf60  0800cf60  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf60  0800cf60  0001cf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cf68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001d4  0800d13c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800d13c  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001700b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d88  00000000  00000000  00037252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024510  00000000  00000000  0003b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188ab  00000000  00000000  0005faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df5a0  00000000  00000000  0007834b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000010d3  00000000  00000000  001578eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007330  00000000  00000000  001589c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ca  00000000  00000000  0015fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfe8 	.word	0x0800bfe8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800bfe8 	.word	0x0800bfe8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	float temperatureValue = 0.0;
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init ();
 8000ffc:	f001 fa0d 	bl	800241a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config ();
 8001000:	f000 f8ee 	bl	80011e0 <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	/* USER CODE BEGIN 2 */
	MX_GPIO_Init ();
 8001004:	f000 fae8 	bl	80015d8 <MX_GPIO_Init>
	MX_USART2_UART_Init ();
 8001008:	f000 fab6 	bl	8001578 <MX_USART2_UART_Init>
	MX_SPI1_Init ();
 800100c:	f000 f9ae 	bl	800136c <MX_SPI1_Init>
	MX_TIM1_Init ();
 8001010:	f000 f9ea 	bl	80013e8 <MX_TIM1_Init>
	MX_ADC1_Init ();
 8001014:	f000 f946 	bl	80012a4 <MX_ADC1_Init>
	ssd1331_init ();
 8001018:	f000 fe94 	bl	8001d44 <ssd1331_init>

	/* Run the ADC calibration in single-ended mode */
	if (HAL_ADCEx_Calibration_Start (&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800101c:	217f      	movs	r1, #127	; 0x7f
 800101e:	4863      	ldr	r0, [pc, #396]	; (80011ac <main+0x1bc>)
 8001020:	f002 fcce 	bl	80039c0 <HAL_ADCEx_Calibration_Start>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x3e>
	{
		/* Calibration Error */
		Error_Handler ();
 800102a:	f000 fd31 	bl	8001a90 <Error_Handler>

	/*
	 * Note : for the n channels HAL_TIMEx_PWMN_Start() is used
	 * for normal channels HAL_TIM_PWM_Start
	 */
	HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_1);
 800102e:	2100      	movs	r1, #0
 8001030:	485f      	ldr	r0, [pc, #380]	; (80011b0 <main+0x1c0>)
 8001032:	f005 fbdb 	bl	80067ec <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8001036:	2104      	movs	r1, #4
 8001038:	485d      	ldr	r0, [pc, #372]	; (80011b0 <main+0x1c0>)
 800103a:	f004 fd79 	bl	8005b30 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800103e:	2108      	movs	r1, #8
 8001040:	485b      	ldr	r0, [pc, #364]	; (80011b0 <main+0x1c0>)
 8001042:	f004 fd75 	bl	8005b30 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/*##-3- Start the conversion process #######################################*/
		if (HAL_ADC_Start (&hadc1) != HAL_OK)
 8001046:	4859      	ldr	r0, [pc, #356]	; (80011ac <main+0x1bc>)
 8001048:	f001 fdd8 	bl	8002bfc <HAL_ADC_Start>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <main+0x66>
		{
			/* Start Conversation Error */
			Error_Handler ();
 8001052:	f000 fd1d 	bl	8001a90 <Error_Handler>

		/*##-4- Wait for the end of conversion #####################################*/
		/*  For simplicity reasons, this example is just waiting till the end of the
		 conversion, but application may perform other tasks while conversion
		 operation is ongoing. */
		if (HAL_ADC_PollForConversion (&hadc1, 10) != HAL_OK)
 8001056:	210a      	movs	r1, #10
 8001058:	4854      	ldr	r0, [pc, #336]	; (80011ac <main+0x1bc>)
 800105a:	f001 fe65 	bl	8002d28 <HAL_ADC_PollForConversion>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <main+0x7a>
		{
			/* End Of Conversion flag not set on time */
			Error_Handler ();
 8001064:	f000 fd14 	bl	8001a90 <Error_Handler>
 8001068:	e7ed      	b.n	8001046 <main+0x56>
		}
		else
		{
			/* ADC conversion completed */
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue (&hadc1);
 800106a:	4850      	ldr	r0, [pc, #320]	; (80011ac <main+0x1bc>)
 800106c:	f001 feeb 	bl	8002e46 <HAL_ADC_GetValue>
 8001070:	4603      	mov	r3, r0
 8001072:	4a50      	ldr	r2, [pc, #320]	; (80011b4 <main+0x1c4>)
 8001074:	6013      	str	r3, [r2, #0]
			buttonState = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11);
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f002 ff4f 	bl	8003f20 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <main+0x1c8>)
 8001088:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop (&hadc1);
 800108a:	4848      	ldr	r0, [pc, #288]	; (80011ac <main+0x1bc>)
 800108c:	f001 fe19 	bl	8002cc2 <HAL_ADC_Stop>
			print_flag++;
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <main+0x1cc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <main+0x1cc>)
 8001098:	6013      	str	r3, [r2, #0]

			if (print_flag == 1000)
 800109a:	4b48      	ldr	r3, [pc, #288]	; (80011bc <main+0x1cc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a2:	d102      	bne.n	80010aa <main+0xba>
			{
				print_flag = 0;
 80010a4:	4b45      	ldr	r3, [pc, #276]	; (80011bc <main+0x1cc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
			}

			// convert sensor value to TempratureValue
			temperatureValue = getTempratureValue (uhADCxConvertedValue);
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <main+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fb2e 	bl	8001710 <getTempratureValue>
 80010b4:	ed87 0a01 	vstr	s0, [r7, #4]

			// Derive temparature unit to be displayed
			if (buttonState == GPIO_PIN_RESET)
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <main+0x1c8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <main+0xe8>
			{
				if (temperatureUnit == TEMPERATURE_UNIT_CELSIUS)
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <main+0x1d0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <main+0xe2>
				{
					temperatureUnit = TEMPERATURE_UNIT_FAHRENHEIT;
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <main+0x1d0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e002      	b.n	80010d8 <main+0xe8>
				}
				else
				{
					temperatureUnit = TEMPERATURE_UNIT_CELSIUS;
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <main+0x1d0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
				}
			}

			// Making string to be printed on OLED Display with Temparature unit with Button state
			if (temperatureUnit == TEMPERATURE_UNIT_FAHRENHEIT)
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <main+0x1d0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d12f      	bne.n	8001140 <main+0x150>
			{
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f",
				                 conevertToFerenhit (temperatureValue));
 80010e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80010e4:	f000 fb56 	bl	8001794 <conevertToFerenhit>
 80010e8:	ee10 3a10 	vmov	r3, s0
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f",
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9cd 2300 	strd	r2, r3, [sp]
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <main+0x1d4>)
 80010fc:	210e      	movs	r1, #14
 80010fe:	4832      	ldr	r0, [pc, #200]	; (80011c8 <main+0x1d8>)
 8001100:	f007 fa9e 	bl	8008640 <sniprintf>
 8001104:	4603      	mov	r3, r0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b30      	ldr	r3, [pc, #192]	; (80011cc <main+0x1dc>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <main+0x1dc>)
 8001112:	701a      	strb	r2, [r3, #0]
				snprintf (tempSign + idx, sizeof(tempSign) - idx, "%s", " F");
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <main+0x1dc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <main+0x1d8>)
 800111c:	18d0      	adds	r0, r2, r3
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <main+0x1dc>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	f1c3 010e 	rsb	r1, r3, #14
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <main+0x1e0>)
 8001128:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <main+0x1e4>)
 800112a:	f007 fa89 	bl	8008640 <sniprintf>
#ifdef DEBUG_ON
				printf ("buttonState = %d, tempSign = %s\r\n", buttonState, tempSign);
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <main+0x1c8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <main+0x1d8>)
 8001136:	4619      	mov	r1, r3
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <main+0x1e8>)
 800113a:	f007 fa13 	bl	8008564 <iprintf>
 800113e:	e028      	b.n	8001192 <main+0x1a2>
#endif

			}
			else
			{
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f", temperatureValue);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fa01 	bl	8000548 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9cd 2300 	strd	r2, r3, [sp]
 800114e:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <main+0x1d4>)
 8001150:	210e      	movs	r1, #14
 8001152:	481d      	ldr	r0, [pc, #116]	; (80011c8 <main+0x1d8>)
 8001154:	f007 fa74 	bl	8008640 <sniprintf>
 8001158:	4603      	mov	r3, r0
 800115a:	b2da      	uxtb	r2, r3
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <main+0x1dc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4413      	add	r3, r2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <main+0x1dc>)
 8001166:	701a      	strb	r2, [r3, #0]
				snprintf (tempSign + idx, sizeof(tempSign) - idx, "%s", " C");
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <main+0x1dc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <main+0x1d8>)
 8001170:	18d0      	adds	r0, r2, r3
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <main+0x1dc>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f1c3 010e 	rsb	r1, r3, #14
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <main+0x1ec>)
 800117c:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <main+0x1e4>)
 800117e:	f007 fa5f 	bl	8008640 <sniprintf>
#ifdef DEBUG_ON
				printf ("buttonState = %d, tempSign = %s\r\n", buttonState, tempSign);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <main+0x1c8>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <main+0x1d8>)
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	; (80011d8 <main+0x1e8>)
 800118e:	f007 f9e9 	bl	8008564 <iprintf>
#endif
			}
			idx = 0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0x1dc>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]

			// Sets Colour on RGB LED
			displayTemparatureAndGlowColour (temperatureValue);
 8001198:	ed97 0a01 	vldr	s0, [r7, #4]
 800119c:	f000 fb10 	bl	80017c0 <displayTemparatureAndGlowColour>

			// Delay to take update temparature
			HAL_Delay (500);
 80011a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a4:	f001 f9ae 	bl	8002504 <HAL_Delay>
		if (HAL_ADC_Start (&hadc1) != HAL_OK)
 80011a8:	e74d      	b.n	8001046 <main+0x56>
 80011aa:	bf00      	nop
 80011ac:	200001f0 	.word	0x200001f0
 80011b0:	200002b8 	.word	0x200002b8
 80011b4:	2000038c 	.word	0x2000038c
 80011b8:	20000390 	.word	0x20000390
 80011bc:	20000394 	.word	0x20000394
 80011c0:	20000391 	.word	0x20000391
 80011c4:	0800c000 	.word	0x0800c000
 80011c8:	2000039c 	.word	0x2000039c
 80011cc:	20000398 	.word	0x20000398
 80011d0:	0800c008 	.word	0x0800c008
 80011d4:	0800c00c 	.word	0x0800c00c
 80011d8:	0800c010 	.word	0x0800c010
 80011dc:	0800c034 	.word	0x0800c034

080011e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b096      	sub	sp, #88	; 0x58
 80011e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 fb52 	bl	8008898 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f002 fed9 	bl	8003fbc <HAL_PWREx_ControlVoltageScaling>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x34>
	{
		Error_Handler ();
 8001210:	f000 fc3e 	bl	8001a90 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8001214:	f002 feb4 	bl	8003f80 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <SystemClock_Config+0xc0>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <SystemClock_Config+0xc0>)
 8001220:	f023 0318 	bic.w	r3, r3, #24
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001228:	2314      	movs	r3, #20
 800122a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123c:	2302      	movs	r3, #2
 800123e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001240:	2301      	movs	r3, #1
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001244:	2301      	movs	r3, #1
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001248:	2310      	movs	r3, #16
 800124a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800124c:	2307      	movs	r3, #7
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001254:	2302      	movs	r3, #2
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f002 ff03 	bl	8004068 <HAL_RCC_OscConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0x8c>
	{
		Error_Handler ();
 8001268:	f000 fc12 	bl	8001a90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800126c:	230f      	movs	r3, #15
 800126e:	603b      	str	r3, [r7, #0]
	                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001270:	2303      	movs	r3, #3
 8001272:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fb03 	bl	8004890 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xb4>
	{
		Error_Handler ();
 8001290:	f000 fbfe 	bl	8001a90 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 8001294:	f003 ff16 	bl	80050c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001298:	bf00      	nop
 800129a:	3758      	adds	r7, #88	; 0x58
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40021000 	.word	0x40021000

080012a4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <MX_ADC1_Init+0xc0>)
 80012be:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012d2:	4b23      	ldr	r3, [pc, #140]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d8:	4b21      	ldr	r3, [pc, #132]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012da:	2204      	movs	r2, #4
 80012dc:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_ADC1_Init+0xbc>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_ADC1_Init+0xbc>)
 8001300:	2200      	movs	r2, #0
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_ADC1_Init+0xbc>)
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_ADC1_Init+0xbc>)
 800130e:	2200      	movs	r2, #0
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_ADC1_Init+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init (&hadc1) != HAL_OK)
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <MX_ADC1_Init+0xbc>)
 800131c:	f001 fb2c 	bl	8002978 <HAL_ADC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x86>
	{
		Error_Handler ();
 8001326:	f000 fbb3 	bl	8001a90 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_ADC1_Init+0xc4>)
 800132c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800132e:	2306      	movs	r3, #6
 8001330:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001336:	237f      	movs	r3, #127	; 0x7f
 8001338:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133a:	2304      	movs	r3, #4
 800133c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_ADC1_Init+0xbc>)
 8001348:	f001 fd8a 	bl	8002e60 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0xb2>
	{
		Error_Handler ();
 8001352:	f000 fb9d 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001f0 	.word	0x200001f0
 8001364:	50040000 	.word	0x50040000
 8001368:	14f00020 	.word	0x14f00020

0800136c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_SPI1_Init+0x78>)
 8001374:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800138a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_SPI1_Init+0x74>)
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013ba:	2207      	movs	r2, #7
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_SPI1_Init+0x74>)
 80013cc:	f003 ff7c 	bl	80052c8 <HAL_SPI_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_SPI1_Init+0x6e>
	{
		Error_Handler ();
 80013d6:	f000 fb5b 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000254 	.word	0x20000254
 80013e4:	40013000 	.word	0x40013000

080013e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b09a      	sub	sp, #104	; 0x68
 80013ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	222c      	movs	r2, #44	; 0x2c
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f007 fa38 	bl	8008898 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001428:	4b51      	ldr	r3, [pc, #324]	; (8001570 <MX_TIM1_Init+0x188>)
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <MX_TIM1_Init+0x18c>)
 800142c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8;
 800142e:	4b50      	ldr	r3, [pc, #320]	; (8001570 <MX_TIM1_Init+0x188>)
 8001430:	2208      	movs	r2, #8
 8001432:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <MX_TIM1_Init+0x188>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100;
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <MX_TIM1_Init+0x188>)
 800143c:	2264      	movs	r2, #100	; 0x64
 800143e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <MX_TIM1_Init+0x188>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001446:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <MX_TIM1_Init+0x188>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <MX_TIM1_Init+0x188>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init (&htim1) != HAL_OK)
 8001452:	4847      	ldr	r0, [pc, #284]	; (8001570 <MX_TIM1_Init+0x188>)
 8001454:	f004 fab4 	bl	80059c0 <HAL_TIM_Base_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x7a>
	{
		Error_Handler ();
 800145e:	f000 fb17 	bl	8001a90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001466:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource (&htim1, &sClockSourceConfig) != HAL_OK)
 8001468:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800146c:	4619      	mov	r1, r3
 800146e:	4840      	ldr	r0, [pc, #256]	; (8001570 <MX_TIM1_Init+0x188>)
 8001470:	f004 fd50 	bl	8005f14 <HAL_TIM_ConfigClockSource>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0x96>
	{
		Error_Handler ();
 800147a:	f000 fb09 	bl	8001a90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init (&htim1) != HAL_OK)
 800147e:	483c      	ldr	r0, [pc, #240]	; (8001570 <MX_TIM1_Init+0x188>)
 8001480:	f004 faf5 	bl	8005a6e <HAL_TIM_PWM_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xa6>
	{
		Error_Handler ();
 800148a:	f000 fb01 	bl	8001a90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization (&htim1, &sMasterConfig) != HAL_OK)
 800149a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149e:	4619      	mov	r1, r3
 80014a0:	4833      	ldr	r0, [pc, #204]	; (8001570 <MX_TIM1_Init+0x188>)
 80014a2:	f005 fa41 	bl	8006928 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0xc8>
	{
		Error_Handler ();
 80014ac:	f000 faf0 	bl	8001a90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	; 0x60
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 100;
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4826      	ldr	r0, [pc, #152]	; (8001570 <MX_TIM1_Init+0x188>)
 80014d6:	f004 fc09 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0xfc>
	{
		Error_Handler ();
 80014e0:	f000 fad6 	bl	8001a90 <Error_Handler>
	}
	sConfigOC.Pulse = 120;
 80014e4:	2378      	movs	r3, #120	; 0x78
 80014e6:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ec:	2204      	movs	r2, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <MX_TIM1_Init+0x188>)
 80014f2:	f004 fbfb 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x118>
	{
		Error_Handler ();
 80014fc:	f000 fac8 	bl	8001a90 <Error_Handler>
	}
	sConfigOC.Pulse = 130;
 8001500:	2382      	movs	r3, #130	; 0x82
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001504:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001508:	2208      	movs	r2, #8
 800150a:	4619      	mov	r1, r3
 800150c:	4818      	ldr	r0, [pc, #96]	; (8001570 <MX_TIM1_Init+0x188>)
 800150e:	f004 fbed 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0x134>
	{
		Error_Handler ();
 8001518:	f000 faba 	bl	8001a90 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800153e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput =
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime (&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x188>)
 8001552:	f005 fa4f 	bl	80069f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x178>
	{
		Error_Handler ();
 800155c:	f000 fa98 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x188>)
 8001562:	f000 fd87 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001566:	bf00      	nop
 8001568:	3768      	adds	r7, #104	; 0x68
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002b8 	.word	0x200002b8
 8001574:	40012c00 	.word	0x40012c00

08001578 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800157e:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <MX_USART2_UART_Init+0x5c>)
 8001580:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init (&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_USART2_UART_Init+0x58>)
 80015bc:	f005 fab7 	bl	8006b2e <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x52>
	{
		Error_Handler ();
 80015c6:	f000 fa63 	bl	8001a90 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000304 	.word	0x20000304
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_GPIO_Init+0xa8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_GPIO_Init+0xa8>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_GPIO_Init+0xa8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <MX_GPIO_Init+0xa8>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <MX_GPIO_Init+0xa8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_GPIO_Init+0xa8>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_GPIO_Init+0xa8>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <MX_GPIO_Init+0xa8>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_GPIO_Init+0xa8>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (
 8001636:	2200      	movs	r2, #0
 8001638:	2178      	movs	r1, #120	; 0x78
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <MX_GPIO_Init+0xac>)
 800163c:	f002 fc88 	bl	8003f50 <HAL_GPIO_WritePin>
	GPIOB,
	                   LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin,
	                   GPIO_PIN_RESET);

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001640:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001644:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	2301      	movs	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f002 faf8 	bl	8003c4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin;
 800165c:	2378      	movs	r3, #120	; 0x78
 800165e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	4804      	ldr	r0, [pc, #16]	; (8001684 <MX_GPIO_Init+0xac>)
 8001674:	f002 faea 	bl	8003c4c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	48000400 	.word	0x48000400

08001688 <setPwmDutyCycle>:
 * DESCRIPTION   : This function sets the duty cycle for timer 1's
 *				 	whatever channel number is passed.
 *******************************************************************************
 */
void setPwmDutyCycle(ChannelNum_e timer_channel_num, uint16_t percentage)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	80bb      	strh	r3, [r7, #4]
	if (percentage > 100)
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <setPwmDutyCycle+0x1a>
	{
		percentage = 100;
 800169e:	2364      	movs	r3, #100	; 0x64
 80016a0:	80bb      	strh	r3, [r7, #4]
	}
	else if (percentage < 0)
	{
		percentage = 0;
	}
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d104      	bne.n	80016b2 <setPwmDutyCycle+0x2a>
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <setPwmDutyCycle+0x80>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	88ba      	ldrh	r2, [r7, #4]
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016b0:	e023      	b.n	80016fa <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d104      	bne.n	80016c2 <setPwmDutyCycle+0x3a>
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <setPwmDutyCycle+0x80>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016c0:	e01b      	b.n	80016fa <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d104      	bne.n	80016d2 <setPwmDutyCycle+0x4a>
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <setPwmDutyCycle+0x80>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80016d0:	e013      	b.n	80016fa <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d104      	bne.n	80016e2 <setPwmDutyCycle+0x5a>
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <setPwmDutyCycle+0x80>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80016e0:	e00b      	b.n	80016fa <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d104      	bne.n	80016f2 <setPwmDutyCycle+0x6a>
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <setPwmDutyCycle+0x80>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58
}
 80016f0:	e003      	b.n	80016fa <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <setPwmDutyCycle+0x80>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200002b8 	.word	0x200002b8
 800170c:	00000000 	.word	0x00000000

08001710 <getTempratureValue>:
 * DESCRIPTION   : This Function Calculates the Temparature value from value readed
 * 				from sensor and returns float value which will be on °C.
 *******************************************************************************
 */
static float getTempratureValue(uint32_t iSensorValue)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return (((3.3 * iSensorValue) / 4096.0) - 0.5) * 100;
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7fe fef3 	bl	8000504 <__aeabi_ui2d>
 800171e:	a31b      	add	r3, pc, #108	; (adr r3, 800178c <getTempratureValue+0x7c>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff68 	bl	80005f8 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <getTempratureValue+0x70>)
 8001736:	f7ff f889 	bl	800084c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <getTempratureValue+0x74>)
 8001748:	f7fe fd9e 	bl	8000288 <__aeabi_dsub>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <getTempratureValue+0x78>)
 800175a:	f7fe ff4d 	bl	80005f8 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa3f 	bl	8000be8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	ee07 3a90 	vmov	s15, r3
}
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	40b00000 	.word	0x40b00000
 8001784:	3fe00000 	.word	0x3fe00000
 8001788:	40590000 	.word	0x40590000
 800178c:	66666666 	.word	0x66666666
 8001790:	400a6666 	.word	0x400a6666

08001794 <conevertToFerenhit>:
 * RETURNS       : float
 * DESCRIPTION   : This Function converts the value from °C to °F
 *******************************************************************************
 */
static float conevertToFerenhit(float temperatureValue)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	ed87 0a01 	vstr	s0, [r7, #4]
	return temperatureValue * (9 / 5) + 32;
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017b8 <conevertToFerenhit+0x24>
 80017a6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	42000000 	.word	0x42000000
 80017bc:	00000000 	.word	0x00000000

080017c0 <displayTemparatureAndGlowColour>:
 *					then accoding to defined raangle display Temprature string on OLED
 *					and glow LED with colour.
 *******************************************************************************
 */
static void displayTemparatureAndGlowColour(float temperatureValue)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	ed87 0a01 	vstr	s0, [r7, #4]
	int dutyCycle = 100;
 80017ca:	2364      	movs	r3, #100	; 0x64
 80017cc:	60fb      	str	r3, [r7, #12]
	static float prevTemp;

	// To avoid over writing temprrature value because of sign
	if((prevTemp < 0.0 && temperatureValue > 0.0) || (prevTemp > 0.0 && temperatureValue < 0.0))
 80017ce:	4ba6      	ldr	r3, [pc, #664]	; (8001a68 <displayTemparatureAndGlowColour+0x2a8>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	d506      	bpl.n	80017ec <displayTemparatureAndGlowColour+0x2c>
 80017de:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dc0e      	bgt.n	800180a <displayTemparatureAndGlowColour+0x4a>
 80017ec:	4b9e      	ldr	r3, [pc, #632]	; (8001a68 <displayTemparatureAndGlowColour+0x2a8>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	dd09      	ble.n	8001810 <displayTemparatureAndGlowColour+0x50>
 80017fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001800:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d502      	bpl.n	8001810 <displayTemparatureAndGlowColour+0x50>
	{
		ssd1331_clear_screen (BLACK);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 fa75 	bl	8001cfa <ssd1331_clear_screen>
	}

	if (temperatureValue < -15.0)
 8001810:	edd7 7a01 	vldr	s15, [r7, #4]
 8001814:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8001818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d527      	bpl.n	8001872 <displayTemparatureAndGlowColour+0xb2>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 8001822:	f24a 131e 	movw	r3, #41246	; 0xa11e
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	230c      	movs	r3, #12
 800182a:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <displayTemparatureAndGlowColour+0x2ac>)
 800182c:	2102      	movs	r1, #2
 800182e:	2002      	movs	r0, #2
 8001830:	f000 fa1a 	bl	8001c68 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, PURPLE);
 8001834:	f24a 131e 	movw	r3, #41246	; 0xa11e
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	230c      	movs	r3, #12
 800183c:	4a8c      	ldr	r2, [pc, #560]	; (8001a70 <displayTemparatureAndGlowColour+0x2b0>)
 800183e:	2102      	movs	r1, #2
 8001840:	2036      	movs	r0, #54	; 0x36
 8001842:	f000 fa11 	bl	8001c68 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);	//Generating Shades of red
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	b29b      	uxth	r3, r3
 800184a:	4619      	mov	r1, r3
 800184c:	2000      	movs	r0, #0
 800184e:	f7ff ff1b 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, dutyCycle);	//Generating Shades of green
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	2004      	movs	r0, #4
 800185a:	f7ff ff15 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, dutyCycle);	//Generating Shades of blue
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	2008      	movs	r0, #8
 8001866:	f7ff ff0f 	bl	8001688 <setPwmDutyCycle>
#ifdef DEBUG_ON
		printf ("PURPLE\r\n");
 800186a:	4882      	ldr	r0, [pc, #520]	; (8001a74 <displayTemparatureAndGlowColour+0x2b4>)
 800186c:	f006 fee0 	bl	8008630 <puts>
 8001870:	e0d2      	b.n	8001a18 <displayTemparatureAndGlowColour+0x258>
#endif
	}
	else if (temperatureValue >= -15.0 && temperatureValue <= 5.0)
 8001872:	edd7 7a01 	vldr	s15, [r7, #4]
 8001876:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 800187a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001882:	db2b      	blt.n	80018dc <displayTemparatureAndGlowColour+0x11c>
 8001884:	edd7 7a01 	vldr	s15, [r7, #4]
 8001888:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d822      	bhi.n	80018dc <displayTemparatureAndGlowColour+0x11c>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 8001896:	f24a 131e 	movw	r3, #41246	; 0xa11e
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	230c      	movs	r3, #12
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <displayTemparatureAndGlowColour+0x2ac>)
 80018a0:	2102      	movs	r1, #2
 80018a2:	2002      	movs	r0, #2
 80018a4:	f000 f9e0 	bl	8001c68 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, BLUE);
 80018a8:	231f      	movs	r3, #31
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	230c      	movs	r3, #12
 80018ae:	4a70      	ldr	r2, [pc, #448]	; (8001a70 <displayTemparatureAndGlowColour+0x2b0>)
 80018b0:	2102      	movs	r1, #2
 80018b2:	2036      	movs	r0, #54	; 0x36
 80018b4:	f000 f9d8 	bl	8001c68 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, 0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	2000      	movs	r0, #0
 80018bc:	f7ff fee4 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 0);
 80018c0:	2100      	movs	r1, #0
 80018c2:	2004      	movs	r0, #4
 80018c4:	f7ff fee0 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, dutyCycle);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4619      	mov	r1, r3
 80018ce:	2008      	movs	r0, #8
 80018d0:	f7ff feda 	bl	8001688 <setPwmDutyCycle>
#ifdef DEBUG_ON
		printf ("Blue\r\n");
 80018d4:	4868      	ldr	r0, [pc, #416]	; (8001a78 <displayTemparatureAndGlowColour+0x2b8>)
 80018d6:	f006 feab 	bl	8008630 <puts>
 80018da:	e09d      	b.n	8001a18 <displayTemparatureAndGlowColour+0x258>
#endif
	}
	else if (temperatureValue >= 5.1 && temperatureValue <= 15.0)
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7fe fe33 	bl	8000548 <__aeabi_f2d>
 80018e2:	a35b      	add	r3, pc, #364	; (adr r3, 8001a50 <displayTemparatureAndGlowColour+0x290>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7ff f90c 	bl	8000b04 <__aeabi_dcmpge>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d02e      	beq.n	8001950 <displayTemparatureAndGlowColour+0x190>
 80018f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018f6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	d825      	bhi.n	8001950 <displayTemparatureAndGlowColour+0x190>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 8001904:	f24a 131e 	movw	r3, #41246	; 0xa11e
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	230c      	movs	r3, #12
 800190c:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <displayTemparatureAndGlowColour+0x2ac>)
 800190e:	2102      	movs	r1, #2
 8001910:	2002      	movs	r0, #2
 8001912:	f000 f9a9 	bl	8001c68 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, YELLOW);
 8001916:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	230c      	movs	r3, #12
 800191e:	4a54      	ldr	r2, [pc, #336]	; (8001a70 <displayTemparatureAndGlowColour+0x2b0>)
 8001920:	2102      	movs	r1, #2
 8001922:	2036      	movs	r0, #54	; 0x36
 8001924:	f000 f9a0 	bl	8001c68 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff feaa 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, dutyCycle);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	b29b      	uxth	r3, r3
 8001938:	4619      	mov	r1, r3
 800193a:	2004      	movs	r0, #4
 800193c:	f7ff fea4 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 8001940:	2100      	movs	r1, #0
 8001942:	2008      	movs	r0, #8
 8001944:	f7ff fea0 	bl	8001688 <setPwmDutyCycle>
#ifdef DEBUG_ON
		printf ("Yellow\r\n");
 8001948:	484c      	ldr	r0, [pc, #304]	; (8001a7c <displayTemparatureAndGlowColour+0x2bc>)
 800194a:	f006 fe71 	bl	8008630 <puts>
 800194e:	e063      	b.n	8001a18 <displayTemparatureAndGlowColour+0x258>
#endif
	}
	else if (temperatureValue >= 15.1 && temperatureValue <= 25.0)
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe fdf9 	bl	8000548 <__aeabi_f2d>
 8001956:	a340      	add	r3, pc, #256	; (adr r3, 8001a58 <displayTemparatureAndGlowColour+0x298>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7ff f8d2 	bl	8000b04 <__aeabi_dcmpge>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d02a      	beq.n	80019bc <displayTemparatureAndGlowColour+0x1fc>
 8001966:	edd7 7a01 	vldr	s15, [r7, #4]
 800196a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d821      	bhi.n	80019bc <displayTemparatureAndGlowColour+0x1fc>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 8001978:	f24a 131e 	movw	r3, #41246	; 0xa11e
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	230c      	movs	r3, #12
 8001980:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <displayTemparatureAndGlowColour+0x2ac>)
 8001982:	2102      	movs	r1, #2
 8001984:	2002      	movs	r0, #2
 8001986:	f000 f96f 	bl	8001c68 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, ORANGE);
 800198a:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	230c      	movs	r3, #12
 8001992:	4a37      	ldr	r2, [pc, #220]	; (8001a70 <displayTemparatureAndGlowColour+0x2b0>)
 8001994:	2102      	movs	r1, #2
 8001996:	2036      	movs	r0, #54	; 0x36
 8001998:	f000 f966 	bl	8001c68 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, 100);
 800199c:	2164      	movs	r1, #100	; 0x64
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff fe72 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 50);
 80019a4:	2132      	movs	r1, #50	; 0x32
 80019a6:	2004      	movs	r0, #4
 80019a8:	f7ff fe6e 	bl	8001688 <setPwmDutyCycle>
//		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
//		setPwmDutyCycle (TIM_CHANNEL_2, 15);
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2008      	movs	r0, #8
 80019b0:	f7ff fe6a 	bl	8001688 <setPwmDutyCycle>
#ifdef DEBUG_ON
		printf ("Orange\r\n");
 80019b4:	4832      	ldr	r0, [pc, #200]	; (8001a80 <displayTemparatureAndGlowColour+0x2c0>)
 80019b6:	f006 fe3b 	bl	8008630 <puts>
 80019ba:	e02d      	b.n	8001a18 <displayTemparatureAndGlowColour+0x258>
#endif
	}
	else if (temperatureValue >= 25.1)
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	a327      	add	r3, pc, #156	; (adr r3, 8001a60 <displayTemparatureAndGlowColour+0x2a0>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7ff f89c 	bl	8000b04 <__aeabi_dcmpge>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d022      	beq.n	8001a18 <displayTemparatureAndGlowColour+0x258>
	{
		ssd1331_display_string (2, 0, "Temp.:", FONT_1206, PURPLE);
 80019d2:	f24a 131e 	movw	r3, #41246	; 0xa11e
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	230c      	movs	r3, #12
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <displayTemparatureAndGlowColour+0x2ac>)
 80019dc:	2100      	movs	r1, #0
 80019de:	2002      	movs	r0, #2
 80019e0:	f000 f942 	bl	8001c68 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, RED);
 80019e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	230c      	movs	r3, #12
 80019ec:	4a20      	ldr	r2, [pc, #128]	; (8001a70 <displayTemparatureAndGlowColour+0x2b0>)
 80019ee:	2102      	movs	r1, #2
 80019f0:	2036      	movs	r0, #54	; 0x36
 80019f2:	f000 f939 	bl	8001c68 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4619      	mov	r1, r3
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fe43 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	2004      	movs	r0, #4
 8001a06:	f7ff fe3f 	bl	8001688 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2008      	movs	r0, #8
 8001a0e:	f7ff fe3b 	bl	8001688 <setPwmDutyCycle>
#ifdef DEBUG_ON
		printf ("Red\r\n");
 8001a12:	481c      	ldr	r0, [pc, #112]	; (8001a84 <displayTemparatureAndGlowColour+0x2c4>)
 8001a14:	f006 fe0c 	bl	8008630 <puts>
#endif
	}
	ssd1331_display_string (2, 20, "Press button to", FONT_1206, GOLDEN);
 8001a18:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	230c      	movs	r3, #12
 8001a20:	4a19      	ldr	r2, [pc, #100]	; (8001a88 <displayTemparatureAndGlowColour+0x2c8>)
 8001a22:	2114      	movs	r1, #20
 8001a24:	2002      	movs	r0, #2
 8001a26:	f000 f91f 	bl	8001c68 <ssd1331_display_string>
	ssd1331_display_string (2, 32, "change unit", FONT_1206, GOLDEN);
 8001a2a:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	230c      	movs	r3, #12
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <displayTemparatureAndGlowColour+0x2cc>)
 8001a34:	2120      	movs	r1, #32
 8001a36:	2002      	movs	r0, #2
 8001a38:	f000 f916 	bl	8001c68 <ssd1331_display_string>

	prevTemp = temperatureValue;
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <displayTemparatureAndGlowColour+0x2a8>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	66666666 	.word	0x66666666
 8001a54:	40146666 	.word	0x40146666
 8001a58:	33333333 	.word	0x33333333
 8001a5c:	402e3333 	.word	0x402e3333
 8001a60:	9999999a 	.word	0x9999999a
 8001a64:	40391999 	.word	0x40391999
 8001a68:	200003ac 	.word	0x200003ac
 8001a6c:	0800c038 	.word	0x0800c038
 8001a70:	2000039c 	.word	0x2000039c
 8001a74:	0800c040 	.word	0x0800c040
 8001a78:	0800c048 	.word	0x0800c048
 8001a7c:	0800c050 	.word	0x0800c050
 8001a80:	0800c058 	.word	0x0800c058
 8001a84:	0800c060 	.word	0x0800c060
 8001a88:	0800c068 	.word	0x0800c068
 8001a8c:	0800c078 	.word	0x0800c078

08001a90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8001a98:	e7fe      	b.n	8001a98 <Error_Handler+0x8>
	...

08001a9c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4811      	ldr	r0, [pc, #68]	; (8001afc <ssd1331_write_byte+0x60>)
 8001ab8:	f002 fa4a 	bl	8003f50 <HAL_GPIO_WritePin>
 8001abc:	e004      	b.n	8001ac8 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	480e      	ldr	r0, [pc, #56]	; (8001afc <ssd1331_write_byte+0x60>)
 8001ac4:	f002 fa44 	bl	8003f50 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2110      	movs	r1, #16
 8001acc:	480b      	ldr	r0, [pc, #44]	; (8001afc <ssd1331_write_byte+0x60>)
 8001ace:	f002 fa3f 	bl	8003f50 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001ad2:	1df9      	adds	r1, r7, #7
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4809      	ldr	r0, [pc, #36]	; (8001b00 <ssd1331_write_byte+0x64>)
 8001ada:	f003 fc98 	bl	800540e <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <ssd1331_write_byte+0x60>)
 8001ae4:	f002 fa34 	bl	8003f50 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001ae8:	2201      	movs	r2, #1
 8001aea:	2120      	movs	r1, #32
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <ssd1331_write_byte+0x60>)
 8001aee:	f002 fa2f 	bl	8003f50 <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	48000400 	.word	0x48000400
 8001b00:	20000254 	.word	0x20000254

08001b04 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	71bb      	strb	r3, [r7, #6]
 8001b12:	4613      	mov	r3, r2
 8001b14:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	2b5f      	cmp	r3, #95	; 0x5f
 8001b1a:	d82b      	bhi.n	8001b74 <ssd1331_draw_point+0x70>
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	d828      	bhi.n	8001b74 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001b22:	2100      	movs	r1, #0
 8001b24:	2015      	movs	r0, #21
 8001b26:	f7ff ffb9 	bl	8001a9c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffb4 	bl	8001a9c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001b34:	2100      	movs	r1, #0
 8001b36:	205f      	movs	r0, #95	; 0x5f
 8001b38:	f7ff ffb0 	bl	8001a9c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2075      	movs	r0, #117	; 0x75
 8001b40:	f7ff ffac 	bl	8001a9c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ffa7 	bl	8001a9c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001b4e:	2100      	movs	r1, #0
 8001b50:	203f      	movs	r0, #63	; 0x3f
 8001b52:	f7ff ffa3 	bl	8001a9c <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001b56:	88bb      	ldrh	r3, [r7, #4]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff9b 	bl	8001a9c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff95 	bl	8001a9c <ssd1331_write_byte>
 8001b72:	e000      	b.n	8001b76 <ssd1331_draw_point+0x72>
		return;
 8001b74:	bf00      	nop
}
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71bb      	strb	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	717b      	strb	r3, [r7, #5]
 8001b96:	4613      	mov	r3, r2
 8001b98:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b5f      	cmp	r3, #95	; 0x5f
 8001ba6:	d857      	bhi.n	8001c58 <ssd1331_display_char+0xdc>
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	2b3f      	cmp	r3, #63	; 0x3f
 8001bac:	d854      	bhi.n	8001c58 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e04c      	b.n	8001c4e <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001bb4:	793b      	ldrb	r3, [r7, #4]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d10d      	bne.n	8001bd6 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	f1a3 0220 	sub.w	r2, r3, #32
 8001bc0:	7bf9      	ldrb	r1, [r7, #15]
 8001bc2:	4827      	ldr	r0, [pc, #156]	; (8001c60 <ssd1331_display_char+0xe4>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4403      	add	r3, r0
 8001bce:	440b      	add	r3, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	737b      	strb	r3, [r7, #13]
 8001bd4:	e00c      	b.n	8001bf0 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8001bd6:	793b      	ldrb	r3, [r7, #4]
 8001bd8:	2b10      	cmp	r3, #16
 8001bda:	d109      	bne.n	8001bf0 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	f1a3 0220 	sub.w	r2, r3, #32
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	491f      	ldr	r1, [pc, #124]	; (8001c64 <ssd1331_display_char+0xe8>)
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	440a      	add	r2, r1
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73bb      	strb	r3, [r7, #14]
 8001bf4:	e025      	b.n	8001c42 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001bf6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da06      	bge.n	8001c0c <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001bfe:	8c3a      	ldrh	r2, [r7, #32]
 8001c00:	79b9      	ldrb	r1, [r7, #6]
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff7d 	bl	8001b04 <ssd1331_draw_point>
 8001c0a:	e005      	b.n	8001c18 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001c0c:	79b9      	ldrb	r1, [r7, #6]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2200      	movs	r2, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff ff76 	bl	8001b04 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	3301      	adds	r3, #1
 8001c22:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001c24:	79ba      	ldrb	r2, [r7, #6]
 8001c26:	7b3b      	ldrb	r3, [r7, #12]
 8001c28:	1ad2      	subs	r2, r2, r3
 8001c2a:	793b      	ldrb	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d105      	bne.n	8001c3c <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	3301      	adds	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
				break;
 8001c3a:	e005      	b.n	8001c48 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	73bb      	strb	r3, [r7, #14]
 8001c42:	7bbb      	ldrb	r3, [r7, #14]
 8001c44:	2b07      	cmp	r3, #7
 8001c46:	d9d6      	bls.n	8001bf6 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	793b      	ldrb	r3, [r7, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d3ae      	bcc.n	8001bb4 <ssd1331_display_char+0x38>
 8001c56:	e000      	b.n	8001c5a <ssd1331_display_char+0xde>
		return;
 8001c58:	bf00      	nop
			}
		}
    }
}
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	0800c084 	.word	0x0800c084
 8001c64:	0800c4f8 	.word	0x0800c4f8

08001c68 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	603a      	str	r2, [r7, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	460b      	mov	r3, r1
 8001c78:	71bb      	strb	r3, [r7, #6]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b5f      	cmp	r3, #95	; 0x5f
 8001c82:	d836      	bhi.n	8001cf2 <ssd1331_display_string+0x8a>
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	2b3f      	cmp	r3, #63	; 0x3f
 8001c88:	d833      	bhi.n	8001cf2 <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8001c8a:	e02d      	b.n	8001ce8 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001c8c:	79fa      	ldrb	r2, [r7, #7]
 8001c8e:	797b      	ldrb	r3, [r7, #5]
 8001c90:	085b      	lsrs	r3, r3, #1
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dd12      	ble.n	8001cc2 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001ca0:	79ba      	ldrb	r2, [r7, #6]
 8001ca2:	797b      	ldrb	r3, [r7, #5]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001ca8:	79ba      	ldrb	r2, [r7, #6]
 8001caa:	797b      	ldrb	r3, [r7, #5]
 8001cac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dd06      	ble.n	8001cc2 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f000 f81c 	bl	8001cfa <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	797c      	ldrb	r4, [r7, #5]
 8001cc8:	79b9      	ldrb	r1, [r7, #6]
 8001cca:	79f8      	ldrb	r0, [r7, #7]
 8001ccc:	8b3b      	ldrh	r3, [r7, #24]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	f7ff ff53 	bl	8001b7c <ssd1331_display_char>
        chXpos += chSize / 2;
 8001cd6:	797b      	ldrb	r3, [r7, #5]
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4413      	add	r3, r2
 8001ce0:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1cd      	bne.n	8001c8c <ssd1331_display_string+0x24>
 8001cf0:	e000      	b.n	8001cf4 <ssd1331_display_string+0x8c>
		return;
 8001cf2:	bf00      	nop
    }
}
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd90      	pop	{r4, r7, pc}

08001cfa <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8001d04:	2300      	movs	r3, #0
 8001d06:	81fb      	strh	r3, [r7, #14]
 8001d08:	e013      	b.n	8001d32 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	81bb      	strh	r3, [r7, #12]
 8001d0e:	e00a      	b.n	8001d26 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001d10:	89bb      	ldrh	r3, [r7, #12]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	89fa      	ldrh	r2, [r7, #14]
 8001d16:	b2d1      	uxtb	r1, r2
 8001d18:	88fa      	ldrh	r2, [r7, #6]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fef2 	bl	8001b04 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	81bb      	strh	r3, [r7, #12]
 8001d26:	89bb      	ldrh	r3, [r7, #12]
 8001d28:	2b5f      	cmp	r3, #95	; 0x5f
 8001d2a:	d9f1      	bls.n	8001d10 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001d2c:	89fb      	ldrh	r3, [r7, #14]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	81fb      	strh	r3, [r7, #14]
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	2b3f      	cmp	r3, #63	; 0x3f
 8001d36:	d9e8      	bls.n	8001d0a <ssd1331_clear_screen+0x10>
		}
	}
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <ssd1331_init>:


void ssd1331_init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2140      	movs	r1, #64	; 0x40
 8001d4c:	4852      	ldr	r0, [pc, #328]	; (8001e98 <ssd1331_init+0x154>)
 8001d4e:	f002 f8ff 	bl	8003f50 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001d52:	2201      	movs	r2, #1
 8001d54:	2110      	movs	r1, #16
 8001d56:	4850      	ldr	r0, [pc, #320]	; (8001e98 <ssd1331_init+0x154>)
 8001d58:	f002 f8fa 	bl	8003f50 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	20ae      	movs	r0, #174	; 0xae
 8001d60:	f7ff fe9c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001d64:	2100      	movs	r1, #0
 8001d66:	2081      	movs	r0, #129	; 0x81
 8001d68:	f7ff fe98 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	20ff      	movs	r0, #255	; 0xff
 8001d70:	f7ff fe94 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001d74:	2100      	movs	r1, #0
 8001d76:	2082      	movs	r0, #130	; 0x82
 8001d78:	f7ff fe90 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	20ff      	movs	r0, #255	; 0xff
 8001d80:	f7ff fe8c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001d84:	2100      	movs	r1, #0
 8001d86:	2083      	movs	r0, #131	; 0x83
 8001d88:	f7ff fe88 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	20ff      	movs	r0, #255	; 0xff
 8001d90:	f7ff fe84 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001d94:	2100      	movs	r1, #0
 8001d96:	2087      	movs	r0, #135	; 0x87
 8001d98:	f7ff fe80 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2006      	movs	r0, #6
 8001da0:	f7ff fe7c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001da4:	2100      	movs	r1, #0
 8001da6:	208a      	movs	r0, #138	; 0x8a
 8001da8:	f7ff fe78 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001dac:	2100      	movs	r1, #0
 8001dae:	2064      	movs	r0, #100	; 0x64
 8001db0:	f7ff fe74 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001db4:	2100      	movs	r1, #0
 8001db6:	208b      	movs	r0, #139	; 0x8b
 8001db8:	f7ff fe70 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2078      	movs	r0, #120	; 0x78
 8001dc0:	f7ff fe6c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	208c      	movs	r0, #140	; 0x8c
 8001dc8:	f7ff fe68 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f7ff fe64 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	20a0      	movs	r0, #160	; 0xa0
 8001dd8:	f7ff fe60 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2072      	movs	r0, #114	; 0x72
 8001de0:	f7ff fe5c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001de4:	2100      	movs	r1, #0
 8001de6:	20a1      	movs	r0, #161	; 0xa1
 8001de8:	f7ff fe58 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001dec:	2100      	movs	r1, #0
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fe54 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001df4:	2100      	movs	r1, #0
 8001df6:	20a2      	movs	r0, #162	; 0xa2
 8001df8:	f7ff fe50 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fe4c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001e04:	2100      	movs	r1, #0
 8001e06:	20a4      	movs	r0, #164	; 0xa4
 8001e08:	f7ff fe48 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	20a8      	movs	r0, #168	; 0xa8
 8001e10:	f7ff fe44 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001e14:	2100      	movs	r1, #0
 8001e16:	203f      	movs	r0, #63	; 0x3f
 8001e18:	f7ff fe40 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	20ad      	movs	r0, #173	; 0xad
 8001e20:	f7ff fe3c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001e24:	2100      	movs	r1, #0
 8001e26:	208e      	movs	r0, #142	; 0x8e
 8001e28:	f7ff fe38 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	20b0      	movs	r0, #176	; 0xb0
 8001e30:	f7ff fe34 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001e34:	2100      	movs	r1, #0
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fe30 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	20b1      	movs	r0, #177	; 0xb1
 8001e40:	f7ff fe2c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001e44:	2100      	movs	r1, #0
 8001e46:	2031      	movs	r0, #49	; 0x31
 8001e48:	f7ff fe28 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	20b3      	movs	r0, #179	; 0xb3
 8001e50:	f7ff fe24 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001e54:	2100      	movs	r1, #0
 8001e56:	20f0      	movs	r0, #240	; 0xf0
 8001e58:	f7ff fe20 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	20bb      	movs	r0, #187	; 0xbb
 8001e60:	f7ff fe1c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001e64:	2100      	movs	r1, #0
 8001e66:	203a      	movs	r0, #58	; 0x3a
 8001e68:	f7ff fe18 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	20be      	movs	r0, #190	; 0xbe
 8001e70:	f7ff fe14 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001e74:	2100      	movs	r1, #0
 8001e76:	203e      	movs	r0, #62	; 0x3e
 8001e78:	f7ff fe10 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	202e      	movs	r0, #46	; 0x2e
 8001e80:	f7ff fe0c 	bl	8001a9c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001e84:	2100      	movs	r1, #0
 8001e86:	20af      	movs	r0, #175	; 0xaf
 8001e88:	f7ff fe08 	bl	8001a9c <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff ff34 	bl	8001cfa <ssd1331_clear_screen>
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6613      	str	r3, [r2, #96]	; 0x60
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b09e      	sub	sp, #120	; 0x78
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2254      	movs	r2, #84	; 0x54
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f006 fcc7 	bl	8008898 <memset>
  if(hadc->Instance==ADC1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_ADC_MspInit+0xc0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d143      	bne.n	8001f9c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f1e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f20:	2301      	movs	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f30:	2302      	movs	r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	4618      	mov	r0, r3
 8001f44:	f002 fec8 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f4e:	f7ff fd9f 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_ADC_MspInit+0xc4>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f82:	2301      	movs	r3, #1
 8001f84:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f86:	230b      	movs	r3, #11
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f001 fe58 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3778      	adds	r7, #120	; 0x78
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	50040000 	.word	0x50040000
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_SPI_MspInit+0x80>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d129      	bne.n	8002022 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_SPI_MspInit+0x84>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001ffe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002010:	2305      	movs	r3, #5
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201e:	f001 fe15 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40013000 	.word	0x40013000
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0a      	ldr	r2, [pc, #40]	; (800206c <HAL_TIM_Base_MspInit+0x38>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10b      	bne.n	800205e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_TIM_Base_MspInit+0x3c>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_TIM_Base_MspInit+0x3c>)
 800204c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002050:	6613      	str	r3, [r2, #96]	; 0x60
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <HAL_TIM_Base_MspInit+0x3c>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_TIM_MspPostInit+0x68>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11d      	bne.n	80020d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80020ae:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80020b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 030c 	add.w	r3, r7, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f001 fdbd 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40021000 	.word	0x40021000

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b09e      	sub	sp, #120	; 0x78
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	2254      	movs	r2, #84	; 0x54
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f006 fbc7 	bl	8008898 <memset>
  if(huart->Instance==USART2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_UART_MspInit+0xcc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d148      	bne.n	80021a6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002114:	2302      	movs	r3, #2
 8002116:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fdd9 	bl	8004cd8 <HAL_RCCEx_PeriphCLKConfig>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800212c:	f7ff fcb0 	bl	8001a90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 800214a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_UART_MspInit+0xd0>)
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002160:	2304      	movs	r3, #4
 8002162:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002170:	2307      	movs	r3, #7
 8002172:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002178:	4619      	mov	r1, r3
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f001 fd65 	bl	8003c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002186:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002194:	2303      	movs	r3, #3
 8002196:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002198:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a2:	f001 fd53 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3778      	adds	r7, #120	; 0x78
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40004400 	.word	0x40004400
 80021b4:	40021000 	.word	0x40021000

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <NMI_Handler+0x4>

080021be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <MemManage_Handler+0x4>

080021ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <BusFault_Handler+0x4>

080021d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <UsageFault_Handler+0x4>

080021d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002204:	f000 f95e 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}

0800220c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	return 1;
 8002210:	2301      	movs	r3, #1
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_kill>:

int _kill(int pid, int sig)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002226:	f006 fb89 	bl	800893c <__errno>
 800222a:	4603      	mov	r3, r0
 800222c:	2216      	movs	r2, #22
 800222e:	601a      	str	r2, [r3, #0]
	return -1;
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_exit>:

void _exit (int status)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe7 	bl	800221c <_kill>
	while (1) {}		/* Make sure we hang here */
 800224e:	e7fe      	b.n	800224e <_exit+0x12>

08002250 <_read>:
return len;
}
*/

int _read (int file, char *ptr, int len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;

		len = 1;						// over ride the read and only get 1 char
 800225c:	2301      	movs	r3, #1
 800225e:	607b      	str	r3, [r7, #4]
		if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	68b9      	ldr	r1, [r7, #8]
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <_read+0x38>)
 800226c:	f004 fd37 	bl	8006cde <HAL_UART_Receive>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <_read+0x2c>
			len = EOF;					// signal an issue with stream
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	607b      	str	r3, [r7, #4]

		return len;
 800227c:	687b      	ldr	r3, [r7, #4]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000304 	.word	0x20000304

0800228c <_write>:
	return len;
}
*/

int _write(int file, char *ptr, int len)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	4809      	ldr	r0, [pc, #36]	; (80022cc <_write+0x40>)
 80022a8:	f004 fc8f 	bl	8006bca <HAL_UART_Transmit>
 80022ac:	4603      	mov	r3, r0
 80022ae:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d002      	beq.n	80022bc <_write+0x30>
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d101      	bne.n	80022c0 <_write+0x34>
	{
		Error_Handler();
 80022bc:	f7ff fbe8 	bl	8001a90 <Error_Handler>
	}
	return len;
 80022c0:	687b      	ldr	r3, [r7, #4]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000304 	.word	0x20000304

080022d0 <_close>:

int _close(int file)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f8:	605a      	str	r2, [r3, #4]
	return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_isatty>:

int _isatty(int file)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	return 1;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
	return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f006 fae8 	bl	800893c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20010000 	.word	0x20010000
 8002398:	00000400 	.word	0x00000400
 800239c:	200003b0 	.word	0x200003b0
 80023a0:	20000508 	.word	0x20000508

080023a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <SystemInit+0x20>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <SystemInit+0x20>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023cc:	f7ff ffea 	bl	80023a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d2:	490d      	ldr	r1, [pc, #52]	; (8002408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <LoopForever+0xe>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e8:	4c0a      	ldr	r4, [pc, #40]	; (8002414 <LoopForever+0x16>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f6:	f006 faa7 	bl	8008948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fa:	f7fe fdf9 	bl	8000ff0 <main>

080023fe <LoopForever>:

LoopForever:
    b LoopForever
 80023fe:	e7fe      	b.n	80023fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002400:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002408:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800240c:	0800cf68 	.word	0x0800cf68
  ldr r2, =_sbss
 8002410:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002414:	20000504 	.word	0x20000504

08002418 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_IRQHandler>

0800241a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002424:	2003      	movs	r0, #3
 8002426:	f001 fbdd 	bl	8003be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f80e 	bl	800244c <HAL_InitTick>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	e001      	b.n	8002440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800243c:	f7ff fd2e 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002440:	79fb      	ldrb	r3, [r7, #7]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <HAL_InitTick+0x6c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d023      	beq.n	80024a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_InitTick+0x70>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_InitTick+0x6c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f001 fbdb 	bl	8003c32 <HAL_SYSTICK_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b0f      	cmp	r3, #15
 8002486:	d809      	bhi.n	800249c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002488:	2200      	movs	r2, #0
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f001 fbb3 	bl	8003bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_InitTick+0x74>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e007      	b.n	80024ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e004      	b.n	80024ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e001      	b.n	80024ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008
 80024e8:	200003b4 	.word	0x200003b4

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200003b4 	.word	0x200003b4

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000008 	.word	0x20000008

0800254c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <LL_ADC_SetOffset+0x44>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	03fff000 	.word	0x03fff000

080025fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	431a      	orrs	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3330      	adds	r3, #48	; 0x30
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	4413      	add	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 031f 	and.w	r3, r3, #31
 80026ae:	211f      	movs	r1, #31
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0e9b      	lsrs	r3, r3, #26
 80026bc:	f003 011f 	and.w	r1, r3, #31
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	431a      	orrs	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026d0:	bf00      	nop
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3314      	adds	r3, #20
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0e5b      	lsrs	r3, r3, #25
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	0d1b      	lsrs	r3, r3, #20
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2107      	movs	r1, #7
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	401a      	ands	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0d1b      	lsrs	r3, r3, #20
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800274c:	43db      	mvns	r3, r3
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0318 	and.w	r3, r3, #24
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002758:	40d9      	lsrs	r1, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	400b      	ands	r3, r1
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	0007ffff 	.word	0x0007ffff

0800277c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6093      	str	r3, [r2, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d101      	bne.n	80027ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002804:	d101      	bne.n	800280a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <LL_ADC_IsEnabled+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_IsEnabled+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_IsDisableOngoing+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_IsDisableOngoing+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d101      	bne.n	800296a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e126      	b.n	8002be0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fa9f 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fef1 	bl	80027a0 <LL_ADC_IsDeepPowerDownEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fed7 	bl	800277c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff0c 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d115      	bne.n	8002a0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fef0 	bl	80027c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e8:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <HAL_ADC_Init+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	4a7f      	ldr	r2, [pc, #508]	; (8002bec <HAL_ADC_Init+0x274>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feee 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff62 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80bf 	bne.w	8002bce <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 80bb 	bne.w	8002bce <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a60:	f043 0202 	orr.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fefb 	bl	8002868 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10b      	bne.n	8002a90 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a78:	485d      	ldr	r0, [pc, #372]	; (8002bf0 <HAL_ADC_Init+0x278>)
 8002a7a:	f7ff fef5 	bl	8002868 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	485a      	ldr	r0, [pc, #360]	; (8002bf4 <HAL_ADC_Init+0x27c>)
 8002a8c:	f7ff fd5e 	bl	800254c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7e5b      	ldrb	r3, [r3, #25]
 8002a94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002aa0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002aa6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	045b      	lsls	r3, r3, #17
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	4b42      	ldr	r3, [pc, #264]	; (8002bf8 <HAL_ADC_Init+0x280>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff ff26 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8002b06:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d13d      	bne.n	8002b8a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d13a      	bne.n	8002b8a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b18:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b20:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b30:	f023 0302 	bic.w	r3, r3, #2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	69b9      	ldr	r1, [r7, #24]
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d118      	bne.n	8002b7a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b64:	4311      	orrs	r1, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	611a      	str	r2, [r3, #16]
 8002b78:	e007      	b.n	8002b8a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10c      	bne.n	8002bac <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f023 010f 	bic.w	r1, r3, #15
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	1e5a      	subs	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8002baa:	e007      	b.n	8002bbc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 020f 	bic.w	r2, r2, #15
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f023 0303 	bic.w	r3, r3, #3
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	655a      	str	r2, [r3, #84]	; 0x54
 8002bcc:	e007      	b.n	8002bde <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000000 	.word	0x20000000
 8002bec:	053e2d63 	.word	0x053e2d63
 8002bf0:	50040000 	.word	0x50040000
 8002bf4:	50040300 	.word	0x50040300
 8002bf8:	fff0c007 	.word	0xfff0c007

08002bfc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fe7b 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d14f      	bne.n	8002cb4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Start+0x26>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e04b      	b.n	8002cba <HAL_ADC_Start+0xbe>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fdb6 	bl	800379c <ADC_Enable>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d137      	bne.n	8002caa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5a:	d106      	bne.n	8002c6a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f023 0206 	bic.w	r2, r3, #6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	659a      	str	r2, [r3, #88]	; 0x58
 8002c68:	e002      	b.n	8002c70 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	221c      	movs	r2, #28
 8002c76:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fe06 	bl	80028b4 <LL_ADC_REG_StartConversion>
 8002ca8:	e006      	b.n	8002cb8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002cb2:	e001      	b.n	8002cb8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_ADC_Stop+0x16>
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	e023      	b.n	8002d20 <HAL_ADC_Stop+0x5e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fc9e 	bl	8003624 <ADC_ConversionStop>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d111      	bne.n	8002d16 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fdd8 	bl	80038a8 <ADC_Disable>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d102      	bne.n	8002d40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e010      	b.n	8002d62 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06f      	b.n	8002e3e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002d5e:	2304      	movs	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d62:	f7ff fbc3 	bl	80024ec <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d68:	e021      	b.n	8002dae <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d01d      	beq.n	8002dae <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d72:	f7ff fbbb 	bl	80024ec <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d302      	bcc.n	8002d88 <HAL_ADC_PollForConversion+0x60>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d112      	bne.n	8002dae <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0204 	orr.w	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e047      	b.n	8002e3e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0d6      	beq.n	8002d6a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fc46 	bl	800265e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01c      	beq.n	8002e12 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7e5b      	ldrb	r3, [r3, #25]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d118      	bne.n	8002e12 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d111      	bne.n	8002e12 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d104      	bne.n	8002e2a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2208      	movs	r2, #8
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	e008      	b.n	8002e3c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	220c      	movs	r2, #12
 8002e3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b0b6      	sub	sp, #216	; 0xd8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x22>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e3bb      	b.n	80035fa <HAL_ADC_ConfigChannel+0x79a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fd38 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 83a0 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	3b02      	subs	r3, #2
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d81b      	bhi.n	8002eee <HAL_ADC_ConfigChannel+0x8e>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_ADC_ConfigChannel+0x5c>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed5 	.word	0x08002ed5
 8002ec4:	08002edd 	.word	0x08002edd
 8002ec8:	08002ee5 	.word	0x08002ee5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ecc:	230c      	movs	r3, #12
 8002ece:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ed2:	e010      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ed4:	2312      	movs	r3, #18
 8002ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eda:	e00c      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002edc:	2318      	movs	r3, #24
 8002ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ee2:	e008      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002eee:	2306      	movs	r3, #6
 8002ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ef4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002f04:	f7ff fbbe 	bl	8002684 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fcf9 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002f12:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fd19 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8002f20:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f040 81a4 	bne.w	8003276 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 819f 	bne.w	8003276 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f7ff fbc9 	bl	80026dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	08db      	lsrs	r3, r3, #3
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d00a      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6919      	ldr	r1, [r3, #16]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7c:	f7ff fb1a 	bl	80025b4 <LL_ADC_SetOffset>
 8002f80:	e179      	b.n	8003276 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fb37 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x14e>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fb2c 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	0e9b      	lsrs	r3, r3, #26
 8002fa8:	f003 021f 	and.w	r2, r3, #31
 8002fac:	e01e      	b.n	8002fec <HAL_ADC_ConfigChannel+0x18c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fb21 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002fe0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x1a4>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	e018      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1d6>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800301c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e004      	b.n	8003036 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800302c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003036:	429a      	cmp	r2, r3
 8003038:	d106      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2200      	movs	r2, #0
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff faf0 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fad4 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x214>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fac9 	bl	80025fc <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 021f 	and.w	r2, r3, #31
 8003072:	e01e      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x252>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fabe 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003092:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800309a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80030a2:	2320      	movs	r3, #32
 80030a4:	e004      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80030a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x26a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	0e9b      	lsrs	r3, r3, #26
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	e018      	b.n	80030fc <HAL_ADC_ConfigChannel+0x29c>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80030de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e004      	b.n	80030fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80030f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d106      	bne.n	800310e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fa8d 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2102      	movs	r1, #2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fa71 	bl	80025fc <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_ADC_ConfigChannel+0x2da>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fa66 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	e01e      	b.n	8003178 <HAL_ADC_ConfigChannel+0x318>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fa5b 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e004      	b.n	8003176 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800316c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x330>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	e014      	b.n	80031ba <HAL_ADC_ConfigChannel+0x35a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800319e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80031a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80031ac:	2320      	movs	r3, #32
 80031ae:	e004      	b.n	80031ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80031b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d106      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fa2e 	bl	8002628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2103      	movs	r1, #3
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fa12 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80031d8:	4603      	mov	r3, r0
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x398>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2103      	movs	r1, #3
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fa07 	bl	80025fc <LL_ADC_GetOffsetChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	e017      	b.n	8003228 <HAL_ADC_ConfigChannel+0x3c8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2103      	movs	r1, #3
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff f9fc 	bl	80025fc <LL_ADC_GetOffsetChannel>
 8003204:	4603      	mov	r3, r0
 8003206:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800320a:	fa93 f3a3 	rbit	r3, r3
 800320e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003212:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800321a:	2320      	movs	r3, #32
 800321c:	e003      	b.n	8003226 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800321e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x3e0>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	e011      	b.n	8003264 <HAL_ADC_ConfigChannel+0x404>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800324e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003250:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003252:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003258:	2320      	movs	r3, #32
 800325a:	e003      	b.n	8003264 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800325c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003264:	429a      	cmp	r2, r3
 8003266:	d106      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	2103      	movs	r1, #3
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f9d9 	bl	8002628 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff faf4 	bl	8002868 <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 8140 	bne.w	8003508 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	461a      	mov	r2, r3
 8003296:	f7ff fa4d 	bl	8002734 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a8f      	ldr	r2, [pc, #572]	; (80034dc <HAL_ADC_ConfigChannel+0x67c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	f040 8131 	bne.w	8003508 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10b      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x46e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	bf94      	ite	ls
 80032c6:	2301      	movls	r3, #1
 80032c8:	2300      	movhi	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e019      	b.n	8003302 <HAL_ADC_ConfigChannel+0x4a2>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80032dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032de:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80032e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80032ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	bf94      	ite	ls
 80032fc:	2301      	movls	r3, #1
 80032fe:	2300      	movhi	r3, #0
 8003300:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003302:	2b00      	cmp	r3, #0
 8003304:	d079      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x4c2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0e9b      	lsrs	r3, r3, #26
 8003318:	3301      	adds	r3, #1
 800331a:	069b      	lsls	r3, r3, #26
 800331c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003320:	e015      	b.n	800334e <HAL_ADC_ConfigChannel+0x4ee>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003332:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800333a:	2320      	movs	r3, #32
 800333c:	e003      	b.n	8003346 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	3301      	adds	r3, #1
 8003348:	069b      	lsls	r3, r3, #26
 800334a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_ADC_ConfigChannel+0x50e>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e9b      	lsrs	r3, r3, #26
 8003360:	3301      	adds	r3, #1
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	2101      	movs	r1, #1
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	e017      	b.n	800339e <HAL_ADC_ConfigChannel+0x53e>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800337c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800337e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003386:	2320      	movs	r3, #32
 8003388:	e003      	b.n	8003392 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800338a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	2101      	movs	r1, #1
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	ea42 0103 	orr.w	r1, r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x564>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 021f 	and.w	r2, r3, #31
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	e018      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x596>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f6:	430b      	orrs	r3, r1
 80033f8:	e081      	b.n	80034fe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x5b6>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	0e9b      	lsrs	r3, r3, #26
 800340c:	3301      	adds	r3, #1
 800340e:	069b      	lsls	r3, r3, #26
 8003410:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003414:	e015      	b.n	8003442 <HAL_ADC_ConfigChannel+0x5e2>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e003      	b.n	800343a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3301      	adds	r3, #1
 800343c:	069b      	lsls	r3, r3, #26
 800343e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x602>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	3301      	adds	r3, #1
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2101      	movs	r1, #1
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	e017      	b.n	8003492 <HAL_ADC_ConfigChannel+0x632>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	61bb      	str	r3, [r7, #24]
  return result;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e003      	b.n	8003486 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2101      	movs	r1, #1
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	ea42 0103 	orr.w	r1, r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10d      	bne.n	80034be <HAL_ADC_ConfigChannel+0x65e>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	0e9b      	lsrs	r3, r3, #26
 80034a8:	3301      	adds	r3, #1
 80034aa:	f003 021f 	and.w	r2, r3, #31
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	3b1e      	subs	r3, #30
 80034b6:	051b      	lsls	r3, r3, #20
 80034b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034bc:	e01e      	b.n	80034fc <HAL_ADC_ConfigChannel+0x69c>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	60fb      	str	r3, [r7, #12]
  return result;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d104      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e006      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x688>
 80034da:	bf00      	nop
 80034dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	051b      	lsls	r3, r3, #20
 80034f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003502:	4619      	mov	r1, r3
 8003504:	f7ff f8ea 	bl	80026dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_ADC_ConfigChannel+0x7a4>)
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d06c      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003514:	483c      	ldr	r0, [pc, #240]	; (8003608 <HAL_ADC_ConfigChannel+0x7a8>)
 8003516:	f7ff f83f 	bl	8002598 <LL_ADC_GetCommonPathInternalCh>
 800351a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3a      	ldr	r2, [pc, #232]	; (800360c <HAL_ADC_ConfigChannel+0x7ac>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d127      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800352c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d121      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a35      	ldr	r2, [pc, #212]	; (8003610 <HAL_ADC_ConfigChannel+0x7b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d157      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800353e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003546:	4619      	mov	r1, r3
 8003548:	482f      	ldr	r0, [pc, #188]	; (8003608 <HAL_ADC_ConfigChannel+0x7a8>)
 800354a:	f7ff f812 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_ADC_ConfigChannel+0x7b4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	099b      	lsrs	r3, r3, #6
 8003554:	4a30      	ldr	r2, [pc, #192]	; (8003618 <HAL_ADC_ConfigChannel+0x7b8>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003568:	e002      	b.n	8003570 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	3b01      	subs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f9      	bne.n	800356a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003576:	e03a      	b.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <HAL_ADC_ConfigChannel+0x7bc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d113      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_ADC_ConfigChannel+0x7b0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d12a      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800359c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a0:	4619      	mov	r1, r3
 80035a2:	4819      	ldr	r0, [pc, #100]	; (8003608 <HAL_ADC_ConfigChannel+0x7a8>)
 80035a4:	f7fe ffe5 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035a8:	e021      	b.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1c      	ldr	r2, [pc, #112]	; (8003620 <HAL_ADC_ConfigChannel+0x7c0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d11c      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_ADC_ConfigChannel+0x7b0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035d2:	4619      	mov	r1, r3
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <HAL_ADC_ConfigChannel+0x7a8>)
 80035d6:	f7fe ffcc 	bl	8002572 <LL_ADC_SetCommonPathInternalCh>
 80035da:	e008      	b.n	80035ee <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	37d8      	adds	r7, #216	; 0xd8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	80080000 	.word	0x80080000
 8003608:	50040300 	.word	0x50040300
 800360c:	c7520000 	.word	0xc7520000
 8003610:	50040000 	.word	0x50040000
 8003614:	20000000 	.word	0x20000000
 8003618:	053e2d63 	.word	0x053e2d63
 800361c:	cb840000 	.word	0xcb840000
 8003620:	80000001 	.word	0x80000001

08003624 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f962 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8003640:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff f983 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 800364c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8098 	beq.w	800378c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02a      	beq.n	80036c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7e5b      	ldrb	r3, [r3, #25]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d126      	bne.n	80036c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7e1b      	ldrb	r3, [r3, #24]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d122      	bne.n	80036c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800367a:	2301      	movs	r3, #1
 800367c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800367e:	e014      	b.n	80036aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4a45      	ldr	r2, [pc, #276]	; (8003798 <ADC_ConversionStop+0x174>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d90d      	bls.n	80036a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368c:	f043 0210 	orr.w	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e074      	b.n	800378e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b40      	cmp	r3, #64	; 0x40
 80036b6:	d1e3      	bne.n	8003680 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d014      	beq.n	80036f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f91a 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f8d7 	bl	800288e <LL_ADC_IsDisableOngoing>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f8f6 	bl	80028dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d014      	beq.n	8003720 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff f929 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff f8bf 	bl	800288e <LL_ADC_IsDisableOngoing>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d104      	bne.n	8003720 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f905 	bl	800292a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d005      	beq.n	8003732 <ADC_ConversionStop+0x10e>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d105      	bne.n	8003738 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800372c:	230c      	movs	r3, #12
 800372e:	617b      	str	r3, [r7, #20]
        break;
 8003730:	e005      	b.n	800373e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003732:	2308      	movs	r3, #8
 8003734:	617b      	str	r3, [r7, #20]
        break;
 8003736:	e002      	b.n	800373e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003738:	2304      	movs	r3, #4
 800373a:	617b      	str	r3, [r7, #20]
        break;
 800373c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800373e:	f7fe fed5 	bl	80024ec <HAL_GetTick>
 8003742:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003744:	e01b      	b.n	800377e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003746:	f7fe fed1 	bl	80024ec <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b05      	cmp	r3, #5
 8003752:	d914      	bls.n	800377e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f043 0210 	orr.w	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f043 0201 	orr.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e007      	b.n	800378e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1dc      	bne.n	8003746 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	a33fffff 	.word	0xa33fffff

0800379c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f85b 	bl	8002868 <LL_ADC_IsEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d169      	bne.n	800388c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <ADC_Enable+0xfc>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e055      	b.n	800388e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff f816 	bl	8002818 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037ec:	482b      	ldr	r0, [pc, #172]	; (800389c <ADC_Enable+0x100>)
 80037ee:	f7fe fed3 	bl	8002598 <LL_ADC_GetCommonPathInternalCh>
 80037f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <ADC_Enable+0x104>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <ADC_Enable+0x108>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003816:	e002      	b.n	800381e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3b01      	subs	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f9      	bne.n	8003818 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003824:	f7fe fe62 	bl	80024ec <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800382a:	e028      	b.n	800387e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f819 	bl	8002868 <LL_ADC_IsEnabled>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe ffe9 	bl	8002818 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003846:	f7fe fe51 	bl	80024ec <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d914      	bls.n	800387e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d00d      	beq.n	800387e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d1cf      	bne.n	800382c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	8000003f 	.word	0x8000003f
 800389c:	50040300 	.word	0x50040300
 80038a0:	20000000 	.word	0x20000000
 80038a4:	053e2d63 	.word	0x053e2d63

080038a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe ffea 	bl	800288e <LL_ADC_IsDisableOngoing>
 80038ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe ffd1 	bl	8002868 <LL_ADC_IsEnabled>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d047      	beq.n	800395c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d144      	bne.n	800395c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030d 	and.w	r3, r3, #13
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10c      	bne.n	80038fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe ffab 	bl	8002840 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2203      	movs	r2, #3
 80038f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038f2:	f7fe fdfb 	bl	80024ec <HAL_GetTick>
 80038f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038f8:	e029      	b.n	800394e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	f043 0210 	orr.w	r2, r3, #16
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390a:	f043 0201 	orr.w	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e023      	b.n	800395e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003916:	f7fe fde9 	bl	80024ec <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d914      	bls.n	800394e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e007      	b.n	800395e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1dc      	bne.n	8003916 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <LL_ADC_StartCalibration>:
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003982:	4313      	orrs	r3, r2
 8003984:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_IsCalibrationOnGoing>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ac:	d101      	bne.n	80039b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_ADCEx_Calibration_Start+0x1c>
 80039d8:	2302      	movs	r3, #2
 80039da:	e04d      	b.n	8003a78 <HAL_ADCEx_Calibration_Start+0xb8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff5f 	bl	80038a8 <ADC_Disable>
 80039ea:	4603      	mov	r3, r0
 80039ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d136      	bne.n	8003a62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	f043 0202 	orr.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ffa9 	bl	8003966 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a14:	e014      	b.n	8003a40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003a22:	d30d      	bcc.n	8003a40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f023 0312 	bic.w	r3, r3, #18
 8003a2c:	f043 0210 	orr.w	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e01b      	b.n	8003a78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ffa7 	bl	8003998 <LL_ADC_IsCalibrationOnGoing>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e2      	bne.n	8003a16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f023 0303 	bic.w	r3, r3, #3
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
 8003a60:	e005      	b.n	8003a6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	60d3      	str	r3, [r2, #12]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0307 	and.w	r3, r3, #7
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
	...

08003ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bb0:	d301      	bcc.n	8003bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e00f      	b.n	8003bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <SysTick_Config+0x40>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bbe:	210f      	movs	r1, #15
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	f7ff ff8e 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <SysTick_Config+0x40>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <SysTick_Config+0x40>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000e010 	.word	0xe000e010

08003be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff47 	bl	8003a80 <__NVIC_SetPriorityGrouping>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c0c:	f7ff ff5c 	bl	8003ac8 <__NVIC_GetPriorityGrouping>
 8003c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f7ff ff8e 	bl	8003b38 <NVIC_EncodePriority>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff ff5d 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ffb0 	bl	8003ba0 <SysTick_Config>
 8003c40:	4603      	mov	r3, r0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5a:	e148      	b.n	8003eee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	2101      	movs	r1, #1
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 813a 	beq.w	8003ee8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d005      	beq.n	8003c8c <HAL_GPIO_Init+0x40>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d130      	bne.n	8003cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	f003 0201 	and.w	r2, r3, #1
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d017      	beq.n	8003d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	2203      	movs	r2, #3
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d123      	bne.n	8003d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	08da      	lsrs	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3208      	adds	r2, #8
 8003d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	08da      	lsrs	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3208      	adds	r2, #8
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 0203 	and.w	r2, r3, #3
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8094 	beq.w	8003ee8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc0:	4b52      	ldr	r3, [pc, #328]	; (8003f0c <HAL_GPIO_Init+0x2c0>)
 8003dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc4:	4a51      	ldr	r2, [pc, #324]	; (8003f0c <HAL_GPIO_Init+0x2c0>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6613      	str	r3, [r2, #96]	; 0x60
 8003dcc:	4b4f      	ldr	r3, [pc, #316]	; (8003f0c <HAL_GPIO_Init+0x2c0>)
 8003dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd8:	4a4d      	ldr	r2, [pc, #308]	; (8003f10 <HAL_GPIO_Init+0x2c4>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	3302      	adds	r3, #2
 8003de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e02:	d00d      	beq.n	8003e20 <HAL_GPIO_Init+0x1d4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a43      	ldr	r2, [pc, #268]	; (8003f14 <HAL_GPIO_Init+0x2c8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <HAL_GPIO_Init+0x1d0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a42      	ldr	r2, [pc, #264]	; (8003f18 <HAL_GPIO_Init+0x2cc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_GPIO_Init+0x1cc>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e004      	b.n	8003e22 <HAL_GPIO_Init+0x1d6>
 8003e18:	2307      	movs	r3, #7
 8003e1a:	e002      	b.n	8003e22 <HAL_GPIO_Init+0x1d6>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <HAL_GPIO_Init+0x1d6>
 8003e20:	2300      	movs	r3, #0
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	f002 0203 	and.w	r2, r2, #3
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	4093      	lsls	r3, r2
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e32:	4937      	ldr	r1, [pc, #220]	; (8003f10 <HAL_GPIO_Init+0x2c4>)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3302      	adds	r3, #2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e40:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e6a:	4b2c      	ldr	r3, [pc, #176]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4013      	ands	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e8e:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e94:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ebe:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ee2:	4a0e      	ldr	r2, [pc, #56]	; (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	3301      	adds	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f47f aeaf 	bne.w	8003c5c <HAL_GPIO_Init+0x10>
  }
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40010000 	.word	0x40010000
 8003f14:	48000400 	.word	0x48000400
 8003f18:	48000800 	.word	0x48000800
 8003f1c:	40010400 	.word	0x40010400

08003f20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	e001      	b.n	8003f42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	807b      	strh	r3, [r7, #2]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f60:	787b      	ldrb	r3, [r7, #1]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f66:	887a      	ldrh	r2, [r7, #2]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f6c:	e002      	b.n	8003f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f6e:	887a      	ldrh	r2, [r7, #2]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40007000 	.word	0x40007000

08003fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fca:	d130      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd8:	d038      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2232      	movs	r2, #50	; 0x32
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004000:	e002      	b.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b01      	subs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d102      	bne.n	800401c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f2      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d110      	bne.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d007      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004044:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000
 8004060:	20000000 	.word	0x20000000
 8004064:	431bde83 	.word	0x431bde83

08004068 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f000 bc02 	b.w	8004880 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407c:	4b96      	ldr	r3, [pc, #600]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004086:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80e4 	beq.w	8004266 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4c>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	f040 808b 	bne.w	80041c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 8087 	bne.w	80041c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_OscConfig+0x64>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e3d9      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1a      	ldr	r2, [r3, #32]
 80040d0:	4b81      	ldr	r3, [pc, #516]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <HAL_RCC_OscConfig+0x7e>
 80040dc:	4b7e      	ldr	r3, [pc, #504]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e4:	e005      	b.n	80040f2 <HAL_RCC_OscConfig+0x8a>
 80040e6:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d223      	bcs.n	800413e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fd8c 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e3ba      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800410a:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a72      	ldr	r2, [pc, #456]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	496d      	ldr	r1, [pc, #436]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004128:	4b6b      	ldr	r3, [pc, #428]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	4968      	ldr	r1, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
 800413c:	e025      	b.n	800418a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800413e:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004144:	f043 0308 	orr.w	r3, r3, #8
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4960      	ldr	r1, [pc, #384]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800415c:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	021b      	lsls	r3, r3, #8
 800416a:	495b      	ldr	r1, [pc, #364]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800416c:	4313      	orrs	r3, r2
 800416e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fd4c 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e37a      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800418a:	f000 fc81 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	4950      	ldr	r1, [pc, #320]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <HAL_RCC_OscConfig+0x278>)
 80041a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe f94c 	bl	800244c <HAL_InitTick>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d052      	beq.n	8004264 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	e35e      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d032      	beq.n	8004230 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ca:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d6:	f7fe f989 	bl	80024ec <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041de:	f7fe f985 	bl	80024ec <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e347      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041f0:	4b39      	ldr	r3, [pc, #228]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a35      	ldr	r2, [pc, #212]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004202:	f043 0308 	orr.w	r3, r3, #8
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4930      	ldr	r1, [pc, #192]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800421a:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	492b      	ldr	r1, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
 800422e:	e01a      	b.n	8004266 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004230:	4b29      	ldr	r3, [pc, #164]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800423c:	f7fe f956 	bl	80024ec <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004244:	f7fe f952 	bl	80024ec <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e314      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x1dc>
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004264:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d073      	beq.n	800435a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x21c>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b0c      	cmp	r3, #12
 800427c:	d10e      	bne.n	800429c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d10b      	bne.n	800429c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004284:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d063      	beq.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d15f      	bne.n	8004358 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e2f1      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d106      	bne.n	80042b4 <HAL_RCC_OscConfig+0x24c>
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e025      	b.n	8004300 <HAL_RCC_OscConfig+0x298>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042bc:	d114      	bne.n	80042e8 <HAL_RCC_OscConfig+0x280>
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a05      	ldr	r2, [pc, #20]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e013      	b.n	8004300 <HAL_RCC_OscConfig+0x298>
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800cae8 	.word	0x0800cae8
 80042e0:	20000000 	.word	0x20000000
 80042e4:	20000004 	.word	0x20000004
 80042e8:	4ba0      	ldr	r3, [pc, #640]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a9f      	ldr	r2, [pc, #636]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b9d      	ldr	r3, [pc, #628]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a9c      	ldr	r2, [pc, #624]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe f8f0 	bl	80024ec <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe f8ec 	bl	80024ec <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e2ae      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004322:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x2a8>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f8dc 	bl	80024ec <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe f8d8 	bl	80024ec <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e29a      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x2d0>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d005      	beq.n	8004378 <HAL_RCC_OscConfig+0x310>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d119      	bne.n	80043a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d116      	bne.n	80043a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004378:	4b7c      	ldr	r3, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x328>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e277      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	4973      	ldr	r1, [pc, #460]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a4:	e040      	b.n	8004428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d023      	beq.n	80043f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ae:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe f897 	bl	80024ec <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe f893 	bl	80024ec <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e255      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	495f      	ldr	r1, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
 80043f4:	e018      	b.n	8004428 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b5d      	ldr	r3, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5c      	ldr	r2, [pc, #368]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe f873 	bl	80024ec <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fe f86f 	bl	80024ec <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e231      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d03c      	beq.n	80044ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01c      	beq.n	8004476 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443c:	4b4b      	ldr	r3, [pc, #300]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	4a4a      	ldr	r2, [pc, #296]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fe f84e 	bl	80024ec <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe f84a 	bl	80024ec <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e20c      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ef      	beq.n	8004454 <HAL_RCC_OscConfig+0x3ec>
 8004474:	e01b      	b.n	80044ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fe f831 	bl	80024ec <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7fe f82d 	bl	80024ec <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e1ef      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ef      	bne.n	800448e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a6 	beq.w	8004608 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6593      	str	r3, [r2, #88]	; 0x58
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d118      	bne.n	8004526 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004500:	f7fd fff4 	bl	80024ec <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fd fff0 	bl	80024ec <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1b2      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d108      	bne.n	8004540 <HAL_RCC_OscConfig+0x4d8>
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453e:	e029      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d115      	bne.n	8004574 <HAL_RCC_OscConfig+0x50c>
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a07      	ldr	r2, [pc, #28]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a03      	ldr	r2, [pc, #12]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004568:	e014      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	40007000 	.word	0x40007000
 8004574:	4b9a      	ldr	r3, [pc, #616]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a99      	ldr	r2, [pc, #612]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004584:	4b96      	ldr	r3, [pc, #600]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a95      	ldr	r2, [pc, #596]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d016      	beq.n	80045ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fd ffa6 	bl	80024ec <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fd ffa2 	bl	80024ec <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e162      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	4b89      	ldr	r3, [pc, #548]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ed      	beq.n	80045a4 <HAL_RCC_OscConfig+0x53c>
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fd ff8f 	bl	80024ec <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fd ff8b 	bl	80024ec <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e14b      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	4b7d      	ldr	r3, [pc, #500]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ed      	bne.n	80045d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fc:	4b78      	ldr	r3, [pc, #480]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a77      	ldr	r2, [pc, #476]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d03c      	beq.n	800468e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01c      	beq.n	8004656 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800461c:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800461e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004622:	4a6f      	ldr	r2, [pc, #444]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fd ff5e 	bl	80024ec <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004634:	f7fd ff5a 	bl	80024ec <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e11c      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004646:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ef      	beq.n	8004634 <HAL_RCC_OscConfig+0x5cc>
 8004654:	e01b      	b.n	800468e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004656:	4b62      	ldr	r3, [pc, #392]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800465c:	4a60      	ldr	r2, [pc, #384]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fd ff41 	bl	80024ec <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466e:	f7fd ff3d 	bl	80024ec <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e0ff      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ef      	bne.n	800466e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80f3 	beq.w	800487e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	2b02      	cmp	r3, #2
 800469e:	f040 80c9 	bne.w	8004834 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046a2:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f003 0203 	and.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d12c      	bne.n	8004710 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	3b01      	subs	r3, #1
 80046c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d123      	bne.n	8004710 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d11b      	bne.n	8004710 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d113      	bne.n	8004710 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d109      	bne.n	8004710 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d06b      	beq.n	80047e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d062      	beq.n	80047dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004716:	4b32      	ldr	r3, [pc, #200]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0ac      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2d      	ldr	r2, [pc, #180]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800472c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004730:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004732:	f7fd fedb 	bl	80024ec <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473a:	f7fd fed7 	bl	80024ec <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e099      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f0      	bne.n	800473a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_RCC_OscConfig+0x77c>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004768:	3a01      	subs	r2, #1
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	4311      	orrs	r1, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004772:	0212      	lsls	r2, r2, #8
 8004774:	4311      	orrs	r1, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800477a:	0852      	lsrs	r2, r2, #1
 800477c:	3a01      	subs	r2, #1
 800477e:	0552      	lsls	r2, r2, #21
 8004780:	4311      	orrs	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004786:	0852      	lsrs	r2, r2, #1
 8004788:	3a01      	subs	r2, #1
 800478a:	0652      	lsls	r2, r2, #25
 800478c:	4311      	orrs	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004792:	06d2      	lsls	r2, r2, #27
 8004794:	430a      	orrs	r2, r1
 8004796:	4912      	ldr	r1, [pc, #72]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 8004798:	4313      	orrs	r3, r2
 800479a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80047a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80047ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b4:	f7fd fe9a 	bl	80024ec <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fd fe96 	bl	80024ec <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e058      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ce:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <HAL_RCC_OscConfig+0x778>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047da:	e050      	b.n	800487e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04f      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
 80047e0:	40021000 	.word	0x40021000
 80047e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e8:	4b27      	ldr	r3, [pc, #156]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d144      	bne.n	800487e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004800:	4b21      	ldr	r3, [pc, #132]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a20      	ldr	r2, [pc, #128]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800480c:	f7fd fe6e 	bl	80024ec <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd fe6a 	bl	80024ec <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e02c      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x7ac>
 8004832:	e024      	b.n	800487e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	d01f      	beq.n	800487a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a12      	ldr	r2, [pc, #72]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004840:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fe51 	bl	80024ec <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fd fe4d 	bl	80024ec <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e00f      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	4905      	ldr	r1, [pc, #20]	; (8004888 <HAL_RCC_OscConfig+0x820>)
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x824>)
 8004874:	4013      	ands	r3, r2
 8004876:	60cb      	str	r3, [r1, #12]
 8004878:	e001      	b.n	800487e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40021000 	.word	0x40021000
 800488c:	feeefffc 	.word	0xfeeefffc

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0e7      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b75      	ldr	r3, [pc, #468]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d910      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b72      	ldr	r3, [pc, #456]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0207 	bic.w	r2, r3, #7
 80048ba:	4970      	ldr	r1, [pc, #448]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4313      	orrs	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b6e      	ldr	r3, [pc, #440]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0cf      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d010      	beq.n	8004902 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4b66      	ldr	r3, [pc, #408]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d908      	bls.n	8004902 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4960      	ldr	r1, [pc, #384]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d04c      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b03      	cmp	r3, #3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004916:	4b5a      	ldr	r3, [pc, #360]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d121      	bne.n	8004966 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0a6      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	4b54      	ldr	r3, [pc, #336]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d115      	bne.n	8004966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e09a      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004946:	4b4e      	ldr	r3, [pc, #312]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e08e      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004956:	4b4a      	ldr	r3, [pc, #296]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e086      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004966:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4943      	ldr	r1, [pc, #268]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	4313      	orrs	r3, r2
 8004976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004978:	f7fd fdb8 	bl	80024ec <HAL_GetTick>
 800497c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	e00a      	b.n	8004996 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004980:	f7fd fdb4 	bl	80024ec <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e06e      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 020c 	and.w	r2, r3, #12
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d1eb      	bne.n	8004980 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	4b31      	ldr	r3, [pc, #196]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d208      	bcs.n	80049d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c4:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	492b      	ldr	r1, [pc, #172]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d6:	4b29      	ldr	r3, [pc, #164]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d210      	bcs.n	8004a06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f023 0207 	bic.w	r2, r3, #7
 80049ec:	4923      	ldr	r1, [pc, #140]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f4:	4b21      	ldr	r3, [pc, #132]	; (8004a7c <HAL_RCC_ClockConfig+0x1ec>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d001      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e036      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a12:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	4918      	ldr	r1, [pc, #96]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a30:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4910      	ldr	r1, [pc, #64]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a44:	f000 f824 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	490b      	ldr	r1, [pc, #44]	; (8004a84 <HAL_RCC_ClockConfig+0x1f4>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1f8>)
 8004a62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1fc>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fd fcef 	bl	800244c <HAL_InitTick>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a72:	7afb      	ldrb	r3, [r7, #11]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40022000 	.word	0x40022000
 8004a80:	40021000 	.word	0x40021000
 8004a84:	0800cae8 	.word	0x0800cae8
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b089      	sub	sp, #36	; 0x24
 8004a94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	2b0c      	cmp	r3, #12
 8004abc:	d121      	bne.n	8004b02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d11e      	bne.n	8004b02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ac4:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ad0:	4b31      	ldr	r3, [pc, #196]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	e005      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10d      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d102      	bne.n	8004b0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e004      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b14:	4b23      	ldr	r3, [pc, #140]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	2b0c      	cmp	r3, #12
 8004b1c:	d134      	bne.n	8004b88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d003      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0xac>
 8004b34:	e005      	b.n	8004b42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b38:	617b      	str	r3, [r7, #20]
      break;
 8004b3a:	e005      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b3e:	617b      	str	r3, [r7, #20]
      break;
 8004b40:	e002      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	617b      	str	r3, [r7, #20]
      break;
 8004b46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	fb03 f202 	mul.w	r2, r3, r2
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	0e5b      	lsrs	r3, r3, #25
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b88:	69bb      	ldr	r3, [r7, #24]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3724      	adds	r7, #36	; 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	0800cb00 	.word	0x0800cb00
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000000 	.word	0x20000000

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc4:	f7ff fff0 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0a1b      	lsrs	r3, r3, #8
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4904      	ldr	r1, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800caf8 	.word	0x0800caf8

08004bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf0:	f7ff ffda 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0adb      	lsrs	r3, r3, #11
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4904      	ldr	r1, [pc, #16]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800caf8 	.word	0x0800caf8

08004c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c24:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c30:	f7ff f9b6 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004c34:	6178      	str	r0, [r7, #20]
 8004c36:	e014      	b.n	8004c62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c38:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6593      	str	r3, [r2, #88]	; 0x58
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c50:	f7ff f9a6 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004c54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c56:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d10b      	bne.n	8004c82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b80      	cmp	r3, #128	; 0x80
 8004c6e:	d919      	bls.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2ba0      	cmp	r3, #160	; 0xa0
 8004c74:	d902      	bls.n	8004c7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c76:	2302      	movs	r3, #2
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e013      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	e010      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b80      	cmp	r3, #128	; 0x80
 8004c86:	d902      	bls.n	8004c8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c88:	2303      	movs	r3, #3
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e00a      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b80      	cmp	r3, #128	; 0x80
 8004c92:	d102      	bne.n	8004c9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c94:	2302      	movs	r3, #2
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	e004      	b.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b70      	cmp	r3, #112	; 0x70
 8004c9e:	d101      	bne.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 0207 	bic.w	r2, r3, #7
 8004cac:	4909      	ldr	r1, [pc, #36]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d001      	beq.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40022000 	.word	0x40022000

08004cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d031      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cfc:	d01a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d02:	d814      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d0c:	d10f      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d0e:	4b5d      	ldr	r3, [pc, #372]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	4a5c      	ldr	r2, [pc, #368]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d1a:	e00c      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f9de 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d2c:	e003      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	74fb      	strb	r3, [r7, #19]
      break;
 8004d32:	e000      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10b      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d3c:	4b51      	ldr	r3, [pc, #324]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	494e      	ldr	r1, [pc, #312]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d52:	e001      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 809e 	beq.w	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d66:	2300      	movs	r3, #0
 8004d68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d6a:	4b46      	ldr	r3, [pc, #280]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d84:	4a3f      	ldr	r2, [pc, #252]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d8c:	4b3d      	ldr	r3, [pc, #244]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a39      	ldr	r2, [pc, #228]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004da8:	f7fd fba0 	bl	80024ec <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dae:	e009      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004db0:	f7fd fb9c 	bl	80024ec <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d902      	bls.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	74fb      	strb	r3, [r7, #19]
        break;
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc4:	4b30      	ldr	r3, [pc, #192]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ef      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d15a      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dd6:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01e      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d019      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004df2:	4b24      	ldr	r3, [pc, #144]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0e:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	4a1b      	ldr	r2, [pc, #108]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e1e:	4a19      	ldr	r2, [pc, #100]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d016      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fb5c 	bl	80024ec <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e36:	e00b      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e38:	f7fd fb58 	bl	80024ec <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d902      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004e4e:	e006      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ec      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	4904      	ldr	r1, [pc, #16]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e7a:	e009      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	74bb      	strb	r3, [r7, #18]
 8004e80:	e006      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e82:	bf00      	nop
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e90:	7c7b      	ldrb	r3, [r7, #17]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e96:	4b8a      	ldr	r3, [pc, #552]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	4a89      	ldr	r2, [pc, #548]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eae:	4b84      	ldr	r3, [pc, #528]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f023 0203 	bic.w	r2, r3, #3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	4980      	ldr	r1, [pc, #512]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ed0:	4b7b      	ldr	r3, [pc, #492]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 020c 	bic.w	r2, r3, #12
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	4978      	ldr	r1, [pc, #480]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ef2:	4b73      	ldr	r3, [pc, #460]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	496f      	ldr	r1, [pc, #444]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f14:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	4967      	ldr	r1, [pc, #412]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f36:	4b62      	ldr	r3, [pc, #392]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	495e      	ldr	r1, [pc, #376]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00a      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4956      	ldr	r1, [pc, #344]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f7a:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d028      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f9c:	4b48      	ldr	r3, [pc, #288]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	4945      	ldr	r1, [pc, #276]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fba:	d106      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fbc:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc6:	60d3      	str	r3, [r2, #12]
 8004fc8:	e011      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	2101      	movs	r1, #1
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 f882 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d028      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ffa:	4b31      	ldr	r3, [pc, #196]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	492d      	ldr	r1, [pc, #180]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005018:	d106      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800501a:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005020:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005024:	60d3      	str	r3, [r2, #12]
 8005026:	e011      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005030:	d10c      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	2101      	movs	r1, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f853 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01c      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005066:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d10c      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2102      	movs	r1, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f830 	bl	80050e4 <RCCEx_PLLSAI1_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800509e:	4b08      	ldr	r3, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ac:	4904      	ldr	r1, [pc, #16]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000

080050c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a04      	ldr	r2, [pc, #16]	; (80050e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80050ce:	f043 0304 	orr.w	r3, r3, #4
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40021000 	.word	0x40021000

080050e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050f2:	4b74      	ldr	r3, [pc, #464]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050fe:	4b71      	ldr	r3, [pc, #452]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0203 	and.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d10d      	bne.n	800512a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
       ||
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005116:	4b6b      	ldr	r3, [pc, #428]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
       ||
 8005126:	429a      	cmp	r2, r3
 8005128:	d047      	beq.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
 800512e:	e044      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d018      	beq.n	800516a <RCCEx_PLLSAI1_Config+0x86>
 8005138:	2b03      	cmp	r3, #3
 800513a:	d825      	bhi.n	8005188 <RCCEx_PLLSAI1_Config+0xa4>
 800513c:	2b01      	cmp	r3, #1
 800513e:	d002      	beq.n	8005146 <RCCEx_PLLSAI1_Config+0x62>
 8005140:	2b02      	cmp	r3, #2
 8005142:	d009      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x74>
 8005144:	e020      	b.n	8005188 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005146:	4b5f      	ldr	r3, [pc, #380]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11d      	bne.n	800518e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005156:	e01a      	b.n	800518e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005158:	4b5a      	ldr	r3, [pc, #360]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d116      	bne.n	8005192 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005168:	e013      	b.n	8005192 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800516a:	4b56      	ldr	r3, [pc, #344]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10f      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005176:	4b53      	ldr	r3, [pc, #332]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005186:	e006      	b.n	8005196 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e004      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005196:	bf00      	nop
    }

    if(status == HAL_OK)
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10d      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800519e:	4b49      	ldr	r3, [pc, #292]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	430b      	orrs	r3, r1
 80051b4:	4943      	ldr	r1, [pc, #268]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d17c      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051c0:	4b40      	ldr	r3, [pc, #256]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3f      	ldr	r2, [pc, #252]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051cc:	f7fd f98e 	bl	80024ec <HAL_GetTick>
 80051d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d2:	e009      	b.n	80051e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d4:	f7fd f98a 	bl	80024ec <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d902      	bls.n	80051e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	73fb      	strb	r3, [r7, #15]
        break;
 80051e6:	e005      	b.n	80051f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051e8:	4b36      	ldr	r3, [pc, #216]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ef      	bne.n	80051d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d15f      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d110      	bne.n	8005222 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005200:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005208:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6892      	ldr	r2, [r2, #8]
 8005210:	0211      	lsls	r1, r2, #8
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	06d2      	lsls	r2, r2, #27
 8005218:	430a      	orrs	r2, r1
 800521a:	492a      	ldr	r1, [pc, #168]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521c:	4313      	orrs	r3, r2
 800521e:	610b      	str	r3, [r1, #16]
 8005220:	e027      	b.n	8005272 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d112      	bne.n	800524e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b26      	ldr	r3, [pc, #152]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6912      	ldr	r2, [r2, #16]
 800523e:	0852      	lsrs	r2, r2, #1
 8005240:	3a01      	subs	r2, #1
 8005242:	0552      	lsls	r2, r2, #21
 8005244:	430a      	orrs	r2, r1
 8005246:	491f      	ldr	r1, [pc, #124]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	4313      	orrs	r3, r2
 800524a:	610b      	str	r3, [r1, #16]
 800524c:	e011      	b.n	8005272 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524e:	4b1d      	ldr	r3, [pc, #116]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005256:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6892      	ldr	r2, [r2, #8]
 800525e:	0211      	lsls	r1, r2, #8
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6952      	ldr	r2, [r2, #20]
 8005264:	0852      	lsrs	r2, r2, #1
 8005266:	3a01      	subs	r2, #1
 8005268:	0652      	lsls	r2, r2, #25
 800526a:	430a      	orrs	r2, r1
 800526c:	4915      	ldr	r1, [pc, #84]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526e:	4313      	orrs	r3, r2
 8005270:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005272:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a13      	ldr	r2, [pc, #76]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800527c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fd f935 	bl	80024ec <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005284:	e009      	b.n	800529a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005286:	f7fd f931 	bl	80024ec <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d902      	bls.n	800529a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	73fb      	strb	r3, [r7, #15]
          break;
 8005298:	e005      	b.n	80052a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ef      	beq.n	8005286 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	4903      	ldr	r1, [pc, #12]	; (80052c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e095      	b.n	8005406 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ea:	d009      	beq.n	8005300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	61da      	str	r2, [r3, #28]
 80052f2:	e005      	b.n	8005300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fe46 	bl	8001fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005340:	d902      	bls.n	8005348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e002      	b.n	800534e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800534c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005356:	d007      	beq.n	8005368 <HAL_SPI_Init+0xa0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	ea42 0103 	orr.w	r1, r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0204 	and.w	r2, r3, #4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053e4:	ea42 0103 	orr.w	r1, r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b088      	sub	sp, #32
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_SPI_Transmit+0x22>
 800542c:	2302      	movs	r3, #2
 800542e:	e15f      	b.n	80056f0 <HAL_SPI_Transmit+0x2e2>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005438:	f7fd f858 	bl	80024ec <HAL_GetTick>
 800543c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005452:	e148      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_SPI_Transmit+0x52>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005464:	e13f      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2203      	movs	r2, #3
 800546a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	88fa      	ldrh	r2, [r7, #6]
 800547e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	88fa      	ldrh	r2, [r7, #6]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	d10f      	bne.n	80054d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d007      	beq.n	80054f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f8:	d94f      	bls.n	800559a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Transmit+0xfa>
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d142      	bne.n	800558e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	881a      	ldrh	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	1c9a      	adds	r2, r3, #2
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b01      	subs	r3, #1
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800552c:	e02f      	b.n	800558e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b02      	cmp	r3, #2
 800553a:	d112      	bne.n	8005562 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	1c9a      	adds	r2, r3, #2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005560:	e015      	b.n	800558e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005562:	f7fc ffc3 	bl	80024ec <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d803      	bhi.n	800557a <HAL_SPI_Transmit+0x16c>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005578:	d102      	bne.n	8005580 <HAL_SPI_Transmit+0x172>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800558c:	e0ab      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1ca      	bne.n	800552e <HAL_SPI_Transmit+0x120>
 8005598:	e080      	b.n	800569c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0x19a>
 80055a2:	8afb      	ldrh	r3, [r7, #22]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d174      	bne.n	8005692 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d912      	bls.n	80055d8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d6:	e05c      	b.n	8005692 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80055fe:	e048      	b.n	8005692 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d12b      	bne.n	8005666 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d912      	bls.n	800563e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	881a      	ldrh	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	1c9a      	adds	r2, r3, #2
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b02      	subs	r3, #2
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800563c:	e029      	b.n	8005692 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005664:	e015      	b.n	8005692 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005666:	f7fc ff41 	bl	80024ec <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d803      	bhi.n	800567e <HAL_SPI_Transmit+0x270>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d102      	bne.n	8005684 <HAL_SPI_Transmit+0x276>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d106      	bne.n	8005692 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005690:	e029      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1b1      	bne.n	8005600 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f947 	bl	8005934 <SPI_EndRxTxTransaction>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e003      	b.n	80056e6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005708:	f7fc fef0 	bl	80024ec <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	4413      	add	r3, r2
 8005716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005718:	f7fc fee8 	bl	80024ec <HAL_GetTick>
 800571c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571e:	4b39      	ldr	r3, [pc, #228]	; (8005804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	0d1b      	lsrs	r3, r3, #20
 8005726:	69fa      	ldr	r2, [r7, #28]
 8005728:	fb02 f303 	mul.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572e:	e054      	b.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d050      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fc fed8 	bl	80024ec <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	429a      	cmp	r2, r3
 8005746:	d902      	bls.n	800574e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d13d      	bne.n	80057ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800575c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005766:	d111      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005770:	d004      	beq.n	800577c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800577a:	d107      	bne.n	800578c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005794:	d10f      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e017      	b.n	80057fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	461a      	mov	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d19b      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000000 	.word	0x20000000

08005808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800581a:	f7fc fe67 	bl	80024ec <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	1a9b      	subs	r3, r3, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800582a:	f7fc fe5f 	bl	80024ec <HAL_GetTick>
 800582e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005838:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00da      	lsls	r2, r3, #3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	0d1b      	lsrs	r3, r3, #20
 8005848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005850:	e060      	b.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005858:	d107      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005868:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d050      	beq.n	8005914 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005872:	f7fc fe3b 	bl	80024ec <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d902      	bls.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d13d      	bne.n	8005904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058a0:	d111      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058aa:	d004      	beq.n	80058b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b4:	d107      	bne.n	80058c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ce:	d10f      	bne.n	80058f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e010      	b.n	8005926 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	3b01      	subs	r3, #1
 8005912:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4013      	ands	r3, r2
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d196      	bne.n	8005852 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000

08005934 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2200      	movs	r2, #0
 8005948:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f7ff ff5b 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e027      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2200      	movs	r2, #0
 8005970:	2180      	movs	r1, #128	; 0x80
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fec0 	bl	80056f8 <SPI_WaitFlagStateUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005982:	f043 0220 	orr.w	r2, r3, #32
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e014      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff ff34 	bl	8005808 <SPI_WaitFifoStateUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e000      	b.n	80059b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e049      	b.n	8005a66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fb24 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4610      	mov	r0, r2
 8005a00:	f000 fb52 	bl	80060a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e049      	b.n	8005b14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f841 	bl	8005b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4610      	mov	r0, r2
 8005aae:	f000 fafb 	bl	80060a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d109      	bne.n	8005b54 <HAL_TIM_PWM_Start+0x24>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e03c      	b.n	8005bce <HAL_TIM_PWM_Start+0x9e>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d109      	bne.n	8005b6e <HAL_TIM_PWM_Start+0x3e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e02f      	b.n	8005bce <HAL_TIM_PWM_Start+0x9e>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d109      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x58>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	bf14      	ite	ne
 8005b80:	2301      	movne	r3, #1
 8005b82:	2300      	moveq	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	e022      	b.n	8005bce <HAL_TIM_PWM_Start+0x9e>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b0c      	cmp	r3, #12
 8005b8c:	d109      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x72>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	bf14      	ite	ne
 8005b9a:	2301      	movne	r3, #1
 8005b9c:	2300      	moveq	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	e015      	b.n	8005bce <HAL_TIM_PWM_Start+0x9e>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d109      	bne.n	8005bbc <HAL_TIM_PWM_Start+0x8c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	bf14      	ite	ne
 8005bb4:	2301      	movne	r3, #1
 8005bb6:	2300      	moveq	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	e008      	b.n	8005bce <HAL_TIM_PWM_Start+0x9e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e07e      	b.n	8005cd4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_PWM_Start+0xb6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be4:	e023      	b.n	8005c2e <HAL_TIM_PWM_Start+0xfe>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b04      	cmp	r3, #4
 8005bea:	d104      	bne.n	8005bf6 <HAL_TIM_PWM_Start+0xc6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf4:	e01b      	b.n	8005c2e <HAL_TIM_PWM_Start+0xfe>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d104      	bne.n	8005c06 <HAL_TIM_PWM_Start+0xd6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c04:	e013      	b.n	8005c2e <HAL_TIM_PWM_Start+0xfe>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b0c      	cmp	r3, #12
 8005c0a:	d104      	bne.n	8005c16 <HAL_TIM_PWM_Start+0xe6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	e00b      	b.n	8005c2e <HAL_TIM_PWM_Start+0xfe>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0xf6>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c24:	e003      	b.n	8005c2e <HAL_TIM_PWM_Start+0xfe>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fdb2 	bl	80067a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <HAL_TIM_PWM_Start+0x1ac>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_TIM_PWM_Start+0x12a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <HAL_TIM_PWM_Start+0x1b0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_TIM_PWM_Start+0x12a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <HAL_TIM_PWM_Start+0x1b4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_PWM_Start+0x12e>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_TIM_PWM_Start+0x130>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <HAL_TIM_PWM_Start+0x1ac>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x162>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c86:	d004      	beq.n	8005c92 <HAL_TIM_PWM_Start+0x162>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <HAL_TIM_PWM_Start+0x1b0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d115      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <HAL_TIM_PWM_Start+0x1b8>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	d015      	beq.n	8005cd0 <HAL_TIM_PWM_Start+0x1a0>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005caa:	d011      	beq.n	8005cd0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbc:	e008      	b.n	8005cd0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0201 	orr.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e000      	b.n	8005cd2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40014000 	.word	0x40014000
 8005ce4:	40014400 	.word	0x40014400
 8005ce8:	00010007 	.word	0x00010007

08005cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d101      	bne.n	8005d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d06:	2302      	movs	r3, #2
 8005d08:	e0ff      	b.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b14      	cmp	r3, #20
 8005d16:	f200 80f0 	bhi.w	8005efa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005efb 	.word	0x08005efb
 8005d28:	08005efb 	.word	0x08005efb
 8005d2c:	08005efb 	.word	0x08005efb
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005efb 	.word	0x08005efb
 8005d38:	08005efb 	.word	0x08005efb
 8005d3c:	08005efb 	.word	0x08005efb
 8005d40:	08005df7 	.word	0x08005df7
 8005d44:	08005efb 	.word	0x08005efb
 8005d48:	08005efb 	.word	0x08005efb
 8005d4c:	08005efb 	.word	0x08005efb
 8005d50:	08005e37 	.word	0x08005e37
 8005d54:	08005efb 	.word	0x08005efb
 8005d58:	08005efb 	.word	0x08005efb
 8005d5c:	08005efb 	.word	0x08005efb
 8005d60:	08005e79 	.word	0x08005e79
 8005d64:	08005efb 	.word	0x08005efb
 8005d68:	08005efb 	.word	0x08005efb
 8005d6c:	08005efb 	.word	0x08005efb
 8005d70:	08005eb9 	.word	0x08005eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f9f8 	bl	8006170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0208 	orr.w	r2, r2, #8
 8005d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0204 	bic.w	r2, r2, #4
 8005d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6999      	ldr	r1, [r3, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	619a      	str	r2, [r3, #24]
      break;
 8005db2:	e0a5      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 fa54 	bl	8006268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6999      	ldr	r1, [r3, #24]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	021a      	lsls	r2, r3, #8
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	619a      	str	r2, [r3, #24]
      break;
 8005df4:	e084      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 faad 	bl	800635c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0208 	orr.w	r2, r2, #8
 8005e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0204 	bic.w	r2, r2, #4
 8005e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69d9      	ldr	r1, [r3, #28]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	691a      	ldr	r2, [r3, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	61da      	str	r2, [r3, #28]
      break;
 8005e34:	e064      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fb05 	bl	800644c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69da      	ldr	r2, [r3, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69d9      	ldr	r1, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	021a      	lsls	r2, r3, #8
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	61da      	str	r2, [r3, #28]
      break;
 8005e76:	e043      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fb42 	bl	8006508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eb6:	e023      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fb7a 	bl	80065b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	021a      	lsls	r2, r3, #8
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ef8:	e002      	b.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	75fb      	strb	r3, [r7, #23]
      break;
 8005efe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIM_ConfigClockSource+0x1c>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e0b6      	b.n	800609e <HAL_TIM_ConfigClockSource+0x18a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6c:	d03e      	beq.n	8005fec <HAL_TIM_ConfigClockSource+0xd8>
 8005f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f72:	f200 8087 	bhi.w	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7a:	f000 8086 	beq.w	800608a <HAL_TIM_ConfigClockSource+0x176>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f82:	d87f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f84:	2b70      	cmp	r3, #112	; 0x70
 8005f86:	d01a      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0xaa>
 8005f88:	2b70      	cmp	r3, #112	; 0x70
 8005f8a:	d87b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f8c:	2b60      	cmp	r3, #96	; 0x60
 8005f8e:	d050      	beq.n	8006032 <HAL_TIM_ConfigClockSource+0x11e>
 8005f90:	2b60      	cmp	r3, #96	; 0x60
 8005f92:	d877      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f94:	2b50      	cmp	r3, #80	; 0x50
 8005f96:	d03c      	beq.n	8006012 <HAL_TIM_ConfigClockSource+0xfe>
 8005f98:	2b50      	cmp	r3, #80	; 0x50
 8005f9a:	d873      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d058      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0x13e>
 8005fa0:	2b40      	cmp	r3, #64	; 0x40
 8005fa2:	d86f      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fa4:	2b30      	cmp	r3, #48	; 0x30
 8005fa6:	d064      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fa8:	2b30      	cmp	r3, #48	; 0x30
 8005faa:	d86b      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d060      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d867      	bhi.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d05c      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d05a      	beq.n	8006072 <HAL_TIM_ConfigClockSource+0x15e>
 8005fbc:	e062      	b.n	8006084 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	f000 fbc7 	bl	8006760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	609a      	str	r2, [r3, #8]
      break;
 8005fea:	e04f      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	f000 fbb0 	bl	8006760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600e:	609a      	str	r2, [r3, #8]
      break;
 8006010:	e03c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	461a      	mov	r2, r3
 8006020:	f000 fb24 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2150      	movs	r1, #80	; 0x50
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fb7d 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006030:	e02c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800603e:	461a      	mov	r2, r3
 8006040:	f000 fb43 	bl	80066ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2160      	movs	r1, #96	; 0x60
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fb6d 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006050:	e01c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fb04 	bl	800666c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fb5d 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006070:	e00c      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f000 fb54 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006082:	e003      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e000      	b.n	800608c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800608a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800609c:	7bfb      	ldrb	r3, [r7, #15]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a2a      	ldr	r2, [pc, #168]	; (8006164 <TIM_Base_SetConfig+0xbc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_Base_SetConfig+0x20>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c6:	d108      	bne.n	80060da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a21      	ldr	r2, [pc, #132]	; (8006164 <TIM_Base_SetConfig+0xbc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00b      	beq.n	80060fa <TIM_Base_SetConfig+0x52>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d007      	beq.n	80060fa <TIM_Base_SetConfig+0x52>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <TIM_Base_SetConfig+0xc0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_Base_SetConfig+0x52>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <TIM_Base_SetConfig+0xc4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <TIM_Base_SetConfig+0xbc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0xa0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0b      	ldr	r2, [pc, #44]	; (8006168 <TIM_Base_SetConfig+0xc0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0xa0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a0a      	ldr	r2, [pc, #40]	; (800616c <TIM_Base_SetConfig+0xc4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	615a      	str	r2, [r3, #20]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400

08006170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f023 0201 	bic.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0303 	bic.w	r3, r3, #3
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f023 0302 	bic.w	r3, r3, #2
 80061bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <TIM_OC1_SetConfig+0xec>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_OC1_SetConfig+0x70>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a23      	ldr	r2, [pc, #140]	; (8006260 <TIM_OC1_SetConfig+0xf0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC1_SetConfig+0x70>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a22      	ldr	r2, [pc, #136]	; (8006264 <TIM_OC1_SetConfig+0xf4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0308 	bic.w	r3, r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a17      	ldr	r2, [pc, #92]	; (800625c <TIM_OC1_SetConfig+0xec>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d007      	beq.n	8006212 <TIM_OC1_SetConfig+0xa2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a16      	ldr	r2, [pc, #88]	; (8006260 <TIM_OC1_SetConfig+0xf0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d003      	beq.n	8006212 <TIM_OC1_SetConfig+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <TIM_OC1_SetConfig+0xf4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d111      	bne.n	8006236 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	4313      	orrs	r3, r2
 8006234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	621a      	str	r2, [r3, #32]
}
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400

08006268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	f023 0210 	bic.w	r2, r3, #16
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a22      	ldr	r2, [pc, #136]	; (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d10d      	bne.n	80062e8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a19      	ldr	r2, [pc, #100]	; (8006350 <TIM_OC2_SetConfig+0xe8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d007      	beq.n	8006300 <TIM_OC2_SetConfig+0x98>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <TIM_OC2_SetConfig+0xec>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d003      	beq.n	8006300 <TIM_OC2_SetConfig+0x98>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <TIM_OC2_SetConfig+0xf0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d113      	bne.n	8006328 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	bf00      	nop
 8006344:	371c      	adds	r7, #28
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400

0800635c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a21      	ldr	r2, [pc, #132]	; (8006440 <TIM_OC3_SetConfig+0xe4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a18      	ldr	r2, [pc, #96]	; (8006440 <TIM_OC3_SetConfig+0xe4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_OC3_SetConfig+0x96>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC3_SetConfig+0xe8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC3_SetConfig+0x96>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC3_SetConfig+0xec>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d113      	bne.n	800641a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	011b      	lsls	r3, r3, #4
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400

0800644c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800647a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800647e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	031b      	lsls	r3, r3, #12
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <TIM_OC4_SetConfig+0xb0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d007      	beq.n	80064c0 <TIM_OC4_SetConfig+0x74>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <TIM_OC4_SetConfig+0xb4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC4_SetConfig+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a12      	ldr	r2, [pc, #72]	; (8006504 <TIM_OC4_SetConfig+0xb8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d109      	bne.n	80064d4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	019b      	lsls	r3, r3, #6
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400

08006508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800654c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a13      	ldr	r2, [pc, #76]	; (80065ac <TIM_OC5_SetConfig+0xa4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_OC5_SetConfig+0x6a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <TIM_OC5_SetConfig+0xa8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC5_SetConfig+0x6a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a11      	ldr	r2, [pc, #68]	; (80065b4 <TIM_OC5_SetConfig+0xac>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d109      	bne.n	8006586 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400

080065b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a14      	ldr	r2, [pc, #80]	; (8006660 <TIM_OC6_SetConfig+0xa8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_OC6_SetConfig+0x6c>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <TIM_OC6_SetConfig+0xac>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC6_SetConfig+0x6c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <TIM_OC6_SetConfig+0xb0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d109      	bne.n	8006638 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800662a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	029b      	lsls	r3, r3, #10
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400

0800666c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 030a 	bic.w	r3, r3, #10
 80066a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f023 0210 	bic.w	r2, r3, #16
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	031b      	lsls	r3, r3, #12
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	f043 0307 	orr.w	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	609a      	str	r2, [r3, #8]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	431a      	orrs	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	609a      	str	r2, [r3, #8]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2201      	movs	r2, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1a      	ldr	r2, [r3, #32]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d109      	bne.n	8006810 <HAL_TIMEx_PWMN_Start+0x24>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b01      	cmp	r3, #1
 8006806:	bf14      	ite	ne
 8006808:	2301      	movne	r3, #1
 800680a:	2300      	moveq	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	e022      	b.n	8006856 <HAL_TIMEx_PWMN_Start+0x6a>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b04      	cmp	r3, #4
 8006814:	d109      	bne.n	800682a <HAL_TIMEx_PWMN_Start+0x3e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	bf14      	ite	ne
 8006822:	2301      	movne	r3, #1
 8006824:	2300      	moveq	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	e015      	b.n	8006856 <HAL_TIMEx_PWMN_Start+0x6a>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d109      	bne.n	8006844 <HAL_TIMEx_PWMN_Start+0x58>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b01      	cmp	r3, #1
 800683a:	bf14      	ite	ne
 800683c:	2301      	movne	r3, #1
 800683e:	2300      	moveq	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e008      	b.n	8006856 <HAL_TIMEx_PWMN_Start+0x6a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e05a      	b.n	8006914 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <HAL_TIMEx_PWMN_Start+0x82>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686c:	e013      	b.n	8006896 <HAL_TIMEx_PWMN_Start+0xaa>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d104      	bne.n	800687e <HAL_TIMEx_PWMN_Start+0x92>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800687c:	e00b      	b.n	8006896 <HAL_TIMEx_PWMN_Start+0xaa>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b08      	cmp	r3, #8
 8006882:	d104      	bne.n	800688e <HAL_TIMEx_PWMN_Start+0xa2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800688c:	e003      	b.n	8006896 <HAL_TIMEx_PWMN_Start+0xaa>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2204      	movs	r2, #4
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f920 	bl	8006ae4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_TIMEx_PWMN_Start+0x130>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d004      	beq.n	80068d2 <HAL_TIMEx_PWMN_Start+0xe6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <HAL_TIMEx_PWMN_Start+0x134>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d115      	bne.n	80068fe <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <HAL_TIMEx_PWMN_Start+0x138>)
 80068da:	4013      	ands	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d015      	beq.n	8006910 <HAL_TIMEx_PWMN_Start+0x124>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d011      	beq.n	8006910 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fc:	e008      	b.n	8006910 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0201 	orr.w	r2, r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e000      	b.n	8006912 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006910:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40012c00 	.word	0x40012c00
 8006920:	40014000 	.word	0x40014000
 8006924:	00010007 	.word	0x00010007

08006928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800693c:	2302      	movs	r3, #2
 800693e:	e04f      	b.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a21      	ldr	r2, [pc, #132]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006970:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d004      	beq.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d10c      	bne.n	80069ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40014000 	.word	0x40014000

080069f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e060      	b.n	8006ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	041b      	lsls	r3, r3, #16
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d115      	bne.n	8006ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	051b      	lsls	r3, r3, #20
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40012c00 	.word	0x40012c00

08006ae4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	2204      	movs	r2, #4
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	43db      	mvns	r3, r3
 8006b06:	401a      	ands	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 030f 	and.w	r3, r3, #15
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b082      	sub	sp, #8
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e040      	b.n	8006bc2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fb fac7 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2224      	movs	r2, #36	; 0x24
 8006b5a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fba7 	bl	80072c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f978 	bl	8006e70 <UART_SetConfig>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e01b      	b.n	8006bc2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fc26 	bl	800740c <UART_CheckIdleState>
 8006bc0:	4603      	mov	r3, r0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b08a      	sub	sp, #40	; 0x28
 8006bce:	af02      	add	r7, sp, #8
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	603b      	str	r3, [r7, #0]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	d178      	bne.n	8006cd4 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_UART_Transmit+0x24>
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e071      	b.n	8006cd6 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2221      	movs	r2, #33	; 0x21
 8006bfe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c00:	f7fb fc74 	bl	80024ec <HAL_GetTick>
 8006c04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	88fa      	ldrh	r2, [r7, #6]
 8006c12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	d108      	bne.n	8006c32 <HAL_UART_Transmit+0x68>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	e003      	b.n	8006c3a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c3a:	e030      	b.n	8006c9e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2180      	movs	r1, #128	; 0x80
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fc88 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e03c      	b.n	8006cd6 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3302      	adds	r3, #2
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e008      	b.n	8006c8c <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	b292      	uxth	r2, r2
 8006c84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1c8      	bne.n	8006c3c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2140      	movs	r1, #64	; 0x40
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fc51 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e005      	b.n	8006cd6 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3720      	adds	r7, #32
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b08a      	sub	sp, #40	; 0x28
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	f040 80b6 	bne.w	8006e66 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <HAL_UART_Receive+0x28>
 8006d00:	88fb      	ldrh	r3, [r7, #6]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0ae      	b.n	8006e68 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2222      	movs	r2, #34	; 0x22
 8006d16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d20:	f7fb fbe4 	bl	80024ec <HAL_GetTick>
 8006d24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d3e:	d10e      	bne.n	8006d5e <HAL_UART_Receive+0x80>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d105      	bne.n	8006d54 <HAL_UART_Receive+0x76>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d52:	e02d      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	22ff      	movs	r2, #255	; 0xff
 8006d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d5c:	e028      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <HAL_UART_Receive+0xa4>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <HAL_UART_Receive+0x9a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	22ff      	movs	r2, #255	; 0xff
 8006d72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d76:	e01b      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	227f      	movs	r2, #127	; 0x7f
 8006d7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d80:	e016      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d8a:	d10d      	bne.n	8006da8 <HAL_UART_Receive+0xca>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_UART_Receive+0xc0>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	227f      	movs	r2, #127	; 0x7f
 8006d98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006d9c:	e008      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	223f      	movs	r2, #63	; 0x3f
 8006da2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006da6:	e003      	b.n	8006db0 <HAL_UART_Receive+0xd2>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006db6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	d108      	bne.n	8006dd4 <HAL_UART_Receive+0xf6>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e003      	b.n	8006ddc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ddc:	e037      	b.n	8006e4e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2120      	movs	r1, #32
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fbb7 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e033      	b.n	8006e68 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	8a7b      	ldrh	r3, [r7, #18]
 8006e10:	4013      	ands	r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	3302      	adds	r3, #2
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e00d      	b.n	8006e3c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	8a7b      	ldrh	r3, [r7, #18]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	4013      	ands	r3, r2
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1c1      	bne.n	8006dde <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e000      	b.n	8006e68 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006e66:	2302      	movs	r3, #2
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e74:	b08a      	sub	sp, #40	; 0x28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4bb4      	ldr	r3, [pc, #720]	; (8007170 <UART_SetConfig+0x300>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	6812      	ldr	r2, [r2, #0]
 8006ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4aa9      	ldr	r2, [pc, #676]	; (8007174 <UART_SetConfig+0x304>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4aa0      	ldr	r2, [pc, #640]	; (8007178 <UART_SetConfig+0x308>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d126      	bne.n	8006f48 <UART_SetConfig+0xd8>
 8006efa:	4ba0      	ldr	r3, [pc, #640]	; (800717c <UART_SetConfig+0x30c>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d81b      	bhi.n	8006f40 <UART_SetConfig+0xd0>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <UART_SetConfig+0xa0>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f21 	.word	0x08006f21
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f26:	e080      	b.n	800702a <UART_SetConfig+0x1ba>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f2e:	e07c      	b.n	800702a <UART_SetConfig+0x1ba>
 8006f30:	2304      	movs	r3, #4
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f36:	e078      	b.n	800702a <UART_SetConfig+0x1ba>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3e:	e074      	b.n	800702a <UART_SetConfig+0x1ba>
 8006f40:	2310      	movs	r3, #16
 8006f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f46:	e070      	b.n	800702a <UART_SetConfig+0x1ba>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a8c      	ldr	r2, [pc, #560]	; (8007180 <UART_SetConfig+0x310>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d138      	bne.n	8006fc4 <UART_SetConfig+0x154>
 8006f52:	4b8a      	ldr	r3, [pc, #552]	; (800717c <UART_SetConfig+0x30c>)
 8006f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f58:	f003 030c 	and.w	r3, r3, #12
 8006f5c:	2b0c      	cmp	r3, #12
 8006f5e:	d82d      	bhi.n	8006fbc <UART_SetConfig+0x14c>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0xf8>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f9d 	.word	0x08006f9d
 8006f6c:	08006fbd 	.word	0x08006fbd
 8006f70:	08006fbd 	.word	0x08006fbd
 8006f74:	08006fbd 	.word	0x08006fbd
 8006f78:	08006fad 	.word	0x08006fad
 8006f7c:	08006fbd 	.word	0x08006fbd
 8006f80:	08006fbd 	.word	0x08006fbd
 8006f84:	08006fbd 	.word	0x08006fbd
 8006f88:	08006fa5 	.word	0x08006fa5
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006fbd 	.word	0x08006fbd
 8006f94:	08006fbd 	.word	0x08006fbd
 8006f98:	08006fb5 	.word	0x08006fb5
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa2:	e042      	b.n	800702a <UART_SetConfig+0x1ba>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006faa:	e03e      	b.n	800702a <UART_SetConfig+0x1ba>
 8006fac:	2304      	movs	r3, #4
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb2:	e03a      	b.n	800702a <UART_SetConfig+0x1ba>
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fba:	e036      	b.n	800702a <UART_SetConfig+0x1ba>
 8006fbc:	2310      	movs	r3, #16
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc2:	e032      	b.n	800702a <UART_SetConfig+0x1ba>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6a      	ldr	r2, [pc, #424]	; (8007174 <UART_SetConfig+0x304>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d12a      	bne.n	8007024 <UART_SetConfig+0x1b4>
 8006fce:	4b6b      	ldr	r3, [pc, #428]	; (800717c <UART_SetConfig+0x30c>)
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fdc:	d01a      	beq.n	8007014 <UART_SetConfig+0x1a4>
 8006fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe2:	d81b      	bhi.n	800701c <UART_SetConfig+0x1ac>
 8006fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fe8:	d00c      	beq.n	8007004 <UART_SetConfig+0x194>
 8006fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fee:	d815      	bhi.n	800701c <UART_SetConfig+0x1ac>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <UART_SetConfig+0x18c>
 8006ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff8:	d008      	beq.n	800700c <UART_SetConfig+0x19c>
 8006ffa:	e00f      	b.n	800701c <UART_SetConfig+0x1ac>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007002:	e012      	b.n	800702a <UART_SetConfig+0x1ba>
 8007004:	2302      	movs	r3, #2
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e00e      	b.n	800702a <UART_SetConfig+0x1ba>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e00a      	b.n	800702a <UART_SetConfig+0x1ba>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e006      	b.n	800702a <UART_SetConfig+0x1ba>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007022:	e002      	b.n	800702a <UART_SetConfig+0x1ba>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a51      	ldr	r2, [pc, #324]	; (8007174 <UART_SetConfig+0x304>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d17a      	bne.n	800712a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007038:	2b08      	cmp	r3, #8
 800703a:	d824      	bhi.n	8007086 <UART_SetConfig+0x216>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <UART_SetConfig+0x1d4>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007069 	.word	0x08007069
 8007048:	08007087 	.word	0x08007087
 800704c:	08007071 	.word	0x08007071
 8007050:	08007087 	.word	0x08007087
 8007054:	08007077 	.word	0x08007077
 8007058:	08007087 	.word	0x08007087
 800705c:	08007087 	.word	0x08007087
 8007060:	08007087 	.word	0x08007087
 8007064:	0800707f 	.word	0x0800707f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007068:	f7fd fdaa 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 800706c:	61f8      	str	r0, [r7, #28]
        break;
 800706e:	e010      	b.n	8007092 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <UART_SetConfig+0x314>)
 8007072:	61fb      	str	r3, [r7, #28]
        break;
 8007074:	e00d      	b.n	8007092 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007076:	f7fd fd0b 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 800707a:	61f8      	str	r0, [r7, #28]
        break;
 800707c:	e009      	b.n	8007092 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800707e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007082:	61fb      	str	r3, [r7, #28]
        break;
 8007084:	e005      	b.n	8007092 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8107 	beq.w	80072a8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d305      	bcc.n	80070b6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d903      	bls.n	80070be <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070bc:	e0f4      	b.n	80072a8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2200      	movs	r2, #0
 80070c2:	461c      	mov	r4, r3
 80070c4:	4615      	mov	r5, r2
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	f04f 0300 	mov.w	r3, #0
 80070ce:	022b      	lsls	r3, r5, #8
 80070d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070d4:	0222      	lsls	r2, r4, #8
 80070d6:	68f9      	ldr	r1, [r7, #12]
 80070d8:	6849      	ldr	r1, [r1, #4]
 80070da:	0849      	lsrs	r1, r1, #1
 80070dc:	2000      	movs	r0, #0
 80070de:	4688      	mov	r8, r1
 80070e0:	4681      	mov	r9, r0
 80070e2:	eb12 0a08 	adds.w	sl, r2, r8
 80070e6:	eb43 0b09 	adc.w	fp, r3, r9
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	f7f9 fdc4 	bl	8000c88 <__aeabi_uldivmod>
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4613      	mov	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710e:	d308      	bcc.n	8007122 <UART_SetConfig+0x2b2>
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007116:	d204      	bcs.n	8007122 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	60da      	str	r2, [r3, #12]
 8007120:	e0c2      	b.n	80072a8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007128:	e0be      	b.n	80072a8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007132:	d16a      	bne.n	800720a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007134:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007138:	2b08      	cmp	r3, #8
 800713a:	d834      	bhi.n	80071a6 <UART_SetConfig+0x336>
 800713c:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x2d4>)
 800713e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007142:	bf00      	nop
 8007144:	08007169 	.word	0x08007169
 8007148:	08007189 	.word	0x08007189
 800714c:	08007191 	.word	0x08007191
 8007150:	080071a7 	.word	0x080071a7
 8007154:	08007197 	.word	0x08007197
 8007158:	080071a7 	.word	0x080071a7
 800715c:	080071a7 	.word	0x080071a7
 8007160:	080071a7 	.word	0x080071a7
 8007164:	0800719f 	.word	0x0800719f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007168:	f7fd fd2a 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 800716c:	61f8      	str	r0, [r7, #28]
        break;
 800716e:	e020      	b.n	80071b2 <UART_SetConfig+0x342>
 8007170:	efff69f3 	.word	0xefff69f3
 8007174:	40008000 	.word	0x40008000
 8007178:	40013800 	.word	0x40013800
 800717c:	40021000 	.word	0x40021000
 8007180:	40004400 	.word	0x40004400
 8007184:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007188:	f7fd fd30 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 800718c:	61f8      	str	r0, [r7, #28]
        break;
 800718e:	e010      	b.n	80071b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007190:	4b4c      	ldr	r3, [pc, #304]	; (80072c4 <UART_SetConfig+0x454>)
 8007192:	61fb      	str	r3, [r7, #28]
        break;
 8007194:	e00d      	b.n	80071b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007196:	f7fd fc7b 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 800719a:	61f8      	str	r0, [r7, #28]
        break;
 800719c:	e009      	b.n	80071b2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a2:	61fb      	str	r3, [r7, #28]
        break;
 80071a4:	e005      	b.n	80071b2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d077      	beq.n	80072a8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	005a      	lsls	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	085b      	lsrs	r3, r3, #1
 80071c2:	441a      	add	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b0f      	cmp	r3, #15
 80071d2:	d916      	bls.n	8007202 <UART_SetConfig+0x392>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071da:	d212      	bcs.n	8007202 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	b29b      	uxth	r3, r3
 80071e0:	f023 030f 	bic.w	r3, r3, #15
 80071e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f003 0307 	and.w	r3, r3, #7
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	8afa      	ldrh	r2, [r7, #22]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	e052      	b.n	80072a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007208:	e04e      	b.n	80072a8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800720a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800720e:	2b08      	cmp	r3, #8
 8007210:	d827      	bhi.n	8007262 <UART_SetConfig+0x3f2>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <UART_SetConfig+0x3a8>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	0800723d 	.word	0x0800723d
 800721c:	08007245 	.word	0x08007245
 8007220:	0800724d 	.word	0x0800724d
 8007224:	08007263 	.word	0x08007263
 8007228:	08007253 	.word	0x08007253
 800722c:	08007263 	.word	0x08007263
 8007230:	08007263 	.word	0x08007263
 8007234:	08007263 	.word	0x08007263
 8007238:	0800725b 	.word	0x0800725b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800723c:	f7fd fcc0 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8007240:	61f8      	str	r0, [r7, #28]
        break;
 8007242:	e014      	b.n	800726e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007244:	f7fd fcd2 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8007248:	61f8      	str	r0, [r7, #28]
        break;
 800724a:	e010      	b.n	800726e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800724c:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <UART_SetConfig+0x454>)
 800724e:	61fb      	str	r3, [r7, #28]
        break;
 8007250:	e00d      	b.n	800726e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007252:	f7fd fc1d 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8007256:	61f8      	str	r0, [r7, #28]
        break;
 8007258:	e009      	b.n	800726e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800725a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800725e:	61fb      	str	r3, [r7, #28]
        break;
 8007260:	e005      	b.n	800726e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800726c:	bf00      	nop
    }

    if (pclk != 0U)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d019      	beq.n	80072a8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	085a      	lsrs	r2, r3, #1
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	441a      	add	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	fbb2 f3f3 	udiv	r3, r2, r3
 8007286:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	2b0f      	cmp	r3, #15
 800728c:	d909      	bls.n	80072a2 <UART_SetConfig+0x432>
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007294:	d205      	bcs.n	80072a2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60da      	str	r2, [r3, #12]
 80072a0:	e002      	b.n	80072a8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3728      	adds	r7, #40	; 0x28
 80072bc:	46bd      	mov	sp, r7
 80072be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c2:	bf00      	nop
 80072c4:	00f42400 	.word	0x00f42400

080072c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00a      	beq.n	80072f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00a      	beq.n	8007336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01a      	beq.n	80073de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c6:	d10a      	bne.n	80073de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b098      	sub	sp, #96	; 0x60
 8007410:	af02      	add	r7, sp, #8
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800741c:	f7fb f866 	bl	80024ec <HAL_GetTick>
 8007420:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0308 	and.w	r3, r3, #8
 800742c:	2b08      	cmp	r3, #8
 800742e:	d12e      	bne.n	800748e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007438:	2200      	movs	r2, #0
 800743a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f88c 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d021      	beq.n	800748e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745e:	653b      	str	r3, [r7, #80]	; 0x50
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007468:	647b      	str	r3, [r7, #68]	; 0x44
 800746a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800746e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e062      	b.n	8007554 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b04      	cmp	r3, #4
 800749a:	d149      	bne.n	8007530 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800749c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a4:	2200      	movs	r2, #0
 80074a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f856 	bl	800755c <UART_WaitOnFlagUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d03c      	beq.n	8007530 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	e853 3f00 	ldrex	r3, [r3]
 80074c2:	623b      	str	r3, [r7, #32]
   return(result);
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	461a      	mov	r2, r3
 80074d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d4:	633b      	str	r3, [r7, #48]	; 0x30
 80074d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074dc:	e841 2300 	strex	r3, r2, [r1]
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e6      	bne.n	80074b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0301 	bic.w	r3, r3, #1
 80074fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	617b      	str	r3, [r7, #20]
   return(result);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e5      	bne.n	80074e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e011      	b.n	8007554 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2220      	movs	r2, #32
 8007534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3758      	adds	r7, #88	; 0x58
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800756c:	e049      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d045      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007576:	f7fa ffb9 	bl	80024ec <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	429a      	cmp	r2, r3
 8007584:	d302      	bcc.n	800758c <UART_WaitOnFlagUntilTimeout+0x30>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e048      	b.n	8007622 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b00      	cmp	r3, #0
 800759c:	d031      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	d110      	bne.n	80075ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2208      	movs	r2, #8
 80075b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f838 	bl	800762a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2208      	movs	r2, #8
 80075be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e029      	b.n	8007622 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	d111      	bne.n	8007602 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f81e 	bl	800762a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e00f      	b.n	8007622 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d0a6      	beq.n	800756e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800762a:	b480      	push	{r7}
 800762c:	b095      	sub	sp, #84	; 0x54
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007650:	643b      	str	r3, [r7, #64]	; 0x40
 8007652:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800765e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3308      	adds	r3, #8
 800766a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	61fb      	str	r3, [r7, #28]
   return(result);
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f023 0301 	bic.w	r3, r3, #1
 800767a:	64bb      	str	r3, [r7, #72]	; 0x48
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e5      	bne.n	8007664 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769c:	2b01      	cmp	r3, #1
 800769e:	d118      	bne.n	80076d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	613b      	str	r3, [r7, #16]
   return(result);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e6      	bne.n	80076a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80076e6:	bf00      	nop
 80076e8:	3754      	adds	r7, #84	; 0x54
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <__cvt>:
 80076f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f6:	ec55 4b10 	vmov	r4, r5, d0
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	460e      	mov	r6, r1
 80076fe:	4619      	mov	r1, r3
 8007700:	462b      	mov	r3, r5
 8007702:	bfbb      	ittet	lt
 8007704:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007708:	461d      	movlt	r5, r3
 800770a:	2300      	movge	r3, #0
 800770c:	232d      	movlt	r3, #45	; 0x2d
 800770e:	700b      	strb	r3, [r1, #0]
 8007710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007712:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007716:	4691      	mov	r9, r2
 8007718:	f023 0820 	bic.w	r8, r3, #32
 800771c:	bfbc      	itt	lt
 800771e:	4622      	movlt	r2, r4
 8007720:	4614      	movlt	r4, r2
 8007722:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007726:	d005      	beq.n	8007734 <__cvt+0x42>
 8007728:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800772c:	d100      	bne.n	8007730 <__cvt+0x3e>
 800772e:	3601      	adds	r6, #1
 8007730:	2102      	movs	r1, #2
 8007732:	e000      	b.n	8007736 <__cvt+0x44>
 8007734:	2103      	movs	r1, #3
 8007736:	ab03      	add	r3, sp, #12
 8007738:	9301      	str	r3, [sp, #4]
 800773a:	ab02      	add	r3, sp, #8
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	ec45 4b10 	vmov	d0, r4, r5
 8007742:	4653      	mov	r3, sl
 8007744:	4632      	mov	r2, r6
 8007746:	f001 f9b7 	bl	8008ab8 <_dtoa_r>
 800774a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800774e:	4607      	mov	r7, r0
 8007750:	d102      	bne.n	8007758 <__cvt+0x66>
 8007752:	f019 0f01 	tst.w	r9, #1
 8007756:	d022      	beq.n	800779e <__cvt+0xac>
 8007758:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800775c:	eb07 0906 	add.w	r9, r7, r6
 8007760:	d110      	bne.n	8007784 <__cvt+0x92>
 8007762:	783b      	ldrb	r3, [r7, #0]
 8007764:	2b30      	cmp	r3, #48	; 0x30
 8007766:	d10a      	bne.n	800777e <__cvt+0x8c>
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f9 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8007774:	b918      	cbnz	r0, 800777e <__cvt+0x8c>
 8007776:	f1c6 0601 	rsb	r6, r6, #1
 800777a:	f8ca 6000 	str.w	r6, [sl]
 800777e:	f8da 3000 	ldr.w	r3, [sl]
 8007782:	4499      	add	r9, r3
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f9 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007790:	b108      	cbz	r0, 8007796 <__cvt+0xa4>
 8007792:	f8cd 900c 	str.w	r9, [sp, #12]
 8007796:	2230      	movs	r2, #48	; 0x30
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	454b      	cmp	r3, r9
 800779c:	d307      	bcc.n	80077ae <__cvt+0xbc>
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077a2:	1bdb      	subs	r3, r3, r7
 80077a4:	4638      	mov	r0, r7
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	b004      	add	sp, #16
 80077aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ae:	1c59      	adds	r1, r3, #1
 80077b0:	9103      	str	r1, [sp, #12]
 80077b2:	701a      	strb	r2, [r3, #0]
 80077b4:	e7f0      	b.n	8007798 <__cvt+0xa6>

080077b6 <__exponent>:
 80077b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b8:	4603      	mov	r3, r0
 80077ba:	2900      	cmp	r1, #0
 80077bc:	bfb8      	it	lt
 80077be:	4249      	neglt	r1, r1
 80077c0:	f803 2b02 	strb.w	r2, [r3], #2
 80077c4:	bfb4      	ite	lt
 80077c6:	222d      	movlt	r2, #45	; 0x2d
 80077c8:	222b      	movge	r2, #43	; 0x2b
 80077ca:	2909      	cmp	r1, #9
 80077cc:	7042      	strb	r2, [r0, #1]
 80077ce:	dd2a      	ble.n	8007826 <__exponent+0x70>
 80077d0:	f10d 0207 	add.w	r2, sp, #7
 80077d4:	4617      	mov	r7, r2
 80077d6:	260a      	movs	r6, #10
 80077d8:	4694      	mov	ip, r2
 80077da:	fb91 f5f6 	sdiv	r5, r1, r6
 80077de:	fb06 1415 	mls	r4, r6, r5, r1
 80077e2:	3430      	adds	r4, #48	; 0x30
 80077e4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80077e8:	460c      	mov	r4, r1
 80077ea:	2c63      	cmp	r4, #99	; 0x63
 80077ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80077f0:	4629      	mov	r1, r5
 80077f2:	dcf1      	bgt.n	80077d8 <__exponent+0x22>
 80077f4:	3130      	adds	r1, #48	; 0x30
 80077f6:	f1ac 0402 	sub.w	r4, ip, #2
 80077fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077fe:	1c41      	adds	r1, r0, #1
 8007800:	4622      	mov	r2, r4
 8007802:	42ba      	cmp	r2, r7
 8007804:	d30a      	bcc.n	800781c <__exponent+0x66>
 8007806:	f10d 0209 	add.w	r2, sp, #9
 800780a:	eba2 020c 	sub.w	r2, r2, ip
 800780e:	42bc      	cmp	r4, r7
 8007810:	bf88      	it	hi
 8007812:	2200      	movhi	r2, #0
 8007814:	4413      	add	r3, r2
 8007816:	1a18      	subs	r0, r3, r0
 8007818:	b003      	add	sp, #12
 800781a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007820:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007824:	e7ed      	b.n	8007802 <__exponent+0x4c>
 8007826:	2330      	movs	r3, #48	; 0x30
 8007828:	3130      	adds	r1, #48	; 0x30
 800782a:	7083      	strb	r3, [r0, #2]
 800782c:	70c1      	strb	r1, [r0, #3]
 800782e:	1d03      	adds	r3, r0, #4
 8007830:	e7f1      	b.n	8007816 <__exponent+0x60>
	...

08007834 <_printf_float>:
 8007834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007838:	ed2d 8b02 	vpush	{d8}
 800783c:	b08d      	sub	sp, #52	; 0x34
 800783e:	460c      	mov	r4, r1
 8007840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007844:	4616      	mov	r6, r2
 8007846:	461f      	mov	r7, r3
 8007848:	4605      	mov	r5, r0
 800784a:	f001 f82d 	bl	80088a8 <_localeconv_r>
 800784e:	f8d0 a000 	ldr.w	sl, [r0]
 8007852:	4650      	mov	r0, sl
 8007854:	f7f8 fd0c 	bl	8000270 <strlen>
 8007858:	2300      	movs	r3, #0
 800785a:	930a      	str	r3, [sp, #40]	; 0x28
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	f8d8 3000 	ldr.w	r3, [r8]
 8007864:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007868:	3307      	adds	r3, #7
 800786a:	f023 0307 	bic.w	r3, r3, #7
 800786e:	f103 0208 	add.w	r2, r3, #8
 8007872:	f8c8 2000 	str.w	r2, [r8]
 8007876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800787a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	f8cd 8018 	str.w	r8, [sp, #24]
 8007884:	ee08 0a10 	vmov	s16, r0
 8007888:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800788c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007890:	4b9e      	ldr	r3, [pc, #632]	; (8007b0c <_printf_float+0x2d8>)
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	f7f9 f949 	bl	8000b2c <__aeabi_dcmpun>
 800789a:	bb88      	cbnz	r0, 8007900 <_printf_float+0xcc>
 800789c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078a0:	4b9a      	ldr	r3, [pc, #616]	; (8007b0c <_printf_float+0x2d8>)
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	f7f9 f923 	bl	8000af0 <__aeabi_dcmple>
 80078aa:	bb48      	cbnz	r0, 8007900 <_printf_float+0xcc>
 80078ac:	2200      	movs	r2, #0
 80078ae:	2300      	movs	r3, #0
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f9 f912 	bl	8000adc <__aeabi_dcmplt>
 80078b8:	b110      	cbz	r0, 80078c0 <_printf_float+0x8c>
 80078ba:	232d      	movs	r3, #45	; 0x2d
 80078bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078c0:	4a93      	ldr	r2, [pc, #588]	; (8007b10 <_printf_float+0x2dc>)
 80078c2:	4b94      	ldr	r3, [pc, #592]	; (8007b14 <_printf_float+0x2e0>)
 80078c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078c8:	bf94      	ite	ls
 80078ca:	4690      	movls	r8, r2
 80078cc:	4698      	movhi	r8, r3
 80078ce:	2303      	movs	r3, #3
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	f023 0304 	bic.w	r3, r3, #4
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	f04f 0900 	mov.w	r9, #0
 80078de:	9700      	str	r7, [sp, #0]
 80078e0:	4633      	mov	r3, r6
 80078e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80078e4:	4621      	mov	r1, r4
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 f9da 	bl	8007ca0 <_printf_common>
 80078ec:	3001      	adds	r0, #1
 80078ee:	f040 8090 	bne.w	8007a12 <_printf_float+0x1de>
 80078f2:	f04f 30ff 	mov.w	r0, #4294967295
 80078f6:	b00d      	add	sp, #52	; 0x34
 80078f8:	ecbd 8b02 	vpop	{d8}
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	4642      	mov	r2, r8
 8007902:	464b      	mov	r3, r9
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	f7f9 f910 	bl	8000b2c <__aeabi_dcmpun>
 800790c:	b140      	cbz	r0, 8007920 <_printf_float+0xec>
 800790e:	464b      	mov	r3, r9
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfbc      	itt	lt
 8007914:	232d      	movlt	r3, #45	; 0x2d
 8007916:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800791a:	4a7f      	ldr	r2, [pc, #508]	; (8007b18 <_printf_float+0x2e4>)
 800791c:	4b7f      	ldr	r3, [pc, #508]	; (8007b1c <_printf_float+0x2e8>)
 800791e:	e7d1      	b.n	80078c4 <_printf_float+0x90>
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007926:	9206      	str	r2, [sp, #24]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	d13f      	bne.n	80079ac <_printf_float+0x178>
 800792c:	2306      	movs	r3, #6
 800792e:	6063      	str	r3, [r4, #4]
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	6861      	ldr	r1, [r4, #4]
 8007934:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007938:	2300      	movs	r3, #0
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	ab0a      	add	r3, sp, #40	; 0x28
 800793e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007942:	ab09      	add	r3, sp, #36	; 0x24
 8007944:	ec49 8b10 	vmov	d0, r8, r9
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007950:	4628      	mov	r0, r5
 8007952:	f7ff fece 	bl	80076f2 <__cvt>
 8007956:	9b06      	ldr	r3, [sp, #24]
 8007958:	9909      	ldr	r1, [sp, #36]	; 0x24
 800795a:	2b47      	cmp	r3, #71	; 0x47
 800795c:	4680      	mov	r8, r0
 800795e:	d108      	bne.n	8007972 <_printf_float+0x13e>
 8007960:	1cc8      	adds	r0, r1, #3
 8007962:	db02      	blt.n	800796a <_printf_float+0x136>
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	4299      	cmp	r1, r3
 8007968:	dd41      	ble.n	80079ee <_printf_float+0x1ba>
 800796a:	f1ab 0302 	sub.w	r3, fp, #2
 800796e:	fa5f fb83 	uxtb.w	fp, r3
 8007972:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007976:	d820      	bhi.n	80079ba <_printf_float+0x186>
 8007978:	3901      	subs	r1, #1
 800797a:	465a      	mov	r2, fp
 800797c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007980:	9109      	str	r1, [sp, #36]	; 0x24
 8007982:	f7ff ff18 	bl	80077b6 <__exponent>
 8007986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007988:	1813      	adds	r3, r2, r0
 800798a:	2a01      	cmp	r2, #1
 800798c:	4681      	mov	r9, r0
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	dc02      	bgt.n	8007998 <_printf_float+0x164>
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	07d2      	lsls	r2, r2, #31
 8007996:	d501      	bpl.n	800799c <_printf_float+0x168>
 8007998:	3301      	adds	r3, #1
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d09c      	beq.n	80078de <_printf_float+0xaa>
 80079a4:	232d      	movs	r3, #45	; 0x2d
 80079a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079aa:	e798      	b.n	80078de <_printf_float+0xaa>
 80079ac:	9a06      	ldr	r2, [sp, #24]
 80079ae:	2a47      	cmp	r2, #71	; 0x47
 80079b0:	d1be      	bne.n	8007930 <_printf_float+0xfc>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1bc      	bne.n	8007930 <_printf_float+0xfc>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7b9      	b.n	800792e <_printf_float+0xfa>
 80079ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079be:	d118      	bne.n	80079f2 <_printf_float+0x1be>
 80079c0:	2900      	cmp	r1, #0
 80079c2:	6863      	ldr	r3, [r4, #4]
 80079c4:	dd0b      	ble.n	80079de <_printf_float+0x1aa>
 80079c6:	6121      	str	r1, [r4, #16]
 80079c8:	b913      	cbnz	r3, 80079d0 <_printf_float+0x19c>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	07d0      	lsls	r0, r2, #31
 80079ce:	d502      	bpl.n	80079d6 <_printf_float+0x1a2>
 80079d0:	3301      	adds	r3, #1
 80079d2:	440b      	add	r3, r1
 80079d4:	6123      	str	r3, [r4, #16]
 80079d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80079d8:	f04f 0900 	mov.w	r9, #0
 80079dc:	e7de      	b.n	800799c <_printf_float+0x168>
 80079de:	b913      	cbnz	r3, 80079e6 <_printf_float+0x1b2>
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	07d2      	lsls	r2, r2, #31
 80079e4:	d501      	bpl.n	80079ea <_printf_float+0x1b6>
 80079e6:	3302      	adds	r3, #2
 80079e8:	e7f4      	b.n	80079d4 <_printf_float+0x1a0>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e7f2      	b.n	80079d4 <_printf_float+0x1a0>
 80079ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f4:	4299      	cmp	r1, r3
 80079f6:	db05      	blt.n	8007a04 <_printf_float+0x1d0>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	6121      	str	r1, [r4, #16]
 80079fc:	07d8      	lsls	r0, r3, #31
 80079fe:	d5ea      	bpl.n	80079d6 <_printf_float+0x1a2>
 8007a00:	1c4b      	adds	r3, r1, #1
 8007a02:	e7e7      	b.n	80079d4 <_printf_float+0x1a0>
 8007a04:	2900      	cmp	r1, #0
 8007a06:	bfd4      	ite	le
 8007a08:	f1c1 0202 	rsble	r2, r1, #2
 8007a0c:	2201      	movgt	r2, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	e7e0      	b.n	80079d4 <_printf_float+0x1a0>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	055a      	lsls	r2, r3, #21
 8007a16:	d407      	bmi.n	8007a28 <_printf_float+0x1f4>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	4642      	mov	r2, r8
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	d12c      	bne.n	8007a80 <_printf_float+0x24c>
 8007a26:	e764      	b.n	80078f2 <_printf_float+0xbe>
 8007a28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a2c:	f240 80e0 	bls.w	8007bf0 <_printf_float+0x3bc>
 8007a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	f7f9 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d034      	beq.n	8007aaa <_printf_float+0x276>
 8007a40:	4a37      	ldr	r2, [pc, #220]	; (8007b20 <_printf_float+0x2ec>)
 8007a42:	2301      	movs	r3, #1
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f af51 	beq.w	80078f2 <_printf_float+0xbe>
 8007a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a54:	429a      	cmp	r2, r3
 8007a56:	db02      	blt.n	8007a5e <_printf_float+0x22a>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	07d8      	lsls	r0, r3, #31
 8007a5c:	d510      	bpl.n	8007a80 <_printf_float+0x24c>
 8007a5e:	ee18 3a10 	vmov	r3, s16
 8007a62:	4652      	mov	r2, sl
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f43f af41 	beq.w	80078f2 <_printf_float+0xbe>
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	f104 091a 	add.w	r9, r4, #26
 8007a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	4543      	cmp	r3, r8
 8007a7e:	dc09      	bgt.n	8007a94 <_printf_float+0x260>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	079b      	lsls	r3, r3, #30
 8007a84:	f100 8107 	bmi.w	8007c96 <_printf_float+0x462>
 8007a88:	68e0      	ldr	r0, [r4, #12]
 8007a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8c:	4298      	cmp	r0, r3
 8007a8e:	bfb8      	it	lt
 8007a90:	4618      	movlt	r0, r3
 8007a92:	e730      	b.n	80078f6 <_printf_float+0xc2>
 8007a94:	2301      	movs	r3, #1
 8007a96:	464a      	mov	r2, r9
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f43f af27 	beq.w	80078f2 <_printf_float+0xbe>
 8007aa4:	f108 0801 	add.w	r8, r8, #1
 8007aa8:	e7e6      	b.n	8007a78 <_printf_float+0x244>
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc39      	bgt.n	8007b24 <_printf_float+0x2f0>
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <_printf_float+0x2ec>)
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af19 	beq.w	80078f2 <_printf_float+0xbe>
 8007ac0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	d102      	bne.n	8007ace <_printf_float+0x29a>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	07d9      	lsls	r1, r3, #31
 8007acc:	d5d8      	bpl.n	8007a80 <_printf_float+0x24c>
 8007ace:	ee18 3a10 	vmov	r3, s16
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f af09 	beq.w	80078f2 <_printf_float+0xbe>
 8007ae0:	f04f 0900 	mov.w	r9, #0
 8007ae4:	f104 0a1a 	add.w	sl, r4, #26
 8007ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aea:	425b      	negs	r3, r3
 8007aec:	454b      	cmp	r3, r9
 8007aee:	dc01      	bgt.n	8007af4 <_printf_float+0x2c0>
 8007af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af2:	e792      	b.n	8007a1a <_printf_float+0x1e6>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4652      	mov	r2, sl
 8007af8:	4631      	mov	r1, r6
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f aef7 	beq.w	80078f2 <_printf_float+0xbe>
 8007b04:	f109 0901 	add.w	r9, r9, #1
 8007b08:	e7ee      	b.n	8007ae8 <_printf_float+0x2b4>
 8007b0a:	bf00      	nop
 8007b0c:	7fefffff 	.word	0x7fefffff
 8007b10:	0800cb30 	.word	0x0800cb30
 8007b14:	0800cb34 	.word	0x0800cb34
 8007b18:	0800cb38 	.word	0x0800cb38
 8007b1c:	0800cb3c 	.word	0x0800cb3c
 8007b20:	0800cb40 	.word	0x0800cb40
 8007b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	bfa8      	it	ge
 8007b2c:	461a      	movge	r2, r3
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	4691      	mov	r9, r2
 8007b32:	dc37      	bgt.n	8007ba4 <_printf_float+0x370>
 8007b34:	f04f 0b00 	mov.w	fp, #0
 8007b38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b3c:	f104 021a 	add.w	r2, r4, #26
 8007b40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	eba3 0309 	sub.w	r3, r3, r9
 8007b48:	455b      	cmp	r3, fp
 8007b4a:	dc33      	bgt.n	8007bb4 <_printf_float+0x380>
 8007b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b50:	429a      	cmp	r2, r3
 8007b52:	db3b      	blt.n	8007bcc <_printf_float+0x398>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07da      	lsls	r2, r3, #31
 8007b58:	d438      	bmi.n	8007bcc <_printf_float+0x398>
 8007b5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b5e:	eba2 0903 	sub.w	r9, r2, r3
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	1ad2      	subs	r2, r2, r3
 8007b66:	4591      	cmp	r9, r2
 8007b68:	bfa8      	it	ge
 8007b6a:	4691      	movge	r9, r2
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	dc35      	bgt.n	8007bde <_printf_float+0x3aa>
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b7a:	f104 0a1a 	add.w	sl, r4, #26
 8007b7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b82:	1a9b      	subs	r3, r3, r2
 8007b84:	eba3 0309 	sub.w	r3, r3, r9
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	f77f af79 	ble.w	8007a80 <_printf_float+0x24c>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4652      	mov	r2, sl
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f aeaa 	beq.w	80078f2 <_printf_float+0xbe>
 8007b9e:	f108 0801 	add.w	r8, r8, #1
 8007ba2:	e7ec      	b.n	8007b7e <_printf_float+0x34a>
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4642      	mov	r2, r8
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d1c0      	bne.n	8007b34 <_printf_float+0x300>
 8007bb2:	e69e      	b.n	80078f2 <_printf_float+0xbe>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	9205      	str	r2, [sp, #20]
 8007bbc:	47b8      	blx	r7
 8007bbe:	3001      	adds	r0, #1
 8007bc0:	f43f ae97 	beq.w	80078f2 <_printf_float+0xbe>
 8007bc4:	9a05      	ldr	r2, [sp, #20]
 8007bc6:	f10b 0b01 	add.w	fp, fp, #1
 8007bca:	e7b9      	b.n	8007b40 <_printf_float+0x30c>
 8007bcc:	ee18 3a10 	vmov	r3, s16
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d1be      	bne.n	8007b5a <_printf_float+0x326>
 8007bdc:	e689      	b.n	80078f2 <_printf_float+0xbe>
 8007bde:	9a05      	ldr	r2, [sp, #20]
 8007be0:	464b      	mov	r3, r9
 8007be2:	4442      	add	r2, r8
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	d1c1      	bne.n	8007b72 <_printf_float+0x33e>
 8007bee:	e680      	b.n	80078f2 <_printf_float+0xbe>
 8007bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf2:	2a01      	cmp	r2, #1
 8007bf4:	dc01      	bgt.n	8007bfa <_printf_float+0x3c6>
 8007bf6:	07db      	lsls	r3, r3, #31
 8007bf8:	d53a      	bpl.n	8007c70 <_printf_float+0x43c>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae74 	beq.w	80078f2 <_printf_float+0xbe>
 8007c0a:	ee18 3a10 	vmov	r3, s16
 8007c0e:	4652      	mov	r2, sl
 8007c10:	4631      	mov	r1, r6
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	f43f ae6b 	beq.w	80078f2 <_printf_float+0xbe>
 8007c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c20:	2200      	movs	r2, #0
 8007c22:	2300      	movs	r3, #0
 8007c24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007c28:	f7f8 ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c2c:	b9d8      	cbnz	r0, 8007c66 <_printf_float+0x432>
 8007c2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c32:	f108 0201 	add.w	r2, r8, #1
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d10e      	bne.n	8007c5e <_printf_float+0x42a>
 8007c40:	e657      	b.n	80078f2 <_printf_float+0xbe>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4652      	mov	r2, sl
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f ae50 	beq.w	80078f2 <_printf_float+0xbe>
 8007c52:	f108 0801 	add.w	r8, r8, #1
 8007c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	4543      	cmp	r3, r8
 8007c5c:	dcf1      	bgt.n	8007c42 <_printf_float+0x40e>
 8007c5e:	464b      	mov	r3, r9
 8007c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c64:	e6da      	b.n	8007a1c <_printf_float+0x1e8>
 8007c66:	f04f 0800 	mov.w	r8, #0
 8007c6a:	f104 0a1a 	add.w	sl, r4, #26
 8007c6e:	e7f2      	b.n	8007c56 <_printf_float+0x422>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4642      	mov	r2, r8
 8007c74:	e7df      	b.n	8007c36 <_printf_float+0x402>
 8007c76:	2301      	movs	r3, #1
 8007c78:	464a      	mov	r2, r9
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae36 	beq.w	80078f2 <_printf_float+0xbe>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	4543      	cmp	r3, r8
 8007c92:	dcf0      	bgt.n	8007c76 <_printf_float+0x442>
 8007c94:	e6f8      	b.n	8007a88 <_printf_float+0x254>
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	f104 0919 	add.w	r9, r4, #25
 8007c9e:	e7f4      	b.n	8007c8a <_printf_float+0x456>

08007ca0 <_printf_common>:
 8007ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	4616      	mov	r6, r2
 8007ca6:	4699      	mov	r9, r3
 8007ca8:	688a      	ldr	r2, [r1, #8]
 8007caa:	690b      	ldr	r3, [r1, #16]
 8007cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	bfb8      	it	lt
 8007cb4:	4613      	movlt	r3, r2
 8007cb6:	6033      	str	r3, [r6, #0]
 8007cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	b10a      	cbz	r2, 8007cc6 <_printf_common+0x26>
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	0699      	lsls	r1, r3, #26
 8007cca:	bf42      	ittt	mi
 8007ccc:	6833      	ldrmi	r3, [r6, #0]
 8007cce:	3302      	addmi	r3, #2
 8007cd0:	6033      	strmi	r3, [r6, #0]
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	f015 0506 	ands.w	r5, r5, #6
 8007cd8:	d106      	bne.n	8007ce8 <_printf_common+0x48>
 8007cda:	f104 0a19 	add.w	sl, r4, #25
 8007cde:	68e3      	ldr	r3, [r4, #12]
 8007ce0:	6832      	ldr	r2, [r6, #0]
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	dc26      	bgt.n	8007d36 <_printf_common+0x96>
 8007ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cec:	1e13      	subs	r3, r2, #0
 8007cee:	6822      	ldr	r2, [r4, #0]
 8007cf0:	bf18      	it	ne
 8007cf2:	2301      	movne	r3, #1
 8007cf4:	0692      	lsls	r2, r2, #26
 8007cf6:	d42b      	bmi.n	8007d50 <_printf_common+0xb0>
 8007cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4638      	mov	r0, r7
 8007d00:	47c0      	blx	r8
 8007d02:	3001      	adds	r0, #1
 8007d04:	d01e      	beq.n	8007d44 <_printf_common+0xa4>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	6922      	ldr	r2, [r4, #16]
 8007d0a:	f003 0306 	and.w	r3, r3, #6
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	bf02      	ittt	eq
 8007d12:	68e5      	ldreq	r5, [r4, #12]
 8007d14:	6833      	ldreq	r3, [r6, #0]
 8007d16:	1aed      	subeq	r5, r5, r3
 8007d18:	68a3      	ldr	r3, [r4, #8]
 8007d1a:	bf0c      	ite	eq
 8007d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d20:	2500      	movne	r5, #0
 8007d22:	4293      	cmp	r3, r2
 8007d24:	bfc4      	itt	gt
 8007d26:	1a9b      	subgt	r3, r3, r2
 8007d28:	18ed      	addgt	r5, r5, r3
 8007d2a:	2600      	movs	r6, #0
 8007d2c:	341a      	adds	r4, #26
 8007d2e:	42b5      	cmp	r5, r6
 8007d30:	d11a      	bne.n	8007d68 <_printf_common+0xc8>
 8007d32:	2000      	movs	r0, #0
 8007d34:	e008      	b.n	8007d48 <_printf_common+0xa8>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4652      	mov	r2, sl
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	47c0      	blx	r8
 8007d40:	3001      	adds	r0, #1
 8007d42:	d103      	bne.n	8007d4c <_printf_common+0xac>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4c:	3501      	adds	r5, #1
 8007d4e:	e7c6      	b.n	8007cde <_printf_common+0x3e>
 8007d50:	18e1      	adds	r1, r4, r3
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	2030      	movs	r0, #48	; 0x30
 8007d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d5a:	4422      	add	r2, r4
 8007d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d64:	3302      	adds	r3, #2
 8007d66:	e7c7      	b.n	8007cf8 <_printf_common+0x58>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4622      	mov	r2, r4
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	4638      	mov	r0, r7
 8007d70:	47c0      	blx	r8
 8007d72:	3001      	adds	r0, #1
 8007d74:	d0e6      	beq.n	8007d44 <_printf_common+0xa4>
 8007d76:	3601      	adds	r6, #1
 8007d78:	e7d9      	b.n	8007d2e <_printf_common+0x8e>
	...

08007d7c <_printf_i>:
 8007d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	7e0f      	ldrb	r7, [r1, #24]
 8007d82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d84:	2f78      	cmp	r7, #120	; 0x78
 8007d86:	4691      	mov	r9, r2
 8007d88:	4680      	mov	r8, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	469a      	mov	sl, r3
 8007d8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d92:	d807      	bhi.n	8007da4 <_printf_i+0x28>
 8007d94:	2f62      	cmp	r7, #98	; 0x62
 8007d96:	d80a      	bhi.n	8007dae <_printf_i+0x32>
 8007d98:	2f00      	cmp	r7, #0
 8007d9a:	f000 80d4 	beq.w	8007f46 <_printf_i+0x1ca>
 8007d9e:	2f58      	cmp	r7, #88	; 0x58
 8007da0:	f000 80c0 	beq.w	8007f24 <_printf_i+0x1a8>
 8007da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dac:	e03a      	b.n	8007e24 <_printf_i+0xa8>
 8007dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007db2:	2b15      	cmp	r3, #21
 8007db4:	d8f6      	bhi.n	8007da4 <_printf_i+0x28>
 8007db6:	a101      	add	r1, pc, #4	; (adr r1, 8007dbc <_printf_i+0x40>)
 8007db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dbc:	08007e15 	.word	0x08007e15
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007da5 	.word	0x08007da5
 8007dc8:	08007da5 	.word	0x08007da5
 8007dcc:	08007da5 	.word	0x08007da5
 8007dd0:	08007da5 	.word	0x08007da5
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007da5 	.word	0x08007da5
 8007ddc:	08007da5 	.word	0x08007da5
 8007de0:	08007da5 	.word	0x08007da5
 8007de4:	08007da5 	.word	0x08007da5
 8007de8:	08007f2d 	.word	0x08007f2d
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007ee7 	.word	0x08007ee7
 8007df4:	08007da5 	.word	0x08007da5
 8007df8:	08007da5 	.word	0x08007da5
 8007dfc:	08007f4f 	.word	0x08007f4f
 8007e00:	08007da5 	.word	0x08007da5
 8007e04:	08007e55 	.word	0x08007e55
 8007e08:	08007da5 	.word	0x08007da5
 8007e0c:	08007da5 	.word	0x08007da5
 8007e10:	08007eef 	.word	0x08007eef
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	1d1a      	adds	r2, r3, #4
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e24:	2301      	movs	r3, #1
 8007e26:	e09f      	b.n	8007f68 <_printf_i+0x1ec>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	682b      	ldr	r3, [r5, #0]
 8007e2c:	0607      	lsls	r7, r0, #24
 8007e2e:	f103 0104 	add.w	r1, r3, #4
 8007e32:	6029      	str	r1, [r5, #0]
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0xbe>
 8007e36:	681e      	ldr	r6, [r3, #0]
 8007e38:	e003      	b.n	8007e42 <_printf_i+0xc6>
 8007e3a:	0646      	lsls	r6, r0, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0xba>
 8007e3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	da03      	bge.n	8007e4e <_printf_i+0xd2>
 8007e46:	232d      	movs	r3, #45	; 0x2d
 8007e48:	4276      	negs	r6, r6
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4e:	485a      	ldr	r0, [pc, #360]	; (8007fb8 <_printf_i+0x23c>)
 8007e50:	230a      	movs	r3, #10
 8007e52:	e012      	b.n	8007e7a <_printf_i+0xfe>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	6820      	ldr	r0, [r4, #0]
 8007e58:	1d19      	adds	r1, r3, #4
 8007e5a:	6029      	str	r1, [r5, #0]
 8007e5c:	0605      	lsls	r5, r0, #24
 8007e5e:	d501      	bpl.n	8007e64 <_printf_i+0xe8>
 8007e60:	681e      	ldr	r6, [r3, #0]
 8007e62:	e002      	b.n	8007e6a <_printf_i+0xee>
 8007e64:	0641      	lsls	r1, r0, #25
 8007e66:	d5fb      	bpl.n	8007e60 <_printf_i+0xe4>
 8007e68:	881e      	ldrh	r6, [r3, #0]
 8007e6a:	4853      	ldr	r0, [pc, #332]	; (8007fb8 <_printf_i+0x23c>)
 8007e6c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e6e:	bf0c      	ite	eq
 8007e70:	2308      	moveq	r3, #8
 8007e72:	230a      	movne	r3, #10
 8007e74:	2100      	movs	r1, #0
 8007e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e7a:	6865      	ldr	r5, [r4, #4]
 8007e7c:	60a5      	str	r5, [r4, #8]
 8007e7e:	2d00      	cmp	r5, #0
 8007e80:	bfa2      	ittt	ge
 8007e82:	6821      	ldrge	r1, [r4, #0]
 8007e84:	f021 0104 	bicge.w	r1, r1, #4
 8007e88:	6021      	strge	r1, [r4, #0]
 8007e8a:	b90e      	cbnz	r6, 8007e90 <_printf_i+0x114>
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	d04b      	beq.n	8007f28 <_printf_i+0x1ac>
 8007e90:	4615      	mov	r5, r2
 8007e92:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e96:	fb03 6711 	mls	r7, r3, r1, r6
 8007e9a:	5dc7      	ldrb	r7, [r0, r7]
 8007e9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ea0:	4637      	mov	r7, r6
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	460e      	mov	r6, r1
 8007ea6:	d9f4      	bls.n	8007e92 <_printf_i+0x116>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d10b      	bne.n	8007ec4 <_printf_i+0x148>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07de      	lsls	r6, r3, #31
 8007eb0:	d508      	bpl.n	8007ec4 <_printf_i+0x148>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bfde      	ittt	le
 8007eba:	2330      	movle	r3, #48	; 0x30
 8007ebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ec0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ec4:	1b52      	subs	r2, r2, r5
 8007ec6:	6122      	str	r2, [r4, #16]
 8007ec8:	f8cd a000 	str.w	sl, [sp]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	aa03      	add	r2, sp, #12
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fee4 	bl	8007ca0 <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d14a      	bne.n	8007f72 <_printf_i+0x1f6>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	4833      	ldr	r0, [pc, #204]	; (8007fbc <_printf_i+0x240>)
 8007ef0:	2778      	movs	r7, #120	; 0x78
 8007ef2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6829      	ldr	r1, [r5, #0]
 8007efa:	061f      	lsls	r7, r3, #24
 8007efc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0x18c>
 8007f02:	065f      	lsls	r7, r3, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2b6      	uxthmi	r6, r6
 8007f08:	07df      	lsls	r7, r3, #31
 8007f0a:	bf48      	it	mi
 8007f0c:	f043 0320 	orrmi.w	r3, r3, #32
 8007f10:	6029      	str	r1, [r5, #0]
 8007f12:	bf48      	it	mi
 8007f14:	6023      	strmi	r3, [r4, #0]
 8007f16:	b91e      	cbnz	r6, 8007f20 <_printf_i+0x1a4>
 8007f18:	6823      	ldr	r3, [r4, #0]
 8007f1a:	f023 0320 	bic.w	r3, r3, #32
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	2310      	movs	r3, #16
 8007f22:	e7a7      	b.n	8007e74 <_printf_i+0xf8>
 8007f24:	4824      	ldr	r0, [pc, #144]	; (8007fb8 <_printf_i+0x23c>)
 8007f26:	e7e4      	b.n	8007ef2 <_printf_i+0x176>
 8007f28:	4615      	mov	r5, r2
 8007f2a:	e7bd      	b.n	8007ea8 <_printf_i+0x12c>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	6826      	ldr	r6, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6028      	str	r0, [r5, #0]
 8007f36:	0635      	lsls	r5, r6, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1c4>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1ca>
 8007f40:	0670      	lsls	r0, r6, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1c0>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	e7bc      	b.n	8007ec8 <_printf_i+0x14c>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	602a      	str	r2, [r5, #0]
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7f8 f938 	bl	80001d0 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1ea>
 8007f62:	1b40      	subs	r0, r0, r5
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	e7aa      	b.n	8007ec8 <_printf_i+0x14c>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ad      	beq.n	8007edc <_printf_i+0x160>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x232>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a6      	b.n	8007ee0 <_printf_i+0x164>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09d      	beq.n	8007edc <_printf_i+0x160>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x216>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x20a>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x226>
 8007fb6:	bf00      	nop
 8007fb8:	0800cb42 	.word	0x0800cb42
 8007fbc:	0800cb53 	.word	0x0800cb53

08007fc0 <_scanf_float>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	b087      	sub	sp, #28
 8007fc6:	4617      	mov	r7, r2
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	688b      	ldr	r3, [r1, #8]
 8007fcc:	1e5a      	subs	r2, r3, #1
 8007fce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007fd2:	bf83      	ittte	hi
 8007fd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fd8:	195b      	addhi	r3, r3, r5
 8007fda:	9302      	strhi	r3, [sp, #8]
 8007fdc:	2300      	movls	r3, #0
 8007fde:	bf86      	itte	hi
 8007fe0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fe4:	608b      	strhi	r3, [r1, #8]
 8007fe6:	9302      	strls	r3, [sp, #8]
 8007fe8:	680b      	ldr	r3, [r1, #0]
 8007fea:	468b      	mov	fp, r1
 8007fec:	2500      	movs	r5, #0
 8007fee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ff2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ff6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ffa:	4680      	mov	r8, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	465e      	mov	r6, fp
 8008000:	46aa      	mov	sl, r5
 8008002:	46a9      	mov	r9, r5
 8008004:	9501      	str	r5, [sp, #4]
 8008006:	68a2      	ldr	r2, [r4, #8]
 8008008:	b152      	cbz	r2, 8008020 <_scanf_float+0x60>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b4e      	cmp	r3, #78	; 0x4e
 8008010:	d864      	bhi.n	80080dc <_scanf_float+0x11c>
 8008012:	2b40      	cmp	r3, #64	; 0x40
 8008014:	d83c      	bhi.n	8008090 <_scanf_float+0xd0>
 8008016:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800801a:	b2c8      	uxtb	r0, r1
 800801c:	280e      	cmp	r0, #14
 800801e:	d93a      	bls.n	8008096 <_scanf_float+0xd6>
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	d003      	beq.n	800802e <_scanf_float+0x6e>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008032:	f1ba 0f01 	cmp.w	sl, #1
 8008036:	f200 8113 	bhi.w	8008260 <_scanf_float+0x2a0>
 800803a:	455e      	cmp	r6, fp
 800803c:	f200 8105 	bhi.w	800824a <_scanf_float+0x28a>
 8008040:	2501      	movs	r5, #1
 8008042:	4628      	mov	r0, r5
 8008044:	b007      	add	sp, #28
 8008046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800804e:	2a0d      	cmp	r2, #13
 8008050:	d8e6      	bhi.n	8008020 <_scanf_float+0x60>
 8008052:	a101      	add	r1, pc, #4	; (adr r1, 8008058 <_scanf_float+0x98>)
 8008054:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008058:	08008197 	.word	0x08008197
 800805c:	08008021 	.word	0x08008021
 8008060:	08008021 	.word	0x08008021
 8008064:	08008021 	.word	0x08008021
 8008068:	080081f7 	.word	0x080081f7
 800806c:	080081cf 	.word	0x080081cf
 8008070:	08008021 	.word	0x08008021
 8008074:	08008021 	.word	0x08008021
 8008078:	080081a5 	.word	0x080081a5
 800807c:	08008021 	.word	0x08008021
 8008080:	08008021 	.word	0x08008021
 8008084:	08008021 	.word	0x08008021
 8008088:	08008021 	.word	0x08008021
 800808c:	0800815d 	.word	0x0800815d
 8008090:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008094:	e7db      	b.n	800804e <_scanf_float+0x8e>
 8008096:	290e      	cmp	r1, #14
 8008098:	d8c2      	bhi.n	8008020 <_scanf_float+0x60>
 800809a:	a001      	add	r0, pc, #4	; (adr r0, 80080a0 <_scanf_float+0xe0>)
 800809c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080a0:	0800814f 	.word	0x0800814f
 80080a4:	08008021 	.word	0x08008021
 80080a8:	0800814f 	.word	0x0800814f
 80080ac:	080081e3 	.word	0x080081e3
 80080b0:	08008021 	.word	0x08008021
 80080b4:	080080fd 	.word	0x080080fd
 80080b8:	08008139 	.word	0x08008139
 80080bc:	08008139 	.word	0x08008139
 80080c0:	08008139 	.word	0x08008139
 80080c4:	08008139 	.word	0x08008139
 80080c8:	08008139 	.word	0x08008139
 80080cc:	08008139 	.word	0x08008139
 80080d0:	08008139 	.word	0x08008139
 80080d4:	08008139 	.word	0x08008139
 80080d8:	08008139 	.word	0x08008139
 80080dc:	2b6e      	cmp	r3, #110	; 0x6e
 80080de:	d809      	bhi.n	80080f4 <_scanf_float+0x134>
 80080e0:	2b60      	cmp	r3, #96	; 0x60
 80080e2:	d8b2      	bhi.n	800804a <_scanf_float+0x8a>
 80080e4:	2b54      	cmp	r3, #84	; 0x54
 80080e6:	d077      	beq.n	80081d8 <_scanf_float+0x218>
 80080e8:	2b59      	cmp	r3, #89	; 0x59
 80080ea:	d199      	bne.n	8008020 <_scanf_float+0x60>
 80080ec:	2d07      	cmp	r5, #7
 80080ee:	d197      	bne.n	8008020 <_scanf_float+0x60>
 80080f0:	2508      	movs	r5, #8
 80080f2:	e029      	b.n	8008148 <_scanf_float+0x188>
 80080f4:	2b74      	cmp	r3, #116	; 0x74
 80080f6:	d06f      	beq.n	80081d8 <_scanf_float+0x218>
 80080f8:	2b79      	cmp	r3, #121	; 0x79
 80080fa:	e7f6      	b.n	80080ea <_scanf_float+0x12a>
 80080fc:	6821      	ldr	r1, [r4, #0]
 80080fe:	05c8      	lsls	r0, r1, #23
 8008100:	d51a      	bpl.n	8008138 <_scanf_float+0x178>
 8008102:	9b02      	ldr	r3, [sp, #8]
 8008104:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008108:	6021      	str	r1, [r4, #0]
 800810a:	f109 0901 	add.w	r9, r9, #1
 800810e:	b11b      	cbz	r3, 8008118 <_scanf_float+0x158>
 8008110:	3b01      	subs	r3, #1
 8008112:	3201      	adds	r2, #1
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	60a2      	str	r2, [r4, #8]
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	3b01      	subs	r3, #1
 800811c:	60a3      	str	r3, [r4, #8]
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	3301      	adds	r3, #1
 8008122:	6123      	str	r3, [r4, #16]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	607b      	str	r3, [r7, #4]
 800812c:	f340 8084 	ble.w	8008238 <_scanf_float+0x278>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	e766      	b.n	8008006 <_scanf_float+0x46>
 8008138:	eb1a 0f05 	cmn.w	sl, r5
 800813c:	f47f af70 	bne.w	8008020 <_scanf_float+0x60>
 8008140:	6822      	ldr	r2, [r4, #0]
 8008142:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008146:	6022      	str	r2, [r4, #0]
 8008148:	f806 3b01 	strb.w	r3, [r6], #1
 800814c:	e7e4      	b.n	8008118 <_scanf_float+0x158>
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	0610      	lsls	r0, r2, #24
 8008152:	f57f af65 	bpl.w	8008020 <_scanf_float+0x60>
 8008156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800815a:	e7f4      	b.n	8008146 <_scanf_float+0x186>
 800815c:	f1ba 0f00 	cmp.w	sl, #0
 8008160:	d10e      	bne.n	8008180 <_scanf_float+0x1c0>
 8008162:	f1b9 0f00 	cmp.w	r9, #0
 8008166:	d10e      	bne.n	8008186 <_scanf_float+0x1c6>
 8008168:	6822      	ldr	r2, [r4, #0]
 800816a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800816e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008172:	d108      	bne.n	8008186 <_scanf_float+0x1c6>
 8008174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008178:	6022      	str	r2, [r4, #0]
 800817a:	f04f 0a01 	mov.w	sl, #1
 800817e:	e7e3      	b.n	8008148 <_scanf_float+0x188>
 8008180:	f1ba 0f02 	cmp.w	sl, #2
 8008184:	d055      	beq.n	8008232 <_scanf_float+0x272>
 8008186:	2d01      	cmp	r5, #1
 8008188:	d002      	beq.n	8008190 <_scanf_float+0x1d0>
 800818a:	2d04      	cmp	r5, #4
 800818c:	f47f af48 	bne.w	8008020 <_scanf_float+0x60>
 8008190:	3501      	adds	r5, #1
 8008192:	b2ed      	uxtb	r5, r5
 8008194:	e7d8      	b.n	8008148 <_scanf_float+0x188>
 8008196:	f1ba 0f01 	cmp.w	sl, #1
 800819a:	f47f af41 	bne.w	8008020 <_scanf_float+0x60>
 800819e:	f04f 0a02 	mov.w	sl, #2
 80081a2:	e7d1      	b.n	8008148 <_scanf_float+0x188>
 80081a4:	b97d      	cbnz	r5, 80081c6 <_scanf_float+0x206>
 80081a6:	f1b9 0f00 	cmp.w	r9, #0
 80081aa:	f47f af3c 	bne.w	8008026 <_scanf_float+0x66>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80081b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80081b8:	f47f af39 	bne.w	800802e <_scanf_float+0x6e>
 80081bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081c0:	6022      	str	r2, [r4, #0]
 80081c2:	2501      	movs	r5, #1
 80081c4:	e7c0      	b.n	8008148 <_scanf_float+0x188>
 80081c6:	2d03      	cmp	r5, #3
 80081c8:	d0e2      	beq.n	8008190 <_scanf_float+0x1d0>
 80081ca:	2d05      	cmp	r5, #5
 80081cc:	e7de      	b.n	800818c <_scanf_float+0x1cc>
 80081ce:	2d02      	cmp	r5, #2
 80081d0:	f47f af26 	bne.w	8008020 <_scanf_float+0x60>
 80081d4:	2503      	movs	r5, #3
 80081d6:	e7b7      	b.n	8008148 <_scanf_float+0x188>
 80081d8:	2d06      	cmp	r5, #6
 80081da:	f47f af21 	bne.w	8008020 <_scanf_float+0x60>
 80081de:	2507      	movs	r5, #7
 80081e0:	e7b2      	b.n	8008148 <_scanf_float+0x188>
 80081e2:	6822      	ldr	r2, [r4, #0]
 80081e4:	0591      	lsls	r1, r2, #22
 80081e6:	f57f af1b 	bpl.w	8008020 <_scanf_float+0x60>
 80081ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80081f4:	e7a8      	b.n	8008148 <_scanf_float+0x188>
 80081f6:	6822      	ldr	r2, [r4, #0]
 80081f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008200:	d006      	beq.n	8008210 <_scanf_float+0x250>
 8008202:	0550      	lsls	r0, r2, #21
 8008204:	f57f af0c 	bpl.w	8008020 <_scanf_float+0x60>
 8008208:	f1b9 0f00 	cmp.w	r9, #0
 800820c:	f43f af0f 	beq.w	800802e <_scanf_float+0x6e>
 8008210:	0591      	lsls	r1, r2, #22
 8008212:	bf58      	it	pl
 8008214:	9901      	ldrpl	r1, [sp, #4]
 8008216:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800821a:	bf58      	it	pl
 800821c:	eba9 0101 	subpl.w	r1, r9, r1
 8008220:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008224:	bf58      	it	pl
 8008226:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	f04f 0900 	mov.w	r9, #0
 8008230:	e78a      	b.n	8008148 <_scanf_float+0x188>
 8008232:	f04f 0a03 	mov.w	sl, #3
 8008236:	e787      	b.n	8008148 <_scanf_float+0x188>
 8008238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800823c:	4639      	mov	r1, r7
 800823e:	4640      	mov	r0, r8
 8008240:	4798      	blx	r3
 8008242:	2800      	cmp	r0, #0
 8008244:	f43f aedf 	beq.w	8008006 <_scanf_float+0x46>
 8008248:	e6ea      	b.n	8008020 <_scanf_float+0x60>
 800824a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800824e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008252:	463a      	mov	r2, r7
 8008254:	4640      	mov	r0, r8
 8008256:	4798      	blx	r3
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	3b01      	subs	r3, #1
 800825c:	6123      	str	r3, [r4, #16]
 800825e:	e6ec      	b.n	800803a <_scanf_float+0x7a>
 8008260:	1e6b      	subs	r3, r5, #1
 8008262:	2b06      	cmp	r3, #6
 8008264:	d825      	bhi.n	80082b2 <_scanf_float+0x2f2>
 8008266:	2d02      	cmp	r5, #2
 8008268:	d836      	bhi.n	80082d8 <_scanf_float+0x318>
 800826a:	455e      	cmp	r6, fp
 800826c:	f67f aee8 	bls.w	8008040 <_scanf_float+0x80>
 8008270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008274:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008278:	463a      	mov	r2, r7
 800827a:	4640      	mov	r0, r8
 800827c:	4798      	blx	r3
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	3b01      	subs	r3, #1
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	e7f1      	b.n	800826a <_scanf_float+0x2aa>
 8008286:	9802      	ldr	r0, [sp, #8]
 8008288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800828c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008290:	9002      	str	r0, [sp, #8]
 8008292:	463a      	mov	r2, r7
 8008294:	4640      	mov	r0, r8
 8008296:	4798      	blx	r3
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	3b01      	subs	r3, #1
 800829c:	6123      	str	r3, [r4, #16]
 800829e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082a2:	fa5f fa8a 	uxtb.w	sl, sl
 80082a6:	f1ba 0f02 	cmp.w	sl, #2
 80082aa:	d1ec      	bne.n	8008286 <_scanf_float+0x2c6>
 80082ac:	3d03      	subs	r5, #3
 80082ae:	b2ed      	uxtb	r5, r5
 80082b0:	1b76      	subs	r6, r6, r5
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	05da      	lsls	r2, r3, #23
 80082b6:	d52f      	bpl.n	8008318 <_scanf_float+0x358>
 80082b8:	055b      	lsls	r3, r3, #21
 80082ba:	d510      	bpl.n	80082de <_scanf_float+0x31e>
 80082bc:	455e      	cmp	r6, fp
 80082be:	f67f aebf 	bls.w	8008040 <_scanf_float+0x80>
 80082c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082ca:	463a      	mov	r2, r7
 80082cc:	4640      	mov	r0, r8
 80082ce:	4798      	blx	r3
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	6123      	str	r3, [r4, #16]
 80082d6:	e7f1      	b.n	80082bc <_scanf_float+0x2fc>
 80082d8:	46aa      	mov	sl, r5
 80082da:	9602      	str	r6, [sp, #8]
 80082dc:	e7df      	b.n	800829e <_scanf_float+0x2de>
 80082de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	2965      	cmp	r1, #101	; 0x65
 80082e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80082ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80082ee:	6123      	str	r3, [r4, #16]
 80082f0:	d00c      	beq.n	800830c <_scanf_float+0x34c>
 80082f2:	2945      	cmp	r1, #69	; 0x45
 80082f4:	d00a      	beq.n	800830c <_scanf_float+0x34c>
 80082f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082fa:	463a      	mov	r2, r7
 80082fc:	4640      	mov	r0, r8
 80082fe:	4798      	blx	r3
 8008300:	6923      	ldr	r3, [r4, #16]
 8008302:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008306:	3b01      	subs	r3, #1
 8008308:	1eb5      	subs	r5, r6, #2
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008310:	463a      	mov	r2, r7
 8008312:	4640      	mov	r0, r8
 8008314:	4798      	blx	r3
 8008316:	462e      	mov	r6, r5
 8008318:	6825      	ldr	r5, [r4, #0]
 800831a:	f015 0510 	ands.w	r5, r5, #16
 800831e:	d158      	bne.n	80083d2 <_scanf_float+0x412>
 8008320:	7035      	strb	r5, [r6, #0]
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832c:	d11c      	bne.n	8008368 <_scanf_float+0x3a8>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	454b      	cmp	r3, r9
 8008332:	eba3 0209 	sub.w	r2, r3, r9
 8008336:	d124      	bne.n	8008382 <_scanf_float+0x3c2>
 8008338:	2200      	movs	r2, #0
 800833a:	4659      	mov	r1, fp
 800833c:	4640      	mov	r0, r8
 800833e:	f002 fd67 	bl	800ae10 <_strtod_r>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	6821      	ldr	r1, [r4, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f011 0f02 	tst.w	r1, #2
 800834c:	ec57 6b10 	vmov	r6, r7, d0
 8008350:	f103 0204 	add.w	r2, r3, #4
 8008354:	d020      	beq.n	8008398 <_scanf_float+0x3d8>
 8008356:	9903      	ldr	r1, [sp, #12]
 8008358:	600a      	str	r2, [r1, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	e9c3 6700 	strd	r6, r7, [r3]
 8008360:	68e3      	ldr	r3, [r4, #12]
 8008362:	3301      	adds	r3, #1
 8008364:	60e3      	str	r3, [r4, #12]
 8008366:	e66c      	b.n	8008042 <_scanf_float+0x82>
 8008368:	9b04      	ldr	r3, [sp, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0e4      	beq.n	8008338 <_scanf_float+0x378>
 800836e:	9905      	ldr	r1, [sp, #20]
 8008370:	230a      	movs	r3, #10
 8008372:	462a      	mov	r2, r5
 8008374:	3101      	adds	r1, #1
 8008376:	4640      	mov	r0, r8
 8008378:	f002 fdd2 	bl	800af20 <_strtol_r>
 800837c:	9b04      	ldr	r3, [sp, #16]
 800837e:	9e05      	ldr	r6, [sp, #20]
 8008380:	1ac2      	subs	r2, r0, r3
 8008382:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008386:	429e      	cmp	r6, r3
 8008388:	bf28      	it	cs
 800838a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800838e:	4912      	ldr	r1, [pc, #72]	; (80083d8 <_scanf_float+0x418>)
 8008390:	4630      	mov	r0, r6
 8008392:	f000 f989 	bl	80086a8 <siprintf>
 8008396:	e7cf      	b.n	8008338 <_scanf_float+0x378>
 8008398:	f011 0f04 	tst.w	r1, #4
 800839c:	9903      	ldr	r1, [sp, #12]
 800839e:	600a      	str	r2, [r1, #0]
 80083a0:	d1db      	bne.n	800835a <_scanf_float+0x39a>
 80083a2:	f8d3 8000 	ldr.w	r8, [r3]
 80083a6:	ee10 2a10 	vmov	r2, s0
 80083aa:	ee10 0a10 	vmov	r0, s0
 80083ae:	463b      	mov	r3, r7
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f8 fbbb 	bl	8000b2c <__aeabi_dcmpun>
 80083b6:	b128      	cbz	r0, 80083c4 <_scanf_float+0x404>
 80083b8:	4808      	ldr	r0, [pc, #32]	; (80083dc <_scanf_float+0x41c>)
 80083ba:	f000 faed 	bl	8008998 <nanf>
 80083be:	ed88 0a00 	vstr	s0, [r8]
 80083c2:	e7cd      	b.n	8008360 <_scanf_float+0x3a0>
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 fc0e 	bl	8000be8 <__aeabi_d2f>
 80083cc:	f8c8 0000 	str.w	r0, [r8]
 80083d0:	e7c6      	b.n	8008360 <_scanf_float+0x3a0>
 80083d2:	2500      	movs	r5, #0
 80083d4:	e635      	b.n	8008042 <_scanf_float+0x82>
 80083d6:	bf00      	nop
 80083d8:	0800cb64 	.word	0x0800cb64
 80083dc:	0800cef5 	.word	0x0800cef5

080083e0 <std>:
 80083e0:	2300      	movs	r3, #0
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ee:	6083      	str	r3, [r0, #8]
 80083f0:	8181      	strh	r1, [r0, #12]
 80083f2:	6643      	str	r3, [r0, #100]	; 0x64
 80083f4:	81c2      	strh	r2, [r0, #14]
 80083f6:	6183      	str	r3, [r0, #24]
 80083f8:	4619      	mov	r1, r3
 80083fa:	2208      	movs	r2, #8
 80083fc:	305c      	adds	r0, #92	; 0x5c
 80083fe:	f000 fa4b 	bl	8008898 <memset>
 8008402:	4b0d      	ldr	r3, [pc, #52]	; (8008438 <std+0x58>)
 8008404:	6263      	str	r3, [r4, #36]	; 0x24
 8008406:	4b0d      	ldr	r3, [pc, #52]	; (800843c <std+0x5c>)
 8008408:	62a3      	str	r3, [r4, #40]	; 0x28
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <std+0x60>)
 800840c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <std+0x64>)
 8008410:	6323      	str	r3, [r4, #48]	; 0x30
 8008412:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <std+0x68>)
 8008414:	6224      	str	r4, [r4, #32]
 8008416:	429c      	cmp	r4, r3
 8008418:	d006      	beq.n	8008428 <std+0x48>
 800841a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800841e:	4294      	cmp	r4, r2
 8008420:	d002      	beq.n	8008428 <std+0x48>
 8008422:	33d0      	adds	r3, #208	; 0xd0
 8008424:	429c      	cmp	r4, r3
 8008426:	d105      	bne.n	8008434 <std+0x54>
 8008428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008430:	f000 baae 	b.w	8008990 <__retarget_lock_init_recursive>
 8008434:	bd10      	pop	{r4, pc}
 8008436:	bf00      	nop
 8008438:	080086e9 	.word	0x080086e9
 800843c:	0800870b 	.word	0x0800870b
 8008440:	08008743 	.word	0x08008743
 8008444:	08008767 	.word	0x08008767
 8008448:	200003b8 	.word	0x200003b8

0800844c <stdio_exit_handler>:
 800844c:	4a02      	ldr	r2, [pc, #8]	; (8008458 <stdio_exit_handler+0xc>)
 800844e:	4903      	ldr	r1, [pc, #12]	; (800845c <stdio_exit_handler+0x10>)
 8008450:	4803      	ldr	r0, [pc, #12]	; (8008460 <stdio_exit_handler+0x14>)
 8008452:	f000 b869 	b.w	8008528 <_fwalk_sglue>
 8008456:	bf00      	nop
 8008458:	2000000c 	.word	0x2000000c
 800845c:	0800b569 	.word	0x0800b569
 8008460:	20000018 	.word	0x20000018

08008464 <cleanup_stdio>:
 8008464:	6841      	ldr	r1, [r0, #4]
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <cleanup_stdio+0x34>)
 8008468:	4299      	cmp	r1, r3
 800846a:	b510      	push	{r4, lr}
 800846c:	4604      	mov	r4, r0
 800846e:	d001      	beq.n	8008474 <cleanup_stdio+0x10>
 8008470:	f003 f87a 	bl	800b568 <_fflush_r>
 8008474:	68a1      	ldr	r1, [r4, #8]
 8008476:	4b09      	ldr	r3, [pc, #36]	; (800849c <cleanup_stdio+0x38>)
 8008478:	4299      	cmp	r1, r3
 800847a:	d002      	beq.n	8008482 <cleanup_stdio+0x1e>
 800847c:	4620      	mov	r0, r4
 800847e:	f003 f873 	bl	800b568 <_fflush_r>
 8008482:	68e1      	ldr	r1, [r4, #12]
 8008484:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <cleanup_stdio+0x3c>)
 8008486:	4299      	cmp	r1, r3
 8008488:	d004      	beq.n	8008494 <cleanup_stdio+0x30>
 800848a:	4620      	mov	r0, r4
 800848c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008490:	f003 b86a 	b.w	800b568 <_fflush_r>
 8008494:	bd10      	pop	{r4, pc}
 8008496:	bf00      	nop
 8008498:	200003b8 	.word	0x200003b8
 800849c:	20000420 	.word	0x20000420
 80084a0:	20000488 	.word	0x20000488

080084a4 <global_stdio_init.part.0>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <global_stdio_init.part.0+0x30>)
 80084a8:	4c0b      	ldr	r4, [pc, #44]	; (80084d8 <global_stdio_init.part.0+0x34>)
 80084aa:	4a0c      	ldr	r2, [pc, #48]	; (80084dc <global_stdio_init.part.0+0x38>)
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	4620      	mov	r0, r4
 80084b0:	2200      	movs	r2, #0
 80084b2:	2104      	movs	r1, #4
 80084b4:	f7ff ff94 	bl	80083e0 <std>
 80084b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80084bc:	2201      	movs	r2, #1
 80084be:	2109      	movs	r1, #9
 80084c0:	f7ff ff8e 	bl	80083e0 <std>
 80084c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084c8:	2202      	movs	r2, #2
 80084ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ce:	2112      	movs	r1, #18
 80084d0:	f7ff bf86 	b.w	80083e0 <std>
 80084d4:	200004f0 	.word	0x200004f0
 80084d8:	200003b8 	.word	0x200003b8
 80084dc:	0800844d 	.word	0x0800844d

080084e0 <__sfp_lock_acquire>:
 80084e0:	4801      	ldr	r0, [pc, #4]	; (80084e8 <__sfp_lock_acquire+0x8>)
 80084e2:	f000 ba56 	b.w	8008992 <__retarget_lock_acquire_recursive>
 80084e6:	bf00      	nop
 80084e8:	200004f9 	.word	0x200004f9

080084ec <__sfp_lock_release>:
 80084ec:	4801      	ldr	r0, [pc, #4]	; (80084f4 <__sfp_lock_release+0x8>)
 80084ee:	f000 ba51 	b.w	8008994 <__retarget_lock_release_recursive>
 80084f2:	bf00      	nop
 80084f4:	200004f9 	.word	0x200004f9

080084f8 <__sinit>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	4604      	mov	r4, r0
 80084fc:	f7ff fff0 	bl	80084e0 <__sfp_lock_acquire>
 8008500:	6a23      	ldr	r3, [r4, #32]
 8008502:	b11b      	cbz	r3, 800850c <__sinit+0x14>
 8008504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008508:	f7ff bff0 	b.w	80084ec <__sfp_lock_release>
 800850c:	4b04      	ldr	r3, [pc, #16]	; (8008520 <__sinit+0x28>)
 800850e:	6223      	str	r3, [r4, #32]
 8008510:	4b04      	ldr	r3, [pc, #16]	; (8008524 <__sinit+0x2c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f5      	bne.n	8008504 <__sinit+0xc>
 8008518:	f7ff ffc4 	bl	80084a4 <global_stdio_init.part.0>
 800851c:	e7f2      	b.n	8008504 <__sinit+0xc>
 800851e:	bf00      	nop
 8008520:	08008465 	.word	0x08008465
 8008524:	200004f0 	.word	0x200004f0

08008528 <_fwalk_sglue>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	4607      	mov	r7, r0
 800852e:	4688      	mov	r8, r1
 8008530:	4614      	mov	r4, r2
 8008532:	2600      	movs	r6, #0
 8008534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008538:	f1b9 0901 	subs.w	r9, r9, #1
 800853c:	d505      	bpl.n	800854a <_fwalk_sglue+0x22>
 800853e:	6824      	ldr	r4, [r4, #0]
 8008540:	2c00      	cmp	r4, #0
 8008542:	d1f7      	bne.n	8008534 <_fwalk_sglue+0xc>
 8008544:	4630      	mov	r0, r6
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d907      	bls.n	8008560 <_fwalk_sglue+0x38>
 8008550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008554:	3301      	adds	r3, #1
 8008556:	d003      	beq.n	8008560 <_fwalk_sglue+0x38>
 8008558:	4629      	mov	r1, r5
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	4306      	orrs	r6, r0
 8008560:	3568      	adds	r5, #104	; 0x68
 8008562:	e7e9      	b.n	8008538 <_fwalk_sglue+0x10>

08008564 <iprintf>:
 8008564:	b40f      	push	{r0, r1, r2, r3}
 8008566:	b507      	push	{r0, r1, r2, lr}
 8008568:	4906      	ldr	r1, [pc, #24]	; (8008584 <iprintf+0x20>)
 800856a:	ab04      	add	r3, sp, #16
 800856c:	6808      	ldr	r0, [r1, #0]
 800856e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008572:	6881      	ldr	r1, [r0, #8]
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	f002 fe57 	bl	800b228 <_vfiprintf_r>
 800857a:	b003      	add	sp, #12
 800857c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008580:	b004      	add	sp, #16
 8008582:	4770      	bx	lr
 8008584:	20000064 	.word	0x20000064

08008588 <_puts_r>:
 8008588:	6a03      	ldr	r3, [r0, #32]
 800858a:	b570      	push	{r4, r5, r6, lr}
 800858c:	6884      	ldr	r4, [r0, #8]
 800858e:	4605      	mov	r5, r0
 8008590:	460e      	mov	r6, r1
 8008592:	b90b      	cbnz	r3, 8008598 <_puts_r+0x10>
 8008594:	f7ff ffb0 	bl	80084f8 <__sinit>
 8008598:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800859a:	07db      	lsls	r3, r3, #31
 800859c:	d405      	bmi.n	80085aa <_puts_r+0x22>
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	0598      	lsls	r0, r3, #22
 80085a2:	d402      	bmi.n	80085aa <_puts_r+0x22>
 80085a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085a6:	f000 f9f4 	bl	8008992 <__retarget_lock_acquire_recursive>
 80085aa:	89a3      	ldrh	r3, [r4, #12]
 80085ac:	0719      	lsls	r1, r3, #28
 80085ae:	d513      	bpl.n	80085d8 <_puts_r+0x50>
 80085b0:	6923      	ldr	r3, [r4, #16]
 80085b2:	b18b      	cbz	r3, 80085d8 <_puts_r+0x50>
 80085b4:	3e01      	subs	r6, #1
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085bc:	3b01      	subs	r3, #1
 80085be:	60a3      	str	r3, [r4, #8]
 80085c0:	b9e9      	cbnz	r1, 80085fe <_puts_r+0x76>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da2e      	bge.n	8008624 <_puts_r+0x9c>
 80085c6:	4622      	mov	r2, r4
 80085c8:	210a      	movs	r1, #10
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 f8cf 	bl	800876e <__swbuf_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d007      	beq.n	80085e4 <_puts_r+0x5c>
 80085d4:	250a      	movs	r5, #10
 80085d6:	e007      	b.n	80085e8 <_puts_r+0x60>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f904 	bl	80087e8 <__swsetup_r>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d0e7      	beq.n	80085b4 <_puts_r+0x2c>
 80085e4:	f04f 35ff 	mov.w	r5, #4294967295
 80085e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d405      	bmi.n	80085fa <_puts_r+0x72>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	059b      	lsls	r3, r3, #22
 80085f2:	d402      	bmi.n	80085fa <_puts_r+0x72>
 80085f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085f6:	f000 f9cd 	bl	8008994 <__retarget_lock_release_recursive>
 80085fa:	4628      	mov	r0, r5
 80085fc:	bd70      	pop	{r4, r5, r6, pc}
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da04      	bge.n	800860c <_puts_r+0x84>
 8008602:	69a2      	ldr	r2, [r4, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	dc06      	bgt.n	8008616 <_puts_r+0x8e>
 8008608:	290a      	cmp	r1, #10
 800860a:	d004      	beq.n	8008616 <_puts_r+0x8e>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	7019      	strb	r1, [r3, #0]
 8008614:	e7cf      	b.n	80085b6 <_puts_r+0x2e>
 8008616:	4622      	mov	r2, r4
 8008618:	4628      	mov	r0, r5
 800861a:	f000 f8a8 	bl	800876e <__swbuf_r>
 800861e:	3001      	adds	r0, #1
 8008620:	d1c9      	bne.n	80085b6 <_puts_r+0x2e>
 8008622:	e7df      	b.n	80085e4 <_puts_r+0x5c>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	250a      	movs	r5, #10
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	6022      	str	r2, [r4, #0]
 800862c:	701d      	strb	r5, [r3, #0]
 800862e:	e7db      	b.n	80085e8 <_puts_r+0x60>

08008630 <puts>:
 8008630:	4b02      	ldr	r3, [pc, #8]	; (800863c <puts+0xc>)
 8008632:	4601      	mov	r1, r0
 8008634:	6818      	ldr	r0, [r3, #0]
 8008636:	f7ff bfa7 	b.w	8008588 <_puts_r>
 800863a:	bf00      	nop
 800863c:	20000064 	.word	0x20000064

08008640 <sniprintf>:
 8008640:	b40c      	push	{r2, r3}
 8008642:	b530      	push	{r4, r5, lr}
 8008644:	4b17      	ldr	r3, [pc, #92]	; (80086a4 <sniprintf+0x64>)
 8008646:	1e0c      	subs	r4, r1, #0
 8008648:	681d      	ldr	r5, [r3, #0]
 800864a:	b09d      	sub	sp, #116	; 0x74
 800864c:	da08      	bge.n	8008660 <sniprintf+0x20>
 800864e:	238b      	movs	r3, #139	; 0x8b
 8008650:	602b      	str	r3, [r5, #0]
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	b01d      	add	sp, #116	; 0x74
 8008658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800865c:	b002      	add	sp, #8
 800865e:	4770      	bx	lr
 8008660:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008664:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008668:	bf14      	ite	ne
 800866a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800866e:	4623      	moveq	r3, r4
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	9307      	str	r3, [sp, #28]
 8008674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008678:	9002      	str	r0, [sp, #8]
 800867a:	9006      	str	r0, [sp, #24]
 800867c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008680:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008682:	ab21      	add	r3, sp, #132	; 0x84
 8008684:	a902      	add	r1, sp, #8
 8008686:	4628      	mov	r0, r5
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	f002 fca5 	bl	800afd8 <_svfiprintf_r>
 800868e:	1c43      	adds	r3, r0, #1
 8008690:	bfbc      	itt	lt
 8008692:	238b      	movlt	r3, #139	; 0x8b
 8008694:	602b      	strlt	r3, [r5, #0]
 8008696:	2c00      	cmp	r4, #0
 8008698:	d0dd      	beq.n	8008656 <sniprintf+0x16>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e7d9      	b.n	8008656 <sniprintf+0x16>
 80086a2:	bf00      	nop
 80086a4:	20000064 	.word	0x20000064

080086a8 <siprintf>:
 80086a8:	b40e      	push	{r1, r2, r3}
 80086aa:	b500      	push	{lr}
 80086ac:	b09c      	sub	sp, #112	; 0x70
 80086ae:	ab1d      	add	r3, sp, #116	; 0x74
 80086b0:	9002      	str	r0, [sp, #8]
 80086b2:	9006      	str	r0, [sp, #24]
 80086b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086b8:	4809      	ldr	r0, [pc, #36]	; (80086e0 <siprintf+0x38>)
 80086ba:	9107      	str	r1, [sp, #28]
 80086bc:	9104      	str	r1, [sp, #16]
 80086be:	4909      	ldr	r1, [pc, #36]	; (80086e4 <siprintf+0x3c>)
 80086c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c4:	9105      	str	r1, [sp, #20]
 80086c6:	6800      	ldr	r0, [r0, #0]
 80086c8:	9301      	str	r3, [sp, #4]
 80086ca:	a902      	add	r1, sp, #8
 80086cc:	f002 fc84 	bl	800afd8 <_svfiprintf_r>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	b01c      	add	sp, #112	; 0x70
 80086d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086dc:	b003      	add	sp, #12
 80086de:	4770      	bx	lr
 80086e0:	20000064 	.word	0x20000064
 80086e4:	ffff0208 	.word	0xffff0208

080086e8 <__sread>:
 80086e8:	b510      	push	{r4, lr}
 80086ea:	460c      	mov	r4, r1
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	f000 f900 	bl	80088f4 <_read_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	bfab      	itete	ge
 80086f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fa:	89a3      	ldrhlt	r3, [r4, #12]
 80086fc:	181b      	addge	r3, r3, r0
 80086fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008702:	bfac      	ite	ge
 8008704:	6563      	strge	r3, [r4, #84]	; 0x54
 8008706:	81a3      	strhlt	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__swrite>:
 800870a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	461f      	mov	r7, r3
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	05db      	lsls	r3, r3, #23
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4616      	mov	r6, r2
 800871a:	d505      	bpl.n	8008728 <__swrite+0x1e>
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	2302      	movs	r3, #2
 8008722:	2200      	movs	r2, #0
 8008724:	f000 f8d4 	bl	80088d0 <_lseek_r>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	4632      	mov	r2, r6
 8008736:	463b      	mov	r3, r7
 8008738:	4628      	mov	r0, r5
 800873a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800873e:	f000 b8eb 	b.w	8008918 <_write_r>

08008742 <__sseek>:
 8008742:	b510      	push	{r4, lr}
 8008744:	460c      	mov	r4, r1
 8008746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874a:	f000 f8c1 	bl	80088d0 <_lseek_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	bf15      	itete	ne
 8008754:	6560      	strne	r0, [r4, #84]	; 0x54
 8008756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800875a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800875e:	81a3      	strheq	r3, [r4, #12]
 8008760:	bf18      	it	ne
 8008762:	81a3      	strhne	r3, [r4, #12]
 8008764:	bd10      	pop	{r4, pc}

08008766 <__sclose>:
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 b8a1 	b.w	80088b0 <_close_r>

0800876e <__swbuf_r>:
 800876e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008770:	460e      	mov	r6, r1
 8008772:	4614      	mov	r4, r2
 8008774:	4605      	mov	r5, r0
 8008776:	b118      	cbz	r0, 8008780 <__swbuf_r+0x12>
 8008778:	6a03      	ldr	r3, [r0, #32]
 800877a:	b90b      	cbnz	r3, 8008780 <__swbuf_r+0x12>
 800877c:	f7ff febc 	bl	80084f8 <__sinit>
 8008780:	69a3      	ldr	r3, [r4, #24]
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	071a      	lsls	r2, r3, #28
 8008788:	d525      	bpl.n	80087d6 <__swbuf_r+0x68>
 800878a:	6923      	ldr	r3, [r4, #16]
 800878c:	b31b      	cbz	r3, 80087d6 <__swbuf_r+0x68>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	1a98      	subs	r0, r3, r2
 8008794:	6963      	ldr	r3, [r4, #20]
 8008796:	b2f6      	uxtb	r6, r6
 8008798:	4283      	cmp	r3, r0
 800879a:	4637      	mov	r7, r6
 800879c:	dc04      	bgt.n	80087a8 <__swbuf_r+0x3a>
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f002 fee1 	bl	800b568 <_fflush_r>
 80087a6:	b9e0      	cbnz	r0, 80087e2 <__swbuf_r+0x74>
 80087a8:	68a3      	ldr	r3, [r4, #8]
 80087aa:	3b01      	subs	r3, #1
 80087ac:	60a3      	str	r3, [r4, #8]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	6022      	str	r2, [r4, #0]
 80087b4:	701e      	strb	r6, [r3, #0]
 80087b6:	6962      	ldr	r2, [r4, #20]
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d004      	beq.n	80087c8 <__swbuf_r+0x5a>
 80087be:	89a3      	ldrh	r3, [r4, #12]
 80087c0:	07db      	lsls	r3, r3, #31
 80087c2:	d506      	bpl.n	80087d2 <__swbuf_r+0x64>
 80087c4:	2e0a      	cmp	r6, #10
 80087c6:	d104      	bne.n	80087d2 <__swbuf_r+0x64>
 80087c8:	4621      	mov	r1, r4
 80087ca:	4628      	mov	r0, r5
 80087cc:	f002 fecc 	bl	800b568 <_fflush_r>
 80087d0:	b938      	cbnz	r0, 80087e2 <__swbuf_r+0x74>
 80087d2:	4638      	mov	r0, r7
 80087d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d6:	4621      	mov	r1, r4
 80087d8:	4628      	mov	r0, r5
 80087da:	f000 f805 	bl	80087e8 <__swsetup_r>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d0d5      	beq.n	800878e <__swbuf_r+0x20>
 80087e2:	f04f 37ff 	mov.w	r7, #4294967295
 80087e6:	e7f4      	b.n	80087d2 <__swbuf_r+0x64>

080087e8 <__swsetup_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <__swsetup_r+0xac>)
 80087ec:	4605      	mov	r5, r0
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	460c      	mov	r4, r1
 80087f2:	b118      	cbz	r0, 80087fc <__swsetup_r+0x14>
 80087f4:	6a03      	ldr	r3, [r0, #32]
 80087f6:	b90b      	cbnz	r3, 80087fc <__swsetup_r+0x14>
 80087f8:	f7ff fe7e 	bl	80084f8 <__sinit>
 80087fc:	89a3      	ldrh	r3, [r4, #12]
 80087fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008802:	0718      	lsls	r0, r3, #28
 8008804:	d422      	bmi.n	800884c <__swsetup_r+0x64>
 8008806:	06d9      	lsls	r1, r3, #27
 8008808:	d407      	bmi.n	800881a <__swsetup_r+0x32>
 800880a:	2309      	movs	r3, #9
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008812:	81a3      	strh	r3, [r4, #12]
 8008814:	f04f 30ff 	mov.w	r0, #4294967295
 8008818:	e034      	b.n	8008884 <__swsetup_r+0x9c>
 800881a:	0758      	lsls	r0, r3, #29
 800881c:	d512      	bpl.n	8008844 <__swsetup_r+0x5c>
 800881e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008820:	b141      	cbz	r1, 8008834 <__swsetup_r+0x4c>
 8008822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008826:	4299      	cmp	r1, r3
 8008828:	d002      	beq.n	8008830 <__swsetup_r+0x48>
 800882a:	4628      	mov	r0, r5
 800882c:	f000 ff36 	bl	800969c <_free_r>
 8008830:	2300      	movs	r3, #0
 8008832:	6363      	str	r3, [r4, #52]	; 0x34
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	2300      	movs	r3, #0
 800883e:	6063      	str	r3, [r4, #4]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	6023      	str	r3, [r4, #0]
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f043 0308 	orr.w	r3, r3, #8
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	6923      	ldr	r3, [r4, #16]
 800884e:	b94b      	cbnz	r3, 8008864 <__swsetup_r+0x7c>
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885a:	d003      	beq.n	8008864 <__swsetup_r+0x7c>
 800885c:	4621      	mov	r1, r4
 800885e:	4628      	mov	r0, r5
 8008860:	f002 fed0 	bl	800b604 <__smakebuf_r>
 8008864:	89a0      	ldrh	r0, [r4, #12]
 8008866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800886a:	f010 0301 	ands.w	r3, r0, #1
 800886e:	d00a      	beq.n	8008886 <__swsetup_r+0x9e>
 8008870:	2300      	movs	r3, #0
 8008872:	60a3      	str	r3, [r4, #8]
 8008874:	6963      	ldr	r3, [r4, #20]
 8008876:	425b      	negs	r3, r3
 8008878:	61a3      	str	r3, [r4, #24]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b943      	cbnz	r3, 8008890 <__swsetup_r+0xa8>
 800887e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008882:	d1c4      	bne.n	800880e <__swsetup_r+0x26>
 8008884:	bd38      	pop	{r3, r4, r5, pc}
 8008886:	0781      	lsls	r1, r0, #30
 8008888:	bf58      	it	pl
 800888a:	6963      	ldrpl	r3, [r4, #20]
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	e7f4      	b.n	800887a <__swsetup_r+0x92>
 8008890:	2000      	movs	r0, #0
 8008892:	e7f7      	b.n	8008884 <__swsetup_r+0x9c>
 8008894:	20000064 	.word	0x20000064

08008898 <memset>:
 8008898:	4402      	add	r2, r0
 800889a:	4603      	mov	r3, r0
 800889c:	4293      	cmp	r3, r2
 800889e:	d100      	bne.n	80088a2 <memset+0xa>
 80088a0:	4770      	bx	lr
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	e7f9      	b.n	800889c <memset+0x4>

080088a8 <_localeconv_r>:
 80088a8:	4800      	ldr	r0, [pc, #0]	; (80088ac <_localeconv_r+0x4>)
 80088aa:	4770      	bx	lr
 80088ac:	20000158 	.word	0x20000158

080088b0 <_close_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d06      	ldr	r5, [pc, #24]	; (80088cc <_close_r+0x1c>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f7f9 fd08 	bl	80022d0 <_close>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_close_r+0x1a>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_close_r+0x1a>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	200004f4 	.word	0x200004f4

080088d0 <_lseek_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d07      	ldr	r5, [pc, #28]	; (80088f0 <_lseek_r+0x20>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	4611      	mov	r1, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	602a      	str	r2, [r5, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7f9 fd1d 	bl	800231e <_lseek>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_lseek_r+0x1e>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_lseek_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	200004f4 	.word	0x200004f4

080088f4 <_read_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	; (8008914 <_read_r+0x20>)
 80088f8:	4604      	mov	r4, r0
 80088fa:	4608      	mov	r0, r1
 80088fc:	4611      	mov	r1, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f7f9 fca4 	bl	8002250 <_read>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_read_r+0x1e>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_read_r+0x1e>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	200004f4 	.word	0x200004f4

08008918 <_write_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d07      	ldr	r5, [pc, #28]	; (8008938 <_write_r+0x20>)
 800891c:	4604      	mov	r4, r0
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	2200      	movs	r2, #0
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7f9 fcb0 	bl	800228c <_write>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_write_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_write_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	200004f4 	.word	0x200004f4

0800893c <__errno>:
 800893c:	4b01      	ldr	r3, [pc, #4]	; (8008944 <__errno+0x8>)
 800893e:	6818      	ldr	r0, [r3, #0]
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20000064 	.word	0x20000064

08008948 <__libc_init_array>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4d0d      	ldr	r5, [pc, #52]	; (8008980 <__libc_init_array+0x38>)
 800894c:	4c0d      	ldr	r4, [pc, #52]	; (8008984 <__libc_init_array+0x3c>)
 800894e:	1b64      	subs	r4, r4, r5
 8008950:	10a4      	asrs	r4, r4, #2
 8008952:	2600      	movs	r6, #0
 8008954:	42a6      	cmp	r6, r4
 8008956:	d109      	bne.n	800896c <__libc_init_array+0x24>
 8008958:	4d0b      	ldr	r5, [pc, #44]	; (8008988 <__libc_init_array+0x40>)
 800895a:	4c0c      	ldr	r4, [pc, #48]	; (800898c <__libc_init_array+0x44>)
 800895c:	f003 fb44 	bl	800bfe8 <_init>
 8008960:	1b64      	subs	r4, r4, r5
 8008962:	10a4      	asrs	r4, r4, #2
 8008964:	2600      	movs	r6, #0
 8008966:	42a6      	cmp	r6, r4
 8008968:	d105      	bne.n	8008976 <__libc_init_array+0x2e>
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008970:	4798      	blx	r3
 8008972:	3601      	adds	r6, #1
 8008974:	e7ee      	b.n	8008954 <__libc_init_array+0xc>
 8008976:	f855 3b04 	ldr.w	r3, [r5], #4
 800897a:	4798      	blx	r3
 800897c:	3601      	adds	r6, #1
 800897e:	e7f2      	b.n	8008966 <__libc_init_array+0x1e>
 8008980:	0800cf60 	.word	0x0800cf60
 8008984:	0800cf60 	.word	0x0800cf60
 8008988:	0800cf60 	.word	0x0800cf60
 800898c:	0800cf64 	.word	0x0800cf64

08008990 <__retarget_lock_init_recursive>:
 8008990:	4770      	bx	lr

08008992 <__retarget_lock_acquire_recursive>:
 8008992:	4770      	bx	lr

08008994 <__retarget_lock_release_recursive>:
 8008994:	4770      	bx	lr
	...

08008998 <nanf>:
 8008998:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80089a0 <nanf+0x8>
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	7fc00000 	.word	0x7fc00000

080089a4 <quorem>:
 80089a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	6903      	ldr	r3, [r0, #16]
 80089aa:	690c      	ldr	r4, [r1, #16]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	4607      	mov	r7, r0
 80089b0:	db7e      	blt.n	8008ab0 <quorem+0x10c>
 80089b2:	3c01      	subs	r4, #1
 80089b4:	f101 0814 	add.w	r8, r1, #20
 80089b8:	f100 0514 	add.w	r5, r0, #20
 80089bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ca:	3301      	adds	r3, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80089da:	d331      	bcc.n	8008a40 <quorem+0x9c>
 80089dc:	f04f 0e00 	mov.w	lr, #0
 80089e0:	4640      	mov	r0, r8
 80089e2:	46ac      	mov	ip, r5
 80089e4:	46f2      	mov	sl, lr
 80089e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ea:	b293      	uxth	r3, r2
 80089ec:	fb06 e303 	mla	r3, r6, r3, lr
 80089f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089f4:	0c1a      	lsrs	r2, r3, #16
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	ebaa 0303 	sub.w	r3, sl, r3
 80089fc:	f8dc a000 	ldr.w	sl, [ip]
 8008a00:	fa13 f38a 	uxtah	r3, r3, sl
 8008a04:	fb06 220e 	mla	r2, r6, lr, r2
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a10:	b292      	uxth	r2, r2
 8008a12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a1e:	4581      	cmp	r9, r0
 8008a20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a24:	f84c 3b04 	str.w	r3, [ip], #4
 8008a28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a2c:	d2db      	bcs.n	80089e6 <quorem+0x42>
 8008a2e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a32:	b92b      	cbnz	r3, 8008a40 <quorem+0x9c>
 8008a34:	9b01      	ldr	r3, [sp, #4]
 8008a36:	3b04      	subs	r3, #4
 8008a38:	429d      	cmp	r5, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	d32c      	bcc.n	8008a98 <quorem+0xf4>
 8008a3e:	613c      	str	r4, [r7, #16]
 8008a40:	4638      	mov	r0, r7
 8008a42:	f001 f9f1 	bl	8009e28 <__mcmp>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	db22      	blt.n	8008a90 <quorem+0xec>
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a54:	f8d1 c000 	ldr.w	ip, [r1]
 8008a58:	b293      	uxth	r3, r2
 8008a5a:	1ac3      	subs	r3, r0, r3
 8008a5c:	0c12      	lsrs	r2, r2, #16
 8008a5e:	fa13 f38c 	uxtah	r3, r3, ip
 8008a62:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a70:	45c1      	cmp	r9, r8
 8008a72:	f841 3b04 	str.w	r3, [r1], #4
 8008a76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a7a:	d2e9      	bcs.n	8008a50 <quorem+0xac>
 8008a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a84:	b922      	cbnz	r2, 8008a90 <quorem+0xec>
 8008a86:	3b04      	subs	r3, #4
 8008a88:	429d      	cmp	r5, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	d30a      	bcc.n	8008aa4 <quorem+0x100>
 8008a8e:	613c      	str	r4, [r7, #16]
 8008a90:	4630      	mov	r0, r6
 8008a92:	b003      	add	sp, #12
 8008a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	3b04      	subs	r3, #4
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d1ce      	bne.n	8008a3e <quorem+0x9a>
 8008aa0:	3c01      	subs	r4, #1
 8008aa2:	e7c9      	b.n	8008a38 <quorem+0x94>
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	3b04      	subs	r3, #4
 8008aa8:	2a00      	cmp	r2, #0
 8008aaa:	d1f0      	bne.n	8008a8e <quorem+0xea>
 8008aac:	3c01      	subs	r4, #1
 8008aae:	e7eb      	b.n	8008a88 <quorem+0xe4>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e7ee      	b.n	8008a92 <quorem+0xee>
 8008ab4:	0000      	movs	r0, r0
	...

08008ab8 <_dtoa_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	ed2d 8b04 	vpush	{d8-d9}
 8008ac0:	69c5      	ldr	r5, [r0, #28]
 8008ac2:	b093      	sub	sp, #76	; 0x4c
 8008ac4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ad0:	9107      	str	r1, [sp, #28]
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ad8:	b975      	cbnz	r5, 8008af8 <_dtoa_r+0x40>
 8008ada:	2010      	movs	r0, #16
 8008adc:	f000 fe2a 	bl	8009734 <malloc>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	61e0      	str	r0, [r4, #28]
 8008ae4:	b920      	cbnz	r0, 8008af0 <_dtoa_r+0x38>
 8008ae6:	4bae      	ldr	r3, [pc, #696]	; (8008da0 <_dtoa_r+0x2e8>)
 8008ae8:	21ef      	movs	r1, #239	; 0xef
 8008aea:	48ae      	ldr	r0, [pc, #696]	; (8008da4 <_dtoa_r+0x2ec>)
 8008aec:	f002 fe3c 	bl	800b768 <__assert_func>
 8008af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008af4:	6005      	str	r5, [r0, #0]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	69e3      	ldr	r3, [r4, #28]
 8008afa:	6819      	ldr	r1, [r3, #0]
 8008afc:	b151      	cbz	r1, 8008b14 <_dtoa_r+0x5c>
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	604a      	str	r2, [r1, #4]
 8008b02:	2301      	movs	r3, #1
 8008b04:	4093      	lsls	r3, r2
 8008b06:	608b      	str	r3, [r1, #8]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 ff07 	bl	800991c <_Bfree>
 8008b0e:	69e3      	ldr	r3, [r4, #28]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	1e3b      	subs	r3, r7, #0
 8008b16:	bfbb      	ittet	lt
 8008b18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b1c:	9303      	strlt	r3, [sp, #12]
 8008b1e:	2300      	movge	r3, #0
 8008b20:	2201      	movlt	r2, #1
 8008b22:	bfac      	ite	ge
 8008b24:	f8c8 3000 	strge.w	r3, [r8]
 8008b28:	f8c8 2000 	strlt.w	r2, [r8]
 8008b2c:	4b9e      	ldr	r3, [pc, #632]	; (8008da8 <_dtoa_r+0x2f0>)
 8008b2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b32:	ea33 0308 	bics.w	r3, r3, r8
 8008b36:	d11b      	bne.n	8008b70 <_dtoa_r+0xb8>
 8008b38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b44:	4333      	orrs	r3, r6
 8008b46:	f000 8593 	beq.w	8009670 <_dtoa_r+0xbb8>
 8008b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b4c:	b963      	cbnz	r3, 8008b68 <_dtoa_r+0xb0>
 8008b4e:	4b97      	ldr	r3, [pc, #604]	; (8008dac <_dtoa_r+0x2f4>)
 8008b50:	e027      	b.n	8008ba2 <_dtoa_r+0xea>
 8008b52:	4b97      	ldr	r3, [pc, #604]	; (8008db0 <_dtoa_r+0x2f8>)
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	9800      	ldr	r0, [sp, #0]
 8008b5e:	b013      	add	sp, #76	; 0x4c
 8008b60:	ecbd 8b04 	vpop	{d8-d9}
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	4b90      	ldr	r3, [pc, #576]	; (8008dac <_dtoa_r+0x2f4>)
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	3303      	adds	r3, #3
 8008b6e:	e7f3      	b.n	8008b58 <_dtoa_r+0xa0>
 8008b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b74:	2200      	movs	r2, #0
 8008b76:	ec51 0b17 	vmov	r0, r1, d7
 8008b7a:	eeb0 8a47 	vmov.f32	s16, s14
 8008b7e:	eef0 8a67 	vmov.f32	s17, s15
 8008b82:	2300      	movs	r3, #0
 8008b84:	f7f7 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b88:	4681      	mov	r9, r0
 8008b8a:	b160      	cbz	r0, 8008ba6 <_dtoa_r+0xee>
 8008b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b8e:	2301      	movs	r3, #1
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 8568 	beq.w	800966a <_dtoa_r+0xbb2>
 8008b9a:	4b86      	ldr	r3, [pc, #536]	; (8008db4 <_dtoa_r+0x2fc>)
 8008b9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	e7da      	b.n	8008b5c <_dtoa_r+0xa4>
 8008ba6:	aa10      	add	r2, sp, #64	; 0x40
 8008ba8:	a911      	add	r1, sp, #68	; 0x44
 8008baa:	4620      	mov	r0, r4
 8008bac:	eeb0 0a48 	vmov.f32	s0, s16
 8008bb0:	eef0 0a68 	vmov.f32	s1, s17
 8008bb4:	f001 fa4e 	bl	800a054 <__d2b>
 8008bb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	d07f      	beq.n	8008cc2 <_dtoa_r+0x20a>
 8008bc2:	ee18 3a90 	vmov	r3, s17
 8008bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008bce:	ec51 0b18 	vmov	r0, r1, d8
 8008bd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008bde:	4619      	mov	r1, r3
 8008be0:	2200      	movs	r2, #0
 8008be2:	4b75      	ldr	r3, [pc, #468]	; (8008db8 <_dtoa_r+0x300>)
 8008be4:	f7f7 fb50 	bl	8000288 <__aeabi_dsub>
 8008be8:	a367      	add	r3, pc, #412	; (adr r3, 8008d88 <_dtoa_r+0x2d0>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 fd03 	bl	80005f8 <__aeabi_dmul>
 8008bf2:	a367      	add	r3, pc, #412	; (adr r3, 8008d90 <_dtoa_r+0x2d8>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	f7f7 fb48 	bl	800028c <__adddf3>
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	4628      	mov	r0, r5
 8008c00:	460f      	mov	r7, r1
 8008c02:	f7f7 fc8f 	bl	8000524 <__aeabi_i2d>
 8008c06:	a364      	add	r3, pc, #400	; (adr r3, 8008d98 <_dtoa_r+0x2e0>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fcf4 	bl	80005f8 <__aeabi_dmul>
 8008c10:	4602      	mov	r2, r0
 8008c12:	460b      	mov	r3, r1
 8008c14:	4630      	mov	r0, r6
 8008c16:	4639      	mov	r1, r7
 8008c18:	f7f7 fb38 	bl	800028c <__adddf3>
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	460f      	mov	r7, r1
 8008c20:	f7f7 ff9a 	bl	8000b58 <__aeabi_d2iz>
 8008c24:	2200      	movs	r2, #0
 8008c26:	4683      	mov	fp, r0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 ff55 	bl	8000adc <__aeabi_dcmplt>
 8008c32:	b148      	cbz	r0, 8008c48 <_dtoa_r+0x190>
 8008c34:	4658      	mov	r0, fp
 8008c36:	f7f7 fc75 	bl	8000524 <__aeabi_i2d>
 8008c3a:	4632      	mov	r2, r6
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	f7f7 ff43 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c42:	b908      	cbnz	r0, 8008c48 <_dtoa_r+0x190>
 8008c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c48:	f1bb 0f16 	cmp.w	fp, #22
 8008c4c:	d857      	bhi.n	8008cfe <_dtoa_r+0x246>
 8008c4e:	4b5b      	ldr	r3, [pc, #364]	; (8008dbc <_dtoa_r+0x304>)
 8008c50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	ec51 0b18 	vmov	r0, r1, d8
 8008c5c:	f7f7 ff3e 	bl	8000adc <__aeabi_dcmplt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d04e      	beq.n	8008d02 <_dtoa_r+0x24a>
 8008c64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c68:	2300      	movs	r3, #0
 8008c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8008c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c6e:	1b5b      	subs	r3, r3, r5
 8008c70:	1e5a      	subs	r2, r3, #1
 8008c72:	bf45      	ittet	mi
 8008c74:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c78:	9305      	strmi	r3, [sp, #20]
 8008c7a:	2300      	movpl	r3, #0
 8008c7c:	2300      	movmi	r3, #0
 8008c7e:	9206      	str	r2, [sp, #24]
 8008c80:	bf54      	ite	pl
 8008c82:	9305      	strpl	r3, [sp, #20]
 8008c84:	9306      	strmi	r3, [sp, #24]
 8008c86:	f1bb 0f00 	cmp.w	fp, #0
 8008c8a:	db3c      	blt.n	8008d06 <_dtoa_r+0x24e>
 8008c8c:	9b06      	ldr	r3, [sp, #24]
 8008c8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c92:	445b      	add	r3, fp
 8008c94:	9306      	str	r3, [sp, #24]
 8008c96:	2300      	movs	r3, #0
 8008c98:	9308      	str	r3, [sp, #32]
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	d868      	bhi.n	8008d72 <_dtoa_r+0x2ba>
 8008ca0:	2b05      	cmp	r3, #5
 8008ca2:	bfc4      	itt	gt
 8008ca4:	3b04      	subgt	r3, #4
 8008ca6:	9307      	strgt	r3, [sp, #28]
 8008ca8:	9b07      	ldr	r3, [sp, #28]
 8008caa:	f1a3 0302 	sub.w	r3, r3, #2
 8008cae:	bfcc      	ite	gt
 8008cb0:	2500      	movgt	r5, #0
 8008cb2:	2501      	movle	r5, #1
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	f200 8085 	bhi.w	8008dc4 <_dtoa_r+0x30c>
 8008cba:	e8df f003 	tbb	[pc, r3]
 8008cbe:	3b2e      	.short	0x3b2e
 8008cc0:	5839      	.short	0x5839
 8008cc2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cc6:	441d      	add	r5, r3
 8008cc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	bfc1      	itttt	gt
 8008cd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cd4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008cd8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008cdc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ce0:	bfd6      	itet	le
 8008ce2:	f1c3 0320 	rsble	r3, r3, #32
 8008ce6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cea:	fa06 f003 	lslle.w	r0, r6, r3
 8008cee:	f7f7 fc09 	bl	8000504 <__aeabi_ui2d>
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008cf8:	3d01      	subs	r5, #1
 8008cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8008cfc:	e76f      	b.n	8008bde <_dtoa_r+0x126>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e7b3      	b.n	8008c6a <_dtoa_r+0x1b2>
 8008d02:	900c      	str	r0, [sp, #48]	; 0x30
 8008d04:	e7b2      	b.n	8008c6c <_dtoa_r+0x1b4>
 8008d06:	9b05      	ldr	r3, [sp, #20]
 8008d08:	eba3 030b 	sub.w	r3, r3, fp
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	f1cb 0300 	rsb	r3, fp, #0
 8008d12:	9308      	str	r3, [sp, #32]
 8008d14:	2300      	movs	r3, #0
 8008d16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d18:	e7bf      	b.n	8008c9a <_dtoa_r+0x1e2>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc52      	bgt.n	8008dca <_dtoa_r+0x312>
 8008d24:	2301      	movs	r3, #1
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d2e:	e00b      	b.n	8008d48 <_dtoa_r+0x290>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e7f3      	b.n	8008d1c <_dtoa_r+0x264>
 8008d34:	2300      	movs	r3, #0
 8008d36:	9309      	str	r3, [sp, #36]	; 0x24
 8008d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d3a:	445b      	add	r3, fp
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	9304      	str	r3, [sp, #16]
 8008d44:	bfb8      	it	lt
 8008d46:	2301      	movlt	r3, #1
 8008d48:	69e0      	ldr	r0, [r4, #28]
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	f102 0614 	add.w	r6, r2, #20
 8008d52:	429e      	cmp	r6, r3
 8008d54:	d93d      	bls.n	8008dd2 <_dtoa_r+0x31a>
 8008d56:	6041      	str	r1, [r0, #4]
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fd9f 	bl	800989c <_Balloc>
 8008d5e:	9000      	str	r0, [sp, #0]
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d139      	bne.n	8008dd8 <_dtoa_r+0x320>
 8008d64:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <_dtoa_r+0x308>)
 8008d66:	4602      	mov	r2, r0
 8008d68:	f240 11af 	movw	r1, #431	; 0x1af
 8008d6c:	e6bd      	b.n	8008aea <_dtoa_r+0x32>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e7e1      	b.n	8008d36 <_dtoa_r+0x27e>
 8008d72:	2501      	movs	r5, #1
 8008d74:	2300      	movs	r3, #0
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	9509      	str	r5, [sp, #36]	; 0x24
 8008d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	2200      	movs	r2, #0
 8008d84:	2312      	movs	r3, #18
 8008d86:	e7d1      	b.n	8008d2c <_dtoa_r+0x274>
 8008d88:	636f4361 	.word	0x636f4361
 8008d8c:	3fd287a7 	.word	0x3fd287a7
 8008d90:	8b60c8b3 	.word	0x8b60c8b3
 8008d94:	3fc68a28 	.word	0x3fc68a28
 8008d98:	509f79fb 	.word	0x509f79fb
 8008d9c:	3fd34413 	.word	0x3fd34413
 8008da0:	0800cb76 	.word	0x0800cb76
 8008da4:	0800cb8d 	.word	0x0800cb8d
 8008da8:	7ff00000 	.word	0x7ff00000
 8008dac:	0800cb72 	.word	0x0800cb72
 8008db0:	0800cb69 	.word	0x0800cb69
 8008db4:	0800cb41 	.word	0x0800cb41
 8008db8:	3ff80000 	.word	0x3ff80000
 8008dbc:	0800cc78 	.word	0x0800cc78
 8008dc0:	0800cbe5 	.word	0x0800cbe5
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc8:	e7d7      	b.n	8008d7a <_dtoa_r+0x2c2>
 8008dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	e7ba      	b.n	8008d48 <_dtoa_r+0x290>
 8008dd2:	3101      	adds	r1, #1
 8008dd4:	0052      	lsls	r2, r2, #1
 8008dd6:	e7ba      	b.n	8008d4e <_dtoa_r+0x296>
 8008dd8:	69e3      	ldr	r3, [r4, #28]
 8008dda:	9a00      	ldr	r2, [sp, #0]
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	2b0e      	cmp	r3, #14
 8008de2:	f200 80a8 	bhi.w	8008f36 <_dtoa_r+0x47e>
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	f000 80a5 	beq.w	8008f36 <_dtoa_r+0x47e>
 8008dec:	f1bb 0f00 	cmp.w	fp, #0
 8008df0:	dd38      	ble.n	8008e64 <_dtoa_r+0x3ac>
 8008df2:	4bc0      	ldr	r3, [pc, #768]	; (80090f4 <_dtoa_r+0x63c>)
 8008df4:	f00b 020f 	and.w	r2, fp, #15
 8008df8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e08:	d019      	beq.n	8008e3e <_dtoa_r+0x386>
 8008e0a:	4bbb      	ldr	r3, [pc, #748]	; (80090f8 <_dtoa_r+0x640>)
 8008e0c:	ec51 0b18 	vmov	r0, r1, d8
 8008e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e14:	f7f7 fd1a 	bl	800084c <__aeabi_ddiv>
 8008e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e1c:	f008 080f 	and.w	r8, r8, #15
 8008e20:	2503      	movs	r5, #3
 8008e22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80090f8 <_dtoa_r+0x640>
 8008e26:	f1b8 0f00 	cmp.w	r8, #0
 8008e2a:	d10a      	bne.n	8008e42 <_dtoa_r+0x38a>
 8008e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e30:	4632      	mov	r2, r6
 8008e32:	463b      	mov	r3, r7
 8008e34:	f7f7 fd0a 	bl	800084c <__aeabi_ddiv>
 8008e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e3c:	e02b      	b.n	8008e96 <_dtoa_r+0x3de>
 8008e3e:	2502      	movs	r5, #2
 8008e40:	e7ef      	b.n	8008e22 <_dtoa_r+0x36a>
 8008e42:	f018 0f01 	tst.w	r8, #1
 8008e46:	d008      	beq.n	8008e5a <_dtoa_r+0x3a2>
 8008e48:	4630      	mov	r0, r6
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e50:	f7f7 fbd2 	bl	80005f8 <__aeabi_dmul>
 8008e54:	3501      	adds	r5, #1
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e5e:	f109 0908 	add.w	r9, r9, #8
 8008e62:	e7e0      	b.n	8008e26 <_dtoa_r+0x36e>
 8008e64:	f000 809f 	beq.w	8008fa6 <_dtoa_r+0x4ee>
 8008e68:	f1cb 0600 	rsb	r6, fp, #0
 8008e6c:	4ba1      	ldr	r3, [pc, #644]	; (80090f4 <_dtoa_r+0x63c>)
 8008e6e:	4fa2      	ldr	r7, [pc, #648]	; (80090f8 <_dtoa_r+0x640>)
 8008e70:	f006 020f 	and.w	r2, r6, #15
 8008e74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7c:	ec51 0b18 	vmov	r0, r1, d8
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e88:	1136      	asrs	r6, r6, #4
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2502      	movs	r5, #2
 8008e8e:	2e00      	cmp	r6, #0
 8008e90:	d17e      	bne.n	8008f90 <_dtoa_r+0x4d8>
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1d0      	bne.n	8008e38 <_dtoa_r+0x380>
 8008e96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f000 8084 	beq.w	8008faa <_dtoa_r+0x4f2>
 8008ea2:	4b96      	ldr	r3, [pc, #600]	; (80090fc <_dtoa_r+0x644>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 fe17 	bl	8000adc <__aeabi_dcmplt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d07b      	beq.n	8008faa <_dtoa_r+0x4f2>
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d078      	beq.n	8008faa <_dtoa_r+0x4f2>
 8008eb8:	9b01      	ldr	r3, [sp, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	dd39      	ble.n	8008f32 <_dtoa_r+0x47a>
 8008ebe:	4b90      	ldr	r3, [pc, #576]	; (8009100 <_dtoa_r+0x648>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ece:	9e01      	ldr	r6, [sp, #4]
 8008ed0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7f7 fb22 	bl	8000524 <__aeabi_i2d>
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	f7f7 fb88 	bl	80005f8 <__aeabi_dmul>
 8008ee8:	4b86      	ldr	r3, [pc, #536]	; (8009104 <_dtoa_r+0x64c>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	f7f7 f9ce 	bl	800028c <__adddf3>
 8008ef0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d158      	bne.n	8008fb0 <_dtoa_r+0x4f8>
 8008efe:	4b82      	ldr	r3, [pc, #520]	; (8009108 <_dtoa_r+0x650>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	4640      	mov	r0, r8
 8008f04:	4649      	mov	r1, r9
 8008f06:	f7f7 f9bf 	bl	8000288 <__aeabi_dsub>
 8008f0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4689      	mov	r9, r1
 8008f12:	f7f7 fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f040 8296 	bne.w	8009448 <_dtoa_r+0x990>
 8008f1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f20:	4640      	mov	r0, r8
 8008f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f26:	4649      	mov	r1, r9
 8008f28:	f7f7 fdd8 	bl	8000adc <__aeabi_dcmplt>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f040 8289 	bne.w	8009444 <_dtoa_r+0x98c>
 8008f32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f2c0 814e 	blt.w	80091da <_dtoa_r+0x722>
 8008f3e:	f1bb 0f0e 	cmp.w	fp, #14
 8008f42:	f300 814a 	bgt.w	80091da <_dtoa_r+0x722>
 8008f46:	4b6b      	ldr	r3, [pc, #428]	; (80090f4 <_dtoa_r+0x63c>)
 8008f48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f280 80dc 	bge.w	8009110 <_dtoa_r+0x658>
 8008f58:	9b04      	ldr	r3, [sp, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f300 80d8 	bgt.w	8009110 <_dtoa_r+0x658>
 8008f60:	f040 826f 	bne.w	8009442 <_dtoa_r+0x98a>
 8008f64:	4b68      	ldr	r3, [pc, #416]	; (8009108 <_dtoa_r+0x650>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	f7f7 fb44 	bl	80005f8 <__aeabi_dmul>
 8008f70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f74:	f7f7 fdc6 	bl	8000b04 <__aeabi_dcmpge>
 8008f78:	9e04      	ldr	r6, [sp, #16]
 8008f7a:	4637      	mov	r7, r6
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f040 8245 	bne.w	800940c <_dtoa_r+0x954>
 8008f82:	9d00      	ldr	r5, [sp, #0]
 8008f84:	2331      	movs	r3, #49	; 0x31
 8008f86:	f805 3b01 	strb.w	r3, [r5], #1
 8008f8a:	f10b 0b01 	add.w	fp, fp, #1
 8008f8e:	e241      	b.n	8009414 <_dtoa_r+0x95c>
 8008f90:	07f2      	lsls	r2, r6, #31
 8008f92:	d505      	bpl.n	8008fa0 <_dtoa_r+0x4e8>
 8008f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f98:	f7f7 fb2e 	bl	80005f8 <__aeabi_dmul>
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	1076      	asrs	r6, r6, #1
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	e773      	b.n	8008e8e <_dtoa_r+0x3d6>
 8008fa6:	2502      	movs	r5, #2
 8008fa8:	e775      	b.n	8008e96 <_dtoa_r+0x3de>
 8008faa:	9e04      	ldr	r6, [sp, #16]
 8008fac:	465f      	mov	r7, fp
 8008fae:	e792      	b.n	8008ed6 <_dtoa_r+0x41e>
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	4b50      	ldr	r3, [pc, #320]	; (80090f4 <_dtoa_r+0x63c>)
 8008fb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fb8:	4431      	add	r1, r6
 8008fba:	9102      	str	r1, [sp, #8]
 8008fbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fbe:	eeb0 9a47 	vmov.f32	s18, s14
 8008fc2:	eef0 9a67 	vmov.f32	s19, s15
 8008fc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	d044      	beq.n	800905c <_dtoa_r+0x5a4>
 8008fd2:	494e      	ldr	r1, [pc, #312]	; (800910c <_dtoa_r+0x654>)
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f7 fc39 	bl	800084c <__aeabi_ddiv>
 8008fda:	ec53 2b19 	vmov	r2, r3, d9
 8008fde:	f7f7 f953 	bl	8000288 <__aeabi_dsub>
 8008fe2:	9d00      	ldr	r5, [sp, #0]
 8008fe4:	ec41 0b19 	vmov	d9, r0, r1
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4640      	mov	r0, r8
 8008fec:	f7f7 fdb4 	bl	8000b58 <__aeabi_d2iz>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	f7f7 fa97 	bl	8000524 <__aeabi_i2d>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 f943 	bl	8000288 <__aeabi_dsub>
 8009002:	3630      	adds	r6, #48	; 0x30
 8009004:	f805 6b01 	strb.w	r6, [r5], #1
 8009008:	ec53 2b19 	vmov	r2, r3, d9
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	f7f7 fd64 	bl	8000adc <__aeabi_dcmplt>
 8009014:	2800      	cmp	r0, #0
 8009016:	d164      	bne.n	80090e2 <_dtoa_r+0x62a>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	4937      	ldr	r1, [pc, #220]	; (80090fc <_dtoa_r+0x644>)
 800901e:	2000      	movs	r0, #0
 8009020:	f7f7 f932 	bl	8000288 <__aeabi_dsub>
 8009024:	ec53 2b19 	vmov	r2, r3, d9
 8009028:	f7f7 fd58 	bl	8000adc <__aeabi_dcmplt>
 800902c:	2800      	cmp	r0, #0
 800902e:	f040 80b6 	bne.w	800919e <_dtoa_r+0x6e6>
 8009032:	9b02      	ldr	r3, [sp, #8]
 8009034:	429d      	cmp	r5, r3
 8009036:	f43f af7c 	beq.w	8008f32 <_dtoa_r+0x47a>
 800903a:	4b31      	ldr	r3, [pc, #196]	; (8009100 <_dtoa_r+0x648>)
 800903c:	ec51 0b19 	vmov	r0, r1, d9
 8009040:	2200      	movs	r2, #0
 8009042:	f7f7 fad9 	bl	80005f8 <__aeabi_dmul>
 8009046:	4b2e      	ldr	r3, [pc, #184]	; (8009100 <_dtoa_r+0x648>)
 8009048:	ec41 0b19 	vmov	d9, r0, r1
 800904c:	2200      	movs	r2, #0
 800904e:	4640      	mov	r0, r8
 8009050:	4649      	mov	r1, r9
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	4680      	mov	r8, r0
 8009058:	4689      	mov	r9, r1
 800905a:	e7c5      	b.n	8008fe8 <_dtoa_r+0x530>
 800905c:	ec51 0b17 	vmov	r0, r1, d7
 8009060:	f7f7 faca 	bl	80005f8 <__aeabi_dmul>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	9d00      	ldr	r5, [sp, #0]
 8009068:	930f      	str	r3, [sp, #60]	; 0x3c
 800906a:	ec41 0b19 	vmov	d9, r0, r1
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	4606      	mov	r6, r0
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	3630      	adds	r6, #48	; 0x30
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4640      	mov	r0, r8
 8009084:	4649      	mov	r1, r9
 8009086:	f7f7 f8ff 	bl	8000288 <__aeabi_dsub>
 800908a:	f805 6b01 	strb.w	r6, [r5], #1
 800908e:	9b02      	ldr	r3, [sp, #8]
 8009090:	429d      	cmp	r5, r3
 8009092:	4680      	mov	r8, r0
 8009094:	4689      	mov	r9, r1
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	d124      	bne.n	80090e6 <_dtoa_r+0x62e>
 800909c:	4b1b      	ldr	r3, [pc, #108]	; (800910c <_dtoa_r+0x654>)
 800909e:	ec51 0b19 	vmov	r0, r1, d9
 80090a2:	f7f7 f8f3 	bl	800028c <__adddf3>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d173      	bne.n	800919e <_dtoa_r+0x6e6>
 80090b6:	ec53 2b19 	vmov	r2, r3, d9
 80090ba:	4914      	ldr	r1, [pc, #80]	; (800910c <_dtoa_r+0x654>)
 80090bc:	2000      	movs	r0, #0
 80090be:	f7f7 f8e3 	bl	8000288 <__aeabi_dsub>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4640      	mov	r0, r8
 80090c8:	4649      	mov	r1, r9
 80090ca:	f7f7 fd07 	bl	8000adc <__aeabi_dcmplt>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	f43f af2f 	beq.w	8008f32 <_dtoa_r+0x47a>
 80090d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090d6:	1e6b      	subs	r3, r5, #1
 80090d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80090da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090de:	2b30      	cmp	r3, #48	; 0x30
 80090e0:	d0f8      	beq.n	80090d4 <_dtoa_r+0x61c>
 80090e2:	46bb      	mov	fp, r7
 80090e4:	e04a      	b.n	800917c <_dtoa_r+0x6c4>
 80090e6:	4b06      	ldr	r3, [pc, #24]	; (8009100 <_dtoa_r+0x648>)
 80090e8:	f7f7 fa86 	bl	80005f8 <__aeabi_dmul>
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	e7bd      	b.n	800906e <_dtoa_r+0x5b6>
 80090f2:	bf00      	nop
 80090f4:	0800cc78 	.word	0x0800cc78
 80090f8:	0800cc50 	.word	0x0800cc50
 80090fc:	3ff00000 	.word	0x3ff00000
 8009100:	40240000 	.word	0x40240000
 8009104:	401c0000 	.word	0x401c0000
 8009108:	40140000 	.word	0x40140000
 800910c:	3fe00000 	.word	0x3fe00000
 8009110:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009114:	9d00      	ldr	r5, [sp, #0]
 8009116:	4642      	mov	r2, r8
 8009118:	464b      	mov	r3, r9
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 fb95 	bl	800084c <__aeabi_ddiv>
 8009122:	f7f7 fd19 	bl	8000b58 <__aeabi_d2iz>
 8009126:	9001      	str	r0, [sp, #4]
 8009128:	f7f7 f9fc 	bl	8000524 <__aeabi_i2d>
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	f7f7 fa62 	bl	80005f8 <__aeabi_dmul>
 8009134:	4602      	mov	r2, r0
 8009136:	460b      	mov	r3, r1
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 f8a4 	bl	8000288 <__aeabi_dsub>
 8009140:	9e01      	ldr	r6, [sp, #4]
 8009142:	9f04      	ldr	r7, [sp, #16]
 8009144:	3630      	adds	r6, #48	; 0x30
 8009146:	f805 6b01 	strb.w	r6, [r5], #1
 800914a:	9e00      	ldr	r6, [sp, #0]
 800914c:	1bae      	subs	r6, r5, r6
 800914e:	42b7      	cmp	r7, r6
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	d134      	bne.n	80091c0 <_dtoa_r+0x708>
 8009156:	f7f7 f899 	bl	800028c <__adddf3>
 800915a:	4642      	mov	r2, r8
 800915c:	464b      	mov	r3, r9
 800915e:	4606      	mov	r6, r0
 8009160:	460f      	mov	r7, r1
 8009162:	f7f7 fcd9 	bl	8000b18 <__aeabi_dcmpgt>
 8009166:	b9c8      	cbnz	r0, 800919c <_dtoa_r+0x6e4>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f7 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009174:	b110      	cbz	r0, 800917c <_dtoa_r+0x6c4>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	07db      	lsls	r3, r3, #31
 800917a:	d40f      	bmi.n	800919c <_dtoa_r+0x6e4>
 800917c:	4651      	mov	r1, sl
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fbcc 	bl	800991c <_Bfree>
 8009184:	2300      	movs	r3, #0
 8009186:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009188:	702b      	strb	r3, [r5, #0]
 800918a:	f10b 0301 	add.w	r3, fp, #1
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009192:	2b00      	cmp	r3, #0
 8009194:	f43f ace2 	beq.w	8008b5c <_dtoa_r+0xa4>
 8009198:	601d      	str	r5, [r3, #0]
 800919a:	e4df      	b.n	8008b5c <_dtoa_r+0xa4>
 800919c:	465f      	mov	r7, fp
 800919e:	462b      	mov	r3, r5
 80091a0:	461d      	mov	r5, r3
 80091a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a6:	2a39      	cmp	r2, #57	; 0x39
 80091a8:	d106      	bne.n	80091b8 <_dtoa_r+0x700>
 80091aa:	9a00      	ldr	r2, [sp, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d1f7      	bne.n	80091a0 <_dtoa_r+0x6e8>
 80091b0:	9900      	ldr	r1, [sp, #0]
 80091b2:	2230      	movs	r2, #48	; 0x30
 80091b4:	3701      	adds	r7, #1
 80091b6:	700a      	strb	r2, [r1, #0]
 80091b8:	781a      	ldrb	r2, [r3, #0]
 80091ba:	3201      	adds	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e790      	b.n	80090e2 <_dtoa_r+0x62a>
 80091c0:	4ba3      	ldr	r3, [pc, #652]	; (8009450 <_dtoa_r+0x998>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f7f7 fa18 	bl	80005f8 <__aeabi_dmul>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	4606      	mov	r6, r0
 80091ce:	460f      	mov	r7, r1
 80091d0:	f7f7 fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d09e      	beq.n	8009116 <_dtoa_r+0x65e>
 80091d8:	e7d0      	b.n	800917c <_dtoa_r+0x6c4>
 80091da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091dc:	2a00      	cmp	r2, #0
 80091de:	f000 80ca 	beq.w	8009376 <_dtoa_r+0x8be>
 80091e2:	9a07      	ldr	r2, [sp, #28]
 80091e4:	2a01      	cmp	r2, #1
 80091e6:	f300 80ad 	bgt.w	8009344 <_dtoa_r+0x88c>
 80091ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	f000 80a5 	beq.w	800933c <_dtoa_r+0x884>
 80091f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091f6:	9e08      	ldr	r6, [sp, #32]
 80091f8:	9d05      	ldr	r5, [sp, #20]
 80091fa:	9a05      	ldr	r2, [sp, #20]
 80091fc:	441a      	add	r2, r3
 80091fe:	9205      	str	r2, [sp, #20]
 8009200:	9a06      	ldr	r2, [sp, #24]
 8009202:	2101      	movs	r1, #1
 8009204:	441a      	add	r2, r3
 8009206:	4620      	mov	r0, r4
 8009208:	9206      	str	r2, [sp, #24]
 800920a:	f000 fc87 	bl	8009b1c <__i2b>
 800920e:	4607      	mov	r7, r0
 8009210:	b165      	cbz	r5, 800922c <_dtoa_r+0x774>
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd09      	ble.n	800922c <_dtoa_r+0x774>
 8009218:	42ab      	cmp	r3, r5
 800921a:	9a05      	ldr	r2, [sp, #20]
 800921c:	bfa8      	it	ge
 800921e:	462b      	movge	r3, r5
 8009220:	1ad2      	subs	r2, r2, r3
 8009222:	9205      	str	r2, [sp, #20]
 8009224:	9a06      	ldr	r2, [sp, #24]
 8009226:	1aed      	subs	r5, r5, r3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	9306      	str	r3, [sp, #24]
 800922c:	9b08      	ldr	r3, [sp, #32]
 800922e:	b1f3      	cbz	r3, 800926e <_dtoa_r+0x7b6>
 8009230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 80a3 	beq.w	800937e <_dtoa_r+0x8c6>
 8009238:	2e00      	cmp	r6, #0
 800923a:	dd10      	ble.n	800925e <_dtoa_r+0x7a6>
 800923c:	4639      	mov	r1, r7
 800923e:	4632      	mov	r2, r6
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fd2b 	bl	8009c9c <__pow5mult>
 8009246:	4652      	mov	r2, sl
 8009248:	4601      	mov	r1, r0
 800924a:	4607      	mov	r7, r0
 800924c:	4620      	mov	r0, r4
 800924e:	f000 fc7b 	bl	8009b48 <__multiply>
 8009252:	4651      	mov	r1, sl
 8009254:	4680      	mov	r8, r0
 8009256:	4620      	mov	r0, r4
 8009258:	f000 fb60 	bl	800991c <_Bfree>
 800925c:	46c2      	mov	sl, r8
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	1b9a      	subs	r2, r3, r6
 8009262:	d004      	beq.n	800926e <_dtoa_r+0x7b6>
 8009264:	4651      	mov	r1, sl
 8009266:	4620      	mov	r0, r4
 8009268:	f000 fd18 	bl	8009c9c <__pow5mult>
 800926c:	4682      	mov	sl, r0
 800926e:	2101      	movs	r1, #1
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fc53 	bl	8009b1c <__i2b>
 8009276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	4606      	mov	r6, r0
 800927c:	f340 8081 	ble.w	8009382 <_dtoa_r+0x8ca>
 8009280:	461a      	mov	r2, r3
 8009282:	4601      	mov	r1, r0
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fd09 	bl	8009c9c <__pow5mult>
 800928a:	9b07      	ldr	r3, [sp, #28]
 800928c:	2b01      	cmp	r3, #1
 800928e:	4606      	mov	r6, r0
 8009290:	dd7a      	ble.n	8009388 <_dtoa_r+0x8d0>
 8009292:	f04f 0800 	mov.w	r8, #0
 8009296:	6933      	ldr	r3, [r6, #16]
 8009298:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800929c:	6918      	ldr	r0, [r3, #16]
 800929e:	f000 fbef 	bl	8009a80 <__hi0bits>
 80092a2:	f1c0 0020 	rsb	r0, r0, #32
 80092a6:	9b06      	ldr	r3, [sp, #24]
 80092a8:	4418      	add	r0, r3
 80092aa:	f010 001f 	ands.w	r0, r0, #31
 80092ae:	f000 8094 	beq.w	80093da <_dtoa_r+0x922>
 80092b2:	f1c0 0320 	rsb	r3, r0, #32
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	f340 8085 	ble.w	80093c6 <_dtoa_r+0x90e>
 80092bc:	9b05      	ldr	r3, [sp, #20]
 80092be:	f1c0 001c 	rsb	r0, r0, #28
 80092c2:	4403      	add	r3, r0
 80092c4:	9305      	str	r3, [sp, #20]
 80092c6:	9b06      	ldr	r3, [sp, #24]
 80092c8:	4403      	add	r3, r0
 80092ca:	4405      	add	r5, r0
 80092cc:	9306      	str	r3, [sp, #24]
 80092ce:	9b05      	ldr	r3, [sp, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	dd05      	ble.n	80092e0 <_dtoa_r+0x828>
 80092d4:	4651      	mov	r1, sl
 80092d6:	461a      	mov	r2, r3
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fd39 	bl	8009d50 <__lshift>
 80092de:	4682      	mov	sl, r0
 80092e0:	9b06      	ldr	r3, [sp, #24]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dd05      	ble.n	80092f2 <_dtoa_r+0x83a>
 80092e6:	4631      	mov	r1, r6
 80092e8:	461a      	mov	r2, r3
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fd30 	bl	8009d50 <__lshift>
 80092f0:	4606      	mov	r6, r0
 80092f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d072      	beq.n	80093de <_dtoa_r+0x926>
 80092f8:	4631      	mov	r1, r6
 80092fa:	4650      	mov	r0, sl
 80092fc:	f000 fd94 	bl	8009e28 <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	da6c      	bge.n	80093de <_dtoa_r+0x926>
 8009304:	2300      	movs	r3, #0
 8009306:	4651      	mov	r1, sl
 8009308:	220a      	movs	r2, #10
 800930a:	4620      	mov	r0, r4
 800930c:	f000 fb28 	bl	8009960 <__multadd>
 8009310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009312:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009316:	4682      	mov	sl, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 81b0 	beq.w	800967e <_dtoa_r+0xbc6>
 800931e:	2300      	movs	r3, #0
 8009320:	4639      	mov	r1, r7
 8009322:	220a      	movs	r2, #10
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fb1b 	bl	8009960 <__multadd>
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	4607      	mov	r7, r0
 8009330:	f300 8096 	bgt.w	8009460 <_dtoa_r+0x9a8>
 8009334:	9b07      	ldr	r3, [sp, #28]
 8009336:	2b02      	cmp	r3, #2
 8009338:	dc59      	bgt.n	80093ee <_dtoa_r+0x936>
 800933a:	e091      	b.n	8009460 <_dtoa_r+0x9a8>
 800933c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800933e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009342:	e758      	b.n	80091f6 <_dtoa_r+0x73e>
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	1e5e      	subs	r6, r3, #1
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	42b3      	cmp	r3, r6
 800934c:	bfbf      	itttt	lt
 800934e:	9b08      	ldrlt	r3, [sp, #32]
 8009350:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009352:	9608      	strlt	r6, [sp, #32]
 8009354:	1af3      	sublt	r3, r6, r3
 8009356:	bfb4      	ite	lt
 8009358:	18d2      	addlt	r2, r2, r3
 800935a:	1b9e      	subge	r6, r3, r6
 800935c:	9b04      	ldr	r3, [sp, #16]
 800935e:	bfbc      	itt	lt
 8009360:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009362:	2600      	movlt	r6, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfb7      	itett	lt
 8009368:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800936c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009370:	1a9d      	sublt	r5, r3, r2
 8009372:	2300      	movlt	r3, #0
 8009374:	e741      	b.n	80091fa <_dtoa_r+0x742>
 8009376:	9e08      	ldr	r6, [sp, #32]
 8009378:	9d05      	ldr	r5, [sp, #20]
 800937a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800937c:	e748      	b.n	8009210 <_dtoa_r+0x758>
 800937e:	9a08      	ldr	r2, [sp, #32]
 8009380:	e770      	b.n	8009264 <_dtoa_r+0x7ac>
 8009382:	9b07      	ldr	r3, [sp, #28]
 8009384:	2b01      	cmp	r3, #1
 8009386:	dc19      	bgt.n	80093bc <_dtoa_r+0x904>
 8009388:	9b02      	ldr	r3, [sp, #8]
 800938a:	b9bb      	cbnz	r3, 80093bc <_dtoa_r+0x904>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009392:	b99b      	cbnz	r3, 80093bc <_dtoa_r+0x904>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800939a:	0d1b      	lsrs	r3, r3, #20
 800939c:	051b      	lsls	r3, r3, #20
 800939e:	b183      	cbz	r3, 80093c2 <_dtoa_r+0x90a>
 80093a0:	9b05      	ldr	r3, [sp, #20]
 80093a2:	3301      	adds	r3, #1
 80093a4:	9305      	str	r3, [sp, #20]
 80093a6:	9b06      	ldr	r3, [sp, #24]
 80093a8:	3301      	adds	r3, #1
 80093aa:	9306      	str	r3, [sp, #24]
 80093ac:	f04f 0801 	mov.w	r8, #1
 80093b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f47f af6f 	bne.w	8009296 <_dtoa_r+0x7de>
 80093b8:	2001      	movs	r0, #1
 80093ba:	e774      	b.n	80092a6 <_dtoa_r+0x7ee>
 80093bc:	f04f 0800 	mov.w	r8, #0
 80093c0:	e7f6      	b.n	80093b0 <_dtoa_r+0x8f8>
 80093c2:	4698      	mov	r8, r3
 80093c4:	e7f4      	b.n	80093b0 <_dtoa_r+0x8f8>
 80093c6:	d082      	beq.n	80092ce <_dtoa_r+0x816>
 80093c8:	9a05      	ldr	r2, [sp, #20]
 80093ca:	331c      	adds	r3, #28
 80093cc:	441a      	add	r2, r3
 80093ce:	9205      	str	r2, [sp, #20]
 80093d0:	9a06      	ldr	r2, [sp, #24]
 80093d2:	441a      	add	r2, r3
 80093d4:	441d      	add	r5, r3
 80093d6:	9206      	str	r2, [sp, #24]
 80093d8:	e779      	b.n	80092ce <_dtoa_r+0x816>
 80093da:	4603      	mov	r3, r0
 80093dc:	e7f4      	b.n	80093c8 <_dtoa_r+0x910>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dc37      	bgt.n	8009454 <_dtoa_r+0x99c>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	dd34      	ble.n	8009454 <_dtoa_r+0x99c>
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	b963      	cbnz	r3, 800940c <_dtoa_r+0x954>
 80093f2:	4631      	mov	r1, r6
 80093f4:	2205      	movs	r2, #5
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 fab2 	bl	8009960 <__multadd>
 80093fc:	4601      	mov	r1, r0
 80093fe:	4606      	mov	r6, r0
 8009400:	4650      	mov	r0, sl
 8009402:	f000 fd11 	bl	8009e28 <__mcmp>
 8009406:	2800      	cmp	r0, #0
 8009408:	f73f adbb 	bgt.w	8008f82 <_dtoa_r+0x4ca>
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	9d00      	ldr	r5, [sp, #0]
 8009410:	ea6f 0b03 	mvn.w	fp, r3
 8009414:	f04f 0800 	mov.w	r8, #0
 8009418:	4631      	mov	r1, r6
 800941a:	4620      	mov	r0, r4
 800941c:	f000 fa7e 	bl	800991c <_Bfree>
 8009420:	2f00      	cmp	r7, #0
 8009422:	f43f aeab 	beq.w	800917c <_dtoa_r+0x6c4>
 8009426:	f1b8 0f00 	cmp.w	r8, #0
 800942a:	d005      	beq.n	8009438 <_dtoa_r+0x980>
 800942c:	45b8      	cmp	r8, r7
 800942e:	d003      	beq.n	8009438 <_dtoa_r+0x980>
 8009430:	4641      	mov	r1, r8
 8009432:	4620      	mov	r0, r4
 8009434:	f000 fa72 	bl	800991c <_Bfree>
 8009438:	4639      	mov	r1, r7
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fa6e 	bl	800991c <_Bfree>
 8009440:	e69c      	b.n	800917c <_dtoa_r+0x6c4>
 8009442:	2600      	movs	r6, #0
 8009444:	4637      	mov	r7, r6
 8009446:	e7e1      	b.n	800940c <_dtoa_r+0x954>
 8009448:	46bb      	mov	fp, r7
 800944a:	4637      	mov	r7, r6
 800944c:	e599      	b.n	8008f82 <_dtoa_r+0x4ca>
 800944e:	bf00      	nop
 8009450:	40240000 	.word	0x40240000
 8009454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 80c8 	beq.w	80095ec <_dtoa_r+0xb34>
 800945c:	9b04      	ldr	r3, [sp, #16]
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	2d00      	cmp	r5, #0
 8009462:	dd05      	ble.n	8009470 <_dtoa_r+0x9b8>
 8009464:	4639      	mov	r1, r7
 8009466:	462a      	mov	r2, r5
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fc71 	bl	8009d50 <__lshift>
 800946e:	4607      	mov	r7, r0
 8009470:	f1b8 0f00 	cmp.w	r8, #0
 8009474:	d05b      	beq.n	800952e <_dtoa_r+0xa76>
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fa0f 	bl	800989c <_Balloc>
 800947e:	4605      	mov	r5, r0
 8009480:	b928      	cbnz	r0, 800948e <_dtoa_r+0x9d6>
 8009482:	4b83      	ldr	r3, [pc, #524]	; (8009690 <_dtoa_r+0xbd8>)
 8009484:	4602      	mov	r2, r0
 8009486:	f240 21ef 	movw	r1, #751	; 0x2ef
 800948a:	f7ff bb2e 	b.w	8008aea <_dtoa_r+0x32>
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	3202      	adds	r2, #2
 8009492:	0092      	lsls	r2, r2, #2
 8009494:	f107 010c 	add.w	r1, r7, #12
 8009498:	300c      	adds	r0, #12
 800949a:	f002 f94d 	bl	800b738 <memcpy>
 800949e:	2201      	movs	r2, #1
 80094a0:	4629      	mov	r1, r5
 80094a2:	4620      	mov	r0, r4
 80094a4:	f000 fc54 	bl	8009d50 <__lshift>
 80094a8:	9b00      	ldr	r3, [sp, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	9304      	str	r3, [sp, #16]
 80094ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094b2:	4413      	add	r3, r2
 80094b4:	9308      	str	r3, [sp, #32]
 80094b6:	9b02      	ldr	r3, [sp, #8]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	46b8      	mov	r8, r7
 80094be:	9306      	str	r3, [sp, #24]
 80094c0:	4607      	mov	r7, r0
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	4631      	mov	r1, r6
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4650      	mov	r0, sl
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	f7ff fa6a 	bl	80089a4 <quorem>
 80094d0:	4641      	mov	r1, r8
 80094d2:	9002      	str	r0, [sp, #8]
 80094d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094d8:	4650      	mov	r0, sl
 80094da:	f000 fca5 	bl	8009e28 <__mcmp>
 80094de:	463a      	mov	r2, r7
 80094e0:	9005      	str	r0, [sp, #20]
 80094e2:	4631      	mov	r1, r6
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fcbb 	bl	8009e60 <__mdiff>
 80094ea:	68c2      	ldr	r2, [r0, #12]
 80094ec:	4605      	mov	r5, r0
 80094ee:	bb02      	cbnz	r2, 8009532 <_dtoa_r+0xa7a>
 80094f0:	4601      	mov	r1, r0
 80094f2:	4650      	mov	r0, sl
 80094f4:	f000 fc98 	bl	8009e28 <__mcmp>
 80094f8:	4602      	mov	r2, r0
 80094fa:	4629      	mov	r1, r5
 80094fc:	4620      	mov	r0, r4
 80094fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009500:	f000 fa0c 	bl	800991c <_Bfree>
 8009504:	9b07      	ldr	r3, [sp, #28]
 8009506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009508:	9d04      	ldr	r5, [sp, #16]
 800950a:	ea43 0102 	orr.w	r1, r3, r2
 800950e:	9b06      	ldr	r3, [sp, #24]
 8009510:	4319      	orrs	r1, r3
 8009512:	d110      	bne.n	8009536 <_dtoa_r+0xa7e>
 8009514:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009518:	d029      	beq.n	800956e <_dtoa_r+0xab6>
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd02      	ble.n	8009526 <_dtoa_r+0xa6e>
 8009520:	9b02      	ldr	r3, [sp, #8]
 8009522:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	f883 9000 	strb.w	r9, [r3]
 800952c:	e774      	b.n	8009418 <_dtoa_r+0x960>
 800952e:	4638      	mov	r0, r7
 8009530:	e7ba      	b.n	80094a8 <_dtoa_r+0x9f0>
 8009532:	2201      	movs	r2, #1
 8009534:	e7e1      	b.n	80094fa <_dtoa_r+0xa42>
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	db04      	blt.n	8009546 <_dtoa_r+0xa8e>
 800953c:	9907      	ldr	r1, [sp, #28]
 800953e:	430b      	orrs	r3, r1
 8009540:	9906      	ldr	r1, [sp, #24]
 8009542:	430b      	orrs	r3, r1
 8009544:	d120      	bne.n	8009588 <_dtoa_r+0xad0>
 8009546:	2a00      	cmp	r2, #0
 8009548:	dded      	ble.n	8009526 <_dtoa_r+0xa6e>
 800954a:	4651      	mov	r1, sl
 800954c:	2201      	movs	r2, #1
 800954e:	4620      	mov	r0, r4
 8009550:	f000 fbfe 	bl	8009d50 <__lshift>
 8009554:	4631      	mov	r1, r6
 8009556:	4682      	mov	sl, r0
 8009558:	f000 fc66 	bl	8009e28 <__mcmp>
 800955c:	2800      	cmp	r0, #0
 800955e:	dc03      	bgt.n	8009568 <_dtoa_r+0xab0>
 8009560:	d1e1      	bne.n	8009526 <_dtoa_r+0xa6e>
 8009562:	f019 0f01 	tst.w	r9, #1
 8009566:	d0de      	beq.n	8009526 <_dtoa_r+0xa6e>
 8009568:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800956c:	d1d8      	bne.n	8009520 <_dtoa_r+0xa68>
 800956e:	9a01      	ldr	r2, [sp, #4]
 8009570:	2339      	movs	r3, #57	; 0x39
 8009572:	7013      	strb	r3, [r2, #0]
 8009574:	462b      	mov	r3, r5
 8009576:	461d      	mov	r5, r3
 8009578:	3b01      	subs	r3, #1
 800957a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800957e:	2a39      	cmp	r2, #57	; 0x39
 8009580:	d06c      	beq.n	800965c <_dtoa_r+0xba4>
 8009582:	3201      	adds	r2, #1
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e747      	b.n	8009418 <_dtoa_r+0x960>
 8009588:	2a00      	cmp	r2, #0
 800958a:	dd07      	ble.n	800959c <_dtoa_r+0xae4>
 800958c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009590:	d0ed      	beq.n	800956e <_dtoa_r+0xab6>
 8009592:	9a01      	ldr	r2, [sp, #4]
 8009594:	f109 0301 	add.w	r3, r9, #1
 8009598:	7013      	strb	r3, [r2, #0]
 800959a:	e73d      	b.n	8009418 <_dtoa_r+0x960>
 800959c:	9b04      	ldr	r3, [sp, #16]
 800959e:	9a08      	ldr	r2, [sp, #32]
 80095a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d043      	beq.n	8009630 <_dtoa_r+0xb78>
 80095a8:	4651      	mov	r1, sl
 80095aa:	2300      	movs	r3, #0
 80095ac:	220a      	movs	r2, #10
 80095ae:	4620      	mov	r0, r4
 80095b0:	f000 f9d6 	bl	8009960 <__multadd>
 80095b4:	45b8      	cmp	r8, r7
 80095b6:	4682      	mov	sl, r0
 80095b8:	f04f 0300 	mov.w	r3, #0
 80095bc:	f04f 020a 	mov.w	r2, #10
 80095c0:	4641      	mov	r1, r8
 80095c2:	4620      	mov	r0, r4
 80095c4:	d107      	bne.n	80095d6 <_dtoa_r+0xb1e>
 80095c6:	f000 f9cb 	bl	8009960 <__multadd>
 80095ca:	4680      	mov	r8, r0
 80095cc:	4607      	mov	r7, r0
 80095ce:	9b04      	ldr	r3, [sp, #16]
 80095d0:	3301      	adds	r3, #1
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	e775      	b.n	80094c2 <_dtoa_r+0xa0a>
 80095d6:	f000 f9c3 	bl	8009960 <__multadd>
 80095da:	4639      	mov	r1, r7
 80095dc:	4680      	mov	r8, r0
 80095de:	2300      	movs	r3, #0
 80095e0:	220a      	movs	r2, #10
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 f9bc 	bl	8009960 <__multadd>
 80095e8:	4607      	mov	r7, r0
 80095ea:	e7f0      	b.n	80095ce <_dtoa_r+0xb16>
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	9301      	str	r3, [sp, #4]
 80095f0:	9d00      	ldr	r5, [sp, #0]
 80095f2:	4631      	mov	r1, r6
 80095f4:	4650      	mov	r0, sl
 80095f6:	f7ff f9d5 	bl	80089a4 <quorem>
 80095fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	f805 9b01 	strb.w	r9, [r5], #1
 8009604:	1aea      	subs	r2, r5, r3
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	4293      	cmp	r3, r2
 800960a:	dd07      	ble.n	800961c <_dtoa_r+0xb64>
 800960c:	4651      	mov	r1, sl
 800960e:	2300      	movs	r3, #0
 8009610:	220a      	movs	r2, #10
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f9a4 	bl	8009960 <__multadd>
 8009618:	4682      	mov	sl, r0
 800961a:	e7ea      	b.n	80095f2 <_dtoa_r+0xb3a>
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	bfc8      	it	gt
 8009622:	461d      	movgt	r5, r3
 8009624:	9b00      	ldr	r3, [sp, #0]
 8009626:	bfd8      	it	le
 8009628:	2501      	movle	r5, #1
 800962a:	441d      	add	r5, r3
 800962c:	f04f 0800 	mov.w	r8, #0
 8009630:	4651      	mov	r1, sl
 8009632:	2201      	movs	r2, #1
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fb8b 	bl	8009d50 <__lshift>
 800963a:	4631      	mov	r1, r6
 800963c:	4682      	mov	sl, r0
 800963e:	f000 fbf3 	bl	8009e28 <__mcmp>
 8009642:	2800      	cmp	r0, #0
 8009644:	dc96      	bgt.n	8009574 <_dtoa_r+0xabc>
 8009646:	d102      	bne.n	800964e <_dtoa_r+0xb96>
 8009648:	f019 0f01 	tst.w	r9, #1
 800964c:	d192      	bne.n	8009574 <_dtoa_r+0xabc>
 800964e:	462b      	mov	r3, r5
 8009650:	461d      	mov	r5, r3
 8009652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009656:	2a30      	cmp	r2, #48	; 0x30
 8009658:	d0fa      	beq.n	8009650 <_dtoa_r+0xb98>
 800965a:	e6dd      	b.n	8009418 <_dtoa_r+0x960>
 800965c:	9a00      	ldr	r2, [sp, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d189      	bne.n	8009576 <_dtoa_r+0xabe>
 8009662:	f10b 0b01 	add.w	fp, fp, #1
 8009666:	2331      	movs	r3, #49	; 0x31
 8009668:	e796      	b.n	8009598 <_dtoa_r+0xae0>
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <_dtoa_r+0xbdc>)
 800966c:	f7ff ba99 	b.w	8008ba2 <_dtoa_r+0xea>
 8009670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009672:	2b00      	cmp	r3, #0
 8009674:	f47f aa6d 	bne.w	8008b52 <_dtoa_r+0x9a>
 8009678:	4b07      	ldr	r3, [pc, #28]	; (8009698 <_dtoa_r+0xbe0>)
 800967a:	f7ff ba92 	b.w	8008ba2 <_dtoa_r+0xea>
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	dcb5      	bgt.n	80095f0 <_dtoa_r+0xb38>
 8009684:	9b07      	ldr	r3, [sp, #28]
 8009686:	2b02      	cmp	r3, #2
 8009688:	f73f aeb1 	bgt.w	80093ee <_dtoa_r+0x936>
 800968c:	e7b0      	b.n	80095f0 <_dtoa_r+0xb38>
 800968e:	bf00      	nop
 8009690:	0800cbe5 	.word	0x0800cbe5
 8009694:	0800cb40 	.word	0x0800cb40
 8009698:	0800cb69 	.word	0x0800cb69

0800969c <_free_r>:
 800969c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800969e:	2900      	cmp	r1, #0
 80096a0:	d044      	beq.n	800972c <_free_r+0x90>
 80096a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a6:	9001      	str	r0, [sp, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f1a1 0404 	sub.w	r4, r1, #4
 80096ae:	bfb8      	it	lt
 80096b0:	18e4      	addlt	r4, r4, r3
 80096b2:	f000 f8e7 	bl	8009884 <__malloc_lock>
 80096b6:	4a1e      	ldr	r2, [pc, #120]	; (8009730 <_free_r+0x94>)
 80096b8:	9801      	ldr	r0, [sp, #4]
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	b933      	cbnz	r3, 80096cc <_free_r+0x30>
 80096be:	6063      	str	r3, [r4, #4]
 80096c0:	6014      	str	r4, [r2, #0]
 80096c2:	b003      	add	sp, #12
 80096c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096c8:	f000 b8e2 	b.w	8009890 <__malloc_unlock>
 80096cc:	42a3      	cmp	r3, r4
 80096ce:	d908      	bls.n	80096e2 <_free_r+0x46>
 80096d0:	6825      	ldr	r5, [r4, #0]
 80096d2:	1961      	adds	r1, r4, r5
 80096d4:	428b      	cmp	r3, r1
 80096d6:	bf01      	itttt	eq
 80096d8:	6819      	ldreq	r1, [r3, #0]
 80096da:	685b      	ldreq	r3, [r3, #4]
 80096dc:	1949      	addeq	r1, r1, r5
 80096de:	6021      	streq	r1, [r4, #0]
 80096e0:	e7ed      	b.n	80096be <_free_r+0x22>
 80096e2:	461a      	mov	r2, r3
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	b10b      	cbz	r3, 80096ec <_free_r+0x50>
 80096e8:	42a3      	cmp	r3, r4
 80096ea:	d9fa      	bls.n	80096e2 <_free_r+0x46>
 80096ec:	6811      	ldr	r1, [r2, #0]
 80096ee:	1855      	adds	r5, r2, r1
 80096f0:	42a5      	cmp	r5, r4
 80096f2:	d10b      	bne.n	800970c <_free_r+0x70>
 80096f4:	6824      	ldr	r4, [r4, #0]
 80096f6:	4421      	add	r1, r4
 80096f8:	1854      	adds	r4, r2, r1
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	d1e0      	bne.n	80096c2 <_free_r+0x26>
 8009700:	681c      	ldr	r4, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	6053      	str	r3, [r2, #4]
 8009706:	440c      	add	r4, r1
 8009708:	6014      	str	r4, [r2, #0]
 800970a:	e7da      	b.n	80096c2 <_free_r+0x26>
 800970c:	d902      	bls.n	8009714 <_free_r+0x78>
 800970e:	230c      	movs	r3, #12
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e7d6      	b.n	80096c2 <_free_r+0x26>
 8009714:	6825      	ldr	r5, [r4, #0]
 8009716:	1961      	adds	r1, r4, r5
 8009718:	428b      	cmp	r3, r1
 800971a:	bf04      	itt	eq
 800971c:	6819      	ldreq	r1, [r3, #0]
 800971e:	685b      	ldreq	r3, [r3, #4]
 8009720:	6063      	str	r3, [r4, #4]
 8009722:	bf04      	itt	eq
 8009724:	1949      	addeq	r1, r1, r5
 8009726:	6021      	streq	r1, [r4, #0]
 8009728:	6054      	str	r4, [r2, #4]
 800972a:	e7ca      	b.n	80096c2 <_free_r+0x26>
 800972c:	b003      	add	sp, #12
 800972e:	bd30      	pop	{r4, r5, pc}
 8009730:	200004fc 	.word	0x200004fc

08009734 <malloc>:
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <malloc+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f000 b823 	b.w	8009784 <_malloc_r>
 800973e:	bf00      	nop
 8009740:	20000064 	.word	0x20000064

08009744 <sbrk_aligned>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	4e0e      	ldr	r6, [pc, #56]	; (8009780 <sbrk_aligned+0x3c>)
 8009748:	460c      	mov	r4, r1
 800974a:	6831      	ldr	r1, [r6, #0]
 800974c:	4605      	mov	r5, r0
 800974e:	b911      	cbnz	r1, 8009756 <sbrk_aligned+0x12>
 8009750:	f001 ffe2 	bl	800b718 <_sbrk_r>
 8009754:	6030      	str	r0, [r6, #0]
 8009756:	4621      	mov	r1, r4
 8009758:	4628      	mov	r0, r5
 800975a:	f001 ffdd 	bl	800b718 <_sbrk_r>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d00a      	beq.n	8009778 <sbrk_aligned+0x34>
 8009762:	1cc4      	adds	r4, r0, #3
 8009764:	f024 0403 	bic.w	r4, r4, #3
 8009768:	42a0      	cmp	r0, r4
 800976a:	d007      	beq.n	800977c <sbrk_aligned+0x38>
 800976c:	1a21      	subs	r1, r4, r0
 800976e:	4628      	mov	r0, r5
 8009770:	f001 ffd2 	bl	800b718 <_sbrk_r>
 8009774:	3001      	adds	r0, #1
 8009776:	d101      	bne.n	800977c <sbrk_aligned+0x38>
 8009778:	f04f 34ff 	mov.w	r4, #4294967295
 800977c:	4620      	mov	r0, r4
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	20000500 	.word	0x20000500

08009784 <_malloc_r>:
 8009784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009788:	1ccd      	adds	r5, r1, #3
 800978a:	f025 0503 	bic.w	r5, r5, #3
 800978e:	3508      	adds	r5, #8
 8009790:	2d0c      	cmp	r5, #12
 8009792:	bf38      	it	cc
 8009794:	250c      	movcc	r5, #12
 8009796:	2d00      	cmp	r5, #0
 8009798:	4607      	mov	r7, r0
 800979a:	db01      	blt.n	80097a0 <_malloc_r+0x1c>
 800979c:	42a9      	cmp	r1, r5
 800979e:	d905      	bls.n	80097ac <_malloc_r+0x28>
 80097a0:	230c      	movs	r3, #12
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	2600      	movs	r6, #0
 80097a6:	4630      	mov	r0, r6
 80097a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009880 <_malloc_r+0xfc>
 80097b0:	f000 f868 	bl	8009884 <__malloc_lock>
 80097b4:	f8d8 3000 	ldr.w	r3, [r8]
 80097b8:	461c      	mov	r4, r3
 80097ba:	bb5c      	cbnz	r4, 8009814 <_malloc_r+0x90>
 80097bc:	4629      	mov	r1, r5
 80097be:	4638      	mov	r0, r7
 80097c0:	f7ff ffc0 	bl	8009744 <sbrk_aligned>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	4604      	mov	r4, r0
 80097c8:	d155      	bne.n	8009876 <_malloc_r+0xf2>
 80097ca:	f8d8 4000 	ldr.w	r4, [r8]
 80097ce:	4626      	mov	r6, r4
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	d145      	bne.n	8009860 <_malloc_r+0xdc>
 80097d4:	2c00      	cmp	r4, #0
 80097d6:	d048      	beq.n	800986a <_malloc_r+0xe6>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	4631      	mov	r1, r6
 80097dc:	4638      	mov	r0, r7
 80097de:	eb04 0903 	add.w	r9, r4, r3
 80097e2:	f001 ff99 	bl	800b718 <_sbrk_r>
 80097e6:	4581      	cmp	r9, r0
 80097e8:	d13f      	bne.n	800986a <_malloc_r+0xe6>
 80097ea:	6821      	ldr	r1, [r4, #0]
 80097ec:	1a6d      	subs	r5, r5, r1
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ffa7 	bl	8009744 <sbrk_aligned>
 80097f6:	3001      	adds	r0, #1
 80097f8:	d037      	beq.n	800986a <_malloc_r+0xe6>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	442b      	add	r3, r5
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	f8d8 3000 	ldr.w	r3, [r8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d038      	beq.n	800987a <_malloc_r+0xf6>
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	42a2      	cmp	r2, r4
 800980c:	d12b      	bne.n	8009866 <_malloc_r+0xe2>
 800980e:	2200      	movs	r2, #0
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	e00f      	b.n	8009834 <_malloc_r+0xb0>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	1b52      	subs	r2, r2, r5
 8009818:	d41f      	bmi.n	800985a <_malloc_r+0xd6>
 800981a:	2a0b      	cmp	r2, #11
 800981c:	d917      	bls.n	800984e <_malloc_r+0xca>
 800981e:	1961      	adds	r1, r4, r5
 8009820:	42a3      	cmp	r3, r4
 8009822:	6025      	str	r5, [r4, #0]
 8009824:	bf18      	it	ne
 8009826:	6059      	strne	r1, [r3, #4]
 8009828:	6863      	ldr	r3, [r4, #4]
 800982a:	bf08      	it	eq
 800982c:	f8c8 1000 	streq.w	r1, [r8]
 8009830:	5162      	str	r2, [r4, r5]
 8009832:	604b      	str	r3, [r1, #4]
 8009834:	4638      	mov	r0, r7
 8009836:	f104 060b 	add.w	r6, r4, #11
 800983a:	f000 f829 	bl	8009890 <__malloc_unlock>
 800983e:	f026 0607 	bic.w	r6, r6, #7
 8009842:	1d23      	adds	r3, r4, #4
 8009844:	1af2      	subs	r2, r6, r3
 8009846:	d0ae      	beq.n	80097a6 <_malloc_r+0x22>
 8009848:	1b9b      	subs	r3, r3, r6
 800984a:	50a3      	str	r3, [r4, r2]
 800984c:	e7ab      	b.n	80097a6 <_malloc_r+0x22>
 800984e:	42a3      	cmp	r3, r4
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	d1dd      	bne.n	8009810 <_malloc_r+0x8c>
 8009854:	f8c8 2000 	str.w	r2, [r8]
 8009858:	e7ec      	b.n	8009834 <_malloc_r+0xb0>
 800985a:	4623      	mov	r3, r4
 800985c:	6864      	ldr	r4, [r4, #4]
 800985e:	e7ac      	b.n	80097ba <_malloc_r+0x36>
 8009860:	4634      	mov	r4, r6
 8009862:	6876      	ldr	r6, [r6, #4]
 8009864:	e7b4      	b.n	80097d0 <_malloc_r+0x4c>
 8009866:	4613      	mov	r3, r2
 8009868:	e7cc      	b.n	8009804 <_malloc_r+0x80>
 800986a:	230c      	movs	r3, #12
 800986c:	603b      	str	r3, [r7, #0]
 800986e:	4638      	mov	r0, r7
 8009870:	f000 f80e 	bl	8009890 <__malloc_unlock>
 8009874:	e797      	b.n	80097a6 <_malloc_r+0x22>
 8009876:	6025      	str	r5, [r4, #0]
 8009878:	e7dc      	b.n	8009834 <_malloc_r+0xb0>
 800987a:	605b      	str	r3, [r3, #4]
 800987c:	deff      	udf	#255	; 0xff
 800987e:	bf00      	nop
 8009880:	200004fc 	.word	0x200004fc

08009884 <__malloc_lock>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__malloc_lock+0x8>)
 8009886:	f7ff b884 	b.w	8008992 <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	200004f8 	.word	0x200004f8

08009890 <__malloc_unlock>:
 8009890:	4801      	ldr	r0, [pc, #4]	; (8009898 <__malloc_unlock+0x8>)
 8009892:	f7ff b87f 	b.w	8008994 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	200004f8 	.word	0x200004f8

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	69c6      	ldr	r6, [r0, #28]
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Balloc+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7ff ff44 	bl	8009734 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	61e0      	str	r0, [r4, #28]
 80098b0:	b920      	cbnz	r0, 80098bc <_Balloc+0x20>
 80098b2:	4b18      	ldr	r3, [pc, #96]	; (8009914 <_Balloc+0x78>)
 80098b4:	4818      	ldr	r0, [pc, #96]	; (8009918 <_Balloc+0x7c>)
 80098b6:	216b      	movs	r1, #107	; 0x6b
 80098b8:	f001 ff56 	bl	800b768 <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	69e6      	ldr	r6, [r4, #28]
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	b183      	cbz	r3, 80098ec <_Balloc+0x50>
 80098ca:	69e3      	ldr	r3, [r4, #28]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098d2:	b9b8      	cbnz	r0, 8009904 <_Balloc+0x68>
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f605 	lsl.w	r6, r1, r5
 80098da:	1d72      	adds	r2, r6, #5
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4620      	mov	r0, r4
 80098e0:	f001 ff60 	bl	800b7a4 <_calloc_r>
 80098e4:	b160      	cbz	r0, 8009900 <_Balloc+0x64>
 80098e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ea:	e00e      	b.n	800990a <_Balloc+0x6e>
 80098ec:	2221      	movs	r2, #33	; 0x21
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f001 ff57 	bl	800b7a4 <_calloc_r>
 80098f6:	69e3      	ldr	r3, [r4, #28]
 80098f8:	60f0      	str	r0, [r6, #12]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <_Balloc+0x2e>
 8009900:	2000      	movs	r0, #0
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800990a:	2300      	movs	r3, #0
 800990c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009910:	e7f7      	b.n	8009902 <_Balloc+0x66>
 8009912:	bf00      	nop
 8009914:	0800cb76 	.word	0x0800cb76
 8009918:	0800cbf6 	.word	0x0800cbf6

0800991c <_Bfree>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	69c6      	ldr	r6, [r0, #28]
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Bfree+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff ff04 	bl	8009734 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	61e8      	str	r0, [r5, #28]
 8009930:	b920      	cbnz	r0, 800993c <_Bfree+0x20>
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <_Bfree+0x3c>)
 8009934:	4809      	ldr	r0, [pc, #36]	; (800995c <_Bfree+0x40>)
 8009936:	218f      	movs	r1, #143	; 0x8f
 8009938:	f001 ff16 	bl	800b768 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	b13c      	cbz	r4, 8009956 <_Bfree+0x3a>
 8009946:	69eb      	ldr	r3, [r5, #28]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0800cb76 	.word	0x0800cb76
 800995c:	0800cbf6 	.word	0x0800cbf6

08009960 <__multadd>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	690d      	ldr	r5, [r1, #16]
 8009966:	4607      	mov	r7, r0
 8009968:	460c      	mov	r4, r1
 800996a:	461e      	mov	r6, r3
 800996c:	f101 0c14 	add.w	ip, r1, #20
 8009970:	2000      	movs	r0, #0
 8009972:	f8dc 3000 	ldr.w	r3, [ip]
 8009976:	b299      	uxth	r1, r3
 8009978:	fb02 6101 	mla	r1, r2, r1, r6
 800997c:	0c1e      	lsrs	r6, r3, #16
 800997e:	0c0b      	lsrs	r3, r1, #16
 8009980:	fb02 3306 	mla	r3, r2, r6, r3
 8009984:	b289      	uxth	r1, r1
 8009986:	3001      	adds	r0, #1
 8009988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800998c:	4285      	cmp	r5, r0
 800998e:	f84c 1b04 	str.w	r1, [ip], #4
 8009992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009996:	dcec      	bgt.n	8009972 <__multadd+0x12>
 8009998:	b30e      	cbz	r6, 80099de <__multadd+0x7e>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	42ab      	cmp	r3, r5
 800999e:	dc19      	bgt.n	80099d4 <__multadd+0x74>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4638      	mov	r0, r7
 80099a4:	3101      	adds	r1, #1
 80099a6:	f7ff ff79 	bl	800989c <_Balloc>
 80099aa:	4680      	mov	r8, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__multadd+0x5a>
 80099ae:	4602      	mov	r2, r0
 80099b0:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <__multadd+0x84>)
 80099b2:	480d      	ldr	r0, [pc, #52]	; (80099e8 <__multadd+0x88>)
 80099b4:	21ba      	movs	r1, #186	; 0xba
 80099b6:	f001 fed7 	bl	800b768 <__assert_func>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	3202      	adds	r2, #2
 80099be:	f104 010c 	add.w	r1, r4, #12
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f001 feb7 	bl	800b738 <memcpy>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ffa5 	bl	800991c <_Bfree>
 80099d2:	4644      	mov	r4, r8
 80099d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d8:	3501      	adds	r5, #1
 80099da:	615e      	str	r6, [r3, #20]
 80099dc:	6125      	str	r5, [r4, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	0800cbe5 	.word	0x0800cbe5
 80099e8:	0800cbf6 	.word	0x0800cbf6

080099ec <__s2b>:
 80099ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	4615      	mov	r5, r2
 80099f4:	461f      	mov	r7, r3
 80099f6:	2209      	movs	r2, #9
 80099f8:	3308      	adds	r3, #8
 80099fa:	4606      	mov	r6, r0
 80099fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a00:	2100      	movs	r1, #0
 8009a02:	2201      	movs	r2, #1
 8009a04:	429a      	cmp	r2, r3
 8009a06:	db09      	blt.n	8009a1c <__s2b+0x30>
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff ff47 	bl	800989c <_Balloc>
 8009a0e:	b940      	cbnz	r0, 8009a22 <__s2b+0x36>
 8009a10:	4602      	mov	r2, r0
 8009a12:	4b19      	ldr	r3, [pc, #100]	; (8009a78 <__s2b+0x8c>)
 8009a14:	4819      	ldr	r0, [pc, #100]	; (8009a7c <__s2b+0x90>)
 8009a16:	21d3      	movs	r1, #211	; 0xd3
 8009a18:	f001 fea6 	bl	800b768 <__assert_func>
 8009a1c:	0052      	lsls	r2, r2, #1
 8009a1e:	3101      	adds	r1, #1
 8009a20:	e7f0      	b.n	8009a04 <__s2b+0x18>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	6143      	str	r3, [r0, #20]
 8009a26:	2d09      	cmp	r5, #9
 8009a28:	f04f 0301 	mov.w	r3, #1
 8009a2c:	6103      	str	r3, [r0, #16]
 8009a2e:	dd16      	ble.n	8009a5e <__s2b+0x72>
 8009a30:	f104 0909 	add.w	r9, r4, #9
 8009a34:	46c8      	mov	r8, r9
 8009a36:	442c      	add	r4, r5
 8009a38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a3c:	4601      	mov	r1, r0
 8009a3e:	3b30      	subs	r3, #48	; 0x30
 8009a40:	220a      	movs	r2, #10
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ff8c 	bl	8009960 <__multadd>
 8009a48:	45a0      	cmp	r8, r4
 8009a4a:	d1f5      	bne.n	8009a38 <__s2b+0x4c>
 8009a4c:	f1a5 0408 	sub.w	r4, r5, #8
 8009a50:	444c      	add	r4, r9
 8009a52:	1b2d      	subs	r5, r5, r4
 8009a54:	1963      	adds	r3, r4, r5
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	db04      	blt.n	8009a64 <__s2b+0x78>
 8009a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	340a      	adds	r4, #10
 8009a60:	2509      	movs	r5, #9
 8009a62:	e7f6      	b.n	8009a52 <__s2b+0x66>
 8009a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a68:	4601      	mov	r1, r0
 8009a6a:	3b30      	subs	r3, #48	; 0x30
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff76 	bl	8009960 <__multadd>
 8009a74:	e7ee      	b.n	8009a54 <__s2b+0x68>
 8009a76:	bf00      	nop
 8009a78:	0800cbe5 	.word	0x0800cbe5
 8009a7c:	0800cbf6 	.word	0x0800cbf6

08009a80 <__hi0bits>:
 8009a80:	0c03      	lsrs	r3, r0, #16
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	b9d3      	cbnz	r3, 8009abc <__hi0bits+0x3c>
 8009a86:	0400      	lsls	r0, r0, #16
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0200      	lsleq	r0, r0, #8
 8009a92:	3308      	addeq	r3, #8
 8009a94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a98:	bf04      	itt	eq
 8009a9a:	0100      	lsleq	r0, r0, #4
 8009a9c:	3304      	addeq	r3, #4
 8009a9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009aa2:	bf04      	itt	eq
 8009aa4:	0080      	lsleq	r0, r0, #2
 8009aa6:	3302      	addeq	r3, #2
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	db05      	blt.n	8009ab8 <__hi0bits+0x38>
 8009aac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ab0:	f103 0301 	add.w	r3, r3, #1
 8009ab4:	bf08      	it	eq
 8009ab6:	2320      	moveq	r3, #32
 8009ab8:	4618      	mov	r0, r3
 8009aba:	4770      	bx	lr
 8009abc:	2300      	movs	r3, #0
 8009abe:	e7e4      	b.n	8009a8a <__hi0bits+0xa>

08009ac0 <__lo0bits>:
 8009ac0:	6803      	ldr	r3, [r0, #0]
 8009ac2:	f013 0207 	ands.w	r2, r3, #7
 8009ac6:	d00c      	beq.n	8009ae2 <__lo0bits+0x22>
 8009ac8:	07d9      	lsls	r1, r3, #31
 8009aca:	d422      	bmi.n	8009b12 <__lo0bits+0x52>
 8009acc:	079a      	lsls	r2, r3, #30
 8009ace:	bf49      	itett	mi
 8009ad0:	085b      	lsrmi	r3, r3, #1
 8009ad2:	089b      	lsrpl	r3, r3, #2
 8009ad4:	6003      	strmi	r3, [r0, #0]
 8009ad6:	2201      	movmi	r2, #1
 8009ad8:	bf5c      	itt	pl
 8009ada:	6003      	strpl	r3, [r0, #0]
 8009adc:	2202      	movpl	r2, #2
 8009ade:	4610      	mov	r0, r2
 8009ae0:	4770      	bx	lr
 8009ae2:	b299      	uxth	r1, r3
 8009ae4:	b909      	cbnz	r1, 8009aea <__lo0bits+0x2a>
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	2210      	movs	r2, #16
 8009aea:	b2d9      	uxtb	r1, r3
 8009aec:	b909      	cbnz	r1, 8009af2 <__lo0bits+0x32>
 8009aee:	3208      	adds	r2, #8
 8009af0:	0a1b      	lsrs	r3, r3, #8
 8009af2:	0719      	lsls	r1, r3, #28
 8009af4:	bf04      	itt	eq
 8009af6:	091b      	lsreq	r3, r3, #4
 8009af8:	3204      	addeq	r2, #4
 8009afa:	0799      	lsls	r1, r3, #30
 8009afc:	bf04      	itt	eq
 8009afe:	089b      	lsreq	r3, r3, #2
 8009b00:	3202      	addeq	r2, #2
 8009b02:	07d9      	lsls	r1, r3, #31
 8009b04:	d403      	bmi.n	8009b0e <__lo0bits+0x4e>
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	f102 0201 	add.w	r2, r2, #1
 8009b0c:	d003      	beq.n	8009b16 <__lo0bits+0x56>
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	e7e5      	b.n	8009ade <__lo0bits+0x1e>
 8009b12:	2200      	movs	r2, #0
 8009b14:	e7e3      	b.n	8009ade <__lo0bits+0x1e>
 8009b16:	2220      	movs	r2, #32
 8009b18:	e7e1      	b.n	8009ade <__lo0bits+0x1e>
	...

08009b1c <__i2b>:
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	460c      	mov	r4, r1
 8009b20:	2101      	movs	r1, #1
 8009b22:	f7ff febb 	bl	800989c <_Balloc>
 8009b26:	4602      	mov	r2, r0
 8009b28:	b928      	cbnz	r0, 8009b36 <__i2b+0x1a>
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <__i2b+0x24>)
 8009b2c:	4805      	ldr	r0, [pc, #20]	; (8009b44 <__i2b+0x28>)
 8009b2e:	f240 1145 	movw	r1, #325	; 0x145
 8009b32:	f001 fe19 	bl	800b768 <__assert_func>
 8009b36:	2301      	movs	r3, #1
 8009b38:	6144      	str	r4, [r0, #20]
 8009b3a:	6103      	str	r3, [r0, #16]
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	0800cbe5 	.word	0x0800cbe5
 8009b44:	0800cbf6 	.word	0x0800cbf6

08009b48 <__multiply>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	4691      	mov	r9, r2
 8009b4e:	690a      	ldr	r2, [r1, #16]
 8009b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	bfb8      	it	lt
 8009b58:	460b      	movlt	r3, r1
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	bfbc      	itt	lt
 8009b5e:	464c      	movlt	r4, r9
 8009b60:	4699      	movlt	r9, r3
 8009b62:	6927      	ldr	r7, [r4, #16]
 8009b64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b68:	68a3      	ldr	r3, [r4, #8]
 8009b6a:	6861      	ldr	r1, [r4, #4]
 8009b6c:	eb07 060a 	add.w	r6, r7, sl
 8009b70:	42b3      	cmp	r3, r6
 8009b72:	b085      	sub	sp, #20
 8009b74:	bfb8      	it	lt
 8009b76:	3101      	addlt	r1, #1
 8009b78:	f7ff fe90 	bl	800989c <_Balloc>
 8009b7c:	b930      	cbnz	r0, 8009b8c <__multiply+0x44>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	4b44      	ldr	r3, [pc, #272]	; (8009c94 <__multiply+0x14c>)
 8009b82:	4845      	ldr	r0, [pc, #276]	; (8009c98 <__multiply+0x150>)
 8009b84:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b88:	f001 fdee 	bl	800b768 <__assert_func>
 8009b8c:	f100 0514 	add.w	r5, r0, #20
 8009b90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b94:	462b      	mov	r3, r5
 8009b96:	2200      	movs	r2, #0
 8009b98:	4543      	cmp	r3, r8
 8009b9a:	d321      	bcc.n	8009be0 <__multiply+0x98>
 8009b9c:	f104 0314 	add.w	r3, r4, #20
 8009ba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ba4:	f109 0314 	add.w	r3, r9, #20
 8009ba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	1b3a      	subs	r2, r7, r4
 8009bb0:	3a15      	subs	r2, #21
 8009bb2:	f022 0203 	bic.w	r2, r2, #3
 8009bb6:	3204      	adds	r2, #4
 8009bb8:	f104 0115 	add.w	r1, r4, #21
 8009bbc:	428f      	cmp	r7, r1
 8009bbe:	bf38      	it	cc
 8009bc0:	2204      	movcc	r2, #4
 8009bc2:	9201      	str	r2, [sp, #4]
 8009bc4:	9a02      	ldr	r2, [sp, #8]
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	d80c      	bhi.n	8009be6 <__multiply+0x9e>
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	dd03      	ble.n	8009bd8 <__multiply+0x90>
 8009bd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d05b      	beq.n	8009c90 <__multiply+0x148>
 8009bd8:	6106      	str	r6, [r0, #16]
 8009bda:	b005      	add	sp, #20
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	f843 2b04 	str.w	r2, [r3], #4
 8009be4:	e7d8      	b.n	8009b98 <__multiply+0x50>
 8009be6:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bea:	f1ba 0f00 	cmp.w	sl, #0
 8009bee:	d024      	beq.n	8009c3a <__multiply+0xf2>
 8009bf0:	f104 0e14 	add.w	lr, r4, #20
 8009bf4:	46a9      	mov	r9, r5
 8009bf6:	f04f 0c00 	mov.w	ip, #0
 8009bfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bfe:	f8d9 1000 	ldr.w	r1, [r9]
 8009c02:	fa1f fb82 	uxth.w	fp, r2
 8009c06:	b289      	uxth	r1, r1
 8009c08:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c10:	f8d9 2000 	ldr.w	r2, [r9]
 8009c14:	4461      	add	r1, ip
 8009c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c22:	b289      	uxth	r1, r1
 8009c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c28:	4577      	cmp	r7, lr
 8009c2a:	f849 1b04 	str.w	r1, [r9], #4
 8009c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c32:	d8e2      	bhi.n	8009bfa <__multiply+0xb2>
 8009c34:	9a01      	ldr	r2, [sp, #4]
 8009c36:	f845 c002 	str.w	ip, [r5, r2]
 8009c3a:	9a03      	ldr	r2, [sp, #12]
 8009c3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c40:	3304      	adds	r3, #4
 8009c42:	f1b9 0f00 	cmp.w	r9, #0
 8009c46:	d021      	beq.n	8009c8c <__multiply+0x144>
 8009c48:	6829      	ldr	r1, [r5, #0]
 8009c4a:	f104 0c14 	add.w	ip, r4, #20
 8009c4e:	46ae      	mov	lr, r5
 8009c50:	f04f 0a00 	mov.w	sl, #0
 8009c54:	f8bc b000 	ldrh.w	fp, [ip]
 8009c58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c5c:	fb09 220b 	mla	r2, r9, fp, r2
 8009c60:	4452      	add	r2, sl
 8009c62:	b289      	uxth	r1, r1
 8009c64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c68:	f84e 1b04 	str.w	r1, [lr], #4
 8009c6c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c74:	f8be 1000 	ldrh.w	r1, [lr]
 8009c78:	fb09 110a 	mla	r1, r9, sl, r1
 8009c7c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c80:	4567      	cmp	r7, ip
 8009c82:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c86:	d8e5      	bhi.n	8009c54 <__multiply+0x10c>
 8009c88:	9a01      	ldr	r2, [sp, #4]
 8009c8a:	50a9      	str	r1, [r5, r2]
 8009c8c:	3504      	adds	r5, #4
 8009c8e:	e799      	b.n	8009bc4 <__multiply+0x7c>
 8009c90:	3e01      	subs	r6, #1
 8009c92:	e79b      	b.n	8009bcc <__multiply+0x84>
 8009c94:	0800cbe5 	.word	0x0800cbe5
 8009c98:	0800cbf6 	.word	0x0800cbf6

08009c9c <__pow5mult>:
 8009c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	f012 0203 	ands.w	r2, r2, #3
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460f      	mov	r7, r1
 8009caa:	d007      	beq.n	8009cbc <__pow5mult+0x20>
 8009cac:	4c25      	ldr	r4, [pc, #148]	; (8009d44 <__pow5mult+0xa8>)
 8009cae:	3a01      	subs	r2, #1
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cb6:	f7ff fe53 	bl	8009960 <__multadd>
 8009cba:	4607      	mov	r7, r0
 8009cbc:	10ad      	asrs	r5, r5, #2
 8009cbe:	d03d      	beq.n	8009d3c <__pow5mult+0xa0>
 8009cc0:	69f4      	ldr	r4, [r6, #28]
 8009cc2:	b97c      	cbnz	r4, 8009ce4 <__pow5mult+0x48>
 8009cc4:	2010      	movs	r0, #16
 8009cc6:	f7ff fd35 	bl	8009734 <malloc>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	61f0      	str	r0, [r6, #28]
 8009cce:	b928      	cbnz	r0, 8009cdc <__pow5mult+0x40>
 8009cd0:	4b1d      	ldr	r3, [pc, #116]	; (8009d48 <__pow5mult+0xac>)
 8009cd2:	481e      	ldr	r0, [pc, #120]	; (8009d4c <__pow5mult+0xb0>)
 8009cd4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009cd8:	f001 fd46 	bl	800b768 <__assert_func>
 8009cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ce0:	6004      	str	r4, [r0, #0]
 8009ce2:	60c4      	str	r4, [r0, #12]
 8009ce4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cec:	b94c      	cbnz	r4, 8009d02 <__pow5mult+0x66>
 8009cee:	f240 2171 	movw	r1, #625	; 0x271
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7ff ff12 	bl	8009b1c <__i2b>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cfe:	4604      	mov	r4, r0
 8009d00:	6003      	str	r3, [r0, #0]
 8009d02:	f04f 0900 	mov.w	r9, #0
 8009d06:	07eb      	lsls	r3, r5, #31
 8009d08:	d50a      	bpl.n	8009d20 <__pow5mult+0x84>
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7ff ff1a 	bl	8009b48 <__multiply>
 8009d14:	4639      	mov	r1, r7
 8009d16:	4680      	mov	r8, r0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff fdff 	bl	800991c <_Bfree>
 8009d1e:	4647      	mov	r7, r8
 8009d20:	106d      	asrs	r5, r5, #1
 8009d22:	d00b      	beq.n	8009d3c <__pow5mult+0xa0>
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	b938      	cbnz	r0, 8009d38 <__pow5mult+0x9c>
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff ff0b 	bl	8009b48 <__multiply>
 8009d32:	6020      	str	r0, [r4, #0]
 8009d34:	f8c0 9000 	str.w	r9, [r0]
 8009d38:	4604      	mov	r4, r0
 8009d3a:	e7e4      	b.n	8009d06 <__pow5mult+0x6a>
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d42:	bf00      	nop
 8009d44:	0800cd40 	.word	0x0800cd40
 8009d48:	0800cb76 	.word	0x0800cb76
 8009d4c:	0800cbf6 	.word	0x0800cbf6

08009d50 <__lshift>:
 8009d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	6849      	ldr	r1, [r1, #4]
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d5e:	68a3      	ldr	r3, [r4, #8]
 8009d60:	4607      	mov	r7, r0
 8009d62:	4691      	mov	r9, r2
 8009d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d68:	f108 0601 	add.w	r6, r8, #1
 8009d6c:	42b3      	cmp	r3, r6
 8009d6e:	db0b      	blt.n	8009d88 <__lshift+0x38>
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff fd93 	bl	800989c <_Balloc>
 8009d76:	4605      	mov	r5, r0
 8009d78:	b948      	cbnz	r0, 8009d8e <__lshift+0x3e>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b28      	ldr	r3, [pc, #160]	; (8009e20 <__lshift+0xd0>)
 8009d7e:	4829      	ldr	r0, [pc, #164]	; (8009e24 <__lshift+0xd4>)
 8009d80:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d84:	f001 fcf0 	bl	800b768 <__assert_func>
 8009d88:	3101      	adds	r1, #1
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	e7ee      	b.n	8009d6c <__lshift+0x1c>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f100 0114 	add.w	r1, r0, #20
 8009d94:	f100 0210 	add.w	r2, r0, #16
 8009d98:	4618      	mov	r0, r3
 8009d9a:	4553      	cmp	r3, sl
 8009d9c:	db33      	blt.n	8009e06 <__lshift+0xb6>
 8009d9e:	6920      	ldr	r0, [r4, #16]
 8009da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009da4:	f104 0314 	add.w	r3, r4, #20
 8009da8:	f019 091f 	ands.w	r9, r9, #31
 8009dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009db0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009db4:	d02b      	beq.n	8009e0e <__lshift+0xbe>
 8009db6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dba:	468a      	mov	sl, r1
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	6818      	ldr	r0, [r3, #0]
 8009dc0:	fa00 f009 	lsl.w	r0, r0, r9
 8009dc4:	4310      	orrs	r0, r2
 8009dc6:	f84a 0b04 	str.w	r0, [sl], #4
 8009dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dce:	459c      	cmp	ip, r3
 8009dd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dd4:	d8f3      	bhi.n	8009dbe <__lshift+0x6e>
 8009dd6:	ebac 0304 	sub.w	r3, ip, r4
 8009dda:	3b15      	subs	r3, #21
 8009ddc:	f023 0303 	bic.w	r3, r3, #3
 8009de0:	3304      	adds	r3, #4
 8009de2:	f104 0015 	add.w	r0, r4, #21
 8009de6:	4584      	cmp	ip, r0
 8009de8:	bf38      	it	cc
 8009dea:	2304      	movcc	r3, #4
 8009dec:	50ca      	str	r2, [r1, r3]
 8009dee:	b10a      	cbz	r2, 8009df4 <__lshift+0xa4>
 8009df0:	f108 0602 	add.w	r6, r8, #2
 8009df4:	3e01      	subs	r6, #1
 8009df6:	4638      	mov	r0, r7
 8009df8:	612e      	str	r6, [r5, #16]
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	f7ff fd8e 	bl	800991c <_Bfree>
 8009e00:	4628      	mov	r0, r5
 8009e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e06:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	e7c5      	b.n	8009d9a <__lshift+0x4a>
 8009e0e:	3904      	subs	r1, #4
 8009e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e14:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e18:	459c      	cmp	ip, r3
 8009e1a:	d8f9      	bhi.n	8009e10 <__lshift+0xc0>
 8009e1c:	e7ea      	b.n	8009df4 <__lshift+0xa4>
 8009e1e:	bf00      	nop
 8009e20:	0800cbe5 	.word	0x0800cbe5
 8009e24:	0800cbf6 	.word	0x0800cbf6

08009e28 <__mcmp>:
 8009e28:	b530      	push	{r4, r5, lr}
 8009e2a:	6902      	ldr	r2, [r0, #16]
 8009e2c:	690c      	ldr	r4, [r1, #16]
 8009e2e:	1b12      	subs	r2, r2, r4
 8009e30:	d10e      	bne.n	8009e50 <__mcmp+0x28>
 8009e32:	f100 0314 	add.w	r3, r0, #20
 8009e36:	3114      	adds	r1, #20
 8009e38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e48:	42a5      	cmp	r5, r4
 8009e4a:	d003      	beq.n	8009e54 <__mcmp+0x2c>
 8009e4c:	d305      	bcc.n	8009e5a <__mcmp+0x32>
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4610      	mov	r0, r2
 8009e52:	bd30      	pop	{r4, r5, pc}
 8009e54:	4283      	cmp	r3, r0
 8009e56:	d3f3      	bcc.n	8009e40 <__mcmp+0x18>
 8009e58:	e7fa      	b.n	8009e50 <__mcmp+0x28>
 8009e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5e:	e7f7      	b.n	8009e50 <__mcmp+0x28>

08009e60 <__mdiff>:
 8009e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	4606      	mov	r6, r0
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	4690      	mov	r8, r2
 8009e6e:	f7ff ffdb 	bl	8009e28 <__mcmp>
 8009e72:	1e05      	subs	r5, r0, #0
 8009e74:	d110      	bne.n	8009e98 <__mdiff+0x38>
 8009e76:	4629      	mov	r1, r5
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f7ff fd0f 	bl	800989c <_Balloc>
 8009e7e:	b930      	cbnz	r0, 8009e8e <__mdiff+0x2e>
 8009e80:	4b3a      	ldr	r3, [pc, #232]	; (8009f6c <__mdiff+0x10c>)
 8009e82:	4602      	mov	r2, r0
 8009e84:	f240 2137 	movw	r1, #567	; 0x237
 8009e88:	4839      	ldr	r0, [pc, #228]	; (8009f70 <__mdiff+0x110>)
 8009e8a:	f001 fc6d 	bl	800b768 <__assert_func>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	bfa4      	itt	ge
 8009e9a:	4643      	movge	r3, r8
 8009e9c:	46a0      	movge	r8, r4
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ea4:	bfa6      	itte	ge
 8009ea6:	461c      	movge	r4, r3
 8009ea8:	2500      	movge	r5, #0
 8009eaa:	2501      	movlt	r5, #1
 8009eac:	f7ff fcf6 	bl	800989c <_Balloc>
 8009eb0:	b920      	cbnz	r0, 8009ebc <__mdiff+0x5c>
 8009eb2:	4b2e      	ldr	r3, [pc, #184]	; (8009f6c <__mdiff+0x10c>)
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	f240 2145 	movw	r1, #581	; 0x245
 8009eba:	e7e5      	b.n	8009e88 <__mdiff+0x28>
 8009ebc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ec0:	6926      	ldr	r6, [r4, #16]
 8009ec2:	60c5      	str	r5, [r0, #12]
 8009ec4:	f104 0914 	add.w	r9, r4, #20
 8009ec8:	f108 0514 	add.w	r5, r8, #20
 8009ecc:	f100 0e14 	add.w	lr, r0, #20
 8009ed0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009ed4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ed8:	f108 0210 	add.w	r2, r8, #16
 8009edc:	46f2      	mov	sl, lr
 8009ede:	2100      	movs	r1, #0
 8009ee0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ee4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ee8:	fa11 f88b 	uxtah	r8, r1, fp
 8009eec:	b299      	uxth	r1, r3
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	eba8 0801 	sub.w	r8, r8, r1
 8009ef4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ef8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009efc:	fa1f f888 	uxth.w	r8, r8
 8009f00:	1419      	asrs	r1, r3, #16
 8009f02:	454e      	cmp	r6, r9
 8009f04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f08:	f84a 3b04 	str.w	r3, [sl], #4
 8009f0c:	d8e8      	bhi.n	8009ee0 <__mdiff+0x80>
 8009f0e:	1b33      	subs	r3, r6, r4
 8009f10:	3b15      	subs	r3, #21
 8009f12:	f023 0303 	bic.w	r3, r3, #3
 8009f16:	3304      	adds	r3, #4
 8009f18:	3415      	adds	r4, #21
 8009f1a:	42a6      	cmp	r6, r4
 8009f1c:	bf38      	it	cc
 8009f1e:	2304      	movcc	r3, #4
 8009f20:	441d      	add	r5, r3
 8009f22:	4473      	add	r3, lr
 8009f24:	469e      	mov	lr, r3
 8009f26:	462e      	mov	r6, r5
 8009f28:	4566      	cmp	r6, ip
 8009f2a:	d30e      	bcc.n	8009f4a <__mdiff+0xea>
 8009f2c:	f10c 0203 	add.w	r2, ip, #3
 8009f30:	1b52      	subs	r2, r2, r5
 8009f32:	f022 0203 	bic.w	r2, r2, #3
 8009f36:	3d03      	subs	r5, #3
 8009f38:	45ac      	cmp	ip, r5
 8009f3a:	bf38      	it	cc
 8009f3c:	2200      	movcc	r2, #0
 8009f3e:	4413      	add	r3, r2
 8009f40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f44:	b17a      	cbz	r2, 8009f66 <__mdiff+0x106>
 8009f46:	6107      	str	r7, [r0, #16]
 8009f48:	e7a4      	b.n	8009e94 <__mdiff+0x34>
 8009f4a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f4e:	fa11 f288 	uxtah	r2, r1, r8
 8009f52:	1414      	asrs	r4, r2, #16
 8009f54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f58:	b292      	uxth	r2, r2
 8009f5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f5e:	f84e 2b04 	str.w	r2, [lr], #4
 8009f62:	1421      	asrs	r1, r4, #16
 8009f64:	e7e0      	b.n	8009f28 <__mdiff+0xc8>
 8009f66:	3f01      	subs	r7, #1
 8009f68:	e7ea      	b.n	8009f40 <__mdiff+0xe0>
 8009f6a:	bf00      	nop
 8009f6c:	0800cbe5 	.word	0x0800cbe5
 8009f70:	0800cbf6 	.word	0x0800cbf6

08009f74 <__ulp>:
 8009f74:	b082      	sub	sp, #8
 8009f76:	ed8d 0b00 	vstr	d0, [sp]
 8009f7a:	9a01      	ldr	r2, [sp, #4]
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <__ulp+0x48>)
 8009f7e:	4013      	ands	r3, r2
 8009f80:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dc08      	bgt.n	8009f9a <__ulp+0x26>
 8009f88:	425b      	negs	r3, r3
 8009f8a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009f8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f92:	da04      	bge.n	8009f9e <__ulp+0x2a>
 8009f94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f98:	4113      	asrs	r3, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	e008      	b.n	8009fb0 <__ulp+0x3c>
 8009f9e:	f1a2 0314 	sub.w	r3, r2, #20
 8009fa2:	2b1e      	cmp	r3, #30
 8009fa4:	bfda      	itte	le
 8009fa6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009faa:	40da      	lsrle	r2, r3
 8009fac:	2201      	movgt	r2, #1
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	ec41 0b10 	vmov	d0, r0, r1
 8009fb8:	b002      	add	sp, #8
 8009fba:	4770      	bx	lr
 8009fbc:	7ff00000 	.word	0x7ff00000

08009fc0 <__b2d>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	6906      	ldr	r6, [r0, #16]
 8009fc6:	f100 0814 	add.w	r8, r0, #20
 8009fca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009fce:	1f37      	subs	r7, r6, #4
 8009fd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	f7ff fd53 	bl	8009a80 <__hi0bits>
 8009fda:	f1c0 0320 	rsb	r3, r0, #32
 8009fde:	280a      	cmp	r0, #10
 8009fe0:	600b      	str	r3, [r1, #0]
 8009fe2:	491b      	ldr	r1, [pc, #108]	; (800a050 <__b2d+0x90>)
 8009fe4:	dc15      	bgt.n	800a012 <__b2d+0x52>
 8009fe6:	f1c0 0c0b 	rsb	ip, r0, #11
 8009fea:	fa22 f30c 	lsr.w	r3, r2, ip
 8009fee:	45b8      	cmp	r8, r7
 8009ff0:	ea43 0501 	orr.w	r5, r3, r1
 8009ff4:	bf34      	ite	cc
 8009ff6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ffa:	2300      	movcs	r3, #0
 8009ffc:	3015      	adds	r0, #21
 8009ffe:	fa02 f000 	lsl.w	r0, r2, r0
 800a002:	fa23 f30c 	lsr.w	r3, r3, ip
 800a006:	4303      	orrs	r3, r0
 800a008:	461c      	mov	r4, r3
 800a00a:	ec45 4b10 	vmov	d0, r4, r5
 800a00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a012:	45b8      	cmp	r8, r7
 800a014:	bf3a      	itte	cc
 800a016:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a01a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a01e:	2300      	movcs	r3, #0
 800a020:	380b      	subs	r0, #11
 800a022:	d012      	beq.n	800a04a <__b2d+0x8a>
 800a024:	f1c0 0120 	rsb	r1, r0, #32
 800a028:	fa23 f401 	lsr.w	r4, r3, r1
 800a02c:	4082      	lsls	r2, r0
 800a02e:	4322      	orrs	r2, r4
 800a030:	4547      	cmp	r7, r8
 800a032:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a036:	bf8c      	ite	hi
 800a038:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a03c:	2200      	movls	r2, #0
 800a03e:	4083      	lsls	r3, r0
 800a040:	40ca      	lsrs	r2, r1
 800a042:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a046:	4313      	orrs	r3, r2
 800a048:	e7de      	b.n	800a008 <__b2d+0x48>
 800a04a:	ea42 0501 	orr.w	r5, r2, r1
 800a04e:	e7db      	b.n	800a008 <__b2d+0x48>
 800a050:	3ff00000 	.word	0x3ff00000

0800a054 <__d2b>:
 800a054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a058:	460f      	mov	r7, r1
 800a05a:	2101      	movs	r1, #1
 800a05c:	ec59 8b10 	vmov	r8, r9, d0
 800a060:	4616      	mov	r6, r2
 800a062:	f7ff fc1b 	bl	800989c <_Balloc>
 800a066:	4604      	mov	r4, r0
 800a068:	b930      	cbnz	r0, 800a078 <__d2b+0x24>
 800a06a:	4602      	mov	r2, r0
 800a06c:	4b24      	ldr	r3, [pc, #144]	; (800a100 <__d2b+0xac>)
 800a06e:	4825      	ldr	r0, [pc, #148]	; (800a104 <__d2b+0xb0>)
 800a070:	f240 310f 	movw	r1, #783	; 0x30f
 800a074:	f001 fb78 	bl	800b768 <__assert_func>
 800a078:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a07c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a080:	bb2d      	cbnz	r5, 800a0ce <__d2b+0x7a>
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	f1b8 0300 	subs.w	r3, r8, #0
 800a088:	d026      	beq.n	800a0d8 <__d2b+0x84>
 800a08a:	4668      	mov	r0, sp
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	f7ff fd17 	bl	8009ac0 <__lo0bits>
 800a092:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a096:	b1e8      	cbz	r0, 800a0d4 <__d2b+0x80>
 800a098:	f1c0 0320 	rsb	r3, r0, #32
 800a09c:	fa02 f303 	lsl.w	r3, r2, r3
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	40c2      	lsrs	r2, r0
 800a0a4:	6163      	str	r3, [r4, #20]
 800a0a6:	9201      	str	r2, [sp, #4]
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	61a3      	str	r3, [r4, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf14      	ite	ne
 800a0b0:	2202      	movne	r2, #2
 800a0b2:	2201      	moveq	r2, #1
 800a0b4:	6122      	str	r2, [r4, #16]
 800a0b6:	b1bd      	cbz	r5, 800a0e8 <__d2b+0x94>
 800a0b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0bc:	4405      	add	r5, r0
 800a0be:	603d      	str	r5, [r7, #0]
 800a0c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0c4:	6030      	str	r0, [r6, #0]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	b003      	add	sp, #12
 800a0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0d2:	e7d6      	b.n	800a082 <__d2b+0x2e>
 800a0d4:	6161      	str	r1, [r4, #20]
 800a0d6:	e7e7      	b.n	800a0a8 <__d2b+0x54>
 800a0d8:	a801      	add	r0, sp, #4
 800a0da:	f7ff fcf1 	bl	8009ac0 <__lo0bits>
 800a0de:	9b01      	ldr	r3, [sp, #4]
 800a0e0:	6163      	str	r3, [r4, #20]
 800a0e2:	3020      	adds	r0, #32
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	e7e5      	b.n	800a0b4 <__d2b+0x60>
 800a0e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0f0:	6038      	str	r0, [r7, #0]
 800a0f2:	6918      	ldr	r0, [r3, #16]
 800a0f4:	f7ff fcc4 	bl	8009a80 <__hi0bits>
 800a0f8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0fc:	e7e2      	b.n	800a0c4 <__d2b+0x70>
 800a0fe:	bf00      	nop
 800a100:	0800cbe5 	.word	0x0800cbe5
 800a104:	0800cbf6 	.word	0x0800cbf6

0800a108 <__ratio>:
 800a108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	4688      	mov	r8, r1
 800a10e:	4669      	mov	r1, sp
 800a110:	4681      	mov	r9, r0
 800a112:	f7ff ff55 	bl	8009fc0 <__b2d>
 800a116:	a901      	add	r1, sp, #4
 800a118:	4640      	mov	r0, r8
 800a11a:	ec55 4b10 	vmov	r4, r5, d0
 800a11e:	f7ff ff4f 	bl	8009fc0 <__b2d>
 800a122:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a126:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a12a:	eba3 0c02 	sub.w	ip, r3, r2
 800a12e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a132:	1a9b      	subs	r3, r3, r2
 800a134:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a138:	ec51 0b10 	vmov	r0, r1, d0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	bfd6      	itet	le
 800a140:	460a      	movle	r2, r1
 800a142:	462a      	movgt	r2, r5
 800a144:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a148:	468b      	mov	fp, r1
 800a14a:	462f      	mov	r7, r5
 800a14c:	bfd4      	ite	le
 800a14e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a152:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a156:	4620      	mov	r0, r4
 800a158:	ee10 2a10 	vmov	r2, s0
 800a15c:	465b      	mov	r3, fp
 800a15e:	4639      	mov	r1, r7
 800a160:	f7f6 fb74 	bl	800084c <__aeabi_ddiv>
 800a164:	ec41 0b10 	vmov	d0, r0, r1
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a16e <__copybits>:
 800a16e:	3901      	subs	r1, #1
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	1149      	asrs	r1, r1, #5
 800a174:	6914      	ldr	r4, [r2, #16]
 800a176:	3101      	adds	r1, #1
 800a178:	f102 0314 	add.w	r3, r2, #20
 800a17c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a180:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a184:	1f05      	subs	r5, r0, #4
 800a186:	42a3      	cmp	r3, r4
 800a188:	d30c      	bcc.n	800a1a4 <__copybits+0x36>
 800a18a:	1aa3      	subs	r3, r4, r2
 800a18c:	3b11      	subs	r3, #17
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	3211      	adds	r2, #17
 800a194:	42a2      	cmp	r2, r4
 800a196:	bf88      	it	hi
 800a198:	2300      	movhi	r3, #0
 800a19a:	4418      	add	r0, r3
 800a19c:	2300      	movs	r3, #0
 800a19e:	4288      	cmp	r0, r1
 800a1a0:	d305      	bcc.n	800a1ae <__copybits+0x40>
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ac:	e7eb      	b.n	800a186 <__copybits+0x18>
 800a1ae:	f840 3b04 	str.w	r3, [r0], #4
 800a1b2:	e7f4      	b.n	800a19e <__copybits+0x30>

0800a1b4 <__any_on>:
 800a1b4:	f100 0214 	add.w	r2, r0, #20
 800a1b8:	6900      	ldr	r0, [r0, #16]
 800a1ba:	114b      	asrs	r3, r1, #5
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	b510      	push	{r4, lr}
 800a1c0:	db11      	blt.n	800a1e6 <__any_on+0x32>
 800a1c2:	dd0a      	ble.n	800a1da <__any_on+0x26>
 800a1c4:	f011 011f 	ands.w	r1, r1, #31
 800a1c8:	d007      	beq.n	800a1da <__any_on+0x26>
 800a1ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1ce:	fa24 f001 	lsr.w	r0, r4, r1
 800a1d2:	fa00 f101 	lsl.w	r1, r0, r1
 800a1d6:	428c      	cmp	r4, r1
 800a1d8:	d10b      	bne.n	800a1f2 <__any_on+0x3e>
 800a1da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d803      	bhi.n	800a1ea <__any_on+0x36>
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	e7f7      	b.n	800a1da <__any_on+0x26>
 800a1ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	d0f5      	beq.n	800a1de <__any_on+0x2a>
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	e7f6      	b.n	800a1e4 <__any_on+0x30>

0800a1f6 <sulp>:
 800a1f6:	b570      	push	{r4, r5, r6, lr}
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	ec45 4b10 	vmov	d0, r4, r5
 800a200:	4616      	mov	r6, r2
 800a202:	f7ff feb7 	bl	8009f74 <__ulp>
 800a206:	ec51 0b10 	vmov	r0, r1, d0
 800a20a:	b17e      	cbz	r6, 800a22c <sulp+0x36>
 800a20c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a210:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a214:	2b00      	cmp	r3, #0
 800a216:	dd09      	ble.n	800a22c <sulp+0x36>
 800a218:	051b      	lsls	r3, r3, #20
 800a21a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a21e:	2400      	movs	r4, #0
 800a220:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f9e6 	bl	80005f8 <__aeabi_dmul>
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a230 <_strtod_l>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ed2d 8b02 	vpush	{d8}
 800a238:	b09b      	sub	sp, #108	; 0x6c
 800a23a:	4604      	mov	r4, r0
 800a23c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a23e:	2200      	movs	r2, #0
 800a240:	9216      	str	r2, [sp, #88]	; 0x58
 800a242:	460d      	mov	r5, r1
 800a244:	f04f 0800 	mov.w	r8, #0
 800a248:	f04f 0900 	mov.w	r9, #0
 800a24c:	460a      	mov	r2, r1
 800a24e:	9215      	str	r2, [sp, #84]	; 0x54
 800a250:	7811      	ldrb	r1, [r2, #0]
 800a252:	292b      	cmp	r1, #43	; 0x2b
 800a254:	d04c      	beq.n	800a2f0 <_strtod_l+0xc0>
 800a256:	d83a      	bhi.n	800a2ce <_strtod_l+0x9e>
 800a258:	290d      	cmp	r1, #13
 800a25a:	d834      	bhi.n	800a2c6 <_strtod_l+0x96>
 800a25c:	2908      	cmp	r1, #8
 800a25e:	d834      	bhi.n	800a2ca <_strtod_l+0x9a>
 800a260:	2900      	cmp	r1, #0
 800a262:	d03d      	beq.n	800a2e0 <_strtod_l+0xb0>
 800a264:	2200      	movs	r2, #0
 800a266:	920a      	str	r2, [sp, #40]	; 0x28
 800a268:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a26a:	7832      	ldrb	r2, [r6, #0]
 800a26c:	2a30      	cmp	r2, #48	; 0x30
 800a26e:	f040 80b4 	bne.w	800a3da <_strtod_l+0x1aa>
 800a272:	7872      	ldrb	r2, [r6, #1]
 800a274:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a278:	2a58      	cmp	r2, #88	; 0x58
 800a27a:	d170      	bne.n	800a35e <_strtod_l+0x12e>
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	ab16      	add	r3, sp, #88	; 0x58
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4a8e      	ldr	r2, [pc, #568]	; (800a4c0 <_strtod_l+0x290>)
 800a288:	ab17      	add	r3, sp, #92	; 0x5c
 800a28a:	a915      	add	r1, sp, #84	; 0x54
 800a28c:	4620      	mov	r0, r4
 800a28e:	f001 fb07 	bl	800b8a0 <__gethex>
 800a292:	f010 070f 	ands.w	r7, r0, #15
 800a296:	4605      	mov	r5, r0
 800a298:	d005      	beq.n	800a2a6 <_strtod_l+0x76>
 800a29a:	2f06      	cmp	r7, #6
 800a29c:	d12a      	bne.n	800a2f4 <_strtod_l+0xc4>
 800a29e:	3601      	adds	r6, #1
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9615      	str	r6, [sp, #84]	; 0x54
 800a2a4:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f040 857f 	bne.w	800adac <_strtod_l+0xb7c>
 800a2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b0:	b1db      	cbz	r3, 800a2ea <_strtod_l+0xba>
 800a2b2:	4642      	mov	r2, r8
 800a2b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2b8:	ec43 2b10 	vmov	d0, r2, r3
 800a2bc:	b01b      	add	sp, #108	; 0x6c
 800a2be:	ecbd 8b02 	vpop	{d8}
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c6:	2920      	cmp	r1, #32
 800a2c8:	d1cc      	bne.n	800a264 <_strtod_l+0x34>
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	e7bf      	b.n	800a24e <_strtod_l+0x1e>
 800a2ce:	292d      	cmp	r1, #45	; 0x2d
 800a2d0:	d1c8      	bne.n	800a264 <_strtod_l+0x34>
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	910a      	str	r1, [sp, #40]	; 0x28
 800a2d6:	1c51      	adds	r1, r2, #1
 800a2d8:	9115      	str	r1, [sp, #84]	; 0x54
 800a2da:	7852      	ldrb	r2, [r2, #1]
 800a2dc:	2a00      	cmp	r2, #0
 800a2de:	d1c3      	bne.n	800a268 <_strtod_l+0x38>
 800a2e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2e2:	9515      	str	r5, [sp, #84]	; 0x54
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f040 855f 	bne.w	800ada8 <_strtod_l+0xb78>
 800a2ea:	4642      	mov	r2, r8
 800a2ec:	464b      	mov	r3, r9
 800a2ee:	e7e3      	b.n	800a2b8 <_strtod_l+0x88>
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	e7ef      	b.n	800a2d4 <_strtod_l+0xa4>
 800a2f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a2f6:	b13a      	cbz	r2, 800a308 <_strtod_l+0xd8>
 800a2f8:	2135      	movs	r1, #53	; 0x35
 800a2fa:	a818      	add	r0, sp, #96	; 0x60
 800a2fc:	f7ff ff37 	bl	800a16e <__copybits>
 800a300:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a302:	4620      	mov	r0, r4
 800a304:	f7ff fb0a 	bl	800991c <_Bfree>
 800a308:	3f01      	subs	r7, #1
 800a30a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a30c:	2f04      	cmp	r7, #4
 800a30e:	d806      	bhi.n	800a31e <_strtod_l+0xee>
 800a310:	e8df f007 	tbb	[pc, r7]
 800a314:	201d0314 	.word	0x201d0314
 800a318:	14          	.byte	0x14
 800a319:	00          	.byte	0x00
 800a31a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a31e:	05e9      	lsls	r1, r5, #23
 800a320:	bf48      	it	mi
 800a322:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a32a:	0d1b      	lsrs	r3, r3, #20
 800a32c:	051b      	lsls	r3, r3, #20
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1b9      	bne.n	800a2a6 <_strtod_l+0x76>
 800a332:	f7fe fb03 	bl	800893c <__errno>
 800a336:	2322      	movs	r3, #34	; 0x22
 800a338:	6003      	str	r3, [r0, #0]
 800a33a:	e7b4      	b.n	800a2a6 <_strtod_l+0x76>
 800a33c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a340:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a344:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a348:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a34c:	e7e7      	b.n	800a31e <_strtod_l+0xee>
 800a34e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4c8 <_strtod_l+0x298>
 800a352:	e7e4      	b.n	800a31e <_strtod_l+0xee>
 800a354:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a358:	f04f 38ff 	mov.w	r8, #4294967295
 800a35c:	e7df      	b.n	800a31e <_strtod_l+0xee>
 800a35e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	9215      	str	r2, [sp, #84]	; 0x54
 800a364:	785b      	ldrb	r3, [r3, #1]
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	d0f9      	beq.n	800a35e <_strtod_l+0x12e>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d09b      	beq.n	800a2a6 <_strtod_l+0x76>
 800a36e:	2301      	movs	r3, #1
 800a370:	f04f 0a00 	mov.w	sl, #0
 800a374:	9304      	str	r3, [sp, #16]
 800a376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a378:	930b      	str	r3, [sp, #44]	; 0x2c
 800a37a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a37e:	46d3      	mov	fp, sl
 800a380:	220a      	movs	r2, #10
 800a382:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a384:	7806      	ldrb	r6, [r0, #0]
 800a386:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a38a:	b2d9      	uxtb	r1, r3
 800a38c:	2909      	cmp	r1, #9
 800a38e:	d926      	bls.n	800a3de <_strtod_l+0x1ae>
 800a390:	494c      	ldr	r1, [pc, #304]	; (800a4c4 <_strtod_l+0x294>)
 800a392:	2201      	movs	r2, #1
 800a394:	f001 f98c 	bl	800b6b0 <strncmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d030      	beq.n	800a3fe <_strtod_l+0x1ce>
 800a39c:	2000      	movs	r0, #0
 800a39e:	4632      	mov	r2, r6
 800a3a0:	9005      	str	r0, [sp, #20]
 800a3a2:	465e      	mov	r6, fp
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2a65      	cmp	r2, #101	; 0x65
 800a3a8:	d001      	beq.n	800a3ae <_strtod_l+0x17e>
 800a3aa:	2a45      	cmp	r2, #69	; 0x45
 800a3ac:	d113      	bne.n	800a3d6 <_strtod_l+0x1a6>
 800a3ae:	b91e      	cbnz	r6, 800a3b8 <_strtod_l+0x188>
 800a3b0:	9a04      	ldr	r2, [sp, #16]
 800a3b2:	4302      	orrs	r2, r0
 800a3b4:	d094      	beq.n	800a2e0 <_strtod_l+0xb0>
 800a3b6:	2600      	movs	r6, #0
 800a3b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a3ba:	1c6a      	adds	r2, r5, #1
 800a3bc:	9215      	str	r2, [sp, #84]	; 0x54
 800a3be:	786a      	ldrb	r2, [r5, #1]
 800a3c0:	2a2b      	cmp	r2, #43	; 0x2b
 800a3c2:	d074      	beq.n	800a4ae <_strtod_l+0x27e>
 800a3c4:	2a2d      	cmp	r2, #45	; 0x2d
 800a3c6:	d078      	beq.n	800a4ba <_strtod_l+0x28a>
 800a3c8:	f04f 0c00 	mov.w	ip, #0
 800a3cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a3d0:	2909      	cmp	r1, #9
 800a3d2:	d97f      	bls.n	800a4d4 <_strtod_l+0x2a4>
 800a3d4:	9515      	str	r5, [sp, #84]	; 0x54
 800a3d6:	2700      	movs	r7, #0
 800a3d8:	e09e      	b.n	800a518 <_strtod_l+0x2e8>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e7c8      	b.n	800a370 <_strtod_l+0x140>
 800a3de:	f1bb 0f08 	cmp.w	fp, #8
 800a3e2:	bfd8      	it	le
 800a3e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a3e6:	f100 0001 	add.w	r0, r0, #1
 800a3ea:	bfda      	itte	le
 800a3ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3f0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a3f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a3f6:	f10b 0b01 	add.w	fp, fp, #1
 800a3fa:	9015      	str	r0, [sp, #84]	; 0x54
 800a3fc:	e7c1      	b.n	800a382 <_strtod_l+0x152>
 800a3fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	9215      	str	r2, [sp, #84]	; 0x54
 800a404:	785a      	ldrb	r2, [r3, #1]
 800a406:	f1bb 0f00 	cmp.w	fp, #0
 800a40a:	d037      	beq.n	800a47c <_strtod_l+0x24c>
 800a40c:	9005      	str	r0, [sp, #20]
 800a40e:	465e      	mov	r6, fp
 800a410:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a414:	2b09      	cmp	r3, #9
 800a416:	d912      	bls.n	800a43e <_strtod_l+0x20e>
 800a418:	2301      	movs	r3, #1
 800a41a:	e7c4      	b.n	800a3a6 <_strtod_l+0x176>
 800a41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	9215      	str	r2, [sp, #84]	; 0x54
 800a422:	785a      	ldrb	r2, [r3, #1]
 800a424:	3001      	adds	r0, #1
 800a426:	2a30      	cmp	r2, #48	; 0x30
 800a428:	d0f8      	beq.n	800a41c <_strtod_l+0x1ec>
 800a42a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a42e:	2b08      	cmp	r3, #8
 800a430:	f200 84c1 	bhi.w	800adb6 <_strtod_l+0xb86>
 800a434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a436:	9005      	str	r0, [sp, #20]
 800a438:	2000      	movs	r0, #0
 800a43a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a43c:	4606      	mov	r6, r0
 800a43e:	3a30      	subs	r2, #48	; 0x30
 800a440:	f100 0301 	add.w	r3, r0, #1
 800a444:	d014      	beq.n	800a470 <_strtod_l+0x240>
 800a446:	9905      	ldr	r1, [sp, #20]
 800a448:	4419      	add	r1, r3
 800a44a:	9105      	str	r1, [sp, #20]
 800a44c:	4633      	mov	r3, r6
 800a44e:	eb00 0c06 	add.w	ip, r0, r6
 800a452:	210a      	movs	r1, #10
 800a454:	4563      	cmp	r3, ip
 800a456:	d113      	bne.n	800a480 <_strtod_l+0x250>
 800a458:	1833      	adds	r3, r6, r0
 800a45a:	2b08      	cmp	r3, #8
 800a45c:	f106 0601 	add.w	r6, r6, #1
 800a460:	4406      	add	r6, r0
 800a462:	dc1a      	bgt.n	800a49a <_strtod_l+0x26a>
 800a464:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a466:	230a      	movs	r3, #10
 800a468:	fb03 2301 	mla	r3, r3, r1, r2
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	2300      	movs	r3, #0
 800a470:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a472:	1c51      	adds	r1, r2, #1
 800a474:	9115      	str	r1, [sp, #84]	; 0x54
 800a476:	7852      	ldrb	r2, [r2, #1]
 800a478:	4618      	mov	r0, r3
 800a47a:	e7c9      	b.n	800a410 <_strtod_l+0x1e0>
 800a47c:	4658      	mov	r0, fp
 800a47e:	e7d2      	b.n	800a426 <_strtod_l+0x1f6>
 800a480:	2b08      	cmp	r3, #8
 800a482:	f103 0301 	add.w	r3, r3, #1
 800a486:	dc03      	bgt.n	800a490 <_strtod_l+0x260>
 800a488:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a48a:	434f      	muls	r7, r1
 800a48c:	9709      	str	r7, [sp, #36]	; 0x24
 800a48e:	e7e1      	b.n	800a454 <_strtod_l+0x224>
 800a490:	2b10      	cmp	r3, #16
 800a492:	bfd8      	it	le
 800a494:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a498:	e7dc      	b.n	800a454 <_strtod_l+0x224>
 800a49a:	2e10      	cmp	r6, #16
 800a49c:	bfdc      	itt	le
 800a49e:	230a      	movle	r3, #10
 800a4a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a4a4:	e7e3      	b.n	800a46e <_strtod_l+0x23e>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9305      	str	r3, [sp, #20]
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e780      	b.n	800a3b0 <_strtod_l+0x180>
 800a4ae:	f04f 0c00 	mov.w	ip, #0
 800a4b2:	1caa      	adds	r2, r5, #2
 800a4b4:	9215      	str	r2, [sp, #84]	; 0x54
 800a4b6:	78aa      	ldrb	r2, [r5, #2]
 800a4b8:	e788      	b.n	800a3cc <_strtod_l+0x19c>
 800a4ba:	f04f 0c01 	mov.w	ip, #1
 800a4be:	e7f8      	b.n	800a4b2 <_strtod_l+0x282>
 800a4c0:	0800cd50 	.word	0x0800cd50
 800a4c4:	0800cd4c 	.word	0x0800cd4c
 800a4c8:	7ff00000 	.word	0x7ff00000
 800a4cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4ce:	1c51      	adds	r1, r2, #1
 800a4d0:	9115      	str	r1, [sp, #84]	; 0x54
 800a4d2:	7852      	ldrb	r2, [r2, #1]
 800a4d4:	2a30      	cmp	r2, #48	; 0x30
 800a4d6:	d0f9      	beq.n	800a4cc <_strtod_l+0x29c>
 800a4d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a4dc:	2908      	cmp	r1, #8
 800a4de:	f63f af7a 	bhi.w	800a3d6 <_strtod_l+0x1a6>
 800a4e2:	3a30      	subs	r2, #48	; 0x30
 800a4e4:	9208      	str	r2, [sp, #32]
 800a4e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4e8:	920c      	str	r2, [sp, #48]	; 0x30
 800a4ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4ec:	1c57      	adds	r7, r2, #1
 800a4ee:	9715      	str	r7, [sp, #84]	; 0x54
 800a4f0:	7852      	ldrb	r2, [r2, #1]
 800a4f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a4f6:	f1be 0f09 	cmp.w	lr, #9
 800a4fa:	d938      	bls.n	800a56e <_strtod_l+0x33e>
 800a4fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a4fe:	1a7f      	subs	r7, r7, r1
 800a500:	2f08      	cmp	r7, #8
 800a502:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a506:	dc03      	bgt.n	800a510 <_strtod_l+0x2e0>
 800a508:	9908      	ldr	r1, [sp, #32]
 800a50a:	428f      	cmp	r7, r1
 800a50c:	bfa8      	it	ge
 800a50e:	460f      	movge	r7, r1
 800a510:	f1bc 0f00 	cmp.w	ip, #0
 800a514:	d000      	beq.n	800a518 <_strtod_l+0x2e8>
 800a516:	427f      	negs	r7, r7
 800a518:	2e00      	cmp	r6, #0
 800a51a:	d14f      	bne.n	800a5bc <_strtod_l+0x38c>
 800a51c:	9904      	ldr	r1, [sp, #16]
 800a51e:	4301      	orrs	r1, r0
 800a520:	f47f aec1 	bne.w	800a2a6 <_strtod_l+0x76>
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f aedb 	bne.w	800a2e0 <_strtod_l+0xb0>
 800a52a:	2a69      	cmp	r2, #105	; 0x69
 800a52c:	d029      	beq.n	800a582 <_strtod_l+0x352>
 800a52e:	dc26      	bgt.n	800a57e <_strtod_l+0x34e>
 800a530:	2a49      	cmp	r2, #73	; 0x49
 800a532:	d026      	beq.n	800a582 <_strtod_l+0x352>
 800a534:	2a4e      	cmp	r2, #78	; 0x4e
 800a536:	f47f aed3 	bne.w	800a2e0 <_strtod_l+0xb0>
 800a53a:	499b      	ldr	r1, [pc, #620]	; (800a7a8 <_strtod_l+0x578>)
 800a53c:	a815      	add	r0, sp, #84	; 0x54
 800a53e:	f001 fbef 	bl	800bd20 <__match>
 800a542:	2800      	cmp	r0, #0
 800a544:	f43f aecc 	beq.w	800a2e0 <_strtod_l+0xb0>
 800a548:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b28      	cmp	r3, #40	; 0x28
 800a54e:	d12f      	bne.n	800a5b0 <_strtod_l+0x380>
 800a550:	4996      	ldr	r1, [pc, #600]	; (800a7ac <_strtod_l+0x57c>)
 800a552:	aa18      	add	r2, sp, #96	; 0x60
 800a554:	a815      	add	r0, sp, #84	; 0x54
 800a556:	f001 fbf7 	bl	800bd48 <__hexnan>
 800a55a:	2805      	cmp	r0, #5
 800a55c:	d128      	bne.n	800a5b0 <_strtod_l+0x380>
 800a55e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a564:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a568:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a56c:	e69b      	b.n	800a2a6 <_strtod_l+0x76>
 800a56e:	9f08      	ldr	r7, [sp, #32]
 800a570:	210a      	movs	r1, #10
 800a572:	fb01 2107 	mla	r1, r1, r7, r2
 800a576:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a57a:	9208      	str	r2, [sp, #32]
 800a57c:	e7b5      	b.n	800a4ea <_strtod_l+0x2ba>
 800a57e:	2a6e      	cmp	r2, #110	; 0x6e
 800a580:	e7d9      	b.n	800a536 <_strtod_l+0x306>
 800a582:	498b      	ldr	r1, [pc, #556]	; (800a7b0 <_strtod_l+0x580>)
 800a584:	a815      	add	r0, sp, #84	; 0x54
 800a586:	f001 fbcb 	bl	800bd20 <__match>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	f43f aea8 	beq.w	800a2e0 <_strtod_l+0xb0>
 800a590:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a592:	4988      	ldr	r1, [pc, #544]	; (800a7b4 <_strtod_l+0x584>)
 800a594:	3b01      	subs	r3, #1
 800a596:	a815      	add	r0, sp, #84	; 0x54
 800a598:	9315      	str	r3, [sp, #84]	; 0x54
 800a59a:	f001 fbc1 	bl	800bd20 <__match>
 800a59e:	b910      	cbnz	r0, 800a5a6 <_strtod_l+0x376>
 800a5a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	9315      	str	r3, [sp, #84]	; 0x54
 800a5a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a7c4 <_strtod_l+0x594>
 800a5aa:	f04f 0800 	mov.w	r8, #0
 800a5ae:	e67a      	b.n	800a2a6 <_strtod_l+0x76>
 800a5b0:	4881      	ldr	r0, [pc, #516]	; (800a7b8 <_strtod_l+0x588>)
 800a5b2:	f001 f8d1 	bl	800b758 <nan>
 800a5b6:	ec59 8b10 	vmov	r8, r9, d0
 800a5ba:	e674      	b.n	800a2a6 <_strtod_l+0x76>
 800a5bc:	9b05      	ldr	r3, [sp, #20]
 800a5be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c0:	1afb      	subs	r3, r7, r3
 800a5c2:	f1bb 0f00 	cmp.w	fp, #0
 800a5c6:	bf08      	it	eq
 800a5c8:	46b3      	moveq	fp, r6
 800a5ca:	2e10      	cmp	r6, #16
 800a5cc:	9308      	str	r3, [sp, #32]
 800a5ce:	4635      	mov	r5, r6
 800a5d0:	bfa8      	it	ge
 800a5d2:	2510      	movge	r5, #16
 800a5d4:	f7f5 ff96 	bl	8000504 <__aeabi_ui2d>
 800a5d8:	2e09      	cmp	r6, #9
 800a5da:	4680      	mov	r8, r0
 800a5dc:	4689      	mov	r9, r1
 800a5de:	dd13      	ble.n	800a608 <_strtod_l+0x3d8>
 800a5e0:	4b76      	ldr	r3, [pc, #472]	; (800a7bc <_strtod_l+0x58c>)
 800a5e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a5e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5ea:	f7f6 f805 	bl	80005f8 <__aeabi_dmul>
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	4689      	mov	r9, r1
 800a5f4:	f7f5 ff86 	bl	8000504 <__aeabi_ui2d>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	f7f5 fe44 	bl	800028c <__adddf3>
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	2e0f      	cmp	r6, #15
 800a60a:	dc38      	bgt.n	800a67e <_strtod_l+0x44e>
 800a60c:	9b08      	ldr	r3, [sp, #32]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f43f ae49 	beq.w	800a2a6 <_strtod_l+0x76>
 800a614:	dd24      	ble.n	800a660 <_strtod_l+0x430>
 800a616:	2b16      	cmp	r3, #22
 800a618:	dc0b      	bgt.n	800a632 <_strtod_l+0x402>
 800a61a:	4968      	ldr	r1, [pc, #416]	; (800a7bc <_strtod_l+0x58c>)
 800a61c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a620:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a624:	4642      	mov	r2, r8
 800a626:	464b      	mov	r3, r9
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4680      	mov	r8, r0
 800a62e:	4689      	mov	r9, r1
 800a630:	e639      	b.n	800a2a6 <_strtod_l+0x76>
 800a632:	9a08      	ldr	r2, [sp, #32]
 800a634:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a638:	4293      	cmp	r3, r2
 800a63a:	db20      	blt.n	800a67e <_strtod_l+0x44e>
 800a63c:	4c5f      	ldr	r4, [pc, #380]	; (800a7bc <_strtod_l+0x58c>)
 800a63e:	f1c6 060f 	rsb	r6, r6, #15
 800a642:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a646:	4642      	mov	r2, r8
 800a648:	464b      	mov	r3, r9
 800a64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64e:	f7f5 ffd3 	bl	80005f8 <__aeabi_dmul>
 800a652:	9b08      	ldr	r3, [sp, #32]
 800a654:	1b9e      	subs	r6, r3, r6
 800a656:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a65a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a65e:	e7e3      	b.n	800a628 <_strtod_l+0x3f8>
 800a660:	9b08      	ldr	r3, [sp, #32]
 800a662:	3316      	adds	r3, #22
 800a664:	db0b      	blt.n	800a67e <_strtod_l+0x44e>
 800a666:	9b05      	ldr	r3, [sp, #20]
 800a668:	1bdf      	subs	r7, r3, r7
 800a66a:	4b54      	ldr	r3, [pc, #336]	; (800a7bc <_strtod_l+0x58c>)
 800a66c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a674:	4640      	mov	r0, r8
 800a676:	4649      	mov	r1, r9
 800a678:	f7f6 f8e8 	bl	800084c <__aeabi_ddiv>
 800a67c:	e7d6      	b.n	800a62c <_strtod_l+0x3fc>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	1b75      	subs	r5, r6, r5
 800a682:	441d      	add	r5, r3
 800a684:	2d00      	cmp	r5, #0
 800a686:	dd70      	ble.n	800a76a <_strtod_l+0x53a>
 800a688:	f015 030f 	ands.w	r3, r5, #15
 800a68c:	d00a      	beq.n	800a6a4 <_strtod_l+0x474>
 800a68e:	494b      	ldr	r1, [pc, #300]	; (800a7bc <_strtod_l+0x58c>)
 800a690:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a694:	4642      	mov	r2, r8
 800a696:	464b      	mov	r3, r9
 800a698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	4680      	mov	r8, r0
 800a6a2:	4689      	mov	r9, r1
 800a6a4:	f035 050f 	bics.w	r5, r5, #15
 800a6a8:	d04d      	beq.n	800a746 <_strtod_l+0x516>
 800a6aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a6ae:	dd22      	ble.n	800a6f6 <_strtod_l+0x4c6>
 800a6b0:	2500      	movs	r5, #0
 800a6b2:	46ab      	mov	fp, r5
 800a6b4:	9509      	str	r5, [sp, #36]	; 0x24
 800a6b6:	9505      	str	r5, [sp, #20]
 800a6b8:	2322      	movs	r3, #34	; 0x22
 800a6ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a7c4 <_strtod_l+0x594>
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	f04f 0800 	mov.w	r8, #0
 800a6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f43f aded 	beq.w	800a2a6 <_strtod_l+0x76>
 800a6cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7ff f924 	bl	800991c <_Bfree>
 800a6d4:	9905      	ldr	r1, [sp, #20]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f7ff f920 	bl	800991c <_Bfree>
 800a6dc:	4659      	mov	r1, fp
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff f91c 	bl	800991c <_Bfree>
 800a6e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff f918 	bl	800991c <_Bfree>
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7ff f914 	bl	800991c <_Bfree>
 800a6f4:	e5d7      	b.n	800a2a6 <_strtod_l+0x76>
 800a6f6:	4b32      	ldr	r3, [pc, #200]	; (800a7c0 <_strtod_l+0x590>)
 800a6f8:	9304      	str	r3, [sp, #16]
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	112d      	asrs	r5, r5, #4
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	469a      	mov	sl, r3
 800a704:	2d01      	cmp	r5, #1
 800a706:	dc21      	bgt.n	800a74c <_strtod_l+0x51c>
 800a708:	b10b      	cbz	r3, 800a70e <_strtod_l+0x4de>
 800a70a:	4680      	mov	r8, r0
 800a70c:	4689      	mov	r9, r1
 800a70e:	492c      	ldr	r1, [pc, #176]	; (800a7c0 <_strtod_l+0x590>)
 800a710:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a714:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a718:	4642      	mov	r2, r8
 800a71a:	464b      	mov	r3, r9
 800a71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	4b27      	ldr	r3, [pc, #156]	; (800a7c4 <_strtod_l+0x594>)
 800a726:	460a      	mov	r2, r1
 800a728:	400b      	ands	r3, r1
 800a72a:	4927      	ldr	r1, [pc, #156]	; (800a7c8 <_strtod_l+0x598>)
 800a72c:	428b      	cmp	r3, r1
 800a72e:	4680      	mov	r8, r0
 800a730:	d8be      	bhi.n	800a6b0 <_strtod_l+0x480>
 800a732:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a736:	428b      	cmp	r3, r1
 800a738:	bf86      	itte	hi
 800a73a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a7cc <_strtod_l+0x59c>
 800a73e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a742:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a746:	2300      	movs	r3, #0
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	e07b      	b.n	800a844 <_strtod_l+0x614>
 800a74c:	07ea      	lsls	r2, r5, #31
 800a74e:	d505      	bpl.n	800a75c <_strtod_l+0x52c>
 800a750:	9b04      	ldr	r3, [sp, #16]
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 ff4f 	bl	80005f8 <__aeabi_dmul>
 800a75a:	2301      	movs	r3, #1
 800a75c:	9a04      	ldr	r2, [sp, #16]
 800a75e:	3208      	adds	r2, #8
 800a760:	f10a 0a01 	add.w	sl, sl, #1
 800a764:	106d      	asrs	r5, r5, #1
 800a766:	9204      	str	r2, [sp, #16]
 800a768:	e7cc      	b.n	800a704 <_strtod_l+0x4d4>
 800a76a:	d0ec      	beq.n	800a746 <_strtod_l+0x516>
 800a76c:	426d      	negs	r5, r5
 800a76e:	f015 020f 	ands.w	r2, r5, #15
 800a772:	d00a      	beq.n	800a78a <_strtod_l+0x55a>
 800a774:	4b11      	ldr	r3, [pc, #68]	; (800a7bc <_strtod_l+0x58c>)
 800a776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f6 f863 	bl	800084c <__aeabi_ddiv>
 800a786:	4680      	mov	r8, r0
 800a788:	4689      	mov	r9, r1
 800a78a:	112d      	asrs	r5, r5, #4
 800a78c:	d0db      	beq.n	800a746 <_strtod_l+0x516>
 800a78e:	2d1f      	cmp	r5, #31
 800a790:	dd1e      	ble.n	800a7d0 <_strtod_l+0x5a0>
 800a792:	2500      	movs	r5, #0
 800a794:	46ab      	mov	fp, r5
 800a796:	9509      	str	r5, [sp, #36]	; 0x24
 800a798:	9505      	str	r5, [sp, #20]
 800a79a:	2322      	movs	r3, #34	; 0x22
 800a79c:	f04f 0800 	mov.w	r8, #0
 800a7a0:	f04f 0900 	mov.w	r9, #0
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	e78d      	b.n	800a6c4 <_strtod_l+0x494>
 800a7a8:	0800cb3d 	.word	0x0800cb3d
 800a7ac:	0800cd64 	.word	0x0800cd64
 800a7b0:	0800cb35 	.word	0x0800cb35
 800a7b4:	0800cb6c 	.word	0x0800cb6c
 800a7b8:	0800cef5 	.word	0x0800cef5
 800a7bc:	0800cc78 	.word	0x0800cc78
 800a7c0:	0800cc50 	.word	0x0800cc50
 800a7c4:	7ff00000 	.word	0x7ff00000
 800a7c8:	7ca00000 	.word	0x7ca00000
 800a7cc:	7fefffff 	.word	0x7fefffff
 800a7d0:	f015 0310 	ands.w	r3, r5, #16
 800a7d4:	bf18      	it	ne
 800a7d6:	236a      	movne	r3, #106	; 0x6a
 800a7d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ab7c <_strtod_l+0x94c>
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	07ea      	lsls	r2, r5, #31
 800a7e6:	d504      	bpl.n	800a7f2 <_strtod_l+0x5c2>
 800a7e8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a7ec:	f7f5 ff04 	bl	80005f8 <__aeabi_dmul>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	106d      	asrs	r5, r5, #1
 800a7f4:	f10a 0a08 	add.w	sl, sl, #8
 800a7f8:	d1f4      	bne.n	800a7e4 <_strtod_l+0x5b4>
 800a7fa:	b10b      	cbz	r3, 800a800 <_strtod_l+0x5d0>
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	b1bb      	cbz	r3, 800a834 <_strtod_l+0x604>
 800a804:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a808:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	4649      	mov	r1, r9
 800a810:	dd10      	ble.n	800a834 <_strtod_l+0x604>
 800a812:	2b1f      	cmp	r3, #31
 800a814:	f340 811e 	ble.w	800aa54 <_strtod_l+0x824>
 800a818:	2b34      	cmp	r3, #52	; 0x34
 800a81a:	bfde      	ittt	le
 800a81c:	f04f 33ff 	movle.w	r3, #4294967295
 800a820:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a824:	4093      	lslle	r3, r2
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	bfcc      	ite	gt
 800a82c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a830:	ea03 0901 	andle.w	r9, r3, r1
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	4640      	mov	r0, r8
 800a83a:	4649      	mov	r1, r9
 800a83c:	f7f6 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800a840:	2800      	cmp	r0, #0
 800a842:	d1a6      	bne.n	800a792 <_strtod_l+0x562>
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a84a:	4633      	mov	r3, r6
 800a84c:	465a      	mov	r2, fp
 800a84e:	4620      	mov	r0, r4
 800a850:	f7ff f8cc 	bl	80099ec <__s2b>
 800a854:	9009      	str	r0, [sp, #36]	; 0x24
 800a856:	2800      	cmp	r0, #0
 800a858:	f43f af2a 	beq.w	800a6b0 <_strtod_l+0x480>
 800a85c:	9a08      	ldr	r2, [sp, #32]
 800a85e:	9b05      	ldr	r3, [sp, #20]
 800a860:	2a00      	cmp	r2, #0
 800a862:	eba3 0307 	sub.w	r3, r3, r7
 800a866:	bfa8      	it	ge
 800a868:	2300      	movge	r3, #0
 800a86a:	930c      	str	r3, [sp, #48]	; 0x30
 800a86c:	2500      	movs	r5, #0
 800a86e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a872:	9312      	str	r3, [sp, #72]	; 0x48
 800a874:	46ab      	mov	fp, r5
 800a876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a878:	4620      	mov	r0, r4
 800a87a:	6859      	ldr	r1, [r3, #4]
 800a87c:	f7ff f80e 	bl	800989c <_Balloc>
 800a880:	9005      	str	r0, [sp, #20]
 800a882:	2800      	cmp	r0, #0
 800a884:	f43f af18 	beq.w	800a6b8 <_strtod_l+0x488>
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	691a      	ldr	r2, [r3, #16]
 800a88c:	3202      	adds	r2, #2
 800a88e:	f103 010c 	add.w	r1, r3, #12
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	300c      	adds	r0, #12
 800a896:	f000 ff4f 	bl	800b738 <memcpy>
 800a89a:	ec49 8b10 	vmov	d0, r8, r9
 800a89e:	aa18      	add	r2, sp, #96	; 0x60
 800a8a0:	a917      	add	r1, sp, #92	; 0x5c
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f7ff fbd6 	bl	800a054 <__d2b>
 800a8a8:	ec49 8b18 	vmov	d8, r8, r9
 800a8ac:	9016      	str	r0, [sp, #88]	; 0x58
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f af02 	beq.w	800a6b8 <_strtod_l+0x488>
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f7ff f930 	bl	8009b1c <__i2b>
 800a8bc:	4683      	mov	fp, r0
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	f43f aefa 	beq.w	800a6b8 <_strtod_l+0x488>
 800a8c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a8c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8c8:	2e00      	cmp	r6, #0
 800a8ca:	bfab      	itete	ge
 800a8cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a8ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a8d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a8d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a8d6:	bfac      	ite	ge
 800a8d8:	eb06 0a03 	addge.w	sl, r6, r3
 800a8dc:	1b9f      	sublt	r7, r3, r6
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	1af6      	subs	r6, r6, r3
 800a8e2:	4416      	add	r6, r2
 800a8e4:	4ba0      	ldr	r3, [pc, #640]	; (800ab68 <_strtod_l+0x938>)
 800a8e6:	3e01      	subs	r6, #1
 800a8e8:	429e      	cmp	r6, r3
 800a8ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8ee:	f280 80c4 	bge.w	800aa7a <_strtod_l+0x84a>
 800a8f2:	1b9b      	subs	r3, r3, r6
 800a8f4:	2b1f      	cmp	r3, #31
 800a8f6:	eba2 0203 	sub.w	r2, r2, r3
 800a8fa:	f04f 0101 	mov.w	r1, #1
 800a8fe:	f300 80b0 	bgt.w	800aa62 <_strtod_l+0x832>
 800a902:	fa01 f303 	lsl.w	r3, r1, r3
 800a906:	930e      	str	r3, [sp, #56]	; 0x38
 800a908:	2300      	movs	r3, #0
 800a90a:	930d      	str	r3, [sp, #52]	; 0x34
 800a90c:	eb0a 0602 	add.w	r6, sl, r2
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	45b2      	cmp	sl, r6
 800a914:	4417      	add	r7, r2
 800a916:	441f      	add	r7, r3
 800a918:	4653      	mov	r3, sl
 800a91a:	bfa8      	it	ge
 800a91c:	4633      	movge	r3, r6
 800a91e:	42bb      	cmp	r3, r7
 800a920:	bfa8      	it	ge
 800a922:	463b      	movge	r3, r7
 800a924:	2b00      	cmp	r3, #0
 800a926:	bfc2      	ittt	gt
 800a928:	1af6      	subgt	r6, r6, r3
 800a92a:	1aff      	subgt	r7, r7, r3
 800a92c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd17      	ble.n	800a966 <_strtod_l+0x736>
 800a936:	4659      	mov	r1, fp
 800a938:	461a      	mov	r2, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f7ff f9ae 	bl	8009c9c <__pow5mult>
 800a940:	4683      	mov	fp, r0
 800a942:	2800      	cmp	r0, #0
 800a944:	f43f aeb8 	beq.w	800a6b8 <_strtod_l+0x488>
 800a948:	4601      	mov	r1, r0
 800a94a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7ff f8fb 	bl	8009b48 <__multiply>
 800a952:	900b      	str	r0, [sp, #44]	; 0x2c
 800a954:	2800      	cmp	r0, #0
 800a956:	f43f aeaf 	beq.w	800a6b8 <_strtod_l+0x488>
 800a95a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a95c:	4620      	mov	r0, r4
 800a95e:	f7fe ffdd 	bl	800991c <_Bfree>
 800a962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a964:	9316      	str	r3, [sp, #88]	; 0x58
 800a966:	2e00      	cmp	r6, #0
 800a968:	f300 808c 	bgt.w	800aa84 <_strtod_l+0x854>
 800a96c:	9b08      	ldr	r3, [sp, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	dd08      	ble.n	800a984 <_strtod_l+0x754>
 800a972:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a974:	9905      	ldr	r1, [sp, #20]
 800a976:	4620      	mov	r0, r4
 800a978:	f7ff f990 	bl	8009c9c <__pow5mult>
 800a97c:	9005      	str	r0, [sp, #20]
 800a97e:	2800      	cmp	r0, #0
 800a980:	f43f ae9a 	beq.w	800a6b8 <_strtod_l+0x488>
 800a984:	2f00      	cmp	r7, #0
 800a986:	dd08      	ble.n	800a99a <_strtod_l+0x76a>
 800a988:	9905      	ldr	r1, [sp, #20]
 800a98a:	463a      	mov	r2, r7
 800a98c:	4620      	mov	r0, r4
 800a98e:	f7ff f9df 	bl	8009d50 <__lshift>
 800a992:	9005      	str	r0, [sp, #20]
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f ae8f 	beq.w	800a6b8 <_strtod_l+0x488>
 800a99a:	f1ba 0f00 	cmp.w	sl, #0
 800a99e:	dd08      	ble.n	800a9b2 <_strtod_l+0x782>
 800a9a0:	4659      	mov	r1, fp
 800a9a2:	4652      	mov	r2, sl
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f7ff f9d3 	bl	8009d50 <__lshift>
 800a9aa:	4683      	mov	fp, r0
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	f43f ae83 	beq.w	800a6b8 <_strtod_l+0x488>
 800a9b2:	9a05      	ldr	r2, [sp, #20]
 800a9b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f7ff fa52 	bl	8009e60 <__mdiff>
 800a9bc:	4605      	mov	r5, r0
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f43f ae7a 	beq.w	800a6b8 <_strtod_l+0x488>
 800a9c4:	68c3      	ldr	r3, [r0, #12]
 800a9c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60c3      	str	r3, [r0, #12]
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	f7ff fa2b 	bl	8009e28 <__mcmp>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	da60      	bge.n	800aa98 <_strtod_l+0x868>
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d8:	ea53 0308 	orrs.w	r3, r3, r8
 800a9dc:	f040 8084 	bne.w	800aae8 <_strtod_l+0x8b8>
 800a9e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d17f      	bne.n	800aae8 <_strtod_l+0x8b8>
 800a9e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9ec:	0d1b      	lsrs	r3, r3, #20
 800a9ee:	051b      	lsls	r3, r3, #20
 800a9f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a9f4:	d978      	bls.n	800aae8 <_strtod_l+0x8b8>
 800a9f6:	696b      	ldr	r3, [r5, #20]
 800a9f8:	b913      	cbnz	r3, 800aa00 <_strtod_l+0x7d0>
 800a9fa:	692b      	ldr	r3, [r5, #16]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	dd73      	ble.n	800aae8 <_strtod_l+0x8b8>
 800aa00:	4629      	mov	r1, r5
 800aa02:	2201      	movs	r2, #1
 800aa04:	4620      	mov	r0, r4
 800aa06:	f7ff f9a3 	bl	8009d50 <__lshift>
 800aa0a:	4659      	mov	r1, fp
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	f7ff fa0b 	bl	8009e28 <__mcmp>
 800aa12:	2800      	cmp	r0, #0
 800aa14:	dd68      	ble.n	800aae8 <_strtod_l+0x8b8>
 800aa16:	9904      	ldr	r1, [sp, #16]
 800aa18:	4a54      	ldr	r2, [pc, #336]	; (800ab6c <_strtod_l+0x93c>)
 800aa1a:	464b      	mov	r3, r9
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	f000 8084 	beq.w	800ab2a <_strtod_l+0x8fa>
 800aa22:	ea02 0109 	and.w	r1, r2, r9
 800aa26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa2a:	dc7e      	bgt.n	800ab2a <_strtod_l+0x8fa>
 800aa2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa30:	f77f aeb3 	ble.w	800a79a <_strtod_l+0x56a>
 800aa34:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <_strtod_l+0x940>)
 800aa36:	4640      	mov	r0, r8
 800aa38:	4649      	mov	r1, r9
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f7f5 fddc 	bl	80005f8 <__aeabi_dmul>
 800aa40:	4b4a      	ldr	r3, [pc, #296]	; (800ab6c <_strtod_l+0x93c>)
 800aa42:	400b      	ands	r3, r1
 800aa44:	4680      	mov	r8, r0
 800aa46:	4689      	mov	r9, r1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f47f ae3f 	bne.w	800a6cc <_strtod_l+0x49c>
 800aa4e:	2322      	movs	r3, #34	; 0x22
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	e63b      	b.n	800a6cc <_strtod_l+0x49c>
 800aa54:	f04f 32ff 	mov.w	r2, #4294967295
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	ea03 0808 	and.w	r8, r3, r8
 800aa60:	e6e8      	b.n	800a834 <_strtod_l+0x604>
 800aa62:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aa66:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aa6a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aa6e:	36e2      	adds	r6, #226	; 0xe2
 800aa70:	fa01 f306 	lsl.w	r3, r1, r6
 800aa74:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aa78:	e748      	b.n	800a90c <_strtod_l+0x6dc>
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aa82:	e743      	b.n	800a90c <_strtod_l+0x6dc>
 800aa84:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa86:	4632      	mov	r2, r6
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f7ff f961 	bl	8009d50 <__lshift>
 800aa8e:	9016      	str	r0, [sp, #88]	; 0x58
 800aa90:	2800      	cmp	r0, #0
 800aa92:	f47f af6b 	bne.w	800a96c <_strtod_l+0x73c>
 800aa96:	e60f      	b.n	800a6b8 <_strtod_l+0x488>
 800aa98:	46ca      	mov	sl, r9
 800aa9a:	d171      	bne.n	800ab80 <_strtod_l+0x950>
 800aa9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaa2:	b352      	cbz	r2, 800aafa <_strtod_l+0x8ca>
 800aaa4:	4a33      	ldr	r2, [pc, #204]	; (800ab74 <_strtod_l+0x944>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d12a      	bne.n	800ab00 <_strtod_l+0x8d0>
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	4641      	mov	r1, r8
 800aaae:	b1fb      	cbz	r3, 800aaf0 <_strtod_l+0x8c0>
 800aab0:	4b2e      	ldr	r3, [pc, #184]	; (800ab6c <_strtod_l+0x93c>)
 800aab2:	ea09 0303 	and.w	r3, r9, r3
 800aab6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295
 800aabe:	d81a      	bhi.n	800aaf6 <_strtod_l+0x8c6>
 800aac0:	0d1b      	lsrs	r3, r3, #20
 800aac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aac6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaca:	4299      	cmp	r1, r3
 800aacc:	d118      	bne.n	800ab00 <_strtod_l+0x8d0>
 800aace:	4b2a      	ldr	r3, [pc, #168]	; (800ab78 <_strtod_l+0x948>)
 800aad0:	459a      	cmp	sl, r3
 800aad2:	d102      	bne.n	800aada <_strtod_l+0x8aa>
 800aad4:	3101      	adds	r1, #1
 800aad6:	f43f adef 	beq.w	800a6b8 <_strtod_l+0x488>
 800aada:	4b24      	ldr	r3, [pc, #144]	; (800ab6c <_strtod_l+0x93c>)
 800aadc:	ea0a 0303 	and.w	r3, sl, r3
 800aae0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aae4:	f04f 0800 	mov.w	r8, #0
 800aae8:	9b04      	ldr	r3, [sp, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1a2      	bne.n	800aa34 <_strtod_l+0x804>
 800aaee:	e5ed      	b.n	800a6cc <_strtod_l+0x49c>
 800aaf0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf4:	e7e9      	b.n	800aaca <_strtod_l+0x89a>
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	e7e7      	b.n	800aaca <_strtod_l+0x89a>
 800aafa:	ea53 0308 	orrs.w	r3, r3, r8
 800aafe:	d08a      	beq.n	800aa16 <_strtod_l+0x7e6>
 800ab00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab02:	b1e3      	cbz	r3, 800ab3e <_strtod_l+0x90e>
 800ab04:	ea13 0f0a 	tst.w	r3, sl
 800ab08:	d0ee      	beq.n	800aae8 <_strtod_l+0x8b8>
 800ab0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab0c:	9a04      	ldr	r2, [sp, #16]
 800ab0e:	4640      	mov	r0, r8
 800ab10:	4649      	mov	r1, r9
 800ab12:	b1c3      	cbz	r3, 800ab46 <_strtod_l+0x916>
 800ab14:	f7ff fb6f 	bl	800a1f6 <sulp>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	ec51 0b18 	vmov	r0, r1, d8
 800ab20:	f7f5 fbb4 	bl	800028c <__adddf3>
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	e7de      	b.n	800aae8 <_strtod_l+0x8b8>
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab30:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ab34:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ab38:	f04f 38ff 	mov.w	r8, #4294967295
 800ab3c:	e7d4      	b.n	800aae8 <_strtod_l+0x8b8>
 800ab3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab40:	ea13 0f08 	tst.w	r3, r8
 800ab44:	e7e0      	b.n	800ab08 <_strtod_l+0x8d8>
 800ab46:	f7ff fb56 	bl	800a1f6 <sulp>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	ec51 0b18 	vmov	r0, r1, d8
 800ab52:	f7f5 fb99 	bl	8000288 <__aeabi_dsub>
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4680      	mov	r8, r0
 800ab5c:	4689      	mov	r9, r1
 800ab5e:	f7f5 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d0c0      	beq.n	800aae8 <_strtod_l+0x8b8>
 800ab66:	e618      	b.n	800a79a <_strtod_l+0x56a>
 800ab68:	fffffc02 	.word	0xfffffc02
 800ab6c:	7ff00000 	.word	0x7ff00000
 800ab70:	39500000 	.word	0x39500000
 800ab74:	000fffff 	.word	0x000fffff
 800ab78:	7fefffff 	.word	0x7fefffff
 800ab7c:	0800cd78 	.word	0x0800cd78
 800ab80:	4659      	mov	r1, fp
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7ff fac0 	bl	800a108 <__ratio>
 800ab88:	ec57 6b10 	vmov	r6, r7, d0
 800ab8c:	ee10 0a10 	vmov	r0, s0
 800ab90:	2200      	movs	r2, #0
 800ab92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab96:	4639      	mov	r1, r7
 800ab98:	f7f5 ffaa 	bl	8000af0 <__aeabi_dcmple>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d071      	beq.n	800ac84 <_strtod_l+0xa54>
 800aba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d17c      	bne.n	800aca0 <_strtod_l+0xa70>
 800aba6:	f1b8 0f00 	cmp.w	r8, #0
 800abaa:	d15a      	bne.n	800ac62 <_strtod_l+0xa32>
 800abac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d15d      	bne.n	800ac70 <_strtod_l+0xa40>
 800abb4:	4b90      	ldr	r3, [pc, #576]	; (800adf8 <_strtod_l+0xbc8>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	4630      	mov	r0, r6
 800abba:	4639      	mov	r1, r7
 800abbc:	f7f5 ff8e 	bl	8000adc <__aeabi_dcmplt>
 800abc0:	2800      	cmp	r0, #0
 800abc2:	d15c      	bne.n	800ac7e <_strtod_l+0xa4e>
 800abc4:	4630      	mov	r0, r6
 800abc6:	4639      	mov	r1, r7
 800abc8:	4b8c      	ldr	r3, [pc, #560]	; (800adfc <_strtod_l+0xbcc>)
 800abca:	2200      	movs	r2, #0
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4606      	mov	r6, r0
 800abd2:	460f      	mov	r7, r1
 800abd4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800abd8:	9606      	str	r6, [sp, #24]
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abe0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800abe4:	4b86      	ldr	r3, [pc, #536]	; (800ae00 <_strtod_l+0xbd0>)
 800abe6:	ea0a 0303 	and.w	r3, sl, r3
 800abea:	930d      	str	r3, [sp, #52]	; 0x34
 800abec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800abee:	4b85      	ldr	r3, [pc, #532]	; (800ae04 <_strtod_l+0xbd4>)
 800abf0:	429a      	cmp	r2, r3
 800abf2:	f040 8090 	bne.w	800ad16 <_strtod_l+0xae6>
 800abf6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800abfa:	ec49 8b10 	vmov	d0, r8, r9
 800abfe:	f7ff f9b9 	bl	8009f74 <__ulp>
 800ac02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac06:	ec51 0b10 	vmov	r0, r1, d0
 800ac0a:	f7f5 fcf5 	bl	80005f8 <__aeabi_dmul>
 800ac0e:	4642      	mov	r2, r8
 800ac10:	464b      	mov	r3, r9
 800ac12:	f7f5 fb3b 	bl	800028c <__adddf3>
 800ac16:	460b      	mov	r3, r1
 800ac18:	4979      	ldr	r1, [pc, #484]	; (800ae00 <_strtod_l+0xbd0>)
 800ac1a:	4a7b      	ldr	r2, [pc, #492]	; (800ae08 <_strtod_l+0xbd8>)
 800ac1c:	4019      	ands	r1, r3
 800ac1e:	4291      	cmp	r1, r2
 800ac20:	4680      	mov	r8, r0
 800ac22:	d944      	bls.n	800acae <_strtod_l+0xa7e>
 800ac24:	ee18 2a90 	vmov	r2, s17
 800ac28:	4b78      	ldr	r3, [pc, #480]	; (800ae0c <_strtod_l+0xbdc>)
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d104      	bne.n	800ac38 <_strtod_l+0xa08>
 800ac2e:	ee18 3a10 	vmov	r3, s16
 800ac32:	3301      	adds	r3, #1
 800ac34:	f43f ad40 	beq.w	800a6b8 <_strtod_l+0x488>
 800ac38:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ae0c <_strtod_l+0xbdc>
 800ac3c:	f04f 38ff 	mov.w	r8, #4294967295
 800ac40:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac42:	4620      	mov	r0, r4
 800ac44:	f7fe fe6a 	bl	800991c <_Bfree>
 800ac48:	9905      	ldr	r1, [sp, #20]
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7fe fe66 	bl	800991c <_Bfree>
 800ac50:	4659      	mov	r1, fp
 800ac52:	4620      	mov	r0, r4
 800ac54:	f7fe fe62 	bl	800991c <_Bfree>
 800ac58:	4629      	mov	r1, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	f7fe fe5e 	bl	800991c <_Bfree>
 800ac60:	e609      	b.n	800a876 <_strtod_l+0x646>
 800ac62:	f1b8 0f01 	cmp.w	r8, #1
 800ac66:	d103      	bne.n	800ac70 <_strtod_l+0xa40>
 800ac68:	f1b9 0f00 	cmp.w	r9, #0
 800ac6c:	f43f ad95 	beq.w	800a79a <_strtod_l+0x56a>
 800ac70:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800adc8 <_strtod_l+0xb98>
 800ac74:	4f60      	ldr	r7, [pc, #384]	; (800adf8 <_strtod_l+0xbc8>)
 800ac76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	e7ae      	b.n	800abdc <_strtod_l+0x9ac>
 800ac7e:	4f5f      	ldr	r7, [pc, #380]	; (800adfc <_strtod_l+0xbcc>)
 800ac80:	2600      	movs	r6, #0
 800ac82:	e7a7      	b.n	800abd4 <_strtod_l+0x9a4>
 800ac84:	4b5d      	ldr	r3, [pc, #372]	; (800adfc <_strtod_l+0xbcc>)
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f7f5 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ac90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d09c      	beq.n	800abd4 <_strtod_l+0x9a4>
 800ac9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac9e:	e79d      	b.n	800abdc <_strtod_l+0x9ac>
 800aca0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800add0 <_strtod_l+0xba0>
 800aca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aca8:	ec57 6b17 	vmov	r6, r7, d7
 800acac:	e796      	b.n	800abdc <_strtod_l+0x9ac>
 800acae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	46ca      	mov	sl, r9
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1c2      	bne.n	800ac40 <_strtod_l+0xa10>
 800acba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acc0:	0d1b      	lsrs	r3, r3, #20
 800acc2:	051b      	lsls	r3, r3, #20
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d1bb      	bne.n	800ac40 <_strtod_l+0xa10>
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fff4 	bl	8000cb8 <__aeabi_d2lz>
 800acd0:	f7f5 fc64 	bl	800059c <__aeabi_l2d>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ace2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ace6:	ea43 0308 	orr.w	r3, r3, r8
 800acea:	4313      	orrs	r3, r2
 800acec:	4606      	mov	r6, r0
 800acee:	460f      	mov	r7, r1
 800acf0:	d054      	beq.n	800ad9c <_strtod_l+0xb6c>
 800acf2:	a339      	add	r3, pc, #228	; (adr r3, 800add8 <_strtod_l+0xba8>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fef0 	bl	8000adc <__aeabi_dcmplt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f47f ace5 	bne.w	800a6cc <_strtod_l+0x49c>
 800ad02:	a337      	add	r3, pc, #220	; (adr r3, 800ade0 <_strtod_l+0xbb0>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 ff04 	bl	8000b18 <__aeabi_dcmpgt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d095      	beq.n	800ac40 <_strtod_l+0xa10>
 800ad14:	e4da      	b.n	800a6cc <_strtod_l+0x49c>
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	b333      	cbz	r3, 800ad68 <_strtod_l+0xb38>
 800ad1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad20:	d822      	bhi.n	800ad68 <_strtod_l+0xb38>
 800ad22:	a331      	add	r3, pc, #196	; (adr r3, 800ade8 <_strtod_l+0xbb8>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fee0 	bl	8000af0 <__aeabi_dcmple>
 800ad30:	b1a0      	cbz	r0, 800ad5c <_strtod_l+0xb2c>
 800ad32:	4639      	mov	r1, r7
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7f5 ff37 	bl	8000ba8 <__aeabi_d2uiz>
 800ad3a:	2801      	cmp	r0, #1
 800ad3c:	bf38      	it	cc
 800ad3e:	2001      	movcc	r0, #1
 800ad40:	f7f5 fbe0 	bl	8000504 <__aeabi_ui2d>
 800ad44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	bb23      	cbnz	r3, 800ad96 <_strtod_l+0xb66>
 800ad4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad50:	9010      	str	r0, [sp, #64]	; 0x40
 800ad52:	9311      	str	r3, [sp, #68]	; 0x44
 800ad54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ad5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad70:	eef0 0a68 	vmov.f32	s1, s17
 800ad74:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ad78:	f7ff f8fc 	bl	8009f74 <__ulp>
 800ad7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ad80:	ec53 2b10 	vmov	r2, r3, d0
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	ec53 2b18 	vmov	r2, r3, d8
 800ad8c:	f7f5 fa7e 	bl	800028c <__adddf3>
 800ad90:	4680      	mov	r8, r0
 800ad92:	4689      	mov	r9, r1
 800ad94:	e78d      	b.n	800acb2 <_strtod_l+0xa82>
 800ad96:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ad9a:	e7db      	b.n	800ad54 <_strtod_l+0xb24>
 800ad9c:	a314      	add	r3, pc, #80	; (adr r3, 800adf0 <_strtod_l+0xbc0>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f7f5 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800ada6:	e7b3      	b.n	800ad10 <_strtod_l+0xae0>
 800ada8:	2300      	movs	r3, #0
 800adaa:	930a      	str	r3, [sp, #40]	; 0x28
 800adac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800adae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	f7ff ba7c 	b.w	800a2ae <_strtod_l+0x7e>
 800adb6:	2a65      	cmp	r2, #101	; 0x65
 800adb8:	f43f ab75 	beq.w	800a4a6 <_strtod_l+0x276>
 800adbc:	2a45      	cmp	r2, #69	; 0x45
 800adbe:	f43f ab72 	beq.w	800a4a6 <_strtod_l+0x276>
 800adc2:	2301      	movs	r3, #1
 800adc4:	f7ff bbaa 	b.w	800a51c <_strtod_l+0x2ec>
 800adc8:	00000000 	.word	0x00000000
 800adcc:	bff00000 	.word	0xbff00000
 800add0:	00000000 	.word	0x00000000
 800add4:	3ff00000 	.word	0x3ff00000
 800add8:	94a03595 	.word	0x94a03595
 800addc:	3fdfffff 	.word	0x3fdfffff
 800ade0:	35afe535 	.word	0x35afe535
 800ade4:	3fe00000 	.word	0x3fe00000
 800ade8:	ffc00000 	.word	0xffc00000
 800adec:	41dfffff 	.word	0x41dfffff
 800adf0:	94a03595 	.word	0x94a03595
 800adf4:	3fcfffff 	.word	0x3fcfffff
 800adf8:	3ff00000 	.word	0x3ff00000
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	7ff00000 	.word	0x7ff00000
 800ae04:	7fe00000 	.word	0x7fe00000
 800ae08:	7c9fffff 	.word	0x7c9fffff
 800ae0c:	7fefffff 	.word	0x7fefffff

0800ae10 <_strtod_r>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <_strtod_r+0x8>)
 800ae12:	f7ff ba0d 	b.w	800a230 <_strtod_l>
 800ae16:	bf00      	nop
 800ae18:	20000068 	.word	0x20000068

0800ae1c <_strtol_l.constprop.0>:
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae22:	d001      	beq.n	800ae28 <_strtol_l.constprop.0+0xc>
 800ae24:	2b24      	cmp	r3, #36	; 0x24
 800ae26:	d906      	bls.n	800ae36 <_strtol_l.constprop.0+0x1a>
 800ae28:	f7fd fd88 	bl	800893c <__errno>
 800ae2c:	2316      	movs	r3, #22
 800ae2e:	6003      	str	r3, [r0, #0]
 800ae30:	2000      	movs	r0, #0
 800ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800af1c <_strtol_l.constprop.0+0x100>
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	462e      	mov	r6, r5
 800ae3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ae46:	f017 0708 	ands.w	r7, r7, #8
 800ae4a:	d1f7      	bne.n	800ae3c <_strtol_l.constprop.0+0x20>
 800ae4c:	2c2d      	cmp	r4, #45	; 0x2d
 800ae4e:	d132      	bne.n	800aeb6 <_strtol_l.constprop.0+0x9a>
 800ae50:	782c      	ldrb	r4, [r5, #0]
 800ae52:	2701      	movs	r7, #1
 800ae54:	1cb5      	adds	r5, r6, #2
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d05b      	beq.n	800af12 <_strtol_l.constprop.0+0xf6>
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d109      	bne.n	800ae72 <_strtol_l.constprop.0+0x56>
 800ae5e:	2c30      	cmp	r4, #48	; 0x30
 800ae60:	d107      	bne.n	800ae72 <_strtol_l.constprop.0+0x56>
 800ae62:	782c      	ldrb	r4, [r5, #0]
 800ae64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae68:	2c58      	cmp	r4, #88	; 0x58
 800ae6a:	d14d      	bne.n	800af08 <_strtol_l.constprop.0+0xec>
 800ae6c:	786c      	ldrb	r4, [r5, #1]
 800ae6e:	2310      	movs	r3, #16
 800ae70:	3502      	adds	r5, #2
 800ae72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ae76:	f108 38ff 	add.w	r8, r8, #4294967295
 800ae7a:	f04f 0e00 	mov.w	lr, #0
 800ae7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ae82:	4676      	mov	r6, lr
 800ae84:	fb03 8a19 	mls	sl, r3, r9, r8
 800ae88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ae8c:	f1bc 0f09 	cmp.w	ip, #9
 800ae90:	d816      	bhi.n	800aec0 <_strtol_l.constprop.0+0xa4>
 800ae92:	4664      	mov	r4, ip
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	dd24      	ble.n	800aee2 <_strtol_l.constprop.0+0xc6>
 800ae98:	f1be 3fff 	cmp.w	lr, #4294967295
 800ae9c:	d008      	beq.n	800aeb0 <_strtol_l.constprop.0+0x94>
 800ae9e:	45b1      	cmp	r9, r6
 800aea0:	d31c      	bcc.n	800aedc <_strtol_l.constprop.0+0xc0>
 800aea2:	d101      	bne.n	800aea8 <_strtol_l.constprop.0+0x8c>
 800aea4:	45a2      	cmp	sl, r4
 800aea6:	db19      	blt.n	800aedc <_strtol_l.constprop.0+0xc0>
 800aea8:	fb06 4603 	mla	r6, r6, r3, r4
 800aeac:	f04f 0e01 	mov.w	lr, #1
 800aeb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aeb4:	e7e8      	b.n	800ae88 <_strtol_l.constprop.0+0x6c>
 800aeb6:	2c2b      	cmp	r4, #43	; 0x2b
 800aeb8:	bf04      	itt	eq
 800aeba:	782c      	ldrbeq	r4, [r5, #0]
 800aebc:	1cb5      	addeq	r5, r6, #2
 800aebe:	e7ca      	b.n	800ae56 <_strtol_l.constprop.0+0x3a>
 800aec0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aec4:	f1bc 0f19 	cmp.w	ip, #25
 800aec8:	d801      	bhi.n	800aece <_strtol_l.constprop.0+0xb2>
 800aeca:	3c37      	subs	r4, #55	; 0x37
 800aecc:	e7e2      	b.n	800ae94 <_strtol_l.constprop.0+0x78>
 800aece:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aed2:	f1bc 0f19 	cmp.w	ip, #25
 800aed6:	d804      	bhi.n	800aee2 <_strtol_l.constprop.0+0xc6>
 800aed8:	3c57      	subs	r4, #87	; 0x57
 800aeda:	e7db      	b.n	800ae94 <_strtol_l.constprop.0+0x78>
 800aedc:	f04f 3eff 	mov.w	lr, #4294967295
 800aee0:	e7e6      	b.n	800aeb0 <_strtol_l.constprop.0+0x94>
 800aee2:	f1be 3fff 	cmp.w	lr, #4294967295
 800aee6:	d105      	bne.n	800aef4 <_strtol_l.constprop.0+0xd8>
 800aee8:	2322      	movs	r3, #34	; 0x22
 800aeea:	6003      	str	r3, [r0, #0]
 800aeec:	4646      	mov	r6, r8
 800aeee:	b942      	cbnz	r2, 800af02 <_strtol_l.constprop.0+0xe6>
 800aef0:	4630      	mov	r0, r6
 800aef2:	e79e      	b.n	800ae32 <_strtol_l.constprop.0+0x16>
 800aef4:	b107      	cbz	r7, 800aef8 <_strtol_l.constprop.0+0xdc>
 800aef6:	4276      	negs	r6, r6
 800aef8:	2a00      	cmp	r2, #0
 800aefa:	d0f9      	beq.n	800aef0 <_strtol_l.constprop.0+0xd4>
 800aefc:	f1be 0f00 	cmp.w	lr, #0
 800af00:	d000      	beq.n	800af04 <_strtol_l.constprop.0+0xe8>
 800af02:	1e69      	subs	r1, r5, #1
 800af04:	6011      	str	r1, [r2, #0]
 800af06:	e7f3      	b.n	800aef0 <_strtol_l.constprop.0+0xd4>
 800af08:	2430      	movs	r4, #48	; 0x30
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1b1      	bne.n	800ae72 <_strtol_l.constprop.0+0x56>
 800af0e:	2308      	movs	r3, #8
 800af10:	e7af      	b.n	800ae72 <_strtol_l.constprop.0+0x56>
 800af12:	2c30      	cmp	r4, #48	; 0x30
 800af14:	d0a5      	beq.n	800ae62 <_strtol_l.constprop.0+0x46>
 800af16:	230a      	movs	r3, #10
 800af18:	e7ab      	b.n	800ae72 <_strtol_l.constprop.0+0x56>
 800af1a:	bf00      	nop
 800af1c:	0800cda1 	.word	0x0800cda1

0800af20 <_strtol_r>:
 800af20:	f7ff bf7c 	b.w	800ae1c <_strtol_l.constprop.0>

0800af24 <__ssputs_r>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	688e      	ldr	r6, [r1, #8]
 800af2a:	461f      	mov	r7, r3
 800af2c:	42be      	cmp	r6, r7
 800af2e:	680b      	ldr	r3, [r1, #0]
 800af30:	4682      	mov	sl, r0
 800af32:	460c      	mov	r4, r1
 800af34:	4690      	mov	r8, r2
 800af36:	d82c      	bhi.n	800af92 <__ssputs_r+0x6e>
 800af38:	898a      	ldrh	r2, [r1, #12]
 800af3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af3e:	d026      	beq.n	800af8e <__ssputs_r+0x6a>
 800af40:	6965      	ldr	r5, [r4, #20]
 800af42:	6909      	ldr	r1, [r1, #16]
 800af44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af48:	eba3 0901 	sub.w	r9, r3, r1
 800af4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af50:	1c7b      	adds	r3, r7, #1
 800af52:	444b      	add	r3, r9
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	429d      	cmp	r5, r3
 800af58:	bf38      	it	cc
 800af5a:	461d      	movcc	r5, r3
 800af5c:	0553      	lsls	r3, r2, #21
 800af5e:	d527      	bpl.n	800afb0 <__ssputs_r+0x8c>
 800af60:	4629      	mov	r1, r5
 800af62:	f7fe fc0f 	bl	8009784 <_malloc_r>
 800af66:	4606      	mov	r6, r0
 800af68:	b360      	cbz	r0, 800afc4 <__ssputs_r+0xa0>
 800af6a:	6921      	ldr	r1, [r4, #16]
 800af6c:	464a      	mov	r2, r9
 800af6e:	f000 fbe3 	bl	800b738 <memcpy>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	6126      	str	r6, [r4, #16]
 800af80:	6165      	str	r5, [r4, #20]
 800af82:	444e      	add	r6, r9
 800af84:	eba5 0509 	sub.w	r5, r5, r9
 800af88:	6026      	str	r6, [r4, #0]
 800af8a:	60a5      	str	r5, [r4, #8]
 800af8c:	463e      	mov	r6, r7
 800af8e:	42be      	cmp	r6, r7
 800af90:	d900      	bls.n	800af94 <__ssputs_r+0x70>
 800af92:	463e      	mov	r6, r7
 800af94:	6820      	ldr	r0, [r4, #0]
 800af96:	4632      	mov	r2, r6
 800af98:	4641      	mov	r1, r8
 800af9a:	f000 fb6f 	bl	800b67c <memmove>
 800af9e:	68a3      	ldr	r3, [r4, #8]
 800afa0:	1b9b      	subs	r3, r3, r6
 800afa2:	60a3      	str	r3, [r4, #8]
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	4433      	add	r3, r6
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	2000      	movs	r0, #0
 800afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb0:	462a      	mov	r2, r5
 800afb2:	f000 ff76 	bl	800bea2 <_realloc_r>
 800afb6:	4606      	mov	r6, r0
 800afb8:	2800      	cmp	r0, #0
 800afba:	d1e0      	bne.n	800af7e <__ssputs_r+0x5a>
 800afbc:	6921      	ldr	r1, [r4, #16]
 800afbe:	4650      	mov	r0, sl
 800afc0:	f7fe fb6c 	bl	800969c <_free_r>
 800afc4:	230c      	movs	r3, #12
 800afc6:	f8ca 3000 	str.w	r3, [sl]
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd0:	81a3      	strh	r3, [r4, #12]
 800afd2:	f04f 30ff 	mov.w	r0, #4294967295
 800afd6:	e7e9      	b.n	800afac <__ssputs_r+0x88>

0800afd8 <_svfiprintf_r>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	4698      	mov	r8, r3
 800afde:	898b      	ldrh	r3, [r1, #12]
 800afe0:	061b      	lsls	r3, r3, #24
 800afe2:	b09d      	sub	sp, #116	; 0x74
 800afe4:	4607      	mov	r7, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	4614      	mov	r4, r2
 800afea:	d50e      	bpl.n	800b00a <_svfiprintf_r+0x32>
 800afec:	690b      	ldr	r3, [r1, #16]
 800afee:	b963      	cbnz	r3, 800b00a <_svfiprintf_r+0x32>
 800aff0:	2140      	movs	r1, #64	; 0x40
 800aff2:	f7fe fbc7 	bl	8009784 <_malloc_r>
 800aff6:	6028      	str	r0, [r5, #0]
 800aff8:	6128      	str	r0, [r5, #16]
 800affa:	b920      	cbnz	r0, 800b006 <_svfiprintf_r+0x2e>
 800affc:	230c      	movs	r3, #12
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	e0d0      	b.n	800b1a8 <_svfiprintf_r+0x1d0>
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	616b      	str	r3, [r5, #20]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9309      	str	r3, [sp, #36]	; 0x24
 800b00e:	2320      	movs	r3, #32
 800b010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b014:	f8cd 800c 	str.w	r8, [sp, #12]
 800b018:	2330      	movs	r3, #48	; 0x30
 800b01a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1c0 <_svfiprintf_r+0x1e8>
 800b01e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b022:	f04f 0901 	mov.w	r9, #1
 800b026:	4623      	mov	r3, r4
 800b028:	469a      	mov	sl, r3
 800b02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b02e:	b10a      	cbz	r2, 800b034 <_svfiprintf_r+0x5c>
 800b030:	2a25      	cmp	r2, #37	; 0x25
 800b032:	d1f9      	bne.n	800b028 <_svfiprintf_r+0x50>
 800b034:	ebba 0b04 	subs.w	fp, sl, r4
 800b038:	d00b      	beq.n	800b052 <_svfiprintf_r+0x7a>
 800b03a:	465b      	mov	r3, fp
 800b03c:	4622      	mov	r2, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	4638      	mov	r0, r7
 800b042:	f7ff ff6f 	bl	800af24 <__ssputs_r>
 800b046:	3001      	adds	r0, #1
 800b048:	f000 80a9 	beq.w	800b19e <_svfiprintf_r+0x1c6>
 800b04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04e:	445a      	add	r2, fp
 800b050:	9209      	str	r2, [sp, #36]	; 0x24
 800b052:	f89a 3000 	ldrb.w	r3, [sl]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80a1 	beq.w	800b19e <_svfiprintf_r+0x1c6>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f04f 32ff 	mov.w	r2, #4294967295
 800b062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b066:	f10a 0a01 	add.w	sl, sl, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	9307      	str	r3, [sp, #28]
 800b06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b072:	931a      	str	r3, [sp, #104]	; 0x68
 800b074:	4654      	mov	r4, sl
 800b076:	2205      	movs	r2, #5
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	4850      	ldr	r0, [pc, #320]	; (800b1c0 <_svfiprintf_r+0x1e8>)
 800b07e:	f7f5 f8a7 	bl	80001d0 <memchr>
 800b082:	9a04      	ldr	r2, [sp, #16]
 800b084:	b9d8      	cbnz	r0, 800b0be <_svfiprintf_r+0xe6>
 800b086:	06d0      	lsls	r0, r2, #27
 800b088:	bf44      	itt	mi
 800b08a:	2320      	movmi	r3, #32
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b090:	0711      	lsls	r1, r2, #28
 800b092:	bf44      	itt	mi
 800b094:	232b      	movmi	r3, #43	; 0x2b
 800b096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09a:	f89a 3000 	ldrb.w	r3, [sl]
 800b09e:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a0:	d015      	beq.n	800b0ce <_svfiprintf_r+0xf6>
 800b0a2:	9a07      	ldr	r2, [sp, #28]
 800b0a4:	4654      	mov	r4, sl
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f04f 0c0a 	mov.w	ip, #10
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b2:	3b30      	subs	r3, #48	; 0x30
 800b0b4:	2b09      	cmp	r3, #9
 800b0b6:	d94d      	bls.n	800b154 <_svfiprintf_r+0x17c>
 800b0b8:	b1b0      	cbz	r0, 800b0e8 <_svfiprintf_r+0x110>
 800b0ba:	9207      	str	r2, [sp, #28]
 800b0bc:	e014      	b.n	800b0e8 <_svfiprintf_r+0x110>
 800b0be:	eba0 0308 	sub.w	r3, r0, r8
 800b0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	9304      	str	r3, [sp, #16]
 800b0ca:	46a2      	mov	sl, r4
 800b0cc:	e7d2      	b.n	800b074 <_svfiprintf_r+0x9c>
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	9103      	str	r1, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfbb      	ittet	lt
 800b0da:	425b      	neglt	r3, r3
 800b0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e0:	9307      	strge	r3, [sp, #28]
 800b0e2:	9307      	strlt	r3, [sp, #28]
 800b0e4:	bfb8      	it	lt
 800b0e6:	9204      	strlt	r2, [sp, #16]
 800b0e8:	7823      	ldrb	r3, [r4, #0]
 800b0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ec:	d10c      	bne.n	800b108 <_svfiprintf_r+0x130>
 800b0ee:	7863      	ldrb	r3, [r4, #1]
 800b0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f2:	d134      	bne.n	800b15e <_svfiprintf_r+0x186>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	1d1a      	adds	r2, r3, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	9203      	str	r2, [sp, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	bfb8      	it	lt
 800b100:	f04f 33ff 	movlt.w	r3, #4294967295
 800b104:	3402      	adds	r4, #2
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1d0 <_svfiprintf_r+0x1f8>
 800b10c:	7821      	ldrb	r1, [r4, #0]
 800b10e:	2203      	movs	r2, #3
 800b110:	4650      	mov	r0, sl
 800b112:	f7f5 f85d 	bl	80001d0 <memchr>
 800b116:	b138      	cbz	r0, 800b128 <_svfiprintf_r+0x150>
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	eba0 000a 	sub.w	r0, r0, sl
 800b11e:	2240      	movs	r2, #64	; 0x40
 800b120:	4082      	lsls	r2, r0
 800b122:	4313      	orrs	r3, r2
 800b124:	3401      	adds	r4, #1
 800b126:	9304      	str	r3, [sp, #16]
 800b128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12c:	4825      	ldr	r0, [pc, #148]	; (800b1c4 <_svfiprintf_r+0x1ec>)
 800b12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b132:	2206      	movs	r2, #6
 800b134:	f7f5 f84c 	bl	80001d0 <memchr>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d038      	beq.n	800b1ae <_svfiprintf_r+0x1d6>
 800b13c:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <_svfiprintf_r+0x1f0>)
 800b13e:	bb1b      	cbnz	r3, 800b188 <_svfiprintf_r+0x1b0>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	3307      	adds	r3, #7
 800b144:	f023 0307 	bic.w	r3, r3, #7
 800b148:	3308      	adds	r3, #8
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14e:	4433      	add	r3, r6
 800b150:	9309      	str	r3, [sp, #36]	; 0x24
 800b152:	e768      	b.n	800b026 <_svfiprintf_r+0x4e>
 800b154:	fb0c 3202 	mla	r2, ip, r2, r3
 800b158:	460c      	mov	r4, r1
 800b15a:	2001      	movs	r0, #1
 800b15c:	e7a6      	b.n	800b0ac <_svfiprintf_r+0xd4>
 800b15e:	2300      	movs	r3, #0
 800b160:	3401      	adds	r4, #1
 800b162:	9305      	str	r3, [sp, #20]
 800b164:	4619      	mov	r1, r3
 800b166:	f04f 0c0a 	mov.w	ip, #10
 800b16a:	4620      	mov	r0, r4
 800b16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b170:	3a30      	subs	r2, #48	; 0x30
 800b172:	2a09      	cmp	r2, #9
 800b174:	d903      	bls.n	800b17e <_svfiprintf_r+0x1a6>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0c6      	beq.n	800b108 <_svfiprintf_r+0x130>
 800b17a:	9105      	str	r1, [sp, #20]
 800b17c:	e7c4      	b.n	800b108 <_svfiprintf_r+0x130>
 800b17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b182:	4604      	mov	r4, r0
 800b184:	2301      	movs	r3, #1
 800b186:	e7f0      	b.n	800b16a <_svfiprintf_r+0x192>
 800b188:	ab03      	add	r3, sp, #12
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	462a      	mov	r2, r5
 800b18e:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <_svfiprintf_r+0x1f4>)
 800b190:	a904      	add	r1, sp, #16
 800b192:	4638      	mov	r0, r7
 800b194:	f7fc fb4e 	bl	8007834 <_printf_float>
 800b198:	1c42      	adds	r2, r0, #1
 800b19a:	4606      	mov	r6, r0
 800b19c:	d1d6      	bne.n	800b14c <_svfiprintf_r+0x174>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	065b      	lsls	r3, r3, #25
 800b1a2:	f53f af2d 	bmi.w	800b000 <_svfiprintf_r+0x28>
 800b1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1a8:	b01d      	add	sp, #116	; 0x74
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <_svfiprintf_r+0x1f4>)
 800b1b6:	a904      	add	r1, sp, #16
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7fc fddf 	bl	8007d7c <_printf_i>
 800b1be:	e7eb      	b.n	800b198 <_svfiprintf_r+0x1c0>
 800b1c0:	0800cea1 	.word	0x0800cea1
 800b1c4:	0800ceab 	.word	0x0800ceab
 800b1c8:	08007835 	.word	0x08007835
 800b1cc:	0800af25 	.word	0x0800af25
 800b1d0:	0800cea7 	.word	0x0800cea7

0800b1d4 <__sfputc_r>:
 800b1d4:	6893      	ldr	r3, [r2, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	b410      	push	{r4}
 800b1dc:	6093      	str	r3, [r2, #8]
 800b1de:	da08      	bge.n	800b1f2 <__sfputc_r+0x1e>
 800b1e0:	6994      	ldr	r4, [r2, #24]
 800b1e2:	42a3      	cmp	r3, r4
 800b1e4:	db01      	blt.n	800b1ea <__sfputc_r+0x16>
 800b1e6:	290a      	cmp	r1, #10
 800b1e8:	d103      	bne.n	800b1f2 <__sfputc_r+0x1e>
 800b1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ee:	f7fd babe 	b.w	800876e <__swbuf_r>
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	1c58      	adds	r0, r3, #1
 800b1f6:	6010      	str	r0, [r2, #0]
 800b1f8:	7019      	strb	r1, [r3, #0]
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <__sfputs_r>:
 800b202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	18d5      	adds	r5, r2, r3
 800b20c:	42ac      	cmp	r4, r5
 800b20e:	d101      	bne.n	800b214 <__sfputs_r+0x12>
 800b210:	2000      	movs	r0, #0
 800b212:	e007      	b.n	800b224 <__sfputs_r+0x22>
 800b214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b218:	463a      	mov	r2, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ffda 	bl	800b1d4 <__sfputc_r>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d1f3      	bne.n	800b20c <__sfputs_r+0xa>
 800b224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b228 <_vfiprintf_r>:
 800b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22c:	460d      	mov	r5, r1
 800b22e:	b09d      	sub	sp, #116	; 0x74
 800b230:	4614      	mov	r4, r2
 800b232:	4698      	mov	r8, r3
 800b234:	4606      	mov	r6, r0
 800b236:	b118      	cbz	r0, 800b240 <_vfiprintf_r+0x18>
 800b238:	6a03      	ldr	r3, [r0, #32]
 800b23a:	b90b      	cbnz	r3, 800b240 <_vfiprintf_r+0x18>
 800b23c:	f7fd f95c 	bl	80084f8 <__sinit>
 800b240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b242:	07d9      	lsls	r1, r3, #31
 800b244:	d405      	bmi.n	800b252 <_vfiprintf_r+0x2a>
 800b246:	89ab      	ldrh	r3, [r5, #12]
 800b248:	059a      	lsls	r2, r3, #22
 800b24a:	d402      	bmi.n	800b252 <_vfiprintf_r+0x2a>
 800b24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24e:	f7fd fba0 	bl	8008992 <__retarget_lock_acquire_recursive>
 800b252:	89ab      	ldrh	r3, [r5, #12]
 800b254:	071b      	lsls	r3, r3, #28
 800b256:	d501      	bpl.n	800b25c <_vfiprintf_r+0x34>
 800b258:	692b      	ldr	r3, [r5, #16]
 800b25a:	b99b      	cbnz	r3, 800b284 <_vfiprintf_r+0x5c>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4630      	mov	r0, r6
 800b260:	f7fd fac2 	bl	80087e8 <__swsetup_r>
 800b264:	b170      	cbz	r0, 800b284 <_vfiprintf_r+0x5c>
 800b266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b268:	07dc      	lsls	r4, r3, #31
 800b26a:	d504      	bpl.n	800b276 <_vfiprintf_r+0x4e>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	b01d      	add	sp, #116	; 0x74
 800b272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b276:	89ab      	ldrh	r3, [r5, #12]
 800b278:	0598      	lsls	r0, r3, #22
 800b27a:	d4f7      	bmi.n	800b26c <_vfiprintf_r+0x44>
 800b27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27e:	f7fd fb89 	bl	8008994 <__retarget_lock_release_recursive>
 800b282:	e7f3      	b.n	800b26c <_vfiprintf_r+0x44>
 800b284:	2300      	movs	r3, #0
 800b286:	9309      	str	r3, [sp, #36]	; 0x24
 800b288:	2320      	movs	r3, #32
 800b28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b292:	2330      	movs	r3, #48	; 0x30
 800b294:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b448 <_vfiprintf_r+0x220>
 800b298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b29c:	f04f 0901 	mov.w	r9, #1
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	469a      	mov	sl, r3
 800b2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a8:	b10a      	cbz	r2, 800b2ae <_vfiprintf_r+0x86>
 800b2aa:	2a25      	cmp	r2, #37	; 0x25
 800b2ac:	d1f9      	bne.n	800b2a2 <_vfiprintf_r+0x7a>
 800b2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b2b2:	d00b      	beq.n	800b2cc <_vfiprintf_r+0xa4>
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7ff ffa1 	bl	800b202 <__sfputs_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f000 80a9 	beq.w	800b418 <_vfiprintf_r+0x1f0>
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	445a      	add	r2, fp
 800b2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80a1 	beq.w	800b418 <_vfiprintf_r+0x1f0>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e0:	f10a 0a01 	add.w	sl, sl, #1
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f6:	4854      	ldr	r0, [pc, #336]	; (800b448 <_vfiprintf_r+0x220>)
 800b2f8:	f7f4 ff6a 	bl	80001d0 <memchr>
 800b2fc:	9a04      	ldr	r2, [sp, #16]
 800b2fe:	b9d8      	cbnz	r0, 800b338 <_vfiprintf_r+0x110>
 800b300:	06d1      	lsls	r1, r2, #27
 800b302:	bf44      	itt	mi
 800b304:	2320      	movmi	r3, #32
 800b306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30a:	0713      	lsls	r3, r2, #28
 800b30c:	bf44      	itt	mi
 800b30e:	232b      	movmi	r3, #43	; 0x2b
 800b310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b314:	f89a 3000 	ldrb.w	r3, [sl]
 800b318:	2b2a      	cmp	r3, #42	; 0x2a
 800b31a:	d015      	beq.n	800b348 <_vfiprintf_r+0x120>
 800b31c:	9a07      	ldr	r2, [sp, #28]
 800b31e:	4654      	mov	r4, sl
 800b320:	2000      	movs	r0, #0
 800b322:	f04f 0c0a 	mov.w	ip, #10
 800b326:	4621      	mov	r1, r4
 800b328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b32c:	3b30      	subs	r3, #48	; 0x30
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d94d      	bls.n	800b3ce <_vfiprintf_r+0x1a6>
 800b332:	b1b0      	cbz	r0, 800b362 <_vfiprintf_r+0x13a>
 800b334:	9207      	str	r2, [sp, #28]
 800b336:	e014      	b.n	800b362 <_vfiprintf_r+0x13a>
 800b338:	eba0 0308 	sub.w	r3, r0, r8
 800b33c:	fa09 f303 	lsl.w	r3, r9, r3
 800b340:	4313      	orrs	r3, r2
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	46a2      	mov	sl, r4
 800b346:	e7d2      	b.n	800b2ee <_vfiprintf_r+0xc6>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	1d19      	adds	r1, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	9103      	str	r1, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfbb      	ittet	lt
 800b354:	425b      	neglt	r3, r3
 800b356:	f042 0202 	orrlt.w	r2, r2, #2
 800b35a:	9307      	strge	r3, [sp, #28]
 800b35c:	9307      	strlt	r3, [sp, #28]
 800b35e:	bfb8      	it	lt
 800b360:	9204      	strlt	r2, [sp, #16]
 800b362:	7823      	ldrb	r3, [r4, #0]
 800b364:	2b2e      	cmp	r3, #46	; 0x2e
 800b366:	d10c      	bne.n	800b382 <_vfiprintf_r+0x15a>
 800b368:	7863      	ldrb	r3, [r4, #1]
 800b36a:	2b2a      	cmp	r3, #42	; 0x2a
 800b36c:	d134      	bne.n	800b3d8 <_vfiprintf_r+0x1b0>
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	9203      	str	r2, [sp, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b37e:	3402      	adds	r4, #2
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b458 <_vfiprintf_r+0x230>
 800b386:	7821      	ldrb	r1, [r4, #0]
 800b388:	2203      	movs	r2, #3
 800b38a:	4650      	mov	r0, sl
 800b38c:	f7f4 ff20 	bl	80001d0 <memchr>
 800b390:	b138      	cbz	r0, 800b3a2 <_vfiprintf_r+0x17a>
 800b392:	9b04      	ldr	r3, [sp, #16]
 800b394:	eba0 000a 	sub.w	r0, r0, sl
 800b398:	2240      	movs	r2, #64	; 0x40
 800b39a:	4082      	lsls	r2, r0
 800b39c:	4313      	orrs	r3, r2
 800b39e:	3401      	adds	r4, #1
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a6:	4829      	ldr	r0, [pc, #164]	; (800b44c <_vfiprintf_r+0x224>)
 800b3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ac:	2206      	movs	r2, #6
 800b3ae:	f7f4 ff0f 	bl	80001d0 <memchr>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d03f      	beq.n	800b436 <_vfiprintf_r+0x20e>
 800b3b6:	4b26      	ldr	r3, [pc, #152]	; (800b450 <_vfiprintf_r+0x228>)
 800b3b8:	bb1b      	cbnz	r3, 800b402 <_vfiprintf_r+0x1da>
 800b3ba:	9b03      	ldr	r3, [sp, #12]
 800b3bc:	3307      	adds	r3, #7
 800b3be:	f023 0307 	bic.w	r3, r3, #7
 800b3c2:	3308      	adds	r3, #8
 800b3c4:	9303      	str	r3, [sp, #12]
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	443b      	add	r3, r7
 800b3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b3cc:	e768      	b.n	800b2a0 <_vfiprintf_r+0x78>
 800b3ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	e7a6      	b.n	800b326 <_vfiprintf_r+0xfe>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	3401      	adds	r4, #1
 800b3dc:	9305      	str	r3, [sp, #20]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	f04f 0c0a 	mov.w	ip, #10
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ea:	3a30      	subs	r2, #48	; 0x30
 800b3ec:	2a09      	cmp	r2, #9
 800b3ee:	d903      	bls.n	800b3f8 <_vfiprintf_r+0x1d0>
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d0c6      	beq.n	800b382 <_vfiprintf_r+0x15a>
 800b3f4:	9105      	str	r1, [sp, #20]
 800b3f6:	e7c4      	b.n	800b382 <_vfiprintf_r+0x15a>
 800b3f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	2301      	movs	r3, #1
 800b400:	e7f0      	b.n	800b3e4 <_vfiprintf_r+0x1bc>
 800b402:	ab03      	add	r3, sp, #12
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	462a      	mov	r2, r5
 800b408:	4b12      	ldr	r3, [pc, #72]	; (800b454 <_vfiprintf_r+0x22c>)
 800b40a:	a904      	add	r1, sp, #16
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fc fa11 	bl	8007834 <_printf_float>
 800b412:	4607      	mov	r7, r0
 800b414:	1c78      	adds	r0, r7, #1
 800b416:	d1d6      	bne.n	800b3c6 <_vfiprintf_r+0x19e>
 800b418:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d405      	bmi.n	800b42a <_vfiprintf_r+0x202>
 800b41e:	89ab      	ldrh	r3, [r5, #12]
 800b420:	059a      	lsls	r2, r3, #22
 800b422:	d402      	bmi.n	800b42a <_vfiprintf_r+0x202>
 800b424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b426:	f7fd fab5 	bl	8008994 <__retarget_lock_release_recursive>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	065b      	lsls	r3, r3, #25
 800b42e:	f53f af1d 	bmi.w	800b26c <_vfiprintf_r+0x44>
 800b432:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b434:	e71c      	b.n	800b270 <_vfiprintf_r+0x48>
 800b436:	ab03      	add	r3, sp, #12
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	462a      	mov	r2, r5
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <_vfiprintf_r+0x22c>)
 800b43e:	a904      	add	r1, sp, #16
 800b440:	4630      	mov	r0, r6
 800b442:	f7fc fc9b 	bl	8007d7c <_printf_i>
 800b446:	e7e4      	b.n	800b412 <_vfiprintf_r+0x1ea>
 800b448:	0800cea1 	.word	0x0800cea1
 800b44c:	0800ceab 	.word	0x0800ceab
 800b450:	08007835 	.word	0x08007835
 800b454:	0800b203 	.word	0x0800b203
 800b458:	0800cea7 	.word	0x0800cea7

0800b45c <__sflush_r>:
 800b45c:	898a      	ldrh	r2, [r1, #12]
 800b45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b462:	4605      	mov	r5, r0
 800b464:	0710      	lsls	r0, r2, #28
 800b466:	460c      	mov	r4, r1
 800b468:	d458      	bmi.n	800b51c <__sflush_r+0xc0>
 800b46a:	684b      	ldr	r3, [r1, #4]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dc05      	bgt.n	800b47c <__sflush_r+0x20>
 800b470:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b472:	2b00      	cmp	r3, #0
 800b474:	dc02      	bgt.n	800b47c <__sflush_r+0x20>
 800b476:	2000      	movs	r0, #0
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b47e:	2e00      	cmp	r6, #0
 800b480:	d0f9      	beq.n	800b476 <__sflush_r+0x1a>
 800b482:	2300      	movs	r3, #0
 800b484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b488:	682f      	ldr	r7, [r5, #0]
 800b48a:	6a21      	ldr	r1, [r4, #32]
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	d032      	beq.n	800b4f6 <__sflush_r+0x9a>
 800b490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	075a      	lsls	r2, r3, #29
 800b496:	d505      	bpl.n	800b4a4 <__sflush_r+0x48>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	1ac0      	subs	r0, r0, r3
 800b49c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b49e:	b10b      	cbz	r3, 800b4a4 <__sflush_r+0x48>
 800b4a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4a2:	1ac0      	subs	r0, r0, r3
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4aa:	6a21      	ldr	r1, [r4, #32]
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b0      	blx	r6
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	d106      	bne.n	800b4c4 <__sflush_r+0x68>
 800b4b6:	6829      	ldr	r1, [r5, #0]
 800b4b8:	291d      	cmp	r1, #29
 800b4ba:	d82b      	bhi.n	800b514 <__sflush_r+0xb8>
 800b4bc:	4a29      	ldr	r2, [pc, #164]	; (800b564 <__sflush_r+0x108>)
 800b4be:	410a      	asrs	r2, r1
 800b4c0:	07d6      	lsls	r6, r2, #31
 800b4c2:	d427      	bmi.n	800b514 <__sflush_r+0xb8>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	6062      	str	r2, [r4, #4]
 800b4c8:	04d9      	lsls	r1, r3, #19
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	6022      	str	r2, [r4, #0]
 800b4ce:	d504      	bpl.n	800b4da <__sflush_r+0x7e>
 800b4d0:	1c42      	adds	r2, r0, #1
 800b4d2:	d101      	bne.n	800b4d8 <__sflush_r+0x7c>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b903      	cbnz	r3, 800b4da <__sflush_r+0x7e>
 800b4d8:	6560      	str	r0, [r4, #84]	; 0x54
 800b4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4dc:	602f      	str	r7, [r5, #0]
 800b4de:	2900      	cmp	r1, #0
 800b4e0:	d0c9      	beq.n	800b476 <__sflush_r+0x1a>
 800b4e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	d002      	beq.n	800b4f0 <__sflush_r+0x94>
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7fe f8d6 	bl	800969c <_free_r>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	6360      	str	r0, [r4, #52]	; 0x34
 800b4f4:	e7c0      	b.n	800b478 <__sflush_r+0x1c>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	47b0      	blx	r6
 800b4fc:	1c41      	adds	r1, r0, #1
 800b4fe:	d1c8      	bne.n	800b492 <__sflush_r+0x36>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0c5      	beq.n	800b492 <__sflush_r+0x36>
 800b506:	2b1d      	cmp	r3, #29
 800b508:	d001      	beq.n	800b50e <__sflush_r+0xb2>
 800b50a:	2b16      	cmp	r3, #22
 800b50c:	d101      	bne.n	800b512 <__sflush_r+0xb6>
 800b50e:	602f      	str	r7, [r5, #0]
 800b510:	e7b1      	b.n	800b476 <__sflush_r+0x1a>
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b518:	81a3      	strh	r3, [r4, #12]
 800b51a:	e7ad      	b.n	800b478 <__sflush_r+0x1c>
 800b51c:	690f      	ldr	r7, [r1, #16]
 800b51e:	2f00      	cmp	r7, #0
 800b520:	d0a9      	beq.n	800b476 <__sflush_r+0x1a>
 800b522:	0793      	lsls	r3, r2, #30
 800b524:	680e      	ldr	r6, [r1, #0]
 800b526:	bf08      	it	eq
 800b528:	694b      	ldreq	r3, [r1, #20]
 800b52a:	600f      	str	r7, [r1, #0]
 800b52c:	bf18      	it	ne
 800b52e:	2300      	movne	r3, #0
 800b530:	eba6 0807 	sub.w	r8, r6, r7
 800b534:	608b      	str	r3, [r1, #8]
 800b536:	f1b8 0f00 	cmp.w	r8, #0
 800b53a:	dd9c      	ble.n	800b476 <__sflush_r+0x1a>
 800b53c:	6a21      	ldr	r1, [r4, #32]
 800b53e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b540:	4643      	mov	r3, r8
 800b542:	463a      	mov	r2, r7
 800b544:	4628      	mov	r0, r5
 800b546:	47b0      	blx	r6
 800b548:	2800      	cmp	r0, #0
 800b54a:	dc06      	bgt.n	800b55a <__sflush_r+0xfe>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b552:	81a3      	strh	r3, [r4, #12]
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	e78e      	b.n	800b478 <__sflush_r+0x1c>
 800b55a:	4407      	add	r7, r0
 800b55c:	eba8 0800 	sub.w	r8, r8, r0
 800b560:	e7e9      	b.n	800b536 <__sflush_r+0xda>
 800b562:	bf00      	nop
 800b564:	dfbffffe 	.word	0xdfbffffe

0800b568 <_fflush_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	690b      	ldr	r3, [r1, #16]
 800b56c:	4605      	mov	r5, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	b913      	cbnz	r3, 800b578 <_fflush_r+0x10>
 800b572:	2500      	movs	r5, #0
 800b574:	4628      	mov	r0, r5
 800b576:	bd38      	pop	{r3, r4, r5, pc}
 800b578:	b118      	cbz	r0, 800b582 <_fflush_r+0x1a>
 800b57a:	6a03      	ldr	r3, [r0, #32]
 800b57c:	b90b      	cbnz	r3, 800b582 <_fflush_r+0x1a>
 800b57e:	f7fc ffbb 	bl	80084f8 <__sinit>
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f3      	beq.n	800b572 <_fflush_r+0xa>
 800b58a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b58c:	07d0      	lsls	r0, r2, #31
 800b58e:	d404      	bmi.n	800b59a <_fflush_r+0x32>
 800b590:	0599      	lsls	r1, r3, #22
 800b592:	d402      	bmi.n	800b59a <_fflush_r+0x32>
 800b594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b596:	f7fd f9fc 	bl	8008992 <__retarget_lock_acquire_recursive>
 800b59a:	4628      	mov	r0, r5
 800b59c:	4621      	mov	r1, r4
 800b59e:	f7ff ff5d 	bl	800b45c <__sflush_r>
 800b5a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5a4:	07da      	lsls	r2, r3, #31
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	d4e4      	bmi.n	800b574 <_fflush_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d4e1      	bmi.n	800b574 <_fflush_r+0xc>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b2:	f7fd f9ef 	bl	8008994 <__retarget_lock_release_recursive>
 800b5b6:	e7dd      	b.n	800b574 <_fflush_r+0xc>

0800b5b8 <__swhatbuf_r>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c0:	2900      	cmp	r1, #0
 800b5c2:	b096      	sub	sp, #88	; 0x58
 800b5c4:	4615      	mov	r5, r2
 800b5c6:	461e      	mov	r6, r3
 800b5c8:	da0d      	bge.n	800b5e6 <__swhatbuf_r+0x2e>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5d0:	f04f 0100 	mov.w	r1, #0
 800b5d4:	bf0c      	ite	eq
 800b5d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5da:	2340      	movne	r3, #64	; 0x40
 800b5dc:	2000      	movs	r0, #0
 800b5de:	6031      	str	r1, [r6, #0]
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	b016      	add	sp, #88	; 0x58
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	466a      	mov	r2, sp
 800b5e8:	f000 f874 	bl	800b6d4 <_fstat_r>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	dbec      	blt.n	800b5ca <__swhatbuf_r+0x12>
 800b5f0:	9901      	ldr	r1, [sp, #4]
 800b5f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b5f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b5fa:	4259      	negs	r1, r3
 800b5fc:	4159      	adcs	r1, r3
 800b5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b602:	e7eb      	b.n	800b5dc <__swhatbuf_r+0x24>

0800b604 <__smakebuf_r>:
 800b604:	898b      	ldrh	r3, [r1, #12]
 800b606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b608:	079d      	lsls	r5, r3, #30
 800b60a:	4606      	mov	r6, r0
 800b60c:	460c      	mov	r4, r1
 800b60e:	d507      	bpl.n	800b620 <__smakebuf_r+0x1c>
 800b610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	6123      	str	r3, [r4, #16]
 800b618:	2301      	movs	r3, #1
 800b61a:	6163      	str	r3, [r4, #20]
 800b61c:	b002      	add	sp, #8
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	ab01      	add	r3, sp, #4
 800b622:	466a      	mov	r2, sp
 800b624:	f7ff ffc8 	bl	800b5b8 <__swhatbuf_r>
 800b628:	9900      	ldr	r1, [sp, #0]
 800b62a:	4605      	mov	r5, r0
 800b62c:	4630      	mov	r0, r6
 800b62e:	f7fe f8a9 	bl	8009784 <_malloc_r>
 800b632:	b948      	cbnz	r0, 800b648 <__smakebuf_r+0x44>
 800b634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b638:	059a      	lsls	r2, r3, #22
 800b63a:	d4ef      	bmi.n	800b61c <__smakebuf_r+0x18>
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	f043 0302 	orr.w	r3, r3, #2
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	e7e3      	b.n	800b610 <__smakebuf_r+0xc>
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	9b00      	ldr	r3, [sp, #0]
 800b654:	6163      	str	r3, [r4, #20]
 800b656:	9b01      	ldr	r3, [sp, #4]
 800b658:	6120      	str	r0, [r4, #16]
 800b65a:	b15b      	cbz	r3, 800b674 <__smakebuf_r+0x70>
 800b65c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b660:	4630      	mov	r0, r6
 800b662:	f000 f849 	bl	800b6f8 <_isatty_r>
 800b666:	b128      	cbz	r0, 800b674 <__smakebuf_r+0x70>
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f023 0303 	bic.w	r3, r3, #3
 800b66e:	f043 0301 	orr.w	r3, r3, #1
 800b672:	81a3      	strh	r3, [r4, #12]
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	431d      	orrs	r5, r3
 800b678:	81a5      	strh	r5, [r4, #12]
 800b67a:	e7cf      	b.n	800b61c <__smakebuf_r+0x18>

0800b67c <memmove>:
 800b67c:	4288      	cmp	r0, r1
 800b67e:	b510      	push	{r4, lr}
 800b680:	eb01 0402 	add.w	r4, r1, r2
 800b684:	d902      	bls.n	800b68c <memmove+0x10>
 800b686:	4284      	cmp	r4, r0
 800b688:	4623      	mov	r3, r4
 800b68a:	d807      	bhi.n	800b69c <memmove+0x20>
 800b68c:	1e43      	subs	r3, r0, #1
 800b68e:	42a1      	cmp	r1, r4
 800b690:	d008      	beq.n	800b6a4 <memmove+0x28>
 800b692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b69a:	e7f8      	b.n	800b68e <memmove+0x12>
 800b69c:	4402      	add	r2, r0
 800b69e:	4601      	mov	r1, r0
 800b6a0:	428a      	cmp	r2, r1
 800b6a2:	d100      	bne.n	800b6a6 <memmove+0x2a>
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ae:	e7f7      	b.n	800b6a0 <memmove+0x24>

0800b6b0 <strncmp>:
 800b6b0:	b510      	push	{r4, lr}
 800b6b2:	b16a      	cbz	r2, 800b6d0 <strncmp+0x20>
 800b6b4:	3901      	subs	r1, #1
 800b6b6:	1884      	adds	r4, r0, r2
 800b6b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d103      	bne.n	800b6cc <strncmp+0x1c>
 800b6c4:	42a0      	cmp	r0, r4
 800b6c6:	d001      	beq.n	800b6cc <strncmp+0x1c>
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	d1f5      	bne.n	800b6b8 <strncmp+0x8>
 800b6cc:	1ad0      	subs	r0, r2, r3
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	e7fc      	b.n	800b6ce <strncmp+0x1e>

0800b6d4 <_fstat_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d07      	ldr	r5, [pc, #28]	; (800b6f4 <_fstat_r+0x20>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	4611      	mov	r1, r2
 800b6e0:	602b      	str	r3, [r5, #0]
 800b6e2:	f7f6 fe01 	bl	80022e8 <_fstat>
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	d102      	bne.n	800b6f0 <_fstat_r+0x1c>
 800b6ea:	682b      	ldr	r3, [r5, #0]
 800b6ec:	b103      	cbz	r3, 800b6f0 <_fstat_r+0x1c>
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	bd38      	pop	{r3, r4, r5, pc}
 800b6f2:	bf00      	nop
 800b6f4:	200004f4 	.word	0x200004f4

0800b6f8 <_isatty_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4d06      	ldr	r5, [pc, #24]	; (800b714 <_isatty_r+0x1c>)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4604      	mov	r4, r0
 800b700:	4608      	mov	r0, r1
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	f7f6 fe00 	bl	8002308 <_isatty>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_isatty_r+0x1a>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_isatty_r+0x1a>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	200004f4 	.word	0x200004f4

0800b718 <_sbrk_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d06      	ldr	r5, [pc, #24]	; (800b734 <_sbrk_r+0x1c>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	f7f6 fe08 	bl	8002338 <_sbrk>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_sbrk_r+0x1a>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_sbrk_r+0x1a>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	200004f4 	.word	0x200004f4

0800b738 <memcpy>:
 800b738:	440a      	add	r2, r1
 800b73a:	4291      	cmp	r1, r2
 800b73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b740:	d100      	bne.n	800b744 <memcpy+0xc>
 800b742:	4770      	bx	lr
 800b744:	b510      	push	{r4, lr}
 800b746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b74e:	4291      	cmp	r1, r2
 800b750:	d1f9      	bne.n	800b746 <memcpy+0xe>
 800b752:	bd10      	pop	{r4, pc}
 800b754:	0000      	movs	r0, r0
	...

0800b758 <nan>:
 800b758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b760 <nan+0x8>
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	00000000 	.word	0x00000000
 800b764:	7ff80000 	.word	0x7ff80000

0800b768 <__assert_func>:
 800b768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b76a:	4614      	mov	r4, r2
 800b76c:	461a      	mov	r2, r3
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <__assert_func+0x2c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4605      	mov	r5, r0
 800b774:	68d8      	ldr	r0, [r3, #12]
 800b776:	b14c      	cbz	r4, 800b78c <__assert_func+0x24>
 800b778:	4b07      	ldr	r3, [pc, #28]	; (800b798 <__assert_func+0x30>)
 800b77a:	9100      	str	r1, [sp, #0]
 800b77c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b780:	4906      	ldr	r1, [pc, #24]	; (800b79c <__assert_func+0x34>)
 800b782:	462b      	mov	r3, r5
 800b784:	f000 fbca 	bl	800bf1c <fiprintf>
 800b788:	f000 fbda 	bl	800bf40 <abort>
 800b78c:	4b04      	ldr	r3, [pc, #16]	; (800b7a0 <__assert_func+0x38>)
 800b78e:	461c      	mov	r4, r3
 800b790:	e7f3      	b.n	800b77a <__assert_func+0x12>
 800b792:	bf00      	nop
 800b794:	20000064 	.word	0x20000064
 800b798:	0800ceba 	.word	0x0800ceba
 800b79c:	0800cec7 	.word	0x0800cec7
 800b7a0:	0800cef5 	.word	0x0800cef5

0800b7a4 <_calloc_r>:
 800b7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7a6:	fba1 2402 	umull	r2, r4, r1, r2
 800b7aa:	b94c      	cbnz	r4, 800b7c0 <_calloc_r+0x1c>
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	9201      	str	r2, [sp, #4]
 800b7b0:	f7fd ffe8 	bl	8009784 <_malloc_r>
 800b7b4:	9a01      	ldr	r2, [sp, #4]
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	b930      	cbnz	r0, 800b7c8 <_calloc_r+0x24>
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	b003      	add	sp, #12
 800b7be:	bd30      	pop	{r4, r5, pc}
 800b7c0:	220c      	movs	r2, #12
 800b7c2:	6002      	str	r2, [r0, #0]
 800b7c4:	2500      	movs	r5, #0
 800b7c6:	e7f8      	b.n	800b7ba <_calloc_r+0x16>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7fd f865 	bl	8008898 <memset>
 800b7ce:	e7f4      	b.n	800b7ba <_calloc_r+0x16>

0800b7d0 <rshift>:
 800b7d0:	6903      	ldr	r3, [r0, #16]
 800b7d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b7d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7de:	f100 0414 	add.w	r4, r0, #20
 800b7e2:	dd45      	ble.n	800b870 <rshift+0xa0>
 800b7e4:	f011 011f 	ands.w	r1, r1, #31
 800b7e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7f0:	d10c      	bne.n	800b80c <rshift+0x3c>
 800b7f2:	f100 0710 	add.w	r7, r0, #16
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	42b1      	cmp	r1, r6
 800b7fa:	d334      	bcc.n	800b866 <rshift+0x96>
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	1eea      	subs	r2, r5, #3
 800b802:	4296      	cmp	r6, r2
 800b804:	bf38      	it	cc
 800b806:	2300      	movcc	r3, #0
 800b808:	4423      	add	r3, r4
 800b80a:	e015      	b.n	800b838 <rshift+0x68>
 800b80c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b810:	f1c1 0820 	rsb	r8, r1, #32
 800b814:	40cf      	lsrs	r7, r1
 800b816:	f105 0e04 	add.w	lr, r5, #4
 800b81a:	46a1      	mov	r9, r4
 800b81c:	4576      	cmp	r6, lr
 800b81e:	46f4      	mov	ip, lr
 800b820:	d815      	bhi.n	800b84e <rshift+0x7e>
 800b822:	1a9a      	subs	r2, r3, r2
 800b824:	0092      	lsls	r2, r2, #2
 800b826:	3a04      	subs	r2, #4
 800b828:	3501      	adds	r5, #1
 800b82a:	42ae      	cmp	r6, r5
 800b82c:	bf38      	it	cc
 800b82e:	2200      	movcc	r2, #0
 800b830:	18a3      	adds	r3, r4, r2
 800b832:	50a7      	str	r7, [r4, r2]
 800b834:	b107      	cbz	r7, 800b838 <rshift+0x68>
 800b836:	3304      	adds	r3, #4
 800b838:	1b1a      	subs	r2, r3, r4
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b840:	bf08      	it	eq
 800b842:	2300      	moveq	r3, #0
 800b844:	6102      	str	r2, [r0, #16]
 800b846:	bf08      	it	eq
 800b848:	6143      	streq	r3, [r0, #20]
 800b84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b84e:	f8dc c000 	ldr.w	ip, [ip]
 800b852:	fa0c fc08 	lsl.w	ip, ip, r8
 800b856:	ea4c 0707 	orr.w	r7, ip, r7
 800b85a:	f849 7b04 	str.w	r7, [r9], #4
 800b85e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b862:	40cf      	lsrs	r7, r1
 800b864:	e7da      	b.n	800b81c <rshift+0x4c>
 800b866:	f851 cb04 	ldr.w	ip, [r1], #4
 800b86a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b86e:	e7c3      	b.n	800b7f8 <rshift+0x28>
 800b870:	4623      	mov	r3, r4
 800b872:	e7e1      	b.n	800b838 <rshift+0x68>

0800b874 <__hexdig_fun>:
 800b874:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b878:	2b09      	cmp	r3, #9
 800b87a:	d802      	bhi.n	800b882 <__hexdig_fun+0xe>
 800b87c:	3820      	subs	r0, #32
 800b87e:	b2c0      	uxtb	r0, r0
 800b880:	4770      	bx	lr
 800b882:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b886:	2b05      	cmp	r3, #5
 800b888:	d801      	bhi.n	800b88e <__hexdig_fun+0x1a>
 800b88a:	3847      	subs	r0, #71	; 0x47
 800b88c:	e7f7      	b.n	800b87e <__hexdig_fun+0xa>
 800b88e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b892:	2b05      	cmp	r3, #5
 800b894:	d801      	bhi.n	800b89a <__hexdig_fun+0x26>
 800b896:	3827      	subs	r0, #39	; 0x27
 800b898:	e7f1      	b.n	800b87e <__hexdig_fun+0xa>
 800b89a:	2000      	movs	r0, #0
 800b89c:	4770      	bx	lr
	...

0800b8a0 <__gethex>:
 800b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	4617      	mov	r7, r2
 800b8a6:	680a      	ldr	r2, [r1, #0]
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	f102 0b02 	add.w	fp, r2, #2
 800b8ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b8b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b8b6:	4681      	mov	r9, r0
 800b8b8:	468a      	mov	sl, r1
 800b8ba:	9302      	str	r3, [sp, #8]
 800b8bc:	32fe      	adds	r2, #254	; 0xfe
 800b8be:	eb02 030b 	add.w	r3, r2, fp
 800b8c2:	46d8      	mov	r8, fp
 800b8c4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	2830      	cmp	r0, #48	; 0x30
 800b8cc:	d0f7      	beq.n	800b8be <__gethex+0x1e>
 800b8ce:	f7ff ffd1 	bl	800b874 <__hexdig_fun>
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d138      	bne.n	800b94a <__gethex+0xaa>
 800b8d8:	49a7      	ldr	r1, [pc, #668]	; (800bb78 <__gethex+0x2d8>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	4640      	mov	r0, r8
 800b8de:	f7ff fee7 	bl	800b6b0 <strncmp>
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d169      	bne.n	800b9bc <__gethex+0x11c>
 800b8e8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b8ec:	465d      	mov	r5, fp
 800b8ee:	f7ff ffc1 	bl	800b874 <__hexdig_fun>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d064      	beq.n	800b9c0 <__gethex+0x120>
 800b8f6:	465a      	mov	r2, fp
 800b8f8:	7810      	ldrb	r0, [r2, #0]
 800b8fa:	2830      	cmp	r0, #48	; 0x30
 800b8fc:	4690      	mov	r8, r2
 800b8fe:	f102 0201 	add.w	r2, r2, #1
 800b902:	d0f9      	beq.n	800b8f8 <__gethex+0x58>
 800b904:	f7ff ffb6 	bl	800b874 <__hexdig_fun>
 800b908:	2301      	movs	r3, #1
 800b90a:	fab0 f480 	clz	r4, r0
 800b90e:	0964      	lsrs	r4, r4, #5
 800b910:	465e      	mov	r6, fp
 800b912:	9301      	str	r3, [sp, #4]
 800b914:	4642      	mov	r2, r8
 800b916:	4615      	mov	r5, r2
 800b918:	3201      	adds	r2, #1
 800b91a:	7828      	ldrb	r0, [r5, #0]
 800b91c:	f7ff ffaa 	bl	800b874 <__hexdig_fun>
 800b920:	2800      	cmp	r0, #0
 800b922:	d1f8      	bne.n	800b916 <__gethex+0x76>
 800b924:	4994      	ldr	r1, [pc, #592]	; (800bb78 <__gethex+0x2d8>)
 800b926:	2201      	movs	r2, #1
 800b928:	4628      	mov	r0, r5
 800b92a:	f7ff fec1 	bl	800b6b0 <strncmp>
 800b92e:	b978      	cbnz	r0, 800b950 <__gethex+0xb0>
 800b930:	b946      	cbnz	r6, 800b944 <__gethex+0xa4>
 800b932:	1c6e      	adds	r6, r5, #1
 800b934:	4632      	mov	r2, r6
 800b936:	4615      	mov	r5, r2
 800b938:	3201      	adds	r2, #1
 800b93a:	7828      	ldrb	r0, [r5, #0]
 800b93c:	f7ff ff9a 	bl	800b874 <__hexdig_fun>
 800b940:	2800      	cmp	r0, #0
 800b942:	d1f8      	bne.n	800b936 <__gethex+0x96>
 800b944:	1b73      	subs	r3, r6, r5
 800b946:	009e      	lsls	r6, r3, #2
 800b948:	e004      	b.n	800b954 <__gethex+0xb4>
 800b94a:	2400      	movs	r4, #0
 800b94c:	4626      	mov	r6, r4
 800b94e:	e7e1      	b.n	800b914 <__gethex+0x74>
 800b950:	2e00      	cmp	r6, #0
 800b952:	d1f7      	bne.n	800b944 <__gethex+0xa4>
 800b954:	782b      	ldrb	r3, [r5, #0]
 800b956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b95a:	2b50      	cmp	r3, #80	; 0x50
 800b95c:	d13d      	bne.n	800b9da <__gethex+0x13a>
 800b95e:	786b      	ldrb	r3, [r5, #1]
 800b960:	2b2b      	cmp	r3, #43	; 0x2b
 800b962:	d02f      	beq.n	800b9c4 <__gethex+0x124>
 800b964:	2b2d      	cmp	r3, #45	; 0x2d
 800b966:	d031      	beq.n	800b9cc <__gethex+0x12c>
 800b968:	1c69      	adds	r1, r5, #1
 800b96a:	f04f 0b00 	mov.w	fp, #0
 800b96e:	7808      	ldrb	r0, [r1, #0]
 800b970:	f7ff ff80 	bl	800b874 <__hexdig_fun>
 800b974:	1e42      	subs	r2, r0, #1
 800b976:	b2d2      	uxtb	r2, r2
 800b978:	2a18      	cmp	r2, #24
 800b97a:	d82e      	bhi.n	800b9da <__gethex+0x13a>
 800b97c:	f1a0 0210 	sub.w	r2, r0, #16
 800b980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b984:	f7ff ff76 	bl	800b874 <__hexdig_fun>
 800b988:	f100 3cff 	add.w	ip, r0, #4294967295
 800b98c:	fa5f fc8c 	uxtb.w	ip, ip
 800b990:	f1bc 0f18 	cmp.w	ip, #24
 800b994:	d91d      	bls.n	800b9d2 <__gethex+0x132>
 800b996:	f1bb 0f00 	cmp.w	fp, #0
 800b99a:	d000      	beq.n	800b99e <__gethex+0xfe>
 800b99c:	4252      	negs	r2, r2
 800b99e:	4416      	add	r6, r2
 800b9a0:	f8ca 1000 	str.w	r1, [sl]
 800b9a4:	b1dc      	cbz	r4, 800b9de <__gethex+0x13e>
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bf14      	ite	ne
 800b9ac:	f04f 0800 	movne.w	r8, #0
 800b9b0:	f04f 0806 	moveq.w	r8, #6
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	b005      	add	sp, #20
 800b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9bc:	4645      	mov	r5, r8
 800b9be:	4626      	mov	r6, r4
 800b9c0:	2401      	movs	r4, #1
 800b9c2:	e7c7      	b.n	800b954 <__gethex+0xb4>
 800b9c4:	f04f 0b00 	mov.w	fp, #0
 800b9c8:	1ca9      	adds	r1, r5, #2
 800b9ca:	e7d0      	b.n	800b96e <__gethex+0xce>
 800b9cc:	f04f 0b01 	mov.w	fp, #1
 800b9d0:	e7fa      	b.n	800b9c8 <__gethex+0x128>
 800b9d2:	230a      	movs	r3, #10
 800b9d4:	fb03 0002 	mla	r0, r3, r2, r0
 800b9d8:	e7d0      	b.n	800b97c <__gethex+0xdc>
 800b9da:	4629      	mov	r1, r5
 800b9dc:	e7e0      	b.n	800b9a0 <__gethex+0x100>
 800b9de:	eba5 0308 	sub.w	r3, r5, r8
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	4621      	mov	r1, r4
 800b9e6:	2b07      	cmp	r3, #7
 800b9e8:	dc0a      	bgt.n	800ba00 <__gethex+0x160>
 800b9ea:	4648      	mov	r0, r9
 800b9ec:	f7fd ff56 	bl	800989c <_Balloc>
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	b940      	cbnz	r0, 800ba06 <__gethex+0x166>
 800b9f4:	4b61      	ldr	r3, [pc, #388]	; (800bb7c <__gethex+0x2dc>)
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	21e4      	movs	r1, #228	; 0xe4
 800b9fa:	4861      	ldr	r0, [pc, #388]	; (800bb80 <__gethex+0x2e0>)
 800b9fc:	f7ff feb4 	bl	800b768 <__assert_func>
 800ba00:	3101      	adds	r1, #1
 800ba02:	105b      	asrs	r3, r3, #1
 800ba04:	e7ef      	b.n	800b9e6 <__gethex+0x146>
 800ba06:	f100 0a14 	add.w	sl, r0, #20
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	495a      	ldr	r1, [pc, #360]	; (800bb78 <__gethex+0x2d8>)
 800ba0e:	f8cd a004 	str.w	sl, [sp, #4]
 800ba12:	469b      	mov	fp, r3
 800ba14:	45a8      	cmp	r8, r5
 800ba16:	d342      	bcc.n	800ba9e <__gethex+0x1fe>
 800ba18:	9801      	ldr	r0, [sp, #4]
 800ba1a:	f840 bb04 	str.w	fp, [r0], #4
 800ba1e:	eba0 000a 	sub.w	r0, r0, sl
 800ba22:	1080      	asrs	r0, r0, #2
 800ba24:	6120      	str	r0, [r4, #16]
 800ba26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ba2a:	4658      	mov	r0, fp
 800ba2c:	f7fe f828 	bl	8009a80 <__hi0bits>
 800ba30:	683d      	ldr	r5, [r7, #0]
 800ba32:	eba8 0000 	sub.w	r0, r8, r0
 800ba36:	42a8      	cmp	r0, r5
 800ba38:	dd59      	ble.n	800baee <__gethex+0x24e>
 800ba3a:	eba0 0805 	sub.w	r8, r0, r5
 800ba3e:	4641      	mov	r1, r8
 800ba40:	4620      	mov	r0, r4
 800ba42:	f7fe fbb7 	bl	800a1b4 <__any_on>
 800ba46:	4683      	mov	fp, r0
 800ba48:	b1b8      	cbz	r0, 800ba7a <__gethex+0x1da>
 800ba4a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ba4e:	1159      	asrs	r1, r3, #5
 800ba50:	f003 021f 	and.w	r2, r3, #31
 800ba54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ba58:	f04f 0b01 	mov.w	fp, #1
 800ba5c:	fa0b f202 	lsl.w	r2, fp, r2
 800ba60:	420a      	tst	r2, r1
 800ba62:	d00a      	beq.n	800ba7a <__gethex+0x1da>
 800ba64:	455b      	cmp	r3, fp
 800ba66:	dd06      	ble.n	800ba76 <__gethex+0x1d6>
 800ba68:	f1a8 0102 	sub.w	r1, r8, #2
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f7fe fba1 	bl	800a1b4 <__any_on>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d138      	bne.n	800bae8 <__gethex+0x248>
 800ba76:	f04f 0b02 	mov.w	fp, #2
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	f7ff fea7 	bl	800b7d0 <rshift>
 800ba82:	4446      	add	r6, r8
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	42b3      	cmp	r3, r6
 800ba88:	da41      	bge.n	800bb0e <__gethex+0x26e>
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4648      	mov	r0, r9
 800ba8e:	f7fd ff45 	bl	800991c <_Bfree>
 800ba92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba94:	2300      	movs	r3, #0
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ba9c:	e78a      	b.n	800b9b4 <__gethex+0x114>
 800ba9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800baa2:	2a2e      	cmp	r2, #46	; 0x2e
 800baa4:	d014      	beq.n	800bad0 <__gethex+0x230>
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	d106      	bne.n	800bab8 <__gethex+0x218>
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	f843 bb04 	str.w	fp, [r3], #4
 800bab0:	f04f 0b00 	mov.w	fp, #0
 800bab4:	9301      	str	r3, [sp, #4]
 800bab6:	465b      	mov	r3, fp
 800bab8:	7828      	ldrb	r0, [r5, #0]
 800baba:	9303      	str	r3, [sp, #12]
 800babc:	f7ff feda 	bl	800b874 <__hexdig_fun>
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	f000 000f 	and.w	r0, r0, #15
 800bac6:	4098      	lsls	r0, r3
 800bac8:	ea4b 0b00 	orr.w	fp, fp, r0
 800bacc:	3304      	adds	r3, #4
 800bace:	e7a1      	b.n	800ba14 <__gethex+0x174>
 800bad0:	45a8      	cmp	r8, r5
 800bad2:	d8e8      	bhi.n	800baa6 <__gethex+0x206>
 800bad4:	2201      	movs	r2, #1
 800bad6:	4628      	mov	r0, r5
 800bad8:	9303      	str	r3, [sp, #12]
 800bada:	f7ff fde9 	bl	800b6b0 <strncmp>
 800bade:	4926      	ldr	r1, [pc, #152]	; (800bb78 <__gethex+0x2d8>)
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d1df      	bne.n	800baa6 <__gethex+0x206>
 800bae6:	e795      	b.n	800ba14 <__gethex+0x174>
 800bae8:	f04f 0b03 	mov.w	fp, #3
 800baec:	e7c5      	b.n	800ba7a <__gethex+0x1da>
 800baee:	da0b      	bge.n	800bb08 <__gethex+0x268>
 800baf0:	eba5 0800 	sub.w	r8, r5, r0
 800baf4:	4621      	mov	r1, r4
 800baf6:	4642      	mov	r2, r8
 800baf8:	4648      	mov	r0, r9
 800bafa:	f7fe f929 	bl	8009d50 <__lshift>
 800bafe:	eba6 0608 	sub.w	r6, r6, r8
 800bb02:	4604      	mov	r4, r0
 800bb04:	f100 0a14 	add.w	sl, r0, #20
 800bb08:	f04f 0b00 	mov.w	fp, #0
 800bb0c:	e7ba      	b.n	800ba84 <__gethex+0x1e4>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	42b3      	cmp	r3, r6
 800bb12:	dd73      	ble.n	800bbfc <__gethex+0x35c>
 800bb14:	1b9e      	subs	r6, r3, r6
 800bb16:	42b5      	cmp	r5, r6
 800bb18:	dc34      	bgt.n	800bb84 <__gethex+0x2e4>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d023      	beq.n	800bb68 <__gethex+0x2c8>
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d025      	beq.n	800bb70 <__gethex+0x2d0>
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d115      	bne.n	800bb54 <__gethex+0x2b4>
 800bb28:	42b5      	cmp	r5, r6
 800bb2a:	d113      	bne.n	800bb54 <__gethex+0x2b4>
 800bb2c:	2d01      	cmp	r5, #1
 800bb2e:	d10b      	bne.n	800bb48 <__gethex+0x2a8>
 800bb30:	9a02      	ldr	r2, [sp, #8]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	2301      	movs	r3, #1
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	f8ca 3000 	str.w	r3, [sl]
 800bb3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb40:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bb44:	601c      	str	r4, [r3, #0]
 800bb46:	e735      	b.n	800b9b4 <__gethex+0x114>
 800bb48:	1e69      	subs	r1, r5, #1
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f7fe fb32 	bl	800a1b4 <__any_on>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d1ed      	bne.n	800bb30 <__gethex+0x290>
 800bb54:	4621      	mov	r1, r4
 800bb56:	4648      	mov	r0, r9
 800bb58:	f7fd fee0 	bl	800991c <_Bfree>
 800bb5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bb66:	e725      	b.n	800b9b4 <__gethex+0x114>
 800bb68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1f2      	bne.n	800bb54 <__gethex+0x2b4>
 800bb6e:	e7df      	b.n	800bb30 <__gethex+0x290>
 800bb70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1dc      	bne.n	800bb30 <__gethex+0x290>
 800bb76:	e7ed      	b.n	800bb54 <__gethex+0x2b4>
 800bb78:	0800cd4c 	.word	0x0800cd4c
 800bb7c:	0800cbe5 	.word	0x0800cbe5
 800bb80:	0800cef6 	.word	0x0800cef6
 800bb84:	f106 38ff 	add.w	r8, r6, #4294967295
 800bb88:	f1bb 0f00 	cmp.w	fp, #0
 800bb8c:	d133      	bne.n	800bbf6 <__gethex+0x356>
 800bb8e:	f1b8 0f00 	cmp.w	r8, #0
 800bb92:	d004      	beq.n	800bb9e <__gethex+0x2fe>
 800bb94:	4641      	mov	r1, r8
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7fe fb0c 	bl	800a1b4 <__any_on>
 800bb9c:	4683      	mov	fp, r0
 800bb9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bba2:	2301      	movs	r3, #1
 800bba4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bba8:	f008 081f 	and.w	r8, r8, #31
 800bbac:	fa03 f308 	lsl.w	r3, r3, r8
 800bbb0:	4213      	tst	r3, r2
 800bbb2:	4631      	mov	r1, r6
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	bf18      	it	ne
 800bbb8:	f04b 0b02 	orrne.w	fp, fp, #2
 800bbbc:	1bad      	subs	r5, r5, r6
 800bbbe:	f7ff fe07 	bl	800b7d0 <rshift>
 800bbc2:	687e      	ldr	r6, [r7, #4]
 800bbc4:	f04f 0802 	mov.w	r8, #2
 800bbc8:	f1bb 0f00 	cmp.w	fp, #0
 800bbcc:	d04a      	beq.n	800bc64 <__gethex+0x3c4>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d016      	beq.n	800bc02 <__gethex+0x362>
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d018      	beq.n	800bc0a <__gethex+0x36a>
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d109      	bne.n	800bbf0 <__gethex+0x350>
 800bbdc:	f01b 0f02 	tst.w	fp, #2
 800bbe0:	d006      	beq.n	800bbf0 <__gethex+0x350>
 800bbe2:	f8da 3000 	ldr.w	r3, [sl]
 800bbe6:	ea4b 0b03 	orr.w	fp, fp, r3
 800bbea:	f01b 0f01 	tst.w	fp, #1
 800bbee:	d10f      	bne.n	800bc10 <__gethex+0x370>
 800bbf0:	f048 0810 	orr.w	r8, r8, #16
 800bbf4:	e036      	b.n	800bc64 <__gethex+0x3c4>
 800bbf6:	f04f 0b01 	mov.w	fp, #1
 800bbfa:	e7d0      	b.n	800bb9e <__gethex+0x2fe>
 800bbfc:	f04f 0801 	mov.w	r8, #1
 800bc00:	e7e2      	b.n	800bbc8 <__gethex+0x328>
 800bc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc04:	f1c3 0301 	rsb	r3, r3, #1
 800bc08:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0ef      	beq.n	800bbf0 <__gethex+0x350>
 800bc10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc14:	f104 0214 	add.w	r2, r4, #20
 800bc18:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bc22:	2300      	movs	r3, #0
 800bc24:	4694      	mov	ip, r2
 800bc26:	f852 1b04 	ldr.w	r1, [r2], #4
 800bc2a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bc2e:	d01e      	beq.n	800bc6e <__gethex+0x3ce>
 800bc30:	3101      	adds	r1, #1
 800bc32:	f8cc 1000 	str.w	r1, [ip]
 800bc36:	f1b8 0f02 	cmp.w	r8, #2
 800bc3a:	f104 0214 	add.w	r2, r4, #20
 800bc3e:	d13d      	bne.n	800bcbc <__gethex+0x41c>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	3b01      	subs	r3, #1
 800bc44:	42ab      	cmp	r3, r5
 800bc46:	d10b      	bne.n	800bc60 <__gethex+0x3c0>
 800bc48:	1169      	asrs	r1, r5, #5
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	f005 051f 	and.w	r5, r5, #31
 800bc50:	fa03 f505 	lsl.w	r5, r3, r5
 800bc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc58:	421d      	tst	r5, r3
 800bc5a:	bf18      	it	ne
 800bc5c:	f04f 0801 	movne.w	r8, #1
 800bc60:	f048 0820 	orr.w	r8, r8, #32
 800bc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc66:	601c      	str	r4, [r3, #0]
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	601e      	str	r6, [r3, #0]
 800bc6c:	e6a2      	b.n	800b9b4 <__gethex+0x114>
 800bc6e:	4290      	cmp	r0, r2
 800bc70:	f842 3c04 	str.w	r3, [r2, #-4]
 800bc74:	d8d6      	bhi.n	800bc24 <__gethex+0x384>
 800bc76:	68a2      	ldr	r2, [r4, #8]
 800bc78:	4593      	cmp	fp, r2
 800bc7a:	db17      	blt.n	800bcac <__gethex+0x40c>
 800bc7c:	6861      	ldr	r1, [r4, #4]
 800bc7e:	4648      	mov	r0, r9
 800bc80:	3101      	adds	r1, #1
 800bc82:	f7fd fe0b 	bl	800989c <_Balloc>
 800bc86:	4682      	mov	sl, r0
 800bc88:	b918      	cbnz	r0, 800bc92 <__gethex+0x3f2>
 800bc8a:	4b1b      	ldr	r3, [pc, #108]	; (800bcf8 <__gethex+0x458>)
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	2184      	movs	r1, #132	; 0x84
 800bc90:	e6b3      	b.n	800b9fa <__gethex+0x15a>
 800bc92:	6922      	ldr	r2, [r4, #16]
 800bc94:	3202      	adds	r2, #2
 800bc96:	f104 010c 	add.w	r1, r4, #12
 800bc9a:	0092      	lsls	r2, r2, #2
 800bc9c:	300c      	adds	r0, #12
 800bc9e:	f7ff fd4b 	bl	800b738 <memcpy>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4648      	mov	r0, r9
 800bca6:	f7fd fe39 	bl	800991c <_Bfree>
 800bcaa:	4654      	mov	r4, sl
 800bcac:	6922      	ldr	r2, [r4, #16]
 800bcae:	1c51      	adds	r1, r2, #1
 800bcb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bcb4:	6121      	str	r1, [r4, #16]
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	6151      	str	r1, [r2, #20]
 800bcba:	e7bc      	b.n	800bc36 <__gethex+0x396>
 800bcbc:	6921      	ldr	r1, [r4, #16]
 800bcbe:	4559      	cmp	r1, fp
 800bcc0:	dd0b      	ble.n	800bcda <__gethex+0x43a>
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f7ff fd83 	bl	800b7d0 <rshift>
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	3601      	adds	r6, #1
 800bcce:	42b3      	cmp	r3, r6
 800bcd0:	f6ff aedb 	blt.w	800ba8a <__gethex+0x1ea>
 800bcd4:	f04f 0801 	mov.w	r8, #1
 800bcd8:	e7c2      	b.n	800bc60 <__gethex+0x3c0>
 800bcda:	f015 051f 	ands.w	r5, r5, #31
 800bcde:	d0f9      	beq.n	800bcd4 <__gethex+0x434>
 800bce0:	9b01      	ldr	r3, [sp, #4]
 800bce2:	441a      	add	r2, r3
 800bce4:	f1c5 0520 	rsb	r5, r5, #32
 800bce8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bcec:	f7fd fec8 	bl	8009a80 <__hi0bits>
 800bcf0:	42a8      	cmp	r0, r5
 800bcf2:	dbe6      	blt.n	800bcc2 <__gethex+0x422>
 800bcf4:	e7ee      	b.n	800bcd4 <__gethex+0x434>
 800bcf6:	bf00      	nop
 800bcf8:	0800cbe5 	.word	0x0800cbe5

0800bcfc <L_shift>:
 800bcfc:	f1c2 0208 	rsb	r2, r2, #8
 800bd00:	0092      	lsls	r2, r2, #2
 800bd02:	b570      	push	{r4, r5, r6, lr}
 800bd04:	f1c2 0620 	rsb	r6, r2, #32
 800bd08:	6843      	ldr	r3, [r0, #4]
 800bd0a:	6804      	ldr	r4, [r0, #0]
 800bd0c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd10:	432c      	orrs	r4, r5
 800bd12:	40d3      	lsrs	r3, r2
 800bd14:	6004      	str	r4, [r0, #0]
 800bd16:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd1a:	4288      	cmp	r0, r1
 800bd1c:	d3f4      	bcc.n	800bd08 <L_shift+0xc>
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}

0800bd20 <__match>:
 800bd20:	b530      	push	{r4, r5, lr}
 800bd22:	6803      	ldr	r3, [r0, #0]
 800bd24:	3301      	adds	r3, #1
 800bd26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd2a:	b914      	cbnz	r4, 800bd32 <__match+0x12>
 800bd2c:	6003      	str	r3, [r0, #0]
 800bd2e:	2001      	movs	r0, #1
 800bd30:	bd30      	pop	{r4, r5, pc}
 800bd32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd3a:	2d19      	cmp	r5, #25
 800bd3c:	bf98      	it	ls
 800bd3e:	3220      	addls	r2, #32
 800bd40:	42a2      	cmp	r2, r4
 800bd42:	d0f0      	beq.n	800bd26 <__match+0x6>
 800bd44:	2000      	movs	r0, #0
 800bd46:	e7f3      	b.n	800bd30 <__match+0x10>

0800bd48 <__hexnan>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	680b      	ldr	r3, [r1, #0]
 800bd4e:	6801      	ldr	r1, [r0, #0]
 800bd50:	115e      	asrs	r6, r3, #5
 800bd52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd56:	f013 031f 	ands.w	r3, r3, #31
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	bf18      	it	ne
 800bd5e:	3604      	addne	r6, #4
 800bd60:	2500      	movs	r5, #0
 800bd62:	1f37      	subs	r7, r6, #4
 800bd64:	4682      	mov	sl, r0
 800bd66:	4690      	mov	r8, r2
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd6e:	46b9      	mov	r9, r7
 800bd70:	463c      	mov	r4, r7
 800bd72:	9502      	str	r5, [sp, #8]
 800bd74:	46ab      	mov	fp, r5
 800bd76:	784a      	ldrb	r2, [r1, #1]
 800bd78:	1c4b      	adds	r3, r1, #1
 800bd7a:	9303      	str	r3, [sp, #12]
 800bd7c:	b342      	cbz	r2, 800bdd0 <__hexnan+0x88>
 800bd7e:	4610      	mov	r0, r2
 800bd80:	9105      	str	r1, [sp, #20]
 800bd82:	9204      	str	r2, [sp, #16]
 800bd84:	f7ff fd76 	bl	800b874 <__hexdig_fun>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d14f      	bne.n	800be2c <__hexnan+0xe4>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	9905      	ldr	r1, [sp, #20]
 800bd90:	2a20      	cmp	r2, #32
 800bd92:	d818      	bhi.n	800bdc6 <__hexnan+0x7e>
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	459b      	cmp	fp, r3
 800bd98:	dd13      	ble.n	800bdc2 <__hexnan+0x7a>
 800bd9a:	454c      	cmp	r4, r9
 800bd9c:	d206      	bcs.n	800bdac <__hexnan+0x64>
 800bd9e:	2d07      	cmp	r5, #7
 800bda0:	dc04      	bgt.n	800bdac <__hexnan+0x64>
 800bda2:	462a      	mov	r2, r5
 800bda4:	4649      	mov	r1, r9
 800bda6:	4620      	mov	r0, r4
 800bda8:	f7ff ffa8 	bl	800bcfc <L_shift>
 800bdac:	4544      	cmp	r4, r8
 800bdae:	d950      	bls.n	800be52 <__hexnan+0x10a>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f1a4 0904 	sub.w	r9, r4, #4
 800bdb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdba:	f8cd b008 	str.w	fp, [sp, #8]
 800bdbe:	464c      	mov	r4, r9
 800bdc0:	461d      	mov	r5, r3
 800bdc2:	9903      	ldr	r1, [sp, #12]
 800bdc4:	e7d7      	b.n	800bd76 <__hexnan+0x2e>
 800bdc6:	2a29      	cmp	r2, #41	; 0x29
 800bdc8:	d155      	bne.n	800be76 <__hexnan+0x12e>
 800bdca:	3102      	adds	r1, #2
 800bdcc:	f8ca 1000 	str.w	r1, [sl]
 800bdd0:	f1bb 0f00 	cmp.w	fp, #0
 800bdd4:	d04f      	beq.n	800be76 <__hexnan+0x12e>
 800bdd6:	454c      	cmp	r4, r9
 800bdd8:	d206      	bcs.n	800bde8 <__hexnan+0xa0>
 800bdda:	2d07      	cmp	r5, #7
 800bddc:	dc04      	bgt.n	800bde8 <__hexnan+0xa0>
 800bdde:	462a      	mov	r2, r5
 800bde0:	4649      	mov	r1, r9
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff ff8a 	bl	800bcfc <L_shift>
 800bde8:	4544      	cmp	r4, r8
 800bdea:	d934      	bls.n	800be56 <__hexnan+0x10e>
 800bdec:	f1a8 0204 	sub.w	r2, r8, #4
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800bdfa:	429f      	cmp	r7, r3
 800bdfc:	d2f9      	bcs.n	800bdf2 <__hexnan+0xaa>
 800bdfe:	1b3b      	subs	r3, r7, r4
 800be00:	f023 0303 	bic.w	r3, r3, #3
 800be04:	3304      	adds	r3, #4
 800be06:	3e03      	subs	r6, #3
 800be08:	3401      	adds	r4, #1
 800be0a:	42a6      	cmp	r6, r4
 800be0c:	bf38      	it	cc
 800be0e:	2304      	movcc	r3, #4
 800be10:	4443      	add	r3, r8
 800be12:	2200      	movs	r2, #0
 800be14:	f843 2b04 	str.w	r2, [r3], #4
 800be18:	429f      	cmp	r7, r3
 800be1a:	d2fb      	bcs.n	800be14 <__hexnan+0xcc>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	b91b      	cbnz	r3, 800be28 <__hexnan+0xe0>
 800be20:	4547      	cmp	r7, r8
 800be22:	d126      	bne.n	800be72 <__hexnan+0x12a>
 800be24:	2301      	movs	r3, #1
 800be26:	603b      	str	r3, [r7, #0]
 800be28:	2005      	movs	r0, #5
 800be2a:	e025      	b.n	800be78 <__hexnan+0x130>
 800be2c:	3501      	adds	r5, #1
 800be2e:	2d08      	cmp	r5, #8
 800be30:	f10b 0b01 	add.w	fp, fp, #1
 800be34:	dd06      	ble.n	800be44 <__hexnan+0xfc>
 800be36:	4544      	cmp	r4, r8
 800be38:	d9c3      	bls.n	800bdc2 <__hexnan+0x7a>
 800be3a:	2300      	movs	r3, #0
 800be3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800be40:	2501      	movs	r5, #1
 800be42:	3c04      	subs	r4, #4
 800be44:	6822      	ldr	r2, [r4, #0]
 800be46:	f000 000f 	and.w	r0, r0, #15
 800be4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800be4e:	6020      	str	r0, [r4, #0]
 800be50:	e7b7      	b.n	800bdc2 <__hexnan+0x7a>
 800be52:	2508      	movs	r5, #8
 800be54:	e7b5      	b.n	800bdc2 <__hexnan+0x7a>
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d0df      	beq.n	800be1c <__hexnan+0xd4>
 800be5c:	f1c3 0320 	rsb	r3, r3, #32
 800be60:	f04f 32ff 	mov.w	r2, #4294967295
 800be64:	40da      	lsrs	r2, r3
 800be66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800be6a:	4013      	ands	r3, r2
 800be6c:	f846 3c04 	str.w	r3, [r6, #-4]
 800be70:	e7d4      	b.n	800be1c <__hexnan+0xd4>
 800be72:	3f04      	subs	r7, #4
 800be74:	e7d2      	b.n	800be1c <__hexnan+0xd4>
 800be76:	2004      	movs	r0, #4
 800be78:	b007      	add	sp, #28
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be7e <__ascii_mbtowc>:
 800be7e:	b082      	sub	sp, #8
 800be80:	b901      	cbnz	r1, 800be84 <__ascii_mbtowc+0x6>
 800be82:	a901      	add	r1, sp, #4
 800be84:	b142      	cbz	r2, 800be98 <__ascii_mbtowc+0x1a>
 800be86:	b14b      	cbz	r3, 800be9c <__ascii_mbtowc+0x1e>
 800be88:	7813      	ldrb	r3, [r2, #0]
 800be8a:	600b      	str	r3, [r1, #0]
 800be8c:	7812      	ldrb	r2, [r2, #0]
 800be8e:	1e10      	subs	r0, r2, #0
 800be90:	bf18      	it	ne
 800be92:	2001      	movne	r0, #1
 800be94:	b002      	add	sp, #8
 800be96:	4770      	bx	lr
 800be98:	4610      	mov	r0, r2
 800be9a:	e7fb      	b.n	800be94 <__ascii_mbtowc+0x16>
 800be9c:	f06f 0001 	mvn.w	r0, #1
 800bea0:	e7f8      	b.n	800be94 <__ascii_mbtowc+0x16>

0800bea2 <_realloc_r>:
 800bea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea6:	4680      	mov	r8, r0
 800bea8:	4614      	mov	r4, r2
 800beaa:	460e      	mov	r6, r1
 800beac:	b921      	cbnz	r1, 800beb8 <_realloc_r+0x16>
 800beae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beb2:	4611      	mov	r1, r2
 800beb4:	f7fd bc66 	b.w	8009784 <_malloc_r>
 800beb8:	b92a      	cbnz	r2, 800bec6 <_realloc_r+0x24>
 800beba:	f7fd fbef 	bl	800969c <_free_r>
 800bebe:	4625      	mov	r5, r4
 800bec0:	4628      	mov	r0, r5
 800bec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec6:	f000 f842 	bl	800bf4e <_malloc_usable_size_r>
 800beca:	4284      	cmp	r4, r0
 800becc:	4607      	mov	r7, r0
 800bece:	d802      	bhi.n	800bed6 <_realloc_r+0x34>
 800bed0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bed4:	d812      	bhi.n	800befc <_realloc_r+0x5a>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4640      	mov	r0, r8
 800beda:	f7fd fc53 	bl	8009784 <_malloc_r>
 800bede:	4605      	mov	r5, r0
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d0ed      	beq.n	800bec0 <_realloc_r+0x1e>
 800bee4:	42bc      	cmp	r4, r7
 800bee6:	4622      	mov	r2, r4
 800bee8:	4631      	mov	r1, r6
 800beea:	bf28      	it	cs
 800beec:	463a      	movcs	r2, r7
 800beee:	f7ff fc23 	bl	800b738 <memcpy>
 800bef2:	4631      	mov	r1, r6
 800bef4:	4640      	mov	r0, r8
 800bef6:	f7fd fbd1 	bl	800969c <_free_r>
 800befa:	e7e1      	b.n	800bec0 <_realloc_r+0x1e>
 800befc:	4635      	mov	r5, r6
 800befe:	e7df      	b.n	800bec0 <_realloc_r+0x1e>

0800bf00 <__ascii_wctomb>:
 800bf00:	b149      	cbz	r1, 800bf16 <__ascii_wctomb+0x16>
 800bf02:	2aff      	cmp	r2, #255	; 0xff
 800bf04:	bf85      	ittet	hi
 800bf06:	238a      	movhi	r3, #138	; 0x8a
 800bf08:	6003      	strhi	r3, [r0, #0]
 800bf0a:	700a      	strbls	r2, [r1, #0]
 800bf0c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf10:	bf98      	it	ls
 800bf12:	2001      	movls	r0, #1
 800bf14:	4770      	bx	lr
 800bf16:	4608      	mov	r0, r1
 800bf18:	4770      	bx	lr
	...

0800bf1c <fiprintf>:
 800bf1c:	b40e      	push	{r1, r2, r3}
 800bf1e:	b503      	push	{r0, r1, lr}
 800bf20:	4601      	mov	r1, r0
 800bf22:	ab03      	add	r3, sp, #12
 800bf24:	4805      	ldr	r0, [pc, #20]	; (800bf3c <fiprintf+0x20>)
 800bf26:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf2a:	6800      	ldr	r0, [r0, #0]
 800bf2c:	9301      	str	r3, [sp, #4]
 800bf2e:	f7ff f97b 	bl	800b228 <_vfiprintf_r>
 800bf32:	b002      	add	sp, #8
 800bf34:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf38:	b003      	add	sp, #12
 800bf3a:	4770      	bx	lr
 800bf3c:	20000064 	.word	0x20000064

0800bf40 <abort>:
 800bf40:	b508      	push	{r3, lr}
 800bf42:	2006      	movs	r0, #6
 800bf44:	f000 f834 	bl	800bfb0 <raise>
 800bf48:	2001      	movs	r0, #1
 800bf4a:	f7f6 f977 	bl	800223c <_exit>

0800bf4e <_malloc_usable_size_r>:
 800bf4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf52:	1f18      	subs	r0, r3, #4
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfbc      	itt	lt
 800bf58:	580b      	ldrlt	r3, [r1, r0]
 800bf5a:	18c0      	addlt	r0, r0, r3
 800bf5c:	4770      	bx	lr

0800bf5e <_raise_r>:
 800bf5e:	291f      	cmp	r1, #31
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	460d      	mov	r5, r1
 800bf66:	d904      	bls.n	800bf72 <_raise_r+0x14>
 800bf68:	2316      	movs	r3, #22
 800bf6a:	6003      	str	r3, [r0, #0]
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	bd38      	pop	{r3, r4, r5, pc}
 800bf72:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bf74:	b112      	cbz	r2, 800bf7c <_raise_r+0x1e>
 800bf76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf7a:	b94b      	cbnz	r3, 800bf90 <_raise_r+0x32>
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f000 f831 	bl	800bfe4 <_getpid_r>
 800bf82:	462a      	mov	r2, r5
 800bf84:	4601      	mov	r1, r0
 800bf86:	4620      	mov	r0, r4
 800bf88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf8c:	f000 b818 	b.w	800bfc0 <_kill_r>
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d00a      	beq.n	800bfaa <_raise_r+0x4c>
 800bf94:	1c59      	adds	r1, r3, #1
 800bf96:	d103      	bne.n	800bfa0 <_raise_r+0x42>
 800bf98:	2316      	movs	r3, #22
 800bf9a:	6003      	str	r3, [r0, #0]
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	e7e7      	b.n	800bf70 <_raise_r+0x12>
 800bfa0:	2400      	movs	r4, #0
 800bfa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	4798      	blx	r3
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e7e0      	b.n	800bf70 <_raise_r+0x12>
	...

0800bfb0 <raise>:
 800bfb0:	4b02      	ldr	r3, [pc, #8]	; (800bfbc <raise+0xc>)
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	6818      	ldr	r0, [r3, #0]
 800bfb6:	f7ff bfd2 	b.w	800bf5e <_raise_r>
 800bfba:	bf00      	nop
 800bfbc:	20000064 	.word	0x20000064

0800bfc0 <_kill_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4d07      	ldr	r5, [pc, #28]	; (800bfe0 <_kill_r+0x20>)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	4608      	mov	r0, r1
 800bfca:	4611      	mov	r1, r2
 800bfcc:	602b      	str	r3, [r5, #0]
 800bfce:	f7f6 f925 	bl	800221c <_kill>
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d102      	bne.n	800bfdc <_kill_r+0x1c>
 800bfd6:	682b      	ldr	r3, [r5, #0]
 800bfd8:	b103      	cbz	r3, 800bfdc <_kill_r+0x1c>
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	bd38      	pop	{r3, r4, r5, pc}
 800bfde:	bf00      	nop
 800bfe0:	200004f4 	.word	0x200004f4

0800bfe4 <_getpid_r>:
 800bfe4:	f7f6 b912 	b.w	800220c <_getpid>

0800bfe8 <_init>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	bf00      	nop
 800bfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfee:	bc08      	pop	{r3}
 800bff0:	469e      	mov	lr, r3
 800bff2:	4770      	bx	lr

0800bff4 <_fini>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	bf00      	nop
 800bff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffa:	bc08      	pop	{r3}
 800bffc:	469e      	mov	lr, r3
 800bffe:	4770      	bx	lr
