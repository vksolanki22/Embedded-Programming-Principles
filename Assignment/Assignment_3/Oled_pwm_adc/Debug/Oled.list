
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0800be70  0800be70  0001be70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd80  0800cd80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd80  0800cd80  0001cd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd88  0800cd88  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd88  0800cd88  0001cd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800cd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  0800cf64  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800cf64  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016fd0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d71  00000000  00000000  00037217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b0  00000000  00000000  00039f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002450a  00000000  00000000  0003b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001887c  00000000  00000000  0005fa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df4f8  00000000  00000000  000782be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000010d3  00000000  00000000  001577b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007288  00000000  00000000  0015888c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ca  00000000  00000000  0015fb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be58 	.word	0x0800be58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800be58 	.word	0x0800be58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	float temperatureValue = 0.0;
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init ();
 8000ffc:	f001 f9b5 	bl	800236a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config ();
 8001000:	f000 f8d6 	bl	80011b0 <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	/* USER CODE BEGIN 2 */
	MX_GPIO_Init ();
 8001004:	f000 fad0 	bl	80015a8 <MX_GPIO_Init>
	MX_USART2_UART_Init ();
 8001008:	f000 fa9e 	bl	8001548 <MX_USART2_UART_Init>
	MX_SPI1_Init ();
 800100c:	f000 f996 	bl	800133c <MX_SPI1_Init>
	MX_TIM1_Init ();
 8001010:	f000 f9d2 	bl	80013b8 <MX_TIM1_Init>
	MX_ADC1_Init ();
 8001014:	f000 f92e 	bl	8001274 <MX_ADC1_Init>
	ssd1331_init ();
 8001018:	f000 fe3c 	bl	8001c94 <ssd1331_init>

	/* Run the ADC calibration in single-ended mode */
	if (HAL_ADCEx_Calibration_Start (&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800101c:	217f      	movs	r1, #127	; 0x7f
 800101e:	4857      	ldr	r0, [pc, #348]	; (800117c <main+0x18c>)
 8001020:	f002 fc76 	bl	8003910 <HAL_ADCEx_Calibration_Start>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x3e>
	{
		/* Calibration Error */
		Error_Handler ();
 800102a:	f000 fcd9 	bl	80019e0 <Error_Handler>

	/*
	 * Note : for the n channels HAL_TIMEx_PWMN_Start() is used
	 * for normal channels HAL_TIM_PWM_Start
	 */
	HAL_TIMEx_PWMN_Start (&htim1, TIM_CHANNEL_1);
 800102e:	2100      	movs	r1, #0
 8001030:	4853      	ldr	r0, [pc, #332]	; (8001180 <main+0x190>)
 8001032:	f005 fb83 	bl	800673c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_2);
 8001036:	2104      	movs	r1, #4
 8001038:	4851      	ldr	r0, [pc, #324]	; (8001180 <main+0x190>)
 800103a:	f004 fd21 	bl	8005a80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start (&htim1, TIM_CHANNEL_3);
 800103e:	2108      	movs	r1, #8
 8001040:	484f      	ldr	r0, [pc, #316]	; (8001180 <main+0x190>)
 8001042:	f004 fd1d 	bl	8005a80 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/*##-3- Start the conversion process #######################################*/
		if (HAL_ADC_Start (&hadc1) != HAL_OK)
 8001046:	484d      	ldr	r0, [pc, #308]	; (800117c <main+0x18c>)
 8001048:	f001 fd80 	bl	8002b4c <HAL_ADC_Start>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <main+0x66>
		{
			/* Start Conversation Error */
			Error_Handler ();
 8001052:	f000 fcc5 	bl	80019e0 <Error_Handler>

		/*##-4- Wait for the end of conversion #####################################*/
		/*  For simplicity reasons, this example is just waiting till the end of the
		 conversion, but application may perform other tasks while conversion
		 operation is ongoing. */
		if (HAL_ADC_PollForConversion (&hadc1, 10) != HAL_OK)
 8001056:	210a      	movs	r1, #10
 8001058:	4848      	ldr	r0, [pc, #288]	; (800117c <main+0x18c>)
 800105a:	f001 fe0d 	bl	8002c78 <HAL_ADC_PollForConversion>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <main+0x7a>
		{
			/* End Of Conversion flag not set on time */
			Error_Handler ();
 8001064:	f000 fcbc 	bl	80019e0 <Error_Handler>
 8001068:	e7ed      	b.n	8001046 <main+0x56>
		}
		else
		{
			/* ADC conversion completed */
			/*##-5- Get the converted value of regular channel  ########################*/
			uhADCxConvertedValue = HAL_ADC_GetValue (&hadc1);
 800106a:	4844      	ldr	r0, [pc, #272]	; (800117c <main+0x18c>)
 800106c:	f001 fe93 	bl	8002d96 <HAL_ADC_GetValue>
 8001070:	4603      	mov	r3, r0
 8001072:	4a44      	ldr	r2, [pc, #272]	; (8001184 <main+0x194>)
 8001074:	6013      	str	r3, [r2, #0]
			buttonState = HAL_GPIO_ReadPin (GPIOA, GPIO_PIN_11);
 8001076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f002 fef7 	bl	8003e70 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b40      	ldr	r3, [pc, #256]	; (8001188 <main+0x198>)
 8001088:	701a      	strb	r2, [r3, #0]
			HAL_ADC_Stop (&hadc1);
 800108a:	483c      	ldr	r0, [pc, #240]	; (800117c <main+0x18c>)
 800108c:	f001 fdc1 	bl	8002c12 <HAL_ADC_Stop>
			print_flag++;
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <main+0x19c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a3d      	ldr	r2, [pc, #244]	; (800118c <main+0x19c>)
 8001098:	6013      	str	r3, [r2, #0]

			if (print_flag == 1000)
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <main+0x19c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a2:	d102      	bne.n	80010aa <main+0xba>
			{
				print_flag = 0;
 80010a4:	4b39      	ldr	r3, [pc, #228]	; (800118c <main+0x19c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
			}

			// convert sensor value to TempratureValue
			temperatureValue = getTempratureValue (uhADCxConvertedValue);
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <main+0x194>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fb16 	bl	80016e0 <getTempratureValue>
 80010b4:	ed87 0a01 	vstr	s0, [r7, #4]

			// Derive temparature unit to be displayed
			if (buttonState == GPIO_PIN_RESET)
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <main+0x198>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <main+0xe8>
			{
				if(temperatureUnit == TEMPERATURE_UNIT_CELSIUS)
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <main+0x1a0>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <main+0xe2>
				{
					temperatureUnit = TEMPERATURE_UNIT_FAHRENHEIT;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <main+0x1a0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e002      	b.n	80010d8 <main+0xe8>
				}
				else
				{
					temperatureUnit = TEMPERATURE_UNIT_CELSIUS;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <main+0x1a0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
				}
			}

			// Making string to be printed on OLED Display with Temparature unit with Button state
			if (temperatureUnit == TEMPERATURE_UNIT_FAHRENHEIT)
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <main+0x1a0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d123      	bne.n	8001128 <main+0x138>
			{
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f",
				                 conevertToFerenhit (temperatureValue));
 80010e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80010e4:	f000 fb3e 	bl	8001764 <conevertToFerenhit>
 80010e8:	ee10 3a10 	vmov	r3, s0
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f",
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9cd 2300 	strd	r2, r3, [sp]
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <main+0x1a4>)
 80010fc:	210e      	movs	r1, #14
 80010fe:	4826      	ldr	r0, [pc, #152]	; (8001198 <main+0x1a8>)
 8001100:	f007 f9d8 	bl	80084b4 <sniprintf>
 8001104:	4603      	mov	r3, r0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <main+0x1ac>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4413      	add	r3, r2
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <main+0x1ac>)
 8001112:	701a      	strb	r2, [r3, #0]
				snprintf (tempSign + 4, sizeof(tempSign) - idx, "%s", " F");
 8001114:	4822      	ldr	r0, [pc, #136]	; (80011a0 <main+0x1b0>)
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <main+0x1ac>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f1c3 010e 	rsb	r1, r3, #14
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <main+0x1b4>)
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <main+0x1b8>)
 8001122:	f007 f9c7 	bl	80084b4 <sniprintf>
 8001126:	e01c      	b.n	8001162 <main+0x172>
				#endif

			}
			else
			{
				idx += snprintf (tempSign, sizeof(tempSign), "%.1f", temperatureValue);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fa0d 	bl	8000548 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9cd 2300 	strd	r2, r3, [sp]
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <main+0x1a4>)
 8001138:	210e      	movs	r1, #14
 800113a:	4817      	ldr	r0, [pc, #92]	; (8001198 <main+0x1a8>)
 800113c:	f007 f9ba 	bl	80084b4 <sniprintf>
 8001140:	4603      	mov	r3, r0
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <main+0x1ac>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4413      	add	r3, r2
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <main+0x1ac>)
 800114e:	701a      	strb	r2, [r3, #0]
				snprintf (tempSign + 4, sizeof(tempSign) - idx, "%s", " C");
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <main+0x1b0>)
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <main+0x1ac>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f1c3 010e 	rsb	r1, r3, #14
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <main+0x1bc>)
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <main+0x1b8>)
 800115e:	f007 f9a9 	bl	80084b4 <sniprintf>
				#ifdef DEBUG_ON
				printf ("buttonState = %d, tempSign = %s\r\n", buttonState, tempSign);
				#endif
			}
			idx = 0;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <main+0x1ac>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

			// Sets Colour on RGB LED
			displayTemparatureAndGlowColour (temperatureValue);
 8001168:	ed97 0a01 	vldr	s0, [r7, #4]
 800116c:	f000 fb10 	bl	8001790 <displayTemparatureAndGlowColour>

			// Delay to take update temparature
			HAL_Delay (500);
 8001170:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001174:	f001 f96e 	bl	8002454 <HAL_Delay>
		if (HAL_ADC_Start (&hadc1) != HAL_OK)
 8001178:	e765      	b.n	8001046 <main+0x56>
 800117a:	bf00      	nop
 800117c:	200001f0 	.word	0x200001f0
 8001180:	200002b8 	.word	0x200002b8
 8001184:	2000038c 	.word	0x2000038c
 8001188:	20000390 	.word	0x20000390
 800118c:	20000394 	.word	0x20000394
 8001190:	20000391 	.word	0x20000391
 8001194:	0800be70 	.word	0x0800be70
 8001198:	2000039c 	.word	0x2000039c
 800119c:	20000398 	.word	0x20000398
 80011a0:	200003a0 	.word	0x200003a0
 80011a4:	0800be78 	.word	0x0800be78
 80011a8:	0800be7c 	.word	0x0800be7c
 80011ac:	0800be80 	.word	0x0800be80

080011b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2244      	movs	r2, #68	; 0x44
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f007 fa0f 	bl	80085e2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d6:	f002 fe99 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x34>
	{
		Error_Handler ();
 80011e0:	f000 fbfe 	bl	80019e0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 80011e4:	f002 fe74 	bl	8003ed0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <SystemClock_Config+0xc0>)
 80011ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <SystemClock_Config+0xc0>)
 80011f0:	f023 0318 	bic.w	r3, r3, #24
 80011f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 80011f8:	2314      	movs	r3, #20
 80011fa:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001208:	2360      	movs	r3, #96	; 0x60
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001210:	2301      	movs	r3, #1
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001214:	2301      	movs	r3, #1
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001218:	2310      	movs	r3, #16
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800121c:	2307      	movs	r3, #7
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001224:	2302      	movs	r3, #2
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fec3 	bl	8003fb8 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x8c>
	{
		Error_Handler ();
 8001238:	f000 fbd2 	bl	80019e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	603b      	str	r3, [r7, #0]
	                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2303      	movs	r3, #3
 8001242:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2101      	movs	r1, #1
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fac3 	bl	80047e0 <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xb4>
	{
		Error_Handler ();
 8001260:	f000 fbbe 	bl	80019e0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 8001264:	f003 fed6 	bl	8005014 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001268:	bf00      	nop
 800126a:	3758      	adds	r7, #88	; 0x58
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000

08001274 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
 8001288:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_ADC1_Init+0xbc>)
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <MX_ADC1_Init+0xc0>)
 800128e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <MX_ADC1_Init+0xbc>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <MX_ADC1_Init+0xbc>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <MX_ADC1_Init+0xbc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a8:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012aa:	2204      	movs	r2, #4
 80012ac:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012bc:	2201      	movs	r2, #1
 80012be:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init (&hadc1) != HAL_OK)
 80012ea:	4811      	ldr	r0, [pc, #68]	; (8001330 <MX_ADC1_Init+0xbc>)
 80012ec:	f001 faec 	bl	80028c8 <HAL_ADC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x86>
	{
		Error_Handler ();
 80012f6:	f000 fb73 	bl	80019e0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_ADC1_Init+0xc4>)
 80012fc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2306      	movs	r3, #6
 8001300:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001306:	237f      	movs	r3, #127	; 0x7f
 8001308:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800130a:	2304      	movs	r3, #4
 800130c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_ADC1_Init+0xbc>)
 8001318:	f001 fd4a 	bl	8002db0 <HAL_ADC_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0xb2>
	{
		Error_Handler ();
 8001322:	f000 fb5d 	bl	80019e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001f0 	.word	0x200001f0
 8001334:	50040000 	.word	0x50040000
 8001338:	14f00020 	.word	0x14f00020

0800133c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_SPI1_Init+0x78>)
 8001344:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001348:	f44f 7282 	mov.w	r2, #260	; 0x104
 800134c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001356:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800135a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_SPI1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_SPI1_Init+0x74>)
 800136a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001372:	2210      	movs	r2, #16
 8001374:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_SPI1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_SPI1_Init+0x74>)
 800138a:	2207      	movs	r2, #7
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_SPI1_Init+0x74>)
 8001396:	2208      	movs	r2, #8
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_SPI1_Init+0x74>)
 800139c:	f003 ff3c 	bl	8005218 <HAL_SPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_SPI1_Init+0x6e>
	{
		Error_Handler ();
 80013a6:	f000 fb1b 	bl	80019e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000254 	.word	0x20000254
 80013b4:	40013000 	.word	0x40013000

080013b8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09a      	sub	sp, #104	; 0x68
 80013bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	222c      	movs	r2, #44	; 0x2c
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 f8f5 	bl	80085e2 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <MX_TIM1_Init+0x188>)
 80013fa:	4a52      	ldr	r2, [pc, #328]	; (8001544 <MX_TIM1_Init+0x18c>)
 80013fc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8;
 80013fe:	4b50      	ldr	r3, [pc, #320]	; (8001540 <MX_TIM1_Init+0x188>)
 8001400:	2208      	movs	r2, #8
 8001402:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b4e      	ldr	r3, [pc, #312]	; (8001540 <MX_TIM1_Init+0x188>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100;
 800140a:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <MX_TIM1_Init+0x188>)
 800140c:	2264      	movs	r2, #100	; 0x64
 800140e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <MX_TIM1_Init+0x188>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001416:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <MX_TIM1_Init+0x188>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b48      	ldr	r3, [pc, #288]	; (8001540 <MX_TIM1_Init+0x188>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init (&htim1) != HAL_OK)
 8001422:	4847      	ldr	r0, [pc, #284]	; (8001540 <MX_TIM1_Init+0x188>)
 8001424:	f004 fa74 	bl	8005910 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0x7a>
	{
		Error_Handler ();
 800142e:	f000 fad7 	bl	80019e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource (&htim1, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800143c:	4619      	mov	r1, r3
 800143e:	4840      	ldr	r0, [pc, #256]	; (8001540 <MX_TIM1_Init+0x188>)
 8001440:	f004 fd10 	bl	8005e64 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM1_Init+0x96>
	{
		Error_Handler ();
 800144a:	f000 fac9 	bl	80019e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init (&htim1) != HAL_OK)
 800144e:	483c      	ldr	r0, [pc, #240]	; (8001540 <MX_TIM1_Init+0x188>)
 8001450:	f004 fab5 	bl	80059be <HAL_TIM_PWM_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xa6>
	{
		Error_Handler ();
 800145a:	f000 fac1 	bl	80019e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization (&htim1, &sMasterConfig) != HAL_OK)
 800146a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800146e:	4619      	mov	r1, r3
 8001470:	4833      	ldr	r0, [pc, #204]	; (8001540 <MX_TIM1_Init+0x188>)
 8001472:	f005 fa01 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0xc8>
	{
		Error_Handler ();
 800147c:	f000 fab0 	bl	80019e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001480:	2360      	movs	r3, #96	; 0x60
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 100;
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	4826      	ldr	r0, [pc, #152]	; (8001540 <MX_TIM1_Init+0x188>)
 80014a6:	f004 fbc9 	bl	8005c3c <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0xfc>
	{
		Error_Handler ();
 80014b0:	f000 fa96 	bl	80019e0 <Error_Handler>
	}
	sConfigOC.Pulse = 120;
 80014b4:	2378      	movs	r3, #120	; 0x78
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014bc:	2204      	movs	r2, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <MX_TIM1_Init+0x188>)
 80014c2:	f004 fbbb 	bl	8005c3c <HAL_TIM_PWM_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x118>
	{
		Error_Handler ();
 80014cc:	f000 fa88 	bl	80019e0 <Error_Handler>
	}
	sConfigOC.Pulse = 130;
 80014d0:	2382      	movs	r3, #130	; 0x82
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel (&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d8:	2208      	movs	r2, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	4818      	ldr	r0, [pc, #96]	; (8001540 <MX_TIM1_Init+0x188>)
 80014de:	f004 fbad 	bl	8005c3c <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x134>
	{
		Error_Handler ();
 80014e8:	f000 fa7a 	bl	80019e0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001504:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800150e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput =
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime (&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM1_Init+0x188>)
 8001522:	f005 fa0f 	bl	8006944 <HAL_TIMEx_ConfigBreakDeadTime>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0x178>
	{
		Error_Handler ();
 800152c:	f000 fa58 	bl	80019e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit (&htim1);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM1_Init+0x188>)
 8001532:	f000 fd47 	bl	8001fc4 <HAL_TIM_MspPostInit>

}
 8001536:	bf00      	nop
 8001538:	3768      	adds	r7, #104	; 0x68
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002b8 	.word	0x200002b8
 8001544:	40012c00 	.word	0x40012c00

08001548 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800154e:	4a15      	ldr	r2, [pc, #84]	; (80015a4 <MX_USART2_UART_Init+0x5c>)
 8001550:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init (&huart2) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_USART2_UART_Init+0x58>)
 800158c:	f005 fa77 	bl	8006a7e <HAL_UART_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler ();
 8001596:	f000 fa23 	bl	80019e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000304 	.word	0x20000304
 80015a4:	40004400 	.word	0x40004400

080015a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_GPIO_Init+0xa8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (
 8001606:	2200      	movs	r2, #0
 8001608:	2178      	movs	r1, #120	; 0x78
 800160a:	4812      	ldr	r0, [pc, #72]	; (8001654 <MX_GPIO_Init+0xac>)
 800160c:	f002 fc48 	bl	8003ea0 <HAL_GPIO_WritePin>
	GPIOB,
	                   LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin,
	                   GPIO_PIN_RESET);

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001614:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f002 fab8 	bl	8003b9c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin;
 800162c:	2378      	movs	r3, #120	; 0x78
 800162e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_GPIO_Init+0xac>)
 8001644:	f002 faaa 	bl	8003b9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	48000400 	.word	0x48000400

08001658 <setPwmDutyCycle>:
  * DESCRIPTION   : This function sets the duty cycle for timer 1's
  *				 	whatever channel number is passed.
  *******************************************************************************
  */
void setPwmDutyCycle(ChannelNum_e timer_channel_num, uint16_t percentage)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	80bb      	strh	r3, [r7, #4]
	if (percentage > 100)
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <setPwmDutyCycle+0x1a>
	{
		percentage = 100;
 800166e:	2364      	movs	r3, #100	; 0x64
 8001670:	80bb      	strh	r3, [r7, #4]
	}
	else if(percentage < 0)
	{
		percentage = 0;
	}
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d104      	bne.n	8001682 <setPwmDutyCycle+0x2a>
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <setPwmDutyCycle+0x80>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	88ba      	ldrh	r2, [r7, #4]
 800167e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001680:	e023      	b.n	80016ca <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b04      	cmp	r3, #4
 8001686:	d104      	bne.n	8001692 <setPwmDutyCycle+0x3a>
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <setPwmDutyCycle+0x80>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001690:	e01b      	b.n	80016ca <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b08      	cmp	r3, #8
 8001696:	d104      	bne.n	80016a2 <setPwmDutyCycle+0x4a>
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <setPwmDutyCycle+0x80>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80016a0:	e013      	b.n	80016ca <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d104      	bne.n	80016b2 <setPwmDutyCycle+0x5a>
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <setPwmDutyCycle+0x80>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
}
 80016b0:	e00b      	b.n	80016ca <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d104      	bne.n	80016c2 <setPwmDutyCycle+0x6a>
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <setPwmDutyCycle+0x80>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	6593      	str	r3, [r2, #88]	; 0x58
}
 80016c0:	e003      	b.n	80016ca <setPwmDutyCycle+0x72>
	__HAL_TIM_SET_COMPARE(&htim1, timer_channel_num, percentage);
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <setPwmDutyCycle+0x80>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200002b8 	.word	0x200002b8
 80016dc:	00000000 	.word	0x00000000

080016e0 <getTempratureValue>:
  * DESCRIPTION   : This Function Calculates the Temparature value from value readed
  * 				from sensor and returns float value which will be on °C.
  *******************************************************************************
  */
static float getTempratureValue(uint32_t iSensorValue)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	return (((3.3 * iSensorValue) / 4096.0) - 0.5) * 100;
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7fe ff0b 	bl	8000504 <__aeabi_ui2d>
 80016ee:	a31b      	add	r3, pc, #108	; (adr r3, 800175c <getTempratureValue+0x7c>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <getTempratureValue+0x70>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <getTempratureValue+0x74>)
 8001718:	f7fe fdb6 	bl	8000288 <__aeabi_dsub>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <getTempratureValue+0x78>)
 800172a:	f7fe ff65 	bl	80005f8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa57 	bl	8000be8 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	ee07 3a90 	vmov	s15, r3
}
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	40b00000 	.word	0x40b00000
 8001754:	3fe00000 	.word	0x3fe00000
 8001758:	40590000 	.word	0x40590000
 800175c:	66666666 	.word	0x66666666
 8001760:	400a6666 	.word	0x400a6666

08001764 <conevertToFerenhit>:
  * RETURNS       : float
  * DESCRIPTION   : This Function converts the value from °C to °F
  *******************************************************************************
  */
static float conevertToFerenhit(float temperatureValue)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	ed87 0a01 	vstr	s0, [r7, #4]
	return temperatureValue * (9 / 5) + 32;
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001788 <conevertToFerenhit+0x24>
 8001776:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800177a:	eeb0 0a67 	vmov.f32	s0, s15
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	42000000 	.word	0x42000000
 800178c:	00000000 	.word	0x00000000

08001790 <displayTemparatureAndGlowColour>:
  *					then accoding to defined raangle display Temprature string on OLED
  *					and glow LED with colour.
  *******************************************************************************
  */
static void displayTemparatureAndGlowColour(float temperatureValue)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af02      	add	r7, sp, #8
 8001796:	ed87 0a01 	vstr	s0, [r7, #4]
	int dutyCycle = 100;
 800179a:	2364      	movs	r3, #100	; 0x64
 800179c:	60fb      	str	r3, [r7, #12]
	if (temperatureValue < -15.0)
 800179e:	edd7 7a01 	vldr	s15, [r7, #4]
 80017a2:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 80017a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ae:	d524      	bpl.n	80017fa <displayTemparatureAndGlowColour+0x6a>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 80017b0:	f24a 131e 	movw	r3, #41246	; 0xa11e
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	230c      	movs	r3, #12
 80017b8:	4a85      	ldr	r2, [pc, #532]	; (80019d0 <displayTemparatureAndGlowColour+0x240>)
 80017ba:	2102      	movs	r1, #2
 80017bc:	2002      	movs	r0, #2
 80017be:	f000 f9fb 	bl	8001bb8 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, PURPLE);
 80017c2:	f24a 131e 	movw	r3, #41246	; 0xa11e
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	230c      	movs	r3, #12
 80017ca:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <displayTemparatureAndGlowColour+0x244>)
 80017cc:	2102      	movs	r1, #2
 80017ce:	2036      	movs	r0, #54	; 0x36
 80017d0:	f000 f9f2 	bl	8001bb8 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);	//Generating Shades of red
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff ff3c 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, dutyCycle);	//Generating Shades of green
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4619      	mov	r1, r3
 80017e6:	2004      	movs	r0, #4
 80017e8:	f7ff ff36 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, dutyCycle);	//Generating Shades of blue
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4619      	mov	r1, r3
 80017f2:	2008      	movs	r0, #8
 80017f4:	f7ff ff30 	bl	8001658 <setPwmDutyCycle>
 80017f8:	e0c6      	b.n	8001988 <displayTemparatureAndGlowColour+0x1f8>
		#ifdef DEBUG_ON
		printf ("PURPLE\r\n");
		#endif
	}
	else if (temperatureValue >= -15.0 && temperatureValue <= 5.0)
 80017fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fe:	eeba 7a0e 	vmov.f32	s14, #174	; 0xc1700000 -15.0
 8001802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	db28      	blt.n	800185e <displayTemparatureAndGlowColour+0xce>
 800180c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001810:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d81f      	bhi.n	800185e <displayTemparatureAndGlowColour+0xce>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 800181e:	f24a 131e 	movw	r3, #41246	; 0xa11e
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	230c      	movs	r3, #12
 8001826:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <displayTemparatureAndGlowColour+0x240>)
 8001828:	2102      	movs	r1, #2
 800182a:	2002      	movs	r0, #2
 800182c:	f000 f9c4 	bl	8001bb8 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, BLUE);
 8001830:	231f      	movs	r3, #31
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	230c      	movs	r3, #12
 8001836:	4a67      	ldr	r2, [pc, #412]	; (80019d4 <displayTemparatureAndGlowColour+0x244>)
 8001838:	2102      	movs	r1, #2
 800183a:	2036      	movs	r0, #54	; 0x36
 800183c:	f000 f9bc 	bl	8001bb8 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, 0);
 8001840:	2100      	movs	r1, #0
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff ff08 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 0);
 8001848:	2100      	movs	r1, #0
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff ff04 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, dutyCycle);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	b29b      	uxth	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	2008      	movs	r0, #8
 8001858:	f7ff fefe 	bl	8001658 <setPwmDutyCycle>
 800185c:	e094      	b.n	8001988 <displayTemparatureAndGlowColour+0x1f8>
		#ifdef DEBUG_ON
		printf ("Blue\r\n");
		#endif
	}
	else if (temperatureValue >= 5.1 && temperatureValue <= 15.0)
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fe72 	bl	8000548 <__aeabi_f2d>
 8001864:	a354      	add	r3, pc, #336	; (adr r3, 80019b8 <displayTemparatureAndGlowColour+0x228>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7ff f94b 	bl	8000b04 <__aeabi_dcmpge>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02b      	beq.n	80018cc <displayTemparatureAndGlowColour+0x13c>
 8001874:	edd7 7a01 	vldr	s15, [r7, #4]
 8001878:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800187c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	d822      	bhi.n	80018cc <displayTemparatureAndGlowColour+0x13c>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 8001886:	f24a 131e 	movw	r3, #41246	; 0xa11e
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	230c      	movs	r3, #12
 800188e:	4a50      	ldr	r2, [pc, #320]	; (80019d0 <displayTemparatureAndGlowColour+0x240>)
 8001890:	2102      	movs	r1, #2
 8001892:	2002      	movs	r0, #2
 8001894:	f000 f990 	bl	8001bb8 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, YELLOW);
 8001898:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	230c      	movs	r3, #12
 80018a0:	4a4c      	ldr	r2, [pc, #304]	; (80019d4 <displayTemparatureAndGlowColour+0x244>)
 80018a2:	2102      	movs	r1, #2
 80018a4:	2036      	movs	r0, #54	; 0x36
 80018a6:	f000 f987 	bl	8001bb8 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff fed1 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, dutyCycle);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	2004      	movs	r0, #4
 80018be:	f7ff fecb 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 80018c2:	2100      	movs	r1, #0
 80018c4:	2008      	movs	r0, #8
 80018c6:	f7ff fec7 	bl	8001658 <setPwmDutyCycle>
 80018ca:	e05d      	b.n	8001988 <displayTemparatureAndGlowColour+0x1f8>
		#ifdef DEBUG_ON
		printf ("Yellow\r\n");
		#endif
	}
	else if (temperatureValue >= 15.1 && temperatureValue <= 25.0)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7fe fe3b 	bl	8000548 <__aeabi_f2d>
 80018d2:	a33b      	add	r3, pc, #236	; (adr r3, 80019c0 <displayTemparatureAndGlowColour+0x230>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7ff f914 	bl	8000b04 <__aeabi_dcmpge>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d027      	beq.n	8001932 <displayTemparatureAndGlowColour+0x1a2>
 80018e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d81e      	bhi.n	8001932 <displayTemparatureAndGlowColour+0x1a2>
	{
		ssd1331_display_string (2, 2, "Temp.:", FONT_1206, PURPLE);
 80018f4:	f24a 131e 	movw	r3, #41246	; 0xa11e
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	230c      	movs	r3, #12
 80018fc:	4a34      	ldr	r2, [pc, #208]	; (80019d0 <displayTemparatureAndGlowColour+0x240>)
 80018fe:	2102      	movs	r1, #2
 8001900:	2002      	movs	r0, #2
 8001902:	f000 f959 	bl	8001bb8 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, ORANGE);
 8001906:	f64f 33e0 	movw	r3, #64480	; 0xfbe0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	230c      	movs	r3, #12
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <displayTemparatureAndGlowColour+0x244>)
 8001910:	2102      	movs	r1, #2
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f000 f950 	bl	8001bb8 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, 100);
 8001918:	2164      	movs	r1, #100	; 0x64
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fe9c 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 50);
 8001920:	2132      	movs	r1, #50	; 0x32
 8001922:	2004      	movs	r0, #4
 8001924:	f7ff fe98 	bl	8001658 <setPwmDutyCycle>
//		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
//		setPwmDutyCycle (TIM_CHANNEL_2, 15);
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	2008      	movs	r0, #8
 800192c:	f7ff fe94 	bl	8001658 <setPwmDutyCycle>
 8001930:	e02a      	b.n	8001988 <displayTemparatureAndGlowColour+0x1f8>
		#ifdef DEBUG_ON
		printf ("Orange\r\n");
		#endif
	}
	else if (temperatureValue >= 25.1)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe fe08 	bl	8000548 <__aeabi_f2d>
 8001938:	a323      	add	r3, pc, #140	; (adr r3, 80019c8 <displayTemparatureAndGlowColour+0x238>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7ff f8e1 	bl	8000b04 <__aeabi_dcmpge>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01f      	beq.n	8001988 <displayTemparatureAndGlowColour+0x1f8>
	{
		ssd1331_display_string (2, 0, "Temp.:", FONT_1206, PURPLE);
 8001948:	f24a 131e 	movw	r3, #41246	; 0xa11e
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	230c      	movs	r3, #12
 8001950:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <displayTemparatureAndGlowColour+0x240>)
 8001952:	2100      	movs	r1, #0
 8001954:	2002      	movs	r0, #2
 8001956:	f000 f92f 	bl	8001bb8 <ssd1331_display_string>
		ssd1331_display_string (54, 2, tempSign, FONT_1206, RED);
 800195a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	230c      	movs	r3, #12
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <displayTemparatureAndGlowColour+0x244>)
 8001964:	2102      	movs	r1, #2
 8001966:	2036      	movs	r0, #54	; 0x36
 8001968:	f000 f926 	bl	8001bb8 <ssd1331_display_string>
		setPwmDutyCycle (TIM_CHANNEL_1, dutyCycle);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4619      	mov	r1, r3
 8001972:	2000      	movs	r0, #0
 8001974:	f7ff fe70 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_2, 0);
 8001978:	2100      	movs	r1, #0
 800197a:	2004      	movs	r0, #4
 800197c:	f7ff fe6c 	bl	8001658 <setPwmDutyCycle>
		setPwmDutyCycle (TIM_CHANNEL_3, 0);
 8001980:	2100      	movs	r1, #0
 8001982:	2008      	movs	r0, #8
 8001984:	f7ff fe68 	bl	8001658 <setPwmDutyCycle>
		#ifdef DEBUG_ON
		printf ("Red\r\n");
		#endif
	}
	ssd1331_display_string (2, 20, "Press button to", FONT_1206, GOLDEN);
 8001988:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	230c      	movs	r3, #12
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <displayTemparatureAndGlowColour+0x248>)
 8001992:	2114      	movs	r1, #20
 8001994:	2002      	movs	r0, #2
 8001996:	f000 f90f 	bl	8001bb8 <ssd1331_display_string>
	ssd1331_display_string (2, 32, "change unit", FONT_1206, GOLDEN);
 800199a:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	230c      	movs	r3, #12
 80019a2:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <displayTemparatureAndGlowColour+0x24c>)
 80019a4:	2120      	movs	r1, #32
 80019a6:	2002      	movs	r0, #2
 80019a8:	f000 f906 	bl	8001bb8 <ssd1331_display_string>

}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	f3af 8000 	nop.w
 80019b8:	66666666 	.word	0x66666666
 80019bc:	40146666 	.word	0x40146666
 80019c0:	33333333 	.word	0x33333333
 80019c4:	402e3333 	.word	0x402e3333
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	40391999 	.word	0x40391999
 80019d0:	0800be84 	.word	0x0800be84
 80019d4:	2000039c 	.word	0x2000039c
 80019d8:	0800be8c 	.word	0x0800be8c
 80019dc:	0800be9c 	.word	0x0800be9c

080019e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>
	...

080019ec <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001a02:	2201      	movs	r2, #1
 8001a04:	2120      	movs	r1, #32
 8001a06:	4811      	ldr	r0, [pc, #68]	; (8001a4c <ssd1331_write_byte+0x60>)
 8001a08:	f002 fa4a 	bl	8003ea0 <HAL_GPIO_WritePin>
 8001a0c:	e004      	b.n	8001a18 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2120      	movs	r1, #32
 8001a12:	480e      	ldr	r0, [pc, #56]	; (8001a4c <ssd1331_write_byte+0x60>)
 8001a14:	f002 fa44 	bl	8003ea0 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2110      	movs	r1, #16
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <ssd1331_write_byte+0x60>)
 8001a1e:	f002 fa3f 	bl	8003ea0 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001a22:	1df9      	adds	r1, r7, #7
 8001a24:	2364      	movs	r3, #100	; 0x64
 8001a26:	2201      	movs	r2, #1
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <ssd1331_write_byte+0x64>)
 8001a2a:	f003 fc98 	bl	800535e <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2110      	movs	r1, #16
 8001a32:	4806      	ldr	r0, [pc, #24]	; (8001a4c <ssd1331_write_byte+0x60>)
 8001a34:	f002 fa34 	bl	8003ea0 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2120      	movs	r1, #32
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <ssd1331_write_byte+0x60>)
 8001a3e:	f002 fa2f 	bl	8003ea0 <HAL_GPIO_WritePin>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	20000254 	.word	0x20000254

08001a54 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	71bb      	strb	r3, [r7, #6]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b5f      	cmp	r3, #95	; 0x5f
 8001a6a:	d82b      	bhi.n	8001ac4 <ssd1331_draw_point+0x70>
 8001a6c:	79bb      	ldrb	r3, [r7, #6]
 8001a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a70:	d828      	bhi.n	8001ac4 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 8001a72:	2100      	movs	r1, #0
 8001a74:	2015      	movs	r0, #21
 8001a76:	f7ff ffb9 	bl	80019ec <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ffb4 	bl	80019ec <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 8001a84:	2100      	movs	r1, #0
 8001a86:	205f      	movs	r0, #95	; 0x5f
 8001a88:	f7ff ffb0 	bl	80019ec <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2075      	movs	r0, #117	; 0x75
 8001a90:	f7ff ffac 	bl	80019ec <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8001a94:	79bb      	ldrb	r3, [r7, #6]
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ffa7 	bl	80019ec <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	203f      	movs	r0, #63	; 0x3f
 8001aa2:	f7ff ffa3 	bl	80019ec <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff9b 	bl	80019ec <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2101      	movs	r1, #1
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff95 	bl	80019ec <ssd1331_write_byte>
 8001ac2:	e000      	b.n	8001ac6 <ssd1331_draw_point+0x72>
		return;
 8001ac4:	bf00      	nop
}
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <ssd1331_display_char>:
  * @param  chSize:
  * @param  chMode
  * @retval
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4623      	mov	r3, r4
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	717b      	strb	r3, [r7, #5]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b5f      	cmp	r3, #95	; 0x5f
 8001af6:	d857      	bhi.n	8001ba8 <ssd1331_display_char+0xdc>
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	2b3f      	cmp	r3, #63	; 0x3f
 8001afc:	d854      	bhi.n	8001ba8 <ssd1331_display_char+0xdc>
		return;
	}

    for (i = 0; i < chSize; i ++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e04c      	b.n	8001b9e <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001b04:	793b      	ldrb	r3, [r7, #4]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d10d      	bne.n	8001b26 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];
 8001b0a:	797b      	ldrb	r3, [r7, #5]
 8001b0c:	f1a3 0220 	sub.w	r2, r3, #32
 8001b10:	7bf9      	ldrb	r1, [r7, #15]
 8001b12:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <ssd1331_display_char+0xe4>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4403      	add	r3, r0
 8001b1e:	440b      	add	r3, r1
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	737b      	strb	r3, [r7, #13]
 8001b24:	e00c      	b.n	8001b40 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) {
 8001b26:	793b      	ldrb	r3, [r7, #4]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d109      	bne.n	8001b40 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8001b2c:	797b      	ldrb	r3, [r7, #5]
 8001b2e:	f1a3 0220 	sub.w	r2, r3, #32
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	491f      	ldr	r1, [pc, #124]	; (8001bb4 <ssd1331_display_char+0xe8>)
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	440a      	add	r2, r1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	737b      	strb	r3, [r7, #13]
		}

        for (j = 0; j < 8; j ++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	73bb      	strb	r3, [r7, #14]
 8001b44:	e025      	b.n	8001b92 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001b46:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	da06      	bge.n	8001b5c <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 8001b4e:	8c3a      	ldrh	r2, [r7, #32]
 8001b50:	79b9      	ldrb	r1, [r7, #6]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff7d 	bl	8001a54 <ssd1331_draw_point>
 8001b5a:	e005      	b.n	8001b68 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 8001b5c:	79b9      	ldrb	r1, [r7, #6]
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2200      	movs	r2, #0
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff76 	bl	8001a54 <ssd1331_draw_point>
		}
			chTemp <<= 1;
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	3301      	adds	r3, #1
 8001b72:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 8001b74:	79ba      	ldrb	r2, [r7, #6]
 8001b76:	7b3b      	ldrb	r3, [r7, #12]
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	793b      	ldrb	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d105      	bne.n	8001b8c <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
				break;
 8001b8a:	e005      	b.n	8001b98 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	73bb      	strb	r3, [r7, #14]
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	2b07      	cmp	r3, #7
 8001b96:	d9d6      	bls.n	8001b46 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	73fb      	strb	r3, [r7, #15]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	793b      	ldrb	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3ae      	bcc.n	8001b04 <ssd1331_display_char+0x38>
 8001ba6:	e000      	b.n	8001baa <ssd1331_display_char+0xde>
		return;
 8001ba8:	bf00      	nop
			}
		}
    }
}
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	0800bea8 	.word	0x0800bea8
 8001bb4:	0800c31c 	.word	0x0800c31c

08001bb8 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen
  *
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	603a      	str	r2, [r7, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	71bb      	strb	r3, [r7, #6]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b5f      	cmp	r3, #95	; 0x5f
 8001bd2:	d836      	bhi.n	8001c42 <ssd1331_display_string+0x8a>
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd8:	d833      	bhi.n	8001c42 <ssd1331_display_string+0x8a>
		return;
	}

    while (*pchString != '\0') {
 8001bda:	e02d      	b.n	8001c38 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8001bdc:	79fa      	ldrb	r2, [r7, #7]
 8001bde:	797b      	ldrb	r3, [r7, #5]
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dd12      	ble.n	8001c12 <ssd1331_display_string+0x5a>
			chXpos = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001bf0:	79ba      	ldrb	r2, [r7, #6]
 8001bf2:	797b      	ldrb	r3, [r7, #5]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001bf8:	79ba      	ldrb	r2, [r7, #6]
 8001bfa:	797b      	ldrb	r3, [r7, #5]
 8001bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd06      	ble.n	8001c12 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	71fb      	strb	r3, [r7, #7]
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 f81c 	bl	8001c4a <ssd1331_clear_screen>
			}
		}

        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	781a      	ldrb	r2, [r3, #0]
 8001c16:	797c      	ldrb	r4, [r7, #5]
 8001c18:	79b9      	ldrb	r1, [r7, #6]
 8001c1a:	79f8      	ldrb	r0, [r7, #7]
 8001c1c:	8b3b      	ldrh	r3, [r7, #24]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4623      	mov	r3, r4
 8001c22:	f7ff ff53 	bl	8001acc <ssd1331_display_char>
        chXpos += chSize / 2;
 8001c26:	797b      	ldrb	r3, [r7, #5]
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4413      	add	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1cd      	bne.n	8001bdc <ssd1331_display_string+0x24>
 8001c40:	e000      	b.n	8001c44 <ssd1331_display_string+0x8c>
		return;
 8001c42:	bf00      	nop
    }
}
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8001c54:	2300      	movs	r3, #0
 8001c56:	81fb      	strh	r3, [r7, #14]
 8001c58:	e013      	b.n	8001c82 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	81bb      	strh	r3, [r7, #12]
 8001c5e:	e00a      	b.n	8001c76 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8001c60:	89bb      	ldrh	r3, [r7, #12]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	89fa      	ldrh	r2, [r7, #14]
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fef2 	bl	8001a54 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8001c70:	89bb      	ldrh	r3, [r7, #12]
 8001c72:	3301      	adds	r3, #1
 8001c74:	81bb      	strh	r3, [r7, #12]
 8001c76:	89bb      	ldrh	r3, [r7, #12]
 8001c78:	2b5f      	cmp	r3, #95	; 0x5f
 8001c7a:	d9f1      	bls.n	8001c60 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	81fb      	strh	r3, [r7, #14]
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	2b3f      	cmp	r3, #63	; 0x3f
 8001c86:	d9e8      	bls.n	8001c5a <ssd1331_clear_screen+0x10>
		}
	}
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <ssd1331_init>:


void ssd1331_init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	4852      	ldr	r0, [pc, #328]	; (8001de8 <ssd1331_init+0x154>)
 8001c9e:	f002 f8ff 	bl	8003ea0 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	4850      	ldr	r0, [pc, #320]	; (8001de8 <ssd1331_init+0x154>)
 8001ca8:	f002 f8fa 	bl	8003ea0 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8001cac:	2100      	movs	r1, #0
 8001cae:	20ae      	movs	r0, #174	; 0xae
 8001cb0:	f7ff fe9c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2081      	movs	r0, #129	; 0x81
 8001cb8:	f7ff fe98 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	20ff      	movs	r0, #255	; 0xff
 8001cc0:	f7ff fe94 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2082      	movs	r0, #130	; 0x82
 8001cc8:	f7ff fe90 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8001ccc:	2100      	movs	r1, #0
 8001cce:	20ff      	movs	r0, #255	; 0xff
 8001cd0:	f7ff fe8c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2083      	movs	r0, #131	; 0x83
 8001cd8:	f7ff fe88 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8001cdc:	2100      	movs	r1, #0
 8001cde:	20ff      	movs	r0, #255	; 0xff
 8001ce0:	f7ff fe84 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2087      	movs	r0, #135	; 0x87
 8001ce8:	f7ff fe80 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8001cec:	2100      	movs	r1, #0
 8001cee:	2006      	movs	r0, #6
 8001cf0:	f7ff fe7c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	208a      	movs	r0, #138	; 0x8a
 8001cf8:	f7ff fe78 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2064      	movs	r0, #100	; 0x64
 8001d00:	f7ff fe74 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001d04:	2100      	movs	r1, #0
 8001d06:	208b      	movs	r0, #139	; 0x8b
 8001d08:	f7ff fe70 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2078      	movs	r0, #120	; 0x78
 8001d10:	f7ff fe6c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001d14:	2100      	movs	r1, #0
 8001d16:	208c      	movs	r0, #140	; 0x8c
 8001d18:	f7ff fe68 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f7ff fe64 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001d24:	2100      	movs	r1, #0
 8001d26:	20a0      	movs	r0, #160	; 0xa0
 8001d28:	f7ff fe60 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2072      	movs	r0, #114	; 0x72
 8001d30:	f7ff fe5c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001d34:	2100      	movs	r1, #0
 8001d36:	20a1      	movs	r0, #161	; 0xa1
 8001d38:	f7ff fe58 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fe54 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001d44:	2100      	movs	r1, #0
 8001d46:	20a2      	movs	r0, #162	; 0xa2
 8001d48:	f7ff fe50 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff fe4c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8001d54:	2100      	movs	r1, #0
 8001d56:	20a4      	movs	r0, #164	; 0xa4
 8001d58:	f7ff fe48 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	20a8      	movs	r0, #168	; 0xa8
 8001d60:	f7ff fe44 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8001d64:	2100      	movs	r1, #0
 8001d66:	203f      	movs	r0, #63	; 0x3f
 8001d68:	f7ff fe40 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	20ad      	movs	r0, #173	; 0xad
 8001d70:	f7ff fe3c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8001d74:	2100      	movs	r1, #0
 8001d76:	208e      	movs	r0, #142	; 0x8e
 8001d78:	f7ff fe38 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	20b0      	movs	r0, #176	; 0xb0
 8001d80:	f7ff fe34 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8001d84:	2100      	movs	r1, #0
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fe30 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	20b1      	movs	r0, #177	; 0xb1
 8001d90:	f7ff fe2c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8001d94:	2100      	movs	r1, #0
 8001d96:	2031      	movs	r0, #49	; 0x31
 8001d98:	f7ff fe28 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	20b3      	movs	r0, #179	; 0xb3
 8001da0:	f7ff fe24 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8001da4:	2100      	movs	r1, #0
 8001da6:	20f0      	movs	r0, #240	; 0xf0
 8001da8:	f7ff fe20 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8001dac:	2100      	movs	r1, #0
 8001dae:	20bb      	movs	r0, #187	; 0xbb
 8001db0:	f7ff fe1c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001db4:	2100      	movs	r1, #0
 8001db6:	203a      	movs	r0, #58	; 0x3a
 8001db8:	f7ff fe18 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	20be      	movs	r0, #190	; 0xbe
 8001dc0:	f7ff fe14 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	203e      	movs	r0, #62	; 0x3e
 8001dc8:	f7ff fe10 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8001dcc:	2100      	movs	r1, #0
 8001dce:	202e      	movs	r0, #46	; 0x2e
 8001dd0:	f7ff fe0c 	bl	80019ec <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	20af      	movs	r0, #175	; 0xaf
 8001dd8:	f7ff fe08 	bl	80019ec <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff ff34 	bl	8001c4a <ssd1331_clear_screen>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	48000400 	.word	0x48000400

08001dec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_MspInit+0x44>)
 8001df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df6:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_MspInit+0x44>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_MspInit+0x44>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_MspInit+0x44>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <HAL_MspInit+0x44>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_MspInit+0x44>)
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b09e      	sub	sp, #120	; 0x78
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	2254      	movs	r2, #84	; 0x54
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 fbc4 	bl	80085e2 <memset>
  if(hadc->Instance==ADC1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <HAL_ADC_MspInit+0xc0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d143      	bne.n	8001eec <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e68:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e6e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e70:	2301      	movs	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e84:	2302      	movs	r3, #2
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 fec8 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001e9e:	f7ff fd9f 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a14      	ldr	r2, [pc, #80]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_ADC_MspInit+0xc4>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ed6:	230b      	movs	r3, #11
 8001ed8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f001 fe58 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3778      	adds	r7, #120	; 0x78
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	50040000 	.word	0x50040000
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a18      	ldr	r2, [pc, #96]	; (8001f7c <HAL_SPI_MspInit+0x80>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d129      	bne.n	8001f72 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f28:	6613      	str	r3, [r2, #96]	; 0x60
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b12      	ldr	r3, [pc, #72]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_SPI_MspInit+0x84>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8001f4e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f60:	2305      	movs	r3, #5
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f001 fe15 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013000 	.word	0x40013000
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_TIM_Base_MspInit+0x38>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10b      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40021000 	.word	0x40021000

08001fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_TIM_MspPostInit+0x68>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d11d      	bne.n	8002022 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_TIM_MspPostInit+0x6c>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <HAL_TIM_MspPostInit+0x6c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_TIM_MspPostInit+0x6c>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 8001ffe:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8002002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002010:	2301      	movs	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	4619      	mov	r1, r3
 800201a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201e:	f001 fdbd 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002022:	bf00      	nop
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012c00 	.word	0x40012c00
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09e      	sub	sp, #120	; 0x78
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2254      	movs	r2, #84	; 0x54
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f006 fac4 	bl	80085e2 <memset>
  if(huart->Instance==USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_UART_MspInit+0xcc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d148      	bne.n	80020f6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002064:	2302      	movs	r3, #2
 8002066:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fdd9 	bl	8004c28 <HAL_RCCEx_PeriphCLKConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800207c:	f7ff fcb0 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002080:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_UART_MspInit+0xd0>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_UART_MspInit+0xd0>)
 8002086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208a:	6593      	str	r3, [r2, #88]	; 0x58
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_UART_MspInit+0xd0>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_UART_MspInit+0xd0>)
 800209a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209c:	4a19      	ldr	r2, [pc, #100]	; (8002104 <HAL_UART_MspInit+0xd0>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_UART_MspInit+0xd0>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80020b0:	2304      	movs	r3, #4
 80020b2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020c0:	2307      	movs	r3, #7
 80020c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80020c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020c8:	4619      	mov	r1, r3
 80020ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ce:	f001 fd65 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80020e4:	2303      	movs	r3, #3
 80020e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f001 fd53 	bl	8003b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3778      	adds	r7, #120	; 0x78
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40004400 	.word	0x40004400
 8002104:	40021000 	.word	0x40021000

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002154:	f000 f95e 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002176:	f006 fa87 	bl	8008688 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
	return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
	while (1) {}		/* Make sure we hang here */
 800219e:	e7fe      	b.n	800219e <_exit+0x12>

080021a0 <_read>:
return len;
}
*/

int _read (int file, char *ptr, int len)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
	extern UART_HandleTypeDef huart2;

		len = 1;						// over ride the read and only get 1 char
 80021ac:	2301      	movs	r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
		if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4807      	ldr	r0, [pc, #28]	; (80021d8 <_read+0x38>)
 80021bc:	f004 fd37 	bl	8006c2e <HAL_UART_Receive>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <_read+0x2c>
			len = EOF;					// signal an issue with stream
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	607b      	str	r3, [r7, #4]

		return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000304 	.word	0x20000304

080021dc <_write>:
	return len;
}
*/

int _write(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f04f 33ff 	mov.w	r3, #4294967295
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	4809      	ldr	r0, [pc, #36]	; (800221c <_write+0x40>)
 80021f8:	f004 fc8f 	bl	8006b1a <HAL_UART_Transmit>
 80021fc:	4603      	mov	r3, r0
 80021fe:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d002      	beq.n	800220c <_write+0x30>
 8002206:	7dfb      	ldrb	r3, [r7, #23]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d101      	bne.n	8002210 <_write+0x34>
	{
		Error_Handler();
 800220c:	f7ff fbe8 	bl	80019e0 <Error_Handler>
	}
	return len;
 8002210:	687b      	ldr	r3, [r7, #4]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000304 	.word	0x20000304

08002220 <_close>:

int _close(int file)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	return -1;
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002248:	605a      	str	r2, [r3, #4]
	return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_isatty>:

int _isatty(int file)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	return 1;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
	return 0;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <_sbrk+0x5c>)
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <_sbrk+0x60>)
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800229c:	4b13      	ldr	r3, [pc, #76]	; (80022ec <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <_sbrk+0x64>)
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <_sbrk+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <_sbrk+0x64>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d207      	bcs.n	80022c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022b8:	f006 f9e6 	bl	8008688 <__errno>
 80022bc:	4603      	mov	r3, r0
 80022be:	220c      	movs	r2, #12
 80022c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295
 80022c6:	e009      	b.n	80022dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <_sbrk+0x64>)
 80022d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20010000 	.word	0x20010000
 80022e8:	00000400 	.word	0x00000400
 80022ec:	200003ac 	.word	0x200003ac
 80022f0:	20000500 	.word	0x20000500

080022f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <SystemInit+0x20>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	4a05      	ldr	r2, [pc, #20]	; (8002314 <SystemInit+0x20>)
 8002300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800231c:	f7ff ffea 	bl	80022f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002320:	480c      	ldr	r0, [pc, #48]	; (8002354 <LoopForever+0x6>)
  ldr r1, =_edata
 8002322:	490d      	ldr	r1, [pc, #52]	; (8002358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <LoopForever+0xe>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002328:	e002      	b.n	8002330 <LoopCopyDataInit>

0800232a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800232c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232e:	3304      	adds	r3, #4

08002330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002334:	d3f9      	bcc.n	800232a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002338:	4c0a      	ldr	r4, [pc, #40]	; (8002364 <LoopForever+0x16>)
  movs r3, #0
 800233a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800233c:	e001      	b.n	8002342 <LoopFillZerobss>

0800233e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002340:	3204      	adds	r2, #4

08002342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002344:	d3fb      	bcc.n	800233e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002346:	f006 f9a5 	bl	8008694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800234a:	f7fe fe51 	bl	8000ff0 <main>

0800234e <LoopForever>:

LoopForever:
    b LoopForever
 800234e:	e7fe      	b.n	800234e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002350:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800235c:	0800cd90 	.word	0x0800cd90
  ldr r2, =_sbss
 8002360:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002364:	20000500 	.word	0x20000500

08002368 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC1_IRQHandler>

0800236a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f001 fbdd 	bl	8003b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f80e 	bl	800239c <HAL_InitTick>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	e001      	b.n	8002390 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800238c:	f7ff fd2e 	bl	8001dec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002390:	79fb      	ldrb	r3, [r7, #7]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_InitTick+0x6c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d023      	beq.n	80023f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <HAL_InitTick+0x70>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_InitTick+0x6c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fbdb 	bl	8003b82 <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10f      	bne.n	80023f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b0f      	cmp	r3, #15
 80023d6:	d809      	bhi.n	80023ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d8:	2200      	movs	r2, #0
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f001 fbb3 	bl	8003b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <HAL_InitTick+0x74>)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e007      	b.n	80023fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e004      	b.n	80023fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e001      	b.n	80023fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008
 8002438:	200003b0 	.word	0x200003b0

0800243c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200003b0 	.word	0x200003b0

08002454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008

0800249c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3360      	adds	r3, #96	; 0x60
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <LL_ADC_SetOffset+0x44>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	4313      	orrs	r3, r2
 8002534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	03fff000 	.word	0x03fff000

0800254c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3360      	adds	r3, #96	; 0x60
 800255a:	461a      	mov	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3360      	adds	r3, #96	; 0x60
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	431a      	orrs	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025a2:	bf00      	nop
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3330      	adds	r3, #48	; 0x30
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0a1b      	lsrs	r3, r3, #8
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f003 030c 	and.w	r3, r3, #12
 80025f0:	4413      	add	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	211f      	movs	r1, #31
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	f003 011f 	and.w	r1, r3, #31
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa01 f303 	lsl.w	r3, r1, r3
 800261a:	431a      	orrs	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3314      	adds	r3, #20
 800263c:	461a      	mov	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0e5b      	lsrs	r3, r3, #25
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	4413      	add	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	0d1b      	lsrs	r3, r3, #20
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2107      	movs	r1, #7
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	0d1b      	lsrs	r3, r3, #20
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	431a      	orrs	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0318 	and.w	r3, r3, #24
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a8:	40d9      	lsrs	r1, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	400b      	ands	r3, r1
 80026ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	0007ffff 	.word	0x0007ffff

080026cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6093      	str	r3, [r2, #8]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d101      	bne.n	800270a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800272c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002754:	d101      	bne.n	800275a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002778:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <LL_ADC_IsEnabled+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_ADC_IsEnabled+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d101      	bne.n	80027f6 <LL_ADC_IsDisableOngoing+0x18>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_ADC_IsDisableOngoing+0x1a>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002814:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d101      	bne.n	800286c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800288a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d101      	bne.n	80028ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e126      	b.n	8002b30 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d109      	bne.n	8002904 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa9f 	bl	8001e34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fef1 	bl	80026f0 <LL_ADC_IsDeepPowerDownEnabled>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d004      	beq.n	800291e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fed7 	bl	80026cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff0c 	bl	8002740 <LL_ADC_IsInternalRegulatorEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d115      	bne.n	800295a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fef0 	bl	8002718 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002938:	4b7f      	ldr	r3, [pc, #508]	; (8002b38 <HAL_ADC_Init+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	4a7f      	ldr	r2, [pc, #508]	; (8002b3c <HAL_ADC_Init+0x274>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800294c:	e002      	b.n	8002954 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3b01      	subs	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff feee 	bl	8002740 <LL_ADC_IsInternalRegulatorEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff62 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002990:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	f040 80bf 	bne.w	8002b1e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80bb 	bne.w	8002b1e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029b0:	f043 0202 	orr.w	r2, r3, #2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fefb 	bl	80027b8 <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10b      	bne.n	80029e0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029c8:	485d      	ldr	r0, [pc, #372]	; (8002b40 <HAL_ADC_Init+0x278>)
 80029ca:	f7ff fef5 	bl	80027b8 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	485a      	ldr	r0, [pc, #360]	; (8002b44 <HAL_ADC_Init+0x27c>)
 80029dc:	f7ff fd5e 	bl	800249c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7e5b      	ldrb	r3, [r3, #25]
 80029e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d106      	bne.n	8002a1c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	3b01      	subs	r3, #1
 8002a14:	045b      	lsls	r3, r3, #17
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b42      	ldr	r3, [pc, #264]	; (8002b48 <HAL_ADC_Init+0x280>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff26 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 8002a56:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d13d      	bne.n	8002ada <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13a      	bne.n	8002ada <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a68:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a70:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d118      	bne.n	8002aca <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa2:	f023 0304 	bic.w	r3, r3, #4
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ab4:	4311      	orrs	r1, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aba:	430a      	orrs	r2, r1
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	611a      	str	r2, [r3, #16]
 8002ac8:	e007      	b.n	8002ada <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10c      	bne.n	8002afc <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	f023 010f 	bic.w	r1, r3, #15
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	1e5a      	subs	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
 8002afa:	e007      	b.n	8002b0c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 020f 	bic.w	r2, r2, #15
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f023 0303 	bic.w	r3, r3, #3
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b1c:	e007      	b.n	8002b2e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	053e2d63 	.word	0x053e2d63
 8002b40:	50040000 	.word	0x50040000
 8002b44:	50040300 	.word	0x50040300
 8002b48:	fff0c007 	.word	0xfff0c007

08002b4c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fe7b 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d14f      	bne.n	8002c04 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADC_Start+0x26>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e04b      	b.n	8002c0a <HAL_ADC_Start+0xbe>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fdb6 	bl	80036ec <ADC_Enable>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d137      	bne.n	8002bfa <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	f023 0206 	bic.w	r2, r3, #6
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	221c      	movs	r2, #28
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002be6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fe06 	bl	8002804 <LL_ADC_REG_StartConversion>
 8002bf8:	e006      	b.n	8002c08 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c02:	e001      	b.n	8002c08 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_Stop+0x16>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e023      	b.n	8002c70 <HAL_ADC_Stop+0x5e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c30:	2103      	movs	r1, #3
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fc9e 	bl	8003574 <ADC_ConversionStop>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d111      	bne.n	8002c66 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fdd8 	bl	80037f8 <ADC_Disable>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d109      	bne.n	8002c66 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f043 0201 	orr.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d102      	bne.n	8002c90 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e010      	b.n	8002cb2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06f      	b.n	8002d8e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002cae:	2304      	movs	r3, #4
 8002cb0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002cb2:	f7ff fbc3 	bl	800243c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cb8:	e021      	b.n	8002cfe <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d01d      	beq.n	8002cfe <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002cc2:	f7ff fbbb 	bl	800243c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <HAL_ADC_PollForConversion+0x60>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d112      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e047      	b.n	8002d8e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0d6      	beq.n	8002cba <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fc46 	bl	80025ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7e5b      	ldrb	r3, [r3, #25]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d118      	bne.n	8002d62 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d111      	bne.n	8002d62 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d104      	bne.n	8002d7a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	e008      	b.n	8002d8c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d103      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	220c      	movs	r2, #12
 8002d8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0b6      	sub	sp, #216	; 0xd8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x22>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e3bb      	b.n	800354a <HAL_ADC_ConfigChannel+0x79a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fd38 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 83a0 	bne.w	800352c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d824      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	3b02      	subs	r3, #2
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d81b      	bhi.n	8002e3e <HAL_ADC_ConfigChannel+0x8e>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <HAL_ADC_ConfigChannel+0x5c>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e25 	.word	0x08002e25
 8002e14:	08002e2d 	.word	0x08002e2d
 8002e18:	08002e35 	.word	0x08002e35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e22:	e010      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e24:	2312      	movs	r3, #18
 8002e26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e2a:	e00c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e2c:	2318      	movs	r3, #24
 8002e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e32:	e008      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e3c:	e003      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e3e:	2306      	movs	r3, #6
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002e54:	f7ff fbbe 	bl	80025d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fcf9 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8002e62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fd19 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 8002e70:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 81a4 	bne.w	80031c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 819f 	bne.w	80031c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f7ff fbc9 	bl	800262c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d00a      	beq.n	8002ed2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ecc:	f7ff fb1a 	bl	8002504 <LL_ADC_SetOffset>
 8002ed0:	e179      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fb37 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x14e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fb2c 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 021f 	and.w	r2, r3, #31
 8002efc:	e01e      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x18c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fb21 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e004      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x1a4>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	e018      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x1d6>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e004      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff faf0 	bl	8002578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fad4 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x214>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fac9 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	e01e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x252>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fabe 	bl	800254c <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	e004      	b.n	8003000 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300a:	2b00      	cmp	r3, #0
 800300c:	d105      	bne.n	800301a <HAL_ADC_ConfigChannel+0x26a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0e9b      	lsrs	r3, r3, #26
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	e018      	b.n	800304c <HAL_ADC_ConfigChannel+0x29c>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800302e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003032:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800304c:	429a      	cmp	r2, r3
 800304e:	d106      	bne.n	800305e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	2101      	movs	r1, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fa8d 	bl	8002578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2102      	movs	r1, #2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fa71 	bl	800254c <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_ADC_ConfigChannel+0x2da>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2102      	movs	r1, #2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa66 	bl	800254c <LL_ADC_GetOffsetChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	e01e      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x318>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2102      	movs	r1, #2
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fa5b 	bl	800254c <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80030a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80030b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e004      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80030bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_ConfigChannel+0x330>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	e014      	b.n	800310a <HAL_ADC_ConfigChannel+0x35a>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80030ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80030f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e004      	b.n	800310a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800310a:	429a      	cmp	r2, r3
 800310c:	d106      	bne.n	800311c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fa2e 	bl	8002578 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2103      	movs	r1, #3
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fa12 	bl	800254c <LL_ADC_GetOffsetChannel>
 8003128:	4603      	mov	r3, r0
 800312a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x398>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2103      	movs	r1, #3
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fa07 	bl	800254c <LL_ADC_GetOffsetChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 021f 	and.w	r2, r3, #31
 8003146:	e017      	b.n	8003178 <HAL_ADC_ConfigChannel+0x3c8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2103      	movs	r1, #3
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f9fc 	bl	800254c <LL_ADC_GetOffsetChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003162:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e003      	b.n	8003176 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800316e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003170:	fab3 f383 	clz	r3, r3
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x3e0>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e9b      	lsrs	r3, r3, #26
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	e011      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x404>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800319e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031a0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80031a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	2103      	movs	r1, #3
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f9d9 	bl	8002578 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff faf4 	bl	80027b8 <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8140 	bne.w	8003458 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	461a      	mov	r2, r3
 80031e6:	f7ff fa4d 	bl	8002684 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a8f      	ldr	r2, [pc, #572]	; (800342c <HAL_ADC_ConfigChannel+0x67c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	f040 8131 	bne.w	8003458 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <HAL_ADC_ConfigChannel+0x46e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	3301      	adds	r3, #1
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2b09      	cmp	r3, #9
 8003214:	bf94      	ite	ls
 8003216:	2301      	movls	r3, #1
 8003218:	2300      	movhi	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	e019      	b.n	8003252 <HAL_ADC_ConfigChannel+0x4a2>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800322c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800322e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e003      	b.n	8003242 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800323a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323c:	fab3 f383 	clz	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f003 031f 	and.w	r3, r3, #31
 8003248:	2b09      	cmp	r3, #9
 800324a:	bf94      	ite	ls
 800324c:	2301      	movls	r3, #1
 800324e:	2300      	movhi	r3, #0
 8003250:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003252:	2b00      	cmp	r3, #0
 8003254:	d079      	beq.n	800334a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x4c2>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	0e9b      	lsrs	r3, r3, #26
 8003268:	3301      	adds	r3, #1
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003270:	e015      	b.n	800329e <HAL_ADC_ConfigChannel+0x4ee>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e003      	b.n	8003296 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800328e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003290:	fab3 f383 	clz	r3, r3
 8003294:	b2db      	uxtb	r3, r3
 8003296:	3301      	adds	r3, #1
 8003298:	069b      	lsls	r3, r3, #26
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_ADC_ConfigChannel+0x50e>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	e017      	b.n	80032ee <HAL_ADC_ConfigChannel+0x53e>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80032cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80032d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x564>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0e9b      	lsrs	r3, r3, #26
 8003304:	3301      	adds	r3, #1
 8003306:	f003 021f 	and.w	r2, r3, #31
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	051b      	lsls	r3, r3, #20
 8003312:	e018      	b.n	8003346 <HAL_ADC_ConfigChannel+0x596>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003346:	430b      	orrs	r3, r1
 8003348:	e081      	b.n	800344e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x5b6>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	3301      	adds	r3, #1
 800335e:	069b      	lsls	r3, r3, #26
 8003360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003364:	e015      	b.n	8003392 <HAL_ADC_ConfigChannel+0x5e2>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800337e:	2320      	movs	r3, #32
 8003380:	e003      	b.n	800338a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	3301      	adds	r3, #1
 800338c:	069b      	lsls	r3, r3, #26
 800338e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d109      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x602>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	e017      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x632>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	61bb      	str	r3, [r7, #24]
  return result;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033ca:	2320      	movs	r3, #32
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	ea42 0103 	orr.w	r1, r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <HAL_ADC_ConfigChannel+0x65e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	0e9b      	lsrs	r3, r3, #26
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 021f 	and.w	r2, r3, #31
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	3b1e      	subs	r3, #30
 8003406:	051b      	lsls	r3, r3, #20
 8003408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800340c:	e01e      	b.n	800344c <HAL_ADC_ConfigChannel+0x69c>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]
  return result;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e006      	b.n	8003438 <HAL_ADC_ConfigChannel+0x688>
 800342a:	bf00      	nop
 800342c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fab3 f383 	clz	r3, r3
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 021f 	and.w	r2, r3, #31
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	3b1e      	subs	r3, #30
 8003446:	051b      	lsls	r3, r3, #20
 8003448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003452:	4619      	mov	r1, r3
 8003454:	f7ff f8ea 	bl	800262c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <HAL_ADC_ConfigChannel+0x7a4>)
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d06c      	beq.n	800353e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003464:	483c      	ldr	r0, [pc, #240]	; (8003558 <HAL_ADC_ConfigChannel+0x7a8>)
 8003466:	f7ff f83f 	bl	80024e8 <LL_ADC_GetCommonPathInternalCh>
 800346a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3a      	ldr	r2, [pc, #232]	; (800355c <HAL_ADC_ConfigChannel+0x7ac>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d127      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800347c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d121      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a35      	ldr	r2, [pc, #212]	; (8003560 <HAL_ADC_ConfigChannel+0x7b0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d157      	bne.n	800353e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800348e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003496:	4619      	mov	r1, r3
 8003498:	482f      	ldr	r0, [pc, #188]	; (8003558 <HAL_ADC_ConfigChannel+0x7a8>)
 800349a:	f7ff f812 	bl	80024c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <HAL_ADC_ConfigChannel+0x7b4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	099b      	lsrs	r3, r3, #6
 80034a4:	4a30      	ldr	r2, [pc, #192]	; (8003568 <HAL_ADC_ConfigChannel+0x7b8>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	4613      	mov	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034b8:	e002      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3b01      	subs	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f9      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034c6:	e03a      	b.n	800353e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <HAL_ADC_ConfigChannel+0x7bc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_ADC_ConfigChannel+0x7b0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d12a      	bne.n	800353e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f0:	4619      	mov	r1, r3
 80034f2:	4819      	ldr	r0, [pc, #100]	; (8003558 <HAL_ADC_ConfigChannel+0x7a8>)
 80034f4:	f7fe ffe5 	bl	80024c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f8:	e021      	b.n	800353e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <HAL_ADC_ConfigChannel+0x7c0>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d11c      	bne.n	800353e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d116      	bne.n	800353e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_ADC_ConfigChannel+0x7b0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d111      	bne.n	800353e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800351a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800351e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003522:	4619      	mov	r1, r3
 8003524:	480c      	ldr	r0, [pc, #48]	; (8003558 <HAL_ADC_ConfigChannel+0x7a8>)
 8003526:	f7fe ffcc 	bl	80024c2 <LL_ADC_SetCommonPathInternalCh>
 800352a:	e008      	b.n	800353e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003546:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800354a:	4618      	mov	r0, r3
 800354c:	37d8      	adds	r7, #216	; 0xd8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	80080000 	.word	0x80080000
 8003558:	50040300 	.word	0x50040300
 800355c:	c7520000 	.word	0xc7520000
 8003560:	50040000 	.word	0x50040000
 8003564:	20000000 	.word	0x20000000
 8003568:	053e2d63 	.word	0x053e2d63
 800356c:	cb840000 	.word	0xcb840000
 8003570:	80000001 	.word	0x80000001

08003574 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f962 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8003590:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff f983 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 800359c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8098 	beq.w	80036dc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d02a      	beq.n	8003610 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	7e5b      	ldrb	r3, [r3, #25]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d126      	bne.n	8003610 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	7e1b      	ldrb	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d122      	bne.n	8003610 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035ce:	e014      	b.n	80035fa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4a45      	ldr	r2, [pc, #276]	; (80036e8 <ADC_ConversionStop+0x174>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d90d      	bls.n	80035f4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0210 	orr.w	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e074      	b.n	80036de <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d1e3      	bne.n	80035d0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2240      	movs	r2, #64	; 0x40
 800360e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d014      	beq.n	8003640 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f91a 	bl	8002854 <LL_ADC_REG_IsConversionOngoing>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f8d7 	bl	80027de <LL_ADC_IsDisableOngoing>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f8f6 	bl	800282c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d014      	beq.n	8003670 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff f929 	bl	80028a2 <LL_ADC_INJ_IsConversionOngoing>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f8bf 	bl	80027de <LL_ADC_IsDisableOngoing>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f905 	bl	800287a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d005      	beq.n	8003682 <ADC_ConversionStop+0x10e>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d105      	bne.n	8003688 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800367c:	230c      	movs	r3, #12
 800367e:	617b      	str	r3, [r7, #20]
        break;
 8003680:	e005      	b.n	800368e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003682:	2308      	movs	r3, #8
 8003684:	617b      	str	r3, [r7, #20]
        break;
 8003686:	e002      	b.n	800368e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003688:	2304      	movs	r3, #4
 800368a:	617b      	str	r3, [r7, #20]
        break;
 800368c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800368e:	f7fe fed5 	bl	800243c <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003694:	e01b      	b.n	80036ce <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003696:	f7fe fed1 	bl	800243c <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b05      	cmp	r3, #5
 80036a2:	d914      	bls.n	80036ce <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00d      	beq.n	80036ce <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	f043 0210 	orr.w	r2, r3, #16
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f043 0201 	orr.w	r2, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e007      	b.n	80036de <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1dc      	bne.n	8003696 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3720      	adds	r7, #32
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	a33fffff 	.word	0xa33fffff

080036ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f85b 	bl	80027b8 <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d169      	bne.n	80037dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <ADC_Enable+0xfc>)
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	f043 0201 	orr.w	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e055      	b.n	80037de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff f816 	bl	8002768 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800373c:	482b      	ldr	r0, [pc, #172]	; (80037ec <ADC_Enable+0x100>)
 800373e:	f7fe fed3 	bl	80024e8 <LL_ADC_GetCommonPathInternalCh>
 8003742:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <ADC_Enable+0x104>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	099b      	lsrs	r3, r3, #6
 8003752:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <ADC_Enable+0x108>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003766:	e002      	b.n	800376e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	3b01      	subs	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f9      	bne.n	8003768 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003774:	f7fe fe62 	bl	800243c <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800377a:	e028      	b.n	80037ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f819 	bl	80027b8 <LL_ADC_IsEnabled>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d104      	bne.n	8003796 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ffe9 	bl	8002768 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003796:	f7fe fe51 	bl	800243c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d914      	bls.n	80037ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d00d      	beq.n	80037ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0210 	orr.w	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d1cf      	bne.n	800377c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	8000003f 	.word	0x8000003f
 80037ec:	50040300 	.word	0x50040300
 80037f0:	20000000 	.word	0x20000000
 80037f4:	053e2d63 	.word	0x053e2d63

080037f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe ffea 	bl	80027de <LL_ADC_IsDisableOngoing>
 800380a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe ffd1 	bl	80027b8 <LL_ADC_IsEnabled>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d047      	beq.n	80038ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d144      	bne.n	80038ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030d 	and.w	r3, r3, #13
 800382c:	2b01      	cmp	r3, #1
 800382e:	d10c      	bne.n	800384a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe ffab 	bl	8002790 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2203      	movs	r2, #3
 8003840:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003842:	f7fe fdfb 	bl	800243c <HAL_GetTick>
 8003846:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003848:	e029      	b.n	800389e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f043 0210 	orr.w	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e023      	b.n	80038ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003866:	f7fe fde9 	bl	800243c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d914      	bls.n	800389e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f043 0210 	orr.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1dc      	bne.n	8003866 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <LL_ADC_StartCalibration>:
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80038c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fc:	d101      	bne.n	8003902 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_ADCEx_Calibration_Start+0x1c>
 8003928:	2302      	movs	r3, #2
 800392a:	e04d      	b.n	80039c8 <HAL_ADCEx_Calibration_Start+0xb8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff5f 	bl	80037f8 <ADC_Disable>
 800393a:	4603      	mov	r3, r0
 800393c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d136      	bne.n	80039b2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800394c:	f023 0302 	bic.w	r3, r3, #2
 8003950:	f043 0202 	orr.w	r2, r3, #2
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6839      	ldr	r1, [r7, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ffa9 	bl	80038b6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003964:	e014      	b.n	8003990 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	3301      	adds	r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003972:	d30d      	bcc.n	8003990 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	f023 0312 	bic.w	r3, r3, #18
 800397c:	f043 0210 	orr.w	r2, r3, #16
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e01b      	b.n	80039c8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ffa7 	bl	80038e8 <LL_ADC_IsCalibrationOnGoing>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e2      	bne.n	8003966 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f023 0303 	bic.w	r3, r3, #3
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
 80039b0:	e005      	b.n	80039be <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f043 0210 	orr.w	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039ec:	4013      	ands	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <__NVIC_SetPriorityGrouping+0x44>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <__NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 0307 	and.w	r3, r3, #7
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	6039      	str	r1, [r7, #0]
 8003a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	db0a      	blt.n	8003a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	490c      	ldr	r1, [pc, #48]	; (8003a80 <__NVIC_SetPriority+0x4c>)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	0112      	lsls	r2, r2, #4
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	440b      	add	r3, r1
 8003a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a5c:	e00a      	b.n	8003a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4908      	ldr	r1, [pc, #32]	; (8003a84 <__NVIC_SetPriority+0x50>)
 8003a64:	79fb      	ldrb	r3, [r7, #7]
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	3b04      	subs	r3, #4
 8003a6c:	0112      	lsls	r2, r2, #4
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	440b      	add	r3, r1
 8003a72:	761a      	strb	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000e100 	.word	0xe000e100
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f1c3 0307 	rsb	r3, r3, #7
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	bf28      	it	cs
 8003aa6:	2304      	movcs	r3, #4
 8003aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d902      	bls.n	8003ab8 <NVIC_EncodePriority+0x30>
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3b03      	subs	r3, #3
 8003ab6:	e000      	b.n	8003aba <NVIC_EncodePriority+0x32>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	401a      	ands	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae0:	4313      	orrs	r3, r2
         );
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3724      	adds	r7, #36	; 0x24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
	...

08003af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b00:	d301      	bcc.n	8003b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b02:	2301      	movs	r3, #1
 8003b04:	e00f      	b.n	8003b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <SysTick_Config+0x40>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b0e:	210f      	movs	r1, #15
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	f7ff ff8e 	bl	8003a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <SysTick_Config+0x40>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b1e:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <SysTick_Config+0x40>)
 8003b20:	2207      	movs	r2, #7
 8003b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	e000e010 	.word	0xe000e010

08003b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff47 	bl	80039d0 <__NVIC_SetPriorityGrouping>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b5c:	f7ff ff5c 	bl	8003a18 <__NVIC_GetPriorityGrouping>
 8003b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	6978      	ldr	r0, [r7, #20]
 8003b68:	f7ff ff8e 	bl	8003a88 <NVIC_EncodePriority>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff5d 	bl	8003a34 <__NVIC_SetPriority>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffb0 	bl	8003af0 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003baa:	e148      	b.n	8003e3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 813a 	beq.w	8003e38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x40>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8094 	beq.w	8003e38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d10:	4b52      	ldr	r3, [pc, #328]	; (8003e5c <HAL_GPIO_Init+0x2c0>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d14:	4a51      	ldr	r2, [pc, #324]	; (8003e5c <HAL_GPIO_Init+0x2c0>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	; (8003e5c <HAL_GPIO_Init+0x2c0>)
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	60bb      	str	r3, [r7, #8]
 8003d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d28:	4a4d      	ldr	r2, [pc, #308]	; (8003e60 <HAL_GPIO_Init+0x2c4>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	089b      	lsrs	r3, r3, #2
 8003d2e:	3302      	adds	r3, #2
 8003d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	220f      	movs	r2, #15
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d52:	d00d      	beq.n	8003d70 <HAL_GPIO_Init+0x1d4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <HAL_GPIO_Init+0x2c8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <HAL_GPIO_Init+0x1d0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_GPIO_Init+0x1cc>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e004      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d68:	2307      	movs	r3, #7
 8003d6a:	e002      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d70:	2300      	movs	r3, #0
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	f002 0203 	and.w	r2, r2, #3
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	4093      	lsls	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d82:	4937      	ldr	r1, [pc, #220]	; (8003e60 <HAL_GPIO_Init+0x2c4>)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dba:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dde:	4a23      	ldr	r2, [pc, #140]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003de4:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e0e:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e32:	4a0e      	ldr	r2, [pc, #56]	; (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f47f aeaf 	bne.w	8003bac <HAL_GPIO_Init+0x10>
  }
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40010000 	.word	0x40010000
 8003e64:	48000400 	.word	0x48000400
 8003e68:	48000800 	.word	0x48000800
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	887b      	ldrh	r3, [r7, #2]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e001      	b.n	8003e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40007000 	.word	0x40007000

08003ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40007000 	.word	0x40007000

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d130      	bne.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d038      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2232      	movs	r2, #50	; 0x32
 8003f40:	fb02 f303 	mul.w	r3, r2, r3
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	0c9b      	lsrs	r3, r3, #18
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f50:	e002      	b.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f64:	d102      	bne.n	8003f6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f2      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d110      	bne.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e00f      	b.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d007      	beq.n	8003f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f94:	4a05      	ldr	r2, [pc, #20]	; (8003fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	431bde83 	.word	0x431bde83

08003fb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f000 bc02 	b.w	80047d0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fcc:	4b96      	ldr	r3, [pc, #600]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd6:	4b94      	ldr	r3, [pc, #592]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80e4 	beq.w	80041b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_RCC_OscConfig+0x4c>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	f040 808b 	bne.w	8004112 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 8087 	bne.w	8004112 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004004:	4b88      	ldr	r3, [pc, #544]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x64>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e3d9      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_RCC_OscConfig+0x7e>
 800402c:	4b7e      	ldr	r3, [pc, #504]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004034:	e005      	b.n	8004042 <HAL_RCC_OscConfig+0x8a>
 8004036:	4b7c      	ldr	r3, [pc, #496]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004042:	4293      	cmp	r3, r2
 8004044:	d223      	bcs.n	800408e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fd8c 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e3ba      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800405a:	4b73      	ldr	r3, [pc, #460]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a72      	ldr	r2, [pc, #456]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b70      	ldr	r3, [pc, #448]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	496d      	ldr	r1, [pc, #436]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004078:	4b6b      	ldr	r3, [pc, #428]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	4968      	ldr	r1, [pc, #416]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
 800408c:	e025      	b.n	80040da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408e:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a65      	ldr	r2, [pc, #404]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	4960      	ldr	r1, [pc, #384]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ac:	4b5e      	ldr	r3, [pc, #376]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	495b      	ldr	r1, [pc, #364]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fd4c 	bl	8004b68 <RCC_SetFlashLatencyFromMSIRange>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e37a      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040da:	f000 fc81 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	4950      	ldr	r1, [pc, #320]	; (800422c <HAL_RCC_OscConfig+0x274>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a4e      	ldr	r2, [pc, #312]	; (8004230 <HAL_RCC_OscConfig+0x278>)
 80040f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040fa:	4b4e      	ldr	r3, [pc, #312]	; (8004234 <HAL_RCC_OscConfig+0x27c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe f94c 	bl	800239c <HAL_InitTick>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d052      	beq.n	80041b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
 8004110:	e35e      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d032      	beq.n	8004180 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800411a:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a42      	ldr	r2, [pc, #264]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004120:	f043 0301 	orr.w	r3, r3, #1
 8004124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004126:	f7fe f989 	bl	800243c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412e:	f7fe f985 	bl	800243c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e347      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004140:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a35      	ldr	r2, [pc, #212]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004152:	f043 0308 	orr.w	r3, r3, #8
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b33      	ldr	r3, [pc, #204]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	4930      	ldr	r1, [pc, #192]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004166:	4313      	orrs	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416a:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	492b      	ldr	r1, [pc, #172]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	e01a      	b.n	80041b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a28      	ldr	r2, [pc, #160]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004186:	f023 0301 	bic.w	r3, r3, #1
 800418a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800418c:	f7fe f956 	bl	800243c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004194:	f7fe f952 	bl	800243c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e314      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1dc>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d073      	beq.n	80042aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_OscConfig+0x21c>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b0c      	cmp	r3, #12
 80041cc:	d10e      	bne.n	80041ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d10b      	bne.n	80041ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d063      	beq.n	80042a8 <HAL_RCC_OscConfig+0x2f0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d15f      	bne.n	80042a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e2f1      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x24c>
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e025      	b.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d114      	bne.n	8004238 <HAL_RCC_OscConfig+0x280>
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a05      	ldr	r2, [pc, #20]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a02      	ldr	r2, [pc, #8]	; (8004228 <HAL_RCC_OscConfig+0x270>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e013      	b.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004228:	40021000 	.word	0x40021000
 800422c:	0800c90c 	.word	0x0800c90c
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004
 8004238:	4ba0      	ldr	r3, [pc, #640]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a9f      	ldr	r2, [pc, #636]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b9d      	ldr	r3, [pc, #628]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a9c      	ldr	r2, [pc, #624]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe f8f0 	bl	800243c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe f8ec 	bl	800243c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e2ae      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004272:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x2a8>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004280:	f7fe f8dc 	bl	800243c <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe f8d8 	bl	800243c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e29a      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x2d0>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d060      	beq.n	8004378 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x310>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d116      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042c8:	4b7c      	ldr	r3, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_OscConfig+0x328>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e277      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e0:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	061b      	lsls	r3, r3, #24
 80042ee:	4973      	ldr	r1, [pc, #460]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f4:	e040      	b.n	8004378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d023      	beq.n	8004346 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fe:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe f897 	bl	800243c <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fe f893 	bl	800243c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e255      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004324:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	495f      	ldr	r1, [pc, #380]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	e018      	b.n	8004378 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004346:	4b5d      	ldr	r3, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a5c      	ldr	r2, [pc, #368]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800434c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fe f873 	bl	800243c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435a:	f7fe f86f 	bl	800243c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e231      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03c      	beq.n	80043fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	4a4a      	ldr	r2, [pc, #296]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004394:	f043 0301 	orr.w	r3, r3, #1
 8004398:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fe f84e 	bl	800243c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fe f84a 	bl	800243c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e20c      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0ef      	beq.n	80043a4 <HAL_RCC_OscConfig+0x3ec>
 80043c4:	e01b      	b.n	80043fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043cc:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d6:	f7fe f831 	bl	800243c <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043de:	f7fe f82d 	bl	800243c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e1ef      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f0:	4b32      	ldr	r3, [pc, #200]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80043f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1ef      	bne.n	80043de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80a6 	beq.w	8004558 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440c:	2300      	movs	r3, #0
 800440e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10d      	bne.n	8004438 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441c:	4b27      	ldr	r3, [pc, #156]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004426:	6593      	str	r3, [r2, #88]	; 0x58
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	60bb      	str	r3, [r7, #8]
 8004432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004434:	2301      	movs	r3, #1
 8004436:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004438:	4b21      	ldr	r3, [pc, #132]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d118      	bne.n	8004476 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004444:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004450:	f7fd fff4 	bl	800243c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004458:	f7fd fff0 	bl	800243c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1b2      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_RCC_OscConfig+0x508>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_RCC_OscConfig+0x4d8>
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448e:	e029      	b.n	80044e4 <HAL_RCC_OscConfig+0x52c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b05      	cmp	r3, #5
 8004496:	d115      	bne.n	80044c4 <HAL_RCC_OscConfig+0x50c>
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	4a03      	ldr	r2, [pc, #12]	; (80044bc <HAL_RCC_OscConfig+0x504>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b8:	e014      	b.n	80044e4 <HAL_RCC_OscConfig+0x52c>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
 80044c4:	4b9a      	ldr	r3, [pc, #616]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a99      	ldr	r2, [pc, #612]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d4:	4b96      	ldr	r3, [pc, #600]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a95      	ldr	r2, [pc, #596]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d016      	beq.n	800451a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd ffa6 	bl	800243c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fd ffa2 	bl	800243c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e162      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450a:	4b89      	ldr	r3, [pc, #548]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ed      	beq.n	80044f4 <HAL_RCC_OscConfig+0x53c>
 8004518:	e015      	b.n	8004546 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451a:	f7fd ff8f 	bl	800243c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fd ff8b 	bl	800243c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e14b      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004538:	4b7d      	ldr	r3, [pc, #500]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ed      	bne.n	8004522 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7ffb      	ldrb	r3, [r7, #31]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	4a77      	ldr	r2, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0320 	and.w	r3, r3, #32
 8004560:	2b00      	cmp	r3, #0
 8004562:	d03c      	beq.n	80045de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01c      	beq.n	80045a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800456c:	4b70      	ldr	r3, [pc, #448]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004572:	4a6f      	ldr	r2, [pc, #444]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457c:	f7fd ff5e 	bl	800243c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004584:	f7fd ff5a 	bl	800243c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e11c      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004596:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <HAL_RCC_OscConfig+0x5cc>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045a6:	4b62      	ldr	r3, [pc, #392]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ac:	4a60      	ldr	r2, [pc, #384]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fd ff41 	bl	800243c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045be:	f7fd ff3d 	bl	800243c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e0ff      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045d0:	4b57      	ldr	r3, [pc, #348]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ef      	bne.n	80045be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 80f3 	beq.w	80047ce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f040 80c9 	bne.w	8004784 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045f2:	4b4f      	ldr	r3, [pc, #316]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f003 0203 	and.w	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	429a      	cmp	r2, r3
 8004604:	d12c      	bne.n	8004660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	3b01      	subs	r3, #1
 8004612:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d123      	bne.n	8004660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004624:	429a      	cmp	r2, r3
 8004626:	d11b      	bne.n	8004660 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004634:	429a      	cmp	r2, r3
 8004636:	d113      	bne.n	8004660 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	085b      	lsrs	r3, r3, #1
 8004644:	3b01      	subs	r3, #1
 8004646:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d109      	bne.n	8004660 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d06b      	beq.n	8004738 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d062      	beq.n	800472c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0ac      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004676:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2d      	ldr	r2, [pc, #180]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800467c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004680:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004682:	f7fd fedb 	bl	800243c <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fd fed7 	bl	800243c <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e099      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x77c>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0112      	lsls	r2, r2, #4
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046c2:	0212      	lsls	r2, r2, #8
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046ca:	0852      	lsrs	r2, r2, #1
 80046cc:	3a01      	subs	r2, #1
 80046ce:	0552      	lsls	r2, r2, #21
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046d6:	0852      	lsrs	r2, r2, #1
 80046d8:	3a01      	subs	r2, #1
 80046da:	0652      	lsls	r2, r2, #25
 80046dc:	4311      	orrs	r1, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e2:	06d2      	lsls	r2, r2, #27
 80046e4:	430a      	orrs	r2, r1
 80046e6:	4912      	ldr	r1, [pc, #72]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 80046fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004702:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004704:	f7fd fe9a 	bl	800243c <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470c:	f7fd fe96 	bl	800243c <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e058      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_RCC_OscConfig+0x778>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800472a:	e050      	b.n	80047ce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e04f      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
 8004730:	40021000 	.word	0x40021000
 8004734:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004738:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d144      	bne.n	80047ce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 800474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800474e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 8004756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800475a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800475c:	f7fd fe6e 	bl	800243c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fd fe6a 	bl	800243c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e02c      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x7ac>
 8004782:	e024      	b.n	80047ce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d01f      	beq.n	80047ca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 8004790:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fd fe51 	bl	800243c <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479e:	f7fd fe4d 	bl	800243c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e00f      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b0:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	4905      	ldr	r1, [pc, #20]	; (80047d8 <HAL_RCC_OscConfig+0x820>)
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_RCC_OscConfig+0x824>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
 80047c8:	e001      	b.n	80047ce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3720      	adds	r7, #32
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000
 80047dc:	feeefffc 	.word	0xfeeefffc

080047e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0e7      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047f4:	4b75      	ldr	r3, [pc, #468]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d910      	bls.n	8004824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b72      	ldr	r3, [pc, #456]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 0207 	bic.w	r2, r3, #7
 800480a:	4970      	ldr	r1, [pc, #448]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b6e      	ldr	r3, [pc, #440]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0cf      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d010      	beq.n	8004852 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800483c:	429a      	cmp	r2, r3
 800483e:	d908      	bls.n	8004852 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4960      	ldr	r1, [pc, #384]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d04c      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b5a      	ldr	r3, [pc, #360]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d121      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0a6      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487e:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d115      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e09a      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e08e      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e086      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4943      	ldr	r1, [pc, #268]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c8:	f7fd fdb8 	bl	800243c <HAL_GetTick>
 80048cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d0:	f7fd fdb4 	bl	800243c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e06e      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e6:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 020c 	and.w	r2, r3, #12
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d1eb      	bne.n	80048d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004910:	429a      	cmp	r2, r3
 8004912:	d208      	bcs.n	8004926 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004914:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	492b      	ldr	r1, [pc, #172]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004926:	4b29      	ldr	r3, [pc, #164]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d210      	bcs.n	8004956 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f023 0207 	bic.w	r2, r3, #7
 800493c:	4923      	ldr	r1, [pc, #140]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <HAL_RCC_ClockConfig+0x1ec>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d001      	beq.n	8004956 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e036      	b.n	80049c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4918      	ldr	r1, [pc, #96]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d009      	beq.n	8004994 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004980:	4b13      	ldr	r3, [pc, #76]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4910      	ldr	r1, [pc, #64]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004994:	f000 f824 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	490b      	ldr	r1, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x1f4>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1f8>)
 80049b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1fc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fd fcef 	bl	800239c <HAL_InitTick>
 80049be:	4603      	mov	r3, r0
 80049c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80049c2:	7afb      	ldrb	r3, [r7, #11]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40021000 	.word	0x40021000
 80049d4:	0800c90c 	.word	0x0800c90c
 80049d8:	20000000 	.word	0x20000000
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b089      	sub	sp, #36	; 0x24
 80049e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	2300      	movs	r3, #0
 80049ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ee:	4b3e      	ldr	r3, [pc, #248]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049f8:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0303 	and.w	r3, r3, #3
 8004a00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x34>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d121      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d11e      	bne.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a14:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a20:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	f003 030f 	and.w	r3, r3, #15
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e005      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a3c:	4a2b      	ldr	r2, [pc, #172]	; (8004aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10d      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	e004      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a64:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d134      	bne.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d003      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0xac>
 8004a84:	e005      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a86:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a88:	617b      	str	r3, [r7, #20]
      break;
 8004a8a:	e005      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a8c:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a8e:	617b      	str	r3, [r7, #20]
      break;
 8004a90:	e002      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	617b      	str	r3, [r7, #20]
      break;
 8004a96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a98:	4b13      	ldr	r3, [pc, #76]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 0307 	and.w	r3, r3, #7
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	fb03 f202 	mul.w	r2, r3, r2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	0e5b      	lsrs	r3, r3, #25
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3724      	adds	r7, #36	; 0x24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800c924 	.word	0x0800c924
 8004af0:	00f42400 	.word	0x00f42400
 8004af4:	007a1200 	.word	0x007a1200

08004af8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000000 	.word	0x20000000

08004b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b14:	f7ff fff0 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b26:	5ccb      	ldrb	r3, [r1, r3]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40021000 	.word	0x40021000
 8004b38:	0800c91c 	.word	0x0800c91c

08004b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b40:	f7ff ffda 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	0adb      	lsrs	r3, r3, #11
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4904      	ldr	r1, [pc, #16]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	0800c91c 	.word	0x0800c91c

08004b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b80:	f7ff f9b6 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004b84:	6178      	str	r0, [r7, #20]
 8004b86:	e014      	b.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b88:	4b25      	ldr	r3, [pc, #148]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8c:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6593      	str	r3, [r2, #88]	; 0x58
 8004b94:	4b22      	ldr	r3, [pc, #136]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ba0:	f7ff f9a6 	bl	8003ef0 <HAL_PWREx_GetVoltageRange>
 8004ba4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	4a1d      	ldr	r2, [pc, #116]	; (8004c20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb8:	d10b      	bne.n	8004bd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b80      	cmp	r3, #128	; 0x80
 8004bbe:	d919      	bls.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004bc4:	d902      	bls.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	e013      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bcc:	2301      	movs	r3, #1
 8004bce:	613b      	str	r3, [r7, #16]
 8004bd0:	e010      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b80      	cmp	r3, #128	; 0x80
 8004bd6:	d902      	bls.n	8004bde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bd8:	2303      	movs	r3, #3
 8004bda:	613b      	str	r3, [r7, #16]
 8004bdc:	e00a      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d102      	bne.n	8004bea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004be4:	2302      	movs	r3, #2
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	e004      	b.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b70      	cmp	r3, #112	; 0x70
 8004bee:	d101      	bne.n	8004bf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 0207 	bic.w	r2, r3, #7
 8004bfc:	4909      	ldr	r1, [pc, #36]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40022000 	.word	0x40022000

08004c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c30:	2300      	movs	r3, #0
 8004c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c34:	2300      	movs	r3, #0
 8004c36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d031      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c4c:	d01a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c52:	d814      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a5c      	ldr	r2, [pc, #368]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c6a:	e00c      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f9de 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c7c:	e003      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	74fb      	strb	r3, [r7, #19]
      break;
 8004c82:	e000      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c8c:	4b51      	ldr	r3, [pc, #324]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	494e      	ldr	r1, [pc, #312]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ca2:	e001      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 809e 	beq.w	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cba:	4b46      	ldr	r3, [pc, #280]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd0:	4b40      	ldr	r3, [pc, #256]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	4a3f      	ldr	r2, [pc, #252]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cda:	6593      	str	r3, [r2, #88]	; 0x58
 8004cdc:	4b3d      	ldr	r3, [pc, #244]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cec:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a39      	ldr	r2, [pc, #228]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cf8:	f7fd fba0 	bl	800243c <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cfe:	e009      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d00:	f7fd fb9c 	bl	800243c <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d902      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	74fb      	strb	r3, [r7, #19]
        break;
 8004d12:	e005      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d14:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ef      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d15a      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d26:	4b2b      	ldr	r3, [pc, #172]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01e      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d019      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d4e:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5e:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	4a1b      	ldr	r2, [pc, #108]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d6e:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d016      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fd fb5c 	bl	800243c <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	e00b      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fd fb58 	bl	800243c <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d902      	bls.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	74fb      	strb	r3, [r7, #19]
            break;
 8004d9e:	e006      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da0:	4b0c      	ldr	r3, [pc, #48]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0ec      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004dae:	7cfb      	ldrb	r3, [r7, #19]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dca:	e009      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	74bb      	strb	r3, [r7, #18]
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de0:	7c7b      	ldrb	r3, [r7, #17]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b8a      	ldr	r3, [pc, #552]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a89      	ldr	r2, [pc, #548]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	f023 0203 	bic.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4980      	ldr	r1, [pc, #512]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e20:	4b7b      	ldr	r3, [pc, #492]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f023 020c 	bic.w	r2, r3, #12
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	4978      	ldr	r1, [pc, #480]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e42:	4b73      	ldr	r3, [pc, #460]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	496f      	ldr	r1, [pc, #444]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	4967      	ldr	r1, [pc, #412]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	495e      	ldr	r1, [pc, #376]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea8:	4b59      	ldr	r3, [pc, #356]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	4956      	ldr	r1, [pc, #344]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eca:	4b51      	ldr	r3, [pc, #324]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	494d      	ldr	r1, [pc, #308]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d028      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eec:	4b48      	ldr	r3, [pc, #288]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4945      	ldr	r1, [pc, #276]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f0c:	4b40      	ldr	r3, [pc, #256]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a3f      	ldr	r2, [pc, #252]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	60d3      	str	r3, [r2, #12]
 8004f18:	e011      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f22:	d10c      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f882 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d028      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	492d      	ldr	r1, [pc, #180]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f68:	d106      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	4a28      	ldr	r2, [pc, #160]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f74:	60d3      	str	r3, [r2, #12]
 8004f76:	e011      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3304      	adds	r3, #4
 8004f86:	2101      	movs	r1, #1
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f853 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01c      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fa8:	4b19      	ldr	r3, [pc, #100]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb6:	4916      	ldr	r1, [pc, #88]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fc6:	d10c      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	2102      	movs	r1, #2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f830 	bl	8005034 <RCCEx_PLLSAI1_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fd8:	7cfb      	ldrb	r3, [r7, #19]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	4904      	ldr	r1, [pc, #16]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005004:	7cbb      	ldrb	r3, [r7, #18]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a04      	ldr	r2, [pc, #16]	; (8005030 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800501e:	f043 0304 	orr.w	r3, r3, #4
 8005022:	6013      	str	r3, [r2, #0]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000

08005034 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005042:	4b74      	ldr	r3, [pc, #464]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d018      	beq.n	8005080 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800504e:	4b71      	ldr	r3, [pc, #452]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0203 	and.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d10d      	bne.n	800507a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
       ||
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005066:	4b6b      	ldr	r3, [pc, #428]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	091b      	lsrs	r3, r3, #4
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
       ||
 8005076:	429a      	cmp	r2, r3
 8005078:	d047      	beq.n	800510a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
 800507e:	e044      	b.n	800510a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d018      	beq.n	80050ba <RCCEx_PLLSAI1_Config+0x86>
 8005088:	2b03      	cmp	r3, #3
 800508a:	d825      	bhi.n	80050d8 <RCCEx_PLLSAI1_Config+0xa4>
 800508c:	2b01      	cmp	r3, #1
 800508e:	d002      	beq.n	8005096 <RCCEx_PLLSAI1_Config+0x62>
 8005090:	2b02      	cmp	r3, #2
 8005092:	d009      	beq.n	80050a8 <RCCEx_PLLSAI1_Config+0x74>
 8005094:	e020      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005096:	4b5f      	ldr	r3, [pc, #380]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11d      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a6:	e01a      	b.n	80050de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a8:	4b5a      	ldr	r3, [pc, #360]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b8:	e013      	b.n	80050e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050c6:	4b53      	ldr	r3, [pc, #332]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050d6:	e006      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e004      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
 80050e0:	e002      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10d      	bne.n	800510a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ee:	4b49      	ldr	r3, [pc, #292]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	430b      	orrs	r3, r1
 8005104:	4943      	ldr	r1, [pc, #268]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d17c      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005110:	4b40      	ldr	r3, [pc, #256]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a3f      	ldr	r2, [pc, #252]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005116:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800511a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511c:	f7fd f98e 	bl	800243c <HAL_GetTick>
 8005120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005122:	e009      	b.n	8005138 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005124:	f7fd f98a 	bl	800243c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d902      	bls.n	8005138 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	73fb      	strb	r3, [r7, #15]
        break;
 8005136:	e005      	b.n	8005144 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005138:	4b36      	ldr	r3, [pc, #216]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1ef      	bne.n	8005124 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d15f      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d110      	bne.n	8005172 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005150:	4b30      	ldr	r3, [pc, #192]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005158:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6892      	ldr	r2, [r2, #8]
 8005160:	0211      	lsls	r1, r2, #8
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68d2      	ldr	r2, [r2, #12]
 8005166:	06d2      	lsls	r2, r2, #27
 8005168:	430a      	orrs	r2, r1
 800516a:	492a      	ldr	r1, [pc, #168]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
 8005170:	e027      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d112      	bne.n	800519e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005178:	4b26      	ldr	r3, [pc, #152]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005180:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6912      	ldr	r2, [r2, #16]
 800518e:	0852      	lsrs	r2, r2, #1
 8005190:	3a01      	subs	r2, #1
 8005192:	0552      	lsls	r2, r2, #21
 8005194:	430a      	orrs	r2, r1
 8005196:	491f      	ldr	r1, [pc, #124]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]
 800519c:	e011      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6892      	ldr	r2, [r2, #8]
 80051ae:	0211      	lsls	r1, r2, #8
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6952      	ldr	r2, [r2, #20]
 80051b4:	0852      	lsrs	r2, r2, #1
 80051b6:	3a01      	subs	r2, #1
 80051b8:	0652      	lsls	r2, r2, #25
 80051ba:	430a      	orrs	r2, r1
 80051bc:	4915      	ldr	r1, [pc, #84]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ce:	f7fd f935 	bl	800243c <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051d4:	e009      	b.n	80051ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d6:	f7fd f931 	bl	800243c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d902      	bls.n	80051ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	73fb      	strb	r3, [r7, #15]
          break;
 80051e8:	e005      	b.n	80051f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ea:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ef      	beq.n	80051d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005206:	4313      	orrs	r3, r2
 8005208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000

08005218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e095      	b.n	8005356 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	2b00      	cmp	r3, #0
 8005230:	d108      	bne.n	8005244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d009      	beq.n	8005250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	61da      	str	r2, [r3, #28]
 8005242:	e005      	b.n	8005250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc fe46 	bl	8001efc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005290:	d902      	bls.n	8005298 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e002      	b.n	800529e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800529c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052a6:	d007      	beq.n	80052b8 <HAL_SPI_Init+0xa0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052b0:	d002      	beq.n	80052b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fa:	ea42 0103 	orr.w	r1, r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005302:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	f003 0204 	and.w	r2, r3, #4
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005334:	ea42 0103 	orr.w	r1, r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b088      	sub	sp, #32
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_SPI_Transmit+0x22>
 800537c:	2302      	movs	r3, #2
 800537e:	e15f      	b.n	8005640 <HAL_SPI_Transmit+0x2e2>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005388:	f7fd f858 	bl	800243c <HAL_GetTick>
 800538c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800539e:	2302      	movs	r3, #2
 80053a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053a2:	e148      	b.n	8005636 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Transmit+0x52>
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053b4:	e13f      	b.n	8005636 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2203      	movs	r2, #3
 80053ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	88fa      	ldrh	r2, [r7, #6]
 80053ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	88fa      	ldrh	r2, [r7, #6]
 80053d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	d10f      	bne.n	8005422 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d007      	beq.n	8005440 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005448:	d94f      	bls.n	80054ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit+0xfa>
 8005452:	8afb      	ldrh	r3, [r7, #22]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d142      	bne.n	80054de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	881a      	ldrh	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005468:	1c9a      	adds	r2, r3, #2
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800547c:	e02f      	b.n	80054de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b02      	cmp	r3, #2
 800548a:	d112      	bne.n	80054b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005490:	881a      	ldrh	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b0:	e015      	b.n	80054de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b2:	f7fc ffc3 	bl	800243c <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d803      	bhi.n	80054ca <HAL_SPI_Transmit+0x16c>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_Transmit+0x172>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d106      	bne.n	80054de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80054dc:	e0ab      	b.n	8005636 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ca      	bne.n	800547e <HAL_SPI_Transmit+0x120>
 80054e8:	e080      	b.n	80055ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0x19a>
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d174      	bne.n	80055e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d912      	bls.n	8005528 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	881a      	ldrh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b02      	subs	r3, #2
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005526:	e05c      	b.n	80055e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800554e:	e048      	b.n	80055e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d12b      	bne.n	80055b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	d912      	bls.n	800558e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	881a      	ldrh	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	1c9a      	adds	r2, r3, #2
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b02      	subs	r3, #2
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800558c:	e029      	b.n	80055e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	330c      	adds	r3, #12
 8005598:	7812      	ldrb	r2, [r2, #0]
 800559a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055b4:	e015      	b.n	80055e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055b6:	f7fc ff41 	bl	800243c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d803      	bhi.n	80055ce <HAL_SPI_Transmit+0x270>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d102      	bne.n	80055d4 <HAL_SPI_Transmit+0x276>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d106      	bne.n	80055e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80055e0:	e029      	b.n	8005636 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1b1      	bne.n	8005550 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f947 	bl	8005884 <SPI_EndRxTxTransaction>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10a      	bne.n	8005620 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e003      	b.n	8005636 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800563e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005658:	f7fc fef0 	bl	800243c <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	4413      	add	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005668:	f7fc fee8 	bl	800243c <HAL_GetTick>
 800566c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800566e:	4b39      	ldr	r3, [pc, #228]	; (8005754 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	015b      	lsls	r3, r3, #5
 8005674:	0d1b      	lsrs	r3, r3, #20
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	fb02 f303 	mul.w	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800567e:	e054      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d050      	beq.n	800572a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005688:	f7fc fed8 	bl	800243c <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	429a      	cmp	r2, r3
 8005696:	d902      	bls.n	800569e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d13d      	bne.n	800571a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056b6:	d111      	bne.n	80056dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	d004      	beq.n	80056cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ca:	d107      	bne.n	80056dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e4:	d10f      	bne.n	8005706 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005704:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e017      	b.n	800574a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	3b01      	subs	r3, #1
 8005728:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d19b      	bne.n	8005680 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000000 	.word	0x20000000

08005758 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800576a:	f7fc fe67 	bl	800243c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	4413      	add	r3, r2
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800577a:	f7fc fe5f 	bl	800243c <HAL_GetTick>
 800577e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005788:	4b3d      	ldr	r3, [pc, #244]	; (8005880 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00da      	lsls	r2, r3, #3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	0d1b      	lsrs	r3, r3, #20
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057a0:	e060      	b.n	8005864 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057a8:	d107      	bne.n	80057ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d050      	beq.n	8005864 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057c2:	f7fc fe3b 	bl	800243c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d902      	bls.n	80057d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d13d      	bne.n	8005854 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f0:	d111      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fa:	d004      	beq.n	8005806 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005804:	d107      	bne.n	8005816 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005814:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800581e:	d10f      	bne.n	8005840 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e010      	b.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	3b01      	subs	r3, #1
 8005862:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	429a      	cmp	r2, r3
 8005872:	d196      	bne.n	80057a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000000 	.word	0x20000000

08005884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff ff5b 	bl	8005758 <SPI_WaitFifoStateUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	f043 0220 	orr.w	r2, r3, #32
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e027      	b.n	8005908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fec0 	bl	8005648 <SPI_WaitFlagStateUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e014      	b.n	8005908 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff ff34 	bl	8005758 <SPI_WaitFifoStateUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e000      	b.n	8005908 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc fb24 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fb52 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e049      	b.n	8005a64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f841 	bl	8005a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f000 fafb 	bl	8005ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <HAL_TIM_PWM_Start+0x24>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e03c      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d109      	bne.n	8005abe <HAL_TIM_PWM_Start+0x3e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	e02f      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x58>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e022      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b0c      	cmp	r3, #12
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x72>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e015      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x8c>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e008      	b.n	8005b1e <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e07e      	b.n	8005c24 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <HAL_TIM_PWM_Start+0xb6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b34:	e023      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d104      	bne.n	8005b46 <HAL_TIM_PWM_Start+0xc6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b44:	e01b      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d104      	bne.n	8005b56 <HAL_TIM_PWM_Start+0xd6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b54:	e013      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	2b0c      	cmp	r3, #12
 8005b5a:	d104      	bne.n	8005b66 <HAL_TIM_PWM_Start+0xe6>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b64:	e00b      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b10      	cmp	r3, #16
 8005b6a:	d104      	bne.n	8005b76 <HAL_TIM_PWM_Start+0xf6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b74:	e003      	b.n	8005b7e <HAL_TIM_PWM_Start+0xfe>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fdb2 	bl	80066f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a26      	ldr	r2, [pc, #152]	; (8005c2c <HAL_TIM_PWM_Start+0x1ac>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_TIM_PWM_Start+0x12a>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a25      	ldr	r2, [pc, #148]	; (8005c30 <HAL_TIM_PWM_Start+0x1b0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIM_PWM_Start+0x12a>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a23      	ldr	r2, [pc, #140]	; (8005c34 <HAL_TIM_PWM_Start+0x1b4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_TIM_PWM_Start+0x12e>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_TIM_PWM_Start+0x130>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_TIM_PWM_Start+0x1ac>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_TIM_PWM_Start+0x162>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d004      	beq.n	8005be2 <HAL_TIM_PWM_Start+0x162>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <HAL_TIM_PWM_Start+0x1b0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d115      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <HAL_TIM_PWM_Start+0x1b8>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d015      	beq.n	8005c20 <HAL_TIM_PWM_Start+0x1a0>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfa:	d011      	beq.n	8005c20 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	e008      	b.n	8005c20 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0201 	orr.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	e000      	b.n	8005c22 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40012c00 	.word	0x40012c00
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	00010007 	.word	0x00010007

08005c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d101      	bne.n	8005c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e0ff      	b.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b14      	cmp	r3, #20
 8005c66:	f200 80f0 	bhi.w	8005e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005e4b 	.word	0x08005e4b
 8005c78:	08005e4b 	.word	0x08005e4b
 8005c7c:	08005e4b 	.word	0x08005e4b
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005e4b 	.word	0x08005e4b
 8005c88:	08005e4b 	.word	0x08005e4b
 8005c8c:	08005e4b 	.word	0x08005e4b
 8005c90:	08005d47 	.word	0x08005d47
 8005c94:	08005e4b 	.word	0x08005e4b
 8005c98:	08005e4b 	.word	0x08005e4b
 8005c9c:	08005e4b 	.word	0x08005e4b
 8005ca0:	08005d87 	.word	0x08005d87
 8005ca4:	08005e4b 	.word	0x08005e4b
 8005ca8:	08005e4b 	.word	0x08005e4b
 8005cac:	08005e4b 	.word	0x08005e4b
 8005cb0:	08005dc9 	.word	0x08005dc9
 8005cb4:	08005e4b 	.word	0x08005e4b
 8005cb8:	08005e4b 	.word	0x08005e4b
 8005cbc:	08005e4b 	.word	0x08005e4b
 8005cc0:	08005e09 	.word	0x08005e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 f9f8 	bl	80060c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0208 	orr.w	r2, r2, #8
 8005cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0204 	bic.w	r2, r2, #4
 8005cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6999      	ldr	r1, [r3, #24]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	619a      	str	r2, [r3, #24]
      break;
 8005d02:	e0a5      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fa54 	bl	80061b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6999      	ldr	r1, [r3, #24]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	021a      	lsls	r2, r3, #8
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	619a      	str	r2, [r3, #24]
      break;
 8005d44:	e084      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 faad 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0208 	orr.w	r2, r2, #8
 8005d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0204 	bic.w	r2, r2, #4
 8005d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69d9      	ldr	r1, [r3, #28]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	61da      	str	r2, [r3, #28]
      break;
 8005d84:	e064      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fb05 	bl	800639c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69d9      	ldr	r1, [r3, #28]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	021a      	lsls	r2, r3, #8
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	61da      	str	r2, [r3, #28]
      break;
 8005dc6:	e043      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fb42 	bl	8006458 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0208 	orr.w	r2, r2, #8
 8005de2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e06:	e023      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fb7a 	bl	8006508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e48:	e002      	b.n	8005e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop

08005e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIM_ConfigClockSource+0x1c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0b6      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x18a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd8>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x176>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ed4:	2b70      	cmp	r3, #112	; 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xaa>
 8005ed8:	2b70      	cmp	r3, #112	; 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11e>
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ee4:	2b50      	cmp	r3, #80	; 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfe>
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13e>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ef8:	2b30      	cmp	r3, #48	; 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f1e:	f000 fbc7 	bl	80066b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f4c:	f000 fbb0 	bl	80066b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 fb24 	bl	80065bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	; 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fb7d 	bl	800667a <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fb43 	bl	800661a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	; 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fb6d 	bl	800667a <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fb04 	bl	80065bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb5d 	bl	800667a <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 fb54 	bl	800667a <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <TIM_Base_SetConfig+0xbc>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d003      	beq.n	8006018 <TIM_Base_SetConfig+0x20>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d108      	bne.n	800602a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <TIM_Base_SetConfig+0xbc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d00b      	beq.n	800604a <TIM_Base_SetConfig+0x52>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d007      	beq.n	800604a <TIM_Base_SetConfig+0x52>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <TIM_Base_SetConfig+0xc0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_Base_SetConfig+0x52>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_Base_SetConfig+0xc4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <TIM_Base_SetConfig+0xbc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_Base_SetConfig+0xa0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a0b      	ldr	r2, [pc, #44]	; (80060b8 <TIM_Base_SetConfig+0xc0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_Base_SetConfig+0xa0>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <TIM_Base_SetConfig+0xc4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d103      	bne.n	80060a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	615a      	str	r2, [r3, #20]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400

080060c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	f023 0201 	bic.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0302 	bic.w	r3, r3, #2
 800610c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a24      	ldr	r2, [pc, #144]	; (80061ac <TIM_OC1_SetConfig+0xec>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d007      	beq.n	8006130 <TIM_OC1_SetConfig+0x70>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a23      	ldr	r2, [pc, #140]	; (80061b0 <TIM_OC1_SetConfig+0xf0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC1_SetConfig+0x70>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <TIM_OC1_SetConfig+0xf4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d10c      	bne.n	800614a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0308 	bic.w	r3, r3, #8
 8006136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	4313      	orrs	r3, r2
 8006140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 0304 	bic.w	r3, r3, #4
 8006148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <TIM_OC1_SetConfig+0xec>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <TIM_OC1_SetConfig+0xa2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <TIM_OC1_SetConfig+0xf0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_OC1_SetConfig+0xa2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <TIM_OC1_SetConfig+0xf4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	621a      	str	r2, [r3, #32]
}
 80061a0:	bf00      	nop
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40014000 	.word	0x40014000
 80061b4:	40014400 	.word	0x40014400

080061b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0320 	bic.w	r3, r3, #32
 8006206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <TIM_OC2_SetConfig+0xe8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10d      	bne.n	8006238 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a19      	ldr	r2, [pc, #100]	; (80062a0 <TIM_OC2_SetConfig+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d007      	beq.n	8006250 <TIM_OC2_SetConfig+0x98>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a18      	ldr	r2, [pc, #96]	; (80062a4 <TIM_OC2_SetConfig+0xec>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0x98>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a17      	ldr	r2, [pc, #92]	; (80062a8 <TIM_OC2_SetConfig+0xf0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d113      	bne.n	8006278 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40012c00 	.word	0x40012c00
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a21      	ldr	r2, [pc, #132]	; (8006390 <TIM_OC3_SetConfig+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10d      	bne.n	800632a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a18      	ldr	r2, [pc, #96]	; (8006390 <TIM_OC3_SetConfig+0xe4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_OC3_SetConfig+0x96>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <TIM_OC3_SetConfig+0xe8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x96>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <TIM_OC3_SetConfig+0xec>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d113      	bne.n	800636a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	621a      	str	r2, [r3, #32]
}
 8006384:	bf00      	nop
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400

0800639c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a14      	ldr	r2, [pc, #80]	; (800644c <TIM_OC4_SetConfig+0xb0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC4_SetConfig+0x74>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <TIM_OC4_SetConfig+0xb4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC4_SetConfig+0x74>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a12      	ldr	r2, [pc, #72]	; (8006454 <TIM_OC4_SetConfig+0xb8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d109      	bne.n	8006424 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006416:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	019b      	lsls	r3, r3, #6
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400

08006458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800649c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a13      	ldr	r2, [pc, #76]	; (80064fc <TIM_OC5_SetConfig+0xa4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_OC5_SetConfig+0x6a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a12      	ldr	r2, [pc, #72]	; (8006500 <TIM_OC5_SetConfig+0xa8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_OC5_SetConfig+0x6a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a11      	ldr	r2, [pc, #68]	; (8006504 <TIM_OC5_SetConfig+0xac>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d109      	bne.n	80064d6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400

08006508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800654e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a14      	ldr	r2, [pc, #80]	; (80065b0 <TIM_OC6_SetConfig+0xa8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_OC6_SetConfig+0x6c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <TIM_OC6_SetConfig+0xac>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC6_SetConfig+0x6c>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <TIM_OC6_SetConfig+0xb0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d109      	bne.n	8006588 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	029b      	lsls	r3, r3, #10
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400

080065bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f023 0201 	bic.w	r2, r3, #1
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 030a 	bic.w	r3, r3, #10
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661a:	b480      	push	{r7}
 800661c:	b087      	sub	sp, #28
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 0210 	bic.w	r2, r3, #16
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006656:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	f043 0307 	orr.w	r3, r3, #7
 800669c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	609a      	str	r2, [r3, #8]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	021a      	lsls	r2, r3, #8
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	4313      	orrs	r3, r2
 80066dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	609a      	str	r2, [r3, #8]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	2201      	movs	r2, #1
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	43db      	mvns	r3, r3
 8006712:	401a      	ands	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a1a      	ldr	r2, [r3, #32]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
	...

0800673c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_TIMEx_PWMN_Start+0x24>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e022      	b.n	80067a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b04      	cmp	r3, #4
 8006764:	d109      	bne.n	800677a <HAL_TIMEx_PWMN_Start+0x3e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	e015      	b.n	80067a6 <HAL_TIMEx_PWMN_Start+0x6a>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d109      	bne.n	8006794 <HAL_TIMEx_PWMN_Start+0x58>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b01      	cmp	r3, #1
 800678a:	bf14      	ite	ne
 800678c:	2301      	movne	r3, #1
 800678e:	2300      	moveq	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	e008      	b.n	80067a6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b01      	cmp	r3, #1
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e05a      	b.n	8006864 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIMEx_PWMN_Start+0x82>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067bc:	e013      	b.n	80067e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIMEx_PWMN_Start+0x92>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067cc:	e00b      	b.n	80067e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIMEx_PWMN_Start+0xa2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067dc:	e003      	b.n	80067e6 <HAL_TIMEx_PWMN_Start+0xaa>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2204      	movs	r2, #4
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f920 	bl	8006a34 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006802:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a18      	ldr	r2, [pc, #96]	; (800686c <HAL_TIMEx_PWMN_Start+0x130>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_TIMEx_PWMN_Start+0xe6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006816:	d004      	beq.n	8006822 <HAL_TIMEx_PWMN_Start+0xe6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a14      	ldr	r2, [pc, #80]	; (8006870 <HAL_TIMEx_PWMN_Start+0x134>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d115      	bne.n	800684e <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_TIMEx_PWMN_Start+0x138>)
 800682a:	4013      	ands	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b06      	cmp	r3, #6
 8006832:	d015      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x124>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683a:	d011      	beq.n	8006860 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684c:	e008      	b.n	8006860 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0201 	orr.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e000      	b.n	8006862 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006860:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40012c00 	.word	0x40012c00
 8006870:	40014000 	.word	0x40014000
 8006874:	00010007 	.word	0x00010007

08006878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800688c:	2302      	movs	r3, #2
 800688e:	e04f      	b.n	8006930 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a21      	ldr	r2, [pc, #132]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d108      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a14      	ldr	r2, [pc, #80]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d004      	beq.n	8006904 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a10      	ldr	r2, [pc, #64]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10c      	bne.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800690a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	4313      	orrs	r3, r2
 8006914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40014000 	.word	0x40014000

08006944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800695c:	2302      	movs	r3, #2
 800695e:	e060      	b.n	8006a22 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d115      	bne.n	8006a10 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	051b      	lsls	r3, r3, #20
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00

08006a34 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	2204      	movs	r2, #4
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1a      	ldr	r2, [r3, #32]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	43db      	mvns	r3, r3
 8006a56:	401a      	ands	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	6879      	ldr	r1, [r7, #4]
 8006a68:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e040      	b.n	8006b12 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d106      	bne.n	8006aa6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb fac7 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2224      	movs	r2, #36	; 0x24
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fba7 	bl	8007218 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f978 	bl	8006dc0 <UART_SetConfig>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e01b      	b.n	8006b12 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0201 	orr.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc26 	bl	800735c <UART_CheckIdleState>
 8006b10:	4603      	mov	r3, r0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08a      	sub	sp, #40	; 0x28
 8006b1e:	af02      	add	r7, sp, #8
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	603b      	str	r3, [r7, #0]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d178      	bne.n	8006c24 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d002      	beq.n	8006b3e <HAL_UART_Transmit+0x24>
 8006b38:	88fb      	ldrh	r3, [r7, #6]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e071      	b.n	8006c26 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2221      	movs	r2, #33	; 0x21
 8006b4e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b50:	f7fb fc74 	bl	800243c <HAL_GetTick>
 8006b54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	88fa      	ldrh	r2, [r7, #6]
 8006b5a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	88fa      	ldrh	r2, [r7, #6]
 8006b62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d108      	bne.n	8006b82 <HAL_UART_Transmit+0x68>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e003      	b.n	8006b8a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b86:	2300      	movs	r3, #0
 8006b88:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b8a:	e030      	b.n	8006bee <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2200      	movs	r2, #0
 8006b94:	2180      	movs	r1, #128	; 0x80
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 fc88 	bl	80074ac <UART_WaitOnFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e03c      	b.n	8006c26 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e008      	b.n	8006bdc <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	b292      	uxth	r2, r2
 8006bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1c8      	bne.n	8006b8c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	2140      	movs	r1, #64	; 0x40
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 fc51 	bl	80074ac <UART_WaitOnFlagUntilTimeout>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e005      	b.n	8006c26 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e000      	b.n	8006c26 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006c24:	2302      	movs	r3, #2
  }
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b08a      	sub	sp, #40	; 0x28
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c44:	2b20      	cmp	r3, #32
 8006c46:	f040 80b6 	bne.w	8006db6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d002      	beq.n	8006c56 <HAL_UART_Receive+0x28>
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e0ae      	b.n	8006db8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2222      	movs	r2, #34	; 0x22
 8006c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c70:	f7fb fbe4 	bl	800243c <HAL_GetTick>
 8006c74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d10e      	bne.n	8006cae <HAL_UART_Receive+0x80>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_UART_Receive+0x76>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ca2:	e02d      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	; 0xff
 8006ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cac:	e028      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10d      	bne.n	8006cd2 <HAL_UART_Receive+0xa4>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d104      	bne.n	8006cc8 <HAL_UART_Receive+0x9a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc6:	e01b      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	227f      	movs	r2, #127	; 0x7f
 8006ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cd0:	e016      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cda:	d10d      	bne.n	8006cf8 <HAL_UART_Receive+0xca>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_UART_Receive+0xc0>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	227f      	movs	r2, #127	; 0x7f
 8006ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cec:	e008      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	223f      	movs	r2, #63	; 0x3f
 8006cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cf6:	e003      	b.n	8006d00 <HAL_UART_Receive+0xd2>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d10:	d108      	bne.n	8006d24 <HAL_UART_Receive+0xf6>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e003      	b.n	8006d2c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d2c:	e037      	b.n	8006d9e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2120      	movs	r1, #32
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fbb7 	bl	80074ac <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e033      	b.n	8006db8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10c      	bne.n	8006d70 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	8a7b      	ldrh	r3, [r7, #18]
 8006d60:	4013      	ands	r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	61bb      	str	r3, [r7, #24]
 8006d6e:	e00d      	b.n	8006d8c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	8a7b      	ldrh	r3, [r7, #18]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	4013      	ands	r3, r2
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1c1      	bne.n	8006d2e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e000      	b.n	8006db8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006db6:	2302      	movs	r3, #2
  }
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc4:	b08a      	sub	sp, #40	; 0x28
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4bb4      	ldr	r3, [pc, #720]	; (80070c0 <UART_SetConfig+0x300>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006df8:	430b      	orrs	r3, r1
 8006dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	68da      	ldr	r2, [r3, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4aa9      	ldr	r2, [pc, #676]	; (80070c4 <UART_SetConfig+0x304>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4aa0      	ldr	r2, [pc, #640]	; (80070c8 <UART_SetConfig+0x308>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d126      	bne.n	8006e98 <UART_SetConfig+0xd8>
 8006e4a:	4ba0      	ldr	r3, [pc, #640]	; (80070cc <UART_SetConfig+0x30c>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d81b      	bhi.n	8006e90 <UART_SetConfig+0xd0>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <UART_SetConfig+0xa0>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e81 	.word	0x08006e81
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e89 	.word	0x08006e89
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e080      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e07c      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006e80:	2304      	movs	r3, #4
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	e078      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006e88:	2308      	movs	r3, #8
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e8e:	e074      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006e90:	2310      	movs	r3, #16
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e96:	e070      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a8c      	ldr	r2, [pc, #560]	; (80070d0 <UART_SetConfig+0x310>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d138      	bne.n	8006f14 <UART_SetConfig+0x154>
 8006ea2:	4b8a      	ldr	r3, [pc, #552]	; (80070cc <UART_SetConfig+0x30c>)
 8006ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d82d      	bhi.n	8006f0c <UART_SetConfig+0x14c>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0xf8>)
 8006eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006f0d 	.word	0x08006f0d
 8006ec0:	08006f0d 	.word	0x08006f0d
 8006ec4:	08006f0d 	.word	0x08006f0d
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f0d 	.word	0x08006f0d
 8006ed0:	08006f0d 	.word	0x08006f0d
 8006ed4:	08006f0d 	.word	0x08006f0d
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f0d 	.word	0x08006f0d
 8006ee4:	08006f0d 	.word	0x08006f0d
 8006ee8:	08006f05 	.word	0x08006f05
 8006eec:	2300      	movs	r3, #0
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e042      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efa:	e03e      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006efc:	2304      	movs	r3, #4
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f02:	e03a      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f04:	2308      	movs	r3, #8
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0a:	e036      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f12:	e032      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a6a      	ldr	r2, [pc, #424]	; (80070c4 <UART_SetConfig+0x304>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d12a      	bne.n	8006f74 <UART_SetConfig+0x1b4>
 8006f1e:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <UART_SetConfig+0x30c>)
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f2c:	d01a      	beq.n	8006f64 <UART_SetConfig+0x1a4>
 8006f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f32:	d81b      	bhi.n	8006f6c <UART_SetConfig+0x1ac>
 8006f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f38:	d00c      	beq.n	8006f54 <UART_SetConfig+0x194>
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3e:	d815      	bhi.n	8006f6c <UART_SetConfig+0x1ac>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <UART_SetConfig+0x18c>
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f48:	d008      	beq.n	8006f5c <UART_SetConfig+0x19c>
 8006f4a:	e00f      	b.n	8006f6c <UART_SetConfig+0x1ac>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e012      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f54:	2302      	movs	r3, #2
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e00e      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e00a      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f64:	2308      	movs	r3, #8
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6a:	e006      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f6c:	2310      	movs	r3, #16
 8006f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f72:	e002      	b.n	8006f7a <UART_SetConfig+0x1ba>
 8006f74:	2310      	movs	r3, #16
 8006f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a51      	ldr	r2, [pc, #324]	; (80070c4 <UART_SetConfig+0x304>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d17a      	bne.n	800707a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d824      	bhi.n	8006fd6 <UART_SetConfig+0x216>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <UART_SetConfig+0x1d4>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fd7 	.word	0x08006fd7
 8006f9c:	08006fc1 	.word	0x08006fc1
 8006fa0:	08006fd7 	.word	0x08006fd7
 8006fa4:	08006fc7 	.word	0x08006fc7
 8006fa8:	08006fd7 	.word	0x08006fd7
 8006fac:	08006fd7 	.word	0x08006fd7
 8006fb0:	08006fd7 	.word	0x08006fd7
 8006fb4:	08006fcf 	.word	0x08006fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fd fdaa 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8006fbc:	61f8      	str	r0, [r7, #28]
        break;
 8006fbe:	e010      	b.n	8006fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc0:	4b44      	ldr	r3, [pc, #272]	; (80070d4 <UART_SetConfig+0x314>)
 8006fc2:	61fb      	str	r3, [r7, #28]
        break;
 8006fc4:	e00d      	b.n	8006fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fd fd0b 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 8006fca:	61f8      	str	r0, [r7, #28]
        break;
 8006fcc:	e009      	b.n	8006fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd2:	61fb      	str	r3, [r7, #28]
        break;
 8006fd4:	e005      	b.n	8006fe2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8107 	beq.w	80071f8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d305      	bcc.n	8007006 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	429a      	cmp	r2, r3
 8007004:	d903      	bls.n	800700e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800700c:	e0f4      	b.n	80071f8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	2200      	movs	r2, #0
 8007012:	461c      	mov	r4, r3
 8007014:	4615      	mov	r5, r2
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	022b      	lsls	r3, r5, #8
 8007020:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007024:	0222      	lsls	r2, r4, #8
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	6849      	ldr	r1, [r1, #4]
 800702a:	0849      	lsrs	r1, r1, #1
 800702c:	2000      	movs	r0, #0
 800702e:	4688      	mov	r8, r1
 8007030:	4681      	mov	r9, r0
 8007032:	eb12 0a08 	adds.w	sl, r2, r8
 8007036:	eb43 0b09 	adc.w	fp, r3, r9
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007048:	4650      	mov	r0, sl
 800704a:	4659      	mov	r1, fp
 800704c:	f7f9 fe1c 	bl	8000c88 <__aeabi_uldivmod>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4613      	mov	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800705e:	d308      	bcc.n	8007072 <UART_SetConfig+0x2b2>
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007066:	d204      	bcs.n	8007072 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	e0c2      	b.n	80071f8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007078:	e0be      	b.n	80071f8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007082:	d16a      	bne.n	800715a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007088:	2b08      	cmp	r3, #8
 800708a:	d834      	bhi.n	80070f6 <UART_SetConfig+0x336>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0x2d4>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070d9 	.word	0x080070d9
 800709c:	080070e1 	.word	0x080070e1
 80070a0:	080070f7 	.word	0x080070f7
 80070a4:	080070e7 	.word	0x080070e7
 80070a8:	080070f7 	.word	0x080070f7
 80070ac:	080070f7 	.word	0x080070f7
 80070b0:	080070f7 	.word	0x080070f7
 80070b4:	080070ef 	.word	0x080070ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070b8:	f7fd fd2a 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 80070bc:	61f8      	str	r0, [r7, #28]
        break;
 80070be:	e020      	b.n	8007102 <UART_SetConfig+0x342>
 80070c0:	efff69f3 	.word	0xefff69f3
 80070c4:	40008000 	.word	0x40008000
 80070c8:	40013800 	.word	0x40013800
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40004400 	.word	0x40004400
 80070d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fd fd30 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 80070dc:	61f8      	str	r0, [r7, #28]
        break;
 80070de:	e010      	b.n	8007102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e0:	4b4c      	ldr	r3, [pc, #304]	; (8007214 <UART_SetConfig+0x454>)
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	e00d      	b.n	8007102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e6:	f7fd fc7b 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 80070ea:	61f8      	str	r0, [r7, #28]
        break;
 80070ec:	e009      	b.n	8007102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f2:	61fb      	str	r3, [r7, #28]
        break;
 80070f4:	e005      	b.n	8007102 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d077      	beq.n	80071f8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	005a      	lsls	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b0f      	cmp	r3, #15
 8007122:	d916      	bls.n	8007152 <UART_SetConfig+0x392>
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712a:	d212      	bcs.n	8007152 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f023 030f 	bic.w	r3, r3, #15
 8007134:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	b29a      	uxth	r2, r3
 8007142:	8afb      	ldrh	r3, [r7, #22]
 8007144:	4313      	orrs	r3, r2
 8007146:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	8afa      	ldrh	r2, [r7, #22]
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	e052      	b.n	80071f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007158:	e04e      	b.n	80071f8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800715a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800715e:	2b08      	cmp	r3, #8
 8007160:	d827      	bhi.n	80071b2 <UART_SetConfig+0x3f2>
 8007162:	a201      	add	r2, pc, #4	; (adr r2, 8007168 <UART_SetConfig+0x3a8>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071a3 	.word	0x080071a3
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071b3 	.word	0x080071b3
 8007188:	080071ab 	.word	0x080071ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718c:	f7fd fcc0 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8007190:	61f8      	str	r0, [r7, #28]
        break;
 8007192:	e014      	b.n	80071be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007194:	f7fd fcd2 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 8007198:	61f8      	str	r0, [r7, #28]
        break;
 800719a:	e010      	b.n	80071be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <UART_SetConfig+0x454>)
 800719e:	61fb      	str	r3, [r7, #28]
        break;
 80071a0:	e00d      	b.n	80071be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a2:	f7fd fc1d 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 80071a6:	61f8      	str	r0, [r7, #28]
        break;
 80071a8:	e009      	b.n	80071be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ae:	61fb      	str	r3, [r7, #28]
        break;
 80071b0:	e005      	b.n	80071be <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071bc:	bf00      	nop
    }

    if (pclk != 0U)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d019      	beq.n	80071f8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	085a      	lsrs	r2, r3, #1
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d909      	bls.n	80071f2 <UART_SetConfig+0x432>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d205      	bcs.n	80071f2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e002      	b.n	80071f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	; 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007212:	bf00      	nop
 8007214:	00f42400 	.word	0x00f42400

08007218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01a      	beq.n	800732e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007316:	d10a      	bne.n	800732e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b098      	sub	sp, #96	; 0x60
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800736c:	f7fb f866 	bl	800243c <HAL_GetTick>
 8007370:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b08      	cmp	r3, #8
 800737e:	d12e      	bne.n	80073de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007388:	2200      	movs	r2, #0
 800738a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f88c 	bl	80074ac <UART_WaitOnFlagUntilTimeout>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d021      	beq.n	80073de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ae:	653b      	str	r3, [r7, #80]	; 0x50
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073b8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e062      	b.n	80074a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d149      	bne.n	8007480 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f4:	2200      	movs	r2, #0
 80073f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f856 	bl	80074ac <UART_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d03c      	beq.n	8007480 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	e853 3f00 	ldrex	r3, [r3]
 8007412:	623b      	str	r3, [r7, #32]
   return(result);
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
 8007426:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800742a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e6      	bne.n	8007406 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	60fb      	str	r3, [r7, #12]
   return(result);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007458:	61fa      	str	r2, [r7, #28]
 800745a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	69b9      	ldr	r1, [r7, #24]
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	617b      	str	r3, [r7, #20]
   return(result);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e011      	b.n	80074a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3758      	adds	r7, #88	; 0x58
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074bc:	e049      	b.n	8007552 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c4:	d045      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c6:	f7fa ffb9 	bl	800243c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d302      	bcc.n	80074dc <UART_WaitOnFlagUntilTimeout+0x30>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e048      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d031      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d110      	bne.n	800751e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2208      	movs	r2, #8
 8007502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f838 	bl	800757a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2208      	movs	r2, #8
 800750e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e029      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800752c:	d111      	bne.n	8007552 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f81e 	bl	800757a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e00f      	b.n	8007572 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	429a      	cmp	r2, r3
 8007560:	bf0c      	ite	eq
 8007562:	2301      	moveq	r3, #1
 8007564:	2300      	movne	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	429a      	cmp	r2, r3
 800756e:	d0a6      	beq.n	80074be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800757a:	b480      	push	{r7}
 800757c:	b095      	sub	sp, #84	; 0x54
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a0:	643b      	str	r3, [r7, #64]	; 0x40
 80075a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	f023 0301 	bic.w	r3, r3, #1
 80075ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d118      	bne.n	8007622 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	647b      	str	r3, [r7, #68]	; 0x44
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6979      	ldr	r1, [r7, #20]
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	613b      	str	r3, [r7, #16]
   return(result);
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007636:	bf00      	nop
 8007638:	3754      	adds	r7, #84	; 0x54
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <__cvt>:
 8007642:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007646:	ec55 4b10 	vmov	r4, r5, d0
 800764a:	2d00      	cmp	r5, #0
 800764c:	460e      	mov	r6, r1
 800764e:	4619      	mov	r1, r3
 8007650:	462b      	mov	r3, r5
 8007652:	bfbb      	ittet	lt
 8007654:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007658:	461d      	movlt	r5, r3
 800765a:	2300      	movge	r3, #0
 800765c:	232d      	movlt	r3, #45	; 0x2d
 800765e:	700b      	strb	r3, [r1, #0]
 8007660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007662:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007666:	4691      	mov	r9, r2
 8007668:	f023 0820 	bic.w	r8, r3, #32
 800766c:	bfbc      	itt	lt
 800766e:	4622      	movlt	r2, r4
 8007670:	4614      	movlt	r4, r2
 8007672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007676:	d005      	beq.n	8007684 <__cvt+0x42>
 8007678:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800767c:	d100      	bne.n	8007680 <__cvt+0x3e>
 800767e:	3601      	adds	r6, #1
 8007680:	2102      	movs	r1, #2
 8007682:	e000      	b.n	8007686 <__cvt+0x44>
 8007684:	2103      	movs	r1, #3
 8007686:	ab03      	add	r3, sp, #12
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	ab02      	add	r3, sp, #8
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	ec45 4b10 	vmov	d0, r4, r5
 8007692:	4653      	mov	r3, sl
 8007694:	4632      	mov	r2, r6
 8007696:	f001 f8b3 	bl	8008800 <_dtoa_r>
 800769a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800769e:	4607      	mov	r7, r0
 80076a0:	d102      	bne.n	80076a8 <__cvt+0x66>
 80076a2:	f019 0f01 	tst.w	r9, #1
 80076a6:	d022      	beq.n	80076ee <__cvt+0xac>
 80076a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076ac:	eb07 0906 	add.w	r9, r7, r6
 80076b0:	d110      	bne.n	80076d4 <__cvt+0x92>
 80076b2:	783b      	ldrb	r3, [r7, #0]
 80076b4:	2b30      	cmp	r3, #48	; 0x30
 80076b6:	d10a      	bne.n	80076ce <__cvt+0x8c>
 80076b8:	2200      	movs	r2, #0
 80076ba:	2300      	movs	r3, #0
 80076bc:	4620      	mov	r0, r4
 80076be:	4629      	mov	r1, r5
 80076c0:	f7f9 fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c4:	b918      	cbnz	r0, 80076ce <__cvt+0x8c>
 80076c6:	f1c6 0601 	rsb	r6, r6, #1
 80076ca:	f8ca 6000 	str.w	r6, [sl]
 80076ce:	f8da 3000 	ldr.w	r3, [sl]
 80076d2:	4499      	add	r9, r3
 80076d4:	2200      	movs	r2, #0
 80076d6:	2300      	movs	r3, #0
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f9 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e0:	b108      	cbz	r0, 80076e6 <__cvt+0xa4>
 80076e2:	f8cd 900c 	str.w	r9, [sp, #12]
 80076e6:	2230      	movs	r2, #48	; 0x30
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	454b      	cmp	r3, r9
 80076ec:	d307      	bcc.n	80076fe <__cvt+0xbc>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076f2:	1bdb      	subs	r3, r3, r7
 80076f4:	4638      	mov	r0, r7
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	b004      	add	sp, #16
 80076fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	9103      	str	r1, [sp, #12]
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e7f0      	b.n	80076e8 <__cvt+0xa6>

08007706 <__exponent>:
 8007706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007708:	4603      	mov	r3, r0
 800770a:	2900      	cmp	r1, #0
 800770c:	bfb8      	it	lt
 800770e:	4249      	neglt	r1, r1
 8007710:	f803 2b02 	strb.w	r2, [r3], #2
 8007714:	bfb4      	ite	lt
 8007716:	222d      	movlt	r2, #45	; 0x2d
 8007718:	222b      	movge	r2, #43	; 0x2b
 800771a:	2909      	cmp	r1, #9
 800771c:	7042      	strb	r2, [r0, #1]
 800771e:	dd2a      	ble.n	8007776 <__exponent+0x70>
 8007720:	f10d 0207 	add.w	r2, sp, #7
 8007724:	4617      	mov	r7, r2
 8007726:	260a      	movs	r6, #10
 8007728:	4694      	mov	ip, r2
 800772a:	fb91 f5f6 	sdiv	r5, r1, r6
 800772e:	fb06 1415 	mls	r4, r6, r5, r1
 8007732:	3430      	adds	r4, #48	; 0x30
 8007734:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007738:	460c      	mov	r4, r1
 800773a:	2c63      	cmp	r4, #99	; 0x63
 800773c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007740:	4629      	mov	r1, r5
 8007742:	dcf1      	bgt.n	8007728 <__exponent+0x22>
 8007744:	3130      	adds	r1, #48	; 0x30
 8007746:	f1ac 0402 	sub.w	r4, ip, #2
 800774a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800774e:	1c41      	adds	r1, r0, #1
 8007750:	4622      	mov	r2, r4
 8007752:	42ba      	cmp	r2, r7
 8007754:	d30a      	bcc.n	800776c <__exponent+0x66>
 8007756:	f10d 0209 	add.w	r2, sp, #9
 800775a:	eba2 020c 	sub.w	r2, r2, ip
 800775e:	42bc      	cmp	r4, r7
 8007760:	bf88      	it	hi
 8007762:	2200      	movhi	r2, #0
 8007764:	4413      	add	r3, r2
 8007766:	1a18      	subs	r0, r3, r0
 8007768:	b003      	add	sp, #12
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007770:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007774:	e7ed      	b.n	8007752 <__exponent+0x4c>
 8007776:	2330      	movs	r3, #48	; 0x30
 8007778:	3130      	adds	r1, #48	; 0x30
 800777a:	7083      	strb	r3, [r0, #2]
 800777c:	70c1      	strb	r1, [r0, #3]
 800777e:	1d03      	adds	r3, r0, #4
 8007780:	e7f1      	b.n	8007766 <__exponent+0x60>
	...

08007784 <_printf_float>:
 8007784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007788:	ed2d 8b02 	vpush	{d8}
 800778c:	b08d      	sub	sp, #52	; 0x34
 800778e:	460c      	mov	r4, r1
 8007790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007794:	4616      	mov	r6, r2
 8007796:	461f      	mov	r7, r3
 8007798:	4605      	mov	r5, r0
 800779a:	f000 ff2b 	bl	80085f4 <_localeconv_r>
 800779e:	f8d0 a000 	ldr.w	sl, [r0]
 80077a2:	4650      	mov	r0, sl
 80077a4:	f7f8 fd64 	bl	8000270 <strlen>
 80077a8:	2300      	movs	r3, #0
 80077aa:	930a      	str	r3, [sp, #40]	; 0x28
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	9305      	str	r3, [sp, #20]
 80077b0:	f8d8 3000 	ldr.w	r3, [r8]
 80077b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077b8:	3307      	adds	r3, #7
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	f103 0208 	add.w	r2, r3, #8
 80077c2:	f8c8 2000 	str.w	r2, [r8]
 80077c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077ce:	9307      	str	r3, [sp, #28]
 80077d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80077d4:	ee08 0a10 	vmov	s16, r0
 80077d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077e0:	4b9e      	ldr	r3, [pc, #632]	; (8007a5c <_printf_float+0x2d8>)
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	f7f9 f9a1 	bl	8000b2c <__aeabi_dcmpun>
 80077ea:	bb88      	cbnz	r0, 8007850 <_printf_float+0xcc>
 80077ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f0:	4b9a      	ldr	r3, [pc, #616]	; (8007a5c <_printf_float+0x2d8>)
 80077f2:	f04f 32ff 	mov.w	r2, #4294967295
 80077f6:	f7f9 f97b 	bl	8000af0 <__aeabi_dcmple>
 80077fa:	bb48      	cbnz	r0, 8007850 <_printf_float+0xcc>
 80077fc:	2200      	movs	r2, #0
 80077fe:	2300      	movs	r3, #0
 8007800:	4640      	mov	r0, r8
 8007802:	4649      	mov	r1, r9
 8007804:	f7f9 f96a 	bl	8000adc <__aeabi_dcmplt>
 8007808:	b110      	cbz	r0, 8007810 <_printf_float+0x8c>
 800780a:	232d      	movs	r3, #45	; 0x2d
 800780c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007810:	4a93      	ldr	r2, [pc, #588]	; (8007a60 <_printf_float+0x2dc>)
 8007812:	4b94      	ldr	r3, [pc, #592]	; (8007a64 <_printf_float+0x2e0>)
 8007814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007818:	bf94      	ite	ls
 800781a:	4690      	movls	r8, r2
 800781c:	4698      	movhi	r8, r3
 800781e:	2303      	movs	r3, #3
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	f023 0304 	bic.w	r3, r3, #4
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	f04f 0900 	mov.w	r9, #0
 800782e:	9700      	str	r7, [sp, #0]
 8007830:	4633      	mov	r3, r6
 8007832:	aa0b      	add	r2, sp, #44	; 0x2c
 8007834:	4621      	mov	r1, r4
 8007836:	4628      	mov	r0, r5
 8007838:	f000 f9da 	bl	8007bf0 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	f040 8090 	bne.w	8007962 <_printf_float+0x1de>
 8007842:	f04f 30ff 	mov.w	r0, #4294967295
 8007846:	b00d      	add	sp, #52	; 0x34
 8007848:	ecbd 8b02 	vpop	{d8}
 800784c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007850:	4642      	mov	r2, r8
 8007852:	464b      	mov	r3, r9
 8007854:	4640      	mov	r0, r8
 8007856:	4649      	mov	r1, r9
 8007858:	f7f9 f968 	bl	8000b2c <__aeabi_dcmpun>
 800785c:	b140      	cbz	r0, 8007870 <_printf_float+0xec>
 800785e:	464b      	mov	r3, r9
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfbc      	itt	lt
 8007864:	232d      	movlt	r3, #45	; 0x2d
 8007866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800786a:	4a7f      	ldr	r2, [pc, #508]	; (8007a68 <_printf_float+0x2e4>)
 800786c:	4b7f      	ldr	r3, [pc, #508]	; (8007a6c <_printf_float+0x2e8>)
 800786e:	e7d1      	b.n	8007814 <_printf_float+0x90>
 8007870:	6863      	ldr	r3, [r4, #4]
 8007872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007876:	9206      	str	r2, [sp, #24]
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	d13f      	bne.n	80078fc <_printf_float+0x178>
 800787c:	2306      	movs	r3, #6
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	6861      	ldr	r1, [r4, #4]
 8007884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007888:	2300      	movs	r3, #0
 800788a:	9303      	str	r3, [sp, #12]
 800788c:	ab0a      	add	r3, sp, #40	; 0x28
 800788e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007892:	ab09      	add	r3, sp, #36	; 0x24
 8007894:	ec49 8b10 	vmov	d0, r8, r9
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	6022      	str	r2, [r4, #0]
 800789c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7ff fece 	bl	8007642 <__cvt>
 80078a6:	9b06      	ldr	r3, [sp, #24]
 80078a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078aa:	2b47      	cmp	r3, #71	; 0x47
 80078ac:	4680      	mov	r8, r0
 80078ae:	d108      	bne.n	80078c2 <_printf_float+0x13e>
 80078b0:	1cc8      	adds	r0, r1, #3
 80078b2:	db02      	blt.n	80078ba <_printf_float+0x136>
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	4299      	cmp	r1, r3
 80078b8:	dd41      	ble.n	800793e <_printf_float+0x1ba>
 80078ba:	f1ab 0302 	sub.w	r3, fp, #2
 80078be:	fa5f fb83 	uxtb.w	fp, r3
 80078c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078c6:	d820      	bhi.n	800790a <_printf_float+0x186>
 80078c8:	3901      	subs	r1, #1
 80078ca:	465a      	mov	r2, fp
 80078cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078d0:	9109      	str	r1, [sp, #36]	; 0x24
 80078d2:	f7ff ff18 	bl	8007706 <__exponent>
 80078d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d8:	1813      	adds	r3, r2, r0
 80078da:	2a01      	cmp	r2, #1
 80078dc:	4681      	mov	r9, r0
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	dc02      	bgt.n	80078e8 <_printf_float+0x164>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d2      	lsls	r2, r2, #31
 80078e6:	d501      	bpl.n	80078ec <_printf_float+0x168>
 80078e8:	3301      	adds	r3, #1
 80078ea:	6123      	str	r3, [r4, #16]
 80078ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d09c      	beq.n	800782e <_printf_float+0xaa>
 80078f4:	232d      	movs	r3, #45	; 0x2d
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fa:	e798      	b.n	800782e <_printf_float+0xaa>
 80078fc:	9a06      	ldr	r2, [sp, #24]
 80078fe:	2a47      	cmp	r2, #71	; 0x47
 8007900:	d1be      	bne.n	8007880 <_printf_float+0xfc>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1bc      	bne.n	8007880 <_printf_float+0xfc>
 8007906:	2301      	movs	r3, #1
 8007908:	e7b9      	b.n	800787e <_printf_float+0xfa>
 800790a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800790e:	d118      	bne.n	8007942 <_printf_float+0x1be>
 8007910:	2900      	cmp	r1, #0
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	dd0b      	ble.n	800792e <_printf_float+0x1aa>
 8007916:	6121      	str	r1, [r4, #16]
 8007918:	b913      	cbnz	r3, 8007920 <_printf_float+0x19c>
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	07d0      	lsls	r0, r2, #31
 800791e:	d502      	bpl.n	8007926 <_printf_float+0x1a2>
 8007920:	3301      	adds	r3, #1
 8007922:	440b      	add	r3, r1
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	65a1      	str	r1, [r4, #88]	; 0x58
 8007928:	f04f 0900 	mov.w	r9, #0
 800792c:	e7de      	b.n	80078ec <_printf_float+0x168>
 800792e:	b913      	cbnz	r3, 8007936 <_printf_float+0x1b2>
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	07d2      	lsls	r2, r2, #31
 8007934:	d501      	bpl.n	800793a <_printf_float+0x1b6>
 8007936:	3302      	adds	r3, #2
 8007938:	e7f4      	b.n	8007924 <_printf_float+0x1a0>
 800793a:	2301      	movs	r3, #1
 800793c:	e7f2      	b.n	8007924 <_printf_float+0x1a0>
 800793e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007944:	4299      	cmp	r1, r3
 8007946:	db05      	blt.n	8007954 <_printf_float+0x1d0>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	6121      	str	r1, [r4, #16]
 800794c:	07d8      	lsls	r0, r3, #31
 800794e:	d5ea      	bpl.n	8007926 <_printf_float+0x1a2>
 8007950:	1c4b      	adds	r3, r1, #1
 8007952:	e7e7      	b.n	8007924 <_printf_float+0x1a0>
 8007954:	2900      	cmp	r1, #0
 8007956:	bfd4      	ite	le
 8007958:	f1c1 0202 	rsble	r2, r1, #2
 800795c:	2201      	movgt	r2, #1
 800795e:	4413      	add	r3, r2
 8007960:	e7e0      	b.n	8007924 <_printf_float+0x1a0>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	055a      	lsls	r2, r3, #21
 8007966:	d407      	bmi.n	8007978 <_printf_float+0x1f4>
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	4642      	mov	r2, r8
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	d12c      	bne.n	80079d0 <_printf_float+0x24c>
 8007976:	e764      	b.n	8007842 <_printf_float+0xbe>
 8007978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800797c:	f240 80e0 	bls.w	8007b40 <_printf_float+0x3bc>
 8007980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	f7f9 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800798c:	2800      	cmp	r0, #0
 800798e:	d034      	beq.n	80079fa <_printf_float+0x276>
 8007990:	4a37      	ldr	r2, [pc, #220]	; (8007a70 <_printf_float+0x2ec>)
 8007992:	2301      	movs	r3, #1
 8007994:	4631      	mov	r1, r6
 8007996:	4628      	mov	r0, r5
 8007998:	47b8      	blx	r7
 800799a:	3001      	adds	r0, #1
 800799c:	f43f af51 	beq.w	8007842 <_printf_float+0xbe>
 80079a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079a4:	429a      	cmp	r2, r3
 80079a6:	db02      	blt.n	80079ae <_printf_float+0x22a>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	07d8      	lsls	r0, r3, #31
 80079ac:	d510      	bpl.n	80079d0 <_printf_float+0x24c>
 80079ae:	ee18 3a10 	vmov	r3, s16
 80079b2:	4652      	mov	r2, sl
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af41 	beq.w	8007842 <_printf_float+0xbe>
 80079c0:	f04f 0800 	mov.w	r8, #0
 80079c4:	f104 091a 	add.w	r9, r4, #26
 80079c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ca:	3b01      	subs	r3, #1
 80079cc:	4543      	cmp	r3, r8
 80079ce:	dc09      	bgt.n	80079e4 <_printf_float+0x260>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	079b      	lsls	r3, r3, #30
 80079d4:	f100 8107 	bmi.w	8007be6 <_printf_float+0x462>
 80079d8:	68e0      	ldr	r0, [r4, #12]
 80079da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079dc:	4298      	cmp	r0, r3
 80079de:	bfb8      	it	lt
 80079e0:	4618      	movlt	r0, r3
 80079e2:	e730      	b.n	8007846 <_printf_float+0xc2>
 80079e4:	2301      	movs	r3, #1
 80079e6:	464a      	mov	r2, r9
 80079e8:	4631      	mov	r1, r6
 80079ea:	4628      	mov	r0, r5
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f af27 	beq.w	8007842 <_printf_float+0xbe>
 80079f4:	f108 0801 	add.w	r8, r8, #1
 80079f8:	e7e6      	b.n	80079c8 <_printf_float+0x244>
 80079fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dc39      	bgt.n	8007a74 <_printf_float+0x2f0>
 8007a00:	4a1b      	ldr	r2, [pc, #108]	; (8007a70 <_printf_float+0x2ec>)
 8007a02:	2301      	movs	r3, #1
 8007a04:	4631      	mov	r1, r6
 8007a06:	4628      	mov	r0, r5
 8007a08:	47b8      	blx	r7
 8007a0a:	3001      	adds	r0, #1
 8007a0c:	f43f af19 	beq.w	8007842 <_printf_float+0xbe>
 8007a10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a14:	4313      	orrs	r3, r2
 8007a16:	d102      	bne.n	8007a1e <_printf_float+0x29a>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	07d9      	lsls	r1, r3, #31
 8007a1c:	d5d8      	bpl.n	80079d0 <_printf_float+0x24c>
 8007a1e:	ee18 3a10 	vmov	r3, s16
 8007a22:	4652      	mov	r2, sl
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	f43f af09 	beq.w	8007842 <_printf_float+0xbe>
 8007a30:	f04f 0900 	mov.w	r9, #0
 8007a34:	f104 0a1a 	add.w	sl, r4, #26
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	425b      	negs	r3, r3
 8007a3c:	454b      	cmp	r3, r9
 8007a3e:	dc01      	bgt.n	8007a44 <_printf_float+0x2c0>
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	e792      	b.n	800796a <_printf_float+0x1e6>
 8007a44:	2301      	movs	r3, #1
 8007a46:	4652      	mov	r2, sl
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	47b8      	blx	r7
 8007a4e:	3001      	adds	r0, #1
 8007a50:	f43f aef7 	beq.w	8007842 <_printf_float+0xbe>
 8007a54:	f109 0901 	add.w	r9, r9, #1
 8007a58:	e7ee      	b.n	8007a38 <_printf_float+0x2b4>
 8007a5a:	bf00      	nop
 8007a5c:	7fefffff 	.word	0x7fefffff
 8007a60:	0800c954 	.word	0x0800c954
 8007a64:	0800c958 	.word	0x0800c958
 8007a68:	0800c95c 	.word	0x0800c95c
 8007a6c:	0800c960 	.word	0x0800c960
 8007a70:	0800c964 	.word	0x0800c964
 8007a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	bfa8      	it	ge
 8007a7c:	461a      	movge	r2, r3
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	4691      	mov	r9, r2
 8007a82:	dc37      	bgt.n	8007af4 <_printf_float+0x370>
 8007a84:	f04f 0b00 	mov.w	fp, #0
 8007a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a8c:	f104 021a 	add.w	r2, r4, #26
 8007a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	eba3 0309 	sub.w	r3, r3, r9
 8007a98:	455b      	cmp	r3, fp
 8007a9a:	dc33      	bgt.n	8007b04 <_printf_float+0x380>
 8007a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db3b      	blt.n	8007b1c <_printf_float+0x398>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07da      	lsls	r2, r3, #31
 8007aa8:	d438      	bmi.n	8007b1c <_printf_float+0x398>
 8007aaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007aae:	eba2 0903 	sub.w	r9, r2, r3
 8007ab2:	9b05      	ldr	r3, [sp, #20]
 8007ab4:	1ad2      	subs	r2, r2, r3
 8007ab6:	4591      	cmp	r9, r2
 8007ab8:	bfa8      	it	ge
 8007aba:	4691      	movge	r9, r2
 8007abc:	f1b9 0f00 	cmp.w	r9, #0
 8007ac0:	dc35      	bgt.n	8007b2e <_printf_float+0x3aa>
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aca:	f104 0a1a 	add.w	sl, r4, #26
 8007ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad2:	1a9b      	subs	r3, r3, r2
 8007ad4:	eba3 0309 	sub.w	r3, r3, r9
 8007ad8:	4543      	cmp	r3, r8
 8007ada:	f77f af79 	ble.w	80079d0 <_printf_float+0x24c>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f43f aeaa 	beq.w	8007842 <_printf_float+0xbe>
 8007aee:	f108 0801 	add.w	r8, r8, #1
 8007af2:	e7ec      	b.n	8007ace <_printf_float+0x34a>
 8007af4:	4613      	mov	r3, r2
 8007af6:	4631      	mov	r1, r6
 8007af8:	4642      	mov	r2, r8
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	d1c0      	bne.n	8007a84 <_printf_float+0x300>
 8007b02:	e69e      	b.n	8007842 <_printf_float+0xbe>
 8007b04:	2301      	movs	r3, #1
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	9205      	str	r2, [sp, #20]
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f43f ae97 	beq.w	8007842 <_printf_float+0xbe>
 8007b14:	9a05      	ldr	r2, [sp, #20]
 8007b16:	f10b 0b01 	add.w	fp, fp, #1
 8007b1a:	e7b9      	b.n	8007a90 <_printf_float+0x30c>
 8007b1c:	ee18 3a10 	vmov	r3, s16
 8007b20:	4652      	mov	r2, sl
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1be      	bne.n	8007aaa <_printf_float+0x326>
 8007b2c:	e689      	b.n	8007842 <_printf_float+0xbe>
 8007b2e:	9a05      	ldr	r2, [sp, #20]
 8007b30:	464b      	mov	r3, r9
 8007b32:	4442      	add	r2, r8
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d1c1      	bne.n	8007ac2 <_printf_float+0x33e>
 8007b3e:	e680      	b.n	8007842 <_printf_float+0xbe>
 8007b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b42:	2a01      	cmp	r2, #1
 8007b44:	dc01      	bgt.n	8007b4a <_printf_float+0x3c6>
 8007b46:	07db      	lsls	r3, r3, #31
 8007b48:	d53a      	bpl.n	8007bc0 <_printf_float+0x43c>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f ae74 	beq.w	8007842 <_printf_float+0xbe>
 8007b5a:	ee18 3a10 	vmov	r3, s16
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f ae6b 	beq.w	8007842 <_printf_float+0xbe>
 8007b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b78:	f7f8 ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b7c:	b9d8      	cbnz	r0, 8007bb6 <_printf_float+0x432>
 8007b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b82:	f108 0201 	add.w	r2, r8, #1
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d10e      	bne.n	8007bae <_printf_float+0x42a>
 8007b90:	e657      	b.n	8007842 <_printf_float+0xbe>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae50 	beq.w	8007842 <_printf_float+0xbe>
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	4543      	cmp	r3, r8
 8007bac:	dcf1      	bgt.n	8007b92 <_printf_float+0x40e>
 8007bae:	464b      	mov	r3, r9
 8007bb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bb4:	e6da      	b.n	800796c <_printf_float+0x1e8>
 8007bb6:	f04f 0800 	mov.w	r8, #0
 8007bba:	f104 0a1a 	add.w	sl, r4, #26
 8007bbe:	e7f2      	b.n	8007ba6 <_printf_float+0x422>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4642      	mov	r2, r8
 8007bc4:	e7df      	b.n	8007b86 <_printf_float+0x402>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	464a      	mov	r2, r9
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f ae36 	beq.w	8007842 <_printf_float+0xbe>
 8007bd6:	f108 0801 	add.w	r8, r8, #1
 8007bda:	68e3      	ldr	r3, [r4, #12]
 8007bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bde:	1a5b      	subs	r3, r3, r1
 8007be0:	4543      	cmp	r3, r8
 8007be2:	dcf0      	bgt.n	8007bc6 <_printf_float+0x442>
 8007be4:	e6f8      	b.n	80079d8 <_printf_float+0x254>
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	f104 0919 	add.w	r9, r4, #25
 8007bee:	e7f4      	b.n	8007bda <_printf_float+0x456>

08007bf0 <_printf_common>:
 8007bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	4616      	mov	r6, r2
 8007bf6:	4699      	mov	r9, r3
 8007bf8:	688a      	ldr	r2, [r1, #8]
 8007bfa:	690b      	ldr	r3, [r1, #16]
 8007bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c00:	4293      	cmp	r3, r2
 8007c02:	bfb8      	it	lt
 8007c04:	4613      	movlt	r3, r2
 8007c06:	6033      	str	r3, [r6, #0]
 8007c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b10a      	cbz	r2, 8007c16 <_printf_common+0x26>
 8007c12:	3301      	adds	r3, #1
 8007c14:	6033      	str	r3, [r6, #0]
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	0699      	lsls	r1, r3, #26
 8007c1a:	bf42      	ittt	mi
 8007c1c:	6833      	ldrmi	r3, [r6, #0]
 8007c1e:	3302      	addmi	r3, #2
 8007c20:	6033      	strmi	r3, [r6, #0]
 8007c22:	6825      	ldr	r5, [r4, #0]
 8007c24:	f015 0506 	ands.w	r5, r5, #6
 8007c28:	d106      	bne.n	8007c38 <_printf_common+0x48>
 8007c2a:	f104 0a19 	add.w	sl, r4, #25
 8007c2e:	68e3      	ldr	r3, [r4, #12]
 8007c30:	6832      	ldr	r2, [r6, #0]
 8007c32:	1a9b      	subs	r3, r3, r2
 8007c34:	42ab      	cmp	r3, r5
 8007c36:	dc26      	bgt.n	8007c86 <_printf_common+0x96>
 8007c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c3c:	1e13      	subs	r3, r2, #0
 8007c3e:	6822      	ldr	r2, [r4, #0]
 8007c40:	bf18      	it	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	0692      	lsls	r2, r2, #26
 8007c46:	d42b      	bmi.n	8007ca0 <_printf_common+0xb0>
 8007c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c4c:	4649      	mov	r1, r9
 8007c4e:	4638      	mov	r0, r7
 8007c50:	47c0      	blx	r8
 8007c52:	3001      	adds	r0, #1
 8007c54:	d01e      	beq.n	8007c94 <_printf_common+0xa4>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	6922      	ldr	r2, [r4, #16]
 8007c5a:	f003 0306 	and.w	r3, r3, #6
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	bf02      	ittt	eq
 8007c62:	68e5      	ldreq	r5, [r4, #12]
 8007c64:	6833      	ldreq	r3, [r6, #0]
 8007c66:	1aed      	subeq	r5, r5, r3
 8007c68:	68a3      	ldr	r3, [r4, #8]
 8007c6a:	bf0c      	ite	eq
 8007c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c70:	2500      	movne	r5, #0
 8007c72:	4293      	cmp	r3, r2
 8007c74:	bfc4      	itt	gt
 8007c76:	1a9b      	subgt	r3, r3, r2
 8007c78:	18ed      	addgt	r5, r5, r3
 8007c7a:	2600      	movs	r6, #0
 8007c7c:	341a      	adds	r4, #26
 8007c7e:	42b5      	cmp	r5, r6
 8007c80:	d11a      	bne.n	8007cb8 <_printf_common+0xc8>
 8007c82:	2000      	movs	r0, #0
 8007c84:	e008      	b.n	8007c98 <_printf_common+0xa8>
 8007c86:	2301      	movs	r3, #1
 8007c88:	4652      	mov	r2, sl
 8007c8a:	4649      	mov	r1, r9
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	47c0      	blx	r8
 8007c90:	3001      	adds	r0, #1
 8007c92:	d103      	bne.n	8007c9c <_printf_common+0xac>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	e7c6      	b.n	8007c2e <_printf_common+0x3e>
 8007ca0:	18e1      	adds	r1, r4, r3
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	2030      	movs	r0, #48	; 0x30
 8007ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007caa:	4422      	add	r2, r4
 8007cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cb4:	3302      	adds	r3, #2
 8007cb6:	e7c7      	b.n	8007c48 <_printf_common+0x58>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4622      	mov	r2, r4
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	47c0      	blx	r8
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d0e6      	beq.n	8007c94 <_printf_common+0xa4>
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7d9      	b.n	8007c7e <_printf_common+0x8e>
	...

08007ccc <_printf_i>:
 8007ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	7e0f      	ldrb	r7, [r1, #24]
 8007cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cd4:	2f78      	cmp	r7, #120	; 0x78
 8007cd6:	4691      	mov	r9, r2
 8007cd8:	4680      	mov	r8, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	469a      	mov	sl, r3
 8007cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ce2:	d807      	bhi.n	8007cf4 <_printf_i+0x28>
 8007ce4:	2f62      	cmp	r7, #98	; 0x62
 8007ce6:	d80a      	bhi.n	8007cfe <_printf_i+0x32>
 8007ce8:	2f00      	cmp	r7, #0
 8007cea:	f000 80d4 	beq.w	8007e96 <_printf_i+0x1ca>
 8007cee:	2f58      	cmp	r7, #88	; 0x58
 8007cf0:	f000 80c0 	beq.w	8007e74 <_printf_i+0x1a8>
 8007cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cfc:	e03a      	b.n	8007d74 <_printf_i+0xa8>
 8007cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d02:	2b15      	cmp	r3, #21
 8007d04:	d8f6      	bhi.n	8007cf4 <_printf_i+0x28>
 8007d06:	a101      	add	r1, pc, #4	; (adr r1, 8007d0c <_printf_i+0x40>)
 8007d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d79 	.word	0x08007d79
 8007d14:	08007cf5 	.word	0x08007cf5
 8007d18:	08007cf5 	.word	0x08007cf5
 8007d1c:	08007cf5 	.word	0x08007cf5
 8007d20:	08007cf5 	.word	0x08007cf5
 8007d24:	08007d79 	.word	0x08007d79
 8007d28:	08007cf5 	.word	0x08007cf5
 8007d2c:	08007cf5 	.word	0x08007cf5
 8007d30:	08007cf5 	.word	0x08007cf5
 8007d34:	08007cf5 	.word	0x08007cf5
 8007d38:	08007e7d 	.word	0x08007e7d
 8007d3c:	08007da5 	.word	0x08007da5
 8007d40:	08007e37 	.word	0x08007e37
 8007d44:	08007cf5 	.word	0x08007cf5
 8007d48:	08007cf5 	.word	0x08007cf5
 8007d4c:	08007e9f 	.word	0x08007e9f
 8007d50:	08007cf5 	.word	0x08007cf5
 8007d54:	08007da5 	.word	0x08007da5
 8007d58:	08007cf5 	.word	0x08007cf5
 8007d5c:	08007cf5 	.word	0x08007cf5
 8007d60:	08007e3f 	.word	0x08007e3f
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	1d1a      	adds	r2, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	602a      	str	r2, [r5, #0]
 8007d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d74:	2301      	movs	r3, #1
 8007d76:	e09f      	b.n	8007eb8 <_printf_i+0x1ec>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	682b      	ldr	r3, [r5, #0]
 8007d7c:	0607      	lsls	r7, r0, #24
 8007d7e:	f103 0104 	add.w	r1, r3, #4
 8007d82:	6029      	str	r1, [r5, #0]
 8007d84:	d501      	bpl.n	8007d8a <_printf_i+0xbe>
 8007d86:	681e      	ldr	r6, [r3, #0]
 8007d88:	e003      	b.n	8007d92 <_printf_i+0xc6>
 8007d8a:	0646      	lsls	r6, r0, #25
 8007d8c:	d5fb      	bpl.n	8007d86 <_printf_i+0xba>
 8007d8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	da03      	bge.n	8007d9e <_printf_i+0xd2>
 8007d96:	232d      	movs	r3, #45	; 0x2d
 8007d98:	4276      	negs	r6, r6
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d9e:	485a      	ldr	r0, [pc, #360]	; (8007f08 <_printf_i+0x23c>)
 8007da0:	230a      	movs	r3, #10
 8007da2:	e012      	b.n	8007dca <_printf_i+0xfe>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	6820      	ldr	r0, [r4, #0]
 8007da8:	1d19      	adds	r1, r3, #4
 8007daa:	6029      	str	r1, [r5, #0]
 8007dac:	0605      	lsls	r5, r0, #24
 8007dae:	d501      	bpl.n	8007db4 <_printf_i+0xe8>
 8007db0:	681e      	ldr	r6, [r3, #0]
 8007db2:	e002      	b.n	8007dba <_printf_i+0xee>
 8007db4:	0641      	lsls	r1, r0, #25
 8007db6:	d5fb      	bpl.n	8007db0 <_printf_i+0xe4>
 8007db8:	881e      	ldrh	r6, [r3, #0]
 8007dba:	4853      	ldr	r0, [pc, #332]	; (8007f08 <_printf_i+0x23c>)
 8007dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2308      	moveq	r3, #8
 8007dc2:	230a      	movne	r3, #10
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dca:	6865      	ldr	r5, [r4, #4]
 8007dcc:	60a5      	str	r5, [r4, #8]
 8007dce:	2d00      	cmp	r5, #0
 8007dd0:	bfa2      	ittt	ge
 8007dd2:	6821      	ldrge	r1, [r4, #0]
 8007dd4:	f021 0104 	bicge.w	r1, r1, #4
 8007dd8:	6021      	strge	r1, [r4, #0]
 8007dda:	b90e      	cbnz	r6, 8007de0 <_printf_i+0x114>
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	d04b      	beq.n	8007e78 <_printf_i+0x1ac>
 8007de0:	4615      	mov	r5, r2
 8007de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007de6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dea:	5dc7      	ldrb	r7, [r0, r7]
 8007dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007df0:	4637      	mov	r7, r6
 8007df2:	42bb      	cmp	r3, r7
 8007df4:	460e      	mov	r6, r1
 8007df6:	d9f4      	bls.n	8007de2 <_printf_i+0x116>
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d10b      	bne.n	8007e14 <_printf_i+0x148>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	07de      	lsls	r6, r3, #31
 8007e00:	d508      	bpl.n	8007e14 <_printf_i+0x148>
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	6861      	ldr	r1, [r4, #4]
 8007e06:	4299      	cmp	r1, r3
 8007e08:	bfde      	ittt	le
 8007e0a:	2330      	movle	r3, #48	; 0x30
 8007e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e14:	1b52      	subs	r2, r2, r5
 8007e16:	6122      	str	r2, [r4, #16]
 8007e18:	f8cd a000 	str.w	sl, [sp]
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	aa03      	add	r2, sp, #12
 8007e20:	4621      	mov	r1, r4
 8007e22:	4640      	mov	r0, r8
 8007e24:	f7ff fee4 	bl	8007bf0 <_printf_common>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	d14a      	bne.n	8007ec2 <_printf_i+0x1f6>
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	b004      	add	sp, #16
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	f043 0320 	orr.w	r3, r3, #32
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	4833      	ldr	r0, [pc, #204]	; (8007f0c <_printf_i+0x240>)
 8007e40:	2778      	movs	r7, #120	; 0x78
 8007e42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	6829      	ldr	r1, [r5, #0]
 8007e4a:	061f      	lsls	r7, r3, #24
 8007e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e50:	d402      	bmi.n	8007e58 <_printf_i+0x18c>
 8007e52:	065f      	lsls	r7, r3, #25
 8007e54:	bf48      	it	mi
 8007e56:	b2b6      	uxthmi	r6, r6
 8007e58:	07df      	lsls	r7, r3, #31
 8007e5a:	bf48      	it	mi
 8007e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e60:	6029      	str	r1, [r5, #0]
 8007e62:	bf48      	it	mi
 8007e64:	6023      	strmi	r3, [r4, #0]
 8007e66:	b91e      	cbnz	r6, 8007e70 <_printf_i+0x1a4>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	f023 0320 	bic.w	r3, r3, #32
 8007e6e:	6023      	str	r3, [r4, #0]
 8007e70:	2310      	movs	r3, #16
 8007e72:	e7a7      	b.n	8007dc4 <_printf_i+0xf8>
 8007e74:	4824      	ldr	r0, [pc, #144]	; (8007f08 <_printf_i+0x23c>)
 8007e76:	e7e4      	b.n	8007e42 <_printf_i+0x176>
 8007e78:	4615      	mov	r5, r2
 8007e7a:	e7bd      	b.n	8007df8 <_printf_i+0x12c>
 8007e7c:	682b      	ldr	r3, [r5, #0]
 8007e7e:	6826      	ldr	r6, [r4, #0]
 8007e80:	6961      	ldr	r1, [r4, #20]
 8007e82:	1d18      	adds	r0, r3, #4
 8007e84:	6028      	str	r0, [r5, #0]
 8007e86:	0635      	lsls	r5, r6, #24
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	d501      	bpl.n	8007e90 <_printf_i+0x1c4>
 8007e8c:	6019      	str	r1, [r3, #0]
 8007e8e:	e002      	b.n	8007e96 <_printf_i+0x1ca>
 8007e90:	0670      	lsls	r0, r6, #25
 8007e92:	d5fb      	bpl.n	8007e8c <_printf_i+0x1c0>
 8007e94:	8019      	strh	r1, [r3, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	4615      	mov	r5, r2
 8007e9c:	e7bc      	b.n	8007e18 <_printf_i+0x14c>
 8007e9e:	682b      	ldr	r3, [r5, #0]
 8007ea0:	1d1a      	adds	r2, r3, #4
 8007ea2:	602a      	str	r2, [r5, #0]
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7f8 f990 	bl	80001d0 <memchr>
 8007eb0:	b108      	cbz	r0, 8007eb6 <_printf_i+0x1ea>
 8007eb2:	1b40      	subs	r0, r0, r5
 8007eb4:	6060      	str	r0, [r4, #4]
 8007eb6:	6863      	ldr	r3, [r4, #4]
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec0:	e7aa      	b.n	8007e18 <_printf_i+0x14c>
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	47d0      	blx	sl
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d0ad      	beq.n	8007e2c <_printf_i+0x160>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	079b      	lsls	r3, r3, #30
 8007ed4:	d413      	bmi.n	8007efe <_printf_i+0x232>
 8007ed6:	68e0      	ldr	r0, [r4, #12]
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	4298      	cmp	r0, r3
 8007edc:	bfb8      	it	lt
 8007ede:	4618      	movlt	r0, r3
 8007ee0:	e7a6      	b.n	8007e30 <_printf_i+0x164>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	47d0      	blx	sl
 8007eec:	3001      	adds	r0, #1
 8007eee:	d09d      	beq.n	8007e2c <_printf_i+0x160>
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	9903      	ldr	r1, [sp, #12]
 8007ef6:	1a5b      	subs	r3, r3, r1
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dcf2      	bgt.n	8007ee2 <_printf_i+0x216>
 8007efc:	e7eb      	b.n	8007ed6 <_printf_i+0x20a>
 8007efe:	2500      	movs	r5, #0
 8007f00:	f104 0619 	add.w	r6, r4, #25
 8007f04:	e7f5      	b.n	8007ef2 <_printf_i+0x226>
 8007f06:	bf00      	nop
 8007f08:	0800c966 	.word	0x0800c966
 8007f0c:	0800c977 	.word	0x0800c977

08007f10 <_scanf_float>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	b087      	sub	sp, #28
 8007f16:	4617      	mov	r7, r2
 8007f18:	9303      	str	r3, [sp, #12]
 8007f1a:	688b      	ldr	r3, [r1, #8]
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f22:	bf83      	ittte	hi
 8007f24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f28:	195b      	addhi	r3, r3, r5
 8007f2a:	9302      	strhi	r3, [sp, #8]
 8007f2c:	2300      	movls	r3, #0
 8007f2e:	bf86      	itte	hi
 8007f30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f34:	608b      	strhi	r3, [r1, #8]
 8007f36:	9302      	strls	r3, [sp, #8]
 8007f38:	680b      	ldr	r3, [r1, #0]
 8007f3a:	468b      	mov	fp, r1
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f42:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f4a:	4680      	mov	r8, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	465e      	mov	r6, fp
 8007f50:	46aa      	mov	sl, r5
 8007f52:	46a9      	mov	r9, r5
 8007f54:	9501      	str	r5, [sp, #4]
 8007f56:	68a2      	ldr	r2, [r4, #8]
 8007f58:	b152      	cbz	r2, 8007f70 <_scanf_float+0x60>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b4e      	cmp	r3, #78	; 0x4e
 8007f60:	d864      	bhi.n	800802c <_scanf_float+0x11c>
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d83c      	bhi.n	8007fe0 <_scanf_float+0xd0>
 8007f66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007f6a:	b2c8      	uxtb	r0, r1
 8007f6c:	280e      	cmp	r0, #14
 8007f6e:	d93a      	bls.n	8007fe6 <_scanf_float+0xd6>
 8007f70:	f1b9 0f00 	cmp.w	r9, #0
 8007f74:	d003      	beq.n	8007f7e <_scanf_float+0x6e>
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f82:	f1ba 0f01 	cmp.w	sl, #1
 8007f86:	f200 8113 	bhi.w	80081b0 <_scanf_float+0x2a0>
 8007f8a:	455e      	cmp	r6, fp
 8007f8c:	f200 8105 	bhi.w	800819a <_scanf_float+0x28a>
 8007f90:	2501      	movs	r5, #1
 8007f92:	4628      	mov	r0, r5
 8007f94:	b007      	add	sp, #28
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f9e:	2a0d      	cmp	r2, #13
 8007fa0:	d8e6      	bhi.n	8007f70 <_scanf_float+0x60>
 8007fa2:	a101      	add	r1, pc, #4	; (adr r1, 8007fa8 <_scanf_float+0x98>)
 8007fa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fa8:	080080e7 	.word	0x080080e7
 8007fac:	08007f71 	.word	0x08007f71
 8007fb0:	08007f71 	.word	0x08007f71
 8007fb4:	08007f71 	.word	0x08007f71
 8007fb8:	08008147 	.word	0x08008147
 8007fbc:	0800811f 	.word	0x0800811f
 8007fc0:	08007f71 	.word	0x08007f71
 8007fc4:	08007f71 	.word	0x08007f71
 8007fc8:	080080f5 	.word	0x080080f5
 8007fcc:	08007f71 	.word	0x08007f71
 8007fd0:	08007f71 	.word	0x08007f71
 8007fd4:	08007f71 	.word	0x08007f71
 8007fd8:	08007f71 	.word	0x08007f71
 8007fdc:	080080ad 	.word	0x080080ad
 8007fe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007fe4:	e7db      	b.n	8007f9e <_scanf_float+0x8e>
 8007fe6:	290e      	cmp	r1, #14
 8007fe8:	d8c2      	bhi.n	8007f70 <_scanf_float+0x60>
 8007fea:	a001      	add	r0, pc, #4	; (adr r0, 8007ff0 <_scanf_float+0xe0>)
 8007fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ff0:	0800809f 	.word	0x0800809f
 8007ff4:	08007f71 	.word	0x08007f71
 8007ff8:	0800809f 	.word	0x0800809f
 8007ffc:	08008133 	.word	0x08008133
 8008000:	08007f71 	.word	0x08007f71
 8008004:	0800804d 	.word	0x0800804d
 8008008:	08008089 	.word	0x08008089
 800800c:	08008089 	.word	0x08008089
 8008010:	08008089 	.word	0x08008089
 8008014:	08008089 	.word	0x08008089
 8008018:	08008089 	.word	0x08008089
 800801c:	08008089 	.word	0x08008089
 8008020:	08008089 	.word	0x08008089
 8008024:	08008089 	.word	0x08008089
 8008028:	08008089 	.word	0x08008089
 800802c:	2b6e      	cmp	r3, #110	; 0x6e
 800802e:	d809      	bhi.n	8008044 <_scanf_float+0x134>
 8008030:	2b60      	cmp	r3, #96	; 0x60
 8008032:	d8b2      	bhi.n	8007f9a <_scanf_float+0x8a>
 8008034:	2b54      	cmp	r3, #84	; 0x54
 8008036:	d077      	beq.n	8008128 <_scanf_float+0x218>
 8008038:	2b59      	cmp	r3, #89	; 0x59
 800803a:	d199      	bne.n	8007f70 <_scanf_float+0x60>
 800803c:	2d07      	cmp	r5, #7
 800803e:	d197      	bne.n	8007f70 <_scanf_float+0x60>
 8008040:	2508      	movs	r5, #8
 8008042:	e029      	b.n	8008098 <_scanf_float+0x188>
 8008044:	2b74      	cmp	r3, #116	; 0x74
 8008046:	d06f      	beq.n	8008128 <_scanf_float+0x218>
 8008048:	2b79      	cmp	r3, #121	; 0x79
 800804a:	e7f6      	b.n	800803a <_scanf_float+0x12a>
 800804c:	6821      	ldr	r1, [r4, #0]
 800804e:	05c8      	lsls	r0, r1, #23
 8008050:	d51a      	bpl.n	8008088 <_scanf_float+0x178>
 8008052:	9b02      	ldr	r3, [sp, #8]
 8008054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008058:	6021      	str	r1, [r4, #0]
 800805a:	f109 0901 	add.w	r9, r9, #1
 800805e:	b11b      	cbz	r3, 8008068 <_scanf_float+0x158>
 8008060:	3b01      	subs	r3, #1
 8008062:	3201      	adds	r2, #1
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	60a2      	str	r2, [r4, #8]
 8008068:	68a3      	ldr	r3, [r4, #8]
 800806a:	3b01      	subs	r3, #1
 800806c:	60a3      	str	r3, [r4, #8]
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	3301      	adds	r3, #1
 8008072:	6123      	str	r3, [r4, #16]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3b01      	subs	r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	607b      	str	r3, [r7, #4]
 800807c:	f340 8084 	ble.w	8008188 <_scanf_float+0x278>
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	603b      	str	r3, [r7, #0]
 8008086:	e766      	b.n	8007f56 <_scanf_float+0x46>
 8008088:	eb1a 0f05 	cmn.w	sl, r5
 800808c:	f47f af70 	bne.w	8007f70 <_scanf_float+0x60>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	f806 3b01 	strb.w	r3, [r6], #1
 800809c:	e7e4      	b.n	8008068 <_scanf_float+0x158>
 800809e:	6822      	ldr	r2, [r4, #0]
 80080a0:	0610      	lsls	r0, r2, #24
 80080a2:	f57f af65 	bpl.w	8007f70 <_scanf_float+0x60>
 80080a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080aa:	e7f4      	b.n	8008096 <_scanf_float+0x186>
 80080ac:	f1ba 0f00 	cmp.w	sl, #0
 80080b0:	d10e      	bne.n	80080d0 <_scanf_float+0x1c0>
 80080b2:	f1b9 0f00 	cmp.w	r9, #0
 80080b6:	d10e      	bne.n	80080d6 <_scanf_float+0x1c6>
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080c2:	d108      	bne.n	80080d6 <_scanf_float+0x1c6>
 80080c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	f04f 0a01 	mov.w	sl, #1
 80080ce:	e7e3      	b.n	8008098 <_scanf_float+0x188>
 80080d0:	f1ba 0f02 	cmp.w	sl, #2
 80080d4:	d055      	beq.n	8008182 <_scanf_float+0x272>
 80080d6:	2d01      	cmp	r5, #1
 80080d8:	d002      	beq.n	80080e0 <_scanf_float+0x1d0>
 80080da:	2d04      	cmp	r5, #4
 80080dc:	f47f af48 	bne.w	8007f70 <_scanf_float+0x60>
 80080e0:	3501      	adds	r5, #1
 80080e2:	b2ed      	uxtb	r5, r5
 80080e4:	e7d8      	b.n	8008098 <_scanf_float+0x188>
 80080e6:	f1ba 0f01 	cmp.w	sl, #1
 80080ea:	f47f af41 	bne.w	8007f70 <_scanf_float+0x60>
 80080ee:	f04f 0a02 	mov.w	sl, #2
 80080f2:	e7d1      	b.n	8008098 <_scanf_float+0x188>
 80080f4:	b97d      	cbnz	r5, 8008116 <_scanf_float+0x206>
 80080f6:	f1b9 0f00 	cmp.w	r9, #0
 80080fa:	f47f af3c 	bne.w	8007f76 <_scanf_float+0x66>
 80080fe:	6822      	ldr	r2, [r4, #0]
 8008100:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008104:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008108:	f47f af39 	bne.w	8007f7e <_scanf_float+0x6e>
 800810c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008110:	6022      	str	r2, [r4, #0]
 8008112:	2501      	movs	r5, #1
 8008114:	e7c0      	b.n	8008098 <_scanf_float+0x188>
 8008116:	2d03      	cmp	r5, #3
 8008118:	d0e2      	beq.n	80080e0 <_scanf_float+0x1d0>
 800811a:	2d05      	cmp	r5, #5
 800811c:	e7de      	b.n	80080dc <_scanf_float+0x1cc>
 800811e:	2d02      	cmp	r5, #2
 8008120:	f47f af26 	bne.w	8007f70 <_scanf_float+0x60>
 8008124:	2503      	movs	r5, #3
 8008126:	e7b7      	b.n	8008098 <_scanf_float+0x188>
 8008128:	2d06      	cmp	r5, #6
 800812a:	f47f af21 	bne.w	8007f70 <_scanf_float+0x60>
 800812e:	2507      	movs	r5, #7
 8008130:	e7b2      	b.n	8008098 <_scanf_float+0x188>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	0591      	lsls	r1, r2, #22
 8008136:	f57f af1b 	bpl.w	8007f70 <_scanf_float+0x60>
 800813a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800813e:	6022      	str	r2, [r4, #0]
 8008140:	f8cd 9004 	str.w	r9, [sp, #4]
 8008144:	e7a8      	b.n	8008098 <_scanf_float+0x188>
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800814c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008150:	d006      	beq.n	8008160 <_scanf_float+0x250>
 8008152:	0550      	lsls	r0, r2, #21
 8008154:	f57f af0c 	bpl.w	8007f70 <_scanf_float+0x60>
 8008158:	f1b9 0f00 	cmp.w	r9, #0
 800815c:	f43f af0f 	beq.w	8007f7e <_scanf_float+0x6e>
 8008160:	0591      	lsls	r1, r2, #22
 8008162:	bf58      	it	pl
 8008164:	9901      	ldrpl	r1, [sp, #4]
 8008166:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800816a:	bf58      	it	pl
 800816c:	eba9 0101 	subpl.w	r1, r9, r1
 8008170:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008174:	bf58      	it	pl
 8008176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	f04f 0900 	mov.w	r9, #0
 8008180:	e78a      	b.n	8008098 <_scanf_float+0x188>
 8008182:	f04f 0a03 	mov.w	sl, #3
 8008186:	e787      	b.n	8008098 <_scanf_float+0x188>
 8008188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800818c:	4639      	mov	r1, r7
 800818e:	4640      	mov	r0, r8
 8008190:	4798      	blx	r3
 8008192:	2800      	cmp	r0, #0
 8008194:	f43f aedf 	beq.w	8007f56 <_scanf_float+0x46>
 8008198:	e6ea      	b.n	8007f70 <_scanf_float+0x60>
 800819a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800819e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081a2:	463a      	mov	r2, r7
 80081a4:	4640      	mov	r0, r8
 80081a6:	4798      	blx	r3
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	e6ec      	b.n	8007f8a <_scanf_float+0x7a>
 80081b0:	1e6b      	subs	r3, r5, #1
 80081b2:	2b06      	cmp	r3, #6
 80081b4:	d825      	bhi.n	8008202 <_scanf_float+0x2f2>
 80081b6:	2d02      	cmp	r5, #2
 80081b8:	d836      	bhi.n	8008228 <_scanf_float+0x318>
 80081ba:	455e      	cmp	r6, fp
 80081bc:	f67f aee8 	bls.w	8007f90 <_scanf_float+0x80>
 80081c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081c8:	463a      	mov	r2, r7
 80081ca:	4640      	mov	r0, r8
 80081cc:	4798      	blx	r3
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	e7f1      	b.n	80081ba <_scanf_float+0x2aa>
 80081d6:	9802      	ldr	r0, [sp, #8]
 80081d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80081e0:	9002      	str	r0, [sp, #8]
 80081e2:	463a      	mov	r2, r7
 80081e4:	4640      	mov	r0, r8
 80081e6:	4798      	blx	r3
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081f2:	fa5f fa8a 	uxtb.w	sl, sl
 80081f6:	f1ba 0f02 	cmp.w	sl, #2
 80081fa:	d1ec      	bne.n	80081d6 <_scanf_float+0x2c6>
 80081fc:	3d03      	subs	r5, #3
 80081fe:	b2ed      	uxtb	r5, r5
 8008200:	1b76      	subs	r6, r6, r5
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	05da      	lsls	r2, r3, #23
 8008206:	d52f      	bpl.n	8008268 <_scanf_float+0x358>
 8008208:	055b      	lsls	r3, r3, #21
 800820a:	d510      	bpl.n	800822e <_scanf_float+0x31e>
 800820c:	455e      	cmp	r6, fp
 800820e:	f67f aebf 	bls.w	8007f90 <_scanf_float+0x80>
 8008212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800821a:	463a      	mov	r2, r7
 800821c:	4640      	mov	r0, r8
 800821e:	4798      	blx	r3
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	3b01      	subs	r3, #1
 8008224:	6123      	str	r3, [r4, #16]
 8008226:	e7f1      	b.n	800820c <_scanf_float+0x2fc>
 8008228:	46aa      	mov	sl, r5
 800822a:	9602      	str	r6, [sp, #8]
 800822c:	e7df      	b.n	80081ee <_scanf_float+0x2de>
 800822e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	2965      	cmp	r1, #101	; 0x65
 8008236:	f103 33ff 	add.w	r3, r3, #4294967295
 800823a:	f106 35ff 	add.w	r5, r6, #4294967295
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	d00c      	beq.n	800825c <_scanf_float+0x34c>
 8008242:	2945      	cmp	r1, #69	; 0x45
 8008244:	d00a      	beq.n	800825c <_scanf_float+0x34c>
 8008246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800824a:	463a      	mov	r2, r7
 800824c:	4640      	mov	r0, r8
 800824e:	4798      	blx	r3
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008256:	3b01      	subs	r3, #1
 8008258:	1eb5      	subs	r5, r6, #2
 800825a:	6123      	str	r3, [r4, #16]
 800825c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008260:	463a      	mov	r2, r7
 8008262:	4640      	mov	r0, r8
 8008264:	4798      	blx	r3
 8008266:	462e      	mov	r6, r5
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	f015 0510 	ands.w	r5, r5, #16
 800826e:	d158      	bne.n	8008322 <_scanf_float+0x412>
 8008270:	7035      	strb	r5, [r6, #0]
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d11c      	bne.n	80082b8 <_scanf_float+0x3a8>
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	454b      	cmp	r3, r9
 8008282:	eba3 0209 	sub.w	r2, r3, r9
 8008286:	d124      	bne.n	80082d2 <_scanf_float+0x3c2>
 8008288:	2200      	movs	r2, #0
 800828a:	4659      	mov	r1, fp
 800828c:	4640      	mov	r0, r8
 800828e:	f002 fc63 	bl	800ab58 <_strtod_r>
 8008292:	9b03      	ldr	r3, [sp, #12]
 8008294:	6821      	ldr	r1, [r4, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f011 0f02 	tst.w	r1, #2
 800829c:	ec57 6b10 	vmov	r6, r7, d0
 80082a0:	f103 0204 	add.w	r2, r3, #4
 80082a4:	d020      	beq.n	80082e8 <_scanf_float+0x3d8>
 80082a6:	9903      	ldr	r1, [sp, #12]
 80082a8:	600a      	str	r2, [r1, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	e9c3 6700 	strd	r6, r7, [r3]
 80082b0:	68e3      	ldr	r3, [r4, #12]
 80082b2:	3301      	adds	r3, #1
 80082b4:	60e3      	str	r3, [r4, #12]
 80082b6:	e66c      	b.n	8007f92 <_scanf_float+0x82>
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0e4      	beq.n	8008288 <_scanf_float+0x378>
 80082be:	9905      	ldr	r1, [sp, #20]
 80082c0:	230a      	movs	r3, #10
 80082c2:	462a      	mov	r2, r5
 80082c4:	3101      	adds	r1, #1
 80082c6:	4640      	mov	r0, r8
 80082c8:	f002 fcce 	bl	800ac68 <_strtol_r>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	9e05      	ldr	r6, [sp, #20]
 80082d0:	1ac2      	subs	r2, r0, r3
 80082d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80082d6:	429e      	cmp	r6, r3
 80082d8:	bf28      	it	cs
 80082da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80082de:	4912      	ldr	r1, [pc, #72]	; (8008328 <_scanf_float+0x418>)
 80082e0:	4630      	mov	r0, r6
 80082e2:	f000 f91b 	bl	800851c <siprintf>
 80082e6:	e7cf      	b.n	8008288 <_scanf_float+0x378>
 80082e8:	f011 0f04 	tst.w	r1, #4
 80082ec:	9903      	ldr	r1, [sp, #12]
 80082ee:	600a      	str	r2, [r1, #0]
 80082f0:	d1db      	bne.n	80082aa <_scanf_float+0x39a>
 80082f2:	f8d3 8000 	ldr.w	r8, [r3]
 80082f6:	ee10 2a10 	vmov	r2, s0
 80082fa:	ee10 0a10 	vmov	r0, s0
 80082fe:	463b      	mov	r3, r7
 8008300:	4639      	mov	r1, r7
 8008302:	f7f8 fc13 	bl	8000b2c <__aeabi_dcmpun>
 8008306:	b128      	cbz	r0, 8008314 <_scanf_float+0x404>
 8008308:	4808      	ldr	r0, [pc, #32]	; (800832c <_scanf_float+0x41c>)
 800830a:	f000 f9eb 	bl	80086e4 <nanf>
 800830e:	ed88 0a00 	vstr	s0, [r8]
 8008312:	e7cd      	b.n	80082b0 <_scanf_float+0x3a0>
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 fc66 	bl	8000be8 <__aeabi_d2f>
 800831c:	f8c8 0000 	str.w	r0, [r8]
 8008320:	e7c6      	b.n	80082b0 <_scanf_float+0x3a0>
 8008322:	2500      	movs	r5, #0
 8008324:	e635      	b.n	8007f92 <_scanf_float+0x82>
 8008326:	bf00      	nop
 8008328:	0800c988 	.word	0x0800c988
 800832c:	0800cd1d 	.word	0x0800cd1d

08008330 <std>:
 8008330:	2300      	movs	r3, #0
 8008332:	b510      	push	{r4, lr}
 8008334:	4604      	mov	r4, r0
 8008336:	e9c0 3300 	strd	r3, r3, [r0]
 800833a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800833e:	6083      	str	r3, [r0, #8]
 8008340:	8181      	strh	r1, [r0, #12]
 8008342:	6643      	str	r3, [r0, #100]	; 0x64
 8008344:	81c2      	strh	r2, [r0, #14]
 8008346:	6183      	str	r3, [r0, #24]
 8008348:	4619      	mov	r1, r3
 800834a:	2208      	movs	r2, #8
 800834c:	305c      	adds	r0, #92	; 0x5c
 800834e:	f000 f948 	bl	80085e2 <memset>
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <std+0x58>)
 8008354:	6263      	str	r3, [r4, #36]	; 0x24
 8008356:	4b0d      	ldr	r3, [pc, #52]	; (800838c <std+0x5c>)
 8008358:	62a3      	str	r3, [r4, #40]	; 0x28
 800835a:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <std+0x60>)
 800835c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800835e:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <std+0x64>)
 8008360:	6323      	str	r3, [r4, #48]	; 0x30
 8008362:	4b0d      	ldr	r3, [pc, #52]	; (8008398 <std+0x68>)
 8008364:	6224      	str	r4, [r4, #32]
 8008366:	429c      	cmp	r4, r3
 8008368:	d006      	beq.n	8008378 <std+0x48>
 800836a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800836e:	4294      	cmp	r4, r2
 8008370:	d002      	beq.n	8008378 <std+0x48>
 8008372:	33d0      	adds	r3, #208	; 0xd0
 8008374:	429c      	cmp	r4, r3
 8008376:	d105      	bne.n	8008384 <std+0x54>
 8008378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800837c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008380:	f000 b9ac 	b.w	80086dc <__retarget_lock_init_recursive>
 8008384:	bd10      	pop	{r4, pc}
 8008386:	bf00      	nop
 8008388:	0800855d 	.word	0x0800855d
 800838c:	0800857f 	.word	0x0800857f
 8008390:	080085b7 	.word	0x080085b7
 8008394:	080085db 	.word	0x080085db
 8008398:	200003b4 	.word	0x200003b4

0800839c <stdio_exit_handler>:
 800839c:	4a02      	ldr	r2, [pc, #8]	; (80083a8 <stdio_exit_handler+0xc>)
 800839e:	4903      	ldr	r1, [pc, #12]	; (80083ac <stdio_exit_handler+0x10>)
 80083a0:	4803      	ldr	r0, [pc, #12]	; (80083b0 <stdio_exit_handler+0x14>)
 80083a2:	f000 b869 	b.w	8008478 <_fwalk_sglue>
 80083a6:	bf00      	nop
 80083a8:	2000000c 	.word	0x2000000c
 80083ac:	0800b029 	.word	0x0800b029
 80083b0:	20000018 	.word	0x20000018

080083b4 <cleanup_stdio>:
 80083b4:	6841      	ldr	r1, [r0, #4]
 80083b6:	4b0c      	ldr	r3, [pc, #48]	; (80083e8 <cleanup_stdio+0x34>)
 80083b8:	4299      	cmp	r1, r3
 80083ba:	b510      	push	{r4, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	d001      	beq.n	80083c4 <cleanup_stdio+0x10>
 80083c0:	f002 fe32 	bl	800b028 <_fflush_r>
 80083c4:	68a1      	ldr	r1, [r4, #8]
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <cleanup_stdio+0x38>)
 80083c8:	4299      	cmp	r1, r3
 80083ca:	d002      	beq.n	80083d2 <cleanup_stdio+0x1e>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f002 fe2b 	bl	800b028 <_fflush_r>
 80083d2:	68e1      	ldr	r1, [r4, #12]
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <cleanup_stdio+0x3c>)
 80083d6:	4299      	cmp	r1, r3
 80083d8:	d004      	beq.n	80083e4 <cleanup_stdio+0x30>
 80083da:	4620      	mov	r0, r4
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	f002 be22 	b.w	800b028 <_fflush_r>
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	bf00      	nop
 80083e8:	200003b4 	.word	0x200003b4
 80083ec:	2000041c 	.word	0x2000041c
 80083f0:	20000484 	.word	0x20000484

080083f4 <global_stdio_init.part.0>:
 80083f4:	b510      	push	{r4, lr}
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <global_stdio_init.part.0+0x30>)
 80083f8:	4c0b      	ldr	r4, [pc, #44]	; (8008428 <global_stdio_init.part.0+0x34>)
 80083fa:	4a0c      	ldr	r2, [pc, #48]	; (800842c <global_stdio_init.part.0+0x38>)
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	4620      	mov	r0, r4
 8008400:	2200      	movs	r2, #0
 8008402:	2104      	movs	r1, #4
 8008404:	f7ff ff94 	bl	8008330 <std>
 8008408:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800840c:	2201      	movs	r2, #1
 800840e:	2109      	movs	r1, #9
 8008410:	f7ff ff8e 	bl	8008330 <std>
 8008414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008418:	2202      	movs	r2, #2
 800841a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800841e:	2112      	movs	r1, #18
 8008420:	f7ff bf86 	b.w	8008330 <std>
 8008424:	200004ec 	.word	0x200004ec
 8008428:	200003b4 	.word	0x200003b4
 800842c:	0800839d 	.word	0x0800839d

08008430 <__sfp_lock_acquire>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sfp_lock_acquire+0x8>)
 8008432:	f000 b954 	b.w	80086de <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	200004f5 	.word	0x200004f5

0800843c <__sfp_lock_release>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__sfp_lock_release+0x8>)
 800843e:	f000 b94f 	b.w	80086e0 <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	200004f5 	.word	0x200004f5

08008448 <__sinit>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	f7ff fff0 	bl	8008430 <__sfp_lock_acquire>
 8008450:	6a23      	ldr	r3, [r4, #32]
 8008452:	b11b      	cbz	r3, 800845c <__sinit+0x14>
 8008454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008458:	f7ff bff0 	b.w	800843c <__sfp_lock_release>
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <__sinit+0x28>)
 800845e:	6223      	str	r3, [r4, #32]
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <__sinit+0x2c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1f5      	bne.n	8008454 <__sinit+0xc>
 8008468:	f7ff ffc4 	bl	80083f4 <global_stdio_init.part.0>
 800846c:	e7f2      	b.n	8008454 <__sinit+0xc>
 800846e:	bf00      	nop
 8008470:	080083b5 	.word	0x080083b5
 8008474:	200004ec 	.word	0x200004ec

08008478 <_fwalk_sglue>:
 8008478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800847c:	4607      	mov	r7, r0
 800847e:	4688      	mov	r8, r1
 8008480:	4614      	mov	r4, r2
 8008482:	2600      	movs	r6, #0
 8008484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008488:	f1b9 0901 	subs.w	r9, r9, #1
 800848c:	d505      	bpl.n	800849a <_fwalk_sglue+0x22>
 800848e:	6824      	ldr	r4, [r4, #0]
 8008490:	2c00      	cmp	r4, #0
 8008492:	d1f7      	bne.n	8008484 <_fwalk_sglue+0xc>
 8008494:	4630      	mov	r0, r6
 8008496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800849a:	89ab      	ldrh	r3, [r5, #12]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d907      	bls.n	80084b0 <_fwalk_sglue+0x38>
 80084a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084a4:	3301      	adds	r3, #1
 80084a6:	d003      	beq.n	80084b0 <_fwalk_sglue+0x38>
 80084a8:	4629      	mov	r1, r5
 80084aa:	4638      	mov	r0, r7
 80084ac:	47c0      	blx	r8
 80084ae:	4306      	orrs	r6, r0
 80084b0:	3568      	adds	r5, #104	; 0x68
 80084b2:	e7e9      	b.n	8008488 <_fwalk_sglue+0x10>

080084b4 <sniprintf>:
 80084b4:	b40c      	push	{r2, r3}
 80084b6:	b530      	push	{r4, r5, lr}
 80084b8:	4b17      	ldr	r3, [pc, #92]	; (8008518 <sniprintf+0x64>)
 80084ba:	1e0c      	subs	r4, r1, #0
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	b09d      	sub	sp, #116	; 0x74
 80084c0:	da08      	bge.n	80084d4 <sniprintf+0x20>
 80084c2:	238b      	movs	r3, #139	; 0x8b
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	b01d      	add	sp, #116	; 0x74
 80084cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084d0:	b002      	add	sp, #8
 80084d2:	4770      	bx	lr
 80084d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80084d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084dc:	bf14      	ite	ne
 80084de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084e2:	4623      	moveq	r3, r4
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80084ec:	9002      	str	r0, [sp, #8]
 80084ee:	9006      	str	r0, [sp, #24]
 80084f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084f6:	ab21      	add	r3, sp, #132	; 0x84
 80084f8:	a902      	add	r1, sp, #8
 80084fa:	4628      	mov	r0, r5
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	f002 fc0f 	bl	800ad20 <_svfiprintf_r>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	bfbc      	itt	lt
 8008506:	238b      	movlt	r3, #139	; 0x8b
 8008508:	602b      	strlt	r3, [r5, #0]
 800850a:	2c00      	cmp	r4, #0
 800850c:	d0dd      	beq.n	80084ca <sniprintf+0x16>
 800850e:	9b02      	ldr	r3, [sp, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e7d9      	b.n	80084ca <sniprintf+0x16>
 8008516:	bf00      	nop
 8008518:	20000064 	.word	0x20000064

0800851c <siprintf>:
 800851c:	b40e      	push	{r1, r2, r3}
 800851e:	b500      	push	{lr}
 8008520:	b09c      	sub	sp, #112	; 0x70
 8008522:	ab1d      	add	r3, sp, #116	; 0x74
 8008524:	9002      	str	r0, [sp, #8]
 8008526:	9006      	str	r0, [sp, #24]
 8008528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <siprintf+0x38>)
 800852e:	9107      	str	r1, [sp, #28]
 8008530:	9104      	str	r1, [sp, #16]
 8008532:	4909      	ldr	r1, [pc, #36]	; (8008558 <siprintf+0x3c>)
 8008534:	f853 2b04 	ldr.w	r2, [r3], #4
 8008538:	9105      	str	r1, [sp, #20]
 800853a:	6800      	ldr	r0, [r0, #0]
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	a902      	add	r1, sp, #8
 8008540:	f002 fbee 	bl	800ad20 <_svfiprintf_r>
 8008544:	9b02      	ldr	r3, [sp, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	b01c      	add	sp, #112	; 0x70
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	b003      	add	sp, #12
 8008552:	4770      	bx	lr
 8008554:	20000064 	.word	0x20000064
 8008558:	ffff0208 	.word	0xffff0208

0800855c <__sread>:
 800855c:	b510      	push	{r4, lr}
 800855e:	460c      	mov	r4, r1
 8008560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008564:	f000 f86c 	bl	8008640 <_read_r>
 8008568:	2800      	cmp	r0, #0
 800856a:	bfab      	itete	ge
 800856c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800856e:	89a3      	ldrhlt	r3, [r4, #12]
 8008570:	181b      	addge	r3, r3, r0
 8008572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008576:	bfac      	ite	ge
 8008578:	6563      	strge	r3, [r4, #84]	; 0x54
 800857a:	81a3      	strhlt	r3, [r4, #12]
 800857c:	bd10      	pop	{r4, pc}

0800857e <__swrite>:
 800857e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008582:	461f      	mov	r7, r3
 8008584:	898b      	ldrh	r3, [r1, #12]
 8008586:	05db      	lsls	r3, r3, #23
 8008588:	4605      	mov	r5, r0
 800858a:	460c      	mov	r4, r1
 800858c:	4616      	mov	r6, r2
 800858e:	d505      	bpl.n	800859c <__swrite+0x1e>
 8008590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008594:	2302      	movs	r3, #2
 8008596:	2200      	movs	r2, #0
 8008598:	f000 f840 	bl	800861c <_lseek_r>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	4628      	mov	r0, r5
 80085ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085b2:	f000 b857 	b.w	8008664 <_write_r>

080085b6 <__sseek>:
 80085b6:	b510      	push	{r4, lr}
 80085b8:	460c      	mov	r4, r1
 80085ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085be:	f000 f82d 	bl	800861c <_lseek_r>
 80085c2:	1c43      	adds	r3, r0, #1
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	bf15      	itete	ne
 80085c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085d2:	81a3      	strheq	r3, [r4, #12]
 80085d4:	bf18      	it	ne
 80085d6:	81a3      	strhne	r3, [r4, #12]
 80085d8:	bd10      	pop	{r4, pc}

080085da <__sclose>:
 80085da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085de:	f000 b80d 	b.w	80085fc <_close_r>

080085e2 <memset>:
 80085e2:	4402      	add	r2, r0
 80085e4:	4603      	mov	r3, r0
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d100      	bne.n	80085ec <memset+0xa>
 80085ea:	4770      	bx	lr
 80085ec:	f803 1b01 	strb.w	r1, [r3], #1
 80085f0:	e7f9      	b.n	80085e6 <memset+0x4>
	...

080085f4 <_localeconv_r>:
 80085f4:	4800      	ldr	r0, [pc, #0]	; (80085f8 <_localeconv_r+0x4>)
 80085f6:	4770      	bx	lr
 80085f8:	20000158 	.word	0x20000158

080085fc <_close_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d06      	ldr	r5, [pc, #24]	; (8008618 <_close_r+0x1c>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	f7f9 fe0a 	bl	8002220 <_close>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_close_r+0x1a>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_close_r+0x1a>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	200004f0 	.word	0x200004f0

0800861c <_lseek_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4d07      	ldr	r5, [pc, #28]	; (800863c <_lseek_r+0x20>)
 8008620:	4604      	mov	r4, r0
 8008622:	4608      	mov	r0, r1
 8008624:	4611      	mov	r1, r2
 8008626:	2200      	movs	r2, #0
 8008628:	602a      	str	r2, [r5, #0]
 800862a:	461a      	mov	r2, r3
 800862c:	f7f9 fe1f 	bl	800226e <_lseek>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d102      	bne.n	800863a <_lseek_r+0x1e>
 8008634:	682b      	ldr	r3, [r5, #0]
 8008636:	b103      	cbz	r3, 800863a <_lseek_r+0x1e>
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	200004f0 	.word	0x200004f0

08008640 <_read_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d07      	ldr	r5, [pc, #28]	; (8008660 <_read_r+0x20>)
 8008644:	4604      	mov	r4, r0
 8008646:	4608      	mov	r0, r1
 8008648:	4611      	mov	r1, r2
 800864a:	2200      	movs	r2, #0
 800864c:	602a      	str	r2, [r5, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	f7f9 fda6 	bl	80021a0 <_read>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_read_r+0x1e>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_read_r+0x1e>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	200004f0 	.word	0x200004f0

08008664 <_write_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	; (8008684 <_write_r+0x20>)
 8008668:	4604      	mov	r4, r0
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f7f9 fdb2 	bl	80021dc <_write>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_write_r+0x1e>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_write_r+0x1e>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	200004f0 	.word	0x200004f0

08008688 <__errno>:
 8008688:	4b01      	ldr	r3, [pc, #4]	; (8008690 <__errno+0x8>)
 800868a:	6818      	ldr	r0, [r3, #0]
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20000064 	.word	0x20000064

08008694 <__libc_init_array>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	4d0d      	ldr	r5, [pc, #52]	; (80086cc <__libc_init_array+0x38>)
 8008698:	4c0d      	ldr	r4, [pc, #52]	; (80086d0 <__libc_init_array+0x3c>)
 800869a:	1b64      	subs	r4, r4, r5
 800869c:	10a4      	asrs	r4, r4, #2
 800869e:	2600      	movs	r6, #0
 80086a0:	42a6      	cmp	r6, r4
 80086a2:	d109      	bne.n	80086b8 <__libc_init_array+0x24>
 80086a4:	4d0b      	ldr	r5, [pc, #44]	; (80086d4 <__libc_init_array+0x40>)
 80086a6:	4c0c      	ldr	r4, [pc, #48]	; (80086d8 <__libc_init_array+0x44>)
 80086a8:	f003 fbd6 	bl	800be58 <_init>
 80086ac:	1b64      	subs	r4, r4, r5
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	2600      	movs	r6, #0
 80086b2:	42a6      	cmp	r6, r4
 80086b4:	d105      	bne.n	80086c2 <__libc_init_array+0x2e>
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086bc:	4798      	blx	r3
 80086be:	3601      	adds	r6, #1
 80086c0:	e7ee      	b.n	80086a0 <__libc_init_array+0xc>
 80086c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c6:	4798      	blx	r3
 80086c8:	3601      	adds	r6, #1
 80086ca:	e7f2      	b.n	80086b2 <__libc_init_array+0x1e>
 80086cc:	0800cd88 	.word	0x0800cd88
 80086d0:	0800cd88 	.word	0x0800cd88
 80086d4:	0800cd88 	.word	0x0800cd88
 80086d8:	0800cd8c 	.word	0x0800cd8c

080086dc <__retarget_lock_init_recursive>:
 80086dc:	4770      	bx	lr

080086de <__retarget_lock_acquire_recursive>:
 80086de:	4770      	bx	lr

080086e0 <__retarget_lock_release_recursive>:
 80086e0:	4770      	bx	lr
	...

080086e4 <nanf>:
 80086e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086ec <nanf+0x8>
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	7fc00000 	.word	0x7fc00000

080086f0 <quorem>:
 80086f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	6903      	ldr	r3, [r0, #16]
 80086f6:	690c      	ldr	r4, [r1, #16]
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	4607      	mov	r7, r0
 80086fc:	db7e      	blt.n	80087fc <quorem+0x10c>
 80086fe:	3c01      	subs	r4, #1
 8008700:	f101 0814 	add.w	r8, r1, #20
 8008704:	f100 0514 	add.w	r5, r0, #20
 8008708:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008716:	3301      	adds	r3, #1
 8008718:	429a      	cmp	r2, r3
 800871a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800871e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008722:	fbb2 f6f3 	udiv	r6, r2, r3
 8008726:	d331      	bcc.n	800878c <quorem+0x9c>
 8008728:	f04f 0e00 	mov.w	lr, #0
 800872c:	4640      	mov	r0, r8
 800872e:	46ac      	mov	ip, r5
 8008730:	46f2      	mov	sl, lr
 8008732:	f850 2b04 	ldr.w	r2, [r0], #4
 8008736:	b293      	uxth	r3, r2
 8008738:	fb06 e303 	mla	r3, r6, r3, lr
 800873c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008740:	0c1a      	lsrs	r2, r3, #16
 8008742:	b29b      	uxth	r3, r3
 8008744:	ebaa 0303 	sub.w	r3, sl, r3
 8008748:	f8dc a000 	ldr.w	sl, [ip]
 800874c:	fa13 f38a 	uxtah	r3, r3, sl
 8008750:	fb06 220e 	mla	r2, r6, lr, r2
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800875c:	b292      	uxth	r2, r2
 800875e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008762:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008766:	f8bd 3000 	ldrh.w	r3, [sp]
 800876a:	4581      	cmp	r9, r0
 800876c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008770:	f84c 3b04 	str.w	r3, [ip], #4
 8008774:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008778:	d2db      	bcs.n	8008732 <quorem+0x42>
 800877a:	f855 300b 	ldr.w	r3, [r5, fp]
 800877e:	b92b      	cbnz	r3, 800878c <quorem+0x9c>
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	3b04      	subs	r3, #4
 8008784:	429d      	cmp	r5, r3
 8008786:	461a      	mov	r2, r3
 8008788:	d32c      	bcc.n	80087e4 <quorem+0xf4>
 800878a:	613c      	str	r4, [r7, #16]
 800878c:	4638      	mov	r0, r7
 800878e:	f001 f9ef 	bl	8009b70 <__mcmp>
 8008792:	2800      	cmp	r0, #0
 8008794:	db22      	blt.n	80087dc <quorem+0xec>
 8008796:	3601      	adds	r6, #1
 8008798:	4629      	mov	r1, r5
 800879a:	2000      	movs	r0, #0
 800879c:	f858 2b04 	ldr.w	r2, [r8], #4
 80087a0:	f8d1 c000 	ldr.w	ip, [r1]
 80087a4:	b293      	uxth	r3, r2
 80087a6:	1ac3      	subs	r3, r0, r3
 80087a8:	0c12      	lsrs	r2, r2, #16
 80087aa:	fa13 f38c 	uxtah	r3, r3, ip
 80087ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80087b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087bc:	45c1      	cmp	r9, r8
 80087be:	f841 3b04 	str.w	r3, [r1], #4
 80087c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087c6:	d2e9      	bcs.n	800879c <quorem+0xac>
 80087c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d0:	b922      	cbnz	r2, 80087dc <quorem+0xec>
 80087d2:	3b04      	subs	r3, #4
 80087d4:	429d      	cmp	r5, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	d30a      	bcc.n	80087f0 <quorem+0x100>
 80087da:	613c      	str	r4, [r7, #16]
 80087dc:	4630      	mov	r0, r6
 80087de:	b003      	add	sp, #12
 80087e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e4:	6812      	ldr	r2, [r2, #0]
 80087e6:	3b04      	subs	r3, #4
 80087e8:	2a00      	cmp	r2, #0
 80087ea:	d1ce      	bne.n	800878a <quorem+0x9a>
 80087ec:	3c01      	subs	r4, #1
 80087ee:	e7c9      	b.n	8008784 <quorem+0x94>
 80087f0:	6812      	ldr	r2, [r2, #0]
 80087f2:	3b04      	subs	r3, #4
 80087f4:	2a00      	cmp	r2, #0
 80087f6:	d1f0      	bne.n	80087da <quorem+0xea>
 80087f8:	3c01      	subs	r4, #1
 80087fa:	e7eb      	b.n	80087d4 <quorem+0xe4>
 80087fc:	2000      	movs	r0, #0
 80087fe:	e7ee      	b.n	80087de <quorem+0xee>

08008800 <_dtoa_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	ed2d 8b04 	vpush	{d8-d9}
 8008808:	69c5      	ldr	r5, [r0, #28]
 800880a:	b093      	sub	sp, #76	; 0x4c
 800880c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008810:	ec57 6b10 	vmov	r6, r7, d0
 8008814:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008818:	9107      	str	r1, [sp, #28]
 800881a:	4604      	mov	r4, r0
 800881c:	920a      	str	r2, [sp, #40]	; 0x28
 800881e:	930d      	str	r3, [sp, #52]	; 0x34
 8008820:	b975      	cbnz	r5, 8008840 <_dtoa_r+0x40>
 8008822:	2010      	movs	r0, #16
 8008824:	f000 fe2a 	bl	800947c <malloc>
 8008828:	4602      	mov	r2, r0
 800882a:	61e0      	str	r0, [r4, #28]
 800882c:	b920      	cbnz	r0, 8008838 <_dtoa_r+0x38>
 800882e:	4bae      	ldr	r3, [pc, #696]	; (8008ae8 <_dtoa_r+0x2e8>)
 8008830:	21ef      	movs	r1, #239	; 0xef
 8008832:	48ae      	ldr	r0, [pc, #696]	; (8008aec <_dtoa_r+0x2ec>)
 8008834:	f002 fc74 	bl	800b120 <__assert_func>
 8008838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800883c:	6005      	str	r5, [r0, #0]
 800883e:	60c5      	str	r5, [r0, #12]
 8008840:	69e3      	ldr	r3, [r4, #28]
 8008842:	6819      	ldr	r1, [r3, #0]
 8008844:	b151      	cbz	r1, 800885c <_dtoa_r+0x5c>
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	604a      	str	r2, [r1, #4]
 800884a:	2301      	movs	r3, #1
 800884c:	4093      	lsls	r3, r2
 800884e:	608b      	str	r3, [r1, #8]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 ff07 	bl	8009664 <_Bfree>
 8008856:	69e3      	ldr	r3, [r4, #28]
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	1e3b      	subs	r3, r7, #0
 800885e:	bfbb      	ittet	lt
 8008860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008864:	9303      	strlt	r3, [sp, #12]
 8008866:	2300      	movge	r3, #0
 8008868:	2201      	movlt	r2, #1
 800886a:	bfac      	ite	ge
 800886c:	f8c8 3000 	strge.w	r3, [r8]
 8008870:	f8c8 2000 	strlt.w	r2, [r8]
 8008874:	4b9e      	ldr	r3, [pc, #632]	; (8008af0 <_dtoa_r+0x2f0>)
 8008876:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800887a:	ea33 0308 	bics.w	r3, r3, r8
 800887e:	d11b      	bne.n	80088b8 <_dtoa_r+0xb8>
 8008880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008882:	f242 730f 	movw	r3, #9999	; 0x270f
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800888c:	4333      	orrs	r3, r6
 800888e:	f000 8593 	beq.w	80093b8 <_dtoa_r+0xbb8>
 8008892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008894:	b963      	cbnz	r3, 80088b0 <_dtoa_r+0xb0>
 8008896:	4b97      	ldr	r3, [pc, #604]	; (8008af4 <_dtoa_r+0x2f4>)
 8008898:	e027      	b.n	80088ea <_dtoa_r+0xea>
 800889a:	4b97      	ldr	r3, [pc, #604]	; (8008af8 <_dtoa_r+0x2f8>)
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	3308      	adds	r3, #8
 80088a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9800      	ldr	r0, [sp, #0]
 80088a6:	b013      	add	sp, #76	; 0x4c
 80088a8:	ecbd 8b04 	vpop	{d8-d9}
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	4b90      	ldr	r3, [pc, #576]	; (8008af4 <_dtoa_r+0x2f4>)
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	3303      	adds	r3, #3
 80088b6:	e7f3      	b.n	80088a0 <_dtoa_r+0xa0>
 80088b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	ec51 0b17 	vmov	r0, r1, d7
 80088c2:	eeb0 8a47 	vmov.f32	s16, s14
 80088c6:	eef0 8a67 	vmov.f32	s17, s15
 80088ca:	2300      	movs	r3, #0
 80088cc:	f7f8 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d0:	4681      	mov	r9, r0
 80088d2:	b160      	cbz	r0, 80088ee <_dtoa_r+0xee>
 80088d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088d6:	2301      	movs	r3, #1
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8568 	beq.w	80093b2 <_dtoa_r+0xbb2>
 80088e2:	4b86      	ldr	r3, [pc, #536]	; (8008afc <_dtoa_r+0x2fc>)
 80088e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	e7da      	b.n	80088a4 <_dtoa_r+0xa4>
 80088ee:	aa10      	add	r2, sp, #64	; 0x40
 80088f0:	a911      	add	r1, sp, #68	; 0x44
 80088f2:	4620      	mov	r0, r4
 80088f4:	eeb0 0a48 	vmov.f32	s0, s16
 80088f8:	eef0 0a68 	vmov.f32	s1, s17
 80088fc:	f001 fa4e 	bl	8009d9c <__d2b>
 8008900:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008904:	4682      	mov	sl, r0
 8008906:	2d00      	cmp	r5, #0
 8008908:	d07f      	beq.n	8008a0a <_dtoa_r+0x20a>
 800890a:	ee18 3a90 	vmov	r3, s17
 800890e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008912:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008916:	ec51 0b18 	vmov	r0, r1, d8
 800891a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800891e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008922:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008926:	4619      	mov	r1, r3
 8008928:	2200      	movs	r2, #0
 800892a:	4b75      	ldr	r3, [pc, #468]	; (8008b00 <_dtoa_r+0x300>)
 800892c:	f7f7 fcac 	bl	8000288 <__aeabi_dsub>
 8008930:	a367      	add	r3, pc, #412	; (adr r3, 8008ad0 <_dtoa_r+0x2d0>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fe5f 	bl	80005f8 <__aeabi_dmul>
 800893a:	a367      	add	r3, pc, #412	; (adr r3, 8008ad8 <_dtoa_r+0x2d8>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fca4 	bl	800028c <__adddf3>
 8008944:	4606      	mov	r6, r0
 8008946:	4628      	mov	r0, r5
 8008948:	460f      	mov	r7, r1
 800894a:	f7f7 fdeb 	bl	8000524 <__aeabi_i2d>
 800894e:	a364      	add	r3, pc, #400	; (adr r3, 8008ae0 <_dtoa_r+0x2e0>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fc94 	bl	800028c <__adddf3>
 8008964:	4606      	mov	r6, r0
 8008966:	460f      	mov	r7, r1
 8008968:	f7f8 f8f6 	bl	8000b58 <__aeabi_d2iz>
 800896c:	2200      	movs	r2, #0
 800896e:	4683      	mov	fp, r0
 8008970:	2300      	movs	r3, #0
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f8 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800897a:	b148      	cbz	r0, 8008990 <_dtoa_r+0x190>
 800897c:	4658      	mov	r0, fp
 800897e:	f7f7 fdd1 	bl	8000524 <__aeabi_i2d>
 8008982:	4632      	mov	r2, r6
 8008984:	463b      	mov	r3, r7
 8008986:	f7f8 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800898a:	b908      	cbnz	r0, 8008990 <_dtoa_r+0x190>
 800898c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008990:	f1bb 0f16 	cmp.w	fp, #22
 8008994:	d857      	bhi.n	8008a46 <_dtoa_r+0x246>
 8008996:	4b5b      	ldr	r3, [pc, #364]	; (8008b04 <_dtoa_r+0x304>)
 8008998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800899c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a0:	ec51 0b18 	vmov	r0, r1, d8
 80089a4:	f7f8 f89a 	bl	8000adc <__aeabi_dcmplt>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d04e      	beq.n	8008a4a <_dtoa_r+0x24a>
 80089ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089b0:	2300      	movs	r3, #0
 80089b2:	930c      	str	r3, [sp, #48]	; 0x30
 80089b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089b6:	1b5b      	subs	r3, r3, r5
 80089b8:	1e5a      	subs	r2, r3, #1
 80089ba:	bf45      	ittet	mi
 80089bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80089c0:	9305      	strmi	r3, [sp, #20]
 80089c2:	2300      	movpl	r3, #0
 80089c4:	2300      	movmi	r3, #0
 80089c6:	9206      	str	r2, [sp, #24]
 80089c8:	bf54      	ite	pl
 80089ca:	9305      	strpl	r3, [sp, #20]
 80089cc:	9306      	strmi	r3, [sp, #24]
 80089ce:	f1bb 0f00 	cmp.w	fp, #0
 80089d2:	db3c      	blt.n	8008a4e <_dtoa_r+0x24e>
 80089d4:	9b06      	ldr	r3, [sp, #24]
 80089d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089da:	445b      	add	r3, fp
 80089dc:	9306      	str	r3, [sp, #24]
 80089de:	2300      	movs	r3, #0
 80089e0:	9308      	str	r3, [sp, #32]
 80089e2:	9b07      	ldr	r3, [sp, #28]
 80089e4:	2b09      	cmp	r3, #9
 80089e6:	d868      	bhi.n	8008aba <_dtoa_r+0x2ba>
 80089e8:	2b05      	cmp	r3, #5
 80089ea:	bfc4      	itt	gt
 80089ec:	3b04      	subgt	r3, #4
 80089ee:	9307      	strgt	r3, [sp, #28]
 80089f0:	9b07      	ldr	r3, [sp, #28]
 80089f2:	f1a3 0302 	sub.w	r3, r3, #2
 80089f6:	bfcc      	ite	gt
 80089f8:	2500      	movgt	r5, #0
 80089fa:	2501      	movle	r5, #1
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	f200 8085 	bhi.w	8008b0c <_dtoa_r+0x30c>
 8008a02:	e8df f003 	tbb	[pc, r3]
 8008a06:	3b2e      	.short	0x3b2e
 8008a08:	5839      	.short	0x5839
 8008a0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a0e:	441d      	add	r5, r3
 8008a10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	bfc1      	itttt	gt
 8008a18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008a24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008a28:	bfd6      	itet	le
 8008a2a:	f1c3 0320 	rsble	r3, r3, #32
 8008a2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a32:	fa06 f003 	lslle.w	r0, r6, r3
 8008a36:	f7f7 fd65 	bl	8000504 <__aeabi_ui2d>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a40:	3d01      	subs	r5, #1
 8008a42:	920e      	str	r2, [sp, #56]	; 0x38
 8008a44:	e76f      	b.n	8008926 <_dtoa_r+0x126>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e7b3      	b.n	80089b2 <_dtoa_r+0x1b2>
 8008a4a:	900c      	str	r0, [sp, #48]	; 0x30
 8008a4c:	e7b2      	b.n	80089b4 <_dtoa_r+0x1b4>
 8008a4e:	9b05      	ldr	r3, [sp, #20]
 8008a50:	eba3 030b 	sub.w	r3, r3, fp
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	f1cb 0300 	rsb	r3, fp, #0
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a60:	e7bf      	b.n	80089e2 <_dtoa_r+0x1e2>
 8008a62:	2300      	movs	r3, #0
 8008a64:	9309      	str	r3, [sp, #36]	; 0x24
 8008a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dc52      	bgt.n	8008b12 <_dtoa_r+0x312>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	461a      	mov	r2, r3
 8008a74:	920a      	str	r2, [sp, #40]	; 0x28
 8008a76:	e00b      	b.n	8008a90 <_dtoa_r+0x290>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e7f3      	b.n	8008a64 <_dtoa_r+0x264>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a82:	445b      	add	r3, fp
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	3301      	adds	r3, #1
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	9304      	str	r3, [sp, #16]
 8008a8c:	bfb8      	it	lt
 8008a8e:	2301      	movlt	r3, #1
 8008a90:	69e0      	ldr	r0, [r4, #28]
 8008a92:	2100      	movs	r1, #0
 8008a94:	2204      	movs	r2, #4
 8008a96:	f102 0614 	add.w	r6, r2, #20
 8008a9a:	429e      	cmp	r6, r3
 8008a9c:	d93d      	bls.n	8008b1a <_dtoa_r+0x31a>
 8008a9e:	6041      	str	r1, [r0, #4]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 fd9f 	bl	80095e4 <_Balloc>
 8008aa6:	9000      	str	r0, [sp, #0]
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d139      	bne.n	8008b20 <_dtoa_r+0x320>
 8008aac:	4b16      	ldr	r3, [pc, #88]	; (8008b08 <_dtoa_r+0x308>)
 8008aae:	4602      	mov	r2, r0
 8008ab0:	f240 11af 	movw	r1, #431	; 0x1af
 8008ab4:	e6bd      	b.n	8008832 <_dtoa_r+0x32>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e7e1      	b.n	8008a7e <_dtoa_r+0x27e>
 8008aba:	2501      	movs	r5, #1
 8008abc:	2300      	movs	r3, #0
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	9509      	str	r5, [sp, #36]	; 0x24
 8008ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	2200      	movs	r2, #0
 8008acc:	2312      	movs	r3, #18
 8008ace:	e7d1      	b.n	8008a74 <_dtoa_r+0x274>
 8008ad0:	636f4361 	.word	0x636f4361
 8008ad4:	3fd287a7 	.word	0x3fd287a7
 8008ad8:	8b60c8b3 	.word	0x8b60c8b3
 8008adc:	3fc68a28 	.word	0x3fc68a28
 8008ae0:	509f79fb 	.word	0x509f79fb
 8008ae4:	3fd34413 	.word	0x3fd34413
 8008ae8:	0800c99a 	.word	0x0800c99a
 8008aec:	0800c9b1 	.word	0x0800c9b1
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	0800c996 	.word	0x0800c996
 8008af8:	0800c98d 	.word	0x0800c98d
 8008afc:	0800c965 	.word	0x0800c965
 8008b00:	3ff80000 	.word	0x3ff80000
 8008b04:	0800caa0 	.word	0x0800caa0
 8008b08:	0800ca09 	.word	0x0800ca09
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	e7d7      	b.n	8008ac2 <_dtoa_r+0x2c2>
 8008b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	e7ba      	b.n	8008a90 <_dtoa_r+0x290>
 8008b1a:	3101      	adds	r1, #1
 8008b1c:	0052      	lsls	r2, r2, #1
 8008b1e:	e7ba      	b.n	8008a96 <_dtoa_r+0x296>
 8008b20:	69e3      	ldr	r3, [r4, #28]
 8008b22:	9a00      	ldr	r2, [sp, #0]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	2b0e      	cmp	r3, #14
 8008b2a:	f200 80a8 	bhi.w	8008c7e <_dtoa_r+0x47e>
 8008b2e:	2d00      	cmp	r5, #0
 8008b30:	f000 80a5 	beq.w	8008c7e <_dtoa_r+0x47e>
 8008b34:	f1bb 0f00 	cmp.w	fp, #0
 8008b38:	dd38      	ble.n	8008bac <_dtoa_r+0x3ac>
 8008b3a:	4bc0      	ldr	r3, [pc, #768]	; (8008e3c <_dtoa_r+0x63c>)
 8008b3c:	f00b 020f 	and.w	r2, fp, #15
 8008b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b50:	d019      	beq.n	8008b86 <_dtoa_r+0x386>
 8008b52:	4bbb      	ldr	r3, [pc, #748]	; (8008e40 <_dtoa_r+0x640>)
 8008b54:	ec51 0b18 	vmov	r0, r1, d8
 8008b58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b5c:	f7f7 fe76 	bl	800084c <__aeabi_ddiv>
 8008b60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b64:	f008 080f 	and.w	r8, r8, #15
 8008b68:	2503      	movs	r5, #3
 8008b6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e40 <_dtoa_r+0x640>
 8008b6e:	f1b8 0f00 	cmp.w	r8, #0
 8008b72:	d10a      	bne.n	8008b8a <_dtoa_r+0x38a>
 8008b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b78:	4632      	mov	r2, r6
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	f7f7 fe66 	bl	800084c <__aeabi_ddiv>
 8008b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b84:	e02b      	b.n	8008bde <_dtoa_r+0x3de>
 8008b86:	2502      	movs	r5, #2
 8008b88:	e7ef      	b.n	8008b6a <_dtoa_r+0x36a>
 8008b8a:	f018 0f01 	tst.w	r8, #1
 8008b8e:	d008      	beq.n	8008ba2 <_dtoa_r+0x3a2>
 8008b90:	4630      	mov	r0, r6
 8008b92:	4639      	mov	r1, r7
 8008b94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b98:	f7f7 fd2e 	bl	80005f8 <__aeabi_dmul>
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ba6:	f109 0908 	add.w	r9, r9, #8
 8008baa:	e7e0      	b.n	8008b6e <_dtoa_r+0x36e>
 8008bac:	f000 809f 	beq.w	8008cee <_dtoa_r+0x4ee>
 8008bb0:	f1cb 0600 	rsb	r6, fp, #0
 8008bb4:	4ba1      	ldr	r3, [pc, #644]	; (8008e3c <_dtoa_r+0x63c>)
 8008bb6:	4fa2      	ldr	r7, [pc, #648]	; (8008e40 <_dtoa_r+0x640>)
 8008bb8:	f006 020f 	and.w	r2, r6, #15
 8008bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	ec51 0b18 	vmov	r0, r1, d8
 8008bc8:	f7f7 fd16 	bl	80005f8 <__aeabi_dmul>
 8008bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd0:	1136      	asrs	r6, r6, #4
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2502      	movs	r5, #2
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	d17e      	bne.n	8008cd8 <_dtoa_r+0x4d8>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1d0      	bne.n	8008b80 <_dtoa_r+0x380>
 8008bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 8084 	beq.w	8008cf2 <_dtoa_r+0x4f2>
 8008bea:	4b96      	ldr	r3, [pc, #600]	; (8008e44 <_dtoa_r+0x644>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 ff73 	bl	8000adc <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d07b      	beq.n	8008cf2 <_dtoa_r+0x4f2>
 8008bfa:	9b04      	ldr	r3, [sp, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d078      	beq.n	8008cf2 <_dtoa_r+0x4f2>
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dd39      	ble.n	8008c7a <_dtoa_r+0x47a>
 8008c06:	4b90      	ldr	r3, [pc, #576]	; (8008e48 <_dtoa_r+0x648>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	4649      	mov	r1, r9
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c16:	9e01      	ldr	r6, [sp, #4]
 8008c18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c22:	4628      	mov	r0, r5
 8008c24:	f7f7 fc7e 	bl	8000524 <__aeabi_i2d>
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	4b86      	ldr	r3, [pc, #536]	; (8008e4c <_dtoa_r+0x64c>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	f7f7 fb2a 	bl	800028c <__adddf3>
 8008c38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	d158      	bne.n	8008cf8 <_dtoa_r+0x4f8>
 8008c46:	4b82      	ldr	r3, [pc, #520]	; (8008e50 <_dtoa_r+0x650>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	f7f7 fb1b 	bl	8000288 <__aeabi_dsub>
 8008c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c56:	4680      	mov	r8, r0
 8008c58:	4689      	mov	r9, r1
 8008c5a:	f7f7 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 8296 	bne.w	8009190 <_dtoa_r+0x990>
 8008c64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c68:	4640      	mov	r0, r8
 8008c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c6e:	4649      	mov	r1, r9
 8008c70:	f7f7 ff34 	bl	8000adc <__aeabi_dcmplt>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f040 8289 	bne.w	800918c <_dtoa_r+0x98c>
 8008c7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f2c0 814e 	blt.w	8008f22 <_dtoa_r+0x722>
 8008c86:	f1bb 0f0e 	cmp.w	fp, #14
 8008c8a:	f300 814a 	bgt.w	8008f22 <_dtoa_r+0x722>
 8008c8e:	4b6b      	ldr	r3, [pc, #428]	; (8008e3c <_dtoa_r+0x63c>)
 8008c90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f280 80dc 	bge.w	8008e58 <_dtoa_r+0x658>
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f300 80d8 	bgt.w	8008e58 <_dtoa_r+0x658>
 8008ca8:	f040 826f 	bne.w	800918a <_dtoa_r+0x98a>
 8008cac:	4b68      	ldr	r3, [pc, #416]	; (8008e50 <_dtoa_r+0x650>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cbc:	f7f7 ff22 	bl	8000b04 <__aeabi_dcmpge>
 8008cc0:	9e04      	ldr	r6, [sp, #16]
 8008cc2:	4637      	mov	r7, r6
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 8245 	bne.w	8009154 <_dtoa_r+0x954>
 8008cca:	9d00      	ldr	r5, [sp, #0]
 8008ccc:	2331      	movs	r3, #49	; 0x31
 8008cce:	f805 3b01 	strb.w	r3, [r5], #1
 8008cd2:	f10b 0b01 	add.w	fp, fp, #1
 8008cd6:	e241      	b.n	800915c <_dtoa_r+0x95c>
 8008cd8:	07f2      	lsls	r2, r6, #31
 8008cda:	d505      	bpl.n	8008ce8 <_dtoa_r+0x4e8>
 8008cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce0:	f7f7 fc8a 	bl	80005f8 <__aeabi_dmul>
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	1076      	asrs	r6, r6, #1
 8008cea:	3708      	adds	r7, #8
 8008cec:	e773      	b.n	8008bd6 <_dtoa_r+0x3d6>
 8008cee:	2502      	movs	r5, #2
 8008cf0:	e775      	b.n	8008bde <_dtoa_r+0x3de>
 8008cf2:	9e04      	ldr	r6, [sp, #16]
 8008cf4:	465f      	mov	r7, fp
 8008cf6:	e792      	b.n	8008c1e <_dtoa_r+0x41e>
 8008cf8:	9900      	ldr	r1, [sp, #0]
 8008cfa:	4b50      	ldr	r3, [pc, #320]	; (8008e3c <_dtoa_r+0x63c>)
 8008cfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d00:	4431      	add	r1, r6
 8008d02:	9102      	str	r1, [sp, #8]
 8008d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d06:	eeb0 9a47 	vmov.f32	s18, s14
 8008d0a:	eef0 9a67 	vmov.f32	s19, s15
 8008d0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d16:	2900      	cmp	r1, #0
 8008d18:	d044      	beq.n	8008da4 <_dtoa_r+0x5a4>
 8008d1a:	494e      	ldr	r1, [pc, #312]	; (8008e54 <_dtoa_r+0x654>)
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	f7f7 fd95 	bl	800084c <__aeabi_ddiv>
 8008d22:	ec53 2b19 	vmov	r2, r3, d9
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	9d00      	ldr	r5, [sp, #0]
 8008d2c:	ec41 0b19 	vmov	d9, r0, r1
 8008d30:	4649      	mov	r1, r9
 8008d32:	4640      	mov	r0, r8
 8008d34:	f7f7 ff10 	bl	8000b58 <__aeabi_d2iz>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	f7f7 fbf3 	bl	8000524 <__aeabi_i2d>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fa9f 	bl	8000288 <__aeabi_dsub>
 8008d4a:	3630      	adds	r6, #48	; 0x30
 8008d4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d50:	ec53 2b19 	vmov	r2, r3, d9
 8008d54:	4680      	mov	r8, r0
 8008d56:	4689      	mov	r9, r1
 8008d58:	f7f7 fec0 	bl	8000adc <__aeabi_dcmplt>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d164      	bne.n	8008e2a <_dtoa_r+0x62a>
 8008d60:	4642      	mov	r2, r8
 8008d62:	464b      	mov	r3, r9
 8008d64:	4937      	ldr	r1, [pc, #220]	; (8008e44 <_dtoa_r+0x644>)
 8008d66:	2000      	movs	r0, #0
 8008d68:	f7f7 fa8e 	bl	8000288 <__aeabi_dsub>
 8008d6c:	ec53 2b19 	vmov	r2, r3, d9
 8008d70:	f7f7 feb4 	bl	8000adc <__aeabi_dcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f040 80b6 	bne.w	8008ee6 <_dtoa_r+0x6e6>
 8008d7a:	9b02      	ldr	r3, [sp, #8]
 8008d7c:	429d      	cmp	r5, r3
 8008d7e:	f43f af7c 	beq.w	8008c7a <_dtoa_r+0x47a>
 8008d82:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <_dtoa_r+0x648>)
 8008d84:	ec51 0b19 	vmov	r0, r1, d9
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	4b2e      	ldr	r3, [pc, #184]	; (8008e48 <_dtoa_r+0x648>)
 8008d90:	ec41 0b19 	vmov	d9, r0, r1
 8008d94:	2200      	movs	r2, #0
 8008d96:	4640      	mov	r0, r8
 8008d98:	4649      	mov	r1, r9
 8008d9a:	f7f7 fc2d 	bl	80005f8 <__aeabi_dmul>
 8008d9e:	4680      	mov	r8, r0
 8008da0:	4689      	mov	r9, r1
 8008da2:	e7c5      	b.n	8008d30 <_dtoa_r+0x530>
 8008da4:	ec51 0b17 	vmov	r0, r1, d7
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	9b02      	ldr	r3, [sp, #8]
 8008dae:	9d00      	ldr	r5, [sp, #0]
 8008db0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008db2:	ec41 0b19 	vmov	d9, r0, r1
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	f7f7 fecd 	bl	8000b58 <__aeabi_d2iz>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	f7f7 fbb0 	bl	8000524 <__aeabi_i2d>
 8008dc4:	3630      	adds	r6, #48	; 0x30
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fa5b 	bl	8000288 <__aeabi_dsub>
 8008dd2:	f805 6b01 	strb.w	r6, [r5], #1
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	429d      	cmp	r5, r3
 8008dda:	4680      	mov	r8, r0
 8008ddc:	4689      	mov	r9, r1
 8008dde:	f04f 0200 	mov.w	r2, #0
 8008de2:	d124      	bne.n	8008e2e <_dtoa_r+0x62e>
 8008de4:	4b1b      	ldr	r3, [pc, #108]	; (8008e54 <_dtoa_r+0x654>)
 8008de6:	ec51 0b19 	vmov	r0, r1, d9
 8008dea:	f7f7 fa4f 	bl	800028c <__adddf3>
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d173      	bne.n	8008ee6 <_dtoa_r+0x6e6>
 8008dfe:	ec53 2b19 	vmov	r2, r3, d9
 8008e02:	4914      	ldr	r1, [pc, #80]	; (8008e54 <_dtoa_r+0x654>)
 8008e04:	2000      	movs	r0, #0
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	f7f7 fe63 	bl	8000adc <__aeabi_dcmplt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f43f af2f 	beq.w	8008c7a <_dtoa_r+0x47a>
 8008e1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e1e:	1e6b      	subs	r3, r5, #1
 8008e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e26:	2b30      	cmp	r3, #48	; 0x30
 8008e28:	d0f8      	beq.n	8008e1c <_dtoa_r+0x61c>
 8008e2a:	46bb      	mov	fp, r7
 8008e2c:	e04a      	b.n	8008ec4 <_dtoa_r+0x6c4>
 8008e2e:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <_dtoa_r+0x648>)
 8008e30:	f7f7 fbe2 	bl	80005f8 <__aeabi_dmul>
 8008e34:	4680      	mov	r8, r0
 8008e36:	4689      	mov	r9, r1
 8008e38:	e7bd      	b.n	8008db6 <_dtoa_r+0x5b6>
 8008e3a:	bf00      	nop
 8008e3c:	0800caa0 	.word	0x0800caa0
 8008e40:	0800ca78 	.word	0x0800ca78
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	40240000 	.word	0x40240000
 8008e4c:	401c0000 	.word	0x401c0000
 8008e50:	40140000 	.word	0x40140000
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e5c:	9d00      	ldr	r5, [sp, #0]
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 fcf1 	bl	800084c <__aeabi_ddiv>
 8008e6a:	f7f7 fe75 	bl	8000b58 <__aeabi_d2iz>
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	f7f7 fb58 	bl	8000524 <__aeabi_i2d>
 8008e74:	4642      	mov	r2, r8
 8008e76:	464b      	mov	r3, r9
 8008e78:	f7f7 fbbe 	bl	80005f8 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fa00 	bl	8000288 <__aeabi_dsub>
 8008e88:	9e01      	ldr	r6, [sp, #4]
 8008e8a:	9f04      	ldr	r7, [sp, #16]
 8008e8c:	3630      	adds	r6, #48	; 0x30
 8008e8e:	f805 6b01 	strb.w	r6, [r5], #1
 8008e92:	9e00      	ldr	r6, [sp, #0]
 8008e94:	1bae      	subs	r6, r5, r6
 8008e96:	42b7      	cmp	r7, r6
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	d134      	bne.n	8008f08 <_dtoa_r+0x708>
 8008e9e:	f7f7 f9f5 	bl	800028c <__adddf3>
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460f      	mov	r7, r1
 8008eaa:	f7f7 fe35 	bl	8000b18 <__aeabi_dcmpgt>
 8008eae:	b9c8      	cbnz	r0, 8008ee4 <_dtoa_r+0x6e4>
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f7f7 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ebc:	b110      	cbz	r0, 8008ec4 <_dtoa_r+0x6c4>
 8008ebe:	9b01      	ldr	r3, [sp, #4]
 8008ec0:	07db      	lsls	r3, r3, #31
 8008ec2:	d40f      	bmi.n	8008ee4 <_dtoa_r+0x6e4>
 8008ec4:	4651      	mov	r1, sl
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fbcc 	bl	8009664 <_Bfree>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ed0:	702b      	strb	r3, [r5, #0]
 8008ed2:	f10b 0301 	add.w	r3, fp, #1
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f43f ace2 	beq.w	80088a4 <_dtoa_r+0xa4>
 8008ee0:	601d      	str	r5, [r3, #0]
 8008ee2:	e4df      	b.n	80088a4 <_dtoa_r+0xa4>
 8008ee4:	465f      	mov	r7, fp
 8008ee6:	462b      	mov	r3, r5
 8008ee8:	461d      	mov	r5, r3
 8008eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eee:	2a39      	cmp	r2, #57	; 0x39
 8008ef0:	d106      	bne.n	8008f00 <_dtoa_r+0x700>
 8008ef2:	9a00      	ldr	r2, [sp, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d1f7      	bne.n	8008ee8 <_dtoa_r+0x6e8>
 8008ef8:	9900      	ldr	r1, [sp, #0]
 8008efa:	2230      	movs	r2, #48	; 0x30
 8008efc:	3701      	adds	r7, #1
 8008efe:	700a      	strb	r2, [r1, #0]
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	3201      	adds	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e790      	b.n	8008e2a <_dtoa_r+0x62a>
 8008f08:	4ba3      	ldr	r3, [pc, #652]	; (8009198 <_dtoa_r+0x998>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f7f7 fb74 	bl	80005f8 <__aeabi_dmul>
 8008f10:	2200      	movs	r2, #0
 8008f12:	2300      	movs	r3, #0
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	f7f7 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d09e      	beq.n	8008e5e <_dtoa_r+0x65e>
 8008f20:	e7d0      	b.n	8008ec4 <_dtoa_r+0x6c4>
 8008f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	f000 80ca 	beq.w	80090be <_dtoa_r+0x8be>
 8008f2a:	9a07      	ldr	r2, [sp, #28]
 8008f2c:	2a01      	cmp	r2, #1
 8008f2e:	f300 80ad 	bgt.w	800908c <_dtoa_r+0x88c>
 8008f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	f000 80a5 	beq.w	8009084 <_dtoa_r+0x884>
 8008f3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f3e:	9e08      	ldr	r6, [sp, #32]
 8008f40:	9d05      	ldr	r5, [sp, #20]
 8008f42:	9a05      	ldr	r2, [sp, #20]
 8008f44:	441a      	add	r2, r3
 8008f46:	9205      	str	r2, [sp, #20]
 8008f48:	9a06      	ldr	r2, [sp, #24]
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	441a      	add	r2, r3
 8008f4e:	4620      	mov	r0, r4
 8008f50:	9206      	str	r2, [sp, #24]
 8008f52:	f000 fc87 	bl	8009864 <__i2b>
 8008f56:	4607      	mov	r7, r0
 8008f58:	b165      	cbz	r5, 8008f74 <_dtoa_r+0x774>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd09      	ble.n	8008f74 <_dtoa_r+0x774>
 8008f60:	42ab      	cmp	r3, r5
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	bfa8      	it	ge
 8008f66:	462b      	movge	r3, r5
 8008f68:	1ad2      	subs	r2, r2, r3
 8008f6a:	9205      	str	r2, [sp, #20]
 8008f6c:	9a06      	ldr	r2, [sp, #24]
 8008f6e:	1aed      	subs	r5, r5, r3
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	9306      	str	r3, [sp, #24]
 8008f74:	9b08      	ldr	r3, [sp, #32]
 8008f76:	b1f3      	cbz	r3, 8008fb6 <_dtoa_r+0x7b6>
 8008f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 80a3 	beq.w	80090c6 <_dtoa_r+0x8c6>
 8008f80:	2e00      	cmp	r6, #0
 8008f82:	dd10      	ble.n	8008fa6 <_dtoa_r+0x7a6>
 8008f84:	4639      	mov	r1, r7
 8008f86:	4632      	mov	r2, r6
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fd2b 	bl	80099e4 <__pow5mult>
 8008f8e:	4652      	mov	r2, sl
 8008f90:	4601      	mov	r1, r0
 8008f92:	4607      	mov	r7, r0
 8008f94:	4620      	mov	r0, r4
 8008f96:	f000 fc7b 	bl	8009890 <__multiply>
 8008f9a:	4651      	mov	r1, sl
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f000 fb60 	bl	8009664 <_Bfree>
 8008fa4:	46c2      	mov	sl, r8
 8008fa6:	9b08      	ldr	r3, [sp, #32]
 8008fa8:	1b9a      	subs	r2, r3, r6
 8008faa:	d004      	beq.n	8008fb6 <_dtoa_r+0x7b6>
 8008fac:	4651      	mov	r1, sl
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fd18 	bl	80099e4 <__pow5mult>
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 fc53 	bl	8009864 <__i2b>
 8008fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	f340 8081 	ble.w	80090ca <_dtoa_r+0x8ca>
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fd09 	bl	80099e4 <__pow5mult>
 8008fd2:	9b07      	ldr	r3, [sp, #28]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	dd7a      	ble.n	80090d0 <_dtoa_r+0x8d0>
 8008fda:	f04f 0800 	mov.w	r8, #0
 8008fde:	6933      	ldr	r3, [r6, #16]
 8008fe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fe4:	6918      	ldr	r0, [r3, #16]
 8008fe6:	f000 fbef 	bl	80097c8 <__hi0bits>
 8008fea:	f1c0 0020 	rsb	r0, r0, #32
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	4418      	add	r0, r3
 8008ff2:	f010 001f 	ands.w	r0, r0, #31
 8008ff6:	f000 8094 	beq.w	8009122 <_dtoa_r+0x922>
 8008ffa:	f1c0 0320 	rsb	r3, r0, #32
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	f340 8085 	ble.w	800910e <_dtoa_r+0x90e>
 8009004:	9b05      	ldr	r3, [sp, #20]
 8009006:	f1c0 001c 	rsb	r0, r0, #28
 800900a:	4403      	add	r3, r0
 800900c:	9305      	str	r3, [sp, #20]
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	4403      	add	r3, r0
 8009012:	4405      	add	r5, r0
 8009014:	9306      	str	r3, [sp, #24]
 8009016:	9b05      	ldr	r3, [sp, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	dd05      	ble.n	8009028 <_dtoa_r+0x828>
 800901c:	4651      	mov	r1, sl
 800901e:	461a      	mov	r2, r3
 8009020:	4620      	mov	r0, r4
 8009022:	f000 fd39 	bl	8009a98 <__lshift>
 8009026:	4682      	mov	sl, r0
 8009028:	9b06      	ldr	r3, [sp, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	dd05      	ble.n	800903a <_dtoa_r+0x83a>
 800902e:	4631      	mov	r1, r6
 8009030:	461a      	mov	r2, r3
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fd30 	bl	8009a98 <__lshift>
 8009038:	4606      	mov	r6, r0
 800903a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903c:	2b00      	cmp	r3, #0
 800903e:	d072      	beq.n	8009126 <_dtoa_r+0x926>
 8009040:	4631      	mov	r1, r6
 8009042:	4650      	mov	r0, sl
 8009044:	f000 fd94 	bl	8009b70 <__mcmp>
 8009048:	2800      	cmp	r0, #0
 800904a:	da6c      	bge.n	8009126 <_dtoa_r+0x926>
 800904c:	2300      	movs	r3, #0
 800904e:	4651      	mov	r1, sl
 8009050:	220a      	movs	r2, #10
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fb28 	bl	80096a8 <__multadd>
 8009058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800905e:	4682      	mov	sl, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	f000 81b0 	beq.w	80093c6 <_dtoa_r+0xbc6>
 8009066:	2300      	movs	r3, #0
 8009068:	4639      	mov	r1, r7
 800906a:	220a      	movs	r2, #10
 800906c:	4620      	mov	r0, r4
 800906e:	f000 fb1b 	bl	80096a8 <__multadd>
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	4607      	mov	r7, r0
 8009078:	f300 8096 	bgt.w	80091a8 <_dtoa_r+0x9a8>
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	2b02      	cmp	r3, #2
 8009080:	dc59      	bgt.n	8009136 <_dtoa_r+0x936>
 8009082:	e091      	b.n	80091a8 <_dtoa_r+0x9a8>
 8009084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800908a:	e758      	b.n	8008f3e <_dtoa_r+0x73e>
 800908c:	9b04      	ldr	r3, [sp, #16]
 800908e:	1e5e      	subs	r6, r3, #1
 8009090:	9b08      	ldr	r3, [sp, #32]
 8009092:	42b3      	cmp	r3, r6
 8009094:	bfbf      	itttt	lt
 8009096:	9b08      	ldrlt	r3, [sp, #32]
 8009098:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800909a:	9608      	strlt	r6, [sp, #32]
 800909c:	1af3      	sublt	r3, r6, r3
 800909e:	bfb4      	ite	lt
 80090a0:	18d2      	addlt	r2, r2, r3
 80090a2:	1b9e      	subge	r6, r3, r6
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	bfbc      	itt	lt
 80090a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80090aa:	2600      	movlt	r6, #0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfb7      	itett	lt
 80090b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80090b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80090b8:	1a9d      	sublt	r5, r3, r2
 80090ba:	2300      	movlt	r3, #0
 80090bc:	e741      	b.n	8008f42 <_dtoa_r+0x742>
 80090be:	9e08      	ldr	r6, [sp, #32]
 80090c0:	9d05      	ldr	r5, [sp, #20]
 80090c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090c4:	e748      	b.n	8008f58 <_dtoa_r+0x758>
 80090c6:	9a08      	ldr	r2, [sp, #32]
 80090c8:	e770      	b.n	8008fac <_dtoa_r+0x7ac>
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	dc19      	bgt.n	8009104 <_dtoa_r+0x904>
 80090d0:	9b02      	ldr	r3, [sp, #8]
 80090d2:	b9bb      	cbnz	r3, 8009104 <_dtoa_r+0x904>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090da:	b99b      	cbnz	r3, 8009104 <_dtoa_r+0x904>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090e2:	0d1b      	lsrs	r3, r3, #20
 80090e4:	051b      	lsls	r3, r3, #20
 80090e6:	b183      	cbz	r3, 800910a <_dtoa_r+0x90a>
 80090e8:	9b05      	ldr	r3, [sp, #20]
 80090ea:	3301      	adds	r3, #1
 80090ec:	9305      	str	r3, [sp, #20]
 80090ee:	9b06      	ldr	r3, [sp, #24]
 80090f0:	3301      	adds	r3, #1
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	f04f 0801 	mov.w	r8, #1
 80090f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f47f af6f 	bne.w	8008fde <_dtoa_r+0x7de>
 8009100:	2001      	movs	r0, #1
 8009102:	e774      	b.n	8008fee <_dtoa_r+0x7ee>
 8009104:	f04f 0800 	mov.w	r8, #0
 8009108:	e7f6      	b.n	80090f8 <_dtoa_r+0x8f8>
 800910a:	4698      	mov	r8, r3
 800910c:	e7f4      	b.n	80090f8 <_dtoa_r+0x8f8>
 800910e:	d082      	beq.n	8009016 <_dtoa_r+0x816>
 8009110:	9a05      	ldr	r2, [sp, #20]
 8009112:	331c      	adds	r3, #28
 8009114:	441a      	add	r2, r3
 8009116:	9205      	str	r2, [sp, #20]
 8009118:	9a06      	ldr	r2, [sp, #24]
 800911a:	441a      	add	r2, r3
 800911c:	441d      	add	r5, r3
 800911e:	9206      	str	r2, [sp, #24]
 8009120:	e779      	b.n	8009016 <_dtoa_r+0x816>
 8009122:	4603      	mov	r3, r0
 8009124:	e7f4      	b.n	8009110 <_dtoa_r+0x910>
 8009126:	9b04      	ldr	r3, [sp, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	dc37      	bgt.n	800919c <_dtoa_r+0x99c>
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	2b02      	cmp	r3, #2
 8009130:	dd34      	ble.n	800919c <_dtoa_r+0x99c>
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	9b01      	ldr	r3, [sp, #4]
 8009138:	b963      	cbnz	r3, 8009154 <_dtoa_r+0x954>
 800913a:	4631      	mov	r1, r6
 800913c:	2205      	movs	r2, #5
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fab2 	bl	80096a8 <__multadd>
 8009144:	4601      	mov	r1, r0
 8009146:	4606      	mov	r6, r0
 8009148:	4650      	mov	r0, sl
 800914a:	f000 fd11 	bl	8009b70 <__mcmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	f73f adbb 	bgt.w	8008cca <_dtoa_r+0x4ca>
 8009154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009156:	9d00      	ldr	r5, [sp, #0]
 8009158:	ea6f 0b03 	mvn.w	fp, r3
 800915c:	f04f 0800 	mov.w	r8, #0
 8009160:	4631      	mov	r1, r6
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fa7e 	bl	8009664 <_Bfree>
 8009168:	2f00      	cmp	r7, #0
 800916a:	f43f aeab 	beq.w	8008ec4 <_dtoa_r+0x6c4>
 800916e:	f1b8 0f00 	cmp.w	r8, #0
 8009172:	d005      	beq.n	8009180 <_dtoa_r+0x980>
 8009174:	45b8      	cmp	r8, r7
 8009176:	d003      	beq.n	8009180 <_dtoa_r+0x980>
 8009178:	4641      	mov	r1, r8
 800917a:	4620      	mov	r0, r4
 800917c:	f000 fa72 	bl	8009664 <_Bfree>
 8009180:	4639      	mov	r1, r7
 8009182:	4620      	mov	r0, r4
 8009184:	f000 fa6e 	bl	8009664 <_Bfree>
 8009188:	e69c      	b.n	8008ec4 <_dtoa_r+0x6c4>
 800918a:	2600      	movs	r6, #0
 800918c:	4637      	mov	r7, r6
 800918e:	e7e1      	b.n	8009154 <_dtoa_r+0x954>
 8009190:	46bb      	mov	fp, r7
 8009192:	4637      	mov	r7, r6
 8009194:	e599      	b.n	8008cca <_dtoa_r+0x4ca>
 8009196:	bf00      	nop
 8009198:	40240000 	.word	0x40240000
 800919c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f000 80c8 	beq.w	8009334 <_dtoa_r+0xb34>
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	dd05      	ble.n	80091b8 <_dtoa_r+0x9b8>
 80091ac:	4639      	mov	r1, r7
 80091ae:	462a      	mov	r2, r5
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fc71 	bl	8009a98 <__lshift>
 80091b6:	4607      	mov	r7, r0
 80091b8:	f1b8 0f00 	cmp.w	r8, #0
 80091bc:	d05b      	beq.n	8009276 <_dtoa_r+0xa76>
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fa0f 	bl	80095e4 <_Balloc>
 80091c6:	4605      	mov	r5, r0
 80091c8:	b928      	cbnz	r0, 80091d6 <_dtoa_r+0x9d6>
 80091ca:	4b83      	ldr	r3, [pc, #524]	; (80093d8 <_dtoa_r+0xbd8>)
 80091cc:	4602      	mov	r2, r0
 80091ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80091d2:	f7ff bb2e 	b.w	8008832 <_dtoa_r+0x32>
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	3202      	adds	r2, #2
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	f107 010c 	add.w	r1, r7, #12
 80091e0:	300c      	adds	r0, #12
 80091e2:	f001 ff85 	bl	800b0f0 <memcpy>
 80091e6:	2201      	movs	r2, #1
 80091e8:	4629      	mov	r1, r5
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 fc54 	bl	8009a98 <__lshift>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091fa:	4413      	add	r3, r2
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	9b02      	ldr	r3, [sp, #8]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	46b8      	mov	r8, r7
 8009206:	9306      	str	r3, [sp, #24]
 8009208:	4607      	mov	r7, r0
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	4631      	mov	r1, r6
 800920e:	3b01      	subs	r3, #1
 8009210:	4650      	mov	r0, sl
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	f7ff fa6c 	bl	80086f0 <quorem>
 8009218:	4641      	mov	r1, r8
 800921a:	9002      	str	r0, [sp, #8]
 800921c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009220:	4650      	mov	r0, sl
 8009222:	f000 fca5 	bl	8009b70 <__mcmp>
 8009226:	463a      	mov	r2, r7
 8009228:	9005      	str	r0, [sp, #20]
 800922a:	4631      	mov	r1, r6
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fcbb 	bl	8009ba8 <__mdiff>
 8009232:	68c2      	ldr	r2, [r0, #12]
 8009234:	4605      	mov	r5, r0
 8009236:	bb02      	cbnz	r2, 800927a <_dtoa_r+0xa7a>
 8009238:	4601      	mov	r1, r0
 800923a:	4650      	mov	r0, sl
 800923c:	f000 fc98 	bl	8009b70 <__mcmp>
 8009240:	4602      	mov	r2, r0
 8009242:	4629      	mov	r1, r5
 8009244:	4620      	mov	r0, r4
 8009246:	9209      	str	r2, [sp, #36]	; 0x24
 8009248:	f000 fa0c 	bl	8009664 <_Bfree>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009250:	9d04      	ldr	r5, [sp, #16]
 8009252:	ea43 0102 	orr.w	r1, r3, r2
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	4319      	orrs	r1, r3
 800925a:	d110      	bne.n	800927e <_dtoa_r+0xa7e>
 800925c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009260:	d029      	beq.n	80092b6 <_dtoa_r+0xab6>
 8009262:	9b05      	ldr	r3, [sp, #20]
 8009264:	2b00      	cmp	r3, #0
 8009266:	dd02      	ble.n	800926e <_dtoa_r+0xa6e>
 8009268:	9b02      	ldr	r3, [sp, #8]
 800926a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	f883 9000 	strb.w	r9, [r3]
 8009274:	e774      	b.n	8009160 <_dtoa_r+0x960>
 8009276:	4638      	mov	r0, r7
 8009278:	e7ba      	b.n	80091f0 <_dtoa_r+0x9f0>
 800927a:	2201      	movs	r2, #1
 800927c:	e7e1      	b.n	8009242 <_dtoa_r+0xa42>
 800927e:	9b05      	ldr	r3, [sp, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	db04      	blt.n	800928e <_dtoa_r+0xa8e>
 8009284:	9907      	ldr	r1, [sp, #28]
 8009286:	430b      	orrs	r3, r1
 8009288:	9906      	ldr	r1, [sp, #24]
 800928a:	430b      	orrs	r3, r1
 800928c:	d120      	bne.n	80092d0 <_dtoa_r+0xad0>
 800928e:	2a00      	cmp	r2, #0
 8009290:	dded      	ble.n	800926e <_dtoa_r+0xa6e>
 8009292:	4651      	mov	r1, sl
 8009294:	2201      	movs	r2, #1
 8009296:	4620      	mov	r0, r4
 8009298:	f000 fbfe 	bl	8009a98 <__lshift>
 800929c:	4631      	mov	r1, r6
 800929e:	4682      	mov	sl, r0
 80092a0:	f000 fc66 	bl	8009b70 <__mcmp>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	dc03      	bgt.n	80092b0 <_dtoa_r+0xab0>
 80092a8:	d1e1      	bne.n	800926e <_dtoa_r+0xa6e>
 80092aa:	f019 0f01 	tst.w	r9, #1
 80092ae:	d0de      	beq.n	800926e <_dtoa_r+0xa6e>
 80092b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092b4:	d1d8      	bne.n	8009268 <_dtoa_r+0xa68>
 80092b6:	9a01      	ldr	r2, [sp, #4]
 80092b8:	2339      	movs	r3, #57	; 0x39
 80092ba:	7013      	strb	r3, [r2, #0]
 80092bc:	462b      	mov	r3, r5
 80092be:	461d      	mov	r5, r3
 80092c0:	3b01      	subs	r3, #1
 80092c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092c6:	2a39      	cmp	r2, #57	; 0x39
 80092c8:	d06c      	beq.n	80093a4 <_dtoa_r+0xba4>
 80092ca:	3201      	adds	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e747      	b.n	8009160 <_dtoa_r+0x960>
 80092d0:	2a00      	cmp	r2, #0
 80092d2:	dd07      	ble.n	80092e4 <_dtoa_r+0xae4>
 80092d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092d8:	d0ed      	beq.n	80092b6 <_dtoa_r+0xab6>
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	f109 0301 	add.w	r3, r9, #1
 80092e0:	7013      	strb	r3, [r2, #0]
 80092e2:	e73d      	b.n	8009160 <_dtoa_r+0x960>
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	9a08      	ldr	r2, [sp, #32]
 80092e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d043      	beq.n	8009378 <_dtoa_r+0xb78>
 80092f0:	4651      	mov	r1, sl
 80092f2:	2300      	movs	r3, #0
 80092f4:	220a      	movs	r2, #10
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 f9d6 	bl	80096a8 <__multadd>
 80092fc:	45b8      	cmp	r8, r7
 80092fe:	4682      	mov	sl, r0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	f04f 020a 	mov.w	r2, #10
 8009308:	4641      	mov	r1, r8
 800930a:	4620      	mov	r0, r4
 800930c:	d107      	bne.n	800931e <_dtoa_r+0xb1e>
 800930e:	f000 f9cb 	bl	80096a8 <__multadd>
 8009312:	4680      	mov	r8, r0
 8009314:	4607      	mov	r7, r0
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	3301      	adds	r3, #1
 800931a:	9304      	str	r3, [sp, #16]
 800931c:	e775      	b.n	800920a <_dtoa_r+0xa0a>
 800931e:	f000 f9c3 	bl	80096a8 <__multadd>
 8009322:	4639      	mov	r1, r7
 8009324:	4680      	mov	r8, r0
 8009326:	2300      	movs	r3, #0
 8009328:	220a      	movs	r2, #10
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f9bc 	bl	80096a8 <__multadd>
 8009330:	4607      	mov	r7, r0
 8009332:	e7f0      	b.n	8009316 <_dtoa_r+0xb16>
 8009334:	9b04      	ldr	r3, [sp, #16]
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	9d00      	ldr	r5, [sp, #0]
 800933a:	4631      	mov	r1, r6
 800933c:	4650      	mov	r0, sl
 800933e:	f7ff f9d7 	bl	80086f0 <quorem>
 8009342:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	f805 9b01 	strb.w	r9, [r5], #1
 800934c:	1aea      	subs	r2, r5, r3
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	4293      	cmp	r3, r2
 8009352:	dd07      	ble.n	8009364 <_dtoa_r+0xb64>
 8009354:	4651      	mov	r1, sl
 8009356:	2300      	movs	r3, #0
 8009358:	220a      	movs	r2, #10
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f9a4 	bl	80096a8 <__multadd>
 8009360:	4682      	mov	sl, r0
 8009362:	e7ea      	b.n	800933a <_dtoa_r+0xb3a>
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	bfc8      	it	gt
 800936a:	461d      	movgt	r5, r3
 800936c:	9b00      	ldr	r3, [sp, #0]
 800936e:	bfd8      	it	le
 8009370:	2501      	movle	r5, #1
 8009372:	441d      	add	r5, r3
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	4651      	mov	r1, sl
 800937a:	2201      	movs	r2, #1
 800937c:	4620      	mov	r0, r4
 800937e:	f000 fb8b 	bl	8009a98 <__lshift>
 8009382:	4631      	mov	r1, r6
 8009384:	4682      	mov	sl, r0
 8009386:	f000 fbf3 	bl	8009b70 <__mcmp>
 800938a:	2800      	cmp	r0, #0
 800938c:	dc96      	bgt.n	80092bc <_dtoa_r+0xabc>
 800938e:	d102      	bne.n	8009396 <_dtoa_r+0xb96>
 8009390:	f019 0f01 	tst.w	r9, #1
 8009394:	d192      	bne.n	80092bc <_dtoa_r+0xabc>
 8009396:	462b      	mov	r3, r5
 8009398:	461d      	mov	r5, r3
 800939a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800939e:	2a30      	cmp	r2, #48	; 0x30
 80093a0:	d0fa      	beq.n	8009398 <_dtoa_r+0xb98>
 80093a2:	e6dd      	b.n	8009160 <_dtoa_r+0x960>
 80093a4:	9a00      	ldr	r2, [sp, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d189      	bne.n	80092be <_dtoa_r+0xabe>
 80093aa:	f10b 0b01 	add.w	fp, fp, #1
 80093ae:	2331      	movs	r3, #49	; 0x31
 80093b0:	e796      	b.n	80092e0 <_dtoa_r+0xae0>
 80093b2:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <_dtoa_r+0xbdc>)
 80093b4:	f7ff ba99 	b.w	80088ea <_dtoa_r+0xea>
 80093b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f aa6d 	bne.w	800889a <_dtoa_r+0x9a>
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <_dtoa_r+0xbe0>)
 80093c2:	f7ff ba92 	b.w	80088ea <_dtoa_r+0xea>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	dcb5      	bgt.n	8009338 <_dtoa_r+0xb38>
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	f73f aeb1 	bgt.w	8009136 <_dtoa_r+0x936>
 80093d4:	e7b0      	b.n	8009338 <_dtoa_r+0xb38>
 80093d6:	bf00      	nop
 80093d8:	0800ca09 	.word	0x0800ca09
 80093dc:	0800c964 	.word	0x0800c964
 80093e0:	0800c98d 	.word	0x0800c98d

080093e4 <_free_r>:
 80093e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d044      	beq.n	8009474 <_free_r+0x90>
 80093ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ee:	9001      	str	r0, [sp, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f1a1 0404 	sub.w	r4, r1, #4
 80093f6:	bfb8      	it	lt
 80093f8:	18e4      	addlt	r4, r4, r3
 80093fa:	f000 f8e7 	bl	80095cc <__malloc_lock>
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <_free_r+0x94>)
 8009400:	9801      	ldr	r0, [sp, #4]
 8009402:	6813      	ldr	r3, [r2, #0]
 8009404:	b933      	cbnz	r3, 8009414 <_free_r+0x30>
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	6014      	str	r4, [r2, #0]
 800940a:	b003      	add	sp, #12
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	f000 b8e2 	b.w	80095d8 <__malloc_unlock>
 8009414:	42a3      	cmp	r3, r4
 8009416:	d908      	bls.n	800942a <_free_r+0x46>
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	1961      	adds	r1, r4, r5
 800941c:	428b      	cmp	r3, r1
 800941e:	bf01      	itttt	eq
 8009420:	6819      	ldreq	r1, [r3, #0]
 8009422:	685b      	ldreq	r3, [r3, #4]
 8009424:	1949      	addeq	r1, r1, r5
 8009426:	6021      	streq	r1, [r4, #0]
 8009428:	e7ed      	b.n	8009406 <_free_r+0x22>
 800942a:	461a      	mov	r2, r3
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	b10b      	cbz	r3, 8009434 <_free_r+0x50>
 8009430:	42a3      	cmp	r3, r4
 8009432:	d9fa      	bls.n	800942a <_free_r+0x46>
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	1855      	adds	r5, r2, r1
 8009438:	42a5      	cmp	r5, r4
 800943a:	d10b      	bne.n	8009454 <_free_r+0x70>
 800943c:	6824      	ldr	r4, [r4, #0]
 800943e:	4421      	add	r1, r4
 8009440:	1854      	adds	r4, r2, r1
 8009442:	42a3      	cmp	r3, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	d1e0      	bne.n	800940a <_free_r+0x26>
 8009448:	681c      	ldr	r4, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	6053      	str	r3, [r2, #4]
 800944e:	440c      	add	r4, r1
 8009450:	6014      	str	r4, [r2, #0]
 8009452:	e7da      	b.n	800940a <_free_r+0x26>
 8009454:	d902      	bls.n	800945c <_free_r+0x78>
 8009456:	230c      	movs	r3, #12
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	e7d6      	b.n	800940a <_free_r+0x26>
 800945c:	6825      	ldr	r5, [r4, #0]
 800945e:	1961      	adds	r1, r4, r5
 8009460:	428b      	cmp	r3, r1
 8009462:	bf04      	itt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	bf04      	itt	eq
 800946c:	1949      	addeq	r1, r1, r5
 800946e:	6021      	streq	r1, [r4, #0]
 8009470:	6054      	str	r4, [r2, #4]
 8009472:	e7ca      	b.n	800940a <_free_r+0x26>
 8009474:	b003      	add	sp, #12
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	200004f8 	.word	0x200004f8

0800947c <malloc>:
 800947c:	4b02      	ldr	r3, [pc, #8]	; (8009488 <malloc+0xc>)
 800947e:	4601      	mov	r1, r0
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	f000 b823 	b.w	80094cc <_malloc_r>
 8009486:	bf00      	nop
 8009488:	20000064 	.word	0x20000064

0800948c <sbrk_aligned>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4e0e      	ldr	r6, [pc, #56]	; (80094c8 <sbrk_aligned+0x3c>)
 8009490:	460c      	mov	r4, r1
 8009492:	6831      	ldr	r1, [r6, #0]
 8009494:	4605      	mov	r5, r0
 8009496:	b911      	cbnz	r1, 800949e <sbrk_aligned+0x12>
 8009498:	f001 fe1a 	bl	800b0d0 <_sbrk_r>
 800949c:	6030      	str	r0, [r6, #0]
 800949e:	4621      	mov	r1, r4
 80094a0:	4628      	mov	r0, r5
 80094a2:	f001 fe15 	bl	800b0d0 <_sbrk_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d00a      	beq.n	80094c0 <sbrk_aligned+0x34>
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d007      	beq.n	80094c4 <sbrk_aligned+0x38>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4628      	mov	r0, r5
 80094b8:	f001 fe0a 	bl	800b0d0 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d101      	bne.n	80094c4 <sbrk_aligned+0x38>
 80094c0:	f04f 34ff 	mov.w	r4, #4294967295
 80094c4:	4620      	mov	r0, r4
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	200004fc 	.word	0x200004fc

080094cc <_malloc_r>:
 80094cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	1ccd      	adds	r5, r1, #3
 80094d2:	f025 0503 	bic.w	r5, r5, #3
 80094d6:	3508      	adds	r5, #8
 80094d8:	2d0c      	cmp	r5, #12
 80094da:	bf38      	it	cc
 80094dc:	250c      	movcc	r5, #12
 80094de:	2d00      	cmp	r5, #0
 80094e0:	4607      	mov	r7, r0
 80094e2:	db01      	blt.n	80094e8 <_malloc_r+0x1c>
 80094e4:	42a9      	cmp	r1, r5
 80094e6:	d905      	bls.n	80094f4 <_malloc_r+0x28>
 80094e8:	230c      	movs	r3, #12
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	2600      	movs	r6, #0
 80094ee:	4630      	mov	r0, r6
 80094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095c8 <_malloc_r+0xfc>
 80094f8:	f000 f868 	bl	80095cc <__malloc_lock>
 80094fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009500:	461c      	mov	r4, r3
 8009502:	bb5c      	cbnz	r4, 800955c <_malloc_r+0x90>
 8009504:	4629      	mov	r1, r5
 8009506:	4638      	mov	r0, r7
 8009508:	f7ff ffc0 	bl	800948c <sbrk_aligned>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	4604      	mov	r4, r0
 8009510:	d155      	bne.n	80095be <_malloc_r+0xf2>
 8009512:	f8d8 4000 	ldr.w	r4, [r8]
 8009516:	4626      	mov	r6, r4
 8009518:	2e00      	cmp	r6, #0
 800951a:	d145      	bne.n	80095a8 <_malloc_r+0xdc>
 800951c:	2c00      	cmp	r4, #0
 800951e:	d048      	beq.n	80095b2 <_malloc_r+0xe6>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	4631      	mov	r1, r6
 8009524:	4638      	mov	r0, r7
 8009526:	eb04 0903 	add.w	r9, r4, r3
 800952a:	f001 fdd1 	bl	800b0d0 <_sbrk_r>
 800952e:	4581      	cmp	r9, r0
 8009530:	d13f      	bne.n	80095b2 <_malloc_r+0xe6>
 8009532:	6821      	ldr	r1, [r4, #0]
 8009534:	1a6d      	subs	r5, r5, r1
 8009536:	4629      	mov	r1, r5
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff ffa7 	bl	800948c <sbrk_aligned>
 800953e:	3001      	adds	r0, #1
 8009540:	d037      	beq.n	80095b2 <_malloc_r+0xe6>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	442b      	add	r3, r5
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	f8d8 3000 	ldr.w	r3, [r8]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d038      	beq.n	80095c2 <_malloc_r+0xf6>
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	42a2      	cmp	r2, r4
 8009554:	d12b      	bne.n	80095ae <_malloc_r+0xe2>
 8009556:	2200      	movs	r2, #0
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	e00f      	b.n	800957c <_malloc_r+0xb0>
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	1b52      	subs	r2, r2, r5
 8009560:	d41f      	bmi.n	80095a2 <_malloc_r+0xd6>
 8009562:	2a0b      	cmp	r2, #11
 8009564:	d917      	bls.n	8009596 <_malloc_r+0xca>
 8009566:	1961      	adds	r1, r4, r5
 8009568:	42a3      	cmp	r3, r4
 800956a:	6025      	str	r5, [r4, #0]
 800956c:	bf18      	it	ne
 800956e:	6059      	strne	r1, [r3, #4]
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	bf08      	it	eq
 8009574:	f8c8 1000 	streq.w	r1, [r8]
 8009578:	5162      	str	r2, [r4, r5]
 800957a:	604b      	str	r3, [r1, #4]
 800957c:	4638      	mov	r0, r7
 800957e:	f104 060b 	add.w	r6, r4, #11
 8009582:	f000 f829 	bl	80095d8 <__malloc_unlock>
 8009586:	f026 0607 	bic.w	r6, r6, #7
 800958a:	1d23      	adds	r3, r4, #4
 800958c:	1af2      	subs	r2, r6, r3
 800958e:	d0ae      	beq.n	80094ee <_malloc_r+0x22>
 8009590:	1b9b      	subs	r3, r3, r6
 8009592:	50a3      	str	r3, [r4, r2]
 8009594:	e7ab      	b.n	80094ee <_malloc_r+0x22>
 8009596:	42a3      	cmp	r3, r4
 8009598:	6862      	ldr	r2, [r4, #4]
 800959a:	d1dd      	bne.n	8009558 <_malloc_r+0x8c>
 800959c:	f8c8 2000 	str.w	r2, [r8]
 80095a0:	e7ec      	b.n	800957c <_malloc_r+0xb0>
 80095a2:	4623      	mov	r3, r4
 80095a4:	6864      	ldr	r4, [r4, #4]
 80095a6:	e7ac      	b.n	8009502 <_malloc_r+0x36>
 80095a8:	4634      	mov	r4, r6
 80095aa:	6876      	ldr	r6, [r6, #4]
 80095ac:	e7b4      	b.n	8009518 <_malloc_r+0x4c>
 80095ae:	4613      	mov	r3, r2
 80095b0:	e7cc      	b.n	800954c <_malloc_r+0x80>
 80095b2:	230c      	movs	r3, #12
 80095b4:	603b      	str	r3, [r7, #0]
 80095b6:	4638      	mov	r0, r7
 80095b8:	f000 f80e 	bl	80095d8 <__malloc_unlock>
 80095bc:	e797      	b.n	80094ee <_malloc_r+0x22>
 80095be:	6025      	str	r5, [r4, #0]
 80095c0:	e7dc      	b.n	800957c <_malloc_r+0xb0>
 80095c2:	605b      	str	r3, [r3, #4]
 80095c4:	deff      	udf	#255	; 0xff
 80095c6:	bf00      	nop
 80095c8:	200004f8 	.word	0x200004f8

080095cc <__malloc_lock>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__malloc_lock+0x8>)
 80095ce:	f7ff b886 	b.w	80086de <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	200004f4 	.word	0x200004f4

080095d8 <__malloc_unlock>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__malloc_unlock+0x8>)
 80095da:	f7ff b881 	b.w	80086e0 <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	200004f4 	.word	0x200004f4

080095e4 <_Balloc>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	69c6      	ldr	r6, [r0, #28]
 80095e8:	4604      	mov	r4, r0
 80095ea:	460d      	mov	r5, r1
 80095ec:	b976      	cbnz	r6, 800960c <_Balloc+0x28>
 80095ee:	2010      	movs	r0, #16
 80095f0:	f7ff ff44 	bl	800947c <malloc>
 80095f4:	4602      	mov	r2, r0
 80095f6:	61e0      	str	r0, [r4, #28]
 80095f8:	b920      	cbnz	r0, 8009604 <_Balloc+0x20>
 80095fa:	4b18      	ldr	r3, [pc, #96]	; (800965c <_Balloc+0x78>)
 80095fc:	4818      	ldr	r0, [pc, #96]	; (8009660 <_Balloc+0x7c>)
 80095fe:	216b      	movs	r1, #107	; 0x6b
 8009600:	f001 fd8e 	bl	800b120 <__assert_func>
 8009604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009608:	6006      	str	r6, [r0, #0]
 800960a:	60c6      	str	r6, [r0, #12]
 800960c:	69e6      	ldr	r6, [r4, #28]
 800960e:	68f3      	ldr	r3, [r6, #12]
 8009610:	b183      	cbz	r3, 8009634 <_Balloc+0x50>
 8009612:	69e3      	ldr	r3, [r4, #28]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800961a:	b9b8      	cbnz	r0, 800964c <_Balloc+0x68>
 800961c:	2101      	movs	r1, #1
 800961e:	fa01 f605 	lsl.w	r6, r1, r5
 8009622:	1d72      	adds	r2, r6, #5
 8009624:	0092      	lsls	r2, r2, #2
 8009626:	4620      	mov	r0, r4
 8009628:	f001 fd98 	bl	800b15c <_calloc_r>
 800962c:	b160      	cbz	r0, 8009648 <_Balloc+0x64>
 800962e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009632:	e00e      	b.n	8009652 <_Balloc+0x6e>
 8009634:	2221      	movs	r2, #33	; 0x21
 8009636:	2104      	movs	r1, #4
 8009638:	4620      	mov	r0, r4
 800963a:	f001 fd8f 	bl	800b15c <_calloc_r>
 800963e:	69e3      	ldr	r3, [r4, #28]
 8009640:	60f0      	str	r0, [r6, #12]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e4      	bne.n	8009612 <_Balloc+0x2e>
 8009648:	2000      	movs	r0, #0
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	6802      	ldr	r2, [r0, #0]
 800964e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009652:	2300      	movs	r3, #0
 8009654:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009658:	e7f7      	b.n	800964a <_Balloc+0x66>
 800965a:	bf00      	nop
 800965c:	0800c99a 	.word	0x0800c99a
 8009660:	0800ca1a 	.word	0x0800ca1a

08009664 <_Bfree>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	69c6      	ldr	r6, [r0, #28]
 8009668:	4605      	mov	r5, r0
 800966a:	460c      	mov	r4, r1
 800966c:	b976      	cbnz	r6, 800968c <_Bfree+0x28>
 800966e:	2010      	movs	r0, #16
 8009670:	f7ff ff04 	bl	800947c <malloc>
 8009674:	4602      	mov	r2, r0
 8009676:	61e8      	str	r0, [r5, #28]
 8009678:	b920      	cbnz	r0, 8009684 <_Bfree+0x20>
 800967a:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <_Bfree+0x3c>)
 800967c:	4809      	ldr	r0, [pc, #36]	; (80096a4 <_Bfree+0x40>)
 800967e:	218f      	movs	r1, #143	; 0x8f
 8009680:	f001 fd4e 	bl	800b120 <__assert_func>
 8009684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009688:	6006      	str	r6, [r0, #0]
 800968a:	60c6      	str	r6, [r0, #12]
 800968c:	b13c      	cbz	r4, 800969e <_Bfree+0x3a>
 800968e:	69eb      	ldr	r3, [r5, #28]
 8009690:	6862      	ldr	r2, [r4, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009698:	6021      	str	r1, [r4, #0]
 800969a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800969e:	bd70      	pop	{r4, r5, r6, pc}
 80096a0:	0800c99a 	.word	0x0800c99a
 80096a4:	0800ca1a 	.word	0x0800ca1a

080096a8 <__multadd>:
 80096a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ac:	690d      	ldr	r5, [r1, #16]
 80096ae:	4607      	mov	r7, r0
 80096b0:	460c      	mov	r4, r1
 80096b2:	461e      	mov	r6, r3
 80096b4:	f101 0c14 	add.w	ip, r1, #20
 80096b8:	2000      	movs	r0, #0
 80096ba:	f8dc 3000 	ldr.w	r3, [ip]
 80096be:	b299      	uxth	r1, r3
 80096c0:	fb02 6101 	mla	r1, r2, r1, r6
 80096c4:	0c1e      	lsrs	r6, r3, #16
 80096c6:	0c0b      	lsrs	r3, r1, #16
 80096c8:	fb02 3306 	mla	r3, r2, r6, r3
 80096cc:	b289      	uxth	r1, r1
 80096ce:	3001      	adds	r0, #1
 80096d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096d4:	4285      	cmp	r5, r0
 80096d6:	f84c 1b04 	str.w	r1, [ip], #4
 80096da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096de:	dcec      	bgt.n	80096ba <__multadd+0x12>
 80096e0:	b30e      	cbz	r6, 8009726 <__multadd+0x7e>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	42ab      	cmp	r3, r5
 80096e6:	dc19      	bgt.n	800971c <__multadd+0x74>
 80096e8:	6861      	ldr	r1, [r4, #4]
 80096ea:	4638      	mov	r0, r7
 80096ec:	3101      	adds	r1, #1
 80096ee:	f7ff ff79 	bl	80095e4 <_Balloc>
 80096f2:	4680      	mov	r8, r0
 80096f4:	b928      	cbnz	r0, 8009702 <__multadd+0x5a>
 80096f6:	4602      	mov	r2, r0
 80096f8:	4b0c      	ldr	r3, [pc, #48]	; (800972c <__multadd+0x84>)
 80096fa:	480d      	ldr	r0, [pc, #52]	; (8009730 <__multadd+0x88>)
 80096fc:	21ba      	movs	r1, #186	; 0xba
 80096fe:	f001 fd0f 	bl	800b120 <__assert_func>
 8009702:	6922      	ldr	r2, [r4, #16]
 8009704:	3202      	adds	r2, #2
 8009706:	f104 010c 	add.w	r1, r4, #12
 800970a:	0092      	lsls	r2, r2, #2
 800970c:	300c      	adds	r0, #12
 800970e:	f001 fcef 	bl	800b0f0 <memcpy>
 8009712:	4621      	mov	r1, r4
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff ffa5 	bl	8009664 <_Bfree>
 800971a:	4644      	mov	r4, r8
 800971c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009720:	3501      	adds	r5, #1
 8009722:	615e      	str	r6, [r3, #20]
 8009724:	6125      	str	r5, [r4, #16]
 8009726:	4620      	mov	r0, r4
 8009728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972c:	0800ca09 	.word	0x0800ca09
 8009730:	0800ca1a 	.word	0x0800ca1a

08009734 <__s2b>:
 8009734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009738:	460c      	mov	r4, r1
 800973a:	4615      	mov	r5, r2
 800973c:	461f      	mov	r7, r3
 800973e:	2209      	movs	r2, #9
 8009740:	3308      	adds	r3, #8
 8009742:	4606      	mov	r6, r0
 8009744:	fb93 f3f2 	sdiv	r3, r3, r2
 8009748:	2100      	movs	r1, #0
 800974a:	2201      	movs	r2, #1
 800974c:	429a      	cmp	r2, r3
 800974e:	db09      	blt.n	8009764 <__s2b+0x30>
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ff47 	bl	80095e4 <_Balloc>
 8009756:	b940      	cbnz	r0, 800976a <__s2b+0x36>
 8009758:	4602      	mov	r2, r0
 800975a:	4b19      	ldr	r3, [pc, #100]	; (80097c0 <__s2b+0x8c>)
 800975c:	4819      	ldr	r0, [pc, #100]	; (80097c4 <__s2b+0x90>)
 800975e:	21d3      	movs	r1, #211	; 0xd3
 8009760:	f001 fcde 	bl	800b120 <__assert_func>
 8009764:	0052      	lsls	r2, r2, #1
 8009766:	3101      	adds	r1, #1
 8009768:	e7f0      	b.n	800974c <__s2b+0x18>
 800976a:	9b08      	ldr	r3, [sp, #32]
 800976c:	6143      	str	r3, [r0, #20]
 800976e:	2d09      	cmp	r5, #9
 8009770:	f04f 0301 	mov.w	r3, #1
 8009774:	6103      	str	r3, [r0, #16]
 8009776:	dd16      	ble.n	80097a6 <__s2b+0x72>
 8009778:	f104 0909 	add.w	r9, r4, #9
 800977c:	46c8      	mov	r8, r9
 800977e:	442c      	add	r4, r5
 8009780:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009784:	4601      	mov	r1, r0
 8009786:	3b30      	subs	r3, #48	; 0x30
 8009788:	220a      	movs	r2, #10
 800978a:	4630      	mov	r0, r6
 800978c:	f7ff ff8c 	bl	80096a8 <__multadd>
 8009790:	45a0      	cmp	r8, r4
 8009792:	d1f5      	bne.n	8009780 <__s2b+0x4c>
 8009794:	f1a5 0408 	sub.w	r4, r5, #8
 8009798:	444c      	add	r4, r9
 800979a:	1b2d      	subs	r5, r5, r4
 800979c:	1963      	adds	r3, r4, r5
 800979e:	42bb      	cmp	r3, r7
 80097a0:	db04      	blt.n	80097ac <__s2b+0x78>
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a6:	340a      	adds	r4, #10
 80097a8:	2509      	movs	r5, #9
 80097aa:	e7f6      	b.n	800979a <__s2b+0x66>
 80097ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097b0:	4601      	mov	r1, r0
 80097b2:	3b30      	subs	r3, #48	; 0x30
 80097b4:	220a      	movs	r2, #10
 80097b6:	4630      	mov	r0, r6
 80097b8:	f7ff ff76 	bl	80096a8 <__multadd>
 80097bc:	e7ee      	b.n	800979c <__s2b+0x68>
 80097be:	bf00      	nop
 80097c0:	0800ca09 	.word	0x0800ca09
 80097c4:	0800ca1a 	.word	0x0800ca1a

080097c8 <__hi0bits>:
 80097c8:	0c03      	lsrs	r3, r0, #16
 80097ca:	041b      	lsls	r3, r3, #16
 80097cc:	b9d3      	cbnz	r3, 8009804 <__hi0bits+0x3c>
 80097ce:	0400      	lsls	r0, r0, #16
 80097d0:	2310      	movs	r3, #16
 80097d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097d6:	bf04      	itt	eq
 80097d8:	0200      	lsleq	r0, r0, #8
 80097da:	3308      	addeq	r3, #8
 80097dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097e0:	bf04      	itt	eq
 80097e2:	0100      	lsleq	r0, r0, #4
 80097e4:	3304      	addeq	r3, #4
 80097e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097ea:	bf04      	itt	eq
 80097ec:	0080      	lsleq	r0, r0, #2
 80097ee:	3302      	addeq	r3, #2
 80097f0:	2800      	cmp	r0, #0
 80097f2:	db05      	blt.n	8009800 <__hi0bits+0x38>
 80097f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097f8:	f103 0301 	add.w	r3, r3, #1
 80097fc:	bf08      	it	eq
 80097fe:	2320      	moveq	r3, #32
 8009800:	4618      	mov	r0, r3
 8009802:	4770      	bx	lr
 8009804:	2300      	movs	r3, #0
 8009806:	e7e4      	b.n	80097d2 <__hi0bits+0xa>

08009808 <__lo0bits>:
 8009808:	6803      	ldr	r3, [r0, #0]
 800980a:	f013 0207 	ands.w	r2, r3, #7
 800980e:	d00c      	beq.n	800982a <__lo0bits+0x22>
 8009810:	07d9      	lsls	r1, r3, #31
 8009812:	d422      	bmi.n	800985a <__lo0bits+0x52>
 8009814:	079a      	lsls	r2, r3, #30
 8009816:	bf49      	itett	mi
 8009818:	085b      	lsrmi	r3, r3, #1
 800981a:	089b      	lsrpl	r3, r3, #2
 800981c:	6003      	strmi	r3, [r0, #0]
 800981e:	2201      	movmi	r2, #1
 8009820:	bf5c      	itt	pl
 8009822:	6003      	strpl	r3, [r0, #0]
 8009824:	2202      	movpl	r2, #2
 8009826:	4610      	mov	r0, r2
 8009828:	4770      	bx	lr
 800982a:	b299      	uxth	r1, r3
 800982c:	b909      	cbnz	r1, 8009832 <__lo0bits+0x2a>
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	2210      	movs	r2, #16
 8009832:	b2d9      	uxtb	r1, r3
 8009834:	b909      	cbnz	r1, 800983a <__lo0bits+0x32>
 8009836:	3208      	adds	r2, #8
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	0719      	lsls	r1, r3, #28
 800983c:	bf04      	itt	eq
 800983e:	091b      	lsreq	r3, r3, #4
 8009840:	3204      	addeq	r2, #4
 8009842:	0799      	lsls	r1, r3, #30
 8009844:	bf04      	itt	eq
 8009846:	089b      	lsreq	r3, r3, #2
 8009848:	3202      	addeq	r2, #2
 800984a:	07d9      	lsls	r1, r3, #31
 800984c:	d403      	bmi.n	8009856 <__lo0bits+0x4e>
 800984e:	085b      	lsrs	r3, r3, #1
 8009850:	f102 0201 	add.w	r2, r2, #1
 8009854:	d003      	beq.n	800985e <__lo0bits+0x56>
 8009856:	6003      	str	r3, [r0, #0]
 8009858:	e7e5      	b.n	8009826 <__lo0bits+0x1e>
 800985a:	2200      	movs	r2, #0
 800985c:	e7e3      	b.n	8009826 <__lo0bits+0x1e>
 800985e:	2220      	movs	r2, #32
 8009860:	e7e1      	b.n	8009826 <__lo0bits+0x1e>
	...

08009864 <__i2b>:
 8009864:	b510      	push	{r4, lr}
 8009866:	460c      	mov	r4, r1
 8009868:	2101      	movs	r1, #1
 800986a:	f7ff febb 	bl	80095e4 <_Balloc>
 800986e:	4602      	mov	r2, r0
 8009870:	b928      	cbnz	r0, 800987e <__i2b+0x1a>
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <__i2b+0x24>)
 8009874:	4805      	ldr	r0, [pc, #20]	; (800988c <__i2b+0x28>)
 8009876:	f240 1145 	movw	r1, #325	; 0x145
 800987a:	f001 fc51 	bl	800b120 <__assert_func>
 800987e:	2301      	movs	r3, #1
 8009880:	6144      	str	r4, [r0, #20]
 8009882:	6103      	str	r3, [r0, #16]
 8009884:	bd10      	pop	{r4, pc}
 8009886:	bf00      	nop
 8009888:	0800ca09 	.word	0x0800ca09
 800988c:	0800ca1a 	.word	0x0800ca1a

08009890 <__multiply>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	4691      	mov	r9, r2
 8009896:	690a      	ldr	r2, [r1, #16]
 8009898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800989c:	429a      	cmp	r2, r3
 800989e:	bfb8      	it	lt
 80098a0:	460b      	movlt	r3, r1
 80098a2:	460c      	mov	r4, r1
 80098a4:	bfbc      	itt	lt
 80098a6:	464c      	movlt	r4, r9
 80098a8:	4699      	movlt	r9, r3
 80098aa:	6927      	ldr	r7, [r4, #16]
 80098ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098b0:	68a3      	ldr	r3, [r4, #8]
 80098b2:	6861      	ldr	r1, [r4, #4]
 80098b4:	eb07 060a 	add.w	r6, r7, sl
 80098b8:	42b3      	cmp	r3, r6
 80098ba:	b085      	sub	sp, #20
 80098bc:	bfb8      	it	lt
 80098be:	3101      	addlt	r1, #1
 80098c0:	f7ff fe90 	bl	80095e4 <_Balloc>
 80098c4:	b930      	cbnz	r0, 80098d4 <__multiply+0x44>
 80098c6:	4602      	mov	r2, r0
 80098c8:	4b44      	ldr	r3, [pc, #272]	; (80099dc <__multiply+0x14c>)
 80098ca:	4845      	ldr	r0, [pc, #276]	; (80099e0 <__multiply+0x150>)
 80098cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80098d0:	f001 fc26 	bl	800b120 <__assert_func>
 80098d4:	f100 0514 	add.w	r5, r0, #20
 80098d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098dc:	462b      	mov	r3, r5
 80098de:	2200      	movs	r2, #0
 80098e0:	4543      	cmp	r3, r8
 80098e2:	d321      	bcc.n	8009928 <__multiply+0x98>
 80098e4:	f104 0314 	add.w	r3, r4, #20
 80098e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098ec:	f109 0314 	add.w	r3, r9, #20
 80098f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098f4:	9202      	str	r2, [sp, #8]
 80098f6:	1b3a      	subs	r2, r7, r4
 80098f8:	3a15      	subs	r2, #21
 80098fa:	f022 0203 	bic.w	r2, r2, #3
 80098fe:	3204      	adds	r2, #4
 8009900:	f104 0115 	add.w	r1, r4, #21
 8009904:	428f      	cmp	r7, r1
 8009906:	bf38      	it	cc
 8009908:	2204      	movcc	r2, #4
 800990a:	9201      	str	r2, [sp, #4]
 800990c:	9a02      	ldr	r2, [sp, #8]
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	429a      	cmp	r2, r3
 8009912:	d80c      	bhi.n	800992e <__multiply+0x9e>
 8009914:	2e00      	cmp	r6, #0
 8009916:	dd03      	ble.n	8009920 <__multiply+0x90>
 8009918:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800991c:	2b00      	cmp	r3, #0
 800991e:	d05b      	beq.n	80099d8 <__multiply+0x148>
 8009920:	6106      	str	r6, [r0, #16]
 8009922:	b005      	add	sp, #20
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	f843 2b04 	str.w	r2, [r3], #4
 800992c:	e7d8      	b.n	80098e0 <__multiply+0x50>
 800992e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009932:	f1ba 0f00 	cmp.w	sl, #0
 8009936:	d024      	beq.n	8009982 <__multiply+0xf2>
 8009938:	f104 0e14 	add.w	lr, r4, #20
 800993c:	46a9      	mov	r9, r5
 800993e:	f04f 0c00 	mov.w	ip, #0
 8009942:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009946:	f8d9 1000 	ldr.w	r1, [r9]
 800994a:	fa1f fb82 	uxth.w	fp, r2
 800994e:	b289      	uxth	r1, r1
 8009950:	fb0a 110b 	mla	r1, sl, fp, r1
 8009954:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009958:	f8d9 2000 	ldr.w	r2, [r9]
 800995c:	4461      	add	r1, ip
 800995e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009962:	fb0a c20b 	mla	r2, sl, fp, ip
 8009966:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800996a:	b289      	uxth	r1, r1
 800996c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009970:	4577      	cmp	r7, lr
 8009972:	f849 1b04 	str.w	r1, [r9], #4
 8009976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800997a:	d8e2      	bhi.n	8009942 <__multiply+0xb2>
 800997c:	9a01      	ldr	r2, [sp, #4]
 800997e:	f845 c002 	str.w	ip, [r5, r2]
 8009982:	9a03      	ldr	r2, [sp, #12]
 8009984:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009988:	3304      	adds	r3, #4
 800998a:	f1b9 0f00 	cmp.w	r9, #0
 800998e:	d021      	beq.n	80099d4 <__multiply+0x144>
 8009990:	6829      	ldr	r1, [r5, #0]
 8009992:	f104 0c14 	add.w	ip, r4, #20
 8009996:	46ae      	mov	lr, r5
 8009998:	f04f 0a00 	mov.w	sl, #0
 800999c:	f8bc b000 	ldrh.w	fp, [ip]
 80099a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099a4:	fb09 220b 	mla	r2, r9, fp, r2
 80099a8:	4452      	add	r2, sl
 80099aa:	b289      	uxth	r1, r1
 80099ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099b0:	f84e 1b04 	str.w	r1, [lr], #4
 80099b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099bc:	f8be 1000 	ldrh.w	r1, [lr]
 80099c0:	fb09 110a 	mla	r1, r9, sl, r1
 80099c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80099c8:	4567      	cmp	r7, ip
 80099ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099ce:	d8e5      	bhi.n	800999c <__multiply+0x10c>
 80099d0:	9a01      	ldr	r2, [sp, #4]
 80099d2:	50a9      	str	r1, [r5, r2]
 80099d4:	3504      	adds	r5, #4
 80099d6:	e799      	b.n	800990c <__multiply+0x7c>
 80099d8:	3e01      	subs	r6, #1
 80099da:	e79b      	b.n	8009914 <__multiply+0x84>
 80099dc:	0800ca09 	.word	0x0800ca09
 80099e0:	0800ca1a 	.word	0x0800ca1a

080099e4 <__pow5mult>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4615      	mov	r5, r2
 80099ea:	f012 0203 	ands.w	r2, r2, #3
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	d007      	beq.n	8009a04 <__pow5mult+0x20>
 80099f4:	4c25      	ldr	r4, [pc, #148]	; (8009a8c <__pow5mult+0xa8>)
 80099f6:	3a01      	subs	r2, #1
 80099f8:	2300      	movs	r3, #0
 80099fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099fe:	f7ff fe53 	bl	80096a8 <__multadd>
 8009a02:	4607      	mov	r7, r0
 8009a04:	10ad      	asrs	r5, r5, #2
 8009a06:	d03d      	beq.n	8009a84 <__pow5mult+0xa0>
 8009a08:	69f4      	ldr	r4, [r6, #28]
 8009a0a:	b97c      	cbnz	r4, 8009a2c <__pow5mult+0x48>
 8009a0c:	2010      	movs	r0, #16
 8009a0e:	f7ff fd35 	bl	800947c <malloc>
 8009a12:	4602      	mov	r2, r0
 8009a14:	61f0      	str	r0, [r6, #28]
 8009a16:	b928      	cbnz	r0, 8009a24 <__pow5mult+0x40>
 8009a18:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <__pow5mult+0xac>)
 8009a1a:	481e      	ldr	r0, [pc, #120]	; (8009a94 <__pow5mult+0xb0>)
 8009a1c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a20:	f001 fb7e 	bl	800b120 <__assert_func>
 8009a24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a28:	6004      	str	r4, [r0, #0]
 8009a2a:	60c4      	str	r4, [r0, #12]
 8009a2c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a34:	b94c      	cbnz	r4, 8009a4a <__pow5mult+0x66>
 8009a36:	f240 2171 	movw	r1, #625	; 0x271
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff12 	bl	8009864 <__i2b>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a46:	4604      	mov	r4, r0
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	07eb      	lsls	r3, r5, #31
 8009a50:	d50a      	bpl.n	8009a68 <__pow5mult+0x84>
 8009a52:	4639      	mov	r1, r7
 8009a54:	4622      	mov	r2, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff ff1a 	bl	8009890 <__multiply>
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff fdff 	bl	8009664 <_Bfree>
 8009a66:	4647      	mov	r7, r8
 8009a68:	106d      	asrs	r5, r5, #1
 8009a6a:	d00b      	beq.n	8009a84 <__pow5mult+0xa0>
 8009a6c:	6820      	ldr	r0, [r4, #0]
 8009a6e:	b938      	cbnz	r0, 8009a80 <__pow5mult+0x9c>
 8009a70:	4622      	mov	r2, r4
 8009a72:	4621      	mov	r1, r4
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7ff ff0b 	bl	8009890 <__multiply>
 8009a7a:	6020      	str	r0, [r4, #0]
 8009a7c:	f8c0 9000 	str.w	r9, [r0]
 8009a80:	4604      	mov	r4, r0
 8009a82:	e7e4      	b.n	8009a4e <__pow5mult+0x6a>
 8009a84:	4638      	mov	r0, r7
 8009a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0800cb68 	.word	0x0800cb68
 8009a90:	0800c99a 	.word	0x0800c99a
 8009a94:	0800ca1a 	.word	0x0800ca1a

08009a98 <__lshift>:
 8009a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	6849      	ldr	r1, [r1, #4]
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	4691      	mov	r9, r2
 8009aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab0:	f108 0601 	add.w	r6, r8, #1
 8009ab4:	42b3      	cmp	r3, r6
 8009ab6:	db0b      	blt.n	8009ad0 <__lshift+0x38>
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff fd93 	bl	80095e4 <_Balloc>
 8009abe:	4605      	mov	r5, r0
 8009ac0:	b948      	cbnz	r0, 8009ad6 <__lshift+0x3e>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	4b28      	ldr	r3, [pc, #160]	; (8009b68 <__lshift+0xd0>)
 8009ac6:	4829      	ldr	r0, [pc, #164]	; (8009b6c <__lshift+0xd4>)
 8009ac8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009acc:	f001 fb28 	bl	800b120 <__assert_func>
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__lshift+0x1c>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f100 0114 	add.w	r1, r0, #20
 8009adc:	f100 0210 	add.w	r2, r0, #16
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	4553      	cmp	r3, sl
 8009ae4:	db33      	blt.n	8009b4e <__lshift+0xb6>
 8009ae6:	6920      	ldr	r0, [r4, #16]
 8009ae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aec:	f104 0314 	add.w	r3, r4, #20
 8009af0:	f019 091f 	ands.w	r9, r9, #31
 8009af4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009afc:	d02b      	beq.n	8009b56 <__lshift+0xbe>
 8009afe:	f1c9 0e20 	rsb	lr, r9, #32
 8009b02:	468a      	mov	sl, r1
 8009b04:	2200      	movs	r2, #0
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	fa00 f009 	lsl.w	r0, r0, r9
 8009b0c:	4310      	orrs	r0, r2
 8009b0e:	f84a 0b04 	str.w	r0, [sl], #4
 8009b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b16:	459c      	cmp	ip, r3
 8009b18:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b1c:	d8f3      	bhi.n	8009b06 <__lshift+0x6e>
 8009b1e:	ebac 0304 	sub.w	r3, ip, r4
 8009b22:	3b15      	subs	r3, #21
 8009b24:	f023 0303 	bic.w	r3, r3, #3
 8009b28:	3304      	adds	r3, #4
 8009b2a:	f104 0015 	add.w	r0, r4, #21
 8009b2e:	4584      	cmp	ip, r0
 8009b30:	bf38      	it	cc
 8009b32:	2304      	movcc	r3, #4
 8009b34:	50ca      	str	r2, [r1, r3]
 8009b36:	b10a      	cbz	r2, 8009b3c <__lshift+0xa4>
 8009b38:	f108 0602 	add.w	r6, r8, #2
 8009b3c:	3e01      	subs	r6, #1
 8009b3e:	4638      	mov	r0, r7
 8009b40:	612e      	str	r6, [r5, #16]
 8009b42:	4621      	mov	r1, r4
 8009b44:	f7ff fd8e 	bl	8009664 <_Bfree>
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b52:	3301      	adds	r3, #1
 8009b54:	e7c5      	b.n	8009ae2 <__lshift+0x4a>
 8009b56:	3904      	subs	r1, #4
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b60:	459c      	cmp	ip, r3
 8009b62:	d8f9      	bhi.n	8009b58 <__lshift+0xc0>
 8009b64:	e7ea      	b.n	8009b3c <__lshift+0xa4>
 8009b66:	bf00      	nop
 8009b68:	0800ca09 	.word	0x0800ca09
 8009b6c:	0800ca1a 	.word	0x0800ca1a

08009b70 <__mcmp>:
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	6902      	ldr	r2, [r0, #16]
 8009b74:	690c      	ldr	r4, [r1, #16]
 8009b76:	1b12      	subs	r2, r2, r4
 8009b78:	d10e      	bne.n	8009b98 <__mcmp+0x28>
 8009b7a:	f100 0314 	add.w	r3, r0, #20
 8009b7e:	3114      	adds	r1, #20
 8009b80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b90:	42a5      	cmp	r5, r4
 8009b92:	d003      	beq.n	8009b9c <__mcmp+0x2c>
 8009b94:	d305      	bcc.n	8009ba2 <__mcmp+0x32>
 8009b96:	2201      	movs	r2, #1
 8009b98:	4610      	mov	r0, r2
 8009b9a:	bd30      	pop	{r4, r5, pc}
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	d3f3      	bcc.n	8009b88 <__mcmp+0x18>
 8009ba0:	e7fa      	b.n	8009b98 <__mcmp+0x28>
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba6:	e7f7      	b.n	8009b98 <__mcmp+0x28>

08009ba8 <__mdiff>:
 8009ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	4606      	mov	r6, r0
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4690      	mov	r8, r2
 8009bb6:	f7ff ffdb 	bl	8009b70 <__mcmp>
 8009bba:	1e05      	subs	r5, r0, #0
 8009bbc:	d110      	bne.n	8009be0 <__mdiff+0x38>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff fd0f 	bl	80095e4 <_Balloc>
 8009bc6:	b930      	cbnz	r0, 8009bd6 <__mdiff+0x2e>
 8009bc8:	4b3a      	ldr	r3, [pc, #232]	; (8009cb4 <__mdiff+0x10c>)
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f240 2137 	movw	r1, #567	; 0x237
 8009bd0:	4839      	ldr	r0, [pc, #228]	; (8009cb8 <__mdiff+0x110>)
 8009bd2:	f001 faa5 	bl	800b120 <__assert_func>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	bfa4      	itt	ge
 8009be2:	4643      	movge	r3, r8
 8009be4:	46a0      	movge	r8, r4
 8009be6:	4630      	mov	r0, r6
 8009be8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bec:	bfa6      	itte	ge
 8009bee:	461c      	movge	r4, r3
 8009bf0:	2500      	movge	r5, #0
 8009bf2:	2501      	movlt	r5, #1
 8009bf4:	f7ff fcf6 	bl	80095e4 <_Balloc>
 8009bf8:	b920      	cbnz	r0, 8009c04 <__mdiff+0x5c>
 8009bfa:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <__mdiff+0x10c>)
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	f240 2145 	movw	r1, #581	; 0x245
 8009c02:	e7e5      	b.n	8009bd0 <__mdiff+0x28>
 8009c04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c08:	6926      	ldr	r6, [r4, #16]
 8009c0a:	60c5      	str	r5, [r0, #12]
 8009c0c:	f104 0914 	add.w	r9, r4, #20
 8009c10:	f108 0514 	add.w	r5, r8, #20
 8009c14:	f100 0e14 	add.w	lr, r0, #20
 8009c18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c20:	f108 0210 	add.w	r2, r8, #16
 8009c24:	46f2      	mov	sl, lr
 8009c26:	2100      	movs	r1, #0
 8009c28:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c30:	fa11 f88b 	uxtah	r8, r1, fp
 8009c34:	b299      	uxth	r1, r3
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	eba8 0801 	sub.w	r8, r8, r1
 8009c3c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c40:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c44:	fa1f f888 	uxth.w	r8, r8
 8009c48:	1419      	asrs	r1, r3, #16
 8009c4a:	454e      	cmp	r6, r9
 8009c4c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c50:	f84a 3b04 	str.w	r3, [sl], #4
 8009c54:	d8e8      	bhi.n	8009c28 <__mdiff+0x80>
 8009c56:	1b33      	subs	r3, r6, r4
 8009c58:	3b15      	subs	r3, #21
 8009c5a:	f023 0303 	bic.w	r3, r3, #3
 8009c5e:	3304      	adds	r3, #4
 8009c60:	3415      	adds	r4, #21
 8009c62:	42a6      	cmp	r6, r4
 8009c64:	bf38      	it	cc
 8009c66:	2304      	movcc	r3, #4
 8009c68:	441d      	add	r5, r3
 8009c6a:	4473      	add	r3, lr
 8009c6c:	469e      	mov	lr, r3
 8009c6e:	462e      	mov	r6, r5
 8009c70:	4566      	cmp	r6, ip
 8009c72:	d30e      	bcc.n	8009c92 <__mdiff+0xea>
 8009c74:	f10c 0203 	add.w	r2, ip, #3
 8009c78:	1b52      	subs	r2, r2, r5
 8009c7a:	f022 0203 	bic.w	r2, r2, #3
 8009c7e:	3d03      	subs	r5, #3
 8009c80:	45ac      	cmp	ip, r5
 8009c82:	bf38      	it	cc
 8009c84:	2200      	movcc	r2, #0
 8009c86:	4413      	add	r3, r2
 8009c88:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c8c:	b17a      	cbz	r2, 8009cae <__mdiff+0x106>
 8009c8e:	6107      	str	r7, [r0, #16]
 8009c90:	e7a4      	b.n	8009bdc <__mdiff+0x34>
 8009c92:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c96:	fa11 f288 	uxtah	r2, r1, r8
 8009c9a:	1414      	asrs	r4, r2, #16
 8009c9c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ca0:	b292      	uxth	r2, r2
 8009ca2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ca6:	f84e 2b04 	str.w	r2, [lr], #4
 8009caa:	1421      	asrs	r1, r4, #16
 8009cac:	e7e0      	b.n	8009c70 <__mdiff+0xc8>
 8009cae:	3f01      	subs	r7, #1
 8009cb0:	e7ea      	b.n	8009c88 <__mdiff+0xe0>
 8009cb2:	bf00      	nop
 8009cb4:	0800ca09 	.word	0x0800ca09
 8009cb8:	0800ca1a 	.word	0x0800ca1a

08009cbc <__ulp>:
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	ed8d 0b00 	vstr	d0, [sp]
 8009cc2:	9a01      	ldr	r2, [sp, #4]
 8009cc4:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <__ulp+0x48>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dc08      	bgt.n	8009ce2 <__ulp+0x26>
 8009cd0:	425b      	negs	r3, r3
 8009cd2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009cd6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cda:	da04      	bge.n	8009ce6 <__ulp+0x2a>
 8009cdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ce0:	4113      	asrs	r3, r2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	e008      	b.n	8009cf8 <__ulp+0x3c>
 8009ce6:	f1a2 0314 	sub.w	r3, r2, #20
 8009cea:	2b1e      	cmp	r3, #30
 8009cec:	bfda      	itte	le
 8009cee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009cf2:	40da      	lsrle	r2, r3
 8009cf4:	2201      	movgt	r2, #1
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	ec41 0b10 	vmov	d0, r0, r1
 8009d00:	b002      	add	sp, #8
 8009d02:	4770      	bx	lr
 8009d04:	7ff00000 	.word	0x7ff00000

08009d08 <__b2d>:
 8009d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0c:	6906      	ldr	r6, [r0, #16]
 8009d0e:	f100 0814 	add.w	r8, r0, #20
 8009d12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d16:	1f37      	subs	r7, r6, #4
 8009d18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	f7ff fd53 	bl	80097c8 <__hi0bits>
 8009d22:	f1c0 0320 	rsb	r3, r0, #32
 8009d26:	280a      	cmp	r0, #10
 8009d28:	600b      	str	r3, [r1, #0]
 8009d2a:	491b      	ldr	r1, [pc, #108]	; (8009d98 <__b2d+0x90>)
 8009d2c:	dc15      	bgt.n	8009d5a <__b2d+0x52>
 8009d2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d32:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d36:	45b8      	cmp	r8, r7
 8009d38:	ea43 0501 	orr.w	r5, r3, r1
 8009d3c:	bf34      	ite	cc
 8009d3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d42:	2300      	movcs	r3, #0
 8009d44:	3015      	adds	r0, #21
 8009d46:	fa02 f000 	lsl.w	r0, r2, r0
 8009d4a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d4e:	4303      	orrs	r3, r0
 8009d50:	461c      	mov	r4, r3
 8009d52:	ec45 4b10 	vmov	d0, r4, r5
 8009d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d5a:	45b8      	cmp	r8, r7
 8009d5c:	bf3a      	itte	cc
 8009d5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d62:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d66:	2300      	movcs	r3, #0
 8009d68:	380b      	subs	r0, #11
 8009d6a:	d012      	beq.n	8009d92 <__b2d+0x8a>
 8009d6c:	f1c0 0120 	rsb	r1, r0, #32
 8009d70:	fa23 f401 	lsr.w	r4, r3, r1
 8009d74:	4082      	lsls	r2, r0
 8009d76:	4322      	orrs	r2, r4
 8009d78:	4547      	cmp	r7, r8
 8009d7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009d7e:	bf8c      	ite	hi
 8009d80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d84:	2200      	movls	r2, #0
 8009d86:	4083      	lsls	r3, r0
 8009d88:	40ca      	lsrs	r2, r1
 8009d8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	e7de      	b.n	8009d50 <__b2d+0x48>
 8009d92:	ea42 0501 	orr.w	r5, r2, r1
 8009d96:	e7db      	b.n	8009d50 <__b2d+0x48>
 8009d98:	3ff00000 	.word	0x3ff00000

08009d9c <__d2b>:
 8009d9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009da0:	460f      	mov	r7, r1
 8009da2:	2101      	movs	r1, #1
 8009da4:	ec59 8b10 	vmov	r8, r9, d0
 8009da8:	4616      	mov	r6, r2
 8009daa:	f7ff fc1b 	bl	80095e4 <_Balloc>
 8009dae:	4604      	mov	r4, r0
 8009db0:	b930      	cbnz	r0, 8009dc0 <__d2b+0x24>
 8009db2:	4602      	mov	r2, r0
 8009db4:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <__d2b+0xac>)
 8009db6:	4825      	ldr	r0, [pc, #148]	; (8009e4c <__d2b+0xb0>)
 8009db8:	f240 310f 	movw	r1, #783	; 0x30f
 8009dbc:	f001 f9b0 	bl	800b120 <__assert_func>
 8009dc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dc8:	bb2d      	cbnz	r5, 8009e16 <__d2b+0x7a>
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	f1b8 0300 	subs.w	r3, r8, #0
 8009dd0:	d026      	beq.n	8009e20 <__d2b+0x84>
 8009dd2:	4668      	mov	r0, sp
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f7ff fd17 	bl	8009808 <__lo0bits>
 8009dda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dde:	b1e8      	cbz	r0, 8009e1c <__d2b+0x80>
 8009de0:	f1c0 0320 	rsb	r3, r0, #32
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	430b      	orrs	r3, r1
 8009dea:	40c2      	lsrs	r2, r0
 8009dec:	6163      	str	r3, [r4, #20]
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	61a3      	str	r3, [r4, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bf14      	ite	ne
 8009df8:	2202      	movne	r2, #2
 8009dfa:	2201      	moveq	r2, #1
 8009dfc:	6122      	str	r2, [r4, #16]
 8009dfe:	b1bd      	cbz	r5, 8009e30 <__d2b+0x94>
 8009e00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e04:	4405      	add	r5, r0
 8009e06:	603d      	str	r5, [r7, #0]
 8009e08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e0c:	6030      	str	r0, [r6, #0]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	b003      	add	sp, #12
 8009e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e1a:	e7d6      	b.n	8009dca <__d2b+0x2e>
 8009e1c:	6161      	str	r1, [r4, #20]
 8009e1e:	e7e7      	b.n	8009df0 <__d2b+0x54>
 8009e20:	a801      	add	r0, sp, #4
 8009e22:	f7ff fcf1 	bl	8009808 <__lo0bits>
 8009e26:	9b01      	ldr	r3, [sp, #4]
 8009e28:	6163      	str	r3, [r4, #20]
 8009e2a:	3020      	adds	r0, #32
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	e7e5      	b.n	8009dfc <__d2b+0x60>
 8009e30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e38:	6038      	str	r0, [r7, #0]
 8009e3a:	6918      	ldr	r0, [r3, #16]
 8009e3c:	f7ff fcc4 	bl	80097c8 <__hi0bits>
 8009e40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e44:	e7e2      	b.n	8009e0c <__d2b+0x70>
 8009e46:	bf00      	nop
 8009e48:	0800ca09 	.word	0x0800ca09
 8009e4c:	0800ca1a 	.word	0x0800ca1a

08009e50 <__ratio>:
 8009e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	4688      	mov	r8, r1
 8009e56:	4669      	mov	r1, sp
 8009e58:	4681      	mov	r9, r0
 8009e5a:	f7ff ff55 	bl	8009d08 <__b2d>
 8009e5e:	a901      	add	r1, sp, #4
 8009e60:	4640      	mov	r0, r8
 8009e62:	ec55 4b10 	vmov	r4, r5, d0
 8009e66:	f7ff ff4f 	bl	8009d08 <__b2d>
 8009e6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e72:	eba3 0c02 	sub.w	ip, r3, r2
 8009e76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e7a:	1a9b      	subs	r3, r3, r2
 8009e7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e80:	ec51 0b10 	vmov	r0, r1, d0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	bfd6      	itet	le
 8009e88:	460a      	movle	r2, r1
 8009e8a:	462a      	movgt	r2, r5
 8009e8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e90:	468b      	mov	fp, r1
 8009e92:	462f      	mov	r7, r5
 8009e94:	bfd4      	ite	le
 8009e96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	ee10 2a10 	vmov	r2, s0
 8009ea4:	465b      	mov	r3, fp
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 fcd0 	bl	800084c <__aeabi_ddiv>
 8009eac:	ec41 0b10 	vmov	d0, r0, r1
 8009eb0:	b003      	add	sp, #12
 8009eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eb6 <__copybits>:
 8009eb6:	3901      	subs	r1, #1
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	1149      	asrs	r1, r1, #5
 8009ebc:	6914      	ldr	r4, [r2, #16]
 8009ebe:	3101      	adds	r1, #1
 8009ec0:	f102 0314 	add.w	r3, r2, #20
 8009ec4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ec8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ecc:	1f05      	subs	r5, r0, #4
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	d30c      	bcc.n	8009eec <__copybits+0x36>
 8009ed2:	1aa3      	subs	r3, r4, r2
 8009ed4:	3b11      	subs	r3, #17
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	3211      	adds	r2, #17
 8009edc:	42a2      	cmp	r2, r4
 8009ede:	bf88      	it	hi
 8009ee0:	2300      	movhi	r3, #0
 8009ee2:	4418      	add	r0, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4288      	cmp	r0, r1
 8009ee8:	d305      	bcc.n	8009ef6 <__copybits+0x40>
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ef0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ef4:	e7eb      	b.n	8009ece <__copybits+0x18>
 8009ef6:	f840 3b04 	str.w	r3, [r0], #4
 8009efa:	e7f4      	b.n	8009ee6 <__copybits+0x30>

08009efc <__any_on>:
 8009efc:	f100 0214 	add.w	r2, r0, #20
 8009f00:	6900      	ldr	r0, [r0, #16]
 8009f02:	114b      	asrs	r3, r1, #5
 8009f04:	4298      	cmp	r0, r3
 8009f06:	b510      	push	{r4, lr}
 8009f08:	db11      	blt.n	8009f2e <__any_on+0x32>
 8009f0a:	dd0a      	ble.n	8009f22 <__any_on+0x26>
 8009f0c:	f011 011f 	ands.w	r1, r1, #31
 8009f10:	d007      	beq.n	8009f22 <__any_on+0x26>
 8009f12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f16:	fa24 f001 	lsr.w	r0, r4, r1
 8009f1a:	fa00 f101 	lsl.w	r1, r0, r1
 8009f1e:	428c      	cmp	r4, r1
 8009f20:	d10b      	bne.n	8009f3a <__any_on+0x3e>
 8009f22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d803      	bhi.n	8009f32 <__any_on+0x36>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	4603      	mov	r3, r0
 8009f30:	e7f7      	b.n	8009f22 <__any_on+0x26>
 8009f32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f36:	2900      	cmp	r1, #0
 8009f38:	d0f5      	beq.n	8009f26 <__any_on+0x2a>
 8009f3a:	2001      	movs	r0, #1
 8009f3c:	e7f6      	b.n	8009f2c <__any_on+0x30>

08009f3e <sulp>:
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	ec45 4b10 	vmov	d0, r4, r5
 8009f48:	4616      	mov	r6, r2
 8009f4a:	f7ff feb7 	bl	8009cbc <__ulp>
 8009f4e:	ec51 0b10 	vmov	r0, r1, d0
 8009f52:	b17e      	cbz	r6, 8009f74 <sulp+0x36>
 8009f54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd09      	ble.n	8009f74 <sulp+0x36>
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f66:	2400      	movs	r4, #0
 8009f68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	462b      	mov	r3, r5
 8009f70:	f7f6 fb42 	bl	80005f8 <__aeabi_dmul>
 8009f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f78 <_strtod_l>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b02 	vpush	{d8}
 8009f80:	b09b      	sub	sp, #108	; 0x6c
 8009f82:	4604      	mov	r4, r0
 8009f84:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f86:	2200      	movs	r2, #0
 8009f88:	9216      	str	r2, [sp, #88]	; 0x58
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	f04f 0800 	mov.w	r8, #0
 8009f90:	f04f 0900 	mov.w	r9, #0
 8009f94:	460a      	mov	r2, r1
 8009f96:	9215      	str	r2, [sp, #84]	; 0x54
 8009f98:	7811      	ldrb	r1, [r2, #0]
 8009f9a:	292b      	cmp	r1, #43	; 0x2b
 8009f9c:	d04c      	beq.n	800a038 <_strtod_l+0xc0>
 8009f9e:	d83a      	bhi.n	800a016 <_strtod_l+0x9e>
 8009fa0:	290d      	cmp	r1, #13
 8009fa2:	d834      	bhi.n	800a00e <_strtod_l+0x96>
 8009fa4:	2908      	cmp	r1, #8
 8009fa6:	d834      	bhi.n	800a012 <_strtod_l+0x9a>
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d03d      	beq.n	800a028 <_strtod_l+0xb0>
 8009fac:	2200      	movs	r2, #0
 8009fae:	920a      	str	r2, [sp, #40]	; 0x28
 8009fb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009fb2:	7832      	ldrb	r2, [r6, #0]
 8009fb4:	2a30      	cmp	r2, #48	; 0x30
 8009fb6:	f040 80b4 	bne.w	800a122 <_strtod_l+0x1aa>
 8009fba:	7872      	ldrb	r2, [r6, #1]
 8009fbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009fc0:	2a58      	cmp	r2, #88	; 0x58
 8009fc2:	d170      	bne.n	800a0a6 <_strtod_l+0x12e>
 8009fc4:	9302      	str	r3, [sp, #8]
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	ab16      	add	r3, sp, #88	; 0x58
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4a8e      	ldr	r2, [pc, #568]	; (800a208 <_strtod_l+0x290>)
 8009fd0:	ab17      	add	r3, sp, #92	; 0x5c
 8009fd2:	a915      	add	r1, sp, #84	; 0x54
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f001 f93f 	bl	800b258 <__gethex>
 8009fda:	f010 070f 	ands.w	r7, r0, #15
 8009fde:	4605      	mov	r5, r0
 8009fe0:	d005      	beq.n	8009fee <_strtod_l+0x76>
 8009fe2:	2f06      	cmp	r7, #6
 8009fe4:	d12a      	bne.n	800a03c <_strtod_l+0xc4>
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9615      	str	r6, [sp, #84]	; 0x54
 8009fec:	930a      	str	r3, [sp, #40]	; 0x28
 8009fee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 857f 	bne.w	800aaf4 <_strtod_l+0xb7c>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff8:	b1db      	cbz	r3, 800a032 <_strtod_l+0xba>
 8009ffa:	4642      	mov	r2, r8
 8009ffc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a000:	ec43 2b10 	vmov	d0, r2, r3
 800a004:	b01b      	add	sp, #108	; 0x6c
 800a006:	ecbd 8b02 	vpop	{d8}
 800a00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	2920      	cmp	r1, #32
 800a010:	d1cc      	bne.n	8009fac <_strtod_l+0x34>
 800a012:	3201      	adds	r2, #1
 800a014:	e7bf      	b.n	8009f96 <_strtod_l+0x1e>
 800a016:	292d      	cmp	r1, #45	; 0x2d
 800a018:	d1c8      	bne.n	8009fac <_strtod_l+0x34>
 800a01a:	2101      	movs	r1, #1
 800a01c:	910a      	str	r1, [sp, #40]	; 0x28
 800a01e:	1c51      	adds	r1, r2, #1
 800a020:	9115      	str	r1, [sp, #84]	; 0x54
 800a022:	7852      	ldrb	r2, [r2, #1]
 800a024:	2a00      	cmp	r2, #0
 800a026:	d1c3      	bne.n	8009fb0 <_strtod_l+0x38>
 800a028:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a02a:	9515      	str	r5, [sp, #84]	; 0x54
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f040 855f 	bne.w	800aaf0 <_strtod_l+0xb78>
 800a032:	4642      	mov	r2, r8
 800a034:	464b      	mov	r3, r9
 800a036:	e7e3      	b.n	800a000 <_strtod_l+0x88>
 800a038:	2100      	movs	r1, #0
 800a03a:	e7ef      	b.n	800a01c <_strtod_l+0xa4>
 800a03c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a03e:	b13a      	cbz	r2, 800a050 <_strtod_l+0xd8>
 800a040:	2135      	movs	r1, #53	; 0x35
 800a042:	a818      	add	r0, sp, #96	; 0x60
 800a044:	f7ff ff37 	bl	8009eb6 <__copybits>
 800a048:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a04a:	4620      	mov	r0, r4
 800a04c:	f7ff fb0a 	bl	8009664 <_Bfree>
 800a050:	3f01      	subs	r7, #1
 800a052:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a054:	2f04      	cmp	r7, #4
 800a056:	d806      	bhi.n	800a066 <_strtod_l+0xee>
 800a058:	e8df f007 	tbb	[pc, r7]
 800a05c:	201d0314 	.word	0x201d0314
 800a060:	14          	.byte	0x14
 800a061:	00          	.byte	0x00
 800a062:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a066:	05e9      	lsls	r1, r5, #23
 800a068:	bf48      	it	mi
 800a06a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a06e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a072:	0d1b      	lsrs	r3, r3, #20
 800a074:	051b      	lsls	r3, r3, #20
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1b9      	bne.n	8009fee <_strtod_l+0x76>
 800a07a:	f7fe fb05 	bl	8008688 <__errno>
 800a07e:	2322      	movs	r3, #34	; 0x22
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	e7b4      	b.n	8009fee <_strtod_l+0x76>
 800a084:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a088:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a08c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a090:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a094:	e7e7      	b.n	800a066 <_strtod_l+0xee>
 800a096:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a210 <_strtod_l+0x298>
 800a09a:	e7e4      	b.n	800a066 <_strtod_l+0xee>
 800a09c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a0a0:	f04f 38ff 	mov.w	r8, #4294967295
 800a0a4:	e7df      	b.n	800a066 <_strtod_l+0xee>
 800a0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	9215      	str	r2, [sp, #84]	; 0x54
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b30      	cmp	r3, #48	; 0x30
 800a0b0:	d0f9      	beq.n	800a0a6 <_strtod_l+0x12e>
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d09b      	beq.n	8009fee <_strtod_l+0x76>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f04f 0a00 	mov.w	sl, #0
 800a0bc:	9304      	str	r3, [sp, #16]
 800a0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a0c6:	46d3      	mov	fp, sl
 800a0c8:	220a      	movs	r2, #10
 800a0ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a0cc:	7806      	ldrb	r6, [r0, #0]
 800a0ce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a0d2:	b2d9      	uxtb	r1, r3
 800a0d4:	2909      	cmp	r1, #9
 800a0d6:	d926      	bls.n	800a126 <_strtod_l+0x1ae>
 800a0d8:	494c      	ldr	r1, [pc, #304]	; (800a20c <_strtod_l+0x294>)
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f000 ffe6 	bl	800b0ac <strncmp>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d030      	beq.n	800a146 <_strtod_l+0x1ce>
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	9005      	str	r0, [sp, #20]
 800a0ea:	465e      	mov	r6, fp
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2a65      	cmp	r2, #101	; 0x65
 800a0f0:	d001      	beq.n	800a0f6 <_strtod_l+0x17e>
 800a0f2:	2a45      	cmp	r2, #69	; 0x45
 800a0f4:	d113      	bne.n	800a11e <_strtod_l+0x1a6>
 800a0f6:	b91e      	cbnz	r6, 800a100 <_strtod_l+0x188>
 800a0f8:	9a04      	ldr	r2, [sp, #16]
 800a0fa:	4302      	orrs	r2, r0
 800a0fc:	d094      	beq.n	800a028 <_strtod_l+0xb0>
 800a0fe:	2600      	movs	r6, #0
 800a100:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a102:	1c6a      	adds	r2, r5, #1
 800a104:	9215      	str	r2, [sp, #84]	; 0x54
 800a106:	786a      	ldrb	r2, [r5, #1]
 800a108:	2a2b      	cmp	r2, #43	; 0x2b
 800a10a:	d074      	beq.n	800a1f6 <_strtod_l+0x27e>
 800a10c:	2a2d      	cmp	r2, #45	; 0x2d
 800a10e:	d078      	beq.n	800a202 <_strtod_l+0x28a>
 800a110:	f04f 0c00 	mov.w	ip, #0
 800a114:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a118:	2909      	cmp	r1, #9
 800a11a:	d97f      	bls.n	800a21c <_strtod_l+0x2a4>
 800a11c:	9515      	str	r5, [sp, #84]	; 0x54
 800a11e:	2700      	movs	r7, #0
 800a120:	e09e      	b.n	800a260 <_strtod_l+0x2e8>
 800a122:	2300      	movs	r3, #0
 800a124:	e7c8      	b.n	800a0b8 <_strtod_l+0x140>
 800a126:	f1bb 0f08 	cmp.w	fp, #8
 800a12a:	bfd8      	it	le
 800a12c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a12e:	f100 0001 	add.w	r0, r0, #1
 800a132:	bfda      	itte	le
 800a134:	fb02 3301 	mlale	r3, r2, r1, r3
 800a138:	9309      	strle	r3, [sp, #36]	; 0x24
 800a13a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a13e:	f10b 0b01 	add.w	fp, fp, #1
 800a142:	9015      	str	r0, [sp, #84]	; 0x54
 800a144:	e7c1      	b.n	800a0ca <_strtod_l+0x152>
 800a146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	9215      	str	r2, [sp, #84]	; 0x54
 800a14c:	785a      	ldrb	r2, [r3, #1]
 800a14e:	f1bb 0f00 	cmp.w	fp, #0
 800a152:	d037      	beq.n	800a1c4 <_strtod_l+0x24c>
 800a154:	9005      	str	r0, [sp, #20]
 800a156:	465e      	mov	r6, fp
 800a158:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d912      	bls.n	800a186 <_strtod_l+0x20e>
 800a160:	2301      	movs	r3, #1
 800a162:	e7c4      	b.n	800a0ee <_strtod_l+0x176>
 800a164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	9215      	str	r2, [sp, #84]	; 0x54
 800a16a:	785a      	ldrb	r2, [r3, #1]
 800a16c:	3001      	adds	r0, #1
 800a16e:	2a30      	cmp	r2, #48	; 0x30
 800a170:	d0f8      	beq.n	800a164 <_strtod_l+0x1ec>
 800a172:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a176:	2b08      	cmp	r3, #8
 800a178:	f200 84c1 	bhi.w	800aafe <_strtod_l+0xb86>
 800a17c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a17e:	9005      	str	r0, [sp, #20]
 800a180:	2000      	movs	r0, #0
 800a182:	930b      	str	r3, [sp, #44]	; 0x2c
 800a184:	4606      	mov	r6, r0
 800a186:	3a30      	subs	r2, #48	; 0x30
 800a188:	f100 0301 	add.w	r3, r0, #1
 800a18c:	d014      	beq.n	800a1b8 <_strtod_l+0x240>
 800a18e:	9905      	ldr	r1, [sp, #20]
 800a190:	4419      	add	r1, r3
 800a192:	9105      	str	r1, [sp, #20]
 800a194:	4633      	mov	r3, r6
 800a196:	eb00 0c06 	add.w	ip, r0, r6
 800a19a:	210a      	movs	r1, #10
 800a19c:	4563      	cmp	r3, ip
 800a19e:	d113      	bne.n	800a1c8 <_strtod_l+0x250>
 800a1a0:	1833      	adds	r3, r6, r0
 800a1a2:	2b08      	cmp	r3, #8
 800a1a4:	f106 0601 	add.w	r6, r6, #1
 800a1a8:	4406      	add	r6, r0
 800a1aa:	dc1a      	bgt.n	800a1e2 <_strtod_l+0x26a>
 800a1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	fb03 2301 	mla	r3, r3, r1, r2
 800a1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1ba:	1c51      	adds	r1, r2, #1
 800a1bc:	9115      	str	r1, [sp, #84]	; 0x54
 800a1be:	7852      	ldrb	r2, [r2, #1]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	e7c9      	b.n	800a158 <_strtod_l+0x1e0>
 800a1c4:	4658      	mov	r0, fp
 800a1c6:	e7d2      	b.n	800a16e <_strtod_l+0x1f6>
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	f103 0301 	add.w	r3, r3, #1
 800a1ce:	dc03      	bgt.n	800a1d8 <_strtod_l+0x260>
 800a1d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1d2:	434f      	muls	r7, r1
 800a1d4:	9709      	str	r7, [sp, #36]	; 0x24
 800a1d6:	e7e1      	b.n	800a19c <_strtod_l+0x224>
 800a1d8:	2b10      	cmp	r3, #16
 800a1da:	bfd8      	it	le
 800a1dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a1e0:	e7dc      	b.n	800a19c <_strtod_l+0x224>
 800a1e2:	2e10      	cmp	r6, #16
 800a1e4:	bfdc      	itt	le
 800a1e6:	230a      	movle	r3, #10
 800a1e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a1ec:	e7e3      	b.n	800a1b6 <_strtod_l+0x23e>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9305      	str	r3, [sp, #20]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e780      	b.n	800a0f8 <_strtod_l+0x180>
 800a1f6:	f04f 0c00 	mov.w	ip, #0
 800a1fa:	1caa      	adds	r2, r5, #2
 800a1fc:	9215      	str	r2, [sp, #84]	; 0x54
 800a1fe:	78aa      	ldrb	r2, [r5, #2]
 800a200:	e788      	b.n	800a114 <_strtod_l+0x19c>
 800a202:	f04f 0c01 	mov.w	ip, #1
 800a206:	e7f8      	b.n	800a1fa <_strtod_l+0x282>
 800a208:	0800cb78 	.word	0x0800cb78
 800a20c:	0800cb74 	.word	0x0800cb74
 800a210:	7ff00000 	.word	0x7ff00000
 800a214:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a216:	1c51      	adds	r1, r2, #1
 800a218:	9115      	str	r1, [sp, #84]	; 0x54
 800a21a:	7852      	ldrb	r2, [r2, #1]
 800a21c:	2a30      	cmp	r2, #48	; 0x30
 800a21e:	d0f9      	beq.n	800a214 <_strtod_l+0x29c>
 800a220:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a224:	2908      	cmp	r1, #8
 800a226:	f63f af7a 	bhi.w	800a11e <_strtod_l+0x1a6>
 800a22a:	3a30      	subs	r2, #48	; 0x30
 800a22c:	9208      	str	r2, [sp, #32]
 800a22e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a230:	920c      	str	r2, [sp, #48]	; 0x30
 800a232:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a234:	1c57      	adds	r7, r2, #1
 800a236:	9715      	str	r7, [sp, #84]	; 0x54
 800a238:	7852      	ldrb	r2, [r2, #1]
 800a23a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a23e:	f1be 0f09 	cmp.w	lr, #9
 800a242:	d938      	bls.n	800a2b6 <_strtod_l+0x33e>
 800a244:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a246:	1a7f      	subs	r7, r7, r1
 800a248:	2f08      	cmp	r7, #8
 800a24a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a24e:	dc03      	bgt.n	800a258 <_strtod_l+0x2e0>
 800a250:	9908      	ldr	r1, [sp, #32]
 800a252:	428f      	cmp	r7, r1
 800a254:	bfa8      	it	ge
 800a256:	460f      	movge	r7, r1
 800a258:	f1bc 0f00 	cmp.w	ip, #0
 800a25c:	d000      	beq.n	800a260 <_strtod_l+0x2e8>
 800a25e:	427f      	negs	r7, r7
 800a260:	2e00      	cmp	r6, #0
 800a262:	d14f      	bne.n	800a304 <_strtod_l+0x38c>
 800a264:	9904      	ldr	r1, [sp, #16]
 800a266:	4301      	orrs	r1, r0
 800a268:	f47f aec1 	bne.w	8009fee <_strtod_l+0x76>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f47f aedb 	bne.w	800a028 <_strtod_l+0xb0>
 800a272:	2a69      	cmp	r2, #105	; 0x69
 800a274:	d029      	beq.n	800a2ca <_strtod_l+0x352>
 800a276:	dc26      	bgt.n	800a2c6 <_strtod_l+0x34e>
 800a278:	2a49      	cmp	r2, #73	; 0x49
 800a27a:	d026      	beq.n	800a2ca <_strtod_l+0x352>
 800a27c:	2a4e      	cmp	r2, #78	; 0x4e
 800a27e:	f47f aed3 	bne.w	800a028 <_strtod_l+0xb0>
 800a282:	499b      	ldr	r1, [pc, #620]	; (800a4f0 <_strtod_l+0x578>)
 800a284:	a815      	add	r0, sp, #84	; 0x54
 800a286:	f001 fa27 	bl	800b6d8 <__match>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f43f aecc 	beq.w	800a028 <_strtod_l+0xb0>
 800a290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	2b28      	cmp	r3, #40	; 0x28
 800a296:	d12f      	bne.n	800a2f8 <_strtod_l+0x380>
 800a298:	4996      	ldr	r1, [pc, #600]	; (800a4f4 <_strtod_l+0x57c>)
 800a29a:	aa18      	add	r2, sp, #96	; 0x60
 800a29c:	a815      	add	r0, sp, #84	; 0x54
 800a29e:	f001 fa2f 	bl	800b700 <__hexnan>
 800a2a2:	2805      	cmp	r0, #5
 800a2a4:	d128      	bne.n	800a2f8 <_strtod_l+0x380>
 800a2a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a2b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a2b4:	e69b      	b.n	8009fee <_strtod_l+0x76>
 800a2b6:	9f08      	ldr	r7, [sp, #32]
 800a2b8:	210a      	movs	r1, #10
 800a2ba:	fb01 2107 	mla	r1, r1, r7, r2
 800a2be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a2c2:	9208      	str	r2, [sp, #32]
 800a2c4:	e7b5      	b.n	800a232 <_strtod_l+0x2ba>
 800a2c6:	2a6e      	cmp	r2, #110	; 0x6e
 800a2c8:	e7d9      	b.n	800a27e <_strtod_l+0x306>
 800a2ca:	498b      	ldr	r1, [pc, #556]	; (800a4f8 <_strtod_l+0x580>)
 800a2cc:	a815      	add	r0, sp, #84	; 0x54
 800a2ce:	f001 fa03 	bl	800b6d8 <__match>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f43f aea8 	beq.w	800a028 <_strtod_l+0xb0>
 800a2d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2da:	4988      	ldr	r1, [pc, #544]	; (800a4fc <_strtod_l+0x584>)
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	a815      	add	r0, sp, #84	; 0x54
 800a2e0:	9315      	str	r3, [sp, #84]	; 0x54
 800a2e2:	f001 f9f9 	bl	800b6d8 <__match>
 800a2e6:	b910      	cbnz	r0, 800a2ee <_strtod_l+0x376>
 800a2e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a50c <_strtod_l+0x594>
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	e67a      	b.n	8009fee <_strtod_l+0x76>
 800a2f8:	4881      	ldr	r0, [pc, #516]	; (800a500 <_strtod_l+0x588>)
 800a2fa:	f000 ff09 	bl	800b110 <nan>
 800a2fe:	ec59 8b10 	vmov	r8, r9, d0
 800a302:	e674      	b.n	8009fee <_strtod_l+0x76>
 800a304:	9b05      	ldr	r3, [sp, #20]
 800a306:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a308:	1afb      	subs	r3, r7, r3
 800a30a:	f1bb 0f00 	cmp.w	fp, #0
 800a30e:	bf08      	it	eq
 800a310:	46b3      	moveq	fp, r6
 800a312:	2e10      	cmp	r6, #16
 800a314:	9308      	str	r3, [sp, #32]
 800a316:	4635      	mov	r5, r6
 800a318:	bfa8      	it	ge
 800a31a:	2510      	movge	r5, #16
 800a31c:	f7f6 f8f2 	bl	8000504 <__aeabi_ui2d>
 800a320:	2e09      	cmp	r6, #9
 800a322:	4680      	mov	r8, r0
 800a324:	4689      	mov	r9, r1
 800a326:	dd13      	ble.n	800a350 <_strtod_l+0x3d8>
 800a328:	4b76      	ldr	r3, [pc, #472]	; (800a504 <_strtod_l+0x58c>)
 800a32a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a32e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a332:	f7f6 f961 	bl	80005f8 <__aeabi_dmul>
 800a336:	4680      	mov	r8, r0
 800a338:	4650      	mov	r0, sl
 800a33a:	4689      	mov	r9, r1
 800a33c:	f7f6 f8e2 	bl	8000504 <__aeabi_ui2d>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4640      	mov	r0, r8
 800a346:	4649      	mov	r1, r9
 800a348:	f7f5 ffa0 	bl	800028c <__adddf3>
 800a34c:	4680      	mov	r8, r0
 800a34e:	4689      	mov	r9, r1
 800a350:	2e0f      	cmp	r6, #15
 800a352:	dc38      	bgt.n	800a3c6 <_strtod_l+0x44e>
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f43f ae49 	beq.w	8009fee <_strtod_l+0x76>
 800a35c:	dd24      	ble.n	800a3a8 <_strtod_l+0x430>
 800a35e:	2b16      	cmp	r3, #22
 800a360:	dc0b      	bgt.n	800a37a <_strtod_l+0x402>
 800a362:	4968      	ldr	r1, [pc, #416]	; (800a504 <_strtod_l+0x58c>)
 800a364:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a36c:	4642      	mov	r2, r8
 800a36e:	464b      	mov	r3, r9
 800a370:	f7f6 f942 	bl	80005f8 <__aeabi_dmul>
 800a374:	4680      	mov	r8, r0
 800a376:	4689      	mov	r9, r1
 800a378:	e639      	b.n	8009fee <_strtod_l+0x76>
 800a37a:	9a08      	ldr	r2, [sp, #32]
 800a37c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a380:	4293      	cmp	r3, r2
 800a382:	db20      	blt.n	800a3c6 <_strtod_l+0x44e>
 800a384:	4c5f      	ldr	r4, [pc, #380]	; (800a504 <_strtod_l+0x58c>)
 800a386:	f1c6 060f 	rsb	r6, r6, #15
 800a38a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a38e:	4642      	mov	r2, r8
 800a390:	464b      	mov	r3, r9
 800a392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a396:	f7f6 f92f 	bl	80005f8 <__aeabi_dmul>
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	1b9e      	subs	r6, r3, r6
 800a39e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a3a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3a6:	e7e3      	b.n	800a370 <_strtod_l+0x3f8>
 800a3a8:	9b08      	ldr	r3, [sp, #32]
 800a3aa:	3316      	adds	r3, #22
 800a3ac:	db0b      	blt.n	800a3c6 <_strtod_l+0x44e>
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	1bdf      	subs	r7, r3, r7
 800a3b2:	4b54      	ldr	r3, [pc, #336]	; (800a504 <_strtod_l+0x58c>)
 800a3b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4649      	mov	r1, r9
 800a3c0:	f7f6 fa44 	bl	800084c <__aeabi_ddiv>
 800a3c4:	e7d6      	b.n	800a374 <_strtod_l+0x3fc>
 800a3c6:	9b08      	ldr	r3, [sp, #32]
 800a3c8:	1b75      	subs	r5, r6, r5
 800a3ca:	441d      	add	r5, r3
 800a3cc:	2d00      	cmp	r5, #0
 800a3ce:	dd70      	ble.n	800a4b2 <_strtod_l+0x53a>
 800a3d0:	f015 030f 	ands.w	r3, r5, #15
 800a3d4:	d00a      	beq.n	800a3ec <_strtod_l+0x474>
 800a3d6:	494b      	ldr	r1, [pc, #300]	; (800a504 <_strtod_l+0x58c>)
 800a3d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3dc:	4642      	mov	r2, r8
 800a3de:	464b      	mov	r3, r9
 800a3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e4:	f7f6 f908 	bl	80005f8 <__aeabi_dmul>
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4689      	mov	r9, r1
 800a3ec:	f035 050f 	bics.w	r5, r5, #15
 800a3f0:	d04d      	beq.n	800a48e <_strtod_l+0x516>
 800a3f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a3f6:	dd22      	ble.n	800a43e <_strtod_l+0x4c6>
 800a3f8:	2500      	movs	r5, #0
 800a3fa:	46ab      	mov	fp, r5
 800a3fc:	9509      	str	r5, [sp, #36]	; 0x24
 800a3fe:	9505      	str	r5, [sp, #20]
 800a400:	2322      	movs	r3, #34	; 0x22
 800a402:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a50c <_strtod_l+0x594>
 800a406:	6023      	str	r3, [r4, #0]
 800a408:	f04f 0800 	mov.w	r8, #0
 800a40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f43f aded 	beq.w	8009fee <_strtod_l+0x76>
 800a414:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff f924 	bl	8009664 <_Bfree>
 800a41c:	9905      	ldr	r1, [sp, #20]
 800a41e:	4620      	mov	r0, r4
 800a420:	f7ff f920 	bl	8009664 <_Bfree>
 800a424:	4659      	mov	r1, fp
 800a426:	4620      	mov	r0, r4
 800a428:	f7ff f91c 	bl	8009664 <_Bfree>
 800a42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a42e:	4620      	mov	r0, r4
 800a430:	f7ff f918 	bl	8009664 <_Bfree>
 800a434:	4629      	mov	r1, r5
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff f914 	bl	8009664 <_Bfree>
 800a43c:	e5d7      	b.n	8009fee <_strtod_l+0x76>
 800a43e:	4b32      	ldr	r3, [pc, #200]	; (800a508 <_strtod_l+0x590>)
 800a440:	9304      	str	r3, [sp, #16]
 800a442:	2300      	movs	r3, #0
 800a444:	112d      	asrs	r5, r5, #4
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	469a      	mov	sl, r3
 800a44c:	2d01      	cmp	r5, #1
 800a44e:	dc21      	bgt.n	800a494 <_strtod_l+0x51c>
 800a450:	b10b      	cbz	r3, 800a456 <_strtod_l+0x4de>
 800a452:	4680      	mov	r8, r0
 800a454:	4689      	mov	r9, r1
 800a456:	492c      	ldr	r1, [pc, #176]	; (800a508 <_strtod_l+0x590>)
 800a458:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a45c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a468:	f7f6 f8c6 	bl	80005f8 <__aeabi_dmul>
 800a46c:	4b27      	ldr	r3, [pc, #156]	; (800a50c <_strtod_l+0x594>)
 800a46e:	460a      	mov	r2, r1
 800a470:	400b      	ands	r3, r1
 800a472:	4927      	ldr	r1, [pc, #156]	; (800a510 <_strtod_l+0x598>)
 800a474:	428b      	cmp	r3, r1
 800a476:	4680      	mov	r8, r0
 800a478:	d8be      	bhi.n	800a3f8 <_strtod_l+0x480>
 800a47a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a47e:	428b      	cmp	r3, r1
 800a480:	bf86      	itte	hi
 800a482:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a514 <_strtod_l+0x59c>
 800a486:	f04f 38ff 	movhi.w	r8, #4294967295
 800a48a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a48e:	2300      	movs	r3, #0
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	e07b      	b.n	800a58c <_strtod_l+0x614>
 800a494:	07ea      	lsls	r2, r5, #31
 800a496:	d505      	bpl.n	800a4a4 <_strtod_l+0x52c>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	9a04      	ldr	r2, [sp, #16]
 800a4a6:	3208      	adds	r2, #8
 800a4a8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ac:	106d      	asrs	r5, r5, #1
 800a4ae:	9204      	str	r2, [sp, #16]
 800a4b0:	e7cc      	b.n	800a44c <_strtod_l+0x4d4>
 800a4b2:	d0ec      	beq.n	800a48e <_strtod_l+0x516>
 800a4b4:	426d      	negs	r5, r5
 800a4b6:	f015 020f 	ands.w	r2, r5, #15
 800a4ba:	d00a      	beq.n	800a4d2 <_strtod_l+0x55a>
 800a4bc:	4b11      	ldr	r3, [pc, #68]	; (800a504 <_strtod_l+0x58c>)
 800a4be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4c2:	4640      	mov	r0, r8
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f6 f9bf 	bl	800084c <__aeabi_ddiv>
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	4689      	mov	r9, r1
 800a4d2:	112d      	asrs	r5, r5, #4
 800a4d4:	d0db      	beq.n	800a48e <_strtod_l+0x516>
 800a4d6:	2d1f      	cmp	r5, #31
 800a4d8:	dd1e      	ble.n	800a518 <_strtod_l+0x5a0>
 800a4da:	2500      	movs	r5, #0
 800a4dc:	46ab      	mov	fp, r5
 800a4de:	9509      	str	r5, [sp, #36]	; 0x24
 800a4e0:	9505      	str	r5, [sp, #20]
 800a4e2:	2322      	movs	r3, #34	; 0x22
 800a4e4:	f04f 0800 	mov.w	r8, #0
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	e78d      	b.n	800a40c <_strtod_l+0x494>
 800a4f0:	0800c961 	.word	0x0800c961
 800a4f4:	0800cb8c 	.word	0x0800cb8c
 800a4f8:	0800c959 	.word	0x0800c959
 800a4fc:	0800c990 	.word	0x0800c990
 800a500:	0800cd1d 	.word	0x0800cd1d
 800a504:	0800caa0 	.word	0x0800caa0
 800a508:	0800ca78 	.word	0x0800ca78
 800a50c:	7ff00000 	.word	0x7ff00000
 800a510:	7ca00000 	.word	0x7ca00000
 800a514:	7fefffff 	.word	0x7fefffff
 800a518:	f015 0310 	ands.w	r3, r5, #16
 800a51c:	bf18      	it	ne
 800a51e:	236a      	movne	r3, #106	; 0x6a
 800a520:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a8c4 <_strtod_l+0x94c>
 800a524:	9304      	str	r3, [sp, #16]
 800a526:	4640      	mov	r0, r8
 800a528:	4649      	mov	r1, r9
 800a52a:	2300      	movs	r3, #0
 800a52c:	07ea      	lsls	r2, r5, #31
 800a52e:	d504      	bpl.n	800a53a <_strtod_l+0x5c2>
 800a530:	e9da 2300 	ldrd	r2, r3, [sl]
 800a534:	f7f6 f860 	bl	80005f8 <__aeabi_dmul>
 800a538:	2301      	movs	r3, #1
 800a53a:	106d      	asrs	r5, r5, #1
 800a53c:	f10a 0a08 	add.w	sl, sl, #8
 800a540:	d1f4      	bne.n	800a52c <_strtod_l+0x5b4>
 800a542:	b10b      	cbz	r3, 800a548 <_strtod_l+0x5d0>
 800a544:	4680      	mov	r8, r0
 800a546:	4689      	mov	r9, r1
 800a548:	9b04      	ldr	r3, [sp, #16]
 800a54a:	b1bb      	cbz	r3, 800a57c <_strtod_l+0x604>
 800a54c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a550:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a554:	2b00      	cmp	r3, #0
 800a556:	4649      	mov	r1, r9
 800a558:	dd10      	ble.n	800a57c <_strtod_l+0x604>
 800a55a:	2b1f      	cmp	r3, #31
 800a55c:	f340 811e 	ble.w	800a79c <_strtod_l+0x824>
 800a560:	2b34      	cmp	r3, #52	; 0x34
 800a562:	bfde      	ittt	le
 800a564:	f04f 33ff 	movle.w	r3, #4294967295
 800a568:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a56c:	4093      	lslle	r3, r2
 800a56e:	f04f 0800 	mov.w	r8, #0
 800a572:	bfcc      	ite	gt
 800a574:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a578:	ea03 0901 	andle.w	r9, r3, r1
 800a57c:	2200      	movs	r2, #0
 800a57e:	2300      	movs	r3, #0
 800a580:	4640      	mov	r0, r8
 800a582:	4649      	mov	r1, r9
 800a584:	f7f6 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d1a6      	bne.n	800a4da <_strtod_l+0x562>
 800a58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a592:	4633      	mov	r3, r6
 800a594:	465a      	mov	r2, fp
 800a596:	4620      	mov	r0, r4
 800a598:	f7ff f8cc 	bl	8009734 <__s2b>
 800a59c:	9009      	str	r0, [sp, #36]	; 0x24
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f43f af2a 	beq.w	800a3f8 <_strtod_l+0x480>
 800a5a4:	9a08      	ldr	r2, [sp, #32]
 800a5a6:	9b05      	ldr	r3, [sp, #20]
 800a5a8:	2a00      	cmp	r2, #0
 800a5aa:	eba3 0307 	sub.w	r3, r3, r7
 800a5ae:	bfa8      	it	ge
 800a5b0:	2300      	movge	r3, #0
 800a5b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5ba:	9312      	str	r3, [sp, #72]	; 0x48
 800a5bc:	46ab      	mov	fp, r5
 800a5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	6859      	ldr	r1, [r3, #4]
 800a5c4:	f7ff f80e 	bl	80095e4 <_Balloc>
 800a5c8:	9005      	str	r0, [sp, #20]
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	f43f af18 	beq.w	800a400 <_strtod_l+0x488>
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	691a      	ldr	r2, [r3, #16]
 800a5d4:	3202      	adds	r2, #2
 800a5d6:	f103 010c 	add.w	r1, r3, #12
 800a5da:	0092      	lsls	r2, r2, #2
 800a5dc:	300c      	adds	r0, #12
 800a5de:	f000 fd87 	bl	800b0f0 <memcpy>
 800a5e2:	ec49 8b10 	vmov	d0, r8, r9
 800a5e6:	aa18      	add	r2, sp, #96	; 0x60
 800a5e8:	a917      	add	r1, sp, #92	; 0x5c
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7ff fbd6 	bl	8009d9c <__d2b>
 800a5f0:	ec49 8b18 	vmov	d8, r8, r9
 800a5f4:	9016      	str	r0, [sp, #88]	; 0x58
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f43f af02 	beq.w	800a400 <_strtod_l+0x488>
 800a5fc:	2101      	movs	r1, #1
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff f930 	bl	8009864 <__i2b>
 800a604:	4683      	mov	fp, r0
 800a606:	2800      	cmp	r0, #0
 800a608:	f43f aefa 	beq.w	800a400 <_strtod_l+0x488>
 800a60c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a60e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a610:	2e00      	cmp	r6, #0
 800a612:	bfab      	itete	ge
 800a614:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a616:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a618:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a61a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a61e:	bfac      	ite	ge
 800a620:	eb06 0a03 	addge.w	sl, r6, r3
 800a624:	1b9f      	sublt	r7, r3, r6
 800a626:	9b04      	ldr	r3, [sp, #16]
 800a628:	1af6      	subs	r6, r6, r3
 800a62a:	4416      	add	r6, r2
 800a62c:	4ba0      	ldr	r3, [pc, #640]	; (800a8b0 <_strtod_l+0x938>)
 800a62e:	3e01      	subs	r6, #1
 800a630:	429e      	cmp	r6, r3
 800a632:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a636:	f280 80c4 	bge.w	800a7c2 <_strtod_l+0x84a>
 800a63a:	1b9b      	subs	r3, r3, r6
 800a63c:	2b1f      	cmp	r3, #31
 800a63e:	eba2 0203 	sub.w	r2, r2, r3
 800a642:	f04f 0101 	mov.w	r1, #1
 800a646:	f300 80b0 	bgt.w	800a7aa <_strtod_l+0x832>
 800a64a:	fa01 f303 	lsl.w	r3, r1, r3
 800a64e:	930e      	str	r3, [sp, #56]	; 0x38
 800a650:	2300      	movs	r3, #0
 800a652:	930d      	str	r3, [sp, #52]	; 0x34
 800a654:	eb0a 0602 	add.w	r6, sl, r2
 800a658:	9b04      	ldr	r3, [sp, #16]
 800a65a:	45b2      	cmp	sl, r6
 800a65c:	4417      	add	r7, r2
 800a65e:	441f      	add	r7, r3
 800a660:	4653      	mov	r3, sl
 800a662:	bfa8      	it	ge
 800a664:	4633      	movge	r3, r6
 800a666:	42bb      	cmp	r3, r7
 800a668:	bfa8      	it	ge
 800a66a:	463b      	movge	r3, r7
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfc2      	ittt	gt
 800a670:	1af6      	subgt	r6, r6, r3
 800a672:	1aff      	subgt	r7, r7, r3
 800a674:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dd17      	ble.n	800a6ae <_strtod_l+0x736>
 800a67e:	4659      	mov	r1, fp
 800a680:	461a      	mov	r2, r3
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff f9ae 	bl	80099e4 <__pow5mult>
 800a688:	4683      	mov	fp, r0
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aeb8 	beq.w	800a400 <_strtod_l+0x488>
 800a690:	4601      	mov	r1, r0
 800a692:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a694:	4620      	mov	r0, r4
 800a696:	f7ff f8fb 	bl	8009890 <__multiply>
 800a69a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f43f aeaf 	beq.w	800a400 <_strtod_l+0x488>
 800a6a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f7fe ffdd 	bl	8009664 <_Bfree>
 800a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6ac:	9316      	str	r3, [sp, #88]	; 0x58
 800a6ae:	2e00      	cmp	r6, #0
 800a6b0:	f300 808c 	bgt.w	800a7cc <_strtod_l+0x854>
 800a6b4:	9b08      	ldr	r3, [sp, #32]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dd08      	ble.n	800a6cc <_strtod_l+0x754>
 800a6ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6bc:	9905      	ldr	r1, [sp, #20]
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff f990 	bl	80099e4 <__pow5mult>
 800a6c4:	9005      	str	r0, [sp, #20]
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f43f ae9a 	beq.w	800a400 <_strtod_l+0x488>
 800a6cc:	2f00      	cmp	r7, #0
 800a6ce:	dd08      	ble.n	800a6e2 <_strtod_l+0x76a>
 800a6d0:	9905      	ldr	r1, [sp, #20]
 800a6d2:	463a      	mov	r2, r7
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f7ff f9df 	bl	8009a98 <__lshift>
 800a6da:	9005      	str	r0, [sp, #20]
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f43f ae8f 	beq.w	800a400 <_strtod_l+0x488>
 800a6e2:	f1ba 0f00 	cmp.w	sl, #0
 800a6e6:	dd08      	ble.n	800a6fa <_strtod_l+0x782>
 800a6e8:	4659      	mov	r1, fp
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f7ff f9d3 	bl	8009a98 <__lshift>
 800a6f2:	4683      	mov	fp, r0
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f43f ae83 	beq.w	800a400 <_strtod_l+0x488>
 800a6fa:	9a05      	ldr	r2, [sp, #20]
 800a6fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6fe:	4620      	mov	r0, r4
 800a700:	f7ff fa52 	bl	8009ba8 <__mdiff>
 800a704:	4605      	mov	r5, r0
 800a706:	2800      	cmp	r0, #0
 800a708:	f43f ae7a 	beq.w	800a400 <_strtod_l+0x488>
 800a70c:	68c3      	ldr	r3, [r0, #12]
 800a70e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a710:	2300      	movs	r3, #0
 800a712:	60c3      	str	r3, [r0, #12]
 800a714:	4659      	mov	r1, fp
 800a716:	f7ff fa2b 	bl	8009b70 <__mcmp>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	da60      	bge.n	800a7e0 <_strtod_l+0x868>
 800a71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a720:	ea53 0308 	orrs.w	r3, r3, r8
 800a724:	f040 8084 	bne.w	800a830 <_strtod_l+0x8b8>
 800a728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d17f      	bne.n	800a830 <_strtod_l+0x8b8>
 800a730:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a734:	0d1b      	lsrs	r3, r3, #20
 800a736:	051b      	lsls	r3, r3, #20
 800a738:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a73c:	d978      	bls.n	800a830 <_strtod_l+0x8b8>
 800a73e:	696b      	ldr	r3, [r5, #20]
 800a740:	b913      	cbnz	r3, 800a748 <_strtod_l+0x7d0>
 800a742:	692b      	ldr	r3, [r5, #16]
 800a744:	2b01      	cmp	r3, #1
 800a746:	dd73      	ble.n	800a830 <_strtod_l+0x8b8>
 800a748:	4629      	mov	r1, r5
 800a74a:	2201      	movs	r2, #1
 800a74c:	4620      	mov	r0, r4
 800a74e:	f7ff f9a3 	bl	8009a98 <__lshift>
 800a752:	4659      	mov	r1, fp
 800a754:	4605      	mov	r5, r0
 800a756:	f7ff fa0b 	bl	8009b70 <__mcmp>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	dd68      	ble.n	800a830 <_strtod_l+0x8b8>
 800a75e:	9904      	ldr	r1, [sp, #16]
 800a760:	4a54      	ldr	r2, [pc, #336]	; (800a8b4 <_strtod_l+0x93c>)
 800a762:	464b      	mov	r3, r9
 800a764:	2900      	cmp	r1, #0
 800a766:	f000 8084 	beq.w	800a872 <_strtod_l+0x8fa>
 800a76a:	ea02 0109 	and.w	r1, r2, r9
 800a76e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a772:	dc7e      	bgt.n	800a872 <_strtod_l+0x8fa>
 800a774:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a778:	f77f aeb3 	ble.w	800a4e2 <_strtod_l+0x56a>
 800a77c:	4b4e      	ldr	r3, [pc, #312]	; (800a8b8 <_strtod_l+0x940>)
 800a77e:	4640      	mov	r0, r8
 800a780:	4649      	mov	r1, r9
 800a782:	2200      	movs	r2, #0
 800a784:	f7f5 ff38 	bl	80005f8 <__aeabi_dmul>
 800a788:	4b4a      	ldr	r3, [pc, #296]	; (800a8b4 <_strtod_l+0x93c>)
 800a78a:	400b      	ands	r3, r1
 800a78c:	4680      	mov	r8, r0
 800a78e:	4689      	mov	r9, r1
 800a790:	2b00      	cmp	r3, #0
 800a792:	f47f ae3f 	bne.w	800a414 <_strtod_l+0x49c>
 800a796:	2322      	movs	r3, #34	; 0x22
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	e63b      	b.n	800a414 <_strtod_l+0x49c>
 800a79c:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a4:	ea03 0808 	and.w	r8, r3, r8
 800a7a8:	e6e8      	b.n	800a57c <_strtod_l+0x604>
 800a7aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a7ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a7b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a7b6:	36e2      	adds	r6, #226	; 0xe2
 800a7b8:	fa01 f306 	lsl.w	r3, r1, r6
 800a7bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a7c0:	e748      	b.n	800a654 <_strtod_l+0x6dc>
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a7ca:	e743      	b.n	800a654 <_strtod_l+0x6dc>
 800a7cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7ff f961 	bl	8009a98 <__lshift>
 800a7d6:	9016      	str	r0, [sp, #88]	; 0x58
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	f47f af6b 	bne.w	800a6b4 <_strtod_l+0x73c>
 800a7de:	e60f      	b.n	800a400 <_strtod_l+0x488>
 800a7e0:	46ca      	mov	sl, r9
 800a7e2:	d171      	bne.n	800a8c8 <_strtod_l+0x950>
 800a7e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7ea:	b352      	cbz	r2, 800a842 <_strtod_l+0x8ca>
 800a7ec:	4a33      	ldr	r2, [pc, #204]	; (800a8bc <_strtod_l+0x944>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d12a      	bne.n	800a848 <_strtod_l+0x8d0>
 800a7f2:	9b04      	ldr	r3, [sp, #16]
 800a7f4:	4641      	mov	r1, r8
 800a7f6:	b1fb      	cbz	r3, 800a838 <_strtod_l+0x8c0>
 800a7f8:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <_strtod_l+0x93c>)
 800a7fa:	ea09 0303 	and.w	r3, r9, r3
 800a7fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a802:	f04f 32ff 	mov.w	r2, #4294967295
 800a806:	d81a      	bhi.n	800a83e <_strtod_l+0x8c6>
 800a808:	0d1b      	lsrs	r3, r3, #20
 800a80a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	4299      	cmp	r1, r3
 800a814:	d118      	bne.n	800a848 <_strtod_l+0x8d0>
 800a816:	4b2a      	ldr	r3, [pc, #168]	; (800a8c0 <_strtod_l+0x948>)
 800a818:	459a      	cmp	sl, r3
 800a81a:	d102      	bne.n	800a822 <_strtod_l+0x8aa>
 800a81c:	3101      	adds	r1, #1
 800a81e:	f43f adef 	beq.w	800a400 <_strtod_l+0x488>
 800a822:	4b24      	ldr	r3, [pc, #144]	; (800a8b4 <_strtod_l+0x93c>)
 800a824:	ea0a 0303 	and.w	r3, sl, r3
 800a828:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a82c:	f04f 0800 	mov.w	r8, #0
 800a830:	9b04      	ldr	r3, [sp, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1a2      	bne.n	800a77c <_strtod_l+0x804>
 800a836:	e5ed      	b.n	800a414 <_strtod_l+0x49c>
 800a838:	f04f 33ff 	mov.w	r3, #4294967295
 800a83c:	e7e9      	b.n	800a812 <_strtod_l+0x89a>
 800a83e:	4613      	mov	r3, r2
 800a840:	e7e7      	b.n	800a812 <_strtod_l+0x89a>
 800a842:	ea53 0308 	orrs.w	r3, r3, r8
 800a846:	d08a      	beq.n	800a75e <_strtod_l+0x7e6>
 800a848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a84a:	b1e3      	cbz	r3, 800a886 <_strtod_l+0x90e>
 800a84c:	ea13 0f0a 	tst.w	r3, sl
 800a850:	d0ee      	beq.n	800a830 <_strtod_l+0x8b8>
 800a852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a854:	9a04      	ldr	r2, [sp, #16]
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	b1c3      	cbz	r3, 800a88e <_strtod_l+0x916>
 800a85c:	f7ff fb6f 	bl	8009f3e <sulp>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	ec51 0b18 	vmov	r0, r1, d8
 800a868:	f7f5 fd10 	bl	800028c <__adddf3>
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	e7de      	b.n	800a830 <_strtod_l+0x8b8>
 800a872:	4013      	ands	r3, r2
 800a874:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a878:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a87c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a880:	f04f 38ff 	mov.w	r8, #4294967295
 800a884:	e7d4      	b.n	800a830 <_strtod_l+0x8b8>
 800a886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a888:	ea13 0f08 	tst.w	r3, r8
 800a88c:	e7e0      	b.n	800a850 <_strtod_l+0x8d8>
 800a88e:	f7ff fb56 	bl	8009f3e <sulp>
 800a892:	4602      	mov	r2, r0
 800a894:	460b      	mov	r3, r1
 800a896:	ec51 0b18 	vmov	r0, r1, d8
 800a89a:	f7f5 fcf5 	bl	8000288 <__aeabi_dsub>
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	4680      	mov	r8, r0
 800a8a4:	4689      	mov	r9, r1
 800a8a6:	f7f6 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0c0      	beq.n	800a830 <_strtod_l+0x8b8>
 800a8ae:	e618      	b.n	800a4e2 <_strtod_l+0x56a>
 800a8b0:	fffffc02 	.word	0xfffffc02
 800a8b4:	7ff00000 	.word	0x7ff00000
 800a8b8:	39500000 	.word	0x39500000
 800a8bc:	000fffff 	.word	0x000fffff
 800a8c0:	7fefffff 	.word	0x7fefffff
 800a8c4:	0800cba0 	.word	0x0800cba0
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f7ff fac0 	bl	8009e50 <__ratio>
 800a8d0:	ec57 6b10 	vmov	r6, r7, d0
 800a8d4:	ee10 0a10 	vmov	r0, s0
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8de:	4639      	mov	r1, r7
 800a8e0:	f7f6 f906 	bl	8000af0 <__aeabi_dcmple>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d071      	beq.n	800a9cc <_strtod_l+0xa54>
 800a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d17c      	bne.n	800a9e8 <_strtod_l+0xa70>
 800a8ee:	f1b8 0f00 	cmp.w	r8, #0
 800a8f2:	d15a      	bne.n	800a9aa <_strtod_l+0xa32>
 800a8f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d15d      	bne.n	800a9b8 <_strtod_l+0xa40>
 800a8fc:	4b90      	ldr	r3, [pc, #576]	; (800ab40 <_strtod_l+0xbc8>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f8ea 	bl	8000adc <__aeabi_dcmplt>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d15c      	bne.n	800a9c6 <_strtod_l+0xa4e>
 800a90c:	4630      	mov	r0, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	4b8c      	ldr	r3, [pc, #560]	; (800ab44 <_strtod_l+0xbcc>)
 800a912:	2200      	movs	r2, #0
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	4606      	mov	r6, r0
 800a91a:	460f      	mov	r7, r1
 800a91c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a920:	9606      	str	r6, [sp, #24]
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a928:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a92c:	4b86      	ldr	r3, [pc, #536]	; (800ab48 <_strtod_l+0xbd0>)
 800a92e:	ea0a 0303 	and.w	r3, sl, r3
 800a932:	930d      	str	r3, [sp, #52]	; 0x34
 800a934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a936:	4b85      	ldr	r3, [pc, #532]	; (800ab4c <_strtod_l+0xbd4>)
 800a938:	429a      	cmp	r2, r3
 800a93a:	f040 8090 	bne.w	800aa5e <_strtod_l+0xae6>
 800a93e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a942:	ec49 8b10 	vmov	d0, r8, r9
 800a946:	f7ff f9b9 	bl	8009cbc <__ulp>
 800a94a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a94e:	ec51 0b10 	vmov	r0, r1, d0
 800a952:	f7f5 fe51 	bl	80005f8 <__aeabi_dmul>
 800a956:	4642      	mov	r2, r8
 800a958:	464b      	mov	r3, r9
 800a95a:	f7f5 fc97 	bl	800028c <__adddf3>
 800a95e:	460b      	mov	r3, r1
 800a960:	4979      	ldr	r1, [pc, #484]	; (800ab48 <_strtod_l+0xbd0>)
 800a962:	4a7b      	ldr	r2, [pc, #492]	; (800ab50 <_strtod_l+0xbd8>)
 800a964:	4019      	ands	r1, r3
 800a966:	4291      	cmp	r1, r2
 800a968:	4680      	mov	r8, r0
 800a96a:	d944      	bls.n	800a9f6 <_strtod_l+0xa7e>
 800a96c:	ee18 2a90 	vmov	r2, s17
 800a970:	4b78      	ldr	r3, [pc, #480]	; (800ab54 <_strtod_l+0xbdc>)
 800a972:	429a      	cmp	r2, r3
 800a974:	d104      	bne.n	800a980 <_strtod_l+0xa08>
 800a976:	ee18 3a10 	vmov	r3, s16
 800a97a:	3301      	adds	r3, #1
 800a97c:	f43f ad40 	beq.w	800a400 <_strtod_l+0x488>
 800a980:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ab54 <_strtod_l+0xbdc>
 800a984:	f04f 38ff 	mov.w	r8, #4294967295
 800a988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7fe fe6a 	bl	8009664 <_Bfree>
 800a990:	9905      	ldr	r1, [sp, #20]
 800a992:	4620      	mov	r0, r4
 800a994:	f7fe fe66 	bl	8009664 <_Bfree>
 800a998:	4659      	mov	r1, fp
 800a99a:	4620      	mov	r0, r4
 800a99c:	f7fe fe62 	bl	8009664 <_Bfree>
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f7fe fe5e 	bl	8009664 <_Bfree>
 800a9a8:	e609      	b.n	800a5be <_strtod_l+0x646>
 800a9aa:	f1b8 0f01 	cmp.w	r8, #1
 800a9ae:	d103      	bne.n	800a9b8 <_strtod_l+0xa40>
 800a9b0:	f1b9 0f00 	cmp.w	r9, #0
 800a9b4:	f43f ad95 	beq.w	800a4e2 <_strtod_l+0x56a>
 800a9b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ab10 <_strtod_l+0xb98>
 800a9bc:	4f60      	ldr	r7, [pc, #384]	; (800ab40 <_strtod_l+0xbc8>)
 800a9be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	e7ae      	b.n	800a924 <_strtod_l+0x9ac>
 800a9c6:	4f5f      	ldr	r7, [pc, #380]	; (800ab44 <_strtod_l+0xbcc>)
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	e7a7      	b.n	800a91c <_strtod_l+0x9a4>
 800a9cc:	4b5d      	ldr	r3, [pc, #372]	; (800ab44 <_strtod_l+0xbcc>)
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f7f5 fe10 	bl	80005f8 <__aeabi_dmul>
 800a9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d09c      	beq.n	800a91c <_strtod_l+0x9a4>
 800a9e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9e6:	e79d      	b.n	800a924 <_strtod_l+0x9ac>
 800a9e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ab18 <_strtod_l+0xba0>
 800a9ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9f0:	ec57 6b17 	vmov	r6, r7, d7
 800a9f4:	e796      	b.n	800a924 <_strtod_l+0x9ac>
 800a9f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a9fa:	9b04      	ldr	r3, [sp, #16]
 800a9fc:	46ca      	mov	sl, r9
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1c2      	bne.n	800a988 <_strtod_l+0xa10>
 800aa02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa08:	0d1b      	lsrs	r3, r3, #20
 800aa0a:	051b      	lsls	r3, r3, #20
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d1bb      	bne.n	800a988 <_strtod_l+0xa10>
 800aa10:	4630      	mov	r0, r6
 800aa12:	4639      	mov	r1, r7
 800aa14:	f7f6 f950 	bl	8000cb8 <__aeabi_d2lz>
 800aa18:	f7f5 fdc0 	bl	800059c <__aeabi_l2d>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f5 fc30 	bl	8000288 <__aeabi_dsub>
 800aa28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa2a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa2e:	ea43 0308 	orr.w	r3, r3, r8
 800aa32:	4313      	orrs	r3, r2
 800aa34:	4606      	mov	r6, r0
 800aa36:	460f      	mov	r7, r1
 800aa38:	d054      	beq.n	800aae4 <_strtod_l+0xb6c>
 800aa3a:	a339      	add	r3, pc, #228	; (adr r3, 800ab20 <_strtod_l+0xba8>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f6 f84c 	bl	8000adc <__aeabi_dcmplt>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	f47f ace5 	bne.w	800a414 <_strtod_l+0x49c>
 800aa4a:	a337      	add	r3, pc, #220	; (adr r3, 800ab28 <_strtod_l+0xbb0>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	4630      	mov	r0, r6
 800aa52:	4639      	mov	r1, r7
 800aa54:	f7f6 f860 	bl	8000b18 <__aeabi_dcmpgt>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d095      	beq.n	800a988 <_strtod_l+0xa10>
 800aa5c:	e4da      	b.n	800a414 <_strtod_l+0x49c>
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	b333      	cbz	r3, 800aab0 <_strtod_l+0xb38>
 800aa62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa68:	d822      	bhi.n	800aab0 <_strtod_l+0xb38>
 800aa6a:	a331      	add	r3, pc, #196	; (adr r3, 800ab30 <_strtod_l+0xbb8>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f6 f83c 	bl	8000af0 <__aeabi_dcmple>
 800aa78:	b1a0      	cbz	r0, 800aaa4 <_strtod_l+0xb2c>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f7f6 f893 	bl	8000ba8 <__aeabi_d2uiz>
 800aa82:	2801      	cmp	r0, #1
 800aa84:	bf38      	it	cc
 800aa86:	2001      	movcc	r0, #1
 800aa88:	f7f5 fd3c 	bl	8000504 <__aeabi_ui2d>
 800aa8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	bb23      	cbnz	r3, 800aade <_strtod_l+0xb66>
 800aa94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa98:	9010      	str	r0, [sp, #64]	; 0x40
 800aa9a:	9311      	str	r3, [sp, #68]	; 0x44
 800aa9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aaa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aaa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	930f      	str	r3, [sp, #60]	; 0x3c
 800aab0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aab4:	eeb0 0a48 	vmov.f32	s0, s16
 800aab8:	eef0 0a68 	vmov.f32	s1, s17
 800aabc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aac0:	f7ff f8fc 	bl	8009cbc <__ulp>
 800aac4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aac8:	ec53 2b10 	vmov	r2, r3, d0
 800aacc:	f7f5 fd94 	bl	80005f8 <__aeabi_dmul>
 800aad0:	ec53 2b18 	vmov	r2, r3, d8
 800aad4:	f7f5 fbda 	bl	800028c <__adddf3>
 800aad8:	4680      	mov	r8, r0
 800aada:	4689      	mov	r9, r1
 800aadc:	e78d      	b.n	800a9fa <_strtod_l+0xa82>
 800aade:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aae2:	e7db      	b.n	800aa9c <_strtod_l+0xb24>
 800aae4:	a314      	add	r3, pc, #80	; (adr r3, 800ab38 <_strtod_l+0xbc0>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	f7f5 fff7 	bl	8000adc <__aeabi_dcmplt>
 800aaee:	e7b3      	b.n	800aa58 <_strtod_l+0xae0>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aaf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	f7ff ba7c 	b.w	8009ff6 <_strtod_l+0x7e>
 800aafe:	2a65      	cmp	r2, #101	; 0x65
 800ab00:	f43f ab75 	beq.w	800a1ee <_strtod_l+0x276>
 800ab04:	2a45      	cmp	r2, #69	; 0x45
 800ab06:	f43f ab72 	beq.w	800a1ee <_strtod_l+0x276>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	f7ff bbaa 	b.w	800a264 <_strtod_l+0x2ec>
 800ab10:	00000000 	.word	0x00000000
 800ab14:	bff00000 	.word	0xbff00000
 800ab18:	00000000 	.word	0x00000000
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	94a03595 	.word	0x94a03595
 800ab24:	3fdfffff 	.word	0x3fdfffff
 800ab28:	35afe535 	.word	0x35afe535
 800ab2c:	3fe00000 	.word	0x3fe00000
 800ab30:	ffc00000 	.word	0xffc00000
 800ab34:	41dfffff 	.word	0x41dfffff
 800ab38:	94a03595 	.word	0x94a03595
 800ab3c:	3fcfffff 	.word	0x3fcfffff
 800ab40:	3ff00000 	.word	0x3ff00000
 800ab44:	3fe00000 	.word	0x3fe00000
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	7fe00000 	.word	0x7fe00000
 800ab50:	7c9fffff 	.word	0x7c9fffff
 800ab54:	7fefffff 	.word	0x7fefffff

0800ab58 <_strtod_r>:
 800ab58:	4b01      	ldr	r3, [pc, #4]	; (800ab60 <_strtod_r+0x8>)
 800ab5a:	f7ff ba0d 	b.w	8009f78 <_strtod_l>
 800ab5e:	bf00      	nop
 800ab60:	20000068 	.word	0x20000068

0800ab64 <_strtol_l.constprop.0>:
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6a:	d001      	beq.n	800ab70 <_strtol_l.constprop.0+0xc>
 800ab6c:	2b24      	cmp	r3, #36	; 0x24
 800ab6e:	d906      	bls.n	800ab7e <_strtol_l.constprop.0+0x1a>
 800ab70:	f7fd fd8a 	bl	8008688 <__errno>
 800ab74:	2316      	movs	r3, #22
 800ab76:	6003      	str	r3, [r0, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac64 <_strtol_l.constprop.0+0x100>
 800ab82:	460d      	mov	r5, r1
 800ab84:	462e      	mov	r6, r5
 800ab86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab8e:	f017 0708 	ands.w	r7, r7, #8
 800ab92:	d1f7      	bne.n	800ab84 <_strtol_l.constprop.0+0x20>
 800ab94:	2c2d      	cmp	r4, #45	; 0x2d
 800ab96:	d132      	bne.n	800abfe <_strtol_l.constprop.0+0x9a>
 800ab98:	782c      	ldrb	r4, [r5, #0]
 800ab9a:	2701      	movs	r7, #1
 800ab9c:	1cb5      	adds	r5, r6, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d05b      	beq.n	800ac5a <_strtol_l.constprop.0+0xf6>
 800aba2:	2b10      	cmp	r3, #16
 800aba4:	d109      	bne.n	800abba <_strtol_l.constprop.0+0x56>
 800aba6:	2c30      	cmp	r4, #48	; 0x30
 800aba8:	d107      	bne.n	800abba <_strtol_l.constprop.0+0x56>
 800abaa:	782c      	ldrb	r4, [r5, #0]
 800abac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abb0:	2c58      	cmp	r4, #88	; 0x58
 800abb2:	d14d      	bne.n	800ac50 <_strtol_l.constprop.0+0xec>
 800abb4:	786c      	ldrb	r4, [r5, #1]
 800abb6:	2310      	movs	r3, #16
 800abb8:	3502      	adds	r5, #2
 800abba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc2:	f04f 0e00 	mov.w	lr, #0
 800abc6:	fbb8 f9f3 	udiv	r9, r8, r3
 800abca:	4676      	mov	r6, lr
 800abcc:	fb03 8a19 	mls	sl, r3, r9, r8
 800abd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abd4:	f1bc 0f09 	cmp.w	ip, #9
 800abd8:	d816      	bhi.n	800ac08 <_strtol_l.constprop.0+0xa4>
 800abda:	4664      	mov	r4, ip
 800abdc:	42a3      	cmp	r3, r4
 800abde:	dd24      	ble.n	800ac2a <_strtol_l.constprop.0+0xc6>
 800abe0:	f1be 3fff 	cmp.w	lr, #4294967295
 800abe4:	d008      	beq.n	800abf8 <_strtol_l.constprop.0+0x94>
 800abe6:	45b1      	cmp	r9, r6
 800abe8:	d31c      	bcc.n	800ac24 <_strtol_l.constprop.0+0xc0>
 800abea:	d101      	bne.n	800abf0 <_strtol_l.constprop.0+0x8c>
 800abec:	45a2      	cmp	sl, r4
 800abee:	db19      	blt.n	800ac24 <_strtol_l.constprop.0+0xc0>
 800abf0:	fb06 4603 	mla	r6, r6, r3, r4
 800abf4:	f04f 0e01 	mov.w	lr, #1
 800abf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abfc:	e7e8      	b.n	800abd0 <_strtol_l.constprop.0+0x6c>
 800abfe:	2c2b      	cmp	r4, #43	; 0x2b
 800ac00:	bf04      	itt	eq
 800ac02:	782c      	ldrbeq	r4, [r5, #0]
 800ac04:	1cb5      	addeq	r5, r6, #2
 800ac06:	e7ca      	b.n	800ab9e <_strtol_l.constprop.0+0x3a>
 800ac08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac0c:	f1bc 0f19 	cmp.w	ip, #25
 800ac10:	d801      	bhi.n	800ac16 <_strtol_l.constprop.0+0xb2>
 800ac12:	3c37      	subs	r4, #55	; 0x37
 800ac14:	e7e2      	b.n	800abdc <_strtol_l.constprop.0+0x78>
 800ac16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac1a:	f1bc 0f19 	cmp.w	ip, #25
 800ac1e:	d804      	bhi.n	800ac2a <_strtol_l.constprop.0+0xc6>
 800ac20:	3c57      	subs	r4, #87	; 0x57
 800ac22:	e7db      	b.n	800abdc <_strtol_l.constprop.0+0x78>
 800ac24:	f04f 3eff 	mov.w	lr, #4294967295
 800ac28:	e7e6      	b.n	800abf8 <_strtol_l.constprop.0+0x94>
 800ac2a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac2e:	d105      	bne.n	800ac3c <_strtol_l.constprop.0+0xd8>
 800ac30:	2322      	movs	r3, #34	; 0x22
 800ac32:	6003      	str	r3, [r0, #0]
 800ac34:	4646      	mov	r6, r8
 800ac36:	b942      	cbnz	r2, 800ac4a <_strtol_l.constprop.0+0xe6>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	e79e      	b.n	800ab7a <_strtol_l.constprop.0+0x16>
 800ac3c:	b107      	cbz	r7, 800ac40 <_strtol_l.constprop.0+0xdc>
 800ac3e:	4276      	negs	r6, r6
 800ac40:	2a00      	cmp	r2, #0
 800ac42:	d0f9      	beq.n	800ac38 <_strtol_l.constprop.0+0xd4>
 800ac44:	f1be 0f00 	cmp.w	lr, #0
 800ac48:	d000      	beq.n	800ac4c <_strtol_l.constprop.0+0xe8>
 800ac4a:	1e69      	subs	r1, r5, #1
 800ac4c:	6011      	str	r1, [r2, #0]
 800ac4e:	e7f3      	b.n	800ac38 <_strtol_l.constprop.0+0xd4>
 800ac50:	2430      	movs	r4, #48	; 0x30
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1b1      	bne.n	800abba <_strtol_l.constprop.0+0x56>
 800ac56:	2308      	movs	r3, #8
 800ac58:	e7af      	b.n	800abba <_strtol_l.constprop.0+0x56>
 800ac5a:	2c30      	cmp	r4, #48	; 0x30
 800ac5c:	d0a5      	beq.n	800abaa <_strtol_l.constprop.0+0x46>
 800ac5e:	230a      	movs	r3, #10
 800ac60:	e7ab      	b.n	800abba <_strtol_l.constprop.0+0x56>
 800ac62:	bf00      	nop
 800ac64:	0800cbc9 	.word	0x0800cbc9

0800ac68 <_strtol_r>:
 800ac68:	f7ff bf7c 	b.w	800ab64 <_strtol_l.constprop.0>

0800ac6c <__ssputs_r>:
 800ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac70:	688e      	ldr	r6, [r1, #8]
 800ac72:	461f      	mov	r7, r3
 800ac74:	42be      	cmp	r6, r7
 800ac76:	680b      	ldr	r3, [r1, #0]
 800ac78:	4682      	mov	sl, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	d82c      	bhi.n	800acda <__ssputs_r+0x6e>
 800ac80:	898a      	ldrh	r2, [r1, #12]
 800ac82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac86:	d026      	beq.n	800acd6 <__ssputs_r+0x6a>
 800ac88:	6965      	ldr	r5, [r4, #20]
 800ac8a:	6909      	ldr	r1, [r1, #16]
 800ac8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac90:	eba3 0901 	sub.w	r9, r3, r1
 800ac94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac98:	1c7b      	adds	r3, r7, #1
 800ac9a:	444b      	add	r3, r9
 800ac9c:	106d      	asrs	r5, r5, #1
 800ac9e:	429d      	cmp	r5, r3
 800aca0:	bf38      	it	cc
 800aca2:	461d      	movcc	r5, r3
 800aca4:	0553      	lsls	r3, r2, #21
 800aca6:	d527      	bpl.n	800acf8 <__ssputs_r+0x8c>
 800aca8:	4629      	mov	r1, r5
 800acaa:	f7fe fc0f 	bl	80094cc <_malloc_r>
 800acae:	4606      	mov	r6, r0
 800acb0:	b360      	cbz	r0, 800ad0c <__ssputs_r+0xa0>
 800acb2:	6921      	ldr	r1, [r4, #16]
 800acb4:	464a      	mov	r2, r9
 800acb6:	f000 fa1b 	bl	800b0f0 <memcpy>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	6126      	str	r6, [r4, #16]
 800acc8:	6165      	str	r5, [r4, #20]
 800acca:	444e      	add	r6, r9
 800accc:	eba5 0509 	sub.w	r5, r5, r9
 800acd0:	6026      	str	r6, [r4, #0]
 800acd2:	60a5      	str	r5, [r4, #8]
 800acd4:	463e      	mov	r6, r7
 800acd6:	42be      	cmp	r6, r7
 800acd8:	d900      	bls.n	800acdc <__ssputs_r+0x70>
 800acda:	463e      	mov	r6, r7
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	4632      	mov	r2, r6
 800ace0:	4641      	mov	r1, r8
 800ace2:	f000 f9c9 	bl	800b078 <memmove>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	1b9b      	subs	r3, r3, r6
 800acea:	60a3      	str	r3, [r4, #8]
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	4433      	add	r3, r6
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	2000      	movs	r0, #0
 800acf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf8:	462a      	mov	r2, r5
 800acfa:	f000 fdae 	bl	800b85a <_realloc_r>
 800acfe:	4606      	mov	r6, r0
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1e0      	bne.n	800acc6 <__ssputs_r+0x5a>
 800ad04:	6921      	ldr	r1, [r4, #16]
 800ad06:	4650      	mov	r0, sl
 800ad08:	f7fe fb6c 	bl	80093e4 <_free_r>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	f8ca 3000 	str.w	r3, [sl]
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad18:	81a3      	strh	r3, [r4, #12]
 800ad1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1e:	e7e9      	b.n	800acf4 <__ssputs_r+0x88>

0800ad20 <_svfiprintf_r>:
 800ad20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	4698      	mov	r8, r3
 800ad26:	898b      	ldrh	r3, [r1, #12]
 800ad28:	061b      	lsls	r3, r3, #24
 800ad2a:	b09d      	sub	sp, #116	; 0x74
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	4614      	mov	r4, r2
 800ad32:	d50e      	bpl.n	800ad52 <_svfiprintf_r+0x32>
 800ad34:	690b      	ldr	r3, [r1, #16]
 800ad36:	b963      	cbnz	r3, 800ad52 <_svfiprintf_r+0x32>
 800ad38:	2140      	movs	r1, #64	; 0x40
 800ad3a:	f7fe fbc7 	bl	80094cc <_malloc_r>
 800ad3e:	6028      	str	r0, [r5, #0]
 800ad40:	6128      	str	r0, [r5, #16]
 800ad42:	b920      	cbnz	r0, 800ad4e <_svfiprintf_r+0x2e>
 800ad44:	230c      	movs	r3, #12
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4c:	e0d0      	b.n	800aef0 <_svfiprintf_r+0x1d0>
 800ad4e:	2340      	movs	r3, #64	; 0x40
 800ad50:	616b      	str	r3, [r5, #20]
 800ad52:	2300      	movs	r3, #0
 800ad54:	9309      	str	r3, [sp, #36]	; 0x24
 800ad56:	2320      	movs	r3, #32
 800ad58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad60:	2330      	movs	r3, #48	; 0x30
 800ad62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af08 <_svfiprintf_r+0x1e8>
 800ad66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad6a:	f04f 0901 	mov.w	r9, #1
 800ad6e:	4623      	mov	r3, r4
 800ad70:	469a      	mov	sl, r3
 800ad72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad76:	b10a      	cbz	r2, 800ad7c <_svfiprintf_r+0x5c>
 800ad78:	2a25      	cmp	r2, #37	; 0x25
 800ad7a:	d1f9      	bne.n	800ad70 <_svfiprintf_r+0x50>
 800ad7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ad80:	d00b      	beq.n	800ad9a <_svfiprintf_r+0x7a>
 800ad82:	465b      	mov	r3, fp
 800ad84:	4622      	mov	r2, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f7ff ff6f 	bl	800ac6c <__ssputs_r>
 800ad8e:	3001      	adds	r0, #1
 800ad90:	f000 80a9 	beq.w	800aee6 <_svfiprintf_r+0x1c6>
 800ad94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad96:	445a      	add	r2, fp
 800ad98:	9209      	str	r2, [sp, #36]	; 0x24
 800ad9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 80a1 	beq.w	800aee6 <_svfiprintf_r+0x1c6>
 800ada4:	2300      	movs	r3, #0
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295
 800adaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adae:	f10a 0a01 	add.w	sl, sl, #1
 800adb2:	9304      	str	r3, [sp, #16]
 800adb4:	9307      	str	r3, [sp, #28]
 800adb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adba:	931a      	str	r3, [sp, #104]	; 0x68
 800adbc:	4654      	mov	r4, sl
 800adbe:	2205      	movs	r2, #5
 800adc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc4:	4850      	ldr	r0, [pc, #320]	; (800af08 <_svfiprintf_r+0x1e8>)
 800adc6:	f7f5 fa03 	bl	80001d0 <memchr>
 800adca:	9a04      	ldr	r2, [sp, #16]
 800adcc:	b9d8      	cbnz	r0, 800ae06 <_svfiprintf_r+0xe6>
 800adce:	06d0      	lsls	r0, r2, #27
 800add0:	bf44      	itt	mi
 800add2:	2320      	movmi	r3, #32
 800add4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add8:	0711      	lsls	r1, r2, #28
 800adda:	bf44      	itt	mi
 800addc:	232b      	movmi	r3, #43	; 0x2b
 800adde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ade2:	f89a 3000 	ldrb.w	r3, [sl]
 800ade6:	2b2a      	cmp	r3, #42	; 0x2a
 800ade8:	d015      	beq.n	800ae16 <_svfiprintf_r+0xf6>
 800adea:	9a07      	ldr	r2, [sp, #28]
 800adec:	4654      	mov	r4, sl
 800adee:	2000      	movs	r0, #0
 800adf0:	f04f 0c0a 	mov.w	ip, #10
 800adf4:	4621      	mov	r1, r4
 800adf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adfa:	3b30      	subs	r3, #48	; 0x30
 800adfc:	2b09      	cmp	r3, #9
 800adfe:	d94d      	bls.n	800ae9c <_svfiprintf_r+0x17c>
 800ae00:	b1b0      	cbz	r0, 800ae30 <_svfiprintf_r+0x110>
 800ae02:	9207      	str	r2, [sp, #28]
 800ae04:	e014      	b.n	800ae30 <_svfiprintf_r+0x110>
 800ae06:	eba0 0308 	sub.w	r3, r0, r8
 800ae0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	9304      	str	r3, [sp, #16]
 800ae12:	46a2      	mov	sl, r4
 800ae14:	e7d2      	b.n	800adbc <_svfiprintf_r+0x9c>
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	1d19      	adds	r1, r3, #4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	9103      	str	r1, [sp, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfbb      	ittet	lt
 800ae22:	425b      	neglt	r3, r3
 800ae24:	f042 0202 	orrlt.w	r2, r2, #2
 800ae28:	9307      	strge	r3, [sp, #28]
 800ae2a:	9307      	strlt	r3, [sp, #28]
 800ae2c:	bfb8      	it	lt
 800ae2e:	9204      	strlt	r2, [sp, #16]
 800ae30:	7823      	ldrb	r3, [r4, #0]
 800ae32:	2b2e      	cmp	r3, #46	; 0x2e
 800ae34:	d10c      	bne.n	800ae50 <_svfiprintf_r+0x130>
 800ae36:	7863      	ldrb	r3, [r4, #1]
 800ae38:	2b2a      	cmp	r3, #42	; 0x2a
 800ae3a:	d134      	bne.n	800aea6 <_svfiprintf_r+0x186>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	1d1a      	adds	r2, r3, #4
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	9203      	str	r2, [sp, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bfb8      	it	lt
 800ae48:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae4c:	3402      	adds	r4, #2
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af18 <_svfiprintf_r+0x1f8>
 800ae54:	7821      	ldrb	r1, [r4, #0]
 800ae56:	2203      	movs	r2, #3
 800ae58:	4650      	mov	r0, sl
 800ae5a:	f7f5 f9b9 	bl	80001d0 <memchr>
 800ae5e:	b138      	cbz	r0, 800ae70 <_svfiprintf_r+0x150>
 800ae60:	9b04      	ldr	r3, [sp, #16]
 800ae62:	eba0 000a 	sub.w	r0, r0, sl
 800ae66:	2240      	movs	r2, #64	; 0x40
 800ae68:	4082      	lsls	r2, r0
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	3401      	adds	r4, #1
 800ae6e:	9304      	str	r3, [sp, #16]
 800ae70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae74:	4825      	ldr	r0, [pc, #148]	; (800af0c <_svfiprintf_r+0x1ec>)
 800ae76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	f7f5 f9a8 	bl	80001d0 <memchr>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d038      	beq.n	800aef6 <_svfiprintf_r+0x1d6>
 800ae84:	4b22      	ldr	r3, [pc, #136]	; (800af10 <_svfiprintf_r+0x1f0>)
 800ae86:	bb1b      	cbnz	r3, 800aed0 <_svfiprintf_r+0x1b0>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	3307      	adds	r3, #7
 800ae8c:	f023 0307 	bic.w	r3, r3, #7
 800ae90:	3308      	adds	r3, #8
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae96:	4433      	add	r3, r6
 800ae98:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9a:	e768      	b.n	800ad6e <_svfiprintf_r+0x4e>
 800ae9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea0:	460c      	mov	r4, r1
 800aea2:	2001      	movs	r0, #1
 800aea4:	e7a6      	b.n	800adf4 <_svfiprintf_r+0xd4>
 800aea6:	2300      	movs	r3, #0
 800aea8:	3401      	adds	r4, #1
 800aeaa:	9305      	str	r3, [sp, #20]
 800aeac:	4619      	mov	r1, r3
 800aeae:	f04f 0c0a 	mov.w	ip, #10
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb8:	3a30      	subs	r2, #48	; 0x30
 800aeba:	2a09      	cmp	r2, #9
 800aebc:	d903      	bls.n	800aec6 <_svfiprintf_r+0x1a6>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0c6      	beq.n	800ae50 <_svfiprintf_r+0x130>
 800aec2:	9105      	str	r1, [sp, #20]
 800aec4:	e7c4      	b.n	800ae50 <_svfiprintf_r+0x130>
 800aec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeca:	4604      	mov	r4, r0
 800aecc:	2301      	movs	r3, #1
 800aece:	e7f0      	b.n	800aeb2 <_svfiprintf_r+0x192>
 800aed0:	ab03      	add	r3, sp, #12
 800aed2:	9300      	str	r3, [sp, #0]
 800aed4:	462a      	mov	r2, r5
 800aed6:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <_svfiprintf_r+0x1f4>)
 800aed8:	a904      	add	r1, sp, #16
 800aeda:	4638      	mov	r0, r7
 800aedc:	f7fc fc52 	bl	8007784 <_printf_float>
 800aee0:	1c42      	adds	r2, r0, #1
 800aee2:	4606      	mov	r6, r0
 800aee4:	d1d6      	bne.n	800ae94 <_svfiprintf_r+0x174>
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	065b      	lsls	r3, r3, #25
 800aeea:	f53f af2d 	bmi.w	800ad48 <_svfiprintf_r+0x28>
 800aeee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aef0:	b01d      	add	sp, #116	; 0x74
 800aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b05      	ldr	r3, [pc, #20]	; (800af14 <_svfiprintf_r+0x1f4>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f7fc fee3 	bl	8007ccc <_printf_i>
 800af06:	e7eb      	b.n	800aee0 <_svfiprintf_r+0x1c0>
 800af08:	0800ccc9 	.word	0x0800ccc9
 800af0c:	0800ccd3 	.word	0x0800ccd3
 800af10:	08007785 	.word	0x08007785
 800af14:	0800ac6d 	.word	0x0800ac6d
 800af18:	0800cccf 	.word	0x0800cccf

0800af1c <__sflush_r>:
 800af1c:	898a      	ldrh	r2, [r1, #12]
 800af1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af22:	4605      	mov	r5, r0
 800af24:	0710      	lsls	r0, r2, #28
 800af26:	460c      	mov	r4, r1
 800af28:	d458      	bmi.n	800afdc <__sflush_r+0xc0>
 800af2a:	684b      	ldr	r3, [r1, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	dc05      	bgt.n	800af3c <__sflush_r+0x20>
 800af30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af32:	2b00      	cmp	r3, #0
 800af34:	dc02      	bgt.n	800af3c <__sflush_r+0x20>
 800af36:	2000      	movs	r0, #0
 800af38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af3e:	2e00      	cmp	r6, #0
 800af40:	d0f9      	beq.n	800af36 <__sflush_r+0x1a>
 800af42:	2300      	movs	r3, #0
 800af44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af48:	682f      	ldr	r7, [r5, #0]
 800af4a:	6a21      	ldr	r1, [r4, #32]
 800af4c:	602b      	str	r3, [r5, #0]
 800af4e:	d032      	beq.n	800afb6 <__sflush_r+0x9a>
 800af50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	075a      	lsls	r2, r3, #29
 800af56:	d505      	bpl.n	800af64 <__sflush_r+0x48>
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	1ac0      	subs	r0, r0, r3
 800af5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af5e:	b10b      	cbz	r3, 800af64 <__sflush_r+0x48>
 800af60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af62:	1ac0      	subs	r0, r0, r3
 800af64:	2300      	movs	r3, #0
 800af66:	4602      	mov	r2, r0
 800af68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af6a:	6a21      	ldr	r1, [r4, #32]
 800af6c:	4628      	mov	r0, r5
 800af6e:	47b0      	blx	r6
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	d106      	bne.n	800af84 <__sflush_r+0x68>
 800af76:	6829      	ldr	r1, [r5, #0]
 800af78:	291d      	cmp	r1, #29
 800af7a:	d82b      	bhi.n	800afd4 <__sflush_r+0xb8>
 800af7c:	4a29      	ldr	r2, [pc, #164]	; (800b024 <__sflush_r+0x108>)
 800af7e:	410a      	asrs	r2, r1
 800af80:	07d6      	lsls	r6, r2, #31
 800af82:	d427      	bmi.n	800afd4 <__sflush_r+0xb8>
 800af84:	2200      	movs	r2, #0
 800af86:	6062      	str	r2, [r4, #4]
 800af88:	04d9      	lsls	r1, r3, #19
 800af8a:	6922      	ldr	r2, [r4, #16]
 800af8c:	6022      	str	r2, [r4, #0]
 800af8e:	d504      	bpl.n	800af9a <__sflush_r+0x7e>
 800af90:	1c42      	adds	r2, r0, #1
 800af92:	d101      	bne.n	800af98 <__sflush_r+0x7c>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b903      	cbnz	r3, 800af9a <__sflush_r+0x7e>
 800af98:	6560      	str	r0, [r4, #84]	; 0x54
 800af9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af9c:	602f      	str	r7, [r5, #0]
 800af9e:	2900      	cmp	r1, #0
 800afa0:	d0c9      	beq.n	800af36 <__sflush_r+0x1a>
 800afa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afa6:	4299      	cmp	r1, r3
 800afa8:	d002      	beq.n	800afb0 <__sflush_r+0x94>
 800afaa:	4628      	mov	r0, r5
 800afac:	f7fe fa1a 	bl	80093e4 <_free_r>
 800afb0:	2000      	movs	r0, #0
 800afb2:	6360      	str	r0, [r4, #52]	; 0x34
 800afb4:	e7c0      	b.n	800af38 <__sflush_r+0x1c>
 800afb6:	2301      	movs	r3, #1
 800afb8:	4628      	mov	r0, r5
 800afba:	47b0      	blx	r6
 800afbc:	1c41      	adds	r1, r0, #1
 800afbe:	d1c8      	bne.n	800af52 <__sflush_r+0x36>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0c5      	beq.n	800af52 <__sflush_r+0x36>
 800afc6:	2b1d      	cmp	r3, #29
 800afc8:	d001      	beq.n	800afce <__sflush_r+0xb2>
 800afca:	2b16      	cmp	r3, #22
 800afcc:	d101      	bne.n	800afd2 <__sflush_r+0xb6>
 800afce:	602f      	str	r7, [r5, #0]
 800afd0:	e7b1      	b.n	800af36 <__sflush_r+0x1a>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	e7ad      	b.n	800af38 <__sflush_r+0x1c>
 800afdc:	690f      	ldr	r7, [r1, #16]
 800afde:	2f00      	cmp	r7, #0
 800afe0:	d0a9      	beq.n	800af36 <__sflush_r+0x1a>
 800afe2:	0793      	lsls	r3, r2, #30
 800afe4:	680e      	ldr	r6, [r1, #0]
 800afe6:	bf08      	it	eq
 800afe8:	694b      	ldreq	r3, [r1, #20]
 800afea:	600f      	str	r7, [r1, #0]
 800afec:	bf18      	it	ne
 800afee:	2300      	movne	r3, #0
 800aff0:	eba6 0807 	sub.w	r8, r6, r7
 800aff4:	608b      	str	r3, [r1, #8]
 800aff6:	f1b8 0f00 	cmp.w	r8, #0
 800affa:	dd9c      	ble.n	800af36 <__sflush_r+0x1a>
 800affc:	6a21      	ldr	r1, [r4, #32]
 800affe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b000:	4643      	mov	r3, r8
 800b002:	463a      	mov	r2, r7
 800b004:	4628      	mov	r0, r5
 800b006:	47b0      	blx	r6
 800b008:	2800      	cmp	r0, #0
 800b00a:	dc06      	bgt.n	800b01a <__sflush_r+0xfe>
 800b00c:	89a3      	ldrh	r3, [r4, #12]
 800b00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	f04f 30ff 	mov.w	r0, #4294967295
 800b018:	e78e      	b.n	800af38 <__sflush_r+0x1c>
 800b01a:	4407      	add	r7, r0
 800b01c:	eba8 0800 	sub.w	r8, r8, r0
 800b020:	e7e9      	b.n	800aff6 <__sflush_r+0xda>
 800b022:	bf00      	nop
 800b024:	dfbffffe 	.word	0xdfbffffe

0800b028 <_fflush_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	690b      	ldr	r3, [r1, #16]
 800b02c:	4605      	mov	r5, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	b913      	cbnz	r3, 800b038 <_fflush_r+0x10>
 800b032:	2500      	movs	r5, #0
 800b034:	4628      	mov	r0, r5
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	b118      	cbz	r0, 800b042 <_fflush_r+0x1a>
 800b03a:	6a03      	ldr	r3, [r0, #32]
 800b03c:	b90b      	cbnz	r3, 800b042 <_fflush_r+0x1a>
 800b03e:	f7fd fa03 	bl	8008448 <__sinit>
 800b042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0f3      	beq.n	800b032 <_fflush_r+0xa>
 800b04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b04c:	07d0      	lsls	r0, r2, #31
 800b04e:	d404      	bmi.n	800b05a <_fflush_r+0x32>
 800b050:	0599      	lsls	r1, r3, #22
 800b052:	d402      	bmi.n	800b05a <_fflush_r+0x32>
 800b054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b056:	f7fd fb42 	bl	80086de <__retarget_lock_acquire_recursive>
 800b05a:	4628      	mov	r0, r5
 800b05c:	4621      	mov	r1, r4
 800b05e:	f7ff ff5d 	bl	800af1c <__sflush_r>
 800b062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b064:	07da      	lsls	r2, r3, #31
 800b066:	4605      	mov	r5, r0
 800b068:	d4e4      	bmi.n	800b034 <_fflush_r+0xc>
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	059b      	lsls	r3, r3, #22
 800b06e:	d4e1      	bmi.n	800b034 <_fflush_r+0xc>
 800b070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b072:	f7fd fb35 	bl	80086e0 <__retarget_lock_release_recursive>
 800b076:	e7dd      	b.n	800b034 <_fflush_r+0xc>

0800b078 <memmove>:
 800b078:	4288      	cmp	r0, r1
 800b07a:	b510      	push	{r4, lr}
 800b07c:	eb01 0402 	add.w	r4, r1, r2
 800b080:	d902      	bls.n	800b088 <memmove+0x10>
 800b082:	4284      	cmp	r4, r0
 800b084:	4623      	mov	r3, r4
 800b086:	d807      	bhi.n	800b098 <memmove+0x20>
 800b088:	1e43      	subs	r3, r0, #1
 800b08a:	42a1      	cmp	r1, r4
 800b08c:	d008      	beq.n	800b0a0 <memmove+0x28>
 800b08e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b092:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b096:	e7f8      	b.n	800b08a <memmove+0x12>
 800b098:	4402      	add	r2, r0
 800b09a:	4601      	mov	r1, r0
 800b09c:	428a      	cmp	r2, r1
 800b09e:	d100      	bne.n	800b0a2 <memmove+0x2a>
 800b0a0:	bd10      	pop	{r4, pc}
 800b0a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0aa:	e7f7      	b.n	800b09c <memmove+0x24>

0800b0ac <strncmp>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	b16a      	cbz	r2, 800b0cc <strncmp+0x20>
 800b0b0:	3901      	subs	r1, #1
 800b0b2:	1884      	adds	r4, r0, r2
 800b0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d103      	bne.n	800b0c8 <strncmp+0x1c>
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d001      	beq.n	800b0c8 <strncmp+0x1c>
 800b0c4:	2a00      	cmp	r2, #0
 800b0c6:	d1f5      	bne.n	800b0b4 <strncmp+0x8>
 800b0c8:	1ad0      	subs	r0, r2, r3
 800b0ca:	bd10      	pop	{r4, pc}
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	e7fc      	b.n	800b0ca <strncmp+0x1e>

0800b0d0 <_sbrk_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d06      	ldr	r5, [pc, #24]	; (800b0ec <_sbrk_r+0x1c>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	f7f7 f8d4 	bl	8002288 <_sbrk>
 800b0e0:	1c43      	adds	r3, r0, #1
 800b0e2:	d102      	bne.n	800b0ea <_sbrk_r+0x1a>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	b103      	cbz	r3, 800b0ea <_sbrk_r+0x1a>
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	bd38      	pop	{r3, r4, r5, pc}
 800b0ec:	200004f0 	.word	0x200004f0

0800b0f0 <memcpy>:
 800b0f0:	440a      	add	r2, r1
 800b0f2:	4291      	cmp	r1, r2
 800b0f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0f8:	d100      	bne.n	800b0fc <memcpy+0xc>
 800b0fa:	4770      	bx	lr
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b106:	4291      	cmp	r1, r2
 800b108:	d1f9      	bne.n	800b0fe <memcpy+0xe>
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	0000      	movs	r0, r0
	...

0800b110 <nan>:
 800b110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b118 <nan+0x8>
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	00000000 	.word	0x00000000
 800b11c:	7ff80000 	.word	0x7ff80000

0800b120 <__assert_func>:
 800b120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b122:	4614      	mov	r4, r2
 800b124:	461a      	mov	r2, r3
 800b126:	4b09      	ldr	r3, [pc, #36]	; (800b14c <__assert_func+0x2c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4605      	mov	r5, r0
 800b12c:	68d8      	ldr	r0, [r3, #12]
 800b12e:	b14c      	cbz	r4, 800b144 <__assert_func+0x24>
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <__assert_func+0x30>)
 800b132:	9100      	str	r1, [sp, #0]
 800b134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b138:	4906      	ldr	r1, [pc, #24]	; (800b154 <__assert_func+0x34>)
 800b13a:	462b      	mov	r3, r5
 800b13c:	f000 fbca 	bl	800b8d4 <fiprintf>
 800b140:	f000 fbda 	bl	800b8f8 <abort>
 800b144:	4b04      	ldr	r3, [pc, #16]	; (800b158 <__assert_func+0x38>)
 800b146:	461c      	mov	r4, r3
 800b148:	e7f3      	b.n	800b132 <__assert_func+0x12>
 800b14a:	bf00      	nop
 800b14c:	20000064 	.word	0x20000064
 800b150:	0800cce2 	.word	0x0800cce2
 800b154:	0800ccef 	.word	0x0800ccef
 800b158:	0800cd1d 	.word	0x0800cd1d

0800b15c <_calloc_r>:
 800b15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b15e:	fba1 2402 	umull	r2, r4, r1, r2
 800b162:	b94c      	cbnz	r4, 800b178 <_calloc_r+0x1c>
 800b164:	4611      	mov	r1, r2
 800b166:	9201      	str	r2, [sp, #4]
 800b168:	f7fe f9b0 	bl	80094cc <_malloc_r>
 800b16c:	9a01      	ldr	r2, [sp, #4]
 800b16e:	4605      	mov	r5, r0
 800b170:	b930      	cbnz	r0, 800b180 <_calloc_r+0x24>
 800b172:	4628      	mov	r0, r5
 800b174:	b003      	add	sp, #12
 800b176:	bd30      	pop	{r4, r5, pc}
 800b178:	220c      	movs	r2, #12
 800b17a:	6002      	str	r2, [r0, #0]
 800b17c:	2500      	movs	r5, #0
 800b17e:	e7f8      	b.n	800b172 <_calloc_r+0x16>
 800b180:	4621      	mov	r1, r4
 800b182:	f7fd fa2e 	bl	80085e2 <memset>
 800b186:	e7f4      	b.n	800b172 <_calloc_r+0x16>

0800b188 <rshift>:
 800b188:	6903      	ldr	r3, [r0, #16]
 800b18a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b18e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b192:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b196:	f100 0414 	add.w	r4, r0, #20
 800b19a:	dd45      	ble.n	800b228 <rshift+0xa0>
 800b19c:	f011 011f 	ands.w	r1, r1, #31
 800b1a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1a8:	d10c      	bne.n	800b1c4 <rshift+0x3c>
 800b1aa:	f100 0710 	add.w	r7, r0, #16
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	42b1      	cmp	r1, r6
 800b1b2:	d334      	bcc.n	800b21e <rshift+0x96>
 800b1b4:	1a9b      	subs	r3, r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	1eea      	subs	r2, r5, #3
 800b1ba:	4296      	cmp	r6, r2
 800b1bc:	bf38      	it	cc
 800b1be:	2300      	movcc	r3, #0
 800b1c0:	4423      	add	r3, r4
 800b1c2:	e015      	b.n	800b1f0 <rshift+0x68>
 800b1c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1c8:	f1c1 0820 	rsb	r8, r1, #32
 800b1cc:	40cf      	lsrs	r7, r1
 800b1ce:	f105 0e04 	add.w	lr, r5, #4
 800b1d2:	46a1      	mov	r9, r4
 800b1d4:	4576      	cmp	r6, lr
 800b1d6:	46f4      	mov	ip, lr
 800b1d8:	d815      	bhi.n	800b206 <rshift+0x7e>
 800b1da:	1a9a      	subs	r2, r3, r2
 800b1dc:	0092      	lsls	r2, r2, #2
 800b1de:	3a04      	subs	r2, #4
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	42ae      	cmp	r6, r5
 800b1e4:	bf38      	it	cc
 800b1e6:	2200      	movcc	r2, #0
 800b1e8:	18a3      	adds	r3, r4, r2
 800b1ea:	50a7      	str	r7, [r4, r2]
 800b1ec:	b107      	cbz	r7, 800b1f0 <rshift+0x68>
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	1b1a      	subs	r2, r3, r4
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1f8:	bf08      	it	eq
 800b1fa:	2300      	moveq	r3, #0
 800b1fc:	6102      	str	r2, [r0, #16]
 800b1fe:	bf08      	it	eq
 800b200:	6143      	streq	r3, [r0, #20]
 800b202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b206:	f8dc c000 	ldr.w	ip, [ip]
 800b20a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b20e:	ea4c 0707 	orr.w	r7, ip, r7
 800b212:	f849 7b04 	str.w	r7, [r9], #4
 800b216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b21a:	40cf      	lsrs	r7, r1
 800b21c:	e7da      	b.n	800b1d4 <rshift+0x4c>
 800b21e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b222:	f847 cf04 	str.w	ip, [r7, #4]!
 800b226:	e7c3      	b.n	800b1b0 <rshift+0x28>
 800b228:	4623      	mov	r3, r4
 800b22a:	e7e1      	b.n	800b1f0 <rshift+0x68>

0800b22c <__hexdig_fun>:
 800b22c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b230:	2b09      	cmp	r3, #9
 800b232:	d802      	bhi.n	800b23a <__hexdig_fun+0xe>
 800b234:	3820      	subs	r0, #32
 800b236:	b2c0      	uxtb	r0, r0
 800b238:	4770      	bx	lr
 800b23a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b23e:	2b05      	cmp	r3, #5
 800b240:	d801      	bhi.n	800b246 <__hexdig_fun+0x1a>
 800b242:	3847      	subs	r0, #71	; 0x47
 800b244:	e7f7      	b.n	800b236 <__hexdig_fun+0xa>
 800b246:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	d801      	bhi.n	800b252 <__hexdig_fun+0x26>
 800b24e:	3827      	subs	r0, #39	; 0x27
 800b250:	e7f1      	b.n	800b236 <__hexdig_fun+0xa>
 800b252:	2000      	movs	r0, #0
 800b254:	4770      	bx	lr
	...

0800b258 <__gethex>:
 800b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	4617      	mov	r7, r2
 800b25e:	680a      	ldr	r2, [r1, #0]
 800b260:	b085      	sub	sp, #20
 800b262:	f102 0b02 	add.w	fp, r2, #2
 800b266:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b26a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b26e:	4681      	mov	r9, r0
 800b270:	468a      	mov	sl, r1
 800b272:	9302      	str	r3, [sp, #8]
 800b274:	32fe      	adds	r2, #254	; 0xfe
 800b276:	eb02 030b 	add.w	r3, r2, fp
 800b27a:	46d8      	mov	r8, fp
 800b27c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	2830      	cmp	r0, #48	; 0x30
 800b284:	d0f7      	beq.n	800b276 <__gethex+0x1e>
 800b286:	f7ff ffd1 	bl	800b22c <__hexdig_fun>
 800b28a:	4604      	mov	r4, r0
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d138      	bne.n	800b302 <__gethex+0xaa>
 800b290:	49a7      	ldr	r1, [pc, #668]	; (800b530 <__gethex+0x2d8>)
 800b292:	2201      	movs	r2, #1
 800b294:	4640      	mov	r0, r8
 800b296:	f7ff ff09 	bl	800b0ac <strncmp>
 800b29a:	4606      	mov	r6, r0
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d169      	bne.n	800b374 <__gethex+0x11c>
 800b2a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b2a4:	465d      	mov	r5, fp
 800b2a6:	f7ff ffc1 	bl	800b22c <__hexdig_fun>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d064      	beq.n	800b378 <__gethex+0x120>
 800b2ae:	465a      	mov	r2, fp
 800b2b0:	7810      	ldrb	r0, [r2, #0]
 800b2b2:	2830      	cmp	r0, #48	; 0x30
 800b2b4:	4690      	mov	r8, r2
 800b2b6:	f102 0201 	add.w	r2, r2, #1
 800b2ba:	d0f9      	beq.n	800b2b0 <__gethex+0x58>
 800b2bc:	f7ff ffb6 	bl	800b22c <__hexdig_fun>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	fab0 f480 	clz	r4, r0
 800b2c6:	0964      	lsrs	r4, r4, #5
 800b2c8:	465e      	mov	r6, fp
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	4642      	mov	r2, r8
 800b2ce:	4615      	mov	r5, r2
 800b2d0:	3201      	adds	r2, #1
 800b2d2:	7828      	ldrb	r0, [r5, #0]
 800b2d4:	f7ff ffaa 	bl	800b22c <__hexdig_fun>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d1f8      	bne.n	800b2ce <__gethex+0x76>
 800b2dc:	4994      	ldr	r1, [pc, #592]	; (800b530 <__gethex+0x2d8>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7ff fee3 	bl	800b0ac <strncmp>
 800b2e6:	b978      	cbnz	r0, 800b308 <__gethex+0xb0>
 800b2e8:	b946      	cbnz	r6, 800b2fc <__gethex+0xa4>
 800b2ea:	1c6e      	adds	r6, r5, #1
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	4615      	mov	r5, r2
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	7828      	ldrb	r0, [r5, #0]
 800b2f4:	f7ff ff9a 	bl	800b22c <__hexdig_fun>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1f8      	bne.n	800b2ee <__gethex+0x96>
 800b2fc:	1b73      	subs	r3, r6, r5
 800b2fe:	009e      	lsls	r6, r3, #2
 800b300:	e004      	b.n	800b30c <__gethex+0xb4>
 800b302:	2400      	movs	r4, #0
 800b304:	4626      	mov	r6, r4
 800b306:	e7e1      	b.n	800b2cc <__gethex+0x74>
 800b308:	2e00      	cmp	r6, #0
 800b30a:	d1f7      	bne.n	800b2fc <__gethex+0xa4>
 800b30c:	782b      	ldrb	r3, [r5, #0]
 800b30e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b312:	2b50      	cmp	r3, #80	; 0x50
 800b314:	d13d      	bne.n	800b392 <__gethex+0x13a>
 800b316:	786b      	ldrb	r3, [r5, #1]
 800b318:	2b2b      	cmp	r3, #43	; 0x2b
 800b31a:	d02f      	beq.n	800b37c <__gethex+0x124>
 800b31c:	2b2d      	cmp	r3, #45	; 0x2d
 800b31e:	d031      	beq.n	800b384 <__gethex+0x12c>
 800b320:	1c69      	adds	r1, r5, #1
 800b322:	f04f 0b00 	mov.w	fp, #0
 800b326:	7808      	ldrb	r0, [r1, #0]
 800b328:	f7ff ff80 	bl	800b22c <__hexdig_fun>
 800b32c:	1e42      	subs	r2, r0, #1
 800b32e:	b2d2      	uxtb	r2, r2
 800b330:	2a18      	cmp	r2, #24
 800b332:	d82e      	bhi.n	800b392 <__gethex+0x13a>
 800b334:	f1a0 0210 	sub.w	r2, r0, #16
 800b338:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b33c:	f7ff ff76 	bl	800b22c <__hexdig_fun>
 800b340:	f100 3cff 	add.w	ip, r0, #4294967295
 800b344:	fa5f fc8c 	uxtb.w	ip, ip
 800b348:	f1bc 0f18 	cmp.w	ip, #24
 800b34c:	d91d      	bls.n	800b38a <__gethex+0x132>
 800b34e:	f1bb 0f00 	cmp.w	fp, #0
 800b352:	d000      	beq.n	800b356 <__gethex+0xfe>
 800b354:	4252      	negs	r2, r2
 800b356:	4416      	add	r6, r2
 800b358:	f8ca 1000 	str.w	r1, [sl]
 800b35c:	b1dc      	cbz	r4, 800b396 <__gethex+0x13e>
 800b35e:	9b01      	ldr	r3, [sp, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	bf14      	ite	ne
 800b364:	f04f 0800 	movne.w	r8, #0
 800b368:	f04f 0806 	moveq.w	r8, #6
 800b36c:	4640      	mov	r0, r8
 800b36e:	b005      	add	sp, #20
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4645      	mov	r5, r8
 800b376:	4626      	mov	r6, r4
 800b378:	2401      	movs	r4, #1
 800b37a:	e7c7      	b.n	800b30c <__gethex+0xb4>
 800b37c:	f04f 0b00 	mov.w	fp, #0
 800b380:	1ca9      	adds	r1, r5, #2
 800b382:	e7d0      	b.n	800b326 <__gethex+0xce>
 800b384:	f04f 0b01 	mov.w	fp, #1
 800b388:	e7fa      	b.n	800b380 <__gethex+0x128>
 800b38a:	230a      	movs	r3, #10
 800b38c:	fb03 0002 	mla	r0, r3, r2, r0
 800b390:	e7d0      	b.n	800b334 <__gethex+0xdc>
 800b392:	4629      	mov	r1, r5
 800b394:	e7e0      	b.n	800b358 <__gethex+0x100>
 800b396:	eba5 0308 	sub.w	r3, r5, r8
 800b39a:	3b01      	subs	r3, #1
 800b39c:	4621      	mov	r1, r4
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	dc0a      	bgt.n	800b3b8 <__gethex+0x160>
 800b3a2:	4648      	mov	r0, r9
 800b3a4:	f7fe f91e 	bl	80095e4 <_Balloc>
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	b940      	cbnz	r0, 800b3be <__gethex+0x166>
 800b3ac:	4b61      	ldr	r3, [pc, #388]	; (800b534 <__gethex+0x2dc>)
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	21e4      	movs	r1, #228	; 0xe4
 800b3b2:	4861      	ldr	r0, [pc, #388]	; (800b538 <__gethex+0x2e0>)
 800b3b4:	f7ff feb4 	bl	800b120 <__assert_func>
 800b3b8:	3101      	adds	r1, #1
 800b3ba:	105b      	asrs	r3, r3, #1
 800b3bc:	e7ef      	b.n	800b39e <__gethex+0x146>
 800b3be:	f100 0a14 	add.w	sl, r0, #20
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	495a      	ldr	r1, [pc, #360]	; (800b530 <__gethex+0x2d8>)
 800b3c6:	f8cd a004 	str.w	sl, [sp, #4]
 800b3ca:	469b      	mov	fp, r3
 800b3cc:	45a8      	cmp	r8, r5
 800b3ce:	d342      	bcc.n	800b456 <__gethex+0x1fe>
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	f840 bb04 	str.w	fp, [r0], #4
 800b3d6:	eba0 000a 	sub.w	r0, r0, sl
 800b3da:	1080      	asrs	r0, r0, #2
 800b3dc:	6120      	str	r0, [r4, #16]
 800b3de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b3e2:	4658      	mov	r0, fp
 800b3e4:	f7fe f9f0 	bl	80097c8 <__hi0bits>
 800b3e8:	683d      	ldr	r5, [r7, #0]
 800b3ea:	eba8 0000 	sub.w	r0, r8, r0
 800b3ee:	42a8      	cmp	r0, r5
 800b3f0:	dd59      	ble.n	800b4a6 <__gethex+0x24e>
 800b3f2:	eba0 0805 	sub.w	r8, r0, r5
 800b3f6:	4641      	mov	r1, r8
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7fe fd7f 	bl	8009efc <__any_on>
 800b3fe:	4683      	mov	fp, r0
 800b400:	b1b8      	cbz	r0, 800b432 <__gethex+0x1da>
 800b402:	f108 33ff 	add.w	r3, r8, #4294967295
 800b406:	1159      	asrs	r1, r3, #5
 800b408:	f003 021f 	and.w	r2, r3, #31
 800b40c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b410:	f04f 0b01 	mov.w	fp, #1
 800b414:	fa0b f202 	lsl.w	r2, fp, r2
 800b418:	420a      	tst	r2, r1
 800b41a:	d00a      	beq.n	800b432 <__gethex+0x1da>
 800b41c:	455b      	cmp	r3, fp
 800b41e:	dd06      	ble.n	800b42e <__gethex+0x1d6>
 800b420:	f1a8 0102 	sub.w	r1, r8, #2
 800b424:	4620      	mov	r0, r4
 800b426:	f7fe fd69 	bl	8009efc <__any_on>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d138      	bne.n	800b4a0 <__gethex+0x248>
 800b42e:	f04f 0b02 	mov.w	fp, #2
 800b432:	4641      	mov	r1, r8
 800b434:	4620      	mov	r0, r4
 800b436:	f7ff fea7 	bl	800b188 <rshift>
 800b43a:	4446      	add	r6, r8
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	42b3      	cmp	r3, r6
 800b440:	da41      	bge.n	800b4c6 <__gethex+0x26e>
 800b442:	4621      	mov	r1, r4
 800b444:	4648      	mov	r0, r9
 800b446:	f7fe f90d 	bl	8009664 <_Bfree>
 800b44a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b44c:	2300      	movs	r3, #0
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b454:	e78a      	b.n	800b36c <__gethex+0x114>
 800b456:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b45a:	2a2e      	cmp	r2, #46	; 0x2e
 800b45c:	d014      	beq.n	800b488 <__gethex+0x230>
 800b45e:	2b20      	cmp	r3, #32
 800b460:	d106      	bne.n	800b470 <__gethex+0x218>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	f843 bb04 	str.w	fp, [r3], #4
 800b468:	f04f 0b00 	mov.w	fp, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	465b      	mov	r3, fp
 800b470:	7828      	ldrb	r0, [r5, #0]
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	f7ff feda 	bl	800b22c <__hexdig_fun>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	f000 000f 	and.w	r0, r0, #15
 800b47e:	4098      	lsls	r0, r3
 800b480:	ea4b 0b00 	orr.w	fp, fp, r0
 800b484:	3304      	adds	r3, #4
 800b486:	e7a1      	b.n	800b3cc <__gethex+0x174>
 800b488:	45a8      	cmp	r8, r5
 800b48a:	d8e8      	bhi.n	800b45e <__gethex+0x206>
 800b48c:	2201      	movs	r2, #1
 800b48e:	4628      	mov	r0, r5
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	f7ff fe0b 	bl	800b0ac <strncmp>
 800b496:	4926      	ldr	r1, [pc, #152]	; (800b530 <__gethex+0x2d8>)
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d1df      	bne.n	800b45e <__gethex+0x206>
 800b49e:	e795      	b.n	800b3cc <__gethex+0x174>
 800b4a0:	f04f 0b03 	mov.w	fp, #3
 800b4a4:	e7c5      	b.n	800b432 <__gethex+0x1da>
 800b4a6:	da0b      	bge.n	800b4c0 <__gethex+0x268>
 800b4a8:	eba5 0800 	sub.w	r8, r5, r0
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	4648      	mov	r0, r9
 800b4b2:	f7fe faf1 	bl	8009a98 <__lshift>
 800b4b6:	eba6 0608 	sub.w	r6, r6, r8
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f100 0a14 	add.w	sl, r0, #20
 800b4c0:	f04f 0b00 	mov.w	fp, #0
 800b4c4:	e7ba      	b.n	800b43c <__gethex+0x1e4>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	42b3      	cmp	r3, r6
 800b4ca:	dd73      	ble.n	800b5b4 <__gethex+0x35c>
 800b4cc:	1b9e      	subs	r6, r3, r6
 800b4ce:	42b5      	cmp	r5, r6
 800b4d0:	dc34      	bgt.n	800b53c <__gethex+0x2e4>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d023      	beq.n	800b520 <__gethex+0x2c8>
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d025      	beq.n	800b528 <__gethex+0x2d0>
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d115      	bne.n	800b50c <__gethex+0x2b4>
 800b4e0:	42b5      	cmp	r5, r6
 800b4e2:	d113      	bne.n	800b50c <__gethex+0x2b4>
 800b4e4:	2d01      	cmp	r5, #1
 800b4e6:	d10b      	bne.n	800b500 <__gethex+0x2a8>
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	f8ca 3000 	str.w	r3, [sl]
 800b4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b4fc:	601c      	str	r4, [r3, #0]
 800b4fe:	e735      	b.n	800b36c <__gethex+0x114>
 800b500:	1e69      	subs	r1, r5, #1
 800b502:	4620      	mov	r0, r4
 800b504:	f7fe fcfa 	bl	8009efc <__any_on>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d1ed      	bne.n	800b4e8 <__gethex+0x290>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4648      	mov	r0, r9
 800b510:	f7fe f8a8 	bl	8009664 <_Bfree>
 800b514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b516:	2300      	movs	r3, #0
 800b518:	6013      	str	r3, [r2, #0]
 800b51a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b51e:	e725      	b.n	800b36c <__gethex+0x114>
 800b520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1f2      	bne.n	800b50c <__gethex+0x2b4>
 800b526:	e7df      	b.n	800b4e8 <__gethex+0x290>
 800b528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1dc      	bne.n	800b4e8 <__gethex+0x290>
 800b52e:	e7ed      	b.n	800b50c <__gethex+0x2b4>
 800b530:	0800cb74 	.word	0x0800cb74
 800b534:	0800ca09 	.word	0x0800ca09
 800b538:	0800cd1e 	.word	0x0800cd1e
 800b53c:	f106 38ff 	add.w	r8, r6, #4294967295
 800b540:	f1bb 0f00 	cmp.w	fp, #0
 800b544:	d133      	bne.n	800b5ae <__gethex+0x356>
 800b546:	f1b8 0f00 	cmp.w	r8, #0
 800b54a:	d004      	beq.n	800b556 <__gethex+0x2fe>
 800b54c:	4641      	mov	r1, r8
 800b54e:	4620      	mov	r0, r4
 800b550:	f7fe fcd4 	bl	8009efc <__any_on>
 800b554:	4683      	mov	fp, r0
 800b556:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b55a:	2301      	movs	r3, #1
 800b55c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b560:	f008 081f 	and.w	r8, r8, #31
 800b564:	fa03 f308 	lsl.w	r3, r3, r8
 800b568:	4213      	tst	r3, r2
 800b56a:	4631      	mov	r1, r6
 800b56c:	4620      	mov	r0, r4
 800b56e:	bf18      	it	ne
 800b570:	f04b 0b02 	orrne.w	fp, fp, #2
 800b574:	1bad      	subs	r5, r5, r6
 800b576:	f7ff fe07 	bl	800b188 <rshift>
 800b57a:	687e      	ldr	r6, [r7, #4]
 800b57c:	f04f 0802 	mov.w	r8, #2
 800b580:	f1bb 0f00 	cmp.w	fp, #0
 800b584:	d04a      	beq.n	800b61c <__gethex+0x3c4>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d016      	beq.n	800b5ba <__gethex+0x362>
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d018      	beq.n	800b5c2 <__gethex+0x36a>
 800b590:	2b01      	cmp	r3, #1
 800b592:	d109      	bne.n	800b5a8 <__gethex+0x350>
 800b594:	f01b 0f02 	tst.w	fp, #2
 800b598:	d006      	beq.n	800b5a8 <__gethex+0x350>
 800b59a:	f8da 3000 	ldr.w	r3, [sl]
 800b59e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b5a2:	f01b 0f01 	tst.w	fp, #1
 800b5a6:	d10f      	bne.n	800b5c8 <__gethex+0x370>
 800b5a8:	f048 0810 	orr.w	r8, r8, #16
 800b5ac:	e036      	b.n	800b61c <__gethex+0x3c4>
 800b5ae:	f04f 0b01 	mov.w	fp, #1
 800b5b2:	e7d0      	b.n	800b556 <__gethex+0x2fe>
 800b5b4:	f04f 0801 	mov.w	r8, #1
 800b5b8:	e7e2      	b.n	800b580 <__gethex+0x328>
 800b5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5bc:	f1c3 0301 	rsb	r3, r3, #1
 800b5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0ef      	beq.n	800b5a8 <__gethex+0x350>
 800b5c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5cc:	f104 0214 	add.w	r2, r4, #20
 800b5d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b5da:	2300      	movs	r3, #0
 800b5dc:	4694      	mov	ip, r2
 800b5de:	f852 1b04 	ldr.w	r1, [r2], #4
 800b5e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b5e6:	d01e      	beq.n	800b626 <__gethex+0x3ce>
 800b5e8:	3101      	adds	r1, #1
 800b5ea:	f8cc 1000 	str.w	r1, [ip]
 800b5ee:	f1b8 0f02 	cmp.w	r8, #2
 800b5f2:	f104 0214 	add.w	r2, r4, #20
 800b5f6:	d13d      	bne.n	800b674 <__gethex+0x41c>
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	42ab      	cmp	r3, r5
 800b5fe:	d10b      	bne.n	800b618 <__gethex+0x3c0>
 800b600:	1169      	asrs	r1, r5, #5
 800b602:	2301      	movs	r3, #1
 800b604:	f005 051f 	and.w	r5, r5, #31
 800b608:	fa03 f505 	lsl.w	r5, r3, r5
 800b60c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b610:	421d      	tst	r5, r3
 800b612:	bf18      	it	ne
 800b614:	f04f 0801 	movne.w	r8, #1
 800b618:	f048 0820 	orr.w	r8, r8, #32
 800b61c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b61e:	601c      	str	r4, [r3, #0]
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	601e      	str	r6, [r3, #0]
 800b624:	e6a2      	b.n	800b36c <__gethex+0x114>
 800b626:	4290      	cmp	r0, r2
 800b628:	f842 3c04 	str.w	r3, [r2, #-4]
 800b62c:	d8d6      	bhi.n	800b5dc <__gethex+0x384>
 800b62e:	68a2      	ldr	r2, [r4, #8]
 800b630:	4593      	cmp	fp, r2
 800b632:	db17      	blt.n	800b664 <__gethex+0x40c>
 800b634:	6861      	ldr	r1, [r4, #4]
 800b636:	4648      	mov	r0, r9
 800b638:	3101      	adds	r1, #1
 800b63a:	f7fd ffd3 	bl	80095e4 <_Balloc>
 800b63e:	4682      	mov	sl, r0
 800b640:	b918      	cbnz	r0, 800b64a <__gethex+0x3f2>
 800b642:	4b1b      	ldr	r3, [pc, #108]	; (800b6b0 <__gethex+0x458>)
 800b644:	4602      	mov	r2, r0
 800b646:	2184      	movs	r1, #132	; 0x84
 800b648:	e6b3      	b.n	800b3b2 <__gethex+0x15a>
 800b64a:	6922      	ldr	r2, [r4, #16]
 800b64c:	3202      	adds	r2, #2
 800b64e:	f104 010c 	add.w	r1, r4, #12
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	300c      	adds	r0, #12
 800b656:	f7ff fd4b 	bl	800b0f0 <memcpy>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4648      	mov	r0, r9
 800b65e:	f7fe f801 	bl	8009664 <_Bfree>
 800b662:	4654      	mov	r4, sl
 800b664:	6922      	ldr	r2, [r4, #16]
 800b666:	1c51      	adds	r1, r2, #1
 800b668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b66c:	6121      	str	r1, [r4, #16]
 800b66e:	2101      	movs	r1, #1
 800b670:	6151      	str	r1, [r2, #20]
 800b672:	e7bc      	b.n	800b5ee <__gethex+0x396>
 800b674:	6921      	ldr	r1, [r4, #16]
 800b676:	4559      	cmp	r1, fp
 800b678:	dd0b      	ble.n	800b692 <__gethex+0x43a>
 800b67a:	2101      	movs	r1, #1
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff fd83 	bl	800b188 <rshift>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	3601      	adds	r6, #1
 800b686:	42b3      	cmp	r3, r6
 800b688:	f6ff aedb 	blt.w	800b442 <__gethex+0x1ea>
 800b68c:	f04f 0801 	mov.w	r8, #1
 800b690:	e7c2      	b.n	800b618 <__gethex+0x3c0>
 800b692:	f015 051f 	ands.w	r5, r5, #31
 800b696:	d0f9      	beq.n	800b68c <__gethex+0x434>
 800b698:	9b01      	ldr	r3, [sp, #4]
 800b69a:	441a      	add	r2, r3
 800b69c:	f1c5 0520 	rsb	r5, r5, #32
 800b6a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b6a4:	f7fe f890 	bl	80097c8 <__hi0bits>
 800b6a8:	42a8      	cmp	r0, r5
 800b6aa:	dbe6      	blt.n	800b67a <__gethex+0x422>
 800b6ac:	e7ee      	b.n	800b68c <__gethex+0x434>
 800b6ae:	bf00      	nop
 800b6b0:	0800ca09 	.word	0x0800ca09

0800b6b4 <L_shift>:
 800b6b4:	f1c2 0208 	rsb	r2, r2, #8
 800b6b8:	0092      	lsls	r2, r2, #2
 800b6ba:	b570      	push	{r4, r5, r6, lr}
 800b6bc:	f1c2 0620 	rsb	r6, r2, #32
 800b6c0:	6843      	ldr	r3, [r0, #4]
 800b6c2:	6804      	ldr	r4, [r0, #0]
 800b6c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b6c8:	432c      	orrs	r4, r5
 800b6ca:	40d3      	lsrs	r3, r2
 800b6cc:	6004      	str	r4, [r0, #0]
 800b6ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6d2:	4288      	cmp	r0, r1
 800b6d4:	d3f4      	bcc.n	800b6c0 <L_shift+0xc>
 800b6d6:	bd70      	pop	{r4, r5, r6, pc}

0800b6d8 <__match>:
 800b6d8:	b530      	push	{r4, r5, lr}
 800b6da:	6803      	ldr	r3, [r0, #0]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e2:	b914      	cbnz	r4, 800b6ea <__match+0x12>
 800b6e4:	6003      	str	r3, [r0, #0]
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	bd30      	pop	{r4, r5, pc}
 800b6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b6f2:	2d19      	cmp	r5, #25
 800b6f4:	bf98      	it	ls
 800b6f6:	3220      	addls	r2, #32
 800b6f8:	42a2      	cmp	r2, r4
 800b6fa:	d0f0      	beq.n	800b6de <__match+0x6>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e7f3      	b.n	800b6e8 <__match+0x10>

0800b700 <__hexnan>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	680b      	ldr	r3, [r1, #0]
 800b706:	6801      	ldr	r1, [r0, #0]
 800b708:	115e      	asrs	r6, r3, #5
 800b70a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b70e:	f013 031f 	ands.w	r3, r3, #31
 800b712:	b087      	sub	sp, #28
 800b714:	bf18      	it	ne
 800b716:	3604      	addne	r6, #4
 800b718:	2500      	movs	r5, #0
 800b71a:	1f37      	subs	r7, r6, #4
 800b71c:	4682      	mov	sl, r0
 800b71e:	4690      	mov	r8, r2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f846 5c04 	str.w	r5, [r6, #-4]
 800b726:	46b9      	mov	r9, r7
 800b728:	463c      	mov	r4, r7
 800b72a:	9502      	str	r5, [sp, #8]
 800b72c:	46ab      	mov	fp, r5
 800b72e:	784a      	ldrb	r2, [r1, #1]
 800b730:	1c4b      	adds	r3, r1, #1
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	b342      	cbz	r2, 800b788 <__hexnan+0x88>
 800b736:	4610      	mov	r0, r2
 800b738:	9105      	str	r1, [sp, #20]
 800b73a:	9204      	str	r2, [sp, #16]
 800b73c:	f7ff fd76 	bl	800b22c <__hexdig_fun>
 800b740:	2800      	cmp	r0, #0
 800b742:	d14f      	bne.n	800b7e4 <__hexnan+0xe4>
 800b744:	9a04      	ldr	r2, [sp, #16]
 800b746:	9905      	ldr	r1, [sp, #20]
 800b748:	2a20      	cmp	r2, #32
 800b74a:	d818      	bhi.n	800b77e <__hexnan+0x7e>
 800b74c:	9b02      	ldr	r3, [sp, #8]
 800b74e:	459b      	cmp	fp, r3
 800b750:	dd13      	ble.n	800b77a <__hexnan+0x7a>
 800b752:	454c      	cmp	r4, r9
 800b754:	d206      	bcs.n	800b764 <__hexnan+0x64>
 800b756:	2d07      	cmp	r5, #7
 800b758:	dc04      	bgt.n	800b764 <__hexnan+0x64>
 800b75a:	462a      	mov	r2, r5
 800b75c:	4649      	mov	r1, r9
 800b75e:	4620      	mov	r0, r4
 800b760:	f7ff ffa8 	bl	800b6b4 <L_shift>
 800b764:	4544      	cmp	r4, r8
 800b766:	d950      	bls.n	800b80a <__hexnan+0x10a>
 800b768:	2300      	movs	r3, #0
 800b76a:	f1a4 0904 	sub.w	r9, r4, #4
 800b76e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b772:	f8cd b008 	str.w	fp, [sp, #8]
 800b776:	464c      	mov	r4, r9
 800b778:	461d      	mov	r5, r3
 800b77a:	9903      	ldr	r1, [sp, #12]
 800b77c:	e7d7      	b.n	800b72e <__hexnan+0x2e>
 800b77e:	2a29      	cmp	r2, #41	; 0x29
 800b780:	d155      	bne.n	800b82e <__hexnan+0x12e>
 800b782:	3102      	adds	r1, #2
 800b784:	f8ca 1000 	str.w	r1, [sl]
 800b788:	f1bb 0f00 	cmp.w	fp, #0
 800b78c:	d04f      	beq.n	800b82e <__hexnan+0x12e>
 800b78e:	454c      	cmp	r4, r9
 800b790:	d206      	bcs.n	800b7a0 <__hexnan+0xa0>
 800b792:	2d07      	cmp	r5, #7
 800b794:	dc04      	bgt.n	800b7a0 <__hexnan+0xa0>
 800b796:	462a      	mov	r2, r5
 800b798:	4649      	mov	r1, r9
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff ff8a 	bl	800b6b4 <L_shift>
 800b7a0:	4544      	cmp	r4, r8
 800b7a2:	d934      	bls.n	800b80e <__hexnan+0x10e>
 800b7a4:	f1a8 0204 	sub.w	r2, r8, #4
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7b2:	429f      	cmp	r7, r3
 800b7b4:	d2f9      	bcs.n	800b7aa <__hexnan+0xaa>
 800b7b6:	1b3b      	subs	r3, r7, r4
 800b7b8:	f023 0303 	bic.w	r3, r3, #3
 800b7bc:	3304      	adds	r3, #4
 800b7be:	3e03      	subs	r6, #3
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	bf38      	it	cc
 800b7c6:	2304      	movcc	r3, #4
 800b7c8:	4443      	add	r3, r8
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f843 2b04 	str.w	r2, [r3], #4
 800b7d0:	429f      	cmp	r7, r3
 800b7d2:	d2fb      	bcs.n	800b7cc <__hexnan+0xcc>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	b91b      	cbnz	r3, 800b7e0 <__hexnan+0xe0>
 800b7d8:	4547      	cmp	r7, r8
 800b7da:	d126      	bne.n	800b82a <__hexnan+0x12a>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	2005      	movs	r0, #5
 800b7e2:	e025      	b.n	800b830 <__hexnan+0x130>
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	2d08      	cmp	r5, #8
 800b7e8:	f10b 0b01 	add.w	fp, fp, #1
 800b7ec:	dd06      	ble.n	800b7fc <__hexnan+0xfc>
 800b7ee:	4544      	cmp	r4, r8
 800b7f0:	d9c3      	bls.n	800b77a <__hexnan+0x7a>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7f8:	2501      	movs	r5, #1
 800b7fa:	3c04      	subs	r4, #4
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	f000 000f 	and.w	r0, r0, #15
 800b802:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	e7b7      	b.n	800b77a <__hexnan+0x7a>
 800b80a:	2508      	movs	r5, #8
 800b80c:	e7b5      	b.n	800b77a <__hexnan+0x7a>
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0df      	beq.n	800b7d4 <__hexnan+0xd4>
 800b814:	f1c3 0320 	rsb	r3, r3, #32
 800b818:	f04f 32ff 	mov.w	r2, #4294967295
 800b81c:	40da      	lsrs	r2, r3
 800b81e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b822:	4013      	ands	r3, r2
 800b824:	f846 3c04 	str.w	r3, [r6, #-4]
 800b828:	e7d4      	b.n	800b7d4 <__hexnan+0xd4>
 800b82a:	3f04      	subs	r7, #4
 800b82c:	e7d2      	b.n	800b7d4 <__hexnan+0xd4>
 800b82e:	2004      	movs	r0, #4
 800b830:	b007      	add	sp, #28
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b836 <__ascii_mbtowc>:
 800b836:	b082      	sub	sp, #8
 800b838:	b901      	cbnz	r1, 800b83c <__ascii_mbtowc+0x6>
 800b83a:	a901      	add	r1, sp, #4
 800b83c:	b142      	cbz	r2, 800b850 <__ascii_mbtowc+0x1a>
 800b83e:	b14b      	cbz	r3, 800b854 <__ascii_mbtowc+0x1e>
 800b840:	7813      	ldrb	r3, [r2, #0]
 800b842:	600b      	str	r3, [r1, #0]
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	1e10      	subs	r0, r2, #0
 800b848:	bf18      	it	ne
 800b84a:	2001      	movne	r0, #1
 800b84c:	b002      	add	sp, #8
 800b84e:	4770      	bx	lr
 800b850:	4610      	mov	r0, r2
 800b852:	e7fb      	b.n	800b84c <__ascii_mbtowc+0x16>
 800b854:	f06f 0001 	mvn.w	r0, #1
 800b858:	e7f8      	b.n	800b84c <__ascii_mbtowc+0x16>

0800b85a <_realloc_r>:
 800b85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85e:	4680      	mov	r8, r0
 800b860:	4614      	mov	r4, r2
 800b862:	460e      	mov	r6, r1
 800b864:	b921      	cbnz	r1, 800b870 <_realloc_r+0x16>
 800b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86a:	4611      	mov	r1, r2
 800b86c:	f7fd be2e 	b.w	80094cc <_malloc_r>
 800b870:	b92a      	cbnz	r2, 800b87e <_realloc_r+0x24>
 800b872:	f7fd fdb7 	bl	80093e4 <_free_r>
 800b876:	4625      	mov	r5, r4
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87e:	f000 f842 	bl	800b906 <_malloc_usable_size_r>
 800b882:	4284      	cmp	r4, r0
 800b884:	4607      	mov	r7, r0
 800b886:	d802      	bhi.n	800b88e <_realloc_r+0x34>
 800b888:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88c:	d812      	bhi.n	800b8b4 <_realloc_r+0x5a>
 800b88e:	4621      	mov	r1, r4
 800b890:	4640      	mov	r0, r8
 800b892:	f7fd fe1b 	bl	80094cc <_malloc_r>
 800b896:	4605      	mov	r5, r0
 800b898:	2800      	cmp	r0, #0
 800b89a:	d0ed      	beq.n	800b878 <_realloc_r+0x1e>
 800b89c:	42bc      	cmp	r4, r7
 800b89e:	4622      	mov	r2, r4
 800b8a0:	4631      	mov	r1, r6
 800b8a2:	bf28      	it	cs
 800b8a4:	463a      	movcs	r2, r7
 800b8a6:	f7ff fc23 	bl	800b0f0 <memcpy>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	f7fd fd99 	bl	80093e4 <_free_r>
 800b8b2:	e7e1      	b.n	800b878 <_realloc_r+0x1e>
 800b8b4:	4635      	mov	r5, r6
 800b8b6:	e7df      	b.n	800b878 <_realloc_r+0x1e>

0800b8b8 <__ascii_wctomb>:
 800b8b8:	b149      	cbz	r1, 800b8ce <__ascii_wctomb+0x16>
 800b8ba:	2aff      	cmp	r2, #255	; 0xff
 800b8bc:	bf85      	ittet	hi
 800b8be:	238a      	movhi	r3, #138	; 0x8a
 800b8c0:	6003      	strhi	r3, [r0, #0]
 800b8c2:	700a      	strbls	r2, [r1, #0]
 800b8c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8c8:	bf98      	it	ls
 800b8ca:	2001      	movls	r0, #1
 800b8cc:	4770      	bx	lr
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4770      	bx	lr
	...

0800b8d4 <fiprintf>:
 800b8d4:	b40e      	push	{r1, r2, r3}
 800b8d6:	b503      	push	{r0, r1, lr}
 800b8d8:	4601      	mov	r1, r0
 800b8da:	ab03      	add	r3, sp, #12
 800b8dc:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <fiprintf+0x20>)
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	6800      	ldr	r0, [r0, #0]
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	f000 f83f 	bl	800b968 <_vfiprintf_r>
 800b8ea:	b002      	add	sp, #8
 800b8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f0:	b003      	add	sp, #12
 800b8f2:	4770      	bx	lr
 800b8f4:	20000064 	.word	0x20000064

0800b8f8 <abort>:
 800b8f8:	b508      	push	{r3, lr}
 800b8fa:	2006      	movs	r0, #6
 800b8fc:	f000 fa0c 	bl	800bd18 <raise>
 800b900:	2001      	movs	r0, #1
 800b902:	f7f6 fc43 	bl	800218c <_exit>

0800b906 <_malloc_usable_size_r>:
 800b906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b90a:	1f18      	subs	r0, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	bfbc      	itt	lt
 800b910:	580b      	ldrlt	r3, [r1, r0]
 800b912:	18c0      	addlt	r0, r0, r3
 800b914:	4770      	bx	lr

0800b916 <__sfputc_r>:
 800b916:	6893      	ldr	r3, [r2, #8]
 800b918:	3b01      	subs	r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	b410      	push	{r4}
 800b91e:	6093      	str	r3, [r2, #8]
 800b920:	da08      	bge.n	800b934 <__sfputc_r+0x1e>
 800b922:	6994      	ldr	r4, [r2, #24]
 800b924:	42a3      	cmp	r3, r4
 800b926:	db01      	blt.n	800b92c <__sfputc_r+0x16>
 800b928:	290a      	cmp	r1, #10
 800b92a:	d103      	bne.n	800b934 <__sfputc_r+0x1e>
 800b92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b930:	f000 b934 	b.w	800bb9c <__swbuf_r>
 800b934:	6813      	ldr	r3, [r2, #0]
 800b936:	1c58      	adds	r0, r3, #1
 800b938:	6010      	str	r0, [r2, #0]
 800b93a:	7019      	strb	r1, [r3, #0]
 800b93c:	4608      	mov	r0, r1
 800b93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <__sfputs_r>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	4614      	mov	r4, r2
 800b94c:	18d5      	adds	r5, r2, r3
 800b94e:	42ac      	cmp	r4, r5
 800b950:	d101      	bne.n	800b956 <__sfputs_r+0x12>
 800b952:	2000      	movs	r0, #0
 800b954:	e007      	b.n	800b966 <__sfputs_r+0x22>
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	463a      	mov	r2, r7
 800b95c:	4630      	mov	r0, r6
 800b95e:	f7ff ffda 	bl	800b916 <__sfputc_r>
 800b962:	1c43      	adds	r3, r0, #1
 800b964:	d1f3      	bne.n	800b94e <__sfputs_r+0xa>
 800b966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b968 <_vfiprintf_r>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	460d      	mov	r5, r1
 800b96e:	b09d      	sub	sp, #116	; 0x74
 800b970:	4614      	mov	r4, r2
 800b972:	4698      	mov	r8, r3
 800b974:	4606      	mov	r6, r0
 800b976:	b118      	cbz	r0, 800b980 <_vfiprintf_r+0x18>
 800b978:	6a03      	ldr	r3, [r0, #32]
 800b97a:	b90b      	cbnz	r3, 800b980 <_vfiprintf_r+0x18>
 800b97c:	f7fc fd64 	bl	8008448 <__sinit>
 800b980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b982:	07d9      	lsls	r1, r3, #31
 800b984:	d405      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b986:	89ab      	ldrh	r3, [r5, #12]
 800b988:	059a      	lsls	r2, r3, #22
 800b98a:	d402      	bmi.n	800b992 <_vfiprintf_r+0x2a>
 800b98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b98e:	f7fc fea6 	bl	80086de <__retarget_lock_acquire_recursive>
 800b992:	89ab      	ldrh	r3, [r5, #12]
 800b994:	071b      	lsls	r3, r3, #28
 800b996:	d501      	bpl.n	800b99c <_vfiprintf_r+0x34>
 800b998:	692b      	ldr	r3, [r5, #16]
 800b99a:	b99b      	cbnz	r3, 800b9c4 <_vfiprintf_r+0x5c>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f000 f93a 	bl	800bc18 <__swsetup_r>
 800b9a4:	b170      	cbz	r0, 800b9c4 <_vfiprintf_r+0x5c>
 800b9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a8:	07dc      	lsls	r4, r3, #31
 800b9aa:	d504      	bpl.n	800b9b6 <_vfiprintf_r+0x4e>
 800b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b0:	b01d      	add	sp, #116	; 0x74
 800b9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	0598      	lsls	r0, r3, #22
 800b9ba:	d4f7      	bmi.n	800b9ac <_vfiprintf_r+0x44>
 800b9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9be:	f7fc fe8f 	bl	80086e0 <__retarget_lock_release_recursive>
 800b9c2:	e7f3      	b.n	800b9ac <_vfiprintf_r+0x44>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9d2:	2330      	movs	r3, #48	; 0x30
 800b9d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb88 <_vfiprintf_r+0x220>
 800b9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9dc:	f04f 0901 	mov.w	r9, #1
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	469a      	mov	sl, r3
 800b9e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e8:	b10a      	cbz	r2, 800b9ee <_vfiprintf_r+0x86>
 800b9ea:	2a25      	cmp	r2, #37	; 0x25
 800b9ec:	d1f9      	bne.n	800b9e2 <_vfiprintf_r+0x7a>
 800b9ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f2:	d00b      	beq.n	800ba0c <_vfiprintf_r+0xa4>
 800b9f4:	465b      	mov	r3, fp
 800b9f6:	4622      	mov	r2, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4630      	mov	r0, r6
 800b9fc:	f7ff ffa2 	bl	800b944 <__sfputs_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	f000 80a9 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba08:	445a      	add	r2, fp
 800ba0a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 80a1 	beq.w	800bb58 <_vfiprintf_r+0x1f0>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba20:	f10a 0a01 	add.w	sl, sl, #1
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	9307      	str	r3, [sp, #28]
 800ba28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2c:	931a      	str	r3, [sp, #104]	; 0x68
 800ba2e:	4654      	mov	r4, sl
 800ba30:	2205      	movs	r2, #5
 800ba32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba36:	4854      	ldr	r0, [pc, #336]	; (800bb88 <_vfiprintf_r+0x220>)
 800ba38:	f7f4 fbca 	bl	80001d0 <memchr>
 800ba3c:	9a04      	ldr	r2, [sp, #16]
 800ba3e:	b9d8      	cbnz	r0, 800ba78 <_vfiprintf_r+0x110>
 800ba40:	06d1      	lsls	r1, r2, #27
 800ba42:	bf44      	itt	mi
 800ba44:	2320      	movmi	r3, #32
 800ba46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4a:	0713      	lsls	r3, r2, #28
 800ba4c:	bf44      	itt	mi
 800ba4e:	232b      	movmi	r3, #43	; 0x2b
 800ba50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba54:	f89a 3000 	ldrb.w	r3, [sl]
 800ba58:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5a:	d015      	beq.n	800ba88 <_vfiprintf_r+0x120>
 800ba5c:	9a07      	ldr	r2, [sp, #28]
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2000      	movs	r0, #0
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	4621      	mov	r1, r4
 800ba68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6c:	3b30      	subs	r3, #48	; 0x30
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d94d      	bls.n	800bb0e <_vfiprintf_r+0x1a6>
 800ba72:	b1b0      	cbz	r0, 800baa2 <_vfiprintf_r+0x13a>
 800ba74:	9207      	str	r2, [sp, #28]
 800ba76:	e014      	b.n	800baa2 <_vfiprintf_r+0x13a>
 800ba78:	eba0 0308 	sub.w	r3, r0, r8
 800ba7c:	fa09 f303 	lsl.w	r3, r9, r3
 800ba80:	4313      	orrs	r3, r2
 800ba82:	9304      	str	r3, [sp, #16]
 800ba84:	46a2      	mov	sl, r4
 800ba86:	e7d2      	b.n	800ba2e <_vfiprintf_r+0xc6>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	1d19      	adds	r1, r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	9103      	str	r1, [sp, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bfbb      	ittet	lt
 800ba94:	425b      	neglt	r3, r3
 800ba96:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9a:	9307      	strge	r3, [sp, #28]
 800ba9c:	9307      	strlt	r3, [sp, #28]
 800ba9e:	bfb8      	it	lt
 800baa0:	9204      	strlt	r2, [sp, #16]
 800baa2:	7823      	ldrb	r3, [r4, #0]
 800baa4:	2b2e      	cmp	r3, #46	; 0x2e
 800baa6:	d10c      	bne.n	800bac2 <_vfiprintf_r+0x15a>
 800baa8:	7863      	ldrb	r3, [r4, #1]
 800baaa:	2b2a      	cmp	r3, #42	; 0x2a
 800baac:	d134      	bne.n	800bb18 <_vfiprintf_r+0x1b0>
 800baae:	9b03      	ldr	r3, [sp, #12]
 800bab0:	1d1a      	adds	r2, r3, #4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	9203      	str	r2, [sp, #12]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	bfb8      	it	lt
 800baba:	f04f 33ff 	movlt.w	r3, #4294967295
 800babe:	3402      	adds	r4, #2
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb98 <_vfiprintf_r+0x230>
 800bac6:	7821      	ldrb	r1, [r4, #0]
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	f7f4 fb80 	bl	80001d0 <memchr>
 800bad0:	b138      	cbz	r0, 800bae2 <_vfiprintf_r+0x17a>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	eba0 000a 	sub.w	r0, r0, sl
 800bad8:	2240      	movs	r2, #64	; 0x40
 800bada:	4082      	lsls	r2, r0
 800badc:	4313      	orrs	r3, r2
 800bade:	3401      	adds	r4, #1
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae6:	4829      	ldr	r0, [pc, #164]	; (800bb8c <_vfiprintf_r+0x224>)
 800bae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baec:	2206      	movs	r2, #6
 800baee:	f7f4 fb6f 	bl	80001d0 <memchr>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d03f      	beq.n	800bb76 <_vfiprintf_r+0x20e>
 800baf6:	4b26      	ldr	r3, [pc, #152]	; (800bb90 <_vfiprintf_r+0x228>)
 800baf8:	bb1b      	cbnz	r3, 800bb42 <_vfiprintf_r+0x1da>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	3307      	adds	r3, #7
 800bafe:	f023 0307 	bic.w	r3, r3, #7
 800bb02:	3308      	adds	r3, #8
 800bb04:	9303      	str	r3, [sp, #12]
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	443b      	add	r3, r7
 800bb0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0c:	e768      	b.n	800b9e0 <_vfiprintf_r+0x78>
 800bb0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb12:	460c      	mov	r4, r1
 800bb14:	2001      	movs	r0, #1
 800bb16:	e7a6      	b.n	800ba66 <_vfiprintf_r+0xfe>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	3401      	adds	r4, #1
 800bb1c:	9305      	str	r3, [sp, #20]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	f04f 0c0a 	mov.w	ip, #10
 800bb24:	4620      	mov	r0, r4
 800bb26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2a:	3a30      	subs	r2, #48	; 0x30
 800bb2c:	2a09      	cmp	r2, #9
 800bb2e:	d903      	bls.n	800bb38 <_vfiprintf_r+0x1d0>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d0c6      	beq.n	800bac2 <_vfiprintf_r+0x15a>
 800bb34:	9105      	str	r1, [sp, #20]
 800bb36:	e7c4      	b.n	800bac2 <_vfiprintf_r+0x15a>
 800bb38:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e7f0      	b.n	800bb24 <_vfiprintf_r+0x1bc>
 800bb42:	ab03      	add	r3, sp, #12
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	462a      	mov	r2, r5
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb4a:	a904      	add	r1, sp, #16
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f7fb fe19 	bl	8007784 <_printf_float>
 800bb52:	4607      	mov	r7, r0
 800bb54:	1c78      	adds	r0, r7, #1
 800bb56:	d1d6      	bne.n	800bb06 <_vfiprintf_r+0x19e>
 800bb58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb5a:	07d9      	lsls	r1, r3, #31
 800bb5c:	d405      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb5e:	89ab      	ldrh	r3, [r5, #12]
 800bb60:	059a      	lsls	r2, r3, #22
 800bb62:	d402      	bmi.n	800bb6a <_vfiprintf_r+0x202>
 800bb64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb66:	f7fc fdbb 	bl	80086e0 <__retarget_lock_release_recursive>
 800bb6a:	89ab      	ldrh	r3, [r5, #12]
 800bb6c:	065b      	lsls	r3, r3, #25
 800bb6e:	f53f af1d 	bmi.w	800b9ac <_vfiprintf_r+0x44>
 800bb72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb74:	e71c      	b.n	800b9b0 <_vfiprintf_r+0x48>
 800bb76:	ab03      	add	r3, sp, #12
 800bb78:	9300      	str	r3, [sp, #0]
 800bb7a:	462a      	mov	r2, r5
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <_vfiprintf_r+0x22c>)
 800bb7e:	a904      	add	r1, sp, #16
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7fc f8a3 	bl	8007ccc <_printf_i>
 800bb86:	e7e4      	b.n	800bb52 <_vfiprintf_r+0x1ea>
 800bb88:	0800ccc9 	.word	0x0800ccc9
 800bb8c:	0800ccd3 	.word	0x0800ccd3
 800bb90:	08007785 	.word	0x08007785
 800bb94:	0800b945 	.word	0x0800b945
 800bb98:	0800cccf 	.word	0x0800cccf

0800bb9c <__swbuf_r>:
 800bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9e:	460e      	mov	r6, r1
 800bba0:	4614      	mov	r4, r2
 800bba2:	4605      	mov	r5, r0
 800bba4:	b118      	cbz	r0, 800bbae <__swbuf_r+0x12>
 800bba6:	6a03      	ldr	r3, [r0, #32]
 800bba8:	b90b      	cbnz	r3, 800bbae <__swbuf_r+0x12>
 800bbaa:	f7fc fc4d 	bl	8008448 <__sinit>
 800bbae:	69a3      	ldr	r3, [r4, #24]
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	071a      	lsls	r2, r3, #28
 800bbb6:	d525      	bpl.n	800bc04 <__swbuf_r+0x68>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b31b      	cbz	r3, 800bc04 <__swbuf_r+0x68>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	6922      	ldr	r2, [r4, #16]
 800bbc0:	1a98      	subs	r0, r3, r2
 800bbc2:	6963      	ldr	r3, [r4, #20]
 800bbc4:	b2f6      	uxtb	r6, r6
 800bbc6:	4283      	cmp	r3, r0
 800bbc8:	4637      	mov	r7, r6
 800bbca:	dc04      	bgt.n	800bbd6 <__swbuf_r+0x3a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f7ff fa2a 	bl	800b028 <_fflush_r>
 800bbd4:	b9e0      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	60a3      	str	r3, [r4, #8]
 800bbdc:	6823      	ldr	r3, [r4, #0]
 800bbde:	1c5a      	adds	r2, r3, #1
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	701e      	strb	r6, [r3, #0]
 800bbe4:	6962      	ldr	r2, [r4, #20]
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d004      	beq.n	800bbf6 <__swbuf_r+0x5a>
 800bbec:	89a3      	ldrh	r3, [r4, #12]
 800bbee:	07db      	lsls	r3, r3, #31
 800bbf0:	d506      	bpl.n	800bc00 <__swbuf_r+0x64>
 800bbf2:	2e0a      	cmp	r6, #10
 800bbf4:	d104      	bne.n	800bc00 <__swbuf_r+0x64>
 800bbf6:	4621      	mov	r1, r4
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff fa15 	bl	800b028 <_fflush_r>
 800bbfe:	b938      	cbnz	r0, 800bc10 <__swbuf_r+0x74>
 800bc00:	4638      	mov	r0, r7
 800bc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc04:	4621      	mov	r1, r4
 800bc06:	4628      	mov	r0, r5
 800bc08:	f000 f806 	bl	800bc18 <__swsetup_r>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d0d5      	beq.n	800bbbc <__swbuf_r+0x20>
 800bc10:	f04f 37ff 	mov.w	r7, #4294967295
 800bc14:	e7f4      	b.n	800bc00 <__swbuf_r+0x64>
	...

0800bc18 <__swsetup_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4b2a      	ldr	r3, [pc, #168]	; (800bcc4 <__swsetup_r+0xac>)
 800bc1c:	4605      	mov	r5, r0
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	460c      	mov	r4, r1
 800bc22:	b118      	cbz	r0, 800bc2c <__swsetup_r+0x14>
 800bc24:	6a03      	ldr	r3, [r0, #32]
 800bc26:	b90b      	cbnz	r3, 800bc2c <__swsetup_r+0x14>
 800bc28:	f7fc fc0e 	bl	8008448 <__sinit>
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc32:	0718      	lsls	r0, r3, #28
 800bc34:	d422      	bmi.n	800bc7c <__swsetup_r+0x64>
 800bc36:	06d9      	lsls	r1, r3, #27
 800bc38:	d407      	bmi.n	800bc4a <__swsetup_r+0x32>
 800bc3a:	2309      	movs	r3, #9
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	e034      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bc4a:	0758      	lsls	r0, r3, #29
 800bc4c:	d512      	bpl.n	800bc74 <__swsetup_r+0x5c>
 800bc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc50:	b141      	cbz	r1, 800bc64 <__swsetup_r+0x4c>
 800bc52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc56:	4299      	cmp	r1, r3
 800bc58:	d002      	beq.n	800bc60 <__swsetup_r+0x48>
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f7fd fbc2 	bl	80093e4 <_free_r>
 800bc60:	2300      	movs	r3, #0
 800bc62:	6363      	str	r3, [r4, #52]	; 0x34
 800bc64:	89a3      	ldrh	r3, [r4, #12]
 800bc66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6063      	str	r3, [r4, #4]
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	f043 0308 	orr.w	r3, r3, #8
 800bc7a:	81a3      	strh	r3, [r4, #12]
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	b94b      	cbnz	r3, 800bc94 <__swsetup_r+0x7c>
 800bc80:	89a3      	ldrh	r3, [r4, #12]
 800bc82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc8a:	d003      	beq.n	800bc94 <__swsetup_r+0x7c>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f000 f884 	bl	800bd9c <__smakebuf_r>
 800bc94:	89a0      	ldrh	r0, [r4, #12]
 800bc96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc9a:	f010 0301 	ands.w	r3, r0, #1
 800bc9e:	d00a      	beq.n	800bcb6 <__swsetup_r+0x9e>
 800bca0:	2300      	movs	r3, #0
 800bca2:	60a3      	str	r3, [r4, #8]
 800bca4:	6963      	ldr	r3, [r4, #20]
 800bca6:	425b      	negs	r3, r3
 800bca8:	61a3      	str	r3, [r4, #24]
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	b943      	cbnz	r3, 800bcc0 <__swsetup_r+0xa8>
 800bcae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcb2:	d1c4      	bne.n	800bc3e <__swsetup_r+0x26>
 800bcb4:	bd38      	pop	{r3, r4, r5, pc}
 800bcb6:	0781      	lsls	r1, r0, #30
 800bcb8:	bf58      	it	pl
 800bcba:	6963      	ldrpl	r3, [r4, #20]
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	e7f4      	b.n	800bcaa <__swsetup_r+0x92>
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e7f7      	b.n	800bcb4 <__swsetup_r+0x9c>
 800bcc4:	20000064 	.word	0x20000064

0800bcc8 <_raise_r>:
 800bcc8:	291f      	cmp	r1, #31
 800bcca:	b538      	push	{r3, r4, r5, lr}
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	d904      	bls.n	800bcdc <_raise_r+0x14>
 800bcd2:	2316      	movs	r3, #22
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bcde:	b112      	cbz	r2, 800bce6 <_raise_r+0x1e>
 800bce0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bce4:	b94b      	cbnz	r3, 800bcfa <_raise_r+0x32>
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f830 	bl	800bd4c <_getpid_r>
 800bcec:	462a      	mov	r2, r5
 800bcee:	4601      	mov	r1, r0
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcf6:	f000 b817 	b.w	800bd28 <_kill_r>
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d00a      	beq.n	800bd14 <_raise_r+0x4c>
 800bcfe:	1c59      	adds	r1, r3, #1
 800bd00:	d103      	bne.n	800bd0a <_raise_r+0x42>
 800bd02:	2316      	movs	r3, #22
 800bd04:	6003      	str	r3, [r0, #0]
 800bd06:	2001      	movs	r0, #1
 800bd08:	e7e7      	b.n	800bcda <_raise_r+0x12>
 800bd0a:	2400      	movs	r4, #0
 800bd0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd10:	4628      	mov	r0, r5
 800bd12:	4798      	blx	r3
 800bd14:	2000      	movs	r0, #0
 800bd16:	e7e0      	b.n	800bcda <_raise_r+0x12>

0800bd18 <raise>:
 800bd18:	4b02      	ldr	r3, [pc, #8]	; (800bd24 <raise+0xc>)
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	f7ff bfd3 	b.w	800bcc8 <_raise_r>
 800bd22:	bf00      	nop
 800bd24:	20000064 	.word	0x20000064

0800bd28 <_kill_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4d07      	ldr	r5, [pc, #28]	; (800bd48 <_kill_r+0x20>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	f7f6 fa19 	bl	800216c <_kill>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d102      	bne.n	800bd44 <_kill_r+0x1c>
 800bd3e:	682b      	ldr	r3, [r5, #0]
 800bd40:	b103      	cbz	r3, 800bd44 <_kill_r+0x1c>
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	bd38      	pop	{r3, r4, r5, pc}
 800bd46:	bf00      	nop
 800bd48:	200004f0 	.word	0x200004f0

0800bd4c <_getpid_r>:
 800bd4c:	f7f6 ba06 	b.w	800215c <_getpid>

0800bd50 <__swhatbuf_r>:
 800bd50:	b570      	push	{r4, r5, r6, lr}
 800bd52:	460c      	mov	r4, r1
 800bd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	b096      	sub	sp, #88	; 0x58
 800bd5c:	4615      	mov	r5, r2
 800bd5e:	461e      	mov	r6, r3
 800bd60:	da0d      	bge.n	800bd7e <__swhatbuf_r+0x2e>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd68:	f04f 0100 	mov.w	r1, #0
 800bd6c:	bf0c      	ite	eq
 800bd6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd72:	2340      	movne	r3, #64	; 0x40
 800bd74:	2000      	movs	r0, #0
 800bd76:	6031      	str	r1, [r6, #0]
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	b016      	add	sp, #88	; 0x58
 800bd7c:	bd70      	pop	{r4, r5, r6, pc}
 800bd7e:	466a      	mov	r2, sp
 800bd80:	f000 f848 	bl	800be14 <_fstat_r>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	dbec      	blt.n	800bd62 <__swhatbuf_r+0x12>
 800bd88:	9901      	ldr	r1, [sp, #4]
 800bd8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd92:	4259      	negs	r1, r3
 800bd94:	4159      	adcs	r1, r3
 800bd96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd9a:	e7eb      	b.n	800bd74 <__swhatbuf_r+0x24>

0800bd9c <__smakebuf_r>:
 800bd9c:	898b      	ldrh	r3, [r1, #12]
 800bd9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bda0:	079d      	lsls	r5, r3, #30
 800bda2:	4606      	mov	r6, r0
 800bda4:	460c      	mov	r4, r1
 800bda6:	d507      	bpl.n	800bdb8 <__smakebuf_r+0x1c>
 800bda8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	6163      	str	r3, [r4, #20]
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	ab01      	add	r3, sp, #4
 800bdba:	466a      	mov	r2, sp
 800bdbc:	f7ff ffc8 	bl	800bd50 <__swhatbuf_r>
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	4605      	mov	r5, r0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f7fd fb81 	bl	80094cc <_malloc_r>
 800bdca:	b948      	cbnz	r0, 800bde0 <__smakebuf_r+0x44>
 800bdcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd0:	059a      	lsls	r2, r3, #22
 800bdd2:	d4ef      	bmi.n	800bdb4 <__smakebuf_r+0x18>
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
 800bdd8:	f043 0302 	orr.w	r3, r3, #2
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	e7e3      	b.n	800bda8 <__smakebuf_r+0xc>
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde8:	81a3      	strh	r3, [r4, #12]
 800bdea:	9b00      	ldr	r3, [sp, #0]
 800bdec:	6163      	str	r3, [r4, #20]
 800bdee:	9b01      	ldr	r3, [sp, #4]
 800bdf0:	6120      	str	r0, [r4, #16]
 800bdf2:	b15b      	cbz	r3, 800be0c <__smakebuf_r+0x70>
 800bdf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 f81d 	bl	800be38 <_isatty_r>
 800bdfe:	b128      	cbz	r0, 800be0c <__smakebuf_r+0x70>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f023 0303 	bic.w	r3, r3, #3
 800be06:	f043 0301 	orr.w	r3, r3, #1
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	431d      	orrs	r5, r3
 800be10:	81a5      	strh	r5, [r4, #12]
 800be12:	e7cf      	b.n	800bdb4 <__smakebuf_r+0x18>

0800be14 <_fstat_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	; (800be34 <_fstat_r+0x20>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f7f6 fa09 	bl	8002238 <_fstat>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d102      	bne.n	800be30 <_fstat_r+0x1c>
 800be2a:	682b      	ldr	r3, [r5, #0]
 800be2c:	b103      	cbz	r3, 800be30 <_fstat_r+0x1c>
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	200004f0 	.word	0x200004f0

0800be38 <_isatty_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	; (800be54 <_isatty_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f6 fa08 	bl	8002258 <_isatty>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_isatty_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_isatty_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	200004f0 	.word	0x200004f0

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
