
adc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005558  08005558  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005558  08005558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005560  08005560  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  080055d0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080055d0  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2b4  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021fd  00000000  00000000  0002f38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  00031590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a30  00000000  00000000  000322f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229bf  00000000  00000000  00032d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f629  00000000  00000000  000556df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3472  00000000  00000000  00064d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ebc  00000000  00000000  0013817c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0013c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054b0 	.word	0x080054b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054b0 	.word	0x080054b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fb93 	bl	8000c9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f84a 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f93e 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f90c 	bl	8000798 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000580:	f000 f8a6 	bl	80006d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8000584:	217f      	movs	r1, #127	; 0x7f
 8000586:	481d      	ldr	r0, [pc, #116]	; (80005fc <main+0x90>)
 8000588:	f001 fe5e 	bl	8002248 <HAL_ADCEx_Calibration_Start>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <main+0x2a>
  {
    /* Calibration Error */
    Error_Handler();
 8000592:	f000 f97b 	bl	800088c <Error_Handler>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  /*##-3- Start the conversion process #######################################*/
	  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <main+0x90>)
 8000598:	f000 ff76 	bl	8001488 <HAL_ADC_Start>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <main+0x3a>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 80005a2:	f000 f973 	bl	800088c <Error_Handler>

	  /*##-4- Wait for the end of conversion #####################################*/
	  /*  For simplicity reasons, this example is just waiting till the end of the
	      conversion, but application may perform other tasks while conversion
	      operation is ongoing. */
	  if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 80005a6:	210a      	movs	r1, #10
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <main+0x90>)
 80005aa:	f001 f803 	bl	80015b4 <HAL_ADC_PollForConversion>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <main+0x4e>
	  {
	    /* End Of Conversion flag not set on time */
	    Error_Handler();
 80005b4:	f000 f96a 	bl	800088c <Error_Handler>
 80005b8:	e7ed      	b.n	8000596 <main+0x2a>
	  }
	  else
	  {
	    /* ADC conversion completed */
	    /*##-5- Get the converted value of regular channel  ########################*/
	    uhADCxConvertedValue = HAL_ADC_GetValue(&hadc1);
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <main+0x90>)
 80005bc:	f001 f889 	bl	80016d2 <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <main+0x94>)
 80005c4:	6013      	str	r3, [r2, #0]
	    HAL_ADC_Stop(&hadc1);
 80005c6:	480d      	ldr	r0, [pc, #52]	; (80005fc <main+0x90>)
 80005c8:	f000 ffc1 	bl	800154e <HAL_ADC_Stop>
	    print_flag++;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0x98>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <main+0x98>)
 80005d4:	6013      	str	r3, [r2, #0]

	    if(print_flag == 1000)
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <main+0x98>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005de:	d108      	bne.n	80005f2 <main+0x86>
	    {
	    	print_flag = 0;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <main+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	    	printf("ADC value is %ld\r\n", uhADCxConvertedValue);
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <main+0x94>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	4806      	ldr	r0, [pc, #24]	; (8000608 <main+0x9c>)
 80005ee:	f004 f8e9 	bl	80047c4 <iprintf>
	    }
	    HAL_Delay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fbc6 	bl	8000d84 <HAL_Delay>
	  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80005f8:	e7cd      	b.n	8000596 <main+0x2a>
 80005fa:	bf00      	nop
 80005fc:	20000084 	.word	0x20000084
 8000600:	2000016c 	.word	0x2000016c
 8000604:	20000170 	.word	0x20000170
 8000608:	080054c8 	.word	0x080054c8

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	; 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	; 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 f927 	bl	800486e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000632:	f002 f8ef 	bl	8002814 <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f926 	bl	800088c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000640:	f002 f8ca 	bl	80027d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xc0>)
 8000646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xc0>)
 800064c:	f023 0318 	bic.w	r3, r3, #24
 8000650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000654:	2314      	movs	r3, #20
 8000656:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000664:	2360      	movs	r3, #96	; 0x60
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800066c:	2301      	movs	r3, #1
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000678:	2307      	movs	r3, #7
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f919 	bl	80028c0 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000694:	f000 f8fa 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fd19 	bl	80030e8 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006bc:	f000 f8e6 	bl	800088c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c0:	f003 f92c 	bl	800391c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c4:	bf00      	nop
 80006c6:	3758      	adds	r7, #88	; 0x58
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <MX_ADC1_Init+0xbc>)
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <MX_ADC1_Init+0xc0>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_ADC1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_ADC1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_ADC1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <MX_ADC1_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0xbc>)
 8000706:	2204      	movs	r2, #4
 8000708:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_ADC1_Init+0xbc>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ADC1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0xbc>)
 8000718:	2201      	movs	r2, #1
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ADC1_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_ADC1_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ADC1_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0xbc>)
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ADC1_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_ADC1_Init+0xbc>)
 8000748:	f000 fd56 	bl	80011f8 <HAL_ADC_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000752:	f000 f89b 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC1_Init+0xc4>)
 8000758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075a:	2306      	movs	r3, #6
 800075c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000762:	237f      	movs	r3, #127	; 0x7f
 8000764:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000766:	2304      	movs	r3, #4
 8000768:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC1_Init+0xbc>)
 8000774:	f000 ffba 	bl	80016ec <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800077e:	f000 f885 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000084 	.word	0x20000084
 8000790:	50040000 	.word	0x50040000
 8000794:	14f00020 	.word	0x14f00020

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 800079e:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x5c>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x58>)
 80007dc:	f003 f9a0 	bl	8003b20 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f851 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000e8 	.word	0x200000e8
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_GPIO_Init+0x8c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <MX_GPIO_Init+0x8c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_GPIO_Init+0x8c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0x90>)
 800085c:	f001 ffa4 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000860:	2308      	movs	r3, #8
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0x90>)
 8000878:	f001 fe2c 	bl	80024d4 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09e      	sub	sp, #120	; 0x78
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	2254      	movs	r2, #84	; 0x54
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 ffb4 	bl	800486e <memset>
  if(hadc->Instance==ADC1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <HAL_ADC_MspInit+0xc0>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d143      	bne.n	8000998 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000910:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000914:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000916:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800091a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000924:	2310      	movs	r3, #16
 8000926:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000928:	2307      	movs	r3, #7
 800092a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fdf6 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800094a:	f7ff ff9f 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 8000954:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_ADC_MspInit+0xc4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097e:	2301      	movs	r3, #1
 8000980:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000982:	230b      	movs	r3, #11
 8000984:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800098e:	4619      	mov	r1, r3
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f001 fd9e 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000998:	bf00      	nop
 800099a:	3778      	adds	r7, #120	; 0x78
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	50040000 	.word	0x50040000
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09e      	sub	sp, #120	; 0x78
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	2254      	movs	r2, #84	; 0x54
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f003 ff50 	bl	800486e <memset>
  if(huart->Instance==USART2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <HAL_UART_MspInit+0xcc>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d148      	bne.n	8000a6a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d8:	2302      	movs	r3, #2
 80009da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4618      	mov	r0, r3
 80009e6:	f002 fda3 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f7ff ff4c 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fe:	6593      	str	r3, [r2, #88]	; 0x58
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a10:	4a19      	ldr	r2, [pc, #100]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0xd0>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a24:	2304      	movs	r3, #4
 8000a26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a34:	2307      	movs	r3, #7
 8000a36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f001 fd47 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 fd35 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a6a:	bf00      	nop
 8000a6c:	3778      	adds	r7, #120	; 0x78
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f93c 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000adc:	2301      	movs	r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	4807      	ldr	r0, [pc, #28]	; (8000b08 <_read+0x38>)
 8000aec:	f003 f8fa 	bl	8003ce4 <HAL_UART_Receive>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	607b      	str	r3, [r7, #4]

	return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000e8 	.word	0x200000e8

08000b0c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <_write+0x40>)
 8000b28:	f003 f848 	bl	8003bbc <HAL_UART_Transmit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d002      	beq.n	8000b3c <_write+0x30>
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d101      	bne.n	8000b40 <_write+0x34>
	{
		Error_Handler();
 8000b3c:	f7ff fea6 	bl	800088c <Error_Handler>
	}

	return len;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000e8 	.word	0x200000e8

08000b50 <_close>:



int _close(int file)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	return -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	605a      	str	r2, [r3, #4]
	return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_isatty>:

int _isatty(int file)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
	return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f003 fe90 	bl	800490c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20010000 	.word	0x20010000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000174 	.word	0x20000174
 8000c20:	200002c8 	.word	0x200002c8

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c4c:	f7ff ffea 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 fe4f 	bl	8004918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c7a:	f7ff fc77 	bl	800056c <main>

08000c7e <LoopForever>:

LoopForever:
    b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c8c:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 8000c90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c94:	200002c8 	.word	0x200002c8

08000c98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_IRQHandler>

08000c9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f001 fbe1 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f80e 	bl	8000ccc <HAL_InitTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e001      	b.n	8000cc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbc:	f7ff fdec 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_InitTick+0x6c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d023      	beq.n	8000d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <HAL_InitTick+0x70>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <HAL_InitTick+0x6c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fbdf 	bl	80024ba <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d809      	bhi.n	8000d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f001 fbb7 	bl	8002482 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_InitTick+0x74>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e007      	b.n	8000d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	e004      	b.n	8000d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
 8000d26:	e001      	b.n	8000d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000004 	.word	0x20000004

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000178 	.word	0x20000178

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000178 	.word	0x20000178

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	431a      	orrs	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	609a      	str	r2, [r3, #8]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	431a      	orrs	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3360      	adds	r3, #96	; 0x60
 8000e46:	461a      	mov	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <LL_ADC_SetOffset+0x44>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	4313      	orrs	r3, r2
 8000e64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e6c:	bf00      	nop
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	03fff000 	.word	0x03fff000

08000e7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3360      	adds	r3, #96	; 0x60
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3360      	adds	r3, #96	; 0x60
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000ed2:	bf00      	nop
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3330      	adds	r3, #48	; 0x30
 8000f14:	461a      	mov	r2, r3
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	4413      	add	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	211f      	movs	r1, #31
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0e9b      	lsrs	r3, r3, #26
 8000f3c:	f003 011f 	and.w	r1, r3, #31
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	f003 031f 	and.w	r3, r3, #31
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3314      	adds	r3, #20
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	0e5b      	lsrs	r3, r3, #25
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	0d1b      	lsrs	r3, r3, #20
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	2107      	movs	r1, #7
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	401a      	ands	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	0d1b      	lsrs	r3, r3, #20
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0318 	and.w	r3, r3, #24
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fd8:	40d9      	lsrs	r1, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	0007ffff 	.word	0x0007ffff

08000ffc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800100c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6093      	str	r3, [r2, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001034:	d101      	bne.n	800103a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001058:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800105c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001084:	d101      	bne.n	800108a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ac:	f043 0201 	orr.w	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010d4:	f043 0202 	orr.w	r2, r3, #2
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <LL_ADC_IsEnabled+0x18>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <LL_ADC_IsEnabled+0x1a>
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b02      	cmp	r3, #2
 8001120:	d101      	bne.n	8001126 <LL_ADC_IsDisableOngoing+0x18>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <LL_ADC_IsDisableOngoing+0x1a>
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001148:	f043 0204 	orr.w	r2, r3, #4
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800116c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001170:	f043 0210 	orr.w	r2, r3, #16
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d101      	bne.n	800119c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011be:	f043 0220 	orr.w	r2, r3, #32
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d101      	bne.n	80011ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e12c      	b.n	800146c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	2b00      	cmp	r3, #0
 800121e:	d109      	bne.n	8001234 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fb5d 	bl	80008e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fef1 	bl	8001020 <LL_ADC_IsDeepPowerDownEnabled>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fed7 	bl	8000ffc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff0c 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d115      	bne.n	800128a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fef0 	bl	8001048 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001268:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_ADC_Init+0x27c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	4a82      	ldr	r2, [pc, #520]	; (8001478 <HAL_ADC_Init+0x280>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	099b      	lsrs	r3, r3, #6
 8001276:	3301      	adds	r3, #1
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feee 	bl	8001070 <LL_ADC_IsInternalRegulatorEnabled>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10d      	bne.n	80012b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff62 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 80012c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 80c5 	bne.w	800145a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 80c1 	bne.w	800145a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012e0:	f043 0202 	orr.w	r2, r3, #2
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fefb 	bl	80010e8 <LL_ADC_IsEnabled>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d10b      	bne.n	8001310 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012f8:	4860      	ldr	r0, [pc, #384]	; (800147c <HAL_ADC_Init+0x284>)
 80012fa:	f7ff fef5 	bl	80010e8 <LL_ADC_IsEnabled>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d105      	bne.n	8001310 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4619      	mov	r1, r3
 800130a:	485d      	ldr	r0, [pc, #372]	; (8001480 <HAL_ADC_Init+0x288>)
 800130c:	f7ff fd5e 	bl	8000dcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e5b      	ldrb	r3, [r3, #25]
 8001314:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800131a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001320:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001326:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	3b01      	subs	r3, #1
 8001344:	045b      	lsls	r3, r3, #17
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	2b00      	cmp	r3, #0
 8001352:	d009      	beq.n	8001368 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <HAL_ADC_Init+0x28c>)
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	430b      	orrs	r3, r1
 800137a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff feff 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001386:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff20 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001392:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d13d      	bne.n	8001416 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d13a      	bne.n	8001416 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	69b9      	ldr	r1, [r7, #24]
 80013c6:	430b      	orrs	r3, r1
 80013c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d118      	bne.n	8001406 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013ea:	4311      	orrs	r1, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013f0:	4311      	orrs	r1, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013f6:	430a      	orrs	r2, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	e007      	b.n	8001416 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10c      	bne.n	8001438 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f023 010f 	bic.w	r1, r3, #15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	1e5a      	subs	r2, r3, #1
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
 8001436:	e007      	b.n	8001448 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020f 	bic.w	r2, r2, #15
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f023 0303 	bic.w	r3, r3, #3
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
 8001458:	e007      	b.n	800146a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800146a:	7ffb      	ldrb	r3, [r7, #31]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	053e2d63 	.word	0x053e2d63
 800147c:	50040000 	.word	0x50040000
 8001480:	50040300 	.word	0x50040300
 8001484:	fff0c007 	.word	0xfff0c007

08001488 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe75 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d14f      	bne.n	8001540 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Start+0x26>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e04b      	b.n	8001546 <HAL_ADC_Start+0xbe>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fdb4 	bl	8002024 <ADC_Enable>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d137      	bne.n	8001536 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e6:	d106      	bne.n	80014f6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f023 0206 	bic.w	r2, r3, #6
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	659a      	str	r2, [r3, #88]	; 0x58
 80014f4:	e002      	b.n	80014fc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	221c      	movs	r2, #28
 8001502:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fe00 	bl	8001134 <LL_ADC_REG_StartConversion>
 8001534:	e006      	b.n	8001544 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800153e:	e001      	b.n	8001544 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001540:	2302      	movs	r3, #2
 8001542:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_ADC_Stop+0x16>
 8001560:	2302      	movs	r3, #2
 8001562:	e023      	b.n	80015ac <HAL_ADC_Stop+0x5e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800156c:	2103      	movs	r1, #3
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fc9c 	bl	8001eac <ADC_ConversionStop>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d111      	bne.n	80015a2 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fdd6 	bl	8002130 <ADC_Disable>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	f043 0201 	orr.w	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d102      	bne.n	80015cc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015c6:	2308      	movs	r3, #8
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e010      	b.n	80015ee <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	f043 0220 	orr.w	r2, r3, #32
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e06f      	b.n	80016ca <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80015ea:	2304      	movs	r3, #4
 80015ec:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015ee:	f7ff fbbd 	bl	8000d6c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015f4:	e021      	b.n	800163a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015fc:	d01d      	beq.n	800163a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015fe:	f7ff fbb5 	bl	8000d6c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d302      	bcc.n	8001614 <HAL_ADC_PollForConversion+0x60>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d112      	bne.n	800163a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10b      	bne.n	800163a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f043 0204 	orr.w	r2, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e047      	b.n	80016ca <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0d6      	beq.n	80015f6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fc40 	bl	8000ede <LL_ADC_REG_IsTriggerSourceSWStart>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d01c      	beq.n	800169e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e5b      	ldrb	r3, [r3, #25]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d118      	bne.n	800169e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b08      	cmp	r3, #8
 8001678:	d111      	bne.n	800169e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d104      	bne.n	80016b6 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2208      	movs	r2, #8
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e008      	b.n	80016c8 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	220c      	movs	r2, #12
 80016c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0b6      	sub	sp, #216	; 0xd8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x22>
 800170a:	2302      	movs	r3, #2
 800170c:	e3b9      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x796>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fd32 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 839e 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d824      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	3b02      	subs	r3, #2
 8001736:	2b03      	cmp	r3, #3
 8001738:	d81b      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x86>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_ADC_ConfigChannel+0x54>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	08001759 	.word	0x08001759
 8001748:	08001761 	.word	0x08001761
 800174c:	08001769 	.word	0x08001769
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	220c      	movs	r2, #12
 8001754:	605a      	str	r2, [r3, #4]
          break;
 8001756:	e010      	b.n	800177a <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2212      	movs	r2, #18
 800175c:	605a      	str	r2, [r3, #4]
          break;
 800175e:	e00c      	b.n	800177a <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2218      	movs	r2, #24
 8001764:	605a      	str	r2, [r3, #4]
          break;
 8001766:	e008      	b.n	800177a <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176e:	605a      	str	r2, [r3, #4]
          break;
 8001770:	e003      	b.n	800177a <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2206      	movs	r2, #6
 8001776:	605a      	str	r2, [r3, #4]
          break;
 8001778:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6859      	ldr	r1, [r3, #4]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f7ff fbbc 	bl	8000f04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fcf7 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001796:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fd17 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 80017a4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 81a6 	bne.w	8001afe <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f040 81a1 	bne.w	8001afe <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6819      	ldr	r1, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f7ff fbc7 	bl	8000f5c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d00a      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001800:	f7ff fb18 	bl	8000e34 <LL_ADC_SetOffset>
 8001804:	e17b      	b.n	8001afe <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fb35 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10a      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x146>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb2a 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 021f 	and.w	r2, r3, #31
 8001830:	e01e      	b.n	8001870 <HAL_ADC_ConfigChannel+0x184>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb1f 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8001860:	2320      	movs	r3, #32
 8001862:	e004      	b.n	800186e <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8001864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <HAL_ADC_ConfigChannel+0x19c>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	f003 031f 	and.w	r3, r3, #31
 8001886:	e018      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800189c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 80018b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d106      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff faee 	bl	8000ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2101      	movs	r1, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fad2 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x20c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fac7 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 80018ee:	4603      	mov	r3, r0
 80018f0:	0e9b      	lsrs	r3, r3, #26
 80018f2:	f003 021f 	and.w	r2, r3, #31
 80018f6:	e01e      	b.n	8001936 <HAL_ADC_ConfigChannel+0x24a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fabc 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800190e:	fa93 f3a3 	rbit	r3, r3
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800191e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8001926:	2320      	movs	r3, #32
 8001928:	e004      	b.n	8001934 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800192a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800192e:	fab3 f383 	clz	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800193e:	2b00      	cmp	r3, #0
 8001940:	d105      	bne.n	800194e <HAL_ADC_ConfigChannel+0x262>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	0e9b      	lsrs	r3, r3, #26
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	e018      	b.n	8001980 <HAL_ADC_ConfigChannel+0x294>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001962:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001966:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800196a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8001976:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001980:	429a      	cmp	r2, r3
 8001982:	d106      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa8b 	bl	8000ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2102      	movs	r1, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa6f 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10a      	bne.n	80019be <HAL_ADC_ConfigChannel+0x2d2>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2102      	movs	r1, #2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa64 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	0e9b      	lsrs	r3, r3, #26
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	e01e      	b.n	80019fc <HAL_ADC_ConfigChannel+0x310>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fa59 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80019ec:	2320      	movs	r3, #32
 80019ee:	e004      	b.n	80019fa <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80019f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x328>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0e9b      	lsrs	r3, r3, #26
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	e016      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x356>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e004      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8001a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d106      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff fa2a 	bl	8000ea8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2103      	movs	r1, #3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fa0e 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10a      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x394>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2103      	movs	r1, #3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fa03 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	0e9b      	lsrs	r3, r3, #26
 8001a7a:	f003 021f 	and.w	r2, r3, #31
 8001a7e:	e017      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x3c4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2103      	movs	r1, #3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f9f8 	bl	8000e7c <LL_ADC_GetOffsetChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e003      	b.n	8001aae <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8001aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x3dc>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	e011      	b.n	8001aec <HAL_ADC_ConfigChannel+0x400>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e003      	b.n	8001aec <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8001ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2103      	movs	r1, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f9d5 	bl	8000ea8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff faf0 	bl	80010e8 <LL_ADC_IsEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 8140 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	f7ff fa49 	bl	8000fb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a8f      	ldr	r2, [pc, #572]	; (8001d64 <HAL_ADC_ConfigChannel+0x678>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	f040 8131 	bne.w	8001d90 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10b      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x46a>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	3301      	adds	r3, #1
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	bf94      	ite	ls
 8001b4e:	2301      	movls	r3, #1
 8001b50:	2300      	movhi	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	e019      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x49e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e003      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8001b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	bf94      	ite	ls
 8001b84:	2301      	movls	r3, #1
 8001b86:	2300      	movhi	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d079      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x4be>
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	0e9b      	lsrs	r3, r3, #26
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	069b      	lsls	r3, r3, #26
 8001ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ba8:	e015      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x4ea>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb2:	fa93 f3a3 	rbit	r3, r3
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8001bc2:	2320      	movs	r3, #32
 8001bc4:	e003      	b.n	8001bce <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	069b      	lsls	r3, r3, #26
 8001bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x50a>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	3301      	adds	r3, #1
 8001bea:	f003 031f 	and.w	r3, r3, #31
 8001bee:	2101      	movs	r1, #1
 8001bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf4:	e017      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x53a>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	e003      	b.n	8001c1a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c14:	fab3 f383 	clz	r3, r3
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	ea42 0103 	orr.w	r1, r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10a      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x560>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 021f 	and.w	r2, r3, #31
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	051b      	lsls	r3, r3, #20
 8001c4a:	e018      	b.n	8001c7e <HAL_ADC_ConfigChannel+0x592>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e003      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	f003 021f 	and.w	r2, r3, #31
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	e081      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x5b2>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0e9b      	lsrs	r3, r3, #26
 8001c94:	3301      	adds	r3, #1
 8001c96:	069b      	lsls	r3, r3, #26
 8001c98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c9c:	e015      	b.n	8001cca <HAL_ADC_ConfigChannel+0x5de>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca6:	fa93 f3a3 	rbit	r3, r3
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	e003      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8001cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	069b      	lsls	r3, r3, #26
 8001cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x5fe>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	e017      	b.n	8001d1a <HAL_ADC_ConfigChannel+0x62e>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	61fb      	str	r3, [r7, #28]
  return result;
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e003      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	ea42 0103 	orr.w	r1, r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10d      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x65a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0e9b      	lsrs	r3, r3, #26
 8001d30:	3301      	adds	r3, #1
 8001d32:	f003 021f 	and.w	r2, r3, #31
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b1e      	subs	r3, #30
 8001d3e:	051b      	lsls	r3, r3, #20
 8001d40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d44:	e01e      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x698>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	613b      	str	r3, [r7, #16]
  return result;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001d5e:	2320      	movs	r3, #32
 8001d60:	e006      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x684>
 8001d62:	bf00      	nop
 8001d64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b1e      	subs	r3, #30
 8001d7e:	051b      	lsls	r3, r3, #20
 8001d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d84:	430b      	orrs	r3, r1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	6892      	ldr	r2, [r2, #8]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff f8e6 	bl	8000f5c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_ADC_ConfigChannel+0x7a0>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d06c      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d9c:	483c      	ldr	r0, [pc, #240]	; (8001e90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001d9e:	f7ff f83b 	bl	8000e18 <LL_ADC_GetCommonPathInternalCh>
 8001da2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_ADC_ConfigChannel+0x7a8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d127      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d121      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	; (8001e98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d157      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dce:	4619      	mov	r1, r3
 8001dd0:	482f      	ldr	r0, [pc, #188]	; (8001e90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dd2:	f7ff f80e 	bl	8000df2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dd6:	4b31      	ldr	r3, [pc, #196]	; (8001e9c <HAL_ADC_ConfigChannel+0x7b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_ADC_ConfigChannel+0x7b4>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	099b      	lsrs	r3, r3, #6
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dfe:	e03a      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d113      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x746>
 8001e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d12a      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e2c:	f7fe ffe1 	bl	8000df2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e30:	e021      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7bc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d11c      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d116      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_ADC_ConfigChannel+0x7ac>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d111      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480c      	ldr	r0, [pc, #48]	; (8001e90 <HAL_ADC_ConfigChannel+0x7a4>)
 8001e5e:	f7fe ffc8 	bl	8000df2 <LL_ADC_SetCommonPathInternalCh>
 8001e62:	e008      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e68:	f043 0220 	orr.w	r2, r3, #32
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	37d8      	adds	r7, #216	; 0xd8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	80080000 	.word	0x80080000
 8001e90:	50040300 	.word	0x50040300
 8001e94:	c7520000 	.word	0xc7520000
 8001e98:	50040000 	.word	0x50040000
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	053e2d63 	.word	0x053e2d63
 8001ea4:	cb840000 	.word	0xcb840000
 8001ea8:	80000001 	.word	0x80000001

08001eac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f95e 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f97f 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001ed4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8098 	beq.w	8002014 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d02a      	beq.n	8001f48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7e5b      	ldrb	r3, [r3, #25]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d126      	bne.n	8001f48 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7e1b      	ldrb	r3, [r3, #24]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d122      	bne.n	8001f48 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f06:	e014      	b.n	8001f32 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	4a45      	ldr	r2, [pc, #276]	; (8002020 <ADC_ConversionStop+0x174>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d90d      	bls.n	8001f2c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f14:	f043 0210 	orr.w	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e074      	b.n	8002016 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d1e3      	bne.n	8001f08 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d014      	beq.n	8001f78 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f916 	bl	8001184 <LL_ADC_REG_IsConversionOngoing>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f8d3 	bl	800110e <LL_ADC_IsDisableOngoing>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d104      	bne.n	8001f78 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f8f2 	bl	800115c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d014      	beq.n	8001fa8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f925 	bl	80011d2 <LL_ADC_INJ_IsConversionOngoing>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f8bb 	bl	800110e <LL_ADC_IsDisableOngoing>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d104      	bne.n	8001fa8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f901 	bl	80011aa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d005      	beq.n	8001fba <ADC_ConversionStop+0x10e>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d105      	bne.n	8001fc0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	617b      	str	r3, [r7, #20]
        break;
 8001fb8:	e005      	b.n	8001fc6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001fba:	2308      	movs	r3, #8
 8001fbc:	617b      	str	r3, [r7, #20]
        break;
 8001fbe:	e002      	b.n	8001fc6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
        break;
 8001fc4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe fed1 	bl	8000d6c <HAL_GetTick>
 8001fca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fcc:	e01b      	b.n	8002006 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001fce:	f7fe fecd 	bl	8000d6c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d914      	bls.n	8002006 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e007      	b.n	8002016 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1dc      	bne.n	8001fce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	a33fffff 	.word	0xa33fffff

08002024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff f857 	bl	80010e8 <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d169      	bne.n	8002114 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b36      	ldr	r3, [pc, #216]	; (8002120 <ADC_Enable+0xfc>)
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	f043 0210 	orr.w	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	f043 0201 	orr.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e055      	b.n	8002116 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f812 	bl	8001098 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002074:	482b      	ldr	r0, [pc, #172]	; (8002124 <ADC_Enable+0x100>)
 8002076:	f7fe fecf 	bl	8000e18 <LL_ADC_GetCommonPathInternalCh>
 800207a:	4603      	mov	r3, r0
 800207c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002084:	4b28      	ldr	r3, [pc, #160]	; (8002128 <ADC_Enable+0x104>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	4a28      	ldr	r2, [pc, #160]	; (800212c <ADC_Enable+0x108>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800209e:	e002      	b.n	80020a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fe5e 	bl	8000d6c <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020b2:	e028      	b.n	8002106 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f815 	bl	80010e8 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe ffe5 	bl	8001098 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ce:	f7fe fe4d 	bl	8000d6c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d914      	bls.n	8002106 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d00d      	beq.n	8002106 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e007      	b.n	8002116 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d1cf      	bne.n	80020b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	8000003f 	.word	0x8000003f
 8002124:	50040300 	.word	0x50040300
 8002128:	20000000 	.word	0x20000000
 800212c:	053e2d63 	.word	0x053e2d63

08002130 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe ffe6 	bl	800110e <LL_ADC_IsDisableOngoing>
 8002142:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe ffcd 	bl	80010e8 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d047      	beq.n	80021e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d144      	bne.n	80021e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030d 	and.w	r3, r3, #13
 8002164:	2b01      	cmp	r3, #1
 8002166:	d10c      	bne.n	8002182 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ffa7 	bl	80010c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2203      	movs	r2, #3
 8002178:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800217a:	f7fe fdf7 	bl	8000d6c <HAL_GetTick>
 800217e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002180:	e029      	b.n	80021d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0210 	orr.w	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0201 	orr.w	r2, r3, #1
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e023      	b.n	80021e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800219e:	f7fe fde5 	bl	8000d6c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d914      	bls.n	80021d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021be:	f043 0210 	orr.w	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e007      	b.n	80021e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1dc      	bne.n	800219e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LL_ADC_StartCalibration>:
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002200:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800220a:	4313      	orrs	r3, r2
 800220c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_IsCalibrationOnGoing>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002234:	d101      	bne.n	800223a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_ADCEx_Calibration_Start+0x1c>
 8002260:	2302      	movs	r3, #2
 8002262:	e04d      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff5f 	bl	8002130 <ADC_Disable>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d136      	bne.n	80022ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002284:	f023 0302 	bic.w	r3, r3, #2
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffa9 	bl	80021ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800229c:	e014      	b.n	80022c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80022aa:	d30d      	bcc.n	80022c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f023 0312 	bic.w	r3, r3, #18
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e01b      	b.n	8002300 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ffa7 	bl	8002220 <LL_ADC_IsCalibrationOnGoing>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e2      	bne.n	800229e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022dc:	f023 0303 	bic.w	r3, r3, #3
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
 80022e8:	e005      	b.n	80022f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002324:	4013      	ands	r3, r2
 8002326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800233a:	4a04      	ldr	r2, [pc, #16]	; (800234c <__NVIC_SetPriorityGrouping+0x44>)
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	60d3      	str	r3, [r2, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_GetPriorityGrouping+0x18>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	f003 0307 	and.w	r3, r3, #7
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff47 	bl	8002308 <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff5c 	bl	8002350 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffb0 	bl	8002428 <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e2:	e148      	b.n	8002776 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 813a 	beq.w	8002770 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d005      	beq.n	8002514 <HAL_GPIO_Init+0x40>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d130      	bne.n	8002576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800254a:	2201      	movs	r2, #1
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	f003 0201 	and.w	r2, r3, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b03      	cmp	r3, #3
 8002580:	d017      	beq.n	80025b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4013      	ands	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8094 	beq.w	8002770 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b52      	ldr	r3, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x2c0>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x2c0>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6613      	str	r3, [r2, #96]	; 0x60
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_GPIO_Init+0x2c0>)
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002660:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_GPIO_Init+0x2c4>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800268a:	d00d      	beq.n	80026a8 <HAL_GPIO_Init+0x1d4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a43      	ldr	r2, [pc, #268]	; (800279c <HAL_GPIO_Init+0x2c8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d007      	beq.n	80026a4 <HAL_GPIO_Init+0x1d0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a42      	ldr	r2, [pc, #264]	; (80027a0 <HAL_GPIO_Init+0x2cc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d101      	bne.n	80026a0 <HAL_GPIO_Init+0x1cc>
 800269c:	2302      	movs	r3, #2
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1d6>
 80026a0:	2307      	movs	r3, #7
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1d6>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1d6>
 80026a8:	2300      	movs	r3, #0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ba:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_GPIO_Init+0x2c4>)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ec:	4a2d      	ldr	r2, [pc, #180]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f2:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002716:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002740:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276a:	4a0e      	ldr	r2, [pc, #56]	; (80027a4 <HAL_GPIO_Init+0x2d0>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3301      	adds	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	f47f aeaf 	bne.w	80024e4 <HAL_GPIO_Init+0x10>
  }
}
 8002786:	bf00      	nop
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000
 800279c:	48000400 	.word	0x48000400
 80027a0:	48000800 	.word	0x48000800
 80027a4:	40010400 	.word	0x40010400

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40007000 	.word	0x40007000

080027f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_PWREx_GetVoltageRange+0x18>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40007000 	.word	0x40007000

08002814 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002822:	d130      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d038      	beq.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800283a:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002840:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2232      	movs	r2, #50	; 0x32
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002858:	e002      	b.n	8002860 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286c:	d102      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x60>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f2      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002880:	d110      	bne.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e00f      	b.n	80028a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002892:	d007      	beq.n	80028a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800289c:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40007000 	.word	0x40007000
 80028b8:	20000000 	.word	0x20000000
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f000 bc02 	b.w	80030d8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4b96      	ldr	r3, [pc, #600]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028de:	4b94      	ldr	r3, [pc, #592]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80e4 	beq.w	8002abe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_RCC_OscConfig+0x4c>
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f040 808b 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 8087 	bne.w	8002a1a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800290c:	4b88      	ldr	r3, [pc, #544]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x64>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e3d9      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1a      	ldr	r2, [r3, #32]
 8002928:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RCC_OscConfig+0x7e>
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800293c:	e005      	b.n	800294a <HAL_RCC_OscConfig+0x8a>
 800293e:	4b7c      	ldr	r3, [pc, #496]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800294a:	4293      	cmp	r3, r2
 800294c:	d223      	bcs.n	8002996 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fd8c 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e3ba      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002962:	4b73      	ldr	r3, [pc, #460]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a72      	ldr	r2, [pc, #456]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b70      	ldr	r3, [pc, #448]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	496d      	ldr	r1, [pc, #436]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002980:	4b6b      	ldr	r3, [pc, #428]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	4968      	ldr	r1, [pc, #416]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
 8002994:	e025      	b.n	80029e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002996:	4b66      	ldr	r3, [pc, #408]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 800299c:	f043 0308 	orr.w	r3, r3, #8
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b63      	ldr	r3, [pc, #396]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4960      	ldr	r1, [pc, #384]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b4:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	495b      	ldr	r1, [pc, #364]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd4c 	bl	8003470 <RCC_SetFlashLatencyFromMSIRange>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e37a      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e2:	f000 fc81 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b51      	ldr	r3, [pc, #324]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	4950      	ldr	r1, [pc, #320]	; (8002b34 <HAL_RCC_OscConfig+0x274>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_RCC_OscConfig+0x278>)
 8002a00:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a02:	4b4e      	ldr	r3, [pc, #312]	; (8002b3c <HAL_RCC_OscConfig+0x27c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f960 	bl	8000ccc <HAL_InitTick>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d052      	beq.n	8002abc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	e35e      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d032      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a2e:	f7fe f99d 	bl	8000d6c <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a36:	f7fe f999 	bl	8000d6c <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e347      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a48:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4930      	ldr	r1, [pc, #192]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a72:	4b2f      	ldr	r3, [pc, #188]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	492b      	ldr	r1, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a88:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a28      	ldr	r2, [pc, #160]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a94:	f7fe f96a 	bl	8000d6c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a9c:	f7fe f966 	bl	8000d6c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e314      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x1dc>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d073      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x21c>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d10e      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10b      	bne.n	8002af4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d063      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d15f      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e2f1      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afc:	d106      	bne.n	8002b0c <HAL_RCC_OscConfig+0x24c>
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e025      	b.n	8002b58 <HAL_RCC_OscConfig+0x298>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b14:	d114      	bne.n	8002b40 <HAL_RCC_OscConfig+0x280>
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCC_OscConfig+0x270>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e013      	b.n	8002b58 <HAL_RCC_OscConfig+0x298>
 8002b30:	40021000 	.word	0x40021000
 8002b34:	080054dc 	.word	0x080054dc
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	4ba0      	ldr	r3, [pc, #640]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a9f      	ldr	r2, [pc, #636]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b9d      	ldr	r3, [pc, #628]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a9c      	ldr	r2, [pc, #624]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f904 	bl	8000d6c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe f900 	bl	8000d6c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e2ae      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b7a:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x2a8>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f8f0 	bl	8000d6c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7fe f8ec 	bl	8000d6c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e29a      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ba2:	4b88      	ldr	r3, [pc, #544]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d0>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d060      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x310>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d119      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d116      	bne.n	8002bfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x328>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e277      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4973      	ldr	r1, [pc, #460]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bfc:	e040      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d023      	beq.n	8002c4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c06:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a6e      	ldr	r2, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe f8ab 	bl	8000d6c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1a:	f7fe f8a7 	bl	8000d6c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e255      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c2c:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b62      	ldr	r3, [pc, #392]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	495f      	ldr	r1, [pc, #380]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e018      	b.n	8002c80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5c      	ldr	r2, [pc, #368]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe f887 	bl	8000d6c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe f883 	bl	8000d6c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e231      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d03c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01c      	beq.n	8002cce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9a:	4a4a      	ldr	r2, [pc, #296]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f862 	bl	8000d6c <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe f85e 	bl	8000d6c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e20c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <HAL_RCC_OscConfig+0x3ec>
 8002ccc:	e01b      	b.n	8002d06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd4:	4a3b      	ldr	r2, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fe f845 	bl	8000d6c <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7fe f841 	bl	8000d6c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1ef      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1ef      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 80a6 	beq.w	8002e60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d30:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d118      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d4c:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d58:	f7fe f808 	bl	8000d6c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fe f804 	bl	8000d6c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1b2      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x508>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d108      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4d8>
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d96:	e029      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_OscConfig+0x50c>
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da6:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db0:	4b04      	ldr	r3, [pc, #16]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_RCC_OscConfig+0x504>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc0:	e014      	b.n	8002dec <HAL_RCC_OscConfig+0x52c>
 8002dc2:	bf00      	nop
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	4b9a      	ldr	r3, [pc, #616]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	4a99      	ldr	r2, [pc, #612]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ddc:	4b96      	ldr	r3, [pc, #600]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a95      	ldr	r2, [pc, #596]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002de4:	f023 0304 	bic.w	r3, r3, #4
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d016      	beq.n	8002e22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fd ffba 	bl	8000d6c <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfc:	f7fd ffb6 	bl	8000d6c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e162      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ed      	beq.n	8002dfc <HAL_RCC_OscConfig+0x53c>
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7fd ffa3 	bl	8000d6c <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fd ff9f 	bl	8000d6c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e14b      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e40:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ed      	bne.n	8002e2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4b78      	ldr	r3, [pc, #480]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a77      	ldr	r2, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03c      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01c      	beq.n	8002eae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fd ff72 	bl	8000d6c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8c:	f7fd ff6e 	bl	8000d6c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e11c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ef      	beq.n	8002e8c <HAL_RCC_OscConfig+0x5cc>
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eae:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb4:	4a60      	ldr	r2, [pc, #384]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eb6:	f023 0301 	bic.w	r3, r3, #1
 8002eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fd ff55 	bl	8000d6c <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec6:	f7fd ff51 	bl	8000d6c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0ff      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed8:	4b57      	ldr	r3, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80f3 	beq.w	80030d6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 80c9 	bne.w	800308c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002efa:	4b4f      	ldr	r3, [pc, #316]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d12c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d123      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d11b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d113      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	3b01      	subs	r3, #1
 8002f62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d06b      	beq.n	8003040 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d062      	beq.n	8003034 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f6e:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0ac      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f8a:	f7fd feef 	bl	8000d6c <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f92:	f7fd feeb 	bl	8000d6c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e099      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb0:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x77c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fca:	0212      	lsls	r2, r2, #8
 8002fcc:	4311      	orrs	r1, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fd2:	0852      	lsrs	r2, r2, #1
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0552      	lsls	r2, r2, #21
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fea:	06d2      	lsls	r2, r2, #27
 8002fec:	430a      	orrs	r2, r1
 8002fee:	4912      	ldr	r1, [pc, #72]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800300c:	f7fd feae 	bl	8000d6c <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003014:	f7fd feaa 	bl	8000d6c <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e058      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_RCC_OscConfig+0x778>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003032:	e050      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e04f      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
 8003038:	40021000 	.word	0x40021000
 800303c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003040:	4b27      	ldr	r3, [pc, #156]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d144      	bne.n	80030d6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003056:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003058:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003062:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003064:	f7fd fe82 	bl	8000d6c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fd fe7e 	bl	8000d6c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e02c      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0x7ac>
 800308a:	e024      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d01f      	beq.n	80030d2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 8003098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd fe65 	bl	8000d6c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fd fe61 	bl	8000d6c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e00f      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4905      	ldr	r1, [pc, #20]	; (80030e0 <HAL_RCC_OscConfig+0x820>)
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_RCC_OscConfig+0x824>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60cb      	str	r3, [r1, #12]
 80030d0:	e001      	b.n	80030d6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40021000 	.word	0x40021000
 80030e4:	feeefffc 	.word	0xfeeefffc

080030e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0e7      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030fc:	4b75      	ldr	r3, [pc, #468]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	429a      	cmp	r2, r3
 8003108:	d910      	bls.n	800312c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310a:	4b72      	ldr	r3, [pc, #456]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 0207 	bic.w	r2, r3, #7
 8003112:	4970      	ldr	r1, [pc, #448]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b6e      	ldr	r3, [pc, #440]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cf      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b66      	ldr	r3, [pc, #408]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003144:	429a      	cmp	r2, r3
 8003146:	d908      	bls.n	800315a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b63      	ldr	r3, [pc, #396]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4960      	ldr	r1, [pc, #384]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d04c      	beq.n	8003200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b03      	cmp	r3, #3
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d121      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0a6      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e09a      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319e:	4b4e      	ldr	r3, [pc, #312]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e08e      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e086      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4943      	ldr	r1, [pc, #268]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fd fdcc 	bl	8000d6c <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fd fdc8 	bl	8000d6c <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e06e      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d010      	beq.n	800322e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003218:	429a      	cmp	r2, r3
 800321a:	d208      	bcs.n	800322e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321c:	4b2e      	ldr	r3, [pc, #184]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	492b      	ldr	r1, [pc, #172]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	4313      	orrs	r3, r2
 800322c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322e:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d210      	bcs.n	800325e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 0207 	bic.w	r2, r3, #7
 8003244:	4923      	ldr	r1, [pc, #140]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e036      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326a:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4918      	ldr	r1, [pc, #96]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4910      	ldr	r1, [pc, #64]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329c:	f000 f824 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	490b      	ldr	r1, [pc, #44]	; (80032dc <HAL_RCC_ClockConfig+0x1f4>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1f8>)
 80032ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1fc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd fd03 	bl	8000ccc <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ca:	7afb      	ldrb	r3, [r7, #11]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	080054dc 	.word	0x080054dc
 80032e0:	20000000 	.word	0x20000000
 80032e4:	20000004 	.word	0x20000004

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d121      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d11e      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003328:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e005      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d102      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003360:	4b25      	ldr	r3, [pc, #148]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e004      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d101      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800336c:	4b23      	ldr	r3, [pc, #140]	; (80033fc <HAL_RCC_GetSysClockFreq+0x114>)
 800336e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d134      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003376:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d003      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0xa6>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d003      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0xac>
 800338c:	e005      	b.n	800339a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003390:	617b      	str	r3, [r7, #20]
      break;
 8003392:	e005      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003396:	617b      	str	r3, [r7, #20]
      break;
 8003398:	e002      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	617b      	str	r3, [r7, #20]
      break;
 800339e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	3301      	adds	r3, #1
 80033ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	fb03 f202 	mul.w	r2, r3, r2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	0e5b      	lsrs	r3, r3, #25
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	3301      	adds	r3, #1
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e0:	69bb      	ldr	r3, [r7, #24]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	080054f4 	.word	0x080054f4
 80033f8:	00f42400 	.word	0x00f42400
 80033fc:	007a1200 	.word	0x007a1200

08003400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <HAL_RCC_GetHCLKFreq+0x14>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	20000000 	.word	0x20000000

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800341c:	f7ff fff0 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000
 8003440:	080054ec 	.word	0x080054ec

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003448:	f7ff ffda 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0adb      	lsrs	r3, r3, #11
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4904      	ldr	r1, [pc, #16]	; (800346c <HAL_RCC_GetPCLK2Freq+0x28>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000
 800346c:	080054ec 	.word	0x080054ec

08003470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003488:	f7ff f9b6 	bl	80027f8 <HAL_PWREx_GetVoltageRange>
 800348c:	6178      	str	r0, [r7, #20]
 800348e:	e014      	b.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b25      	ldr	r3, [pc, #148]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349a:	6593      	str	r3, [r2, #88]	; 0x58
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034a8:	f7ff f9a6 	bl	80027f8 <HAL_PWREx_GetVoltageRange>
 80034ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c0:	d10b      	bne.n	80034da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d919      	bls.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2ba0      	cmp	r3, #160	; 0xa0
 80034cc:	d902      	bls.n	80034d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ce:	2302      	movs	r3, #2
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e013      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e010      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d902      	bls.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e0:	2303      	movs	r3, #3
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	e00a      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d102      	bne.n	80034f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ec:	2302      	movs	r3, #2
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	e004      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b70      	cmp	r3, #112	; 0x70
 80034f6:	d101      	bne.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f023 0207 	bic.w	r2, r3, #7
 8003504:	4909      	ldr	r1, [pc, #36]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	429a      	cmp	r2, r3
 8003518:	d001      	beq.n	800351e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	40022000 	.word	0x40022000

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003538:	2300      	movs	r3, #0
 800353a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800353c:	2300      	movs	r3, #0
 800353e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d031      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003554:	d01a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003556:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800355a:	d814      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d009      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003564:	d10f      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003566:	4b5d      	ldr	r3, [pc, #372]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a5c      	ldr	r2, [pc, #368]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003572:	e00c      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f9de 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	74fb      	strb	r3, [r7, #19]
      break;
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800358c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003594:	4b51      	ldr	r3, [pc, #324]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	494e      	ldr	r1, [pc, #312]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035aa:	e001      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 809e 	beq.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035c2:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b40      	ldr	r3, [pc, #256]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a3f      	ldr	r2, [pc, #252]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
 80035e4:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a39      	ldr	r2, [pc, #228]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003600:	f7fd fbb4 	bl	8000d6c <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003606:	e009      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd fbb0 	bl	8000d6c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d902      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	74fb      	strb	r3, [r7, #19]
        break;
 800361a:	e005      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d15a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800362e:	4b2b      	ldr	r3, [pc, #172]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d019      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003676:	4a19      	ldr	r2, [pc, #100]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fb70 	bl	8000d6c <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800368e:	e00b      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003690:	f7fd fb6c 	bl	8000d6c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f241 3288 	movw	r2, #5000	; 0x1388
 800369e:	4293      	cmp	r3, r2
 80036a0:	d902      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	74fb      	strb	r3, [r7, #19]
            break;
 80036a6:	e006      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ec      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	4904      	ldr	r1, [pc, #16]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036d2:	e009      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036d4:	7cfb      	ldrb	r3, [r7, #19]
 80036d6:	74bb      	strb	r3, [r7, #18]
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036e8:	7c7b      	ldrb	r3, [r7, #17]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	4a89      	ldr	r2, [pc, #548]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003706:	4b84      	ldr	r3, [pc, #528]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	f023 0203 	bic.w	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4980      	ldr	r1, [pc, #512]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003728:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 020c 	bic.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	4978      	ldr	r1, [pc, #480]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	496f      	ldr	r1, [pc, #444]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376c:	4b6a      	ldr	r3, [pc, #424]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4967      	ldr	r1, [pc, #412]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800378e:	4b62      	ldr	r3, [pc, #392]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	495e      	ldr	r1, [pc, #376]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	4956      	ldr	r1, [pc, #344]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	494d      	ldr	r1, [pc, #308]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d028      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4945      	ldr	r1, [pc, #276]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003812:	d106      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
 8003820:	e011      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382a:	d10c      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f882 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d028      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003852:	4b31      	ldr	r3, [pc, #196]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	492d      	ldr	r1, [pc, #180]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003870:	d106      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a28      	ldr	r2, [pc, #160]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800387c:	60d3      	str	r3, [r2, #12]
 800387e:	e011      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f000 f853 	bl	800393c <RCCEx_PLLSAI1_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389a:	7cfb      	ldrb	r3, [r7, #19]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80038a0:	7cfb      	ldrb	r3, [r7, #19]
 80038a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038be:	4916      	ldr	r1, [pc, #88]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ce:	d10c      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f830 	bl	800393c <RCCEx_PLLSAI1_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800390c:	7cbb      	ldrb	r3, [r7, #18]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	6013      	str	r3, [r2, #0]
}
 800392c:	bf00      	nop
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000

0800393c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394a:	4b74      	ldr	r3, [pc, #464]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d018      	beq.n	8003988 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003956:	4b71      	ldr	r3, [pc, #452]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0203 	and.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d10d      	bne.n	8003982 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
       ||
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800396e:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
       ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d047      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e044      	b.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b03      	cmp	r3, #3
 800398e:	d018      	beq.n	80039c2 <RCCEx_PLLSAI1_Config+0x86>
 8003990:	2b03      	cmp	r3, #3
 8003992:	d825      	bhi.n	80039e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003994:	2b01      	cmp	r3, #1
 8003996:	d002      	beq.n	800399e <RCCEx_PLLSAI1_Config+0x62>
 8003998:	2b02      	cmp	r3, #2
 800399a:	d009      	beq.n	80039b0 <RCCEx_PLLSAI1_Config+0x74>
 800399c:	e020      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800399e:	4b5f      	ldr	r3, [pc, #380]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d11d      	bne.n	80039e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ae:	e01a      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b0:	4b5a      	ldr	r3, [pc, #360]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d116      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c0:	e013      	b.n	80039ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c2:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039de:	e006      	b.n	80039ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
      break;
 80039e4:	e004      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6819      	ldr	r1, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	4943      	ldr	r1, [pc, #268]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d17c      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a18:	4b40      	ldr	r3, [pc, #256]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a3f      	ldr	r2, [pc, #252]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd f9a2 	bl	8000d6c <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2a:	e009      	b.n	8003a40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a2c:	f7fd f99e 	bl	8000d6c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d902      	bls.n	8003a40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a3e:	e005      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a40:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ef      	bne.n	8003a2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d15f      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d110      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6892      	ldr	r2, [r2, #8]
 8003a68:	0211      	lsls	r1, r2, #8
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	06d2      	lsls	r2, r2, #27
 8003a70:	430a      	orrs	r2, r1
 8003a72:	492a      	ldr	r1, [pc, #168]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	610b      	str	r3, [r1, #16]
 8003a78:	e027      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d112      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a80:	4b26      	ldr	r3, [pc, #152]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	0211      	lsls	r1, r2, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6912      	ldr	r2, [r2, #16]
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0552      	lsls	r2, r2, #21
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	491f      	ldr	r1, [pc, #124]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
 8003aa4:	e011      	b.n	8003aca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003aae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	0211      	lsls	r1, r2, #8
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6952      	ldr	r2, [r2, #20]
 8003abc:	0852      	lsrs	r2, r2, #1
 8003abe:	3a01      	subs	r2, #1
 8003ac0:	0652      	lsls	r2, r2, #25
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	4915      	ldr	r1, [pc, #84]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aca:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a13      	ldr	r2, [pc, #76]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7fd f949 	bl	8000d6c <HAL_GetTick>
 8003ada:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003adc:	e009      	b.n	8003af2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ade:	f7fd f945 	bl	8000d6c <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d902      	bls.n	8003af2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	73fb      	strb	r3, [r7, #15]
          break;
 8003af0:	e005      	b.n	8003afe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4903      	ldr	r1, [pc, #12]	; (8003b1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000

08003b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e040      	b.n	8003bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fc ff30 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2224      	movs	r2, #36	; 0x24
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0201 	bic.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f992 	bl	8003e88 <UART_SetConfig>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e022      	b.n	8003bb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fbb2 	bl	80042e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 fc39 	bl	8004424 <UART_CheckIdleState>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	f040 8082 	bne.w	8003cda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_UART_Transmit+0x26>
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07a      	b.n	8003cdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_UART_Transmit+0x38>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e073      	b.n	8003cdc <HAL_UART_Transmit+0x120>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2221      	movs	r2, #33	; 0x21
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd f8af 	bl	8000d6c <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	88fa      	ldrh	r2, [r7, #6]
 8003c14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d108      	bne.n	8003c3c <HAL_UART_Transmit+0x80>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	e003      	b.n	8003c44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c4c:	e02d      	b.n	8003caa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fc2c 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e039      	b.n	8003cdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3302      	adds	r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e008      	b.n	8003c98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1cb      	bne.n	8003c4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fbf8 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e005      	b.n	8003cdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	f040 80bf 	bne.w	8003e7c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Receive+0x26>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0b7      	b.n	8003e7e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Receive+0x38>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e0b0      	b.n	8003e7e <HAL_UART_Receive+0x19a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2222      	movs	r2, #34	; 0x22
 8003d30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d38:	f7fd f818 	bl	8000d6c <HAL_GetTick>
 8003d3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d10e      	bne.n	8003d76 <HAL_UART_Receive+0x92>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_UART_Receive+0x88>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d6a:	e02d      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	22ff      	movs	r2, #255	; 0xff
 8003d70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d74:	e028      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10d      	bne.n	8003d9a <HAL_UART_Receive+0xb6>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <HAL_UART_Receive+0xac>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	22ff      	movs	r2, #255	; 0xff
 8003d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d8e:	e01b      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	227f      	movs	r2, #127	; 0x7f
 8003d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d98:	e016      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da2:	d10d      	bne.n	8003dc0 <HAL_UART_Receive+0xdc>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <HAL_UART_Receive+0xd2>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	227f      	movs	r2, #127	; 0x7f
 8003db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003db4:	e008      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	223f      	movs	r2, #63	; 0x3f
 8003dba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dbe:	e003      	b.n	8003dc8 <HAL_UART_Receive+0xe4>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d108      	bne.n	8003dec <HAL_UART_Receive+0x108>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e003      	b.n	8003df4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003dfc:	e033      	b.n	8003e66 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2120      	movs	r1, #32
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fb54 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e032      	b.n	8003e7e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	8a7b      	ldrh	r3, [r7, #18]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	3302      	adds	r3, #2
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	e00d      	b.n	8003e54 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	8a7b      	ldrh	r3, [r7, #18]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4013      	ands	r3, r2
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	3301      	adds	r3, #1
 8003e52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1c5      	bne.n	8003dfe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b08a      	sub	sp, #40	; 0x28
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4bb4      	ldr	r3, [pc, #720]	; (8004188 <UART_SetConfig+0x300>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4aa9      	ldr	r2, [pc, #676]	; (800418c <UART_SetConfig+0x304>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4aa0      	ldr	r2, [pc, #640]	; (8004190 <UART_SetConfig+0x308>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d126      	bne.n	8003f60 <UART_SetConfig+0xd8>
 8003f12:	4ba0      	ldr	r3, [pc, #640]	; (8004194 <UART_SetConfig+0x30c>)
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d81b      	bhi.n	8003f58 <UART_SetConfig+0xd0>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <UART_SetConfig+0xa0>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f49 	.word	0x08003f49
 8003f30:	08003f41 	.word	0x08003f41
 8003f34:	08003f51 	.word	0x08003f51
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3e:	e080      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003f40:	2302      	movs	r3, #2
 8003f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f46:	e07c      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003f48:	2304      	movs	r3, #4
 8003f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f4e:	e078      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003f50:	2308      	movs	r3, #8
 8003f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f56:	e074      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f5e:	e070      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a8c      	ldr	r2, [pc, #560]	; (8004198 <UART_SetConfig+0x310>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d138      	bne.n	8003fdc <UART_SetConfig+0x154>
 8003f6a:	4b8a      	ldr	r3, [pc, #552]	; (8004194 <UART_SetConfig+0x30c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d82d      	bhi.n	8003fd4 <UART_SetConfig+0x14c>
 8003f78:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0xf8>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08003fb5 	.word	0x08003fb5
 8003f84:	08003fd5 	.word	0x08003fd5
 8003f88:	08003fd5 	.word	0x08003fd5
 8003f8c:	08003fd5 	.word	0x08003fd5
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fd5 	.word	0x08003fd5
 8003f9c:	08003fd5 	.word	0x08003fd5
 8003fa0:	08003fbd 	.word	0x08003fbd
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08003fd5 	.word	0x08003fd5
 8003fac:	08003fd5 	.word	0x08003fd5
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fba:	e042      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fc2:	e03e      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e03a      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003fcc:	2308      	movs	r3, #8
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e036      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e032      	b.n	8004042 <UART_SetConfig+0x1ba>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6a      	ldr	r2, [pc, #424]	; (800418c <UART_SetConfig+0x304>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12a      	bne.n	800403c <UART_SetConfig+0x1b4>
 8003fe6:	4b6b      	ldr	r3, [pc, #428]	; (8004194 <UART_SetConfig+0x30c>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff4:	d01a      	beq.n	800402c <UART_SetConfig+0x1a4>
 8003ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffa:	d81b      	bhi.n	8004034 <UART_SetConfig+0x1ac>
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004000:	d00c      	beq.n	800401c <UART_SetConfig+0x194>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d815      	bhi.n	8004034 <UART_SetConfig+0x1ac>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x18c>
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d008      	beq.n	8004024 <UART_SetConfig+0x19c>
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x1ac>
 8004014:	2300      	movs	r3, #0
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800401a:	e012      	b.n	8004042 <UART_SetConfig+0x1ba>
 800401c:	2302      	movs	r3, #2
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004022:	e00e      	b.n	8004042 <UART_SetConfig+0x1ba>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402a:	e00a      	b.n	8004042 <UART_SetConfig+0x1ba>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004032:	e006      	b.n	8004042 <UART_SetConfig+0x1ba>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403a:	e002      	b.n	8004042 <UART_SetConfig+0x1ba>
 800403c:	2310      	movs	r3, #16
 800403e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a51      	ldr	r2, [pc, #324]	; (800418c <UART_SetConfig+0x304>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d17a      	bne.n	8004142 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800404c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004050:	2b08      	cmp	r3, #8
 8004052:	d824      	bhi.n	800409e <UART_SetConfig+0x216>
 8004054:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0x1d4>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004081 	.word	0x08004081
 8004060:	0800409f 	.word	0x0800409f
 8004064:	08004089 	.word	0x08004089
 8004068:	0800409f 	.word	0x0800409f
 800406c:	0800408f 	.word	0x0800408f
 8004070:	0800409f 	.word	0x0800409f
 8004074:	0800409f 	.word	0x0800409f
 8004078:	0800409f 	.word	0x0800409f
 800407c:	08004097 	.word	0x08004097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7ff f9ca 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004084:	61f8      	str	r0, [r7, #28]
        break;
 8004086:	e010      	b.n	80040aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <UART_SetConfig+0x314>)
 800408a:	61fb      	str	r3, [r7, #28]
        break;
 800408c:	e00d      	b.n	80040aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408e:	f7ff f92b 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8004092:	61f8      	str	r0, [r7, #28]
        break;
 8004094:	e009      	b.n	80040aa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409a:	61fb      	str	r3, [r7, #28]
        break;
 800409c:	e005      	b.n	80040aa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8107 	beq.w	80042c0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d305      	bcc.n	80040ce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d903      	bls.n	80040d6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040d4:	e0f4      	b.n	80042c0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	2200      	movs	r2, #0
 80040da:	461c      	mov	r4, r3
 80040dc:	4615      	mov	r5, r2
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	022b      	lsls	r3, r5, #8
 80040e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040ec:	0222      	lsls	r2, r4, #8
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	6849      	ldr	r1, [r1, #4]
 80040f2:	0849      	lsrs	r1, r1, #1
 80040f4:	2000      	movs	r0, #0
 80040f6:	4688      	mov	r8, r1
 80040f8:	4681      	mov	r9, r0
 80040fa:	eb12 0a08 	adds.w	sl, r2, r8
 80040fe:	eb43 0b09 	adc.w	fp, r3, r9
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	607a      	str	r2, [r7, #4]
 800410c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004110:	4650      	mov	r0, sl
 8004112:	4659      	mov	r1, fp
 8004114:	f7fc f8ac 	bl	8000270 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004126:	d308      	bcc.n	800413a <UART_SetConfig+0x2b2>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412e:	d204      	bcs.n	800413a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e0c2      	b.n	80042c0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004140:	e0be      	b.n	80042c0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414a:	d16a      	bne.n	8004222 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800414c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004150:	2b08      	cmp	r3, #8
 8004152:	d834      	bhi.n	80041be <UART_SetConfig+0x336>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x2d4>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004181 	.word	0x08004181
 8004160:	080041a1 	.word	0x080041a1
 8004164:	080041a9 	.word	0x080041a9
 8004168:	080041bf 	.word	0x080041bf
 800416c:	080041af 	.word	0x080041af
 8004170:	080041bf 	.word	0x080041bf
 8004174:	080041bf 	.word	0x080041bf
 8004178:	080041bf 	.word	0x080041bf
 800417c:	080041b7 	.word	0x080041b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7ff f94a 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004184:	61f8      	str	r0, [r7, #28]
        break;
 8004186:	e020      	b.n	80041ca <UART_SetConfig+0x342>
 8004188:	efff69f3 	.word	0xefff69f3
 800418c:	40008000 	.word	0x40008000
 8004190:	40013800 	.word	0x40013800
 8004194:	40021000 	.word	0x40021000
 8004198:	40004400 	.word	0x40004400
 800419c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7ff f950 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 80041a4:	61f8      	str	r0, [r7, #28]
        break;
 80041a6:	e010      	b.n	80041ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a8:	4b4c      	ldr	r3, [pc, #304]	; (80042dc <UART_SetConfig+0x454>)
 80041aa:	61fb      	str	r3, [r7, #28]
        break;
 80041ac:	e00d      	b.n	80041ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	f7ff f89b 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80041b2:	61f8      	str	r0, [r7, #28]
        break;
 80041b4:	e009      	b.n	80041ca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	61fb      	str	r3, [r7, #28]
        break;
 80041bc:	e005      	b.n	80041ca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80041c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d077      	beq.n	80042c0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	005a      	lsls	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	441a      	add	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d916      	bls.n	800421a <UART_SetConfig+0x392>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f2:	d212      	bcs.n	800421a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f023 030f 	bic.w	r3, r3, #15
 80041fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	b29a      	uxth	r2, r3
 800420a:	8afb      	ldrh	r3, [r7, #22]
 800420c:	4313      	orrs	r3, r2
 800420e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	8afa      	ldrh	r2, [r7, #22]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	e052      	b.n	80042c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004220:	e04e      	b.n	80042c0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004226:	2b08      	cmp	r3, #8
 8004228:	d827      	bhi.n	800427a <UART_SetConfig+0x3f2>
 800422a:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <UART_SetConfig+0x3a8>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004255 	.word	0x08004255
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800427b 	.word	0x0800427b
 8004240:	0800426b 	.word	0x0800426b
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800427b 	.word	0x0800427b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7ff f8e0 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8004258:	61f8      	str	r0, [r7, #28]
        break;
 800425a:	e014      	b.n	8004286 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7ff f8f2 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <UART_SetConfig+0x454>)
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7ff f83d 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800426e:	61f8      	str	r0, [r7, #28]
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61fb      	str	r3, [r7, #28]
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004284:	bf00      	nop
    }

    if (pclk != 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d019      	beq.n	80042c0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	085a      	lsrs	r2, r3, #1
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	441a      	add	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b0f      	cmp	r3, #15
 80042a4:	d909      	bls.n	80042ba <UART_SetConfig+0x432>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d205      	bcs.n	80042ba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e002      	b.n	80042c0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042da:	bf00      	nop
 80042dc:	00f42400 	.word	0x00f42400

080042e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00a      	beq.n	8004392 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01a      	beq.n	80043f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043de:	d10a      	bne.n	80043f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	605a      	str	r2, [r3, #4]
  }
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af02      	add	r7, sp, #8
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004434:	f7fc fc9a 	bl	8000d6c <HAL_GetTick>
 8004438:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b08      	cmp	r3, #8
 8004446:	d10e      	bne.n	8004466 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f82d 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e023      	b.n	80044ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d10e      	bne.n	8004492 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f817 	bl	80044b6 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e00d      	b.n	80044ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b09c      	sub	sp, #112	; 0x70
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	4613      	mov	r3, r2
 80044c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c6:	e0a5      	b.n	8004614 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	f000 80a1 	beq.w	8004614 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fc fc4b 	bl	8000d6c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80044e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d13e      	bne.n	8004566 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044fc:	667b      	str	r3, [r7, #100]	; 0x64
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004508:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800450c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e6      	bne.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	663b      	str	r3, [r7, #96]	; 0x60
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800453a:	64ba      	str	r2, [r7, #72]	; 0x48
 800453c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004540:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e067      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d04f      	beq.n	8004614 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004582:	d147      	bne.n	8004614 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800458c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
 80045ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e6      	bne.n	800458e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	613b      	str	r3, [r7, #16]
   return(result);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045e0:	623a      	str	r2, [r7, #32]
 80045e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	69f9      	ldr	r1, [r7, #28]
 80045e6:	6a3a      	ldr	r2, [r7, #32]
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e010      	b.n	8004636 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4013      	ands	r3, r2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	429a      	cmp	r2, r3
 8004630:	f43f af4a 	beq.w	80044c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3770      	adds	r7, #112	; 0x70
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <std>:
 8004640:	2300      	movs	r3, #0
 8004642:	b510      	push	{r4, lr}
 8004644:	4604      	mov	r4, r0
 8004646:	e9c0 3300 	strd	r3, r3, [r0]
 800464a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464e:	6083      	str	r3, [r0, #8]
 8004650:	8181      	strh	r1, [r0, #12]
 8004652:	6643      	str	r3, [r0, #100]	; 0x64
 8004654:	81c2      	strh	r2, [r0, #14]
 8004656:	6183      	str	r3, [r0, #24]
 8004658:	4619      	mov	r1, r3
 800465a:	2208      	movs	r2, #8
 800465c:	305c      	adds	r0, #92	; 0x5c
 800465e:	f000 f906 	bl	800486e <memset>
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <std+0x58>)
 8004664:	6263      	str	r3, [r4, #36]	; 0x24
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <std+0x5c>)
 8004668:	62a3      	str	r3, [r4, #40]	; 0x28
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <std+0x60>)
 800466c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <std+0x64>)
 8004670:	6323      	str	r3, [r4, #48]	; 0x30
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <std+0x68>)
 8004674:	6224      	str	r4, [r4, #32]
 8004676:	429c      	cmp	r4, r3
 8004678:	d006      	beq.n	8004688 <std+0x48>
 800467a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800467e:	4294      	cmp	r4, r2
 8004680:	d002      	beq.n	8004688 <std+0x48>
 8004682:	33d0      	adds	r3, #208	; 0xd0
 8004684:	429c      	cmp	r4, r3
 8004686:	d105      	bne.n	8004694 <std+0x54>
 8004688:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	f000 b966 	b.w	8004960 <__retarget_lock_init_recursive>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	bf00      	nop
 8004698:	080047e9 	.word	0x080047e9
 800469c:	0800480b 	.word	0x0800480b
 80046a0:	08004843 	.word	0x08004843
 80046a4:	08004867 	.word	0x08004867
 80046a8:	2000017c 	.word	0x2000017c

080046ac <stdio_exit_handler>:
 80046ac:	4a02      	ldr	r2, [pc, #8]	; (80046b8 <stdio_exit_handler+0xc>)
 80046ae:	4903      	ldr	r1, [pc, #12]	; (80046bc <stdio_exit_handler+0x10>)
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <stdio_exit_handler+0x14>)
 80046b2:	f000 b869 	b.w	8004788 <_fwalk_sglue>
 80046b6:	bf00      	nop
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	0800520d 	.word	0x0800520d
 80046c0:	20000018 	.word	0x20000018

080046c4 <cleanup_stdio>:
 80046c4:	6841      	ldr	r1, [r0, #4]
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <cleanup_stdio+0x34>)
 80046c8:	4299      	cmp	r1, r3
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
 80046ce:	d001      	beq.n	80046d4 <cleanup_stdio+0x10>
 80046d0:	f000 fd9c 	bl	800520c <_fflush_r>
 80046d4:	68a1      	ldr	r1, [r4, #8]
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <cleanup_stdio+0x38>)
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <cleanup_stdio+0x1e>
 80046dc:	4620      	mov	r0, r4
 80046de:	f000 fd95 	bl	800520c <_fflush_r>
 80046e2:	68e1      	ldr	r1, [r4, #12]
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <cleanup_stdio+0x3c>)
 80046e6:	4299      	cmp	r1, r3
 80046e8:	d004      	beq.n	80046f4 <cleanup_stdio+0x30>
 80046ea:	4620      	mov	r0, r4
 80046ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f0:	f000 bd8c 	b.w	800520c <_fflush_r>
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	bf00      	nop
 80046f8:	2000017c 	.word	0x2000017c
 80046fc:	200001e4 	.word	0x200001e4
 8004700:	2000024c 	.word	0x2000024c

08004704 <global_stdio_init.part.0>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <global_stdio_init.part.0+0x30>)
 8004708:	4c0b      	ldr	r4, [pc, #44]	; (8004738 <global_stdio_init.part.0+0x34>)
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <global_stdio_init.part.0+0x38>)
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	2200      	movs	r2, #0
 8004712:	2104      	movs	r1, #4
 8004714:	f7ff ff94 	bl	8004640 <std>
 8004718:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800471c:	2201      	movs	r2, #1
 800471e:	2109      	movs	r1, #9
 8004720:	f7ff ff8e 	bl	8004640 <std>
 8004724:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004728:	2202      	movs	r2, #2
 800472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472e:	2112      	movs	r1, #18
 8004730:	f7ff bf86 	b.w	8004640 <std>
 8004734:	200002b4 	.word	0x200002b4
 8004738:	2000017c 	.word	0x2000017c
 800473c:	080046ad 	.word	0x080046ad

08004740 <__sfp_lock_acquire>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__sfp_lock_acquire+0x8>)
 8004742:	f000 b90e 	b.w	8004962 <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	200002bd 	.word	0x200002bd

0800474c <__sfp_lock_release>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__sfp_lock_release+0x8>)
 800474e:	f000 b909 	b.w	8004964 <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	200002bd 	.word	0x200002bd

08004758 <__sinit>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	f7ff fff0 	bl	8004740 <__sfp_lock_acquire>
 8004760:	6a23      	ldr	r3, [r4, #32]
 8004762:	b11b      	cbz	r3, 800476c <__sinit+0x14>
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	f7ff bff0 	b.w	800474c <__sfp_lock_release>
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <__sinit+0x28>)
 800476e:	6223      	str	r3, [r4, #32]
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <__sinit+0x2c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f5      	bne.n	8004764 <__sinit+0xc>
 8004778:	f7ff ffc4 	bl	8004704 <global_stdio_init.part.0>
 800477c:	e7f2      	b.n	8004764 <__sinit+0xc>
 800477e:	bf00      	nop
 8004780:	080046c5 	.word	0x080046c5
 8004784:	200002b4 	.word	0x200002b4

08004788 <_fwalk_sglue>:
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	4607      	mov	r7, r0
 800478e:	4688      	mov	r8, r1
 8004790:	4614      	mov	r4, r2
 8004792:	2600      	movs	r6, #0
 8004794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004798:	f1b9 0901 	subs.w	r9, r9, #1
 800479c:	d505      	bpl.n	80047aa <_fwalk_sglue+0x22>
 800479e:	6824      	ldr	r4, [r4, #0]
 80047a0:	2c00      	cmp	r4, #0
 80047a2:	d1f7      	bne.n	8004794 <_fwalk_sglue+0xc>
 80047a4:	4630      	mov	r0, r6
 80047a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d907      	bls.n	80047c0 <_fwalk_sglue+0x38>
 80047b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b4:	3301      	adds	r3, #1
 80047b6:	d003      	beq.n	80047c0 <_fwalk_sglue+0x38>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	4306      	orrs	r6, r0
 80047c0:	3568      	adds	r5, #104	; 0x68
 80047c2:	e7e9      	b.n	8004798 <_fwalk_sglue+0x10>

080047c4 <iprintf>:
 80047c4:	b40f      	push	{r0, r1, r2, r3}
 80047c6:	b507      	push	{r0, r1, r2, lr}
 80047c8:	4906      	ldr	r1, [pc, #24]	; (80047e4 <iprintf+0x20>)
 80047ca:	ab04      	add	r3, sp, #16
 80047cc:	6808      	ldr	r0, [r1, #0]
 80047ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d2:	6881      	ldr	r1, [r0, #8]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	f000 f9e9 	bl	8004bac <_vfiprintf_r>
 80047da:	b003      	add	sp, #12
 80047dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80047e0:	b004      	add	sp, #16
 80047e2:	4770      	bx	lr
 80047e4:	20000064 	.word	0x20000064

080047e8 <__sread>:
 80047e8:	b510      	push	{r4, lr}
 80047ea:	460c      	mov	r4, r1
 80047ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047f0:	f000 f868 	bl	80048c4 <_read_r>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	bfab      	itete	ge
 80047f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047fa:	89a3      	ldrhlt	r3, [r4, #12]
 80047fc:	181b      	addge	r3, r3, r0
 80047fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004802:	bfac      	ite	ge
 8004804:	6563      	strge	r3, [r4, #84]	; 0x54
 8004806:	81a3      	strhlt	r3, [r4, #12]
 8004808:	bd10      	pop	{r4, pc}

0800480a <__swrite>:
 800480a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480e:	461f      	mov	r7, r3
 8004810:	898b      	ldrh	r3, [r1, #12]
 8004812:	05db      	lsls	r3, r3, #23
 8004814:	4605      	mov	r5, r0
 8004816:	460c      	mov	r4, r1
 8004818:	4616      	mov	r6, r2
 800481a:	d505      	bpl.n	8004828 <__swrite+0x1e>
 800481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004820:	2302      	movs	r3, #2
 8004822:	2200      	movs	r2, #0
 8004824:	f000 f83c 	bl	80048a0 <_lseek_r>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	4632      	mov	r2, r6
 8004836:	463b      	mov	r3, r7
 8004838:	4628      	mov	r0, r5
 800483a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483e:	f000 b853 	b.w	80048e8 <_write_r>

08004842 <__sseek>:
 8004842:	b510      	push	{r4, lr}
 8004844:	460c      	mov	r4, r1
 8004846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484a:	f000 f829 	bl	80048a0 <_lseek_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	bf15      	itete	ne
 8004854:	6560      	strne	r0, [r4, #84]	; 0x54
 8004856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800485a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800485e:	81a3      	strheq	r3, [r4, #12]
 8004860:	bf18      	it	ne
 8004862:	81a3      	strhne	r3, [r4, #12]
 8004864:	bd10      	pop	{r4, pc}

08004866 <__sclose>:
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 b809 	b.w	8004880 <_close_r>

0800486e <memset>:
 800486e:	4402      	add	r2, r0
 8004870:	4603      	mov	r3, r0
 8004872:	4293      	cmp	r3, r2
 8004874:	d100      	bne.n	8004878 <memset+0xa>
 8004876:	4770      	bx	lr
 8004878:	f803 1b01 	strb.w	r1, [r3], #1
 800487c:	e7f9      	b.n	8004872 <memset+0x4>
	...

08004880 <_close_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d06      	ldr	r5, [pc, #24]	; (800489c <_close_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	f7fc f960 	bl	8000b50 <_close>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_close_r+0x1a>
 8004894:	682b      	ldr	r3, [r5, #0]
 8004896:	b103      	cbz	r3, 800489a <_close_r+0x1a>
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	200002b8 	.word	0x200002b8

080048a0 <_lseek_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d07      	ldr	r5, [pc, #28]	; (80048c0 <_lseek_r+0x20>)
 80048a4:	4604      	mov	r4, r0
 80048a6:	4608      	mov	r0, r1
 80048a8:	4611      	mov	r1, r2
 80048aa:	2200      	movs	r2, #0
 80048ac:	602a      	str	r2, [r5, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f7fc f975 	bl	8000b9e <_lseek>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_lseek_r+0x1e>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_lseek_r+0x1e>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	200002b8 	.word	0x200002b8

080048c4 <_read_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d07      	ldr	r5, [pc, #28]	; (80048e4 <_read_r+0x20>)
 80048c8:	4604      	mov	r4, r0
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7fc f8fc 	bl	8000ad0 <_read>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_read_r+0x1e>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_read_r+0x1e>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	200002b8 	.word	0x200002b8

080048e8 <_write_r>:
 80048e8:	b538      	push	{r3, r4, r5, lr}
 80048ea:	4d07      	ldr	r5, [pc, #28]	; (8004908 <_write_r+0x20>)
 80048ec:	4604      	mov	r4, r0
 80048ee:	4608      	mov	r0, r1
 80048f0:	4611      	mov	r1, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	602a      	str	r2, [r5, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f7fc f908 	bl	8000b0c <_write>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	d102      	bne.n	8004906 <_write_r+0x1e>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	b103      	cbz	r3, 8004906 <_write_r+0x1e>
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	200002b8 	.word	0x200002b8

0800490c <__errno>:
 800490c:	4b01      	ldr	r3, [pc, #4]	; (8004914 <__errno+0x8>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000064 	.word	0x20000064

08004918 <__libc_init_array>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4d0d      	ldr	r5, [pc, #52]	; (8004950 <__libc_init_array+0x38>)
 800491c:	4c0d      	ldr	r4, [pc, #52]	; (8004954 <__libc_init_array+0x3c>)
 800491e:	1b64      	subs	r4, r4, r5
 8004920:	10a4      	asrs	r4, r4, #2
 8004922:	2600      	movs	r6, #0
 8004924:	42a6      	cmp	r6, r4
 8004926:	d109      	bne.n	800493c <__libc_init_array+0x24>
 8004928:	4d0b      	ldr	r5, [pc, #44]	; (8004958 <__libc_init_array+0x40>)
 800492a:	4c0c      	ldr	r4, [pc, #48]	; (800495c <__libc_init_array+0x44>)
 800492c:	f000 fdc0 	bl	80054b0 <_init>
 8004930:	1b64      	subs	r4, r4, r5
 8004932:	10a4      	asrs	r4, r4, #2
 8004934:	2600      	movs	r6, #0
 8004936:	42a6      	cmp	r6, r4
 8004938:	d105      	bne.n	8004946 <__libc_init_array+0x2e>
 800493a:	bd70      	pop	{r4, r5, r6, pc}
 800493c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004940:	4798      	blx	r3
 8004942:	3601      	adds	r6, #1
 8004944:	e7ee      	b.n	8004924 <__libc_init_array+0xc>
 8004946:	f855 3b04 	ldr.w	r3, [r5], #4
 800494a:	4798      	blx	r3
 800494c:	3601      	adds	r6, #1
 800494e:	e7f2      	b.n	8004936 <__libc_init_array+0x1e>
 8004950:	08005560 	.word	0x08005560
 8004954:	08005560 	.word	0x08005560
 8004958:	08005560 	.word	0x08005560
 800495c:	08005564 	.word	0x08005564

08004960 <__retarget_lock_init_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_acquire_recursive>:
 8004962:	4770      	bx	lr

08004964 <__retarget_lock_release_recursive>:
 8004964:	4770      	bx	lr
	...

08004968 <_free_r>:
 8004968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800496a:	2900      	cmp	r1, #0
 800496c:	d044      	beq.n	80049f8 <_free_r+0x90>
 800496e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004972:	9001      	str	r0, [sp, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f1a1 0404 	sub.w	r4, r1, #4
 800497a:	bfb8      	it	lt
 800497c:	18e4      	addlt	r4, r4, r3
 800497e:	f000 f8df 	bl	8004b40 <__malloc_lock>
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <_free_r+0x94>)
 8004984:	9801      	ldr	r0, [sp, #4]
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	b933      	cbnz	r3, 8004998 <_free_r+0x30>
 800498a:	6063      	str	r3, [r4, #4]
 800498c:	6014      	str	r4, [r2, #0]
 800498e:	b003      	add	sp, #12
 8004990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004994:	f000 b8da 	b.w	8004b4c <__malloc_unlock>
 8004998:	42a3      	cmp	r3, r4
 800499a:	d908      	bls.n	80049ae <_free_r+0x46>
 800499c:	6825      	ldr	r5, [r4, #0]
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf01      	itttt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	1949      	addeq	r1, r1, r5
 80049aa:	6021      	streq	r1, [r4, #0]
 80049ac:	e7ed      	b.n	800498a <_free_r+0x22>
 80049ae:	461a      	mov	r2, r3
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b10b      	cbz	r3, 80049b8 <_free_r+0x50>
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d9fa      	bls.n	80049ae <_free_r+0x46>
 80049b8:	6811      	ldr	r1, [r2, #0]
 80049ba:	1855      	adds	r5, r2, r1
 80049bc:	42a5      	cmp	r5, r4
 80049be:	d10b      	bne.n	80049d8 <_free_r+0x70>
 80049c0:	6824      	ldr	r4, [r4, #0]
 80049c2:	4421      	add	r1, r4
 80049c4:	1854      	adds	r4, r2, r1
 80049c6:	42a3      	cmp	r3, r4
 80049c8:	6011      	str	r1, [r2, #0]
 80049ca:	d1e0      	bne.n	800498e <_free_r+0x26>
 80049cc:	681c      	ldr	r4, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	6053      	str	r3, [r2, #4]
 80049d2:	440c      	add	r4, r1
 80049d4:	6014      	str	r4, [r2, #0]
 80049d6:	e7da      	b.n	800498e <_free_r+0x26>
 80049d8:	d902      	bls.n	80049e0 <_free_r+0x78>
 80049da:	230c      	movs	r3, #12
 80049dc:	6003      	str	r3, [r0, #0]
 80049de:	e7d6      	b.n	800498e <_free_r+0x26>
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	1961      	adds	r1, r4, r5
 80049e4:	428b      	cmp	r3, r1
 80049e6:	bf04      	itt	eq
 80049e8:	6819      	ldreq	r1, [r3, #0]
 80049ea:	685b      	ldreq	r3, [r3, #4]
 80049ec:	6063      	str	r3, [r4, #4]
 80049ee:	bf04      	itt	eq
 80049f0:	1949      	addeq	r1, r1, r5
 80049f2:	6021      	streq	r1, [r4, #0]
 80049f4:	6054      	str	r4, [r2, #4]
 80049f6:	e7ca      	b.n	800498e <_free_r+0x26>
 80049f8:	b003      	add	sp, #12
 80049fa:	bd30      	pop	{r4, r5, pc}
 80049fc:	200002c0 	.word	0x200002c0

08004a00 <sbrk_aligned>:
 8004a00:	b570      	push	{r4, r5, r6, lr}
 8004a02:	4e0e      	ldr	r6, [pc, #56]	; (8004a3c <sbrk_aligned+0x3c>)
 8004a04:	460c      	mov	r4, r1
 8004a06:	6831      	ldr	r1, [r6, #0]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	b911      	cbnz	r1, 8004a12 <sbrk_aligned+0x12>
 8004a0c:	f000 fcbc 	bl	8005388 <_sbrk_r>
 8004a10:	6030      	str	r0, [r6, #0]
 8004a12:	4621      	mov	r1, r4
 8004a14:	4628      	mov	r0, r5
 8004a16:	f000 fcb7 	bl	8005388 <_sbrk_r>
 8004a1a:	1c43      	adds	r3, r0, #1
 8004a1c:	d00a      	beq.n	8004a34 <sbrk_aligned+0x34>
 8004a1e:	1cc4      	adds	r4, r0, #3
 8004a20:	f024 0403 	bic.w	r4, r4, #3
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d007      	beq.n	8004a38 <sbrk_aligned+0x38>
 8004a28:	1a21      	subs	r1, r4, r0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fcac 	bl	8005388 <_sbrk_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d101      	bne.n	8004a38 <sbrk_aligned+0x38>
 8004a34:	f04f 34ff 	mov.w	r4, #4294967295
 8004a38:	4620      	mov	r0, r4
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	200002c4 	.word	0x200002c4

08004a40 <_malloc_r>:
 8004a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	1ccd      	adds	r5, r1, #3
 8004a46:	f025 0503 	bic.w	r5, r5, #3
 8004a4a:	3508      	adds	r5, #8
 8004a4c:	2d0c      	cmp	r5, #12
 8004a4e:	bf38      	it	cc
 8004a50:	250c      	movcc	r5, #12
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	4607      	mov	r7, r0
 8004a56:	db01      	blt.n	8004a5c <_malloc_r+0x1c>
 8004a58:	42a9      	cmp	r1, r5
 8004a5a:	d905      	bls.n	8004a68 <_malloc_r+0x28>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	2600      	movs	r6, #0
 8004a62:	4630      	mov	r0, r6
 8004a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b3c <_malloc_r+0xfc>
 8004a6c:	f000 f868 	bl	8004b40 <__malloc_lock>
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	461c      	mov	r4, r3
 8004a76:	bb5c      	cbnz	r4, 8004ad0 <_malloc_r+0x90>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	f7ff ffc0 	bl	8004a00 <sbrk_aligned>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	4604      	mov	r4, r0
 8004a84:	d155      	bne.n	8004b32 <_malloc_r+0xf2>
 8004a86:	f8d8 4000 	ldr.w	r4, [r8]
 8004a8a:	4626      	mov	r6, r4
 8004a8c:	2e00      	cmp	r6, #0
 8004a8e:	d145      	bne.n	8004b1c <_malloc_r+0xdc>
 8004a90:	2c00      	cmp	r4, #0
 8004a92:	d048      	beq.n	8004b26 <_malloc_r+0xe6>
 8004a94:	6823      	ldr	r3, [r4, #0]
 8004a96:	4631      	mov	r1, r6
 8004a98:	4638      	mov	r0, r7
 8004a9a:	eb04 0903 	add.w	r9, r4, r3
 8004a9e:	f000 fc73 	bl	8005388 <_sbrk_r>
 8004aa2:	4581      	cmp	r9, r0
 8004aa4:	d13f      	bne.n	8004b26 <_malloc_r+0xe6>
 8004aa6:	6821      	ldr	r1, [r4, #0]
 8004aa8:	1a6d      	subs	r5, r5, r1
 8004aaa:	4629      	mov	r1, r5
 8004aac:	4638      	mov	r0, r7
 8004aae:	f7ff ffa7 	bl	8004a00 <sbrk_aligned>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d037      	beq.n	8004b26 <_malloc_r+0xe6>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	442b      	add	r3, r5
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d038      	beq.n	8004b36 <_malloc_r+0xf6>
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	42a2      	cmp	r2, r4
 8004ac8:	d12b      	bne.n	8004b22 <_malloc_r+0xe2>
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e00f      	b.n	8004af0 <_malloc_r+0xb0>
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	1b52      	subs	r2, r2, r5
 8004ad4:	d41f      	bmi.n	8004b16 <_malloc_r+0xd6>
 8004ad6:	2a0b      	cmp	r2, #11
 8004ad8:	d917      	bls.n	8004b0a <_malloc_r+0xca>
 8004ada:	1961      	adds	r1, r4, r5
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	6025      	str	r5, [r4, #0]
 8004ae0:	bf18      	it	ne
 8004ae2:	6059      	strne	r1, [r3, #4]
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	bf08      	it	eq
 8004ae8:	f8c8 1000 	streq.w	r1, [r8]
 8004aec:	5162      	str	r2, [r4, r5]
 8004aee:	604b      	str	r3, [r1, #4]
 8004af0:	4638      	mov	r0, r7
 8004af2:	f104 060b 	add.w	r6, r4, #11
 8004af6:	f000 f829 	bl	8004b4c <__malloc_unlock>
 8004afa:	f026 0607 	bic.w	r6, r6, #7
 8004afe:	1d23      	adds	r3, r4, #4
 8004b00:	1af2      	subs	r2, r6, r3
 8004b02:	d0ae      	beq.n	8004a62 <_malloc_r+0x22>
 8004b04:	1b9b      	subs	r3, r3, r6
 8004b06:	50a3      	str	r3, [r4, r2]
 8004b08:	e7ab      	b.n	8004a62 <_malloc_r+0x22>
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	6862      	ldr	r2, [r4, #4]
 8004b0e:	d1dd      	bne.n	8004acc <_malloc_r+0x8c>
 8004b10:	f8c8 2000 	str.w	r2, [r8]
 8004b14:	e7ec      	b.n	8004af0 <_malloc_r+0xb0>
 8004b16:	4623      	mov	r3, r4
 8004b18:	6864      	ldr	r4, [r4, #4]
 8004b1a:	e7ac      	b.n	8004a76 <_malloc_r+0x36>
 8004b1c:	4634      	mov	r4, r6
 8004b1e:	6876      	ldr	r6, [r6, #4]
 8004b20:	e7b4      	b.n	8004a8c <_malloc_r+0x4c>
 8004b22:	4613      	mov	r3, r2
 8004b24:	e7cc      	b.n	8004ac0 <_malloc_r+0x80>
 8004b26:	230c      	movs	r3, #12
 8004b28:	603b      	str	r3, [r7, #0]
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	f000 f80e 	bl	8004b4c <__malloc_unlock>
 8004b30:	e797      	b.n	8004a62 <_malloc_r+0x22>
 8004b32:	6025      	str	r5, [r4, #0]
 8004b34:	e7dc      	b.n	8004af0 <_malloc_r+0xb0>
 8004b36:	605b      	str	r3, [r3, #4]
 8004b38:	deff      	udf	#255	; 0xff
 8004b3a:	bf00      	nop
 8004b3c:	200002c0 	.word	0x200002c0

08004b40 <__malloc_lock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__malloc_lock+0x8>)
 8004b42:	f7ff bf0e 	b.w	8004962 <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	200002bc 	.word	0x200002bc

08004b4c <__malloc_unlock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	; (8004b54 <__malloc_unlock+0x8>)
 8004b4e:	f7ff bf09 	b.w	8004964 <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	200002bc 	.word	0x200002bc

08004b58 <__sfputc_r>:
 8004b58:	6893      	ldr	r3, [r2, #8]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	b410      	push	{r4}
 8004b60:	6093      	str	r3, [r2, #8]
 8004b62:	da08      	bge.n	8004b76 <__sfputc_r+0x1e>
 8004b64:	6994      	ldr	r4, [r2, #24]
 8004b66:	42a3      	cmp	r3, r4
 8004b68:	db01      	blt.n	8004b6e <__sfputc_r+0x16>
 8004b6a:	290a      	cmp	r1, #10
 8004b6c:	d103      	bne.n	8004b76 <__sfputc_r+0x1e>
 8004b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b72:	f000 bb73 	b.w	800525c <__swbuf_r>
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	1c58      	adds	r0, r3, #1
 8004b7a:	6010      	str	r0, [r2, #0]
 8004b7c:	7019      	strb	r1, [r3, #0]
 8004b7e:	4608      	mov	r0, r1
 8004b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <__sfputs_r>:
 8004b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b88:	4606      	mov	r6, r0
 8004b8a:	460f      	mov	r7, r1
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	18d5      	adds	r5, r2, r3
 8004b90:	42ac      	cmp	r4, r5
 8004b92:	d101      	bne.n	8004b98 <__sfputs_r+0x12>
 8004b94:	2000      	movs	r0, #0
 8004b96:	e007      	b.n	8004ba8 <__sfputs_r+0x22>
 8004b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9c:	463a      	mov	r2, r7
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff ffda 	bl	8004b58 <__sfputc_r>
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	d1f3      	bne.n	8004b90 <__sfputs_r+0xa>
 8004ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bac <_vfiprintf_r>:
 8004bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	b09d      	sub	sp, #116	; 0x74
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	4698      	mov	r8, r3
 8004bb8:	4606      	mov	r6, r0
 8004bba:	b118      	cbz	r0, 8004bc4 <_vfiprintf_r+0x18>
 8004bbc:	6a03      	ldr	r3, [r0, #32]
 8004bbe:	b90b      	cbnz	r3, 8004bc4 <_vfiprintf_r+0x18>
 8004bc0:	f7ff fdca 	bl	8004758 <__sinit>
 8004bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bc6:	07d9      	lsls	r1, r3, #31
 8004bc8:	d405      	bmi.n	8004bd6 <_vfiprintf_r+0x2a>
 8004bca:	89ab      	ldrh	r3, [r5, #12]
 8004bcc:	059a      	lsls	r2, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <_vfiprintf_r+0x2a>
 8004bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bd2:	f7ff fec6 	bl	8004962 <__retarget_lock_acquire_recursive>
 8004bd6:	89ab      	ldrh	r3, [r5, #12]
 8004bd8:	071b      	lsls	r3, r3, #28
 8004bda:	d501      	bpl.n	8004be0 <_vfiprintf_r+0x34>
 8004bdc:	692b      	ldr	r3, [r5, #16]
 8004bde:	b99b      	cbnz	r3, 8004c08 <_vfiprintf_r+0x5c>
 8004be0:	4629      	mov	r1, r5
 8004be2:	4630      	mov	r0, r6
 8004be4:	f000 fb78 	bl	80052d8 <__swsetup_r>
 8004be8:	b170      	cbz	r0, 8004c08 <_vfiprintf_r+0x5c>
 8004bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bec:	07dc      	lsls	r4, r3, #31
 8004bee:	d504      	bpl.n	8004bfa <_vfiprintf_r+0x4e>
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	b01d      	add	sp, #116	; 0x74
 8004bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	0598      	lsls	r0, r3, #22
 8004bfe:	d4f7      	bmi.n	8004bf0 <_vfiprintf_r+0x44>
 8004c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c02:	f7ff feaf 	bl	8004964 <__retarget_lock_release_recursive>
 8004c06:	e7f3      	b.n	8004bf0 <_vfiprintf_r+0x44>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c16:	2330      	movs	r3, #48	; 0x30
 8004c18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004dcc <_vfiprintf_r+0x220>
 8004c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c20:	f04f 0901 	mov.w	r9, #1
 8004c24:	4623      	mov	r3, r4
 8004c26:	469a      	mov	sl, r3
 8004c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c2c:	b10a      	cbz	r2, 8004c32 <_vfiprintf_r+0x86>
 8004c2e:	2a25      	cmp	r2, #37	; 0x25
 8004c30:	d1f9      	bne.n	8004c26 <_vfiprintf_r+0x7a>
 8004c32:	ebba 0b04 	subs.w	fp, sl, r4
 8004c36:	d00b      	beq.n	8004c50 <_vfiprintf_r+0xa4>
 8004c38:	465b      	mov	r3, fp
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7ff ffa1 	bl	8004b86 <__sfputs_r>
 8004c44:	3001      	adds	r0, #1
 8004c46:	f000 80a9 	beq.w	8004d9c <_vfiprintf_r+0x1f0>
 8004c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4c:	445a      	add	r2, fp
 8004c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8004c50:	f89a 3000 	ldrb.w	r3, [sl]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a1 	beq.w	8004d9c <_vfiprintf_r+0x1f0>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c64:	f10a 0a01 	add.w	sl, sl, #1
 8004c68:	9304      	str	r3, [sp, #16]
 8004c6a:	9307      	str	r3, [sp, #28]
 8004c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c70:	931a      	str	r3, [sp, #104]	; 0x68
 8004c72:	4654      	mov	r4, sl
 8004c74:	2205      	movs	r2, #5
 8004c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7a:	4854      	ldr	r0, [pc, #336]	; (8004dcc <_vfiprintf_r+0x220>)
 8004c7c:	f7fb faa8 	bl	80001d0 <memchr>
 8004c80:	9a04      	ldr	r2, [sp, #16]
 8004c82:	b9d8      	cbnz	r0, 8004cbc <_vfiprintf_r+0x110>
 8004c84:	06d1      	lsls	r1, r2, #27
 8004c86:	bf44      	itt	mi
 8004c88:	2320      	movmi	r3, #32
 8004c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8e:	0713      	lsls	r3, r2, #28
 8004c90:	bf44      	itt	mi
 8004c92:	232b      	movmi	r3, #43	; 0x2b
 8004c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c98:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9e:	d015      	beq.n	8004ccc <_vfiprintf_r+0x120>
 8004ca0:	9a07      	ldr	r2, [sp, #28]
 8004ca2:	4654      	mov	r4, sl
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f04f 0c0a 	mov.w	ip, #10
 8004caa:	4621      	mov	r1, r4
 8004cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cb0:	3b30      	subs	r3, #48	; 0x30
 8004cb2:	2b09      	cmp	r3, #9
 8004cb4:	d94d      	bls.n	8004d52 <_vfiprintf_r+0x1a6>
 8004cb6:	b1b0      	cbz	r0, 8004ce6 <_vfiprintf_r+0x13a>
 8004cb8:	9207      	str	r2, [sp, #28]
 8004cba:	e014      	b.n	8004ce6 <_vfiprintf_r+0x13a>
 8004cbc:	eba0 0308 	sub.w	r3, r0, r8
 8004cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	46a2      	mov	sl, r4
 8004cca:	e7d2      	b.n	8004c72 <_vfiprintf_r+0xc6>
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	1d19      	adds	r1, r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	9103      	str	r1, [sp, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bfbb      	ittet	lt
 8004cd8:	425b      	neglt	r3, r3
 8004cda:	f042 0202 	orrlt.w	r2, r2, #2
 8004cde:	9307      	strge	r3, [sp, #28]
 8004ce0:	9307      	strlt	r3, [sp, #28]
 8004ce2:	bfb8      	it	lt
 8004ce4:	9204      	strlt	r2, [sp, #16]
 8004ce6:	7823      	ldrb	r3, [r4, #0]
 8004ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8004cea:	d10c      	bne.n	8004d06 <_vfiprintf_r+0x15a>
 8004cec:	7863      	ldrb	r3, [r4, #1]
 8004cee:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf0:	d134      	bne.n	8004d5c <_vfiprintf_r+0x1b0>
 8004cf2:	9b03      	ldr	r3, [sp, #12]
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	9203      	str	r2, [sp, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bfb8      	it	lt
 8004cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d02:	3402      	adds	r4, #2
 8004d04:	9305      	str	r3, [sp, #20]
 8004d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ddc <_vfiprintf_r+0x230>
 8004d0a:	7821      	ldrb	r1, [r4, #0]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	4650      	mov	r0, sl
 8004d10:	f7fb fa5e 	bl	80001d0 <memchr>
 8004d14:	b138      	cbz	r0, 8004d26 <_vfiprintf_r+0x17a>
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	eba0 000a 	sub.w	r0, r0, sl
 8004d1c:	2240      	movs	r2, #64	; 0x40
 8004d1e:	4082      	lsls	r2, r0
 8004d20:	4313      	orrs	r3, r2
 8004d22:	3401      	adds	r4, #1
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d2a:	4829      	ldr	r0, [pc, #164]	; (8004dd0 <_vfiprintf_r+0x224>)
 8004d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d30:	2206      	movs	r2, #6
 8004d32:	f7fb fa4d 	bl	80001d0 <memchr>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	d03f      	beq.n	8004dba <_vfiprintf_r+0x20e>
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <_vfiprintf_r+0x228>)
 8004d3c:	bb1b      	cbnz	r3, 8004d86 <_vfiprintf_r+0x1da>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	f023 0307 	bic.w	r3, r3, #7
 8004d46:	3308      	adds	r3, #8
 8004d48:	9303      	str	r3, [sp, #12]
 8004d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4c:	443b      	add	r3, r7
 8004d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d50:	e768      	b.n	8004c24 <_vfiprintf_r+0x78>
 8004d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d56:	460c      	mov	r4, r1
 8004d58:	2001      	movs	r0, #1
 8004d5a:	e7a6      	b.n	8004caa <_vfiprintf_r+0xfe>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	3401      	adds	r4, #1
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	4619      	mov	r1, r3
 8004d64:	f04f 0c0a 	mov.w	ip, #10
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d6e:	3a30      	subs	r2, #48	; 0x30
 8004d70:	2a09      	cmp	r2, #9
 8004d72:	d903      	bls.n	8004d7c <_vfiprintf_r+0x1d0>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0c6      	beq.n	8004d06 <_vfiprintf_r+0x15a>
 8004d78:	9105      	str	r1, [sp, #20]
 8004d7a:	e7c4      	b.n	8004d06 <_vfiprintf_r+0x15a>
 8004d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d80:	4604      	mov	r4, r0
 8004d82:	2301      	movs	r3, #1
 8004d84:	e7f0      	b.n	8004d68 <_vfiprintf_r+0x1bc>
 8004d86:	ab03      	add	r3, sp, #12
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	462a      	mov	r2, r5
 8004d8c:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <_vfiprintf_r+0x22c>)
 8004d8e:	a904      	add	r1, sp, #16
 8004d90:	4630      	mov	r0, r6
 8004d92:	f3af 8000 	nop.w
 8004d96:	4607      	mov	r7, r0
 8004d98:	1c78      	adds	r0, r7, #1
 8004d9a:	d1d6      	bne.n	8004d4a <_vfiprintf_r+0x19e>
 8004d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d9e:	07d9      	lsls	r1, r3, #31
 8004da0:	d405      	bmi.n	8004dae <_vfiprintf_r+0x202>
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	059a      	lsls	r2, r3, #22
 8004da6:	d402      	bmi.n	8004dae <_vfiprintf_r+0x202>
 8004da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004daa:	f7ff fddb 	bl	8004964 <__retarget_lock_release_recursive>
 8004dae:	89ab      	ldrh	r3, [r5, #12]
 8004db0:	065b      	lsls	r3, r3, #25
 8004db2:	f53f af1d 	bmi.w	8004bf0 <_vfiprintf_r+0x44>
 8004db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004db8:	e71c      	b.n	8004bf4 <_vfiprintf_r+0x48>
 8004dba:	ab03      	add	r3, sp, #12
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	462a      	mov	r2, r5
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <_vfiprintf_r+0x22c>)
 8004dc2:	a904      	add	r1, sp, #16
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f879 	bl	8004ebc <_printf_i>
 8004dca:	e7e4      	b.n	8004d96 <_vfiprintf_r+0x1ea>
 8004dcc:	08005524 	.word	0x08005524
 8004dd0:	0800552e 	.word	0x0800552e
 8004dd4:	00000000 	.word	0x00000000
 8004dd8:	08004b87 	.word	0x08004b87
 8004ddc:	0800552a 	.word	0x0800552a

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc26      	bgt.n	8004e76 <_printf_common+0x96>
 8004e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e2c:	1e13      	subs	r3, r2, #0
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d42b      	bmi.n	8004e90 <_printf_common+0xb0>
 8004e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d01e      	beq.n	8004e84 <_printf_common+0xa4>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	6922      	ldr	r2, [r4, #16]
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf02      	ittt	eq
 8004e52:	68e5      	ldreq	r5, [r4, #12]
 8004e54:	6833      	ldreq	r3, [r6, #0]
 8004e56:	1aed      	subeq	r5, r5, r3
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	bf0c      	ite	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	2500      	movne	r5, #0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfc4      	itt	gt
 8004e66:	1a9b      	subgt	r3, r3, r2
 8004e68:	18ed      	addgt	r5, r5, r3
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	341a      	adds	r4, #26
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	d11a      	bne.n	8004ea8 <_printf_common+0xc8>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e008      	b.n	8004e88 <_printf_common+0xa8>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4652      	mov	r2, sl
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d103      	bne.n	8004e8c <_printf_common+0xac>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7c6      	b.n	8004e1e <_printf_common+0x3e>
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	2030      	movs	r0, #48	; 0x30
 8004e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e9a:	4422      	add	r2, r4
 8004e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	e7c7      	b.n	8004e38 <_printf_common+0x58>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4649      	mov	r1, r9
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0e6      	beq.n	8004e84 <_printf_common+0xa4>
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7d9      	b.n	8004e6e <_printf_common+0x8e>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	7e0f      	ldrb	r7, [r1, #24]
 8004ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ec4:	2f78      	cmp	r7, #120	; 0x78
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	4680      	mov	r8, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ed2:	d807      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ed4:	2f62      	cmp	r7, #98	; 0x62
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x32>
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	f000 80d4 	beq.w	8005086 <_printf_i+0x1ca>
 8004ede:	2f58      	cmp	r7, #88	; 0x58
 8004ee0:	f000 80c0 	beq.w	8005064 <_printf_i+0x1a8>
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eec:	e03a      	b.n	8004f64 <_printf_i+0xa8>
 8004eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ef2:	2b15      	cmp	r3, #21
 8004ef4:	d8f6      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ef6:	a101      	add	r1, pc, #4	; (adr r1, 8004efc <_printf_i+0x40>)
 8004ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004ee5 	.word	0x08004ee5
 8004f08:	08004ee5 	.word	0x08004ee5
 8004f0c:	08004ee5 	.word	0x08004ee5
 8004f10:	08004ee5 	.word	0x08004ee5
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004ee5 	.word	0x08004ee5
 8004f1c:	08004ee5 	.word	0x08004ee5
 8004f20:	08004ee5 	.word	0x08004ee5
 8004f24:	08004ee5 	.word	0x08004ee5
 8004f28:	0800506d 	.word	0x0800506d
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08005027 	.word	0x08005027
 8004f34:	08004ee5 	.word	0x08004ee5
 8004f38:	08004ee5 	.word	0x08004ee5
 8004f3c:	0800508f 	.word	0x0800508f
 8004f40:	08004ee5 	.word	0x08004ee5
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004ee5 	.word	0x08004ee5
 8004f4c:	08004ee5 	.word	0x08004ee5
 8004f50:	0800502f 	.word	0x0800502f
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	602a      	str	r2, [r5, #0]
 8004f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f64:	2301      	movs	r3, #1
 8004f66:	e09f      	b.n	80050a8 <_printf_i+0x1ec>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	0607      	lsls	r7, r0, #24
 8004f6e:	f103 0104 	add.w	r1, r3, #4
 8004f72:	6029      	str	r1, [r5, #0]
 8004f74:	d501      	bpl.n	8004f7a <_printf_i+0xbe>
 8004f76:	681e      	ldr	r6, [r3, #0]
 8004f78:	e003      	b.n	8004f82 <_printf_i+0xc6>
 8004f7a:	0646      	lsls	r6, r0, #25
 8004f7c:	d5fb      	bpl.n	8004f76 <_printf_i+0xba>
 8004f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	da03      	bge.n	8004f8e <_printf_i+0xd2>
 8004f86:	232d      	movs	r3, #45	; 0x2d
 8004f88:	4276      	negs	r6, r6
 8004f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8e:	485a      	ldr	r0, [pc, #360]	; (80050f8 <_printf_i+0x23c>)
 8004f90:	230a      	movs	r3, #10
 8004f92:	e012      	b.n	8004fba <_printf_i+0xfe>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	6029      	str	r1, [r5, #0]
 8004f9c:	0605      	lsls	r5, r0, #24
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0xe8>
 8004fa0:	681e      	ldr	r6, [r3, #0]
 8004fa2:	e002      	b.n	8004faa <_printf_i+0xee>
 8004fa4:	0641      	lsls	r1, r0, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0xe4>
 8004fa8:	881e      	ldrh	r6, [r3, #0]
 8004faa:	4853      	ldr	r0, [pc, #332]	; (80050f8 <_printf_i+0x23c>)
 8004fac:	2f6f      	cmp	r7, #111	; 0x6f
 8004fae:	bf0c      	ite	eq
 8004fb0:	2308      	moveq	r3, #8
 8004fb2:	230a      	movne	r3, #10
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fba:	6865      	ldr	r5, [r4, #4]
 8004fbc:	60a5      	str	r5, [r4, #8]
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	bfa2      	ittt	ge
 8004fc2:	6821      	ldrge	r1, [r4, #0]
 8004fc4:	f021 0104 	bicge.w	r1, r1, #4
 8004fc8:	6021      	strge	r1, [r4, #0]
 8004fca:	b90e      	cbnz	r6, 8004fd0 <_printf_i+0x114>
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	d04b      	beq.n	8005068 <_printf_i+0x1ac>
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8004fda:	5dc7      	ldrb	r7, [r0, r7]
 8004fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fe0:	4637      	mov	r7, r6
 8004fe2:	42bb      	cmp	r3, r7
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	d9f4      	bls.n	8004fd2 <_printf_i+0x116>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d10b      	bne.n	8005004 <_printf_i+0x148>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	07de      	lsls	r6, r3, #31
 8004ff0:	d508      	bpl.n	8005004 <_printf_i+0x148>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	bfde      	ittt	le
 8004ffa:	2330      	movle	r3, #48	; 0x30
 8004ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005000:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005004:	1b52      	subs	r2, r2, r5
 8005006:	6122      	str	r2, [r4, #16]
 8005008:	f8cd a000 	str.w	sl, [sp]
 800500c:	464b      	mov	r3, r9
 800500e:	aa03      	add	r2, sp, #12
 8005010:	4621      	mov	r1, r4
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff fee4 	bl	8004de0 <_printf_common>
 8005018:	3001      	adds	r0, #1
 800501a:	d14a      	bne.n	80050b2 <_printf_i+0x1f6>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	b004      	add	sp, #16
 8005022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	4833      	ldr	r0, [pc, #204]	; (80050fc <_printf_i+0x240>)
 8005030:	2778      	movs	r7, #120	; 0x78
 8005032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6829      	ldr	r1, [r5, #0]
 800503a:	061f      	lsls	r7, r3, #24
 800503c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005040:	d402      	bmi.n	8005048 <_printf_i+0x18c>
 8005042:	065f      	lsls	r7, r3, #25
 8005044:	bf48      	it	mi
 8005046:	b2b6      	uxthmi	r6, r6
 8005048:	07df      	lsls	r7, r3, #31
 800504a:	bf48      	it	mi
 800504c:	f043 0320 	orrmi.w	r3, r3, #32
 8005050:	6029      	str	r1, [r5, #0]
 8005052:	bf48      	it	mi
 8005054:	6023      	strmi	r3, [r4, #0]
 8005056:	b91e      	cbnz	r6, 8005060 <_printf_i+0x1a4>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	2310      	movs	r3, #16
 8005062:	e7a7      	b.n	8004fb4 <_printf_i+0xf8>
 8005064:	4824      	ldr	r0, [pc, #144]	; (80050f8 <_printf_i+0x23c>)
 8005066:	e7e4      	b.n	8005032 <_printf_i+0x176>
 8005068:	4615      	mov	r5, r2
 800506a:	e7bd      	b.n	8004fe8 <_printf_i+0x12c>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6826      	ldr	r6, [r4, #0]
 8005070:	6961      	ldr	r1, [r4, #20]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6028      	str	r0, [r5, #0]
 8005076:	0635      	lsls	r5, r6, #24
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	d501      	bpl.n	8005080 <_printf_i+0x1c4>
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0x1ca>
 8005080:	0670      	lsls	r0, r6, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0x1c0>
 8005084:	8019      	strh	r1, [r3, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	4615      	mov	r5, r2
 800508c:	e7bc      	b.n	8005008 <_printf_i+0x14c>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	602a      	str	r2, [r5, #0]
 8005094:	681d      	ldr	r5, [r3, #0]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	2100      	movs	r1, #0
 800509a:	4628      	mov	r0, r5
 800509c:	f7fb f898 	bl	80001d0 <memchr>
 80050a0:	b108      	cbz	r0, 80050a6 <_printf_i+0x1ea>
 80050a2:	1b40      	subs	r0, r0, r5
 80050a4:	6060      	str	r0, [r4, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	2300      	movs	r3, #0
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	e7aa      	b.n	8005008 <_printf_i+0x14c>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	47d0      	blx	sl
 80050bc:	3001      	adds	r0, #1
 80050be:	d0ad      	beq.n	800501c <_printf_i+0x160>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	079b      	lsls	r3, r3, #30
 80050c4:	d413      	bmi.n	80050ee <_printf_i+0x232>
 80050c6:	68e0      	ldr	r0, [r4, #12]
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	4298      	cmp	r0, r3
 80050cc:	bfb8      	it	lt
 80050ce:	4618      	movlt	r0, r3
 80050d0:	e7a6      	b.n	8005020 <_printf_i+0x164>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d09d      	beq.n	800501c <_printf_i+0x160>
 80050e0:	3501      	adds	r5, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	9903      	ldr	r1, [sp, #12]
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dcf2      	bgt.n	80050d2 <_printf_i+0x216>
 80050ec:	e7eb      	b.n	80050c6 <_printf_i+0x20a>
 80050ee:	2500      	movs	r5, #0
 80050f0:	f104 0619 	add.w	r6, r4, #25
 80050f4:	e7f5      	b.n	80050e2 <_printf_i+0x226>
 80050f6:	bf00      	nop
 80050f8:	08005535 	.word	0x08005535
 80050fc:	08005546 	.word	0x08005546

08005100 <__sflush_r>:
 8005100:	898a      	ldrh	r2, [r1, #12]
 8005102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005106:	4605      	mov	r5, r0
 8005108:	0710      	lsls	r0, r2, #28
 800510a:	460c      	mov	r4, r1
 800510c:	d458      	bmi.n	80051c0 <__sflush_r+0xc0>
 800510e:	684b      	ldr	r3, [r1, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	dc05      	bgt.n	8005120 <__sflush_r+0x20>
 8005114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	dc02      	bgt.n	8005120 <__sflush_r+0x20>
 800511a:	2000      	movs	r0, #0
 800511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005122:	2e00      	cmp	r6, #0
 8005124:	d0f9      	beq.n	800511a <__sflush_r+0x1a>
 8005126:	2300      	movs	r3, #0
 8005128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800512c:	682f      	ldr	r7, [r5, #0]
 800512e:	6a21      	ldr	r1, [r4, #32]
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	d032      	beq.n	800519a <__sflush_r+0x9a>
 8005134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005136:	89a3      	ldrh	r3, [r4, #12]
 8005138:	075a      	lsls	r2, r3, #29
 800513a:	d505      	bpl.n	8005148 <__sflush_r+0x48>
 800513c:	6863      	ldr	r3, [r4, #4]
 800513e:	1ac0      	subs	r0, r0, r3
 8005140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005142:	b10b      	cbz	r3, 8005148 <__sflush_r+0x48>
 8005144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005146:	1ac0      	subs	r0, r0, r3
 8005148:	2300      	movs	r3, #0
 800514a:	4602      	mov	r2, r0
 800514c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800514e:	6a21      	ldr	r1, [r4, #32]
 8005150:	4628      	mov	r0, r5
 8005152:	47b0      	blx	r6
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	d106      	bne.n	8005168 <__sflush_r+0x68>
 800515a:	6829      	ldr	r1, [r5, #0]
 800515c:	291d      	cmp	r1, #29
 800515e:	d82b      	bhi.n	80051b8 <__sflush_r+0xb8>
 8005160:	4a29      	ldr	r2, [pc, #164]	; (8005208 <__sflush_r+0x108>)
 8005162:	410a      	asrs	r2, r1
 8005164:	07d6      	lsls	r6, r2, #31
 8005166:	d427      	bmi.n	80051b8 <__sflush_r+0xb8>
 8005168:	2200      	movs	r2, #0
 800516a:	6062      	str	r2, [r4, #4]
 800516c:	04d9      	lsls	r1, r3, #19
 800516e:	6922      	ldr	r2, [r4, #16]
 8005170:	6022      	str	r2, [r4, #0]
 8005172:	d504      	bpl.n	800517e <__sflush_r+0x7e>
 8005174:	1c42      	adds	r2, r0, #1
 8005176:	d101      	bne.n	800517c <__sflush_r+0x7c>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b903      	cbnz	r3, 800517e <__sflush_r+0x7e>
 800517c:	6560      	str	r0, [r4, #84]	; 0x54
 800517e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005180:	602f      	str	r7, [r5, #0]
 8005182:	2900      	cmp	r1, #0
 8005184:	d0c9      	beq.n	800511a <__sflush_r+0x1a>
 8005186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800518a:	4299      	cmp	r1, r3
 800518c:	d002      	beq.n	8005194 <__sflush_r+0x94>
 800518e:	4628      	mov	r0, r5
 8005190:	f7ff fbea 	bl	8004968 <_free_r>
 8005194:	2000      	movs	r0, #0
 8005196:	6360      	str	r0, [r4, #52]	; 0x34
 8005198:	e7c0      	b.n	800511c <__sflush_r+0x1c>
 800519a:	2301      	movs	r3, #1
 800519c:	4628      	mov	r0, r5
 800519e:	47b0      	blx	r6
 80051a0:	1c41      	adds	r1, r0, #1
 80051a2:	d1c8      	bne.n	8005136 <__sflush_r+0x36>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c5      	beq.n	8005136 <__sflush_r+0x36>
 80051aa:	2b1d      	cmp	r3, #29
 80051ac:	d001      	beq.n	80051b2 <__sflush_r+0xb2>
 80051ae:	2b16      	cmp	r3, #22
 80051b0:	d101      	bne.n	80051b6 <__sflush_r+0xb6>
 80051b2:	602f      	str	r7, [r5, #0]
 80051b4:	e7b1      	b.n	800511a <__sflush_r+0x1a>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051bc:	81a3      	strh	r3, [r4, #12]
 80051be:	e7ad      	b.n	800511c <__sflush_r+0x1c>
 80051c0:	690f      	ldr	r7, [r1, #16]
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	d0a9      	beq.n	800511a <__sflush_r+0x1a>
 80051c6:	0793      	lsls	r3, r2, #30
 80051c8:	680e      	ldr	r6, [r1, #0]
 80051ca:	bf08      	it	eq
 80051cc:	694b      	ldreq	r3, [r1, #20]
 80051ce:	600f      	str	r7, [r1, #0]
 80051d0:	bf18      	it	ne
 80051d2:	2300      	movne	r3, #0
 80051d4:	eba6 0807 	sub.w	r8, r6, r7
 80051d8:	608b      	str	r3, [r1, #8]
 80051da:	f1b8 0f00 	cmp.w	r8, #0
 80051de:	dd9c      	ble.n	800511a <__sflush_r+0x1a>
 80051e0:	6a21      	ldr	r1, [r4, #32]
 80051e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051e4:	4643      	mov	r3, r8
 80051e6:	463a      	mov	r2, r7
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b0      	blx	r6
 80051ec:	2800      	cmp	r0, #0
 80051ee:	dc06      	bgt.n	80051fe <__sflush_r+0xfe>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051f6:	81a3      	strh	r3, [r4, #12]
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	e78e      	b.n	800511c <__sflush_r+0x1c>
 80051fe:	4407      	add	r7, r0
 8005200:	eba8 0800 	sub.w	r8, r8, r0
 8005204:	e7e9      	b.n	80051da <__sflush_r+0xda>
 8005206:	bf00      	nop
 8005208:	dfbffffe 	.word	0xdfbffffe

0800520c <_fflush_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	690b      	ldr	r3, [r1, #16]
 8005210:	4605      	mov	r5, r0
 8005212:	460c      	mov	r4, r1
 8005214:	b913      	cbnz	r3, 800521c <_fflush_r+0x10>
 8005216:	2500      	movs	r5, #0
 8005218:	4628      	mov	r0, r5
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	b118      	cbz	r0, 8005226 <_fflush_r+0x1a>
 800521e:	6a03      	ldr	r3, [r0, #32]
 8005220:	b90b      	cbnz	r3, 8005226 <_fflush_r+0x1a>
 8005222:	f7ff fa99 	bl	8004758 <__sinit>
 8005226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f3      	beq.n	8005216 <_fflush_r+0xa>
 800522e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005230:	07d0      	lsls	r0, r2, #31
 8005232:	d404      	bmi.n	800523e <_fflush_r+0x32>
 8005234:	0599      	lsls	r1, r3, #22
 8005236:	d402      	bmi.n	800523e <_fflush_r+0x32>
 8005238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800523a:	f7ff fb92 	bl	8004962 <__retarget_lock_acquire_recursive>
 800523e:	4628      	mov	r0, r5
 8005240:	4621      	mov	r1, r4
 8005242:	f7ff ff5d 	bl	8005100 <__sflush_r>
 8005246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005248:	07da      	lsls	r2, r3, #31
 800524a:	4605      	mov	r5, r0
 800524c:	d4e4      	bmi.n	8005218 <_fflush_r+0xc>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	059b      	lsls	r3, r3, #22
 8005252:	d4e1      	bmi.n	8005218 <_fflush_r+0xc>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f7ff fb85 	bl	8004964 <__retarget_lock_release_recursive>
 800525a:	e7dd      	b.n	8005218 <_fflush_r+0xc>

0800525c <__swbuf_r>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	460e      	mov	r6, r1
 8005260:	4614      	mov	r4, r2
 8005262:	4605      	mov	r5, r0
 8005264:	b118      	cbz	r0, 800526e <__swbuf_r+0x12>
 8005266:	6a03      	ldr	r3, [r0, #32]
 8005268:	b90b      	cbnz	r3, 800526e <__swbuf_r+0x12>
 800526a:	f7ff fa75 	bl	8004758 <__sinit>
 800526e:	69a3      	ldr	r3, [r4, #24]
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	071a      	lsls	r2, r3, #28
 8005276:	d525      	bpl.n	80052c4 <__swbuf_r+0x68>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	b31b      	cbz	r3, 80052c4 <__swbuf_r+0x68>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	6922      	ldr	r2, [r4, #16]
 8005280:	1a98      	subs	r0, r3, r2
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	b2f6      	uxtb	r6, r6
 8005286:	4283      	cmp	r3, r0
 8005288:	4637      	mov	r7, r6
 800528a:	dc04      	bgt.n	8005296 <__swbuf_r+0x3a>
 800528c:	4621      	mov	r1, r4
 800528e:	4628      	mov	r0, r5
 8005290:	f7ff ffbc 	bl	800520c <_fflush_r>
 8005294:	b9e0      	cbnz	r0, 80052d0 <__swbuf_r+0x74>
 8005296:	68a3      	ldr	r3, [r4, #8]
 8005298:	3b01      	subs	r3, #1
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	6022      	str	r2, [r4, #0]
 80052a2:	701e      	strb	r6, [r3, #0]
 80052a4:	6962      	ldr	r2, [r4, #20]
 80052a6:	1c43      	adds	r3, r0, #1
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d004      	beq.n	80052b6 <__swbuf_r+0x5a>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	07db      	lsls	r3, r3, #31
 80052b0:	d506      	bpl.n	80052c0 <__swbuf_r+0x64>
 80052b2:	2e0a      	cmp	r6, #10
 80052b4:	d104      	bne.n	80052c0 <__swbuf_r+0x64>
 80052b6:	4621      	mov	r1, r4
 80052b8:	4628      	mov	r0, r5
 80052ba:	f7ff ffa7 	bl	800520c <_fflush_r>
 80052be:	b938      	cbnz	r0, 80052d0 <__swbuf_r+0x74>
 80052c0:	4638      	mov	r0, r7
 80052c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c4:	4621      	mov	r1, r4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f806 	bl	80052d8 <__swsetup_r>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0d5      	beq.n	800527c <__swbuf_r+0x20>
 80052d0:	f04f 37ff 	mov.w	r7, #4294967295
 80052d4:	e7f4      	b.n	80052c0 <__swbuf_r+0x64>
	...

080052d8 <__swsetup_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4b2a      	ldr	r3, [pc, #168]	; (8005384 <__swsetup_r+0xac>)
 80052dc:	4605      	mov	r5, r0
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	460c      	mov	r4, r1
 80052e2:	b118      	cbz	r0, 80052ec <__swsetup_r+0x14>
 80052e4:	6a03      	ldr	r3, [r0, #32]
 80052e6:	b90b      	cbnz	r3, 80052ec <__swsetup_r+0x14>
 80052e8:	f7ff fa36 	bl	8004758 <__sinit>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052f2:	0718      	lsls	r0, r3, #28
 80052f4:	d422      	bmi.n	800533c <__swsetup_r+0x64>
 80052f6:	06d9      	lsls	r1, r3, #27
 80052f8:	d407      	bmi.n	800530a <__swsetup_r+0x32>
 80052fa:	2309      	movs	r3, #9
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005302:	81a3      	strh	r3, [r4, #12]
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	e034      	b.n	8005374 <__swsetup_r+0x9c>
 800530a:	0758      	lsls	r0, r3, #29
 800530c:	d512      	bpl.n	8005334 <__swsetup_r+0x5c>
 800530e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005310:	b141      	cbz	r1, 8005324 <__swsetup_r+0x4c>
 8005312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005316:	4299      	cmp	r1, r3
 8005318:	d002      	beq.n	8005320 <__swsetup_r+0x48>
 800531a:	4628      	mov	r0, r5
 800531c:	f7ff fb24 	bl	8004968 <_free_r>
 8005320:	2300      	movs	r3, #0
 8005322:	6363      	str	r3, [r4, #52]	; 0x34
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	2300      	movs	r3, #0
 800532e:	6063      	str	r3, [r4, #4]
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6023      	str	r3, [r4, #0]
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0308 	orr.w	r3, r3, #8
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	b94b      	cbnz	r3, 8005354 <__swsetup_r+0x7c>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d003      	beq.n	8005354 <__swsetup_r+0x7c>
 800534c:	4621      	mov	r1, r4
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f850 	bl	80053f4 <__smakebuf_r>
 8005354:	89a0      	ldrh	r0, [r4, #12]
 8005356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800535a:	f010 0301 	ands.w	r3, r0, #1
 800535e:	d00a      	beq.n	8005376 <__swsetup_r+0x9e>
 8005360:	2300      	movs	r3, #0
 8005362:	60a3      	str	r3, [r4, #8]
 8005364:	6963      	ldr	r3, [r4, #20]
 8005366:	425b      	negs	r3, r3
 8005368:	61a3      	str	r3, [r4, #24]
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	b943      	cbnz	r3, 8005380 <__swsetup_r+0xa8>
 800536e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005372:	d1c4      	bne.n	80052fe <__swsetup_r+0x26>
 8005374:	bd38      	pop	{r3, r4, r5, pc}
 8005376:	0781      	lsls	r1, r0, #30
 8005378:	bf58      	it	pl
 800537a:	6963      	ldrpl	r3, [r4, #20]
 800537c:	60a3      	str	r3, [r4, #8]
 800537e:	e7f4      	b.n	800536a <__swsetup_r+0x92>
 8005380:	2000      	movs	r0, #0
 8005382:	e7f7      	b.n	8005374 <__swsetup_r+0x9c>
 8005384:	20000064 	.word	0x20000064

08005388 <_sbrk_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d06      	ldr	r5, [pc, #24]	; (80053a4 <_sbrk_r+0x1c>)
 800538c:	2300      	movs	r3, #0
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fb fc10 	bl	8000bb8 <_sbrk>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_sbrk_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_sbrk_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200002b8 	.word	0x200002b8

080053a8 <__swhatbuf_r>:
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	460c      	mov	r4, r1
 80053ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b0:	2900      	cmp	r1, #0
 80053b2:	b096      	sub	sp, #88	; 0x58
 80053b4:	4615      	mov	r5, r2
 80053b6:	461e      	mov	r6, r3
 80053b8:	da0d      	bge.n	80053d6 <__swhatbuf_r+0x2e>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	bf0c      	ite	eq
 80053c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053ca:	2340      	movne	r3, #64	; 0x40
 80053cc:	2000      	movs	r0, #0
 80053ce:	6031      	str	r1, [r6, #0]
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	b016      	add	sp, #88	; 0x58
 80053d4:	bd70      	pop	{r4, r5, r6, pc}
 80053d6:	466a      	mov	r2, sp
 80053d8:	f000 f848 	bl	800546c <_fstat_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	dbec      	blt.n	80053ba <__swhatbuf_r+0x12>
 80053e0:	9901      	ldr	r1, [sp, #4]
 80053e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053ea:	4259      	negs	r1, r3
 80053ec:	4159      	adcs	r1, r3
 80053ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053f2:	e7eb      	b.n	80053cc <__swhatbuf_r+0x24>

080053f4 <__smakebuf_r>:
 80053f4:	898b      	ldrh	r3, [r1, #12]
 80053f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053f8:	079d      	lsls	r5, r3, #30
 80053fa:	4606      	mov	r6, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	d507      	bpl.n	8005410 <__smakebuf_r+0x1c>
 8005400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	2301      	movs	r3, #1
 800540a:	6163      	str	r3, [r4, #20]
 800540c:	b002      	add	sp, #8
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	ab01      	add	r3, sp, #4
 8005412:	466a      	mov	r2, sp
 8005414:	f7ff ffc8 	bl	80053a8 <__swhatbuf_r>
 8005418:	9900      	ldr	r1, [sp, #0]
 800541a:	4605      	mov	r5, r0
 800541c:	4630      	mov	r0, r6
 800541e:	f7ff fb0f 	bl	8004a40 <_malloc_r>
 8005422:	b948      	cbnz	r0, 8005438 <__smakebuf_r+0x44>
 8005424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005428:	059a      	lsls	r2, r3, #22
 800542a:	d4ef      	bmi.n	800540c <__smakebuf_r+0x18>
 800542c:	f023 0303 	bic.w	r3, r3, #3
 8005430:	f043 0302 	orr.w	r3, r3, #2
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	e7e3      	b.n	8005400 <__smakebuf_r+0xc>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	6020      	str	r0, [r4, #0]
 800543c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	9b00      	ldr	r3, [sp, #0]
 8005444:	6163      	str	r3, [r4, #20]
 8005446:	9b01      	ldr	r3, [sp, #4]
 8005448:	6120      	str	r0, [r4, #16]
 800544a:	b15b      	cbz	r3, 8005464 <__smakebuf_r+0x70>
 800544c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005450:	4630      	mov	r0, r6
 8005452:	f000 f81d 	bl	8005490 <_isatty_r>
 8005456:	b128      	cbz	r0, 8005464 <__smakebuf_r+0x70>
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	89a3      	ldrh	r3, [r4, #12]
 8005466:	431d      	orrs	r5, r3
 8005468:	81a5      	strh	r5, [r4, #12]
 800546a:	e7cf      	b.n	800540c <__smakebuf_r+0x18>

0800546c <_fstat_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d07      	ldr	r5, [pc, #28]	; (800548c <_fstat_r+0x20>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	4611      	mov	r1, r2
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f7fb fb75 	bl	8000b68 <_fstat>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d102      	bne.n	8005488 <_fstat_r+0x1c>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	b103      	cbz	r3, 8005488 <_fstat_r+0x1c>
 8005486:	6023      	str	r3, [r4, #0]
 8005488:	bd38      	pop	{r3, r4, r5, pc}
 800548a:	bf00      	nop
 800548c:	200002b8 	.word	0x200002b8

08005490 <_isatty_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	; (80054ac <_isatty_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fb fb74 	bl	8000b88 <_isatty>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_isatty_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_isatty_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200002b8 	.word	0x200002b8

080054b0 <_init>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr

080054bc <_fini>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	bf00      	nop
 80054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054c2:	bc08      	pop	{r3}
 80054c4:	469e      	mov	lr, r3
 80054c6:	4770      	bx	lr
