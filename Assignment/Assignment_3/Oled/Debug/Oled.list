
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f68  08005f68  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f68  08005f68  00015f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f70  08005f70  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f74  08005f74  00015f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08005fe0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08005fe0  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015116  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e0  00000000  00000000  000351f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00037bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f97  00000000  00000000  00038fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233cf  00000000  00000000  00039f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c8e  00000000  00000000  0005d33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dee4c  00000000  00000000  00073fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf0  00000000  00000000  00152e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00158b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ec8 	.word	0x08005ec8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ec8 	.word	0x08005ec8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fd9b 	bl	80010aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f9a2 	bl	80008c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f970 	bl	8000860 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000580:	f000 f8dc 	bl	800073c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000584:	f000 f918 	bl	80007b8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000588:	f000 f874 	bl	8000674 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <main+0x3c>)
 8000590:	f003 fe56 	bl	8004240 <HAL_TIMEx_PWMN_Start>
  printf("\033[0H\033[0J");
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <main+0x40>)
 8000596:	f004 fe21 	bl	80051dc <iprintf>

  ssd1331_init();
 800059a:	f000 fa75 	bl	8000a88 <ssd1331_init>
  ssd1331_clear_screen(BLACK);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fa4e 	bl	8000a40 <ssd1331_clear_screen>
//  ssd1331_draw_bitmap(10, 10, heart_inverted, 30, 30, RED);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x38>
 80005a6:	bf00      	nop
 80005a8:	2000014c 	.word	0x2000014c
 80005ac:	08005ee0 	.word	0x08005ee0

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fe61 	bl	8005286 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 ff13 	bl	8002400 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f9b8 	bl	8000954 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e4:	f001 feee 	bl	80023c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xc0>)
 80005ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ee:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xc0>)
 80005f0:	f023 0318 	bic.w	r3, r3, #24
 80005f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2314      	movs	r3, #20
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000618:	2310      	movs	r3, #16
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061c:	2307      	movs	r3, #7
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f001 ff3d 	bl	80024ac <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000638:	f000 f98c 	bl	8000954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fb3d 	bl	8002cd4 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000660:	f000 f978 	bl	8000954 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000664:	f002 ff50 	bl	8003508 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_ADC1_Init+0xbc>)
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <MX_ADC1_Init+0xc0>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_ADC1_Init+0xbc>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_ADC1_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069c:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_ADC1_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006aa:	2204      	movs	r2, #4
 80006ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006bc:	2201      	movs	r2, #1
 80006be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_ADC1_Init+0xbc>)
 80006ec:	f000 fede 	bl	80014ac <HAL_ADC_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006f6:	f000 f92d 	bl	8000954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_ADC1_Init+0xc4>)
 80006fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fe:	2306      	movs	r3, #6
 8000700:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000706:	237f      	movs	r3, #127	; 0x7f
 8000708:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800070a:	2304      	movs	r3, #4
 800070c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0xbc>)
 8000718:	f001 f80a 	bl	8001730 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000722:	f000 f917 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	50040000 	.word	0x50040000
 8000738:	14f00020 	.word	0x14f00020

0800073c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_SPI1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800074c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000756:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800075a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x74>)
 800076a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000772:	2210      	movs	r2, #16
 8000774:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x74>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000796:	2208      	movs	r2, #8
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_SPI1_Init+0x74>)
 800079c:	f002 ffb6 	bl	800370c <HAL_SPI_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f8d5 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0310 	add.w	r3, r7, #16
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d6:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007d8:	4a20      	ldr	r2, [pc, #128]	; (800085c <MX_TIM1_Init+0xa4>)
 80007da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_TIM1_Init+0xa0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <MX_TIM1_Init+0xa0>)
 8000804:	f003 fafe 	bl	8003e04 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800080e:	f000 f8a1 	bl	8000954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <MX_TIM1_Init+0xa0>)
 8000820:	f003 fb47 	bl	8003eb2 <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800082a:	f000 f893 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_TIM1_Init+0xa0>)
 8000840:	f003 fd9c 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800084a:	f000 f883 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000014c 	.word	0x2000014c
 800085c:	40012c00 	.word	0x40012c00

08000860 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <MX_USART2_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART2_UART_Init+0x58>)
 80008a4:	f003 fdf5 	bl	8004492 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f851 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000198 	.word	0x20000198
 80008bc:	40004400 	.word	0x40004400

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_GPIO_Init+0x8c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_GPIO_Init+0x8c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_GPIO_Init+0x8c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_GPIO_Init+0x8c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <MX_GPIO_Init+0x8c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_GPIO_Init+0x8c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_GPIO_Init+0x8c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <MX_GPIO_Init+0x8c>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_GPIO_Init+0x8c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2178      	movs	r1, #120	; 0x78
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <MX_GPIO_Init+0x90>)
 8000924:	f001 fd36 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 8000928:	2378      	movs	r3, #120	; 0x78
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x90>)
 8000940:	f001 fbbe 	bl	80020c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
}
 800095a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095c:	e7fe      	b.n	800095c <Error_Handler+0x8>
	...

08000960 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8000976:	2201      	movs	r2, #1
 8000978:	2120      	movs	r1, #32
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <ssd1331_write_byte+0x60>)
 800097c:	f001 fd0a 	bl	8002394 <HAL_GPIO_WritePin>
 8000980:	e004      	b.n	800098c <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <ssd1331_write_byte+0x60>)
 8000988:	f001 fd04 	bl	8002394 <HAL_GPIO_WritePin>
	}

	__SSD1331_CS_CLR();
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <ssd1331_write_byte+0x60>)
 8000992:	f001 fcff 	bl	8002394 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8000996:	1df9      	adds	r1, r7, #7
 8000998:	2364      	movs	r3, #100	; 0x64
 800099a:	2201      	movs	r2, #1
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <ssd1331_write_byte+0x64>)
 800099e:	f002 ff58 	bl	8003852 <HAL_SPI_Transmit>

	__SSD1331_CS_SET();
 80009a2:	2201      	movs	r2, #1
 80009a4:	2110      	movs	r1, #16
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <ssd1331_write_byte+0x60>)
 80009a8:	f001 fcf4 	bl	8002394 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 80009ac:	2201      	movs	r2, #1
 80009ae:	2120      	movs	r1, #32
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <ssd1331_write_byte+0x60>)
 80009b2:	f001 fcef 	bl	8002394 <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	48000400 	.word	0x48000400
 80009c4:	200000e8 	.word	0x200000e8

080009c8 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	460b      	mov	r3, r1
 80009d4:	71bb      	strb	r3, [r7, #6]
 80009d6:	4613      	mov	r3, r2
 80009d8:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b5f      	cmp	r3, #95	; 0x5f
 80009de:	d82b      	bhi.n	8000a38 <ssd1331_draw_point+0x70>
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	2b3f      	cmp	r3, #63	; 0x3f
 80009e4:	d828      	bhi.n	8000a38 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 80009e6:	2100      	movs	r1, #0
 80009e8:	2015      	movs	r0, #21
 80009ea:	f7ff ffb9 	bl	8000960 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffb4 	bl	8000960 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 80009f8:	2100      	movs	r1, #0
 80009fa:	205f      	movs	r0, #95	; 0x5f
 80009fc:	f7ff ffb0 	bl	8000960 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2075      	movs	r0, #117	; 0x75
 8000a04:	f7ff ffac 	bl	8000960 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 8000a08:	79bb      	ldrb	r3, [r7, #6]
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ffa7 	bl	8000960 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 8000a12:	2100      	movs	r1, #0
 8000a14:	203f      	movs	r0, #63	; 0x3f
 8000a16:	f7ff ffa3 	bl	8000960 <ssd1331_write_byte>

    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2101      	movs	r1, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ff9b 	bl	8000960 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);
 8000a2a:	88bb      	ldrh	r3, [r7, #4]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff95 	bl	8000960 <ssd1331_write_byte>
 8000a36:	e000      	b.n	8000a3a <ssd1331_draw_point+0x72>
		return;
 8000a38:	bf00      	nop
}
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;

	for(i = 0; i < OLED_HEIGHT; i ++){
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	81fb      	strh	r3, [r7, #14]
 8000a4e:	e013      	b.n	8000a78 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000a50:	2300      	movs	r3, #0
 8000a52:	81bb      	strh	r3, [r7, #12]
 8000a54:	e00a      	b.n	8000a6c <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	89fa      	ldrh	r2, [r7, #14]
 8000a5c:	b2d1      	uxtb	r1, r2
 8000a5e:	88fa      	ldrh	r2, [r7, #6]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffb1 	bl	80009c8 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81bb      	strh	r3, [r7, #12]
 8000a6c:	89bb      	ldrh	r3, [r7, #12]
 8000a6e:	2b5f      	cmp	r3, #95	; 0x5f
 8000a70:	d9f1      	bls.n	8000a56 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	3301      	adds	r3, #1
 8000a76:	81fb      	strh	r3, [r7, #14]
 8000a78:	89fb      	ldrh	r3, [r7, #14]
 8000a7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a7c:	d9e8      	bls.n	8000a50 <ssd1331_clear_screen+0x10>
		}
	}
}
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <ssd1331_init>:


void ssd1331_init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4852      	ldr	r0, [pc, #328]	; (8000bdc <ssd1331_init+0x154>)
 8000a92:	f001 fc7f 	bl	8002394 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 8000a96:	2201      	movs	r2, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	4850      	ldr	r0, [pc, #320]	; (8000bdc <ssd1331_init+0x154>)
 8000a9c:	f001 fc7a 	bl	8002394 <HAL_GPIO_WritePin>

  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	20ae      	movs	r0, #174	; 0xae
 8000aa4:	f7ff ff5c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2081      	movs	r0, #129	; 0x81
 8000aac:	f7ff ff58 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	20ff      	movs	r0, #255	; 0xff
 8000ab4:	f7ff ff54 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2082      	movs	r0, #130	; 0x82
 8000abc:	f7ff ff50 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	f7ff ff4c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2083      	movs	r0, #131	; 0x83
 8000acc:	f7ff ff48 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	20ff      	movs	r0, #255	; 0xff
 8000ad4:	f7ff ff44 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2087      	movs	r0, #135	; 0x87
 8000adc:	f7ff ff40 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f7ff ff3c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8000ae8:	2100      	movs	r1, #0
 8000aea:	208a      	movs	r0, #138	; 0x8a
 8000aec:	f7ff ff38 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000af0:	2100      	movs	r1, #0
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f7ff ff34 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8000af8:	2100      	movs	r1, #0
 8000afa:	208b      	movs	r0, #139	; 0x8b
 8000afc:	f7ff ff30 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8000b00:	2100      	movs	r1, #0
 8000b02:	2078      	movs	r0, #120	; 0x78
 8000b04:	f7ff ff2c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8000b08:	2100      	movs	r1, #0
 8000b0a:	208c      	movs	r0, #140	; 0x8c
 8000b0c:	f7ff ff28 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8000b10:	2100      	movs	r1, #0
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f7ff ff24 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8000b18:	2100      	movs	r1, #0
 8000b1a:	20a0      	movs	r0, #160	; 0xa0
 8000b1c:	f7ff ff20 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72
 8000b20:	2100      	movs	r1, #0
 8000b22:	2072      	movs	r0, #114	; 0x72
 8000b24:	f7ff ff1c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8000b28:	2100      	movs	r1, #0
 8000b2a:	20a1      	movs	r0, #161	; 0xa1
 8000b2c:	f7ff ff18 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000b30:	2100      	movs	r1, #0
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff14 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8000b38:	2100      	movs	r1, #0
 8000b3a:	20a2      	movs	r0, #162	; 0xa2
 8000b3c:	f7ff ff10 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8000b40:	2100      	movs	r1, #0
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff ff0c 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 8000b48:	2100      	movs	r1, #0
 8000b4a:	20a4      	movs	r0, #164	; 0xa4
 8000b4c:	f7ff ff08 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 8000b50:	2100      	movs	r1, #0
 8000b52:	20a8      	movs	r0, #168	; 0xa8
 8000b54:	f7ff ff04 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	203f      	movs	r0, #63	; 0x3f
 8000b5c:	f7ff ff00 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 8000b60:	2100      	movs	r1, #0
 8000b62:	20ad      	movs	r0, #173	; 0xad
 8000b64:	f7ff fefc 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	208e      	movs	r0, #142	; 0x8e
 8000b6c:	f7ff fef8 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 8000b70:	2100      	movs	r1, #0
 8000b72:	20b0      	movs	r0, #176	; 0xb0
 8000b74:	f7ff fef4 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fef0 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 8000b80:	2100      	movs	r1, #0
 8000b82:	20b1      	movs	r0, #177	; 0xb1
 8000b84:	f7ff feec 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2031      	movs	r0, #49	; 0x31
 8000b8c:	f7ff fee8 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 8000b90:	2100      	movs	r1, #0
 8000b92:	20b3      	movs	r0, #179	; 0xb3
 8000b94:	f7ff fee4 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	20f0      	movs	r0, #240	; 0xf0
 8000b9c:	f7ff fee0 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	20bb      	movs	r0, #187	; 0xbb
 8000ba4:	f7ff fedc 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	203a      	movs	r0, #58	; 0x3a
 8000bac:	f7ff fed8 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	20be      	movs	r0, #190	; 0xbe
 8000bb4:	f7ff fed4 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	203e      	movs	r0, #62	; 0x3e
 8000bbc:	f7ff fed0 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	202e      	movs	r0, #46	; 0x2e
 8000bc4:	f7ff fecc 	bl	8000960 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8000bc8:	2100      	movs	r1, #0
 8000bca:	20af      	movs	r0, #175	; 0xaf
 8000bcc:	f7ff fec8 	bl	8000960 <ssd1331_write_byte>

  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff ff35 	bl	8000a40 <ssd1331_clear_screen>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	48000400 	.word	0x48000400

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b09e      	sub	sp, #120	; 0x78
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2254      	movs	r2, #84	; 0x54
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fb1c 	bl	8005286 <memset>
  if(hadc->Instance==ADC1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a25      	ldr	r2, [pc, #148]	; (8000ce8 <HAL_ADC_MspInit+0xc0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d143      	bne.n	8000ce0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c64:	2301      	movs	r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c70:	2307      	movs	r3, #7
 8000c72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4618      	mov	r0, r3
 8000c88:	f002 fa48 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000c92:	f7ff fe5f 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_ADC_MspInit+0xc4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cca:	230b      	movs	r3, #11
 8000ccc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f001 f9f0 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3778      	adds	r7, #120	; 0x78
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	50040000 	.word	0x50040000
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d129      	bne.n	8000d66 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <HAL_SPI_MspInit+0x84>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8000d42:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d54:	2305      	movs	r3, #5
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f001 f9ad 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40013000 	.word	0x40013000
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x38>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10b      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_TIM_Base_MspInit+0x3c>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40012c00 	.word	0x40012c00
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b09e      	sub	sp, #120	; 0x78
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2254      	movs	r2, #84	; 0x54
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f004 fa54 	bl	8005286 <memset>
  if(huart->Instance==USART2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <HAL_UART_MspInit+0xcc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d148      	bne.n	8000e7a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 f991 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e00:	f7ff fda8 	bl	8000954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e20:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xd0>)
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e34:	2304      	movs	r3, #4
 8000e36:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e44:	2307      	movs	r3, #7
 8000e46:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f001 f935 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f001 f923 	bl	80020c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3778      	adds	r7, #120	; 0x78
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f93c 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	4807      	ldr	r0, [pc, #28]	; (8000f18 <_read+0x38>)
 8000efc:	f003 fba1 	bl	8004642 <HAL_UART_Receive>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	607b      	str	r3, [r7, #4]

	return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000198 	.word	0x20000198

08000f1c <_write>:

int _write(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <_write+0x40>)
 8000f38:	f003 faf9 	bl	800452e <HAL_UART_Transmit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d002      	beq.n	8000f4c <_write+0x30>
 8000f46:	7dfb      	ldrb	r3, [r7, #23]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d101      	bne.n	8000f50 <_write+0x34>
	{
		Error_Handler();
 8000f4c:	f7ff fd02 	bl	8000954 <Error_Handler>
	}

	return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000198 	.word	0x20000198

08000f60 <_close>:



int _close(int file)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f88:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_isatty>:

int _isatty(int file)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa0:	2301      	movs	r3, #1
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
	return 0;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f004 f994 	bl	8005324 <__errno>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20010000 	.word	0x20010000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000220 	.word	0x20000220
 8001030:	20000378 	.word	0x20000378

08001034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800105c:	f7ff ffea 	bl	8001034 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <LoopForever+0x6>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <LoopForever+0xe>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	; (80010a4 <LoopForever+0x16>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001086:	f004 f953 	bl	8005330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800108a:	f7ff fa6f 	bl	800056c <main>

0800108e <LoopForever>:

LoopForever:
    b LoopForever
 800108e:	e7fe      	b.n	800108e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800109c:	08005f78 	.word	0x08005f78
  ldr r2, =_sbss
 80010a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010a4:	20000374 	.word	0x20000374

080010a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC1_IRQHandler>

080010aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 ffcf 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f80e 	bl	80010dc <HAL_InitTick>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	71fb      	strb	r3, [r7, #7]
 80010ca:	e001      	b.n	80010d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010cc:	f7ff fd88 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d0:	79fb      	ldrb	r3, [r7, #7]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_InitTick+0x6c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <HAL_InitTick+0x70>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 ffcd 	bl	80020a6 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d809      	bhi.n	800112c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 ffa5 	bl	800206e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_InitTick+0x74>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e007      	b.n	800113c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e004      	b.n	800113c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e001      	b.n	800113c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	20000000 	.word	0x20000000
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	20000224 	.word	0x20000224

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000224 	.word	0x20000224

08001194 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	609a      	str	r2, [r3, #8]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	609a      	str	r2, [r3, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	3360      	adds	r3, #96	; 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <LL_ADC_SetOffset+0x44>)
 800121e:	4013      	ands	r3, r2
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	4313      	orrs	r3, r2
 800122c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001234:	bf00      	nop
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	03fff000 	.word	0x03fff000

08001244 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3360      	adds	r3, #96	; 0x60
 8001252:	461a      	mov	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3360      	adds	r3, #96	; 0x60
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b087      	sub	sp, #28
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	3330      	adds	r3, #48	; 0x30
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	0a1b      	lsrs	r3, r3, #8
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	4413      	add	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	211f      	movs	r1, #31
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	401a      	ands	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0e9b      	lsrs	r3, r3, #26
 80012de:	f003 011f 	and.w	r1, r3, #31
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3314      	adds	r3, #20
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	0e5b      	lsrs	r3, r3, #25
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	4413      	add	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	0d1b      	lsrs	r3, r3, #20
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	2107      	movs	r1, #7
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	0d1b      	lsrs	r3, r3, #20
 8001338:	f003 031f 	and.w	r3, r3, #31
 800133c:	6879      	ldr	r1, [r7, #4]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	431a      	orrs	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0318 	and.w	r3, r3, #24
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001378:	40d9      	lsrs	r1, r3
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	400b      	ands	r3, r1
 800137e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001382:	431a      	orrs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	0007ffff 	.word	0x0007ffff

0800139c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6093      	str	r3, [r2, #8]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013d4:	d101      	bne.n	80013da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001424:	d101      	bne.n	800142a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b04      	cmp	r3, #4
 8001470:	d101      	bne.n	8001476 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d101      	bne.n	800149c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e126      	b.n	8001714 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fba7 	bl	8000c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff67 	bl	80013c0 <LL_ADC_IsDeepPowerDownEnabled>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff4d 	bl	800139c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ff82 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d115      	bne.n	800153e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff66 	bl	80013e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800151c:	4b7f      	ldr	r3, [pc, #508]	; (800171c <HAL_ADC_Init+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	4a7f      	ldr	r2, [pc, #508]	; (8001720 <HAL_ADC_Init+0x274>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	3301      	adds	r3, #1
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001530:	e002      	b.n	8001538 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff64 	bl	8001410 <LL_ADC_IsInternalRegulatorEnabled>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	f043 0210 	orr.w	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155e:	f043 0201 	orr.w	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff75 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001574:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 80bf 	bne.w	8001702 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80bb 	bne.w	8001702 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001594:	f043 0202 	orr.w	r2, r3, #2
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff49 	bl	8001438 <LL_ADC_IsEnabled>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10b      	bne.n	80015c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015ac:	485d      	ldr	r0, [pc, #372]	; (8001724 <HAL_ADC_Init+0x278>)
 80015ae:	f7ff ff43 	bl	8001438 <LL_ADC_IsEnabled>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4619      	mov	r1, r3
 80015be:	485a      	ldr	r0, [pc, #360]	; (8001728 <HAL_ADC_Init+0x27c>)
 80015c0:	f7ff fde8 	bl	8001194 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7e5b      	ldrb	r3, [r3, #25]
 80015c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d106      	bne.n	8001600 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	3b01      	subs	r3, #1
 80015f8:	045b      	lsls	r3, r3, #17
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <HAL_ADC_Init+0x280>)
 8001624:	4013      	ands	r3, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	430b      	orrs	r3, r1
 800162e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff25 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 800163a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d13d      	bne.n	80016be <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d13a      	bne.n	80016be <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800164c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001654:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001664:	f023 0302 	bic.w	r3, r3, #2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	69b9      	ldr	r1, [r7, #24]
 800166e:	430b      	orrs	r3, r1
 8001670:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001678:	2b01      	cmp	r3, #1
 800167a:	d118      	bne.n	80016ae <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001686:	f023 0304 	bic.w	r3, r3, #4
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001692:	4311      	orrs	r1, r2
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800169e:	430a      	orrs	r2, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	e007      	b.n	80016be <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d10c      	bne.n	80016e0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f023 010f 	bic.w	r1, r3, #15
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
 80016de:	e007      	b.n	80016f0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 020f 	bic.w	r2, r2, #15
 80016ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	f023 0303 	bic.w	r3, r3, #3
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001700:	e007      	b.n	8001712 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001706:	f043 0210 	orr.w	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001712:	7ffb      	ldrb	r3, [r7, #31]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	053e2d63 	.word	0x053e2d63
 8001724:	50040000 	.word	0x50040000
 8001728:	50040300 	.word	0x50040300
 800172c:	fff0c007 	.word	0xfff0c007

08001730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0b6      	sub	sp, #216	; 0xd8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x22>
 800174e:	2302      	movs	r3, #2
 8001750:	e3bb      	b.n	8001eca <HAL_ADC_ConfigChannel+0x79a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe7d 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 83a0 	bne.w	8001eac <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d824      	bhi.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3b02      	subs	r3, #2
 8001782:	2b03      	cmp	r3, #3
 8001784:	d81b      	bhi.n	80017be <HAL_ADC_ConfigChannel+0x8e>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <HAL_ADC_ConfigChannel+0x5c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017a5 	.word	0x080017a5
 8001794:	080017ad 	.word	0x080017ad
 8001798:	080017b5 	.word	0x080017b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017a2:	e010      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80017a4:	2312      	movs	r3, #18
 80017a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017aa:	e00c      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80017ac:	2318      	movs	r3, #24
 80017ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017b2:	e008      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80017b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017bc:	e003      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80017be:	2306      	movs	r3, #6
 80017c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80017c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017d4:	f7ff fd67 	bl	80012a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fe3e 	bl	800145e <LL_ADC_REG_IsConversionOngoing>
 80017e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe4a 	bl	8001484 <LL_ADC_INJ_IsConversionOngoing>
 80017f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f040 81a4 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001802:	2b00      	cmp	r3, #0
 8001804:	f040 819f 	bne.w	8001b46 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	461a      	mov	r2, r3
 8001816:	f7ff fd72 	bl	80012fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00a      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6818      	ldr	r0, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6919      	ldr	r1, [r3, #16]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800184c:	f7ff fcd6 	bl	80011fc <LL_ADC_SetOffset>
 8001850:	e179      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fcf3 	bl	8001244 <LL_ADC_GetOffsetChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_ADC_ConfigChannel+0x14e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fce8 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	0e9b      	lsrs	r3, r3, #26
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	e01e      	b.n	80018bc <HAL_ADC_ConfigChannel+0x18c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcdd 	bl	8001244 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800189c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80018ac:	2320      	movs	r3, #32
 80018ae:	e004      	b.n	80018ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80018b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d105      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1a4>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	e018      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80018e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80018f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018f8:	2320      	movs	r3, #32
 80018fa:	e004      	b.n	8001906 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001906:	429a      	cmp	r2, r3
 8001908:	d106      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fcac 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fc90 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_ADC_ConfigChannel+0x214>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fc85 	bl	8001244 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	0e9b      	lsrs	r3, r3, #26
 800193e:	f003 021f 	and.w	r2, r3, #31
 8001942:	e01e      	b.n	8001982 <HAL_ADC_ConfigChannel+0x252>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc7a 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800195a:	fa93 f3a3 	rbit	r3, r3
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001962:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800196a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001972:	2320      	movs	r3, #32
 8001974:	e004      	b.n	8001980 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800198a:	2b00      	cmp	r3, #0
 800198c:	d105      	bne.n	800199a <HAL_ADC_ConfigChannel+0x26a>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0e9b      	lsrs	r3, r3, #26
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	e018      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80019ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80019b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80019be:	2320      	movs	r3, #32
 80019c0:	e004      	b.n	80019cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80019c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d106      	bne.n	80019de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc49 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fc2d 	bl	8001244 <LL_ADC_GetOffsetChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x2da>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fc22 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	e01e      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x318>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fc17 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d105      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x330>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	e014      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	e004      	b.n	8001a8a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fbea 	bl	8001270 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fbce 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x398>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fbc3 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	e017      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x3c8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2103      	movs	r1, #3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fbb8 	bl	8001244 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aea:	2320      	movs	r3, #32
 8001aec:	e003      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x3e0>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0e9b      	lsrs	r3, r3, #26
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b20:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001b22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2103      	movs	r1, #3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fb95 	bl	8001270 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc74 	bl	8001438 <LL_ADC_IsEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8140 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6819      	ldr	r1, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f7ff fbf5 	bl	8001354 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	4a8f      	ldr	r2, [pc, #572]	; (8001dac <HAL_ADC_ConfigChannel+0x67c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	f040 8131 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10b      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x46e>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	0e9b      	lsrs	r3, r3, #26
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 031f 	and.w	r3, r3, #31
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	bf94      	ite	ls
 8001b96:	2301      	movls	r3, #1
 8001b98:	2300      	movhi	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x4a2>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001bb6:	2320      	movs	r3, #32
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f003 031f 	and.w	r3, r3, #31
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d079      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_ADC_ConfigChannel+0x4c2>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	0e9b      	lsrs	r3, r3, #26
 8001be8:	3301      	adds	r3, #1
 8001bea:	069b      	lsls	r3, r3, #26
 8001bec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bf0:	e015      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x4ee>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	3301      	adds	r3, #1
 8001c18:	069b      	lsls	r3, r3, #26
 8001c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x50e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	0e9b      	lsrs	r3, r3, #26
 8001c30:	3301      	adds	r3, #1
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	e017      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x53e>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c56:	2320      	movs	r3, #32
 8001c58:	e003      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5c:	fab3 f383 	clz	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	3301      	adds	r3, #1
 8001c64:	f003 031f 	and.w	r3, r3, #31
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	ea42 0103 	orr.w	r1, r2, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10a      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x564>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0e9b      	lsrs	r3, r3, #26
 8001c84:	3301      	adds	r3, #1
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	051b      	lsls	r3, r3, #20
 8001c92:	e018      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x596>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001cac:	2320      	movs	r3, #32
 8001cae:	e003      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f003 021f 	and.w	r2, r3, #31
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	e081      	b.n	8001dce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x5b6>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	0e9b      	lsrs	r3, r3, #26
 8001cdc:	3301      	adds	r3, #1
 8001cde:	069b      	lsls	r3, r3, #26
 8001ce0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce4:	e015      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x5e2>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	e003      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	069b      	lsls	r3, r3, #26
 8001d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x602>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	3301      	adds	r3, #1
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	e017      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x632>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d4a:	2320      	movs	r3, #32
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	ea42 0103 	orr.w	r1, r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x65e>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0e9b      	lsrs	r3, r3, #26
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f003 021f 	and.w	r2, r3, #31
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	3b1e      	subs	r3, #30
 8001d86:	051b      	lsls	r3, r3, #20
 8001d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x69c>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d104      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e006      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x688>
 8001daa:	bf00      	nop
 8001dac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fab3 f383 	clz	r3, r3
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dcc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7ff fa93 	bl	80012fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d06c      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001de4:	483c      	ldr	r0, [pc, #240]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001de6:	f7ff f9fb 	bl	80011e0 <LL_ADC_GetCommonPathInternalCh>
 8001dea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3a      	ldr	r2, [pc, #232]	; (8001edc <HAL_ADC_ConfigChannel+0x7ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d127      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001df8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d121      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d157      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e16:	4619      	mov	r1, r3
 8001e18:	482f      	ldr	r0, [pc, #188]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e1a:	f7ff f9ce 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_ADC_ConfigChannel+0x7b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	4a30      	ldr	r2, [pc, #192]	; (8001ee8 <HAL_ADC_ConfigChannel+0x7b8>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e38:	e002      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f9      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e46:	e03a      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <HAL_ADC_ConfigChannel+0x7bc>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d113      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d12a      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e70:	4619      	mov	r1, r3
 8001e72:	4819      	ldr	r0, [pc, #100]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001e74:	f7ff f9a1 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e78:	e021      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d11c      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d116      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_ADC_ConfigChannel+0x7b0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d111      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001ea6:	f7ff f988 	bl	80011ba <LL_ADC_SetCommonPathInternalCh>
 8001eaa:	e008      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ec6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	37d8      	adds	r7, #216	; 0xd8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	80080000 	.word	0x80080000
 8001ed8:	50040300 	.word	0x50040300
 8001edc:	c7520000 	.word	0xc7520000
 8001ee0:	50040000 	.word	0x50040000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	053e2d63 	.word	0x053e2d63
 8001eec:	cb840000 	.word	0xcb840000
 8001ef0:	80000001 	.word	0x80000001

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff47 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff5c 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffb0 	bl	8002014 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	e148      	b.n	8002362 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 813a 	beq.w	800235c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_Init+0x40>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d130      	bne.n	8002162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 0201 	and.w	r2, r3, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d123      	bne.n	80021f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8094 	beq.w	800235c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_GPIO_Init+0x2c0>)
 8002236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002238:	4a51      	ldr	r2, [pc, #324]	; (8002380 <HAL_GPIO_Init+0x2c0>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6613      	str	r3, [r2, #96]	; 0x60
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_GPIO_Init+0x2c0>)
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800224c:	4a4d      	ldr	r2, [pc, #308]	; (8002384 <HAL_GPIO_Init+0x2c4>)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	220f      	movs	r2, #15
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002276:	d00d      	beq.n	8002294 <HAL_GPIO_Init+0x1d4>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a43      	ldr	r2, [pc, #268]	; (8002388 <HAL_GPIO_Init+0x2c8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <HAL_GPIO_Init+0x1d0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_GPIO_Init+0x2cc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_GPIO_Init+0x1cc>
 8002288:	2302      	movs	r3, #2
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1d6>
 800228c:	2307      	movs	r3, #7
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1d6>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1d6>
 8002294:	2300      	movs	r3, #0
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022a6:	4937      	ldr	r1, [pc, #220]	; (8002384 <HAL_GPIO_Init+0x2c4>)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022d8:	4a2d      	ldr	r2, [pc, #180]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002302:	4a23      	ldr	r2, [pc, #140]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800232c:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <HAL_GPIO_Init+0x2d0>)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f aeaf 	bne.w	80020d0 <HAL_GPIO_Init+0x10>
  }
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40021000 	.word	0x40021000
 8002384:	40010000 	.word	0x40010000
 8002388:	48000400 	.word	0x48000400
 800238c:	48000800 	.word	0x48000800
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40007000 	.word	0x40007000

08002400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240e:	d130      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241c:	d038      	beq.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2232      	movs	r2, #50	; 0x32
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	3301      	adds	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002444:	e002      	b.n	800244c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3b01      	subs	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d102      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x60>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f2      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d110      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e00f      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d007      	beq.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40007000 	.word	0x40007000
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bc02 	b.w	8002cc4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 030c 	and.w	r3, r3, #12
 80024c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ca:	4b94      	ldr	r3, [pc, #592]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80e4 	beq.w	80026aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4c>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	2b0c      	cmp	r3, #12
 80024ec:	f040 808b 	bne.w	8002606 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 8087 	bne.w	8002606 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f8:	4b88      	ldr	r3, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <HAL_RCC_OscConfig+0x64>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e3d9      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1a      	ldr	r2, [r3, #32]
 8002514:	4b81      	ldr	r3, [pc, #516]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_RCC_OscConfig+0x7e>
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002528:	e005      	b.n	8002536 <HAL_RCC_OscConfig+0x8a>
 800252a:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800252c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002536:	4293      	cmp	r3, r2
 8002538:	d223      	bcs.n	8002582 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fd8c 	bl	800305c <RCC_SetFlashLatencyFromMSIRange>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e3ba      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a72      	ldr	r2, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	496d      	ldr	r1, [pc, #436]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256c:	4b6b      	ldr	r3, [pc, #428]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	4968      	ldr	r1, [pc, #416]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e025      	b.n	80025ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002582:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002588:	f043 0308 	orr.w	r3, r3, #8
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4960      	ldr	r1, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	495b      	ldr	r1, [pc, #364]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fd4c 	bl	800305c <RCC_SetFlashLatencyFromMSIRange>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e37a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ce:	f000 fc81 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b51      	ldr	r3, [pc, #324]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	4950      	ldr	r1, [pc, #320]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_RCC_OscConfig+0x278>)
 80025ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ee:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fd72 	bl	80010dc <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d052      	beq.n	80026a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	e35e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d032      	beq.n	8002674 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a42      	ldr	r2, [pc, #264]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800261a:	f7fe fdaf 	bl	800117c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002622:	f7fe fdab 	bl	800117c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e347      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a35      	ldr	r2, [pc, #212]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002646:	f043 0308 	orr.w	r3, r3, #8
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b33      	ldr	r3, [pc, #204]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4930      	ldr	r1, [pc, #192]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	492b      	ldr	r1, [pc, #172]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
 8002672:	e01a      	b.n	80026aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002680:	f7fe fd7c 	bl	800117c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002688:	f7fe fd78 	bl	800117c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e314      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1dc>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d073      	beq.n	800279e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x21c>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	2b0c      	cmp	r3, #12
 80026c0:	d10e      	bne.n	80026e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d063      	beq.n	800279c <HAL_RCC_OscConfig+0x2f0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d15f      	bne.n	800279c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e2f1      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x24c>
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e025      	b.n	8002744 <HAL_RCC_OscConfig+0x298>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002700:	d114      	bne.n	800272c <HAL_RCC_OscConfig+0x280>
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a02      	ldr	r2, [pc, #8]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e013      	b.n	8002744 <HAL_RCC_OscConfig+0x298>
 800271c:	40021000 	.word	0x40021000
 8002720:	08005eec 	.word	0x08005eec
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004
 800272c:	4ba0      	ldr	r3, [pc, #640]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a9f      	ldr	r2, [pc, #636]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b9d      	ldr	r3, [pc, #628]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a9c      	ldr	r2, [pc, #624]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fd16 	bl	800117c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7fe fd12 	bl	800117c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e2ae      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002766:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x2a8>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fd02 	bl	800117c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fcfe 	bl	800117c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e29a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x2d0>
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d060      	beq.n	800286c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x310>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d116      	bne.n	80027ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x328>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e277      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4973      	ldr	r1, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	e040      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d023      	beq.n	800283a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fcbd 	bl	800117c <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fcb9 	bl	800117c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e255      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	495f      	ldr	r1, [pc, #380]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	e018      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fc99 	bl	800117c <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fc95 	bl	800117c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e231      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d03c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	4a4a      	ldr	r2, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fc74 	bl	800117c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fc70 	bl	800117c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e20c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCC_OscConfig+0x3ec>
 80028b8:	e01b      	b.n	80028f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe fc57 	bl	800117c <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe fc53 	bl	800117c <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1ef      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ef      	bne.n	80028d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a6 	beq.w	8002a4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10d      	bne.n	800292c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002928:	2301      	movs	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d118      	bne.n	800296a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002944:	f7fe fc1a 	bl	800117c <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe fc16 	bl	800117c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e1b2      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x4d8>
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002982:	e029      	b.n	80029d8 <HAL_RCC_OscConfig+0x52c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d115      	bne.n	80029b8 <HAL_RCC_OscConfig+0x50c>
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x52c>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	4b9a      	ldr	r3, [pc, #616]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a99      	ldr	r2, [pc, #612]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c8:	4b96      	ldr	r3, [pc, #600]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a95      	ldr	r2, [pc, #596]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe fbcc 	bl	800117c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe fbc8 	bl	800117c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e162      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	4b89      	ldr	r3, [pc, #548]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ed      	beq.n	80029e8 <HAL_RCC_OscConfig+0x53c>
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fbb5 	bl	800117c <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe fbb1 	bl	800117c <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e14b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a2c:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ed      	bne.n	8002a16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b78      	ldr	r3, [pc, #480]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a77      	ldr	r2, [pc, #476]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03c      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01c      	beq.n	8002a9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a66:	4a6f      	ldr	r2, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fb84 	bl	800117c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a78:	f7fe fb80 	bl	800117c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e11c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a8a:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ef      	beq.n	8002a78 <HAL_RCC_OscConfig+0x5cc>
 8002a98:	e01b      	b.n	8002ad2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a9a:	4b62      	ldr	r3, [pc, #392]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa0:	4a60      	ldr	r2, [pc, #384]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fb67 	bl	800117c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ab2:	f7fe fb63 	bl	800117c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0ff      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac4:	4b57      	ldr	r3, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1ef      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80f3 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	f040 80c9 	bne.w	8002c78 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ae6:	4b4f      	ldr	r3, [pc, #316]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f003 0203 	and.w	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d12c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	3b01      	subs	r3, #1
 8002b06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d123      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d11b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d113      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d06b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d062      	beq.n	8002c20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b5a:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0ac      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b76:	f7fe fb01 	bl	800117c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fafd 	bl	800117c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e099      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCC_OscConfig+0x77c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bb6:	0212      	lsls	r2, r2, #8
 8002bb8:	4311      	orrs	r1, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bbe:	0852      	lsrs	r2, r2, #1
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	0552      	lsls	r2, r2, #21
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0652      	lsls	r2, r2, #25
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd6:	06d2      	lsls	r2, r2, #27
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bf8:	f7fe fac0 	bl	800117c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fabc 	bl	800117c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e058      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1e:	e050      	b.n	8002cc2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e04f      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d144      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c50:	f7fe fa94 	bl	800117c <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fa90 	bl	800117c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e02c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x7ac>
 8002c76:	e024      	b.n	8002cc2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d01f      	beq.n	8002cbe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8a:	f7fe fa77 	bl	800117c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c92:	f7fe fa73 	bl	800117c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	4905      	ldr	r1, [pc, #20]	; (8002ccc <HAL_RCC_OscConfig+0x820>)
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_RCC_OscConfig+0x824>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60cb      	str	r3, [r1, #12]
 8002cbc:	e001      	b.n	8002cc2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	feeefffc 	.word	0xfeeefffc

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0e7      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b75      	ldr	r3, [pc, #468]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d910      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 0207 	bic.w	r2, r3, #7
 8002cfe:	4970      	ldr	r1, [pc, #448]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b6e      	ldr	r3, [pc, #440]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cf      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d908      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	4960      	ldr	r1, [pc, #384]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d04c      	beq.n	8002dec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5a:	4b5a      	ldr	r3, [pc, #360]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d121      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e0a6      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d72:	4b54      	ldr	r3, [pc, #336]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d115      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e09a      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8a:	4b4e      	ldr	r3, [pc, #312]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e08e      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e086      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4943      	ldr	r1, [pc, #268]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbc:	f7fe f9de 	bl	800117c <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc4:	f7fe f9da 	bl	800117c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e06e      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 020c 	and.w	r2, r3, #12
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d1eb      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d208      	bcs.n	8002e1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	492b      	ldr	r1, [pc, #172]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d210      	bcs.n	8002e4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 0207 	bic.w	r2, r3, #7
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d001      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e036      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4918      	ldr	r1, [pc, #96]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4910      	ldr	r1, [pc, #64]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e88:	f000 f824 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1f8>)
 8002ea6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe f915 	bl	80010dc <HAL_InitTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08005eec 	.word	0x08005eec
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x34>
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d11e      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f14:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e005      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f30:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e004      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d134      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f62:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d003      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0xac>
 8002f78:	e005      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f7c:	617b      	str	r3, [r7, #20]
      break;
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f82:	617b      	str	r3, [r7, #20]
      break;
 8002f84:	e002      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	617b      	str	r3, [r7, #20]
      break;
 8002f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	091b      	lsrs	r3, r3, #4
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	3301      	adds	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	fb03 f202 	mul.w	r2, r3, r2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	0e5b      	lsrs	r3, r3, #25
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3724      	adds	r7, #36	; 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	08005f04 	.word	0x08005f04
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	007a1200 	.word	0x007a1200

08002fec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000000 	.word	0x20000000

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003008:	f7ff fff0 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4904      	ldr	r1, [pc, #16]	; (800302c <HAL_RCC_GetPCLK1Freq+0x28>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	08005efc 	.word	0x08005efc

08003030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003034:	f7ff ffda 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0adb      	lsrs	r3, r3, #11
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4904      	ldr	r1, [pc, #16]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08005efc 	.word	0x08005efc

0800305c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003068:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003074:	f7ff f9b6 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 8003078:	6178      	str	r0, [r7, #20]
 800307a:	e014      	b.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	4a24      	ldr	r2, [pc, #144]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003086:	6593      	str	r3, [r2, #88]	; 0x58
 8003088:	4b22      	ldr	r3, [pc, #136]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003094:	f7ff f9a6 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 8003098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ac:	d10b      	bne.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b80      	cmp	r3, #128	; 0x80
 80030b2:	d919      	bls.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2ba0      	cmp	r3, #160	; 0xa0
 80030b8:	d902      	bls.n	80030c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ba:	2302      	movs	r3, #2
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	e013      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e010      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d902      	bls.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030cc:	2303      	movs	r3, #3
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e00a      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d102      	bne.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d8:	2302      	movs	r3, #2
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e004      	b.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b70      	cmp	r3, #112	; 0x70
 80030e2:	d101      	bne.n	80030e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e4:	2301      	movs	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f023 0207 	bic.w	r2, r3, #7
 80030f0:	4909      	ldr	r1, [pc, #36]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d001      	beq.n	800310a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	40022000 	.word	0x40022000

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003124:	2300      	movs	r3, #0
 8003126:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003128:	2300      	movs	r3, #0
 800312a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003134:	2b00      	cmp	r3, #0
 8003136:	d031      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003140:	d01a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003142:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003146:	d814      	bhi.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800314c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003150:	d10f      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4a5c      	ldr	r2, [pc, #368]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315e:	e00c      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f9de 	bl	8003528 <RCCEx_PLLSAI1_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003170:	e003      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	74fb      	strb	r3, [r7, #19]
      break;
 8003176:	e000      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003180:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	494e      	ldr	r1, [pc, #312]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003196:	e001      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 809e 	beq.w	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ae:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00d      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c4:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c8:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58
 80031d0:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031dc:	2301      	movs	r3, #1
 80031de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a39      	ldr	r2, [pc, #228]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ec:	f7fd ffc6 	bl	800117c <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031f2:	e009      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f4:	f7fd ffc2 	bl	800117c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d902      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	74fb      	strb	r3, [r7, #19]
        break;
 8003206:	e005      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003214:	7cfb      	ldrb	r3, [r7, #19]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d15a      	bne.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003224:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01e      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	429a      	cmp	r2, r3
 8003234:	d019      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003236:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003240:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003242:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003252:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d016      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd ff82 	bl	800117c <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327a:	e00b      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f7fd ff7e 	bl	800117c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d902      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	74fb      	strb	r3, [r7, #19]
            break;
 8003292:	e006      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0ec      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b6:	4904      	ldr	r1, [pc, #16]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032be:	e009      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032c0:	7cfb      	ldrb	r3, [r7, #19]
 80032c2:	74bb      	strb	r3, [r7, #18]
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d4:	7c7b      	ldrb	r3, [r7, #17]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d105      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b8a      	ldr	r3, [pc, #552]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	4a89      	ldr	r2, [pc, #548]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f2:	4b84      	ldr	r3, [pc, #528]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f8:	f023 0203 	bic.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4980      	ldr	r1, [pc, #512]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003314:	4b7b      	ldr	r3, [pc, #492]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331a:	f023 020c 	bic.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	4978      	ldr	r1, [pc, #480]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003336:	4b73      	ldr	r3, [pc, #460]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	496f      	ldr	r1, [pc, #444]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003366:	4967      	ldr	r1, [pc, #412]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800337a:	4b62      	ldr	r3, [pc, #392]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	495e      	ldr	r1, [pc, #376]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339c:	4b59      	ldr	r3, [pc, #356]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	4956      	ldr	r1, [pc, #344]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033be:	4b51      	ldr	r3, [pc, #324]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	494d      	ldr	r1, [pc, #308]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d028      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e0:	4b48      	ldr	r3, [pc, #288]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4945      	ldr	r1, [pc, #276]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033fe:	d106      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a3f      	ldr	r2, [pc, #252]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003406:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340a:	60d3      	str	r3, [r2, #12]
 800340c:	e011      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003416:	d10c      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f882 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d028      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	492d      	ldr	r1, [pc, #180]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345c:	d106      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003468:	60d3      	str	r3, [r2, #12]
 800346a:	e011      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f853 	bl	8003528 <RCCEx_PLLSAI1_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01c      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	4916      	ldr	r1, [pc, #88]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f830 	bl	8003528 <RCCEx_PLLSAI1_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	4904      	ldr	r1, [pc, #16]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40021000 	.word	0x40021000

08003528 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003536:	4b74      	ldr	r3, [pc, #464]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d018      	beq.n	8003574 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003542:	4b71      	ldr	r3, [pc, #452]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0203 	and.w	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
       ||
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800355a:	4b6b      	ldr	r3, [pc, #428]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
       ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d047      	beq.n	80035fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	e044      	b.n	80035fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d018      	beq.n	80035ae <RCCEx_PLLSAI1_Config+0x86>
 800357c:	2b03      	cmp	r3, #3
 800357e:	d825      	bhi.n	80035cc <RCCEx_PLLSAI1_Config+0xa4>
 8003580:	2b01      	cmp	r3, #1
 8003582:	d002      	beq.n	800358a <RCCEx_PLLSAI1_Config+0x62>
 8003584:	2b02      	cmp	r3, #2
 8003586:	d009      	beq.n	800359c <RCCEx_PLLSAI1_Config+0x74>
 8003588:	e020      	b.n	80035cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11d      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359a:	e01a      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800359c:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ac:	e013      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ae:	4b56      	ldr	r3, [pc, #344]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ba:	4b53      	ldr	r3, [pc, #332]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ca:	e006      	b.n	80035da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e004      	b.n	80035dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035da:	bf00      	nop
    }

    if(status == HAL_OK)
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035e2:	4b49      	ldr	r3, [pc, #292]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	430b      	orrs	r3, r1
 80035f8:	4943      	ldr	r1, [pc, #268]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d17c      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003604:	4b40      	ldr	r3, [pc, #256]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800360a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800360e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003610:	f7fd fdb4 	bl	800117c <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003616:	e009      	b.n	800362c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003618:	f7fd fdb0 	bl	800117c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	73fb      	strb	r3, [r7, #15]
        break;
 800362a:	e005      	b.n	8003638 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800362c:	4b36      	ldr	r3, [pc, #216]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1ef      	bne.n	8003618 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d15f      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d110      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800364c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	0211      	lsls	r1, r2, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	06d2      	lsls	r2, r2, #27
 800365c:	430a      	orrs	r2, r1
 800365e:	492a      	ldr	r1, [pc, #168]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]
 8003664:	e027      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d112      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366c:	4b26      	ldr	r3, [pc, #152]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003674:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	0211      	lsls	r1, r2, #8
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6912      	ldr	r2, [r2, #16]
 8003682:	0852      	lsrs	r2, r2, #1
 8003684:	3a01      	subs	r2, #1
 8003686:	0552      	lsls	r2, r2, #21
 8003688:	430a      	orrs	r2, r1
 800368a:	491f      	ldr	r1, [pc, #124]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	610b      	str	r3, [r1, #16]
 8003690:	e011      	b.n	80036b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003692:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800369a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6952      	ldr	r2, [r2, #20]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0652      	lsls	r2, r2, #25
 80036ae:	430a      	orrs	r2, r1
 80036b0:	4915      	ldr	r1, [pc, #84]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fd fd5b 	bl	800117c <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c8:	e009      	b.n	80036de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ca:	f7fd fd57 	bl	800117c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d902      	bls.n	80036de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	73fb      	strb	r3, [r7, #15]
          break;
 80036dc:	e005      	b.n	80036ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40021000 	.word	0x40021000

0800370c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e095      	b.n	800384a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d108      	bne.n	8003738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800372e:	d009      	beq.n	8003744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
 8003736:	e005      	b.n	8003744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fac6 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003784:	d902      	bls.n	800378c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e002      	b.n	8003792 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800378c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003790:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800379a:	d007      	beq.n	80037ac <HAL_SPI_Init+0xa0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ee:	ea42 0103 	orr.w	r1, r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	f003 0204 	and.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003828:	ea42 0103 	orr.w	r1, r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b088      	sub	sp, #32
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_SPI_Transmit+0x22>
 8003870:	2302      	movs	r3, #2
 8003872:	e15f      	b.n	8003b34 <HAL_SPI_Transmit+0x2e2>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800387c:	f7fd fc7e 	bl	800117c <HAL_GetTick>
 8003880:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d002      	beq.n	8003898 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003896:	e148      	b.n	8003b2a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_SPI_Transmit+0x52>
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038a8:	e13f      	b.n	8003b2a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2203      	movs	r2, #3
 80038ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f4:	d10f      	bne.n	8003916 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003914:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d007      	beq.n	8003934 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800393c:	d94f      	bls.n	80039de <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_SPI_Transmit+0xfa>
 8003946:	8afb      	ldrh	r3, [r7, #22]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d142      	bne.n	80039d2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	881a      	ldrh	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	1c9a      	adds	r2, r3, #2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003970:	e02f      	b.n	80039d2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b02      	cmp	r3, #2
 800397e:	d112      	bne.n	80039a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	881a      	ldrh	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039a4:	e015      	b.n	80039d2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039a6:	f7fd fbe9 	bl	800117c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d803      	bhi.n	80039be <HAL_SPI_Transmit+0x16c>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d102      	bne.n	80039c4 <HAL_SPI_Transmit+0x172>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80039d0:	e0ab      	b.n	8003b2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ca      	bne.n	8003972 <HAL_SPI_Transmit+0x120>
 80039dc:	e080      	b.n	8003ae0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_SPI_Transmit+0x19a>
 80039e6:	8afb      	ldrh	r3, [r7, #22]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d174      	bne.n	8003ad6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d912      	bls.n	8003a1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	881a      	ldrh	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b02      	subs	r3, #2
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1a:	e05c      	b.n	8003ad6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	7812      	ldrb	r2, [r2, #0]
 8003a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a42:	e048      	b.n	8003ad6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d12b      	bne.n	8003aaa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d912      	bls.n	8003a82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b02      	subs	r3, #2
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a80:	e029      	b.n	8003ad6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	7812      	ldrb	r2, [r2, #0]
 8003a8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aa8:	e015      	b.n	8003ad6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aaa:	f7fd fb67 	bl	800117c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d803      	bhi.n	8003ac2 <HAL_SPI_Transmit+0x270>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Transmit+0x276>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ad4:	e029      	b.n	8003b2a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1b1      	bne.n	8003a44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	6839      	ldr	r1, [r7, #0]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f947 	bl	8003d78 <SPI_EndRxTxTransaction>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e003      	b.n	8003b2a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b4c:	f7fd fb16 	bl	800117c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	4413      	add	r3, r2
 8003b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b5c:	f7fd fb0e 	bl	800117c <HAL_GetTick>
 8003b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b62:	4b39      	ldr	r3, [pc, #228]	; (8003c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	015b      	lsls	r3, r3, #5
 8003b68:	0d1b      	lsrs	r3, r3, #20
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b72:	e054      	b.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d050      	beq.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b7c:	f7fd fafe 	bl	800117c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d902      	bls.n	8003b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d13d      	bne.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003baa:	d111      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	d004      	beq.n	8003bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d107      	bne.n	8003bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd8:	d10f      	bne.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e017      	b.n	8003c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4013      	ands	r3, r2
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	bf0c      	ite	eq
 8003c2e:	2301      	moveq	r3, #1
 8003c30:	2300      	movne	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	461a      	mov	r2, r3
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d19b      	bne.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000000 	.word	0x20000000

08003c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c5e:	f7fd fa8d 	bl	800117c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c6e:	f7fd fa85 	bl	800117c <HAL_GetTick>
 8003c72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c7c:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00da      	lsls	r2, r3, #3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	0d1b      	lsrs	r3, r3, #20
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c94:	e060      	b.n	8003d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c9c:	d107      	bne.n	8003cae <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d050      	beq.n	8003d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb6:	f7fd fa61 	bl	800117c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d902      	bls.n	8003ccc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d13d      	bne.n	8003d48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce4:	d111      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cee:	d004      	beq.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	d107      	bne.n	8003d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d12:	d10f      	bne.n	8003d34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e010      	b.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d196      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000000 	.word	0x20000000

08003d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff ff5b 	bl	8003c4c <SPI_WaitFifoStateUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e027      	b.n	8003dfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2180      	movs	r1, #128	; 0x80
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fec0 	bl	8003b3c <SPI_WaitFlagStateUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e014      	b.n	8003dfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7ff ff34 	bl	8003c4c <SPI_WaitFifoStateUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e000      	b.n	8003dfc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e049      	b.n	8003eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc ffa4 	bl	8000d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	4619      	mov	r1, r3
 8003e42:	4610      	mov	r0, r2
 8003e44:	f000 f8fe 	bl	8004044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b084      	sub	sp, #16
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_ConfigClockSource+0x1c>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e0b6      	b.n	800403c <HAL_TIM_ConfigClockSource+0x18a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0a:	d03e      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xd8>
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	f200 8087 	bhi.w	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f18:	f000 8086 	beq.w	8004028 <HAL_TIM_ConfigClockSource+0x176>
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d87f      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f22:	2b70      	cmp	r3, #112	; 0x70
 8003f24:	d01a      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xaa>
 8003f26:	2b70      	cmp	r3, #112	; 0x70
 8003f28:	d87b      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f2a:	2b60      	cmp	r3, #96	; 0x60
 8003f2c:	d050      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0x11e>
 8003f2e:	2b60      	cmp	r3, #96	; 0x60
 8003f30:	d877      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f32:	2b50      	cmp	r3, #80	; 0x50
 8003f34:	d03c      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0xfe>
 8003f36:	2b50      	cmp	r3, #80	; 0x50
 8003f38:	d873      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d058      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0x13e>
 8003f3e:	2b40      	cmp	r3, #64	; 0x40
 8003f40:	d86f      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f42:	2b30      	cmp	r3, #48	; 0x30
 8003f44:	d064      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15e>
 8003f46:	2b30      	cmp	r3, #48	; 0x30
 8003f48:	d86b      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d060      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15e>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d867      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d05c      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15e>
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d05a      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15e>
 8003f5a:	e062      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	f000 f948 	bl	8004200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e04f      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	f000 f931 	bl	8004200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fac:	609a      	str	r2, [r3, #8]
      break;
 8003fae:	e03c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f000 f8a5 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2150      	movs	r1, #80	; 0x50
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f8fe 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003fce:	e02c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f000 f8c4 	bl	800416a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2160      	movs	r1, #96	; 0x60
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f8ee 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003fee:	e01c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 f885 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2140      	movs	r1, #64	; 0x40
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f8de 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 800400e:	e00c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 f8d5 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8004020:	e003      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      break;
 8004026:	e000      	b.n	800402a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004028:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <TIM_Base_SetConfig+0xbc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <TIM_Base_SetConfig+0x20>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004062:	d108      	bne.n	8004076 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a21      	ldr	r2, [pc, #132]	; (8004100 <TIM_Base_SetConfig+0xbc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0x52>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0x52>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <TIM_Base_SetConfig+0xc0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0x52>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1d      	ldr	r2, [pc, #116]	; (8004108 <TIM_Base_SetConfig+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a0c      	ldr	r2, [pc, #48]	; (8004100 <TIM_Base_SetConfig+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_Base_SetConfig+0xa0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <TIM_Base_SetConfig+0xc0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_Base_SetConfig+0xa0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <TIM_Base_SetConfig+0xc4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d103      	bne.n	80040ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	615a      	str	r2, [r3, #20]
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f023 0210 	bic.w	r2, r3, #16
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_TIMEx_PWMN_Start+0x24>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e022      	b.n	80042aa <HAL_TIMEx_PWMN_Start+0x6a>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b04      	cmp	r3, #4
 8004268:	d109      	bne.n	800427e <HAL_TIMEx_PWMN_Start+0x3e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b01      	cmp	r3, #1
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e015      	b.n	80042aa <HAL_TIMEx_PWMN_Start+0x6a>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d109      	bne.n	8004298 <HAL_TIMEx_PWMN_Start+0x58>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e008      	b.n	80042aa <HAL_TIMEx_PWMN_Start+0x6a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e05a      	b.n	8004368 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d104      	bne.n	80042c2 <HAL_TIMEx_PWMN_Start+0x82>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c0:	e013      	b.n	80042ea <HAL_TIMEx_PWMN_Start+0xaa>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d104      	bne.n	80042d2 <HAL_TIMEx_PWMN_Start+0x92>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042d0:	e00b      	b.n	80042ea <HAL_TIMEx_PWMN_Start+0xaa>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d104      	bne.n	80042e2 <HAL_TIMEx_PWMN_Start+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e0:	e003      	b.n	80042ea <HAL_TIMEx_PWMN_Start+0xaa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2204      	movs	r2, #4
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f8a8 	bl	8004448 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004306:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	; (8004370 <HAL_TIMEx_PWMN_Start+0x130>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0xe6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d004      	beq.n	8004326 <HAL_TIMEx_PWMN_Start+0xe6>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <HAL_TIMEx_PWMN_Start+0x134>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d115      	bne.n	8004352 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	4b12      	ldr	r3, [pc, #72]	; (8004378 <HAL_TIMEx_PWMN_Start+0x138>)
 800432e:	4013      	ands	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d015      	beq.n	8004364 <HAL_TIMEx_PWMN_Start+0x124>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433e:	d011      	beq.n	8004364 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004350:	e008      	b.n	8004364 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e000      	b.n	8004366 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40014000 	.word	0x40014000
 8004378:	00010007 	.word	0x00010007

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e04f      	b.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a21      	ldr	r2, [pc, #132]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a14      	ldr	r2, [pc, #80]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d004      	beq.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10c      	bne.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800440e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	4313      	orrs	r3, r2
 8004418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40014000 	.word	0x40014000

08004448 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	2204      	movs	r2, #4
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	43db      	mvns	r3, r3
 800446a:	401a      	ands	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	621a      	str	r2, [r3, #32]
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e040      	b.n	8004526 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fc fc7f 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2224      	movs	r2, #36	; 0x24
 80044be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0201 	bic.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fba7 	bl	8004c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f978 	bl	80047d4 <UART_SetConfig>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e01b      	b.n	8004526 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800450c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fc26 	bl	8004d70 <UART_CheckIdleState>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004542:	2b20      	cmp	r3, #32
 8004544:	d178      	bne.n	8004638 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_Transmit+0x24>
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e071      	b.n	800463a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	; 0x21
 8004562:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004564:	f7fc fe0a 	bl	800117c <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004582:	d108      	bne.n	8004596 <HAL_UART_Transmit+0x68>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d104      	bne.n	8004596 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e003      	b.n	800459e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800459e:	e030      	b.n	8004602 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2180      	movs	r1, #128	; 0x80
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fc88 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e03c      	b.n	800463a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10b      	bne.n	80045de <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d2:	b292      	uxth	r2, r2
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3302      	adds	r3, #2
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e008      	b.n	80045f0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	b292      	uxth	r2, r2
 80045e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	3301      	adds	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1c8      	bne.n	80045a0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	2140      	movs	r1, #64	; 0x40
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 fc51 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e005      	b.n	800463a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b08a      	sub	sp, #40	; 0x28
 8004646:	af02      	add	r7, sp, #8
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004658:	2b20      	cmp	r3, #32
 800465a:	f040 80b6 	bne.w	80047ca <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HAL_UART_Receive+0x28>
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e0ae      	b.n	80047cc <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2222      	movs	r2, #34	; 0x22
 800467a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004684:	f7fc fd7a 	bl	800117c <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d10e      	bne.n	80046c2 <HAL_UART_Receive+0x80>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_UART_Receive+0x76>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b6:	e02d      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046c0:	e028      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <HAL_UART_Receive+0xa4>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_UART_Receive+0x9a>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	22ff      	movs	r2, #255	; 0xff
 80046d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046da:	e01b      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	227f      	movs	r2, #127	; 0x7f
 80046e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046e4:	e016      	b.n	8004714 <HAL_UART_Receive+0xd2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046ee:	d10d      	bne.n	800470c <HAL_UART_Receive+0xca>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_UART_Receive+0xc0>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	227f      	movs	r2, #127	; 0x7f
 80046fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004700:	e008      	b.n	8004714 <HAL_UART_Receive+0xd2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470a:	e003      	b.n	8004714 <HAL_UART_Receive+0xd2>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800471a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Receive+0xf6>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004740:	e037      	b.n	80047b2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2120      	movs	r1, #32
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fbb7 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e033      	b.n	80047cc <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10c      	bne.n	8004784 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004770:	b29a      	uxth	r2, r3
 8004772:	8a7b      	ldrh	r3, [r7, #18]
 8004774:	4013      	ands	r3, r2
 8004776:	b29a      	uxth	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	3302      	adds	r3, #2
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	e00d      	b.n	80047a0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800478a:	b29b      	uxth	r3, r3
 800478c:	b2da      	uxtb	r2, r3
 800478e:	8a7b      	ldrh	r3, [r7, #18]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	4013      	ands	r3, r2
 8004794:	b2da      	uxtb	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3301      	adds	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1c1      	bne.n	8004742 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4bb4      	ldr	r3, [pc, #720]	; (8004ad4 <UART_SetConfig+0x300>)
 8004804:	4013      	ands	r3, r2
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800480c:	430b      	orrs	r3, r1
 800480e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4aa9      	ldr	r2, [pc, #676]	; (8004ad8 <UART_SetConfig+0x304>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	4313      	orrs	r3, r2
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004850:	430a      	orrs	r2, r1
 8004852:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4aa0      	ldr	r2, [pc, #640]	; (8004adc <UART_SetConfig+0x308>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d126      	bne.n	80048ac <UART_SetConfig+0xd8>
 800485e:	4ba0      	ldr	r3, [pc, #640]	; (8004ae0 <UART_SetConfig+0x30c>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d81b      	bhi.n	80048a4 <UART_SetConfig+0xd0>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <UART_SetConfig+0xa0>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	08004895 	.word	0x08004895
 800487c:	0800488d 	.word	0x0800488d
 8004880:	0800489d 	.word	0x0800489d
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e080      	b.n	800498e <UART_SetConfig+0x1ba>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e07c      	b.n	800498e <UART_SetConfig+0x1ba>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489a:	e078      	b.n	800498e <UART_SetConfig+0x1ba>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a2:	e074      	b.n	800498e <UART_SetConfig+0x1ba>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048aa:	e070      	b.n	800498e <UART_SetConfig+0x1ba>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a8c      	ldr	r2, [pc, #560]	; (8004ae4 <UART_SetConfig+0x310>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d138      	bne.n	8004928 <UART_SetConfig+0x154>
 80048b6:	4b8a      	ldr	r3, [pc, #552]	; (8004ae0 <UART_SetConfig+0x30c>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b0c      	cmp	r3, #12
 80048c2:	d82d      	bhi.n	8004920 <UART_SetConfig+0x14c>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0xf8>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004921 	.word	0x08004921
 80048d4:	08004921 	.word	0x08004921
 80048d8:	08004921 	.word	0x08004921
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004921 	.word	0x08004921
 80048e4:	08004921 	.word	0x08004921
 80048e8:	08004921 	.word	0x08004921
 80048ec:	08004909 	.word	0x08004909
 80048f0:	08004921 	.word	0x08004921
 80048f4:	08004921 	.word	0x08004921
 80048f8:	08004921 	.word	0x08004921
 80048fc:	08004919 	.word	0x08004919
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e042      	b.n	800498e <UART_SetConfig+0x1ba>
 8004908:	2302      	movs	r3, #2
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e03e      	b.n	800498e <UART_SetConfig+0x1ba>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e03a      	b.n	800498e <UART_SetConfig+0x1ba>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e036      	b.n	800498e <UART_SetConfig+0x1ba>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e032      	b.n	800498e <UART_SetConfig+0x1ba>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <UART_SetConfig+0x304>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d12a      	bne.n	8004988 <UART_SetConfig+0x1b4>
 8004932:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <UART_SetConfig+0x30c>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800493c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004940:	d01a      	beq.n	8004978 <UART_SetConfig+0x1a4>
 8004942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004946:	d81b      	bhi.n	8004980 <UART_SetConfig+0x1ac>
 8004948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494c:	d00c      	beq.n	8004968 <UART_SetConfig+0x194>
 800494e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004952:	d815      	bhi.n	8004980 <UART_SetConfig+0x1ac>
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <UART_SetConfig+0x18c>
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d008      	beq.n	8004970 <UART_SetConfig+0x19c>
 800495e:	e00f      	b.n	8004980 <UART_SetConfig+0x1ac>
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004966:	e012      	b.n	800498e <UART_SetConfig+0x1ba>
 8004968:	2302      	movs	r3, #2
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e00e      	b.n	800498e <UART_SetConfig+0x1ba>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e00a      	b.n	800498e <UART_SetConfig+0x1ba>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e006      	b.n	800498e <UART_SetConfig+0x1ba>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e002      	b.n	800498e <UART_SetConfig+0x1ba>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a51      	ldr	r2, [pc, #324]	; (8004ad8 <UART_SetConfig+0x304>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d17a      	bne.n	8004a8e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800499c:	2b08      	cmp	r3, #8
 800499e:	d824      	bhi.n	80049ea <UART_SetConfig+0x216>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0x1d4>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049eb 	.word	0x080049eb
 80049b0:	080049d5 	.word	0x080049d5
 80049b4:	080049eb 	.word	0x080049eb
 80049b8:	080049db 	.word	0x080049db
 80049bc:	080049eb 	.word	0x080049eb
 80049c0:	080049eb 	.word	0x080049eb
 80049c4:	080049eb 	.word	0x080049eb
 80049c8:	080049e3 	.word	0x080049e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7fe fb1a 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 80049d0:	61f8      	str	r0, [r7, #28]
        break;
 80049d2:	e010      	b.n	80049f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d4:	4b44      	ldr	r3, [pc, #272]	; (8004ae8 <UART_SetConfig+0x314>)
 80049d6:	61fb      	str	r3, [r7, #28]
        break;
 80049d8:	e00d      	b.n	80049f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049da:	f7fe fa7b 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 80049de:	61f8      	str	r0, [r7, #28]
        break;
 80049e0:	e009      	b.n	80049f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	61fb      	str	r3, [r7, #28]
        break;
 80049e8:	e005      	b.n	80049f6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8107 	beq.w	8004c0c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d305      	bcc.n	8004a1a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d903      	bls.n	8004a22 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a20:	e0f4      	b.n	8004c0c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2200      	movs	r2, #0
 8004a26:	461c      	mov	r4, r3
 8004a28:	4615      	mov	r5, r2
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	022b      	lsls	r3, r5, #8
 8004a34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a38:	0222      	lsls	r2, r4, #8
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	6849      	ldr	r1, [r1, #4]
 8004a3e:	0849      	lsrs	r1, r1, #1
 8004a40:	2000      	movs	r0, #0
 8004a42:	4688      	mov	r8, r1
 8004a44:	4681      	mov	r9, r0
 8004a46:	eb12 0a08 	adds.w	sl, r2, r8
 8004a4a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	f7fb fc06 	bl	8000270 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a72:	d308      	bcc.n	8004a86 <UART_SetConfig+0x2b2>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7a:	d204      	bcs.n	8004a86 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	e0c2      	b.n	8004c0c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a8c:	e0be      	b.n	8004c0c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a96:	d16a      	bne.n	8004b6e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d834      	bhi.n	8004b0a <UART_SetConfig+0x336>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0x2d4>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004acd 	.word	0x08004acd
 8004aac:	08004aed 	.word	0x08004aed
 8004ab0:	08004af5 	.word	0x08004af5
 8004ab4:	08004b0b 	.word	0x08004b0b
 8004ab8:	08004afb 	.word	0x08004afb
 8004abc:	08004b0b 	.word	0x08004b0b
 8004ac0:	08004b0b 	.word	0x08004b0b
 8004ac4:	08004b0b 	.word	0x08004b0b
 8004ac8:	08004b03 	.word	0x08004b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004acc:	f7fe fa9a 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e020      	b.n	8004b16 <UART_SetConfig+0x342>
 8004ad4:	efff69f3 	.word	0xefff69f3
 8004ad8:	40008000 	.word	0x40008000
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	40004400 	.word	0x40004400
 8004ae8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aec:	f7fe faa0 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8004af0:	61f8      	str	r0, [r7, #28]
        break;
 8004af2:	e010      	b.n	8004b16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af4:	4b4c      	ldr	r3, [pc, #304]	; (8004c28 <UART_SetConfig+0x454>)
 8004af6:	61fb      	str	r3, [r7, #28]
        break;
 8004af8:	e00d      	b.n	8004b16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004afa:	f7fe f9eb 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8004afe:	61f8      	str	r0, [r7, #28]
        break;
 8004b00:	e009      	b.n	8004b16 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b06:	61fb      	str	r3, [r7, #28]
        break;
 8004b08:	e005      	b.n	8004b16 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d077      	beq.n	8004c0c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005a      	lsls	r2, r3, #1
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	441a      	add	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b0f      	cmp	r3, #15
 8004b36:	d916      	bls.n	8004b66 <UART_SetConfig+0x392>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b3e:	d212      	bcs.n	8004b66 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f023 030f 	bic.w	r3, r3, #15
 8004b48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	085b      	lsrs	r3, r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	8afa      	ldrh	r2, [r7, #22]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	e052      	b.n	8004c0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b6c:	e04e      	b.n	8004c0c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d827      	bhi.n	8004bc6 <UART_SetConfig+0x3f2>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <UART_SetConfig+0x3a8>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004ba1 	.word	0x08004ba1
 8004b80:	08004ba9 	.word	0x08004ba9
 8004b84:	08004bb1 	.word	0x08004bb1
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bb7 	.word	0x08004bb7
 8004b90:	08004bc7 	.word	0x08004bc7
 8004b94:	08004bc7 	.word	0x08004bc7
 8004b98:	08004bc7 	.word	0x08004bc7
 8004b9c:	08004bbf 	.word	0x08004bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba0:	f7fe fa30 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8004ba4:	61f8      	str	r0, [r7, #28]
        break;
 8004ba6:	e014      	b.n	8004bd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba8:	f7fe fa42 	bl	8003030 <HAL_RCC_GetPCLK2Freq>
 8004bac:	61f8      	str	r0, [r7, #28]
        break;
 8004bae:	e010      	b.n	8004bd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <UART_SetConfig+0x454>)
 8004bb2:	61fb      	str	r3, [r7, #28]
        break;
 8004bb4:	e00d      	b.n	8004bd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb6:	f7fe f98d 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8004bba:	61f8      	str	r0, [r7, #28]
        break;
 8004bbc:	e009      	b.n	8004bd2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc2:	61fb      	str	r3, [r7, #28]
        break;
 8004bc4:	e005      	b.n	8004bd2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bd0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d019      	beq.n	8004c0c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	085a      	lsrs	r2, r3, #1
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d909      	bls.n	8004c06 <UART_SetConfig+0x432>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d205      	bcs.n	8004c06 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e002      	b.n	8004c0c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3728      	adds	r7, #40	; 0x28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	00f42400 	.word	0x00f42400

08004c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d10a      	bne.n	8004d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b098      	sub	sp, #96	; 0x60
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc f9fc 	bl	800117c <HAL_GetTick>
 8004d84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d12e      	bne.n	8004df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f88c 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d021      	beq.n	8004df2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd4:	e841 2300 	strex	r3, r2, [r1]
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1e6      	bne.n	8004dae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e062      	b.n	8004eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d149      	bne.n	8004e94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f856 	bl	8004ec0 <UART_WaitOnFlagUntilTimeout>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d03c      	beq.n	8004e94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	623b      	str	r3, [r7, #32]
   return(result);
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
 8004e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e6      	bne.n	8004e1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0301 	bic.w	r3, r3, #1
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3308      	adds	r3, #8
 8004e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e6c:	61fa      	str	r2, [r7, #28]
 8004e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	69b9      	ldr	r1, [r7, #24]
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e011      	b.n	8004eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3758      	adds	r7, #88	; 0x58
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed0:	e049      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d045      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eda:	f7fc f94f 	bl	800117c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e048      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d031      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d110      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f838 	bl	8004f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2208      	movs	r2, #8
 8004f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e029      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f40:	d111      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f81e 	bl	8004f8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0a6      	beq.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b095      	sub	sp, #84	; 0x54
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e6      	bne.n	8004f96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e5      	bne.n	8004fc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005000:	2b01      	cmp	r3, #1
 8005002:	d118      	bne.n	8005036 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60bb      	str	r3, [r7, #8]
   return(result);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0310 	bic.w	r3, r3, #16
 8005018:	647b      	str	r3, [r7, #68]	; 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	669a      	str	r2, [r3, #104]	; 0x68
}
 800504a:	bf00      	nop
 800504c:	3754      	adds	r7, #84	; 0x54
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <std>:
 8005058:	2300      	movs	r3, #0
 800505a:	b510      	push	{r4, lr}
 800505c:	4604      	mov	r4, r0
 800505e:	e9c0 3300 	strd	r3, r3, [r0]
 8005062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005066:	6083      	str	r3, [r0, #8]
 8005068:	8181      	strh	r1, [r0, #12]
 800506a:	6643      	str	r3, [r0, #100]	; 0x64
 800506c:	81c2      	strh	r2, [r0, #14]
 800506e:	6183      	str	r3, [r0, #24]
 8005070:	4619      	mov	r1, r3
 8005072:	2208      	movs	r2, #8
 8005074:	305c      	adds	r0, #92	; 0x5c
 8005076:	f000 f906 	bl	8005286 <memset>
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <std+0x58>)
 800507c:	6263      	str	r3, [r4, #36]	; 0x24
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <std+0x5c>)
 8005080:	62a3      	str	r3, [r4, #40]	; 0x28
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <std+0x60>)
 8005084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <std+0x64>)
 8005088:	6323      	str	r3, [r4, #48]	; 0x30
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <std+0x68>)
 800508c:	6224      	str	r4, [r4, #32]
 800508e:	429c      	cmp	r4, r3
 8005090:	d006      	beq.n	80050a0 <std+0x48>
 8005092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005096:	4294      	cmp	r4, r2
 8005098:	d002      	beq.n	80050a0 <std+0x48>
 800509a:	33d0      	adds	r3, #208	; 0xd0
 800509c:	429c      	cmp	r4, r3
 800509e:	d105      	bne.n	80050ac <std+0x54>
 80050a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a8:	f000 b966 	b.w	8005378 <__retarget_lock_init_recursive>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	bf00      	nop
 80050b0:	08005201 	.word	0x08005201
 80050b4:	08005223 	.word	0x08005223
 80050b8:	0800525b 	.word	0x0800525b
 80050bc:	0800527f 	.word	0x0800527f
 80050c0:	20000228 	.word	0x20000228

080050c4 <stdio_exit_handler>:
 80050c4:	4a02      	ldr	r2, [pc, #8]	; (80050d0 <stdio_exit_handler+0xc>)
 80050c6:	4903      	ldr	r1, [pc, #12]	; (80050d4 <stdio_exit_handler+0x10>)
 80050c8:	4803      	ldr	r0, [pc, #12]	; (80050d8 <stdio_exit_handler+0x14>)
 80050ca:	f000 b869 	b.w	80051a0 <_fwalk_sglue>
 80050ce:	bf00      	nop
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	08005c25 	.word	0x08005c25
 80050d8:	20000018 	.word	0x20000018

080050dc <cleanup_stdio>:
 80050dc:	6841      	ldr	r1, [r0, #4]
 80050de:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <cleanup_stdio+0x34>)
 80050e0:	4299      	cmp	r1, r3
 80050e2:	b510      	push	{r4, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	d001      	beq.n	80050ec <cleanup_stdio+0x10>
 80050e8:	f000 fd9c 	bl	8005c24 <_fflush_r>
 80050ec:	68a1      	ldr	r1, [r4, #8]
 80050ee:	4b09      	ldr	r3, [pc, #36]	; (8005114 <cleanup_stdio+0x38>)
 80050f0:	4299      	cmp	r1, r3
 80050f2:	d002      	beq.n	80050fa <cleanup_stdio+0x1e>
 80050f4:	4620      	mov	r0, r4
 80050f6:	f000 fd95 	bl	8005c24 <_fflush_r>
 80050fa:	68e1      	ldr	r1, [r4, #12]
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <cleanup_stdio+0x3c>)
 80050fe:	4299      	cmp	r1, r3
 8005100:	d004      	beq.n	800510c <cleanup_stdio+0x30>
 8005102:	4620      	mov	r0, r4
 8005104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005108:	f000 bd8c 	b.w	8005c24 <_fflush_r>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	bf00      	nop
 8005110:	20000228 	.word	0x20000228
 8005114:	20000290 	.word	0x20000290
 8005118:	200002f8 	.word	0x200002f8

0800511c <global_stdio_init.part.0>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <global_stdio_init.part.0+0x30>)
 8005120:	4c0b      	ldr	r4, [pc, #44]	; (8005150 <global_stdio_init.part.0+0x34>)
 8005122:	4a0c      	ldr	r2, [pc, #48]	; (8005154 <global_stdio_init.part.0+0x38>)
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	4620      	mov	r0, r4
 8005128:	2200      	movs	r2, #0
 800512a:	2104      	movs	r1, #4
 800512c:	f7ff ff94 	bl	8005058 <std>
 8005130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005134:	2201      	movs	r2, #1
 8005136:	2109      	movs	r1, #9
 8005138:	f7ff ff8e 	bl	8005058 <std>
 800513c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005140:	2202      	movs	r2, #2
 8005142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005146:	2112      	movs	r1, #18
 8005148:	f7ff bf86 	b.w	8005058 <std>
 800514c:	20000360 	.word	0x20000360
 8005150:	20000228 	.word	0x20000228
 8005154:	080050c5 	.word	0x080050c5

08005158 <__sfp_lock_acquire>:
 8005158:	4801      	ldr	r0, [pc, #4]	; (8005160 <__sfp_lock_acquire+0x8>)
 800515a:	f000 b90e 	b.w	800537a <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	20000369 	.word	0x20000369

08005164 <__sfp_lock_release>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__sfp_lock_release+0x8>)
 8005166:	f000 b909 	b.w	800537c <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	20000369 	.word	0x20000369

08005170 <__sinit>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4604      	mov	r4, r0
 8005174:	f7ff fff0 	bl	8005158 <__sfp_lock_acquire>
 8005178:	6a23      	ldr	r3, [r4, #32]
 800517a:	b11b      	cbz	r3, 8005184 <__sinit+0x14>
 800517c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005180:	f7ff bff0 	b.w	8005164 <__sfp_lock_release>
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <__sinit+0x28>)
 8005186:	6223      	str	r3, [r4, #32]
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__sinit+0x2c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f5      	bne.n	800517c <__sinit+0xc>
 8005190:	f7ff ffc4 	bl	800511c <global_stdio_init.part.0>
 8005194:	e7f2      	b.n	800517c <__sinit+0xc>
 8005196:	bf00      	nop
 8005198:	080050dd 	.word	0x080050dd
 800519c:	20000360 	.word	0x20000360

080051a0 <_fwalk_sglue>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	4607      	mov	r7, r0
 80051a6:	4688      	mov	r8, r1
 80051a8:	4614      	mov	r4, r2
 80051aa:	2600      	movs	r6, #0
 80051ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b0:	f1b9 0901 	subs.w	r9, r9, #1
 80051b4:	d505      	bpl.n	80051c2 <_fwalk_sglue+0x22>
 80051b6:	6824      	ldr	r4, [r4, #0]
 80051b8:	2c00      	cmp	r4, #0
 80051ba:	d1f7      	bne.n	80051ac <_fwalk_sglue+0xc>
 80051bc:	4630      	mov	r0, r6
 80051be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c2:	89ab      	ldrh	r3, [r5, #12]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d907      	bls.n	80051d8 <_fwalk_sglue+0x38>
 80051c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051cc:	3301      	adds	r3, #1
 80051ce:	d003      	beq.n	80051d8 <_fwalk_sglue+0x38>
 80051d0:	4629      	mov	r1, r5
 80051d2:	4638      	mov	r0, r7
 80051d4:	47c0      	blx	r8
 80051d6:	4306      	orrs	r6, r0
 80051d8:	3568      	adds	r5, #104	; 0x68
 80051da:	e7e9      	b.n	80051b0 <_fwalk_sglue+0x10>

080051dc <iprintf>:
 80051dc:	b40f      	push	{r0, r1, r2, r3}
 80051de:	b507      	push	{r0, r1, r2, lr}
 80051e0:	4906      	ldr	r1, [pc, #24]	; (80051fc <iprintf+0x20>)
 80051e2:	ab04      	add	r3, sp, #16
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ea:	6881      	ldr	r1, [r0, #8]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	f000 f9e9 	bl	80055c4 <_vfiprintf_r>
 80051f2:	b003      	add	sp, #12
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b004      	add	sp, #16
 80051fa:	4770      	bx	lr
 80051fc:	20000064 	.word	0x20000064

08005200 <__sread>:
 8005200:	b510      	push	{r4, lr}
 8005202:	460c      	mov	r4, r1
 8005204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005208:	f000 f868 	bl	80052dc <_read_r>
 800520c:	2800      	cmp	r0, #0
 800520e:	bfab      	itete	ge
 8005210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005212:	89a3      	ldrhlt	r3, [r4, #12]
 8005214:	181b      	addge	r3, r3, r0
 8005216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800521a:	bfac      	ite	ge
 800521c:	6563      	strge	r3, [r4, #84]	; 0x54
 800521e:	81a3      	strhlt	r3, [r4, #12]
 8005220:	bd10      	pop	{r4, pc}

08005222 <__swrite>:
 8005222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005226:	461f      	mov	r7, r3
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	05db      	lsls	r3, r3, #23
 800522c:	4605      	mov	r5, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4616      	mov	r6, r2
 8005232:	d505      	bpl.n	8005240 <__swrite+0x1e>
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	2302      	movs	r3, #2
 800523a:	2200      	movs	r2, #0
 800523c:	f000 f83c 	bl	80052b8 <_lseek_r>
 8005240:	89a3      	ldrh	r3, [r4, #12]
 8005242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	4632      	mov	r2, r6
 800524e:	463b      	mov	r3, r7
 8005250:	4628      	mov	r0, r5
 8005252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	f000 b853 	b.w	8005300 <_write_r>

0800525a <__sseek>:
 800525a:	b510      	push	{r4, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005262:	f000 f829 	bl	80052b8 <_lseek_r>
 8005266:	1c43      	adds	r3, r0, #1
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	bf15      	itete	ne
 800526c:	6560      	strne	r0, [r4, #84]	; 0x54
 800526e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005276:	81a3      	strheq	r3, [r4, #12]
 8005278:	bf18      	it	ne
 800527a:	81a3      	strhne	r3, [r4, #12]
 800527c:	bd10      	pop	{r4, pc}

0800527e <__sclose>:
 800527e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005282:	f000 b809 	b.w	8005298 <_close_r>

08005286 <memset>:
 8005286:	4402      	add	r2, r0
 8005288:	4603      	mov	r3, r0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <memset+0xa>
 800528e:	4770      	bx	lr
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <memset+0x4>
	...

08005298 <_close_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	; (80052b4 <_close_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fb fe5c 	bl	8000f60 <_close>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_close_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_close_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	20000364 	.word	0x20000364

080052b8 <_lseek_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d07      	ldr	r5, [pc, #28]	; (80052d8 <_lseek_r+0x20>)
 80052bc:	4604      	mov	r4, r0
 80052be:	4608      	mov	r0, r1
 80052c0:	4611      	mov	r1, r2
 80052c2:	2200      	movs	r2, #0
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f7fb fe71 	bl	8000fae <_lseek>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_lseek_r+0x1e>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_lseek_r+0x1e>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	20000364 	.word	0x20000364

080052dc <_read_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	4d07      	ldr	r5, [pc, #28]	; (80052fc <_read_r+0x20>)
 80052e0:	4604      	mov	r4, r0
 80052e2:	4608      	mov	r0, r1
 80052e4:	4611      	mov	r1, r2
 80052e6:	2200      	movs	r2, #0
 80052e8:	602a      	str	r2, [r5, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f7fb fdf8 	bl	8000ee0 <_read>
 80052f0:	1c43      	adds	r3, r0, #1
 80052f2:	d102      	bne.n	80052fa <_read_r+0x1e>
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	b103      	cbz	r3, 80052fa <_read_r+0x1e>
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	bd38      	pop	{r3, r4, r5, pc}
 80052fc:	20000364 	.word	0x20000364

08005300 <_write_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	; (8005320 <_write_r+0x20>)
 8005304:	4604      	mov	r4, r0
 8005306:	4608      	mov	r0, r1
 8005308:	4611      	mov	r1, r2
 800530a:	2200      	movs	r2, #0
 800530c:	602a      	str	r2, [r5, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	f7fb fe04 	bl	8000f1c <_write>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_write_r+0x1e>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_write_r+0x1e>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000364 	.word	0x20000364

08005324 <__errno>:
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <__errno+0x8>)
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000064 	.word	0x20000064

08005330 <__libc_init_array>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	4d0d      	ldr	r5, [pc, #52]	; (8005368 <__libc_init_array+0x38>)
 8005334:	4c0d      	ldr	r4, [pc, #52]	; (800536c <__libc_init_array+0x3c>)
 8005336:	1b64      	subs	r4, r4, r5
 8005338:	10a4      	asrs	r4, r4, #2
 800533a:	2600      	movs	r6, #0
 800533c:	42a6      	cmp	r6, r4
 800533e:	d109      	bne.n	8005354 <__libc_init_array+0x24>
 8005340:	4d0b      	ldr	r5, [pc, #44]	; (8005370 <__libc_init_array+0x40>)
 8005342:	4c0c      	ldr	r4, [pc, #48]	; (8005374 <__libc_init_array+0x44>)
 8005344:	f000 fdc0 	bl	8005ec8 <_init>
 8005348:	1b64      	subs	r4, r4, r5
 800534a:	10a4      	asrs	r4, r4, #2
 800534c:	2600      	movs	r6, #0
 800534e:	42a6      	cmp	r6, r4
 8005350:	d105      	bne.n	800535e <__libc_init_array+0x2e>
 8005352:	bd70      	pop	{r4, r5, r6, pc}
 8005354:	f855 3b04 	ldr.w	r3, [r5], #4
 8005358:	4798      	blx	r3
 800535a:	3601      	adds	r6, #1
 800535c:	e7ee      	b.n	800533c <__libc_init_array+0xc>
 800535e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005362:	4798      	blx	r3
 8005364:	3601      	adds	r6, #1
 8005366:	e7f2      	b.n	800534e <__libc_init_array+0x1e>
 8005368:	08005f70 	.word	0x08005f70
 800536c:	08005f70 	.word	0x08005f70
 8005370:	08005f70 	.word	0x08005f70
 8005374:	08005f74 	.word	0x08005f74

08005378 <__retarget_lock_init_recursive>:
 8005378:	4770      	bx	lr

0800537a <__retarget_lock_acquire_recursive>:
 800537a:	4770      	bx	lr

0800537c <__retarget_lock_release_recursive>:
 800537c:	4770      	bx	lr
	...

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f8df 	bl	8005558 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 b8da 	b.w	8005564 <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	440c      	add	r4, r1
 80053ec:	6014      	str	r4, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	2000036c 	.word	0x2000036c

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0e      	ldr	r6, [pc, #56]	; (8005454 <sbrk_aligned+0x3c>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 fcbc 	bl	8005da0 <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 fcb7 	bl	8005da0 <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d00a      	beq.n	800544c <sbrk_aligned+0x34>
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d007      	beq.n	8005450 <sbrk_aligned+0x38>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 fcac 	bl	8005da0 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d101      	bne.n	8005450 <sbrk_aligned+0x38>
 800544c:	f04f 34ff 	mov.w	r4, #4294967295
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	20000370 	.word	0x20000370

08005458 <_malloc_r>:
 8005458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800545c:	1ccd      	adds	r5, r1, #3
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	3508      	adds	r5, #8
 8005464:	2d0c      	cmp	r5, #12
 8005466:	bf38      	it	cc
 8005468:	250c      	movcc	r5, #12
 800546a:	2d00      	cmp	r5, #0
 800546c:	4607      	mov	r7, r0
 800546e:	db01      	blt.n	8005474 <_malloc_r+0x1c>
 8005470:	42a9      	cmp	r1, r5
 8005472:	d905      	bls.n	8005480 <_malloc_r+0x28>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	2600      	movs	r6, #0
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005554 <_malloc_r+0xfc>
 8005484:	f000 f868 	bl	8005558 <__malloc_lock>
 8005488:	f8d8 3000 	ldr.w	r3, [r8]
 800548c:	461c      	mov	r4, r3
 800548e:	bb5c      	cbnz	r4, 80054e8 <_malloc_r+0x90>
 8005490:	4629      	mov	r1, r5
 8005492:	4638      	mov	r0, r7
 8005494:	f7ff ffc0 	bl	8005418 <sbrk_aligned>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	4604      	mov	r4, r0
 800549c:	d155      	bne.n	800554a <_malloc_r+0xf2>
 800549e:	f8d8 4000 	ldr.w	r4, [r8]
 80054a2:	4626      	mov	r6, r4
 80054a4:	2e00      	cmp	r6, #0
 80054a6:	d145      	bne.n	8005534 <_malloc_r+0xdc>
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	d048      	beq.n	800553e <_malloc_r+0xe6>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	4631      	mov	r1, r6
 80054b0:	4638      	mov	r0, r7
 80054b2:	eb04 0903 	add.w	r9, r4, r3
 80054b6:	f000 fc73 	bl	8005da0 <_sbrk_r>
 80054ba:	4581      	cmp	r9, r0
 80054bc:	d13f      	bne.n	800553e <_malloc_r+0xe6>
 80054be:	6821      	ldr	r1, [r4, #0]
 80054c0:	1a6d      	subs	r5, r5, r1
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ffa7 	bl	8005418 <sbrk_aligned>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d037      	beq.n	800553e <_malloc_r+0xe6>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	442b      	add	r3, r5
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	f8d8 3000 	ldr.w	r3, [r8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d038      	beq.n	800554e <_malloc_r+0xf6>
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	42a2      	cmp	r2, r4
 80054e0:	d12b      	bne.n	800553a <_malloc_r+0xe2>
 80054e2:	2200      	movs	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	e00f      	b.n	8005508 <_malloc_r+0xb0>
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	1b52      	subs	r2, r2, r5
 80054ec:	d41f      	bmi.n	800552e <_malloc_r+0xd6>
 80054ee:	2a0b      	cmp	r2, #11
 80054f0:	d917      	bls.n	8005522 <_malloc_r+0xca>
 80054f2:	1961      	adds	r1, r4, r5
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	6025      	str	r5, [r4, #0]
 80054f8:	bf18      	it	ne
 80054fa:	6059      	strne	r1, [r3, #4]
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	bf08      	it	eq
 8005500:	f8c8 1000 	streq.w	r1, [r8]
 8005504:	5162      	str	r2, [r4, r5]
 8005506:	604b      	str	r3, [r1, #4]
 8005508:	4638      	mov	r0, r7
 800550a:	f104 060b 	add.w	r6, r4, #11
 800550e:	f000 f829 	bl	8005564 <__malloc_unlock>
 8005512:	f026 0607 	bic.w	r6, r6, #7
 8005516:	1d23      	adds	r3, r4, #4
 8005518:	1af2      	subs	r2, r6, r3
 800551a:	d0ae      	beq.n	800547a <_malloc_r+0x22>
 800551c:	1b9b      	subs	r3, r3, r6
 800551e:	50a3      	str	r3, [r4, r2]
 8005520:	e7ab      	b.n	800547a <_malloc_r+0x22>
 8005522:	42a3      	cmp	r3, r4
 8005524:	6862      	ldr	r2, [r4, #4]
 8005526:	d1dd      	bne.n	80054e4 <_malloc_r+0x8c>
 8005528:	f8c8 2000 	str.w	r2, [r8]
 800552c:	e7ec      	b.n	8005508 <_malloc_r+0xb0>
 800552e:	4623      	mov	r3, r4
 8005530:	6864      	ldr	r4, [r4, #4]
 8005532:	e7ac      	b.n	800548e <_malloc_r+0x36>
 8005534:	4634      	mov	r4, r6
 8005536:	6876      	ldr	r6, [r6, #4]
 8005538:	e7b4      	b.n	80054a4 <_malloc_r+0x4c>
 800553a:	4613      	mov	r3, r2
 800553c:	e7cc      	b.n	80054d8 <_malloc_r+0x80>
 800553e:	230c      	movs	r3, #12
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4638      	mov	r0, r7
 8005544:	f000 f80e 	bl	8005564 <__malloc_unlock>
 8005548:	e797      	b.n	800547a <_malloc_r+0x22>
 800554a:	6025      	str	r5, [r4, #0]
 800554c:	e7dc      	b.n	8005508 <_malloc_r+0xb0>
 800554e:	605b      	str	r3, [r3, #4]
 8005550:	deff      	udf	#255	; 0xff
 8005552:	bf00      	nop
 8005554:	2000036c 	.word	0x2000036c

08005558 <__malloc_lock>:
 8005558:	4801      	ldr	r0, [pc, #4]	; (8005560 <__malloc_lock+0x8>)
 800555a:	f7ff bf0e 	b.w	800537a <__retarget_lock_acquire_recursive>
 800555e:	bf00      	nop
 8005560:	20000368 	.word	0x20000368

08005564 <__malloc_unlock>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__malloc_unlock+0x8>)
 8005566:	f7ff bf09 	b.w	800537c <__retarget_lock_release_recursive>
 800556a:	bf00      	nop
 800556c:	20000368 	.word	0x20000368

08005570 <__sfputc_r>:
 8005570:	6893      	ldr	r3, [r2, #8]
 8005572:	3b01      	subs	r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	b410      	push	{r4}
 8005578:	6093      	str	r3, [r2, #8]
 800557a:	da08      	bge.n	800558e <__sfputc_r+0x1e>
 800557c:	6994      	ldr	r4, [r2, #24]
 800557e:	42a3      	cmp	r3, r4
 8005580:	db01      	blt.n	8005586 <__sfputc_r+0x16>
 8005582:	290a      	cmp	r1, #10
 8005584:	d103      	bne.n	800558e <__sfputc_r+0x1e>
 8005586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800558a:	f000 bb73 	b.w	8005c74 <__swbuf_r>
 800558e:	6813      	ldr	r3, [r2, #0]
 8005590:	1c58      	adds	r0, r3, #1
 8005592:	6010      	str	r0, [r2, #0]
 8005594:	7019      	strb	r1, [r3, #0]
 8005596:	4608      	mov	r0, r1
 8005598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800559c:	4770      	bx	lr

0800559e <__sfputs_r>:
 800559e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a0:	4606      	mov	r6, r0
 80055a2:	460f      	mov	r7, r1
 80055a4:	4614      	mov	r4, r2
 80055a6:	18d5      	adds	r5, r2, r3
 80055a8:	42ac      	cmp	r4, r5
 80055aa:	d101      	bne.n	80055b0 <__sfputs_r+0x12>
 80055ac:	2000      	movs	r0, #0
 80055ae:	e007      	b.n	80055c0 <__sfputs_r+0x22>
 80055b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b4:	463a      	mov	r2, r7
 80055b6:	4630      	mov	r0, r6
 80055b8:	f7ff ffda 	bl	8005570 <__sfputc_r>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d1f3      	bne.n	80055a8 <__sfputs_r+0xa>
 80055c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055c4 <_vfiprintf_r>:
 80055c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c8:	460d      	mov	r5, r1
 80055ca:	b09d      	sub	sp, #116	; 0x74
 80055cc:	4614      	mov	r4, r2
 80055ce:	4698      	mov	r8, r3
 80055d0:	4606      	mov	r6, r0
 80055d2:	b118      	cbz	r0, 80055dc <_vfiprintf_r+0x18>
 80055d4:	6a03      	ldr	r3, [r0, #32]
 80055d6:	b90b      	cbnz	r3, 80055dc <_vfiprintf_r+0x18>
 80055d8:	f7ff fdca 	bl	8005170 <__sinit>
 80055dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055de:	07d9      	lsls	r1, r3, #31
 80055e0:	d405      	bmi.n	80055ee <_vfiprintf_r+0x2a>
 80055e2:	89ab      	ldrh	r3, [r5, #12]
 80055e4:	059a      	lsls	r2, r3, #22
 80055e6:	d402      	bmi.n	80055ee <_vfiprintf_r+0x2a>
 80055e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ea:	f7ff fec6 	bl	800537a <__retarget_lock_acquire_recursive>
 80055ee:	89ab      	ldrh	r3, [r5, #12]
 80055f0:	071b      	lsls	r3, r3, #28
 80055f2:	d501      	bpl.n	80055f8 <_vfiprintf_r+0x34>
 80055f4:	692b      	ldr	r3, [r5, #16]
 80055f6:	b99b      	cbnz	r3, 8005620 <_vfiprintf_r+0x5c>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4630      	mov	r0, r6
 80055fc:	f000 fb78 	bl	8005cf0 <__swsetup_r>
 8005600:	b170      	cbz	r0, 8005620 <_vfiprintf_r+0x5c>
 8005602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005604:	07dc      	lsls	r4, r3, #31
 8005606:	d504      	bpl.n	8005612 <_vfiprintf_r+0x4e>
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	b01d      	add	sp, #116	; 0x74
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	0598      	lsls	r0, r3, #22
 8005616:	d4f7      	bmi.n	8005608 <_vfiprintf_r+0x44>
 8005618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800561a:	f7ff feaf 	bl	800537c <__retarget_lock_release_recursive>
 800561e:	e7f3      	b.n	8005608 <_vfiprintf_r+0x44>
 8005620:	2300      	movs	r3, #0
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
 8005624:	2320      	movs	r3, #32
 8005626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800562a:	f8cd 800c 	str.w	r8, [sp, #12]
 800562e:	2330      	movs	r3, #48	; 0x30
 8005630:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057e4 <_vfiprintf_r+0x220>
 8005634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005638:	f04f 0901 	mov.w	r9, #1
 800563c:	4623      	mov	r3, r4
 800563e:	469a      	mov	sl, r3
 8005640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005644:	b10a      	cbz	r2, 800564a <_vfiprintf_r+0x86>
 8005646:	2a25      	cmp	r2, #37	; 0x25
 8005648:	d1f9      	bne.n	800563e <_vfiprintf_r+0x7a>
 800564a:	ebba 0b04 	subs.w	fp, sl, r4
 800564e:	d00b      	beq.n	8005668 <_vfiprintf_r+0xa4>
 8005650:	465b      	mov	r3, fp
 8005652:	4622      	mov	r2, r4
 8005654:	4629      	mov	r1, r5
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff ffa1 	bl	800559e <__sfputs_r>
 800565c:	3001      	adds	r0, #1
 800565e:	f000 80a9 	beq.w	80057b4 <_vfiprintf_r+0x1f0>
 8005662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005664:	445a      	add	r2, fp
 8005666:	9209      	str	r2, [sp, #36]	; 0x24
 8005668:	f89a 3000 	ldrb.w	r3, [sl]
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a1 	beq.w	80057b4 <_vfiprintf_r+0x1f0>
 8005672:	2300      	movs	r3, #0
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800567c:	f10a 0a01 	add.w	sl, sl, #1
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	9307      	str	r3, [sp, #28]
 8005684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005688:	931a      	str	r3, [sp, #104]	; 0x68
 800568a:	4654      	mov	r4, sl
 800568c:	2205      	movs	r2, #5
 800568e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005692:	4854      	ldr	r0, [pc, #336]	; (80057e4 <_vfiprintf_r+0x220>)
 8005694:	f7fa fd9c 	bl	80001d0 <memchr>
 8005698:	9a04      	ldr	r2, [sp, #16]
 800569a:	b9d8      	cbnz	r0, 80056d4 <_vfiprintf_r+0x110>
 800569c:	06d1      	lsls	r1, r2, #27
 800569e:	bf44      	itt	mi
 80056a0:	2320      	movmi	r3, #32
 80056a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a6:	0713      	lsls	r3, r2, #28
 80056a8:	bf44      	itt	mi
 80056aa:	232b      	movmi	r3, #43	; 0x2b
 80056ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b0:	f89a 3000 	ldrb.w	r3, [sl]
 80056b4:	2b2a      	cmp	r3, #42	; 0x2a
 80056b6:	d015      	beq.n	80056e4 <_vfiprintf_r+0x120>
 80056b8:	9a07      	ldr	r2, [sp, #28]
 80056ba:	4654      	mov	r4, sl
 80056bc:	2000      	movs	r0, #0
 80056be:	f04f 0c0a 	mov.w	ip, #10
 80056c2:	4621      	mov	r1, r4
 80056c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056c8:	3b30      	subs	r3, #48	; 0x30
 80056ca:	2b09      	cmp	r3, #9
 80056cc:	d94d      	bls.n	800576a <_vfiprintf_r+0x1a6>
 80056ce:	b1b0      	cbz	r0, 80056fe <_vfiprintf_r+0x13a>
 80056d0:	9207      	str	r2, [sp, #28]
 80056d2:	e014      	b.n	80056fe <_vfiprintf_r+0x13a>
 80056d4:	eba0 0308 	sub.w	r3, r0, r8
 80056d8:	fa09 f303 	lsl.w	r3, r9, r3
 80056dc:	4313      	orrs	r3, r2
 80056de:	9304      	str	r3, [sp, #16]
 80056e0:	46a2      	mov	sl, r4
 80056e2:	e7d2      	b.n	800568a <_vfiprintf_r+0xc6>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	1d19      	adds	r1, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	9103      	str	r1, [sp, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfbb      	ittet	lt
 80056f0:	425b      	neglt	r3, r3
 80056f2:	f042 0202 	orrlt.w	r2, r2, #2
 80056f6:	9307      	strge	r3, [sp, #28]
 80056f8:	9307      	strlt	r3, [sp, #28]
 80056fa:	bfb8      	it	lt
 80056fc:	9204      	strlt	r2, [sp, #16]
 80056fe:	7823      	ldrb	r3, [r4, #0]
 8005700:	2b2e      	cmp	r3, #46	; 0x2e
 8005702:	d10c      	bne.n	800571e <_vfiprintf_r+0x15a>
 8005704:	7863      	ldrb	r3, [r4, #1]
 8005706:	2b2a      	cmp	r3, #42	; 0x2a
 8005708:	d134      	bne.n	8005774 <_vfiprintf_r+0x1b0>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	1d1a      	adds	r2, r3, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	9203      	str	r2, [sp, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	bfb8      	it	lt
 8005716:	f04f 33ff 	movlt.w	r3, #4294967295
 800571a:	3402      	adds	r4, #2
 800571c:	9305      	str	r3, [sp, #20]
 800571e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057f4 <_vfiprintf_r+0x230>
 8005722:	7821      	ldrb	r1, [r4, #0]
 8005724:	2203      	movs	r2, #3
 8005726:	4650      	mov	r0, sl
 8005728:	f7fa fd52 	bl	80001d0 <memchr>
 800572c:	b138      	cbz	r0, 800573e <_vfiprintf_r+0x17a>
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	eba0 000a 	sub.w	r0, r0, sl
 8005734:	2240      	movs	r2, #64	; 0x40
 8005736:	4082      	lsls	r2, r0
 8005738:	4313      	orrs	r3, r2
 800573a:	3401      	adds	r4, #1
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005742:	4829      	ldr	r0, [pc, #164]	; (80057e8 <_vfiprintf_r+0x224>)
 8005744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005748:	2206      	movs	r2, #6
 800574a:	f7fa fd41 	bl	80001d0 <memchr>
 800574e:	2800      	cmp	r0, #0
 8005750:	d03f      	beq.n	80057d2 <_vfiprintf_r+0x20e>
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <_vfiprintf_r+0x228>)
 8005754:	bb1b      	cbnz	r3, 800579e <_vfiprintf_r+0x1da>
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	3307      	adds	r3, #7
 800575a:	f023 0307 	bic.w	r3, r3, #7
 800575e:	3308      	adds	r3, #8
 8005760:	9303      	str	r3, [sp, #12]
 8005762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005764:	443b      	add	r3, r7
 8005766:	9309      	str	r3, [sp, #36]	; 0x24
 8005768:	e768      	b.n	800563c <_vfiprintf_r+0x78>
 800576a:	fb0c 3202 	mla	r2, ip, r2, r3
 800576e:	460c      	mov	r4, r1
 8005770:	2001      	movs	r0, #1
 8005772:	e7a6      	b.n	80056c2 <_vfiprintf_r+0xfe>
 8005774:	2300      	movs	r3, #0
 8005776:	3401      	adds	r4, #1
 8005778:	9305      	str	r3, [sp, #20]
 800577a:	4619      	mov	r1, r3
 800577c:	f04f 0c0a 	mov.w	ip, #10
 8005780:	4620      	mov	r0, r4
 8005782:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005786:	3a30      	subs	r2, #48	; 0x30
 8005788:	2a09      	cmp	r2, #9
 800578a:	d903      	bls.n	8005794 <_vfiprintf_r+0x1d0>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0c6      	beq.n	800571e <_vfiprintf_r+0x15a>
 8005790:	9105      	str	r1, [sp, #20]
 8005792:	e7c4      	b.n	800571e <_vfiprintf_r+0x15a>
 8005794:	fb0c 2101 	mla	r1, ip, r1, r2
 8005798:	4604      	mov	r4, r0
 800579a:	2301      	movs	r3, #1
 800579c:	e7f0      	b.n	8005780 <_vfiprintf_r+0x1bc>
 800579e:	ab03      	add	r3, sp, #12
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	462a      	mov	r2, r5
 80057a4:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <_vfiprintf_r+0x22c>)
 80057a6:	a904      	add	r1, sp, #16
 80057a8:	4630      	mov	r0, r6
 80057aa:	f3af 8000 	nop.w
 80057ae:	4607      	mov	r7, r0
 80057b0:	1c78      	adds	r0, r7, #1
 80057b2:	d1d6      	bne.n	8005762 <_vfiprintf_r+0x19e>
 80057b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b6:	07d9      	lsls	r1, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_vfiprintf_r+0x202>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	059a      	lsls	r2, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_vfiprintf_r+0x202>
 80057c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057c2:	f7ff fddb 	bl	800537c <__retarget_lock_release_recursive>
 80057c6:	89ab      	ldrh	r3, [r5, #12]
 80057c8:	065b      	lsls	r3, r3, #25
 80057ca:	f53f af1d 	bmi.w	8005608 <_vfiprintf_r+0x44>
 80057ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d0:	e71c      	b.n	800560c <_vfiprintf_r+0x48>
 80057d2:	ab03      	add	r3, sp, #12
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	462a      	mov	r2, r5
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <_vfiprintf_r+0x22c>)
 80057da:	a904      	add	r1, sp, #16
 80057dc:	4630      	mov	r0, r6
 80057de:	f000 f879 	bl	80058d4 <_printf_i>
 80057e2:	e7e4      	b.n	80057ae <_vfiprintf_r+0x1ea>
 80057e4:	08005f34 	.word	0x08005f34
 80057e8:	08005f3e 	.word	0x08005f3e
 80057ec:	00000000 	.word	0x00000000
 80057f0:	0800559f 	.word	0x0800559f
 80057f4:	08005f3a 	.word	0x08005f3a

080057f8 <_printf_common>:
 80057f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057fc:	4616      	mov	r6, r2
 80057fe:	4699      	mov	r9, r3
 8005800:	688a      	ldr	r2, [r1, #8]
 8005802:	690b      	ldr	r3, [r1, #16]
 8005804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005808:	4293      	cmp	r3, r2
 800580a:	bfb8      	it	lt
 800580c:	4613      	movlt	r3, r2
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005814:	4607      	mov	r7, r0
 8005816:	460c      	mov	r4, r1
 8005818:	b10a      	cbz	r2, 800581e <_printf_common+0x26>
 800581a:	3301      	adds	r3, #1
 800581c:	6033      	str	r3, [r6, #0]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	0699      	lsls	r1, r3, #26
 8005822:	bf42      	ittt	mi
 8005824:	6833      	ldrmi	r3, [r6, #0]
 8005826:	3302      	addmi	r3, #2
 8005828:	6033      	strmi	r3, [r6, #0]
 800582a:	6825      	ldr	r5, [r4, #0]
 800582c:	f015 0506 	ands.w	r5, r5, #6
 8005830:	d106      	bne.n	8005840 <_printf_common+0x48>
 8005832:	f104 0a19 	add.w	sl, r4, #25
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	6832      	ldr	r2, [r6, #0]
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	42ab      	cmp	r3, r5
 800583e:	dc26      	bgt.n	800588e <_printf_common+0x96>
 8005840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005844:	1e13      	subs	r3, r2, #0
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	bf18      	it	ne
 800584a:	2301      	movne	r3, #1
 800584c:	0692      	lsls	r2, r2, #26
 800584e:	d42b      	bmi.n	80058a8 <_printf_common+0xb0>
 8005850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005854:	4649      	mov	r1, r9
 8005856:	4638      	mov	r0, r7
 8005858:	47c0      	blx	r8
 800585a:	3001      	adds	r0, #1
 800585c:	d01e      	beq.n	800589c <_printf_common+0xa4>
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	f003 0306 	and.w	r3, r3, #6
 8005866:	2b04      	cmp	r3, #4
 8005868:	bf02      	ittt	eq
 800586a:	68e5      	ldreq	r5, [r4, #12]
 800586c:	6833      	ldreq	r3, [r6, #0]
 800586e:	1aed      	subeq	r5, r5, r3
 8005870:	68a3      	ldr	r3, [r4, #8]
 8005872:	bf0c      	ite	eq
 8005874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005878:	2500      	movne	r5, #0
 800587a:	4293      	cmp	r3, r2
 800587c:	bfc4      	itt	gt
 800587e:	1a9b      	subgt	r3, r3, r2
 8005880:	18ed      	addgt	r5, r5, r3
 8005882:	2600      	movs	r6, #0
 8005884:	341a      	adds	r4, #26
 8005886:	42b5      	cmp	r5, r6
 8005888:	d11a      	bne.n	80058c0 <_printf_common+0xc8>
 800588a:	2000      	movs	r0, #0
 800588c:	e008      	b.n	80058a0 <_printf_common+0xa8>
 800588e:	2301      	movs	r3, #1
 8005890:	4652      	mov	r2, sl
 8005892:	4649      	mov	r1, r9
 8005894:	4638      	mov	r0, r7
 8005896:	47c0      	blx	r8
 8005898:	3001      	adds	r0, #1
 800589a:	d103      	bne.n	80058a4 <_printf_common+0xac>
 800589c:	f04f 30ff 	mov.w	r0, #4294967295
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	3501      	adds	r5, #1
 80058a6:	e7c6      	b.n	8005836 <_printf_common+0x3e>
 80058a8:	18e1      	adds	r1, r4, r3
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	2030      	movs	r0, #48	; 0x30
 80058ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058b2:	4422      	add	r2, r4
 80058b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058bc:	3302      	adds	r3, #2
 80058be:	e7c7      	b.n	8005850 <_printf_common+0x58>
 80058c0:	2301      	movs	r3, #1
 80058c2:	4622      	mov	r2, r4
 80058c4:	4649      	mov	r1, r9
 80058c6:	4638      	mov	r0, r7
 80058c8:	47c0      	blx	r8
 80058ca:	3001      	adds	r0, #1
 80058cc:	d0e6      	beq.n	800589c <_printf_common+0xa4>
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7d9      	b.n	8005886 <_printf_common+0x8e>
	...

080058d4 <_printf_i>:
 80058d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	7e0f      	ldrb	r7, [r1, #24]
 80058da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058dc:	2f78      	cmp	r7, #120	; 0x78
 80058de:	4691      	mov	r9, r2
 80058e0:	4680      	mov	r8, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	469a      	mov	sl, r3
 80058e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058ea:	d807      	bhi.n	80058fc <_printf_i+0x28>
 80058ec:	2f62      	cmp	r7, #98	; 0x62
 80058ee:	d80a      	bhi.n	8005906 <_printf_i+0x32>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	f000 80d4 	beq.w	8005a9e <_printf_i+0x1ca>
 80058f6:	2f58      	cmp	r7, #88	; 0x58
 80058f8:	f000 80c0 	beq.w	8005a7c <_printf_i+0x1a8>
 80058fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005904:	e03a      	b.n	800597c <_printf_i+0xa8>
 8005906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800590a:	2b15      	cmp	r3, #21
 800590c:	d8f6      	bhi.n	80058fc <_printf_i+0x28>
 800590e:	a101      	add	r1, pc, #4	; (adr r1, 8005914 <_printf_i+0x40>)
 8005910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005914:	0800596d 	.word	0x0800596d
 8005918:	08005981 	.word	0x08005981
 800591c:	080058fd 	.word	0x080058fd
 8005920:	080058fd 	.word	0x080058fd
 8005924:	080058fd 	.word	0x080058fd
 8005928:	080058fd 	.word	0x080058fd
 800592c:	08005981 	.word	0x08005981
 8005930:	080058fd 	.word	0x080058fd
 8005934:	080058fd 	.word	0x080058fd
 8005938:	080058fd 	.word	0x080058fd
 800593c:	080058fd 	.word	0x080058fd
 8005940:	08005a85 	.word	0x08005a85
 8005944:	080059ad 	.word	0x080059ad
 8005948:	08005a3f 	.word	0x08005a3f
 800594c:	080058fd 	.word	0x080058fd
 8005950:	080058fd 	.word	0x080058fd
 8005954:	08005aa7 	.word	0x08005aa7
 8005958:	080058fd 	.word	0x080058fd
 800595c:	080059ad 	.word	0x080059ad
 8005960:	080058fd 	.word	0x080058fd
 8005964:	080058fd 	.word	0x080058fd
 8005968:	08005a47 	.word	0x08005a47
 800596c:	682b      	ldr	r3, [r5, #0]
 800596e:	1d1a      	adds	r2, r3, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	602a      	str	r2, [r5, #0]
 8005974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800597c:	2301      	movs	r3, #1
 800597e:	e09f      	b.n	8005ac0 <_printf_i+0x1ec>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	0607      	lsls	r7, r0, #24
 8005986:	f103 0104 	add.w	r1, r3, #4
 800598a:	6029      	str	r1, [r5, #0]
 800598c:	d501      	bpl.n	8005992 <_printf_i+0xbe>
 800598e:	681e      	ldr	r6, [r3, #0]
 8005990:	e003      	b.n	800599a <_printf_i+0xc6>
 8005992:	0646      	lsls	r6, r0, #25
 8005994:	d5fb      	bpl.n	800598e <_printf_i+0xba>
 8005996:	f9b3 6000 	ldrsh.w	r6, [r3]
 800599a:	2e00      	cmp	r6, #0
 800599c:	da03      	bge.n	80059a6 <_printf_i+0xd2>
 800599e:	232d      	movs	r3, #45	; 0x2d
 80059a0:	4276      	negs	r6, r6
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	485a      	ldr	r0, [pc, #360]	; (8005b10 <_printf_i+0x23c>)
 80059a8:	230a      	movs	r3, #10
 80059aa:	e012      	b.n	80059d2 <_printf_i+0xfe>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0605      	lsls	r5, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xe8>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xee>
 80059bc:	0641      	lsls	r1, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe4>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4853      	ldr	r0, [pc, #332]	; (8005b10 <_printf_i+0x23c>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x114>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04b      	beq.n	8005a80 <_printf_i+0x1ac>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x116>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x148>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x148>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee4 	bl	80057f8 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14a      	bne.n	8005aca <_printf_i+0x1f6>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f043 0320 	orr.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	4833      	ldr	r0, [pc, #204]	; (8005b14 <_printf_i+0x240>)
 8005a48:	2778      	movs	r7, #120	; 0x78
 8005a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	6829      	ldr	r1, [r5, #0]
 8005a52:	061f      	lsls	r7, r3, #24
 8005a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a58:	d402      	bmi.n	8005a60 <_printf_i+0x18c>
 8005a5a:	065f      	lsls	r7, r3, #25
 8005a5c:	bf48      	it	mi
 8005a5e:	b2b6      	uxthmi	r6, r6
 8005a60:	07df      	lsls	r7, r3, #31
 8005a62:	bf48      	it	mi
 8005a64:	f043 0320 	orrmi.w	r3, r3, #32
 8005a68:	6029      	str	r1, [r5, #0]
 8005a6a:	bf48      	it	mi
 8005a6c:	6023      	strmi	r3, [r4, #0]
 8005a6e:	b91e      	cbnz	r6, 8005a78 <_printf_i+0x1a4>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f023 0320 	bic.w	r3, r3, #32
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	2310      	movs	r3, #16
 8005a7a:	e7a7      	b.n	80059cc <_printf_i+0xf8>
 8005a7c:	4824      	ldr	r0, [pc, #144]	; (8005b10 <_printf_i+0x23c>)
 8005a7e:	e7e4      	b.n	8005a4a <_printf_i+0x176>
 8005a80:	4615      	mov	r5, r2
 8005a82:	e7bd      	b.n	8005a00 <_printf_i+0x12c>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	6826      	ldr	r6, [r4, #0]
 8005a88:	6961      	ldr	r1, [r4, #20]
 8005a8a:	1d18      	adds	r0, r3, #4
 8005a8c:	6028      	str	r0, [r5, #0]
 8005a8e:	0635      	lsls	r5, r6, #24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	d501      	bpl.n	8005a98 <_printf_i+0x1c4>
 8005a94:	6019      	str	r1, [r3, #0]
 8005a96:	e002      	b.n	8005a9e <_printf_i+0x1ca>
 8005a98:	0670      	lsls	r0, r6, #25
 8005a9a:	d5fb      	bpl.n	8005a94 <_printf_i+0x1c0>
 8005a9c:	8019      	strh	r1, [r3, #0]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6123      	str	r3, [r4, #16]
 8005aa2:	4615      	mov	r5, r2
 8005aa4:	e7bc      	b.n	8005a20 <_printf_i+0x14c>
 8005aa6:	682b      	ldr	r3, [r5, #0]
 8005aa8:	1d1a      	adds	r2, r3, #4
 8005aaa:	602a      	str	r2, [r5, #0]
 8005aac:	681d      	ldr	r5, [r3, #0]
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7fa fb8c 	bl	80001d0 <memchr>
 8005ab8:	b108      	cbz	r0, 8005abe <_printf_i+0x1ea>
 8005aba:	1b40      	subs	r0, r0, r5
 8005abc:	6060      	str	r0, [r4, #4]
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	6123      	str	r3, [r4, #16]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac8:	e7aa      	b.n	8005a20 <_printf_i+0x14c>
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	462a      	mov	r2, r5
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	47d0      	blx	sl
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	d0ad      	beq.n	8005a34 <_printf_i+0x160>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	079b      	lsls	r3, r3, #30
 8005adc:	d413      	bmi.n	8005b06 <_printf_i+0x232>
 8005ade:	68e0      	ldr	r0, [r4, #12]
 8005ae0:	9b03      	ldr	r3, [sp, #12]
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	bfb8      	it	lt
 8005ae6:	4618      	movlt	r0, r3
 8005ae8:	e7a6      	b.n	8005a38 <_printf_i+0x164>
 8005aea:	2301      	movs	r3, #1
 8005aec:	4632      	mov	r2, r6
 8005aee:	4649      	mov	r1, r9
 8005af0:	4640      	mov	r0, r8
 8005af2:	47d0      	blx	sl
 8005af4:	3001      	adds	r0, #1
 8005af6:	d09d      	beq.n	8005a34 <_printf_i+0x160>
 8005af8:	3501      	adds	r5, #1
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	9903      	ldr	r1, [sp, #12]
 8005afe:	1a5b      	subs	r3, r3, r1
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dcf2      	bgt.n	8005aea <_printf_i+0x216>
 8005b04:	e7eb      	b.n	8005ade <_printf_i+0x20a>
 8005b06:	2500      	movs	r5, #0
 8005b08:	f104 0619 	add.w	r6, r4, #25
 8005b0c:	e7f5      	b.n	8005afa <_printf_i+0x226>
 8005b0e:	bf00      	nop
 8005b10:	08005f45 	.word	0x08005f45
 8005b14:	08005f56 	.word	0x08005f56

08005b18 <__sflush_r>:
 8005b18:	898a      	ldrh	r2, [r1, #12]
 8005b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	4605      	mov	r5, r0
 8005b20:	0710      	lsls	r0, r2, #28
 8005b22:	460c      	mov	r4, r1
 8005b24:	d458      	bmi.n	8005bd8 <__sflush_r+0xc0>
 8005b26:	684b      	ldr	r3, [r1, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc05      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	dc02      	bgt.n	8005b38 <__sflush_r+0x20>
 8005b32:	2000      	movs	r0, #0
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b3a:	2e00      	cmp	r6, #0
 8005b3c:	d0f9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b44:	682f      	ldr	r7, [r5, #0]
 8005b46:	6a21      	ldr	r1, [r4, #32]
 8005b48:	602b      	str	r3, [r5, #0]
 8005b4a:	d032      	beq.n	8005bb2 <__sflush_r+0x9a>
 8005b4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	075a      	lsls	r2, r3, #29
 8005b52:	d505      	bpl.n	8005b60 <__sflush_r+0x48>
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	1ac0      	subs	r0, r0, r3
 8005b58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b5a:	b10b      	cbz	r3, 8005b60 <__sflush_r+0x48>
 8005b5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	4602      	mov	r2, r0
 8005b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b66:	6a21      	ldr	r1, [r4, #32]
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b0      	blx	r6
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	d106      	bne.n	8005b80 <__sflush_r+0x68>
 8005b72:	6829      	ldr	r1, [r5, #0]
 8005b74:	291d      	cmp	r1, #29
 8005b76:	d82b      	bhi.n	8005bd0 <__sflush_r+0xb8>
 8005b78:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <__sflush_r+0x108>)
 8005b7a:	410a      	asrs	r2, r1
 8005b7c:	07d6      	lsls	r6, r2, #31
 8005b7e:	d427      	bmi.n	8005bd0 <__sflush_r+0xb8>
 8005b80:	2200      	movs	r2, #0
 8005b82:	6062      	str	r2, [r4, #4]
 8005b84:	04d9      	lsls	r1, r3, #19
 8005b86:	6922      	ldr	r2, [r4, #16]
 8005b88:	6022      	str	r2, [r4, #0]
 8005b8a:	d504      	bpl.n	8005b96 <__sflush_r+0x7e>
 8005b8c:	1c42      	adds	r2, r0, #1
 8005b8e:	d101      	bne.n	8005b94 <__sflush_r+0x7c>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b903      	cbnz	r3, 8005b96 <__sflush_r+0x7e>
 8005b94:	6560      	str	r0, [r4, #84]	; 0x54
 8005b96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b98:	602f      	str	r7, [r5, #0]
 8005b9a:	2900      	cmp	r1, #0
 8005b9c:	d0c9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005b9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	d002      	beq.n	8005bac <__sflush_r+0x94>
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fbea 	bl	8005380 <_free_r>
 8005bac:	2000      	movs	r0, #0
 8005bae:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb0:	e7c0      	b.n	8005b34 <__sflush_r+0x1c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	47b0      	blx	r6
 8005bb8:	1c41      	adds	r1, r0, #1
 8005bba:	d1c8      	bne.n	8005b4e <__sflush_r+0x36>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0c5      	beq.n	8005b4e <__sflush_r+0x36>
 8005bc2:	2b1d      	cmp	r3, #29
 8005bc4:	d001      	beq.n	8005bca <__sflush_r+0xb2>
 8005bc6:	2b16      	cmp	r3, #22
 8005bc8:	d101      	bne.n	8005bce <__sflush_r+0xb6>
 8005bca:	602f      	str	r7, [r5, #0]
 8005bcc:	e7b1      	b.n	8005b32 <__sflush_r+0x1a>
 8005bce:	89a3      	ldrh	r3, [r4, #12]
 8005bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd4:	81a3      	strh	r3, [r4, #12]
 8005bd6:	e7ad      	b.n	8005b34 <__sflush_r+0x1c>
 8005bd8:	690f      	ldr	r7, [r1, #16]
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	d0a9      	beq.n	8005b32 <__sflush_r+0x1a>
 8005bde:	0793      	lsls	r3, r2, #30
 8005be0:	680e      	ldr	r6, [r1, #0]
 8005be2:	bf08      	it	eq
 8005be4:	694b      	ldreq	r3, [r1, #20]
 8005be6:	600f      	str	r7, [r1, #0]
 8005be8:	bf18      	it	ne
 8005bea:	2300      	movne	r3, #0
 8005bec:	eba6 0807 	sub.w	r8, r6, r7
 8005bf0:	608b      	str	r3, [r1, #8]
 8005bf2:	f1b8 0f00 	cmp.w	r8, #0
 8005bf6:	dd9c      	ble.n	8005b32 <__sflush_r+0x1a>
 8005bf8:	6a21      	ldr	r1, [r4, #32]
 8005bfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bfc:	4643      	mov	r3, r8
 8005bfe:	463a      	mov	r2, r7
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	2800      	cmp	r0, #0
 8005c06:	dc06      	bgt.n	8005c16 <__sflush_r+0xfe>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	e78e      	b.n	8005b34 <__sflush_r+0x1c>
 8005c16:	4407      	add	r7, r0
 8005c18:	eba8 0800 	sub.w	r8, r8, r0
 8005c1c:	e7e9      	b.n	8005bf2 <__sflush_r+0xda>
 8005c1e:	bf00      	nop
 8005c20:	dfbffffe 	.word	0xdfbffffe

08005c24 <_fflush_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	690b      	ldr	r3, [r1, #16]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	b913      	cbnz	r3, 8005c34 <_fflush_r+0x10>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	4628      	mov	r0, r5
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	b118      	cbz	r0, 8005c3e <_fflush_r+0x1a>
 8005c36:	6a03      	ldr	r3, [r0, #32]
 8005c38:	b90b      	cbnz	r3, 8005c3e <_fflush_r+0x1a>
 8005c3a:	f7ff fa99 	bl	8005170 <__sinit>
 8005c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f3      	beq.n	8005c2e <_fflush_r+0xa>
 8005c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c48:	07d0      	lsls	r0, r2, #31
 8005c4a:	d404      	bmi.n	8005c56 <_fflush_r+0x32>
 8005c4c:	0599      	lsls	r1, r3, #22
 8005c4e:	d402      	bmi.n	8005c56 <_fflush_r+0x32>
 8005c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c52:	f7ff fb92 	bl	800537a <__retarget_lock_acquire_recursive>
 8005c56:	4628      	mov	r0, r5
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7ff ff5d 	bl	8005b18 <__sflush_r>
 8005c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c60:	07da      	lsls	r2, r3, #31
 8005c62:	4605      	mov	r5, r0
 8005c64:	d4e4      	bmi.n	8005c30 <_fflush_r+0xc>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	059b      	lsls	r3, r3, #22
 8005c6a:	d4e1      	bmi.n	8005c30 <_fflush_r+0xc>
 8005c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c6e:	f7ff fb85 	bl	800537c <__retarget_lock_release_recursive>
 8005c72:	e7dd      	b.n	8005c30 <_fflush_r+0xc>

08005c74 <__swbuf_r>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	460e      	mov	r6, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	b118      	cbz	r0, 8005c86 <__swbuf_r+0x12>
 8005c7e:	6a03      	ldr	r3, [r0, #32]
 8005c80:	b90b      	cbnz	r3, 8005c86 <__swbuf_r+0x12>
 8005c82:	f7ff fa75 	bl	8005170 <__sinit>
 8005c86:	69a3      	ldr	r3, [r4, #24]
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	071a      	lsls	r2, r3, #28
 8005c8e:	d525      	bpl.n	8005cdc <__swbuf_r+0x68>
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	b31b      	cbz	r3, 8005cdc <__swbuf_r+0x68>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	6922      	ldr	r2, [r4, #16]
 8005c98:	1a98      	subs	r0, r3, r2
 8005c9a:	6963      	ldr	r3, [r4, #20]
 8005c9c:	b2f6      	uxtb	r6, r6
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	4637      	mov	r7, r6
 8005ca2:	dc04      	bgt.n	8005cae <__swbuf_r+0x3a>
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff ffbc 	bl	8005c24 <_fflush_r>
 8005cac:	b9e0      	cbnz	r0, 8005ce8 <__swbuf_r+0x74>
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	60a3      	str	r3, [r4, #8]
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	6022      	str	r2, [r4, #0]
 8005cba:	701e      	strb	r6, [r3, #0]
 8005cbc:	6962      	ldr	r2, [r4, #20]
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d004      	beq.n	8005cce <__swbuf_r+0x5a>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d506      	bpl.n	8005cd8 <__swbuf_r+0x64>
 8005cca:	2e0a      	cmp	r6, #10
 8005ccc:	d104      	bne.n	8005cd8 <__swbuf_r+0x64>
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff ffa7 	bl	8005c24 <_fflush_r>
 8005cd6:	b938      	cbnz	r0, 8005ce8 <__swbuf_r+0x74>
 8005cd8:	4638      	mov	r0, r7
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f806 	bl	8005cf0 <__swsetup_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d0d5      	beq.n	8005c94 <__swbuf_r+0x20>
 8005ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8005cec:	e7f4      	b.n	8005cd8 <__swbuf_r+0x64>
	...

08005cf0 <__swsetup_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <__swsetup_r+0xac>)
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	b118      	cbz	r0, 8005d04 <__swsetup_r+0x14>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <__swsetup_r+0x14>
 8005d00:	f7ff fa36 	bl	8005170 <__sinit>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d0a:	0718      	lsls	r0, r3, #28
 8005d0c:	d422      	bmi.n	8005d54 <__swsetup_r+0x64>
 8005d0e:	06d9      	lsls	r1, r3, #27
 8005d10:	d407      	bmi.n	8005d22 <__swsetup_r+0x32>
 8005d12:	2309      	movs	r3, #9
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e034      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d22:	0758      	lsls	r0, r3, #29
 8005d24:	d512      	bpl.n	8005d4c <__swsetup_r+0x5c>
 8005d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d28:	b141      	cbz	r1, 8005d3c <__swsetup_r+0x4c>
 8005d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d002      	beq.n	8005d38 <__swsetup_r+0x48>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7ff fb24 	bl	8005380 <_free_r>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	2300      	movs	r3, #0
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f043 0308 	orr.w	r3, r3, #8
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b94b      	cbnz	r3, 8005d6c <__swsetup_r+0x7c>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	d003      	beq.n	8005d6c <__swsetup_r+0x7c>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f850 	bl	8005e0c <__smakebuf_r>
 8005d6c:	89a0      	ldrh	r0, [r4, #12]
 8005d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d72:	f010 0301 	ands.w	r3, r0, #1
 8005d76:	d00a      	beq.n	8005d8e <__swsetup_r+0x9e>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	6963      	ldr	r3, [r4, #20]
 8005d7e:	425b      	negs	r3, r3
 8005d80:	61a3      	str	r3, [r4, #24]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	b943      	cbnz	r3, 8005d98 <__swsetup_r+0xa8>
 8005d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d8a:	d1c4      	bne.n	8005d16 <__swsetup_r+0x26>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	0781      	lsls	r1, r0, #30
 8005d90:	bf58      	it	pl
 8005d92:	6963      	ldrpl	r3, [r4, #20]
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	e7f4      	b.n	8005d82 <__swsetup_r+0x92>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7f7      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d9c:	20000064 	.word	0x20000064

08005da0 <_sbrk_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <_sbrk_r+0x1c>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	f7fb f90c 	bl	8000fc8 <_sbrk>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_sbrk_r+0x1a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_sbrk_r+0x1a>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000364 	.word	0x20000364

08005dc0 <__swhatbuf_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	b096      	sub	sp, #88	; 0x58
 8005dcc:	4615      	mov	r5, r2
 8005dce:	461e      	mov	r6, r3
 8005dd0:	da0d      	bge.n	8005dee <__swhatbuf_r+0x2e>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	bf0c      	ite	eq
 8005dde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005de2:	2340      	movne	r3, #64	; 0x40
 8005de4:	2000      	movs	r0, #0
 8005de6:	6031      	str	r1, [r6, #0]
 8005de8:	602b      	str	r3, [r5, #0]
 8005dea:	b016      	add	sp, #88	; 0x58
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	466a      	mov	r2, sp
 8005df0:	f000 f848 	bl	8005e84 <_fstat_r>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	dbec      	blt.n	8005dd2 <__swhatbuf_r+0x12>
 8005df8:	9901      	ldr	r1, [sp, #4]
 8005dfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005dfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e02:	4259      	negs	r1, r3
 8005e04:	4159      	adcs	r1, r3
 8005e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e0a:	e7eb      	b.n	8005de4 <__swhatbuf_r+0x24>

08005e0c <__smakebuf_r>:
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e10:	079d      	lsls	r5, r3, #30
 8005e12:	4606      	mov	r6, r0
 8005e14:	460c      	mov	r4, r1
 8005e16:	d507      	bpl.n	8005e28 <__smakebuf_r+0x1c>
 8005e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	2301      	movs	r3, #1
 8005e22:	6163      	str	r3, [r4, #20]
 8005e24:	b002      	add	sp, #8
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	ab01      	add	r3, sp, #4
 8005e2a:	466a      	mov	r2, sp
 8005e2c:	f7ff ffc8 	bl	8005dc0 <__swhatbuf_r>
 8005e30:	9900      	ldr	r1, [sp, #0]
 8005e32:	4605      	mov	r5, r0
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff fb0f 	bl	8005458 <_malloc_r>
 8005e3a:	b948      	cbnz	r0, 8005e50 <__smakebuf_r+0x44>
 8005e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d4ef      	bmi.n	8005e24 <__smakebuf_r+0x18>
 8005e44:	f023 0303 	bic.w	r3, r3, #3
 8005e48:	f043 0302 	orr.w	r3, r3, #2
 8005e4c:	81a3      	strh	r3, [r4, #12]
 8005e4e:	e7e3      	b.n	8005e18 <__smakebuf_r+0xc>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	6020      	str	r0, [r4, #0]
 8005e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	6163      	str	r3, [r4, #20]
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	6120      	str	r0, [r4, #16]
 8005e62:	b15b      	cbz	r3, 8005e7c <__smakebuf_r+0x70>
 8005e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e68:	4630      	mov	r0, r6
 8005e6a:	f000 f81d 	bl	8005ea8 <_isatty_r>
 8005e6e:	b128      	cbz	r0, 8005e7c <__smakebuf_r+0x70>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	431d      	orrs	r5, r3
 8005e80:	81a5      	strh	r5, [r4, #12]
 8005e82:	e7cf      	b.n	8005e24 <__smakebuf_r+0x18>

08005e84 <_fstat_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	4d07      	ldr	r5, [pc, #28]	; (8005ea4 <_fstat_r+0x20>)
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	f7fb f871 	bl	8000f78 <_fstat>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d102      	bne.n	8005ea0 <_fstat_r+0x1c>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b103      	cbz	r3, 8005ea0 <_fstat_r+0x1c>
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	bd38      	pop	{r3, r4, r5, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000364 	.word	0x20000364

08005ea8 <_isatty_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	4d06      	ldr	r5, [pc, #24]	; (8005ec4 <_isatty_r+0x1c>)
 8005eac:	2300      	movs	r3, #0
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fb f870 	bl	8000f98 <_isatty>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d102      	bne.n	8005ec2 <_isatty_r+0x1a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	b103      	cbz	r3, 8005ec2 <_isatty_r+0x1a>
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	20000364 	.word	0x20000364

08005ec8 <_init>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr

08005ed4 <_fini>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr
