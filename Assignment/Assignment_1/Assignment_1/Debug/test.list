
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800501c  0800501c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005024  08005024  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005024  08005024  00015024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800502c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000006c  08005098  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005098  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b79c  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5a  00000000  00000000  0002b87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078c  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209e2  00000000  00000000  0002e654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000be55  00000000  00000000  0004f036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0c16  00000000  00000000  0005ae8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003298  00000000  00000000  0011baa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0011ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c70 	.word	0x08004c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004c70 	.word	0x08004c70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fb88 	bl	8000c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f87b 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f90b 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f8d9 	bl	8000744 <MX_USART2_UART_Init>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isFirstTime == true)
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <main+0xcc>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <main+0x22>
	  {
		  showMenu();
 800059a:	f000 f94d 	bl	8000838 <showMenu>
	  }
	  isFirstTime = false;
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <main+0xcc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	  scanf("%hhi",&choise);
 80005a4:	4929      	ldr	r1, [pc, #164]	; (800064c <main+0xd0>)
 80005a6:	482a      	ldr	r0, [pc, #168]	; (8000650 <main+0xd4>)
 80005a8:	f002 ff2e 	bl	8003408 <iscanf>

	  switch(choise)
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <main+0xd0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d002      	beq.n	80005ba <main+0x3e>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d01c      	beq.n	80005f2 <main+0x76>
 80005b8:	e040      	b.n	800063c <main+0xc0>
	  {
	  	  case 1:
	  	  {
	  		  printf("Enter Alphabet : ");
 80005ba:	4826      	ldr	r0, [pc, #152]	; (8000654 <main+0xd8>)
 80005bc:	f002 feb6 	bl	800332c <iprintf>

	  		  HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fbdd 	bl	8000d80 <HAL_Delay>
	  		  scanf(" %c",&alphaBetEntredByUser);
 80005c6:	4924      	ldr	r1, [pc, #144]	; (8000658 <main+0xdc>)
 80005c8:	4824      	ldr	r0, [pc, #144]	; (800065c <main+0xe0>)
 80005ca:	f002 ff1d 	bl	8003408 <iscanf>

	  		  HAL_Delay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f000 fbd6 	bl	8000d80 <HAL_Delay>
	  		  printf("character entered = %c\r\n",alphaBetEntredByUser);
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xdc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <main+0xe4>)
 80005dc:	f002 fea6 	bl	800332c <iprintf>
	  		  blinkAsMorseCode(alphaBetEntredByUser);
 80005e0:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <main+0xdc>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f935 	bl	8000854 <blinkAsMorseCode>
	  		  printf("Alphabet Blinking finished\r\n");
 80005ea:	481e      	ldr	r0, [pc, #120]	; (8000664 <main+0xe8>)
 80005ec:	f002 ff04 	bl	80033f8 <puts>
	  		  break;
 80005f0:	e028      	b.n	8000644 <main+0xc8>
	  	  }

	  	  case 2:
	  	  {
	  		  printf("Enter String : \r\n");
 80005f2:	481d      	ldr	r0, [pc, #116]	; (8000668 <main+0xec>)
 80005f4:	f002 ff00 	bl	80033f8 <puts>
	  		  scanf("%s",userEnteredString);
 80005f8:	491c      	ldr	r1, [pc, #112]	; (800066c <main+0xf0>)
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0xf4>)
 80005fc:	f002 ff04 	bl	8003408 <iscanf>
	  		  printf("string entered = %s\r\n",userEnteredString);
 8000600:	491a      	ldr	r1, [pc, #104]	; (800066c <main+0xf0>)
 8000602:	481c      	ldr	r0, [pc, #112]	; (8000674 <main+0xf8>)
 8000604:	f002 fe92 	bl	800332c <iprintf>
	  		  // Blink LED for each character in the string
	  		  for (int i = 0; i < strlen(userEnteredString); i++)
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	e009      	b.n	8000622 <main+0xa6>
	  		  {
	  			  blinkAsMorseCode(userEnteredString[i]);
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <main+0xf0>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f91c 	bl	8000854 <blinkAsMorseCode>
	  		  for (int i = 0; i < strlen(userEnteredString); i++)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4812      	ldr	r0, [pc, #72]	; (800066c <main+0xf0>)
 8000624:	f7ff fdd4 	bl	80001d0 <strlen>
 8000628:	4602      	mov	r2, r0
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d8ee      	bhi.n	800060e <main+0x92>
	  		  }

	  		  printf("String Blinking finished\r\n");
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xfc>)
 8000632:	f002 fee1 	bl	80033f8 <puts>

	  		  showMenu();
 8000636:	f000 f8ff 	bl	8000838 <showMenu>
	  		  break;
 800063a:	e003      	b.n	8000644 <main+0xc8>
	  	  }

	  	  default:
	  	  {
	  		  printf("Please choose from the choise list\r\n");
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0x100>)
 800063e:	f002 fedb 	bl	80033f8 <puts>
	  		  break;
 8000642:	bf00      	nop
	  if(isFirstTime == true)
 8000644:	e7a5      	b.n	8000592 <main+0x16>
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	20000146 	.word	0x20000146
 8000650:	08004c88 	.word	0x08004c88
 8000654:	08004c90 	.word	0x08004c90
 8000658:	20000110 	.word	0x20000110
 800065c:	08004ca4 	.word	0x08004ca4
 8000660:	08004ca8 	.word	0x08004ca8
 8000664:	08004cc4 	.word	0x08004cc4
 8000668:	08004ce0 	.word	0x08004ce0
 800066c:	20000114 	.word	0x20000114
 8000670:	08004cf4 	.word	0x08004cf4
 8000674:	08004cf8 	.word	0x08004cf8
 8000678:	08004d10 	.word	0x08004d10
 800067c:	08004d2c 	.word	0x08004d2c

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ffa4 	bl	80035dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f000 fe15 	bl	80012d4 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006b0:	f000 f944 	bl	800093c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b4:	f000 fdf0 	bl	8001298 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <SystemClock_Config+0xc0>)
 80006ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <SystemClock_Config+0xc0>)
 80006c0:	f023 0318 	bic.w	r3, r3, #24
 80006c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006c8:	2314      	movs	r3, #20
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006d8:	2360      	movs	r3, #96	; 0x60
 80006da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	2302      	movs	r3, #2
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006e8:	2310      	movs	r3, #16
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fe3f 	bl	8001380 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000708:	f000 f918 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2303      	movs	r3, #3
 8000712:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2101      	movs	r1, #1
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fa3f 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000730:	f000 f904 	bl	800093c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000734:	f001 fe52 	bl	80023dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000738:	bf00      	nop
 800073a:	3758      	adds	r7, #88	; 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART2_UART_Init+0x58>)
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_USART2_UART_Init+0x5c>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x58>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x58>)
 8000788:	f001 ff2a 	bl	80025e0 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8d3 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000088 	.word	0x20000088
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a16      	ldr	r2, [pc, #88]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	480b      	ldr	r0, [pc, #44]	; (8000834 <MX_GPIO_Init+0x90>)
 8000808:	f000 fd2e 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0x90>)
 8000824:	f000 fbb6 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000400 	.word	0x48000400

08000838 <showMenu>:

static void showMenu()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	printf("1. Blink Character\r\n");
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <showMenu+0x14>)
 800083e:	f002 fddb 	bl	80033f8 <puts>
	printf("2. Blink String\r\n");
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <showMenu+0x18>)
 8000844:	f002 fdd8 	bl	80033f8 <puts>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08004d50 	.word	0x08004d50
 8000850:	08004d64 	.word	0x08004d64

08000854 <blinkAsMorseCode>:
  * 				and then after will blink the led for that morse code with "." duration
  * 				of  200 ml sec and "-" duration of 600 ml sec
  *  ******************************************************************************
  */
static void blinkAsMorseCode(uint8_t iUsrEntredChar)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09e      	sub	sp, #120	; 0x78
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	// Morse code representation for letters
	const char* morseCodes[] = {
 800085e:	4a35      	ldr	r2, [pc, #212]	; (8000934 <blinkAsMorseCode+0xe0>)
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4611      	mov	r1, r2
 8000866:	2268      	movs	r2, #104	; 0x68
 8000868:	4618      	mov	r0, r3
 800086a:	f002 ff32 	bl	80036d2 <memcpy>
	    "-.--",  // Y
	    "--.."   // Z
	};

   // Check is letter is lower case
   if (iUsrEntredChar >= 'a' && iUsrEntredChar <= 'z')
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b60      	cmp	r3, #96	; 0x60
 8000872:	d905      	bls.n	8000880 <blinkAsMorseCode+0x2c>
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b7a      	cmp	r3, #122	; 0x7a
 8000878:	d802      	bhi.n	8000880 <blinkAsMorseCode+0x2c>
   {
	   //Convert it to upper case
	   iUsrEntredChar = iUsrEntredChar - 'a' + 'A';
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	3b20      	subs	r3, #32
 800087e:	71fb      	strb	r3, [r7, #7]
   }

   // Check if the character is a letter
   if (iUsrEntredChar >= 'A' && iUsrEntredChar <= 'Z')
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b40      	cmp	r3, #64	; 0x40
 8000884:	d952      	bls.n	800092c <blinkAsMorseCode+0xd8>
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b5a      	cmp	r3, #90	; 0x5a
 800088a:	d84f      	bhi.n	800092c <blinkAsMorseCode+0xd8>
   {
       int index = iUsrEntredChar - 'A';
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3b41      	subs	r3, #65	; 0x41
 8000890:	673b      	str	r3, [r7, #112]	; 0x70

       // Loop through the Morse code representation of the character
       for (int i = 0; morseCodes[index][i] != '\0'; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	677b      	str	r3, [r7, #116]	; 0x74
 8000896:	e03b      	b.n	8000910 <blinkAsMorseCode+0xbc>
       {
           if (morseCodes[index][i] == '.')
 8000898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	3378      	adds	r3, #120	; 0x78
 800089e:	443b      	add	r3, r7
 80008a0:	f853 2c70 	ldr.w	r2, [r3, #-112]
 80008a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b2e      	cmp	r3, #46	; 0x2e
 80008ac:	d110      	bne.n	80008d0 <blinkAsMorseCode+0x7c>
           {
        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4821      	ldr	r0, [pc, #132]	; (8000938 <blinkAsMorseCode+0xe4>)
 80008b4:	f000 fcd8 	bl	8001268 <HAL_GPIO_WritePin>
        	    HAL_Delay(200);
 80008b8:	20c8      	movs	r0, #200	; 0xc8
 80008ba:	f000 fa61 	bl	8000d80 <HAL_Delay>
        	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	481d      	ldr	r0, [pc, #116]	; (8000938 <blinkAsMorseCode+0xe4>)
 80008c4:	f000 fcd0 	bl	8001268 <HAL_GPIO_WritePin>
        	    HAL_Delay(200);
 80008c8:	20c8      	movs	r0, #200	; 0xc8
 80008ca:	f000 fa59 	bl	8000d80 <HAL_Delay>
 80008ce:	e01c      	b.n	800090a <blinkAsMorseCode+0xb6>
           }
           else if (morseCodes[index][i] == '-')
 80008d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	3378      	adds	r3, #120	; 0x78
 80008d6:	443b      	add	r3, r7
 80008d8:	f853 2c70 	ldr.w	r2, [r3, #-112]
 80008dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b2d      	cmp	r3, #45	; 0x2d
 80008e4:	d111      	bne.n	800090a <blinkAsMorseCode+0xb6>
           {
        	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2140      	movs	r1, #64	; 0x40
 80008ea:	4813      	ldr	r0, [pc, #76]	; (8000938 <blinkAsMorseCode+0xe4>)
 80008ec:	f000 fcbc 	bl	8001268 <HAL_GPIO_WritePin>
        	   HAL_Delay(600);
 80008f0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80008f4:	f000 fa44 	bl	8000d80 <HAL_Delay>
               HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	; 0x40
 80008fc:	480e      	ldr	r0, [pc, #56]	; (8000938 <blinkAsMorseCode+0xe4>)
 80008fe:	f000 fcb3 	bl	8001268 <HAL_GPIO_WritePin>
               HAL_Delay(600);
 8000902:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000906:	f000 fa3b 	bl	8000d80 <HAL_Delay>
       for (int i = 0; morseCodes[index][i] != '\0'; i++)
 800090a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800090c:	3301      	adds	r3, #1
 800090e:	677b      	str	r3, [r7, #116]	; 0x74
 8000910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	3378      	adds	r3, #120	; 0x78
 8000916:	443b      	add	r3, r7
 8000918:	f853 2c70 	ldr.w	r2, [r3, #-112]
 800091c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1b8      	bne.n	8000898 <blinkAsMorseCode+0x44>
           }
       }

       // Space between letters
       HAL_Delay(100);
 8000926:	2064      	movs	r0, #100	; 0x64
 8000928:	f000 fa2a 	bl	8000d80 <HAL_Delay>
   }
}
 800092c:	bf00      	nop
 800092e:	3778      	adds	r7, #120	; 0x78
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08004e10 	.word	0x08004e10
 8000938:	48000400 	.word	0x48000400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09e      	sub	sp, #120	; 0x78
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	2254      	movs	r2, #84	; 0x54
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fe13 	bl	80035dc <memset>
  if(huart->Instance==USART2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a28      	ldr	r2, [pc, #160]	; (8000a5c <HAL_UART_MspInit+0xcc>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d148      	bne.n	8000a52 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fb0f 	bl	8001ff0 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ffb0 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e0:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	6593      	str	r3, [r2, #88]	; 0x58
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a19      	ldr	r2, [pc, #100]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <HAL_UART_MspInit+0xd0>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f000 fab3 	bl	8000f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a40:	2303      	movs	r3, #3
 8000a42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 faa1 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	3778      	adds	r7, #120	; 0x78
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40021000 	.word	0x40021000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f946 	bl	8000d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	75fb      	strb	r3, [r7, #23]
	result = HAL_UART_Transmit(&huart2,ptr,len,500);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <_write+0x40>)
 8000ad4:	f001 fdd2 	bl	800267c <HAL_UART_Transmit>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	75fb      	strb	r3, [r7, #23]
	if((result == HAL_ERROR) || (result == HAL_BUSY))
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d002      	beq.n	8000ae8 <_write+0x30>
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d101      	bne.n	8000aec <_write+0x34>
	{
		Error_Handler();
 8000ae8:	f7ff ff28 	bl	800093c <Error_Handler>
	}
	return len;
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000088 	.word	0x20000088

08000afc <_close>:


int _close(int32_t file)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <_close+0x20>)
 8000b06:	2258      	movs	r2, #88	; 0x58
 8000b08:	601a      	str	r2, [r3, #0]
	return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	2000028c 	.word	0x2000028c

08000b20 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <_fstat+0x20>)
 8000b2c:	2258      	movs	r2, #88	; 0x58
 8000b2e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	2000028c 	.word	0x2000028c

08000b44 <_isatty>:

int _isatty(int32_t file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <_isatty+0x1c>)
 8000b4e:	2258      	movs	r2, #88	; 0x58
 8000b50:	601a      	str	r2, [r3, #0]
	return 0;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	2000028c 	.word	0x2000028c

08000b64 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <_lseek+0x24>)
 8000b72:	2258      	movs	r2, #88	; 0x58
 8000b74:	601a      	str	r2, [r3, #0]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000028c 	.word	0x2000028c

08000b8c <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2,ptr,1,HAL_MAX_DELAY);
 8000b98:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	68b9      	ldr	r1, [r7, #8]
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <_read+0x24>)
 8000ba2:	f001 fdf5 	bl	8002790 <HAL_UART_Receive>
	return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000088 	.word	0x20000088

08000bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bbc:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <_sbrk+0x5c>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <_sbrk+0x60>)
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <_sbrk+0x64>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <_sbrk+0x68>)
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d207      	bcs.n	8000bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be4:	f002 fd48 	bl	8003678 <__errno>
 8000be8:	4603      	mov	r3, r0
 8000bea:	220c      	movs	r2, #12
 8000bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e009      	b.n	8000c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <_sbrk+0x64>)
 8000c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20010000 	.word	0x20010000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	20000148 	.word	0x20000148
 8000c1c:	200002a0 	.word	0x200002a0

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffea 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c4e:	490d      	ldr	r1, [pc, #52]	; (8000c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c50:	4a0d      	ldr	r2, [pc, #52]	; (8000c88 <LoopForever+0xe>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c64:	4c0a      	ldr	r4, [pc, #40]	; (8000c90 <LoopForever+0x16>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f002 fd07 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c76:	f7ff fc81 	bl	800057c <main>

08000c7a <LoopForever>:

LoopForever:
    b LoopForever
 8000c7a:	e7fe      	b.n	8000c7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c7c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c88:	0800502c 	.word	0x0800502c
  ldr r2, =_sbss
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c90:	2000029c 	.word	0x2000029c

08000c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_IRQHandler>

08000c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f943 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f80e 	bl	8000cc8 <HAL_InitTick>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	e001      	b.n	8000cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cb8:	f7ff fe46 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cd4:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_InitTick+0x6c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d023      	beq.n	8000d24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_InitTick+0x70>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f941 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10f      	bne.n	8000d1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d809      	bhi.n	8000d18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f919 	bl	8000f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_InitTick+0x74>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
 8000d16:	e007      	b.n	8000d28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e004      	b.n	8000d28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
 8000d22:	e001      	b.n	8000d28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	2000014c 	.word	0x2000014c

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000014c 	.word	0x2000014c

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffee 	bl	8000d68 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffde 	bl	8000d68 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000000c 	.word	0x2000000c

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff8e 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff47 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5c 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff8e 	bl	8000e80 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5d 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa2:	e148      	b.n	8001236 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 813a 	beq.w	8001230 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x40>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 8094 	beq.w	8001230 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b52      	ldr	r3, [pc, #328]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110c:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6613      	str	r3, [r2, #96]	; 0x60
 8001114:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <HAL_GPIO_Init+0x2c0>)
 8001116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1d4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a43      	ldr	r2, [pc, #268]	; (800125c <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1d0>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a42      	ldr	r2, [pc, #264]	; (8001260 <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1cc>
 800115c:	2302      	movs	r3, #2
 800115e:	e004      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001160:	2307      	movs	r3, #7
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_GPIO_Init+0x1d6>
 8001168:	2300      	movs	r3, #0
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	f002 0203 	and.w	r2, r2, #3
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	4093      	lsls	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117a:	4937      	ldr	r1, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2c4>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ac:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001200:	4a18      	ldr	r2, [pc, #96]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x2d0>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	3301      	adds	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	f47f aeaf 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	48000400 	.word	0x48000400
 8001260:	48000800 	.word	0x48000800
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001284:	e002      	b.n	800128c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e2:	d130      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f0:	d038      	beq.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012fa:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2232      	movs	r2, #50	; 0x32
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	0c9b      	lsrs	r3, r3, #18
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001318:	e002      	b.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3b01      	subs	r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001320:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132c:	d102      	bne.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f2      	bne.n	800131a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d110      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e00f      	b.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001352:	d007      	beq.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40007000 	.word	0x40007000
 8001378:	20000004 	.word	0x20000004
 800137c:	431bde83 	.word	0x431bde83

08001380 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	f000 bc02 	b.w	8001b98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001394:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800139e:	4b94      	ldr	r3, [pc, #592]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80e4 	beq.w	800157e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_RCC_OscConfig+0x4c>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b0c      	cmp	r3, #12
 80013c0:	f040 808b 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 8087 	bne.w	80014da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013cc:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d005      	beq.n	80013e4 <HAL_RCC_OscConfig+0x64>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e3d9      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1a      	ldr	r2, [r3, #32]
 80013e8:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_RCC_OscConfig+0x7e>
 80013f4:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013fc:	e005      	b.n	800140a <HAL_RCC_OscConfig+0x8a>
 80013fe:	4b7c      	ldr	r3, [pc, #496]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140a:	4293      	cmp	r3, r2
 800140c:	d223      	bcs.n	8001456 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	4618      	mov	r0, r3
 8001414:	f000 fd8c 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e3ba      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a72      	ldr	r2, [pc, #456]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	496d      	ldr	r1, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001440:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	4968      	ldr	r1, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e025      	b.n	80014a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4960      	ldr	r1, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	495b      	ldr	r1, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d109      	bne.n	80014a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fd4c 	bl	8001f30 <RCC_SetFlashLatencyFromMSIRange>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e37a      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014a2:	f000 fc81 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4950      	ldr	r1, [pc, #320]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_RCC_OscConfig+0x278>)
 80014c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014c2:	4b4e      	ldr	r3, [pc, #312]	; (80015fc <HAL_RCC_OscConfig+0x27c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fbfe 	bl	8000cc8 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d052      	beq.n	800157c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	e35e      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d032      	beq.n	8001548 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc3b 	bl	8000d68 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc37 	bl	8000d68 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e347      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a35      	ldr	r2, [pc, #212]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4930      	ldr	r1, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	492b      	ldr	r1, [pc, #172]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001542:	4313      	orrs	r3, r2
 8001544:	604b      	str	r3, [r1, #4]
 8001546:	e01a      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc08 	bl	8000d68 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800155c:	f7ff fc04 	bl	8000d68 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e314      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x1dc>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d073      	beq.n	8001672 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b08      	cmp	r3, #8
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x21c>
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d10e      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d10b      	bne.n	80015b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d063      	beq.n	8001670 <HAL_RCC_OscConfig+0x2f0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d15f      	bne.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e2f1      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015bc:	d106      	bne.n	80015cc <HAL_RCC_OscConfig+0x24c>
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e025      	b.n	8001618 <HAL_RCC_OscConfig+0x298>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d4:	d114      	bne.n	8001600 <HAL_RCC_OscConfig+0x280>
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a02      	ldr	r2, [pc, #8]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 80015e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	e013      	b.n	8001618 <HAL_RCC_OscConfig+0x298>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08004e84 	.word	0x08004e84
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000008 	.word	0x20000008
 8001600:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a9f      	ldr	r2, [pc, #636]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a9c      	ldr	r2, [pc, #624]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fba2 	bl	8000d68 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fb9e 	bl	8000d68 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e2ae      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x2a8>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fb8e 	bl	8000d68 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001650:	f7ff fb8a 	bl	8000d68 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b64      	cmp	r3, #100	; 0x64
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e29a      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x2d0>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d060      	beq.n	8001740 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b04      	cmp	r3, #4
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x310>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d119      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d116      	bne.n	80016be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001690:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x328>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e277      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	4973      	ldr	r1, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016bc:	e040      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d023      	beq.n	800170e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c6:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb49 	bl	8000d68 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016da:	f7ff fb45 	bl	8000d68 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e255      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	495f      	ldr	r1, [pc, #380]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a5c      	ldr	r2, [pc, #368]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb25 	bl	8000d68 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fb21 	bl	8000d68 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e231      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d03c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01c      	beq.n	800178e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	4a4a      	ldr	r2, [pc, #296]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fb00 	bl	8000d68 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff fafc 	bl	8000d68 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e20c      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ef      	beq.n	800176c <HAL_RCC_OscConfig+0x3ec>
 800178c:	e01b      	b.n	80017c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178e:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff fae3 	bl	8000d68 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff fadf 	bl	8000d68 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1ef      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ef      	bne.n	80017a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80a6 	beq.w	8001920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d4:	2300      	movs	r3, #0
 80017d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10d      	bne.n	8001800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	4a26      	ldr	r2, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6593      	str	r3, [r2, #88]	; 0x58
 80017f0:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001800:	4b21      	ldr	r3, [pc, #132]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d118      	bne.n	800183e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001818:	f7ff faa6 	bl	8000d68 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff faa2 	bl	8000d68 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1b2      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x508>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d8>
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	e029      	b.n	80018ac <HAL_RCC_OscConfig+0x52c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b05      	cmp	r3, #5
 800185e:	d115      	bne.n	800188c <HAL_RCC_OscConfig+0x50c>
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x52c>
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40007000 	.word	0x40007000
 800188c:	4b9a      	ldr	r3, [pc, #616]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	4a99      	ldr	r2, [pc, #612]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189c:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a95      	ldr	r2, [pc, #596]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 80018a4:	f023 0304 	bic.w	r3, r3, #4
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa58 	bl	8000d68 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7ff fa54 	bl	8000d68 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e162      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ed      	beq.n	80018bc <HAL_RCC_OscConfig+0x53c>
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e2:	f7ff fa41 	bl	8000d68 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fa3d 	bl	8000d68 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e14b      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001900:	4b7d      	ldr	r3, [pc, #500]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ed      	bne.n	80018ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 800191a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193a:	4a6f      	ldr	r2, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa10 	bl	8000d68 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa0c 	bl	8000d68 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e11c      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195e:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x5cc>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001976:	f023 0301 	bic.w	r3, r3, #1
 800197a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f9f3 	bl	8000d68 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001986:	f7ff f9ef 	bl	8000d68 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0ff      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 800199a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80f3 	beq.w	8001b96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	f040 80c9 	bne.w	8001b4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0203 	and.w	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d12c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	3b01      	subs	r3, #1
 80019da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d123      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d11b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	085b      	lsrs	r3, r3, #1
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d06b      	beq.n	8001b00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d062      	beq.n	8001af4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a2e:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0ac      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2d      	ldr	r2, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a4a:	f7ff f98d 	bl	8000d68 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff f989 	bl	8000d68 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e099      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x77c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a8a:	0212      	lsls	r2, r2, #8
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a92:	0852      	lsrs	r2, r2, #1
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0552      	lsls	r2, r2, #21
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a9e:	0852      	lsrs	r2, r2, #1
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0652      	lsls	r2, r2, #25
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aaa:	06d2      	lsls	r2, r2, #27
 8001aac:	430a      	orrs	r2, r1
 8001aae:	4912      	ldr	r1, [pc, #72]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001acc:	f7ff f94c 	bl	8000d68 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f948 	bl	8000d68 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e058      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <HAL_RCC_OscConfig+0x778>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001af2:	e050      	b.n	8001b96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e04f      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d144      	bne.n	8001b96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a23      	ldr	r2, [pc, #140]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b24:	f7ff f920 	bl	8000d68 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f91c 	bl	8000d68 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e02c      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x7ac>
 8001b4a:	e024      	b.n	8001b96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d01f      	beq.n	8001b92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f903 	bl	8000d68 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f8ff 	bl	8000d68 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e00f      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4905      	ldr	r1, [pc, #20]	; (8001ba0 <HAL_RCC_OscConfig+0x820>)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_OscConfig+0x824>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60cb      	str	r3, [r1, #12]
 8001b90:	e001      	b.n	8001b96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3720      	adds	r7, #32
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	feeefffc 	.word	0xfeeefffc

08001ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0e7      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4970      	ldr	r1, [pc, #448]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b6e      	ldr	r3, [pc, #440]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0cf      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d010      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d908      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4960      	ldr	r1, [pc, #384]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d04c      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d121      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0a6      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e09a      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c5e:	4b4e      	ldr	r3, [pc, #312]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e08e      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c6e:	4b4a      	ldr	r3, [pc, #296]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e086      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4943      	ldr	r1, [pc, #268]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c90:	f7ff f86a 	bl	8000d68 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f866 	bl	8000d68 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e06e      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b3a      	ldr	r3, [pc, #232]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d208      	bcs.n	8001cee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	492b      	ldr	r1, [pc, #172]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d210      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4923      	ldr	r1, [pc, #140]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_ClockConfig+0x1ec>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e036      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4918      	ldr	r1, [pc, #96]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d48:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4910      	ldr	r1, [pc, #64]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d5c:	f000 f824 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	490b      	ldr	r1, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x1f4>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	4a09      	ldr	r2, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ffa1 	bl	8000cc8 <HAL_InitTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022000 	.word	0x40022000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08004e84 	.word	0x08004e84
 8001da0:	20000004 	.word	0x20000004
 8001da4:	20000008 	.word	0x20000008

08001da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_GetSysClockFreq+0x34>
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	d121      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d11e      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e005      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	091b      	lsrs	r3, r3, #4
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	e004      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d134      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d003      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0xac>
 8001e4c:	e005      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e50:	617b      	str	r3, [r7, #20]
      break;
 8001e52:	e005      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8001e56:	617b      	str	r3, [r7, #20]
      break;
 8001e58:	e002      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	617b      	str	r3, [r7, #20]
      break;
 8001e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e60:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	fb03 f202 	mul.w	r2, r3, r2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	0e5b      	lsrs	r3, r3, #25
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	3301      	adds	r3, #1
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08004e9c 	.word	0x08004e9c
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001edc:	f7ff fff0 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004e94 	.word	0x08004e94

08001f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f08:	f7ff ffda 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	0adb      	lsrs	r3, r3, #11
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	4904      	ldr	r1, [pc, #16]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1a:	5ccb      	ldrb	r3, [r1, r3]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08004e94 	.word	0x08004e94

08001f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f48:	f7ff f9b6 	bl	80012b8 <HAL_PWREx_GetVoltageRange>
 8001f4c:	6178      	str	r0, [r7, #20]
 8001f4e:	e014      	b.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	4a24      	ldr	r2, [pc, #144]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f5c:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff f9a6 	bl	80012b8 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a1d      	ldr	r2, [pc, #116]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f80:	d10b      	bne.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d919      	bls.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f8c:	d902      	bls.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8e:	2302      	movs	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	e013      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f94:	2301      	movs	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e010      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d902      	bls.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e00a      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b80      	cmp	r3, #128	; 0x80
 8001faa:	d102      	bne.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	e004      	b.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b70      	cmp	r3, #112	; 0x70
 8001fb6:	d101      	bne.n	8001fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 0207 	bic.w	r2, r3, #7
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fcc:	4b07      	ldr	r3, [pc, #28]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002008:	2b00      	cmp	r3, #0
 800200a:	d031      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002014:	d01a      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800201a:	d814      	bhi.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002020:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002024:	d10f      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002026:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002032:	e00c      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9de 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8002040:	4603      	mov	r3, r0
 8002042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002044:	e003      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	74fb      	strb	r3, [r7, #19]
      break;
 800204a:	e000      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800204c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800204e:	7cfb      	ldrb	r3, [r7, #19]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002054:	4b51      	ldr	r3, [pc, #324]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	494e      	ldr	r1, [pc, #312]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800206a:	e001      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 809e 	beq.w	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002082:	4b46      	ldr	r3, [pc, #280]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002098:	4b40      	ldr	r3, [pc, #256]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	4a3f      	ldr	r2, [pc, #252]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6593      	str	r3, [r2, #88]	; 0x58
 80020a4:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a39      	ldr	r2, [pc, #228]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fe52 	bl	8000d68 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020c6:	e009      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fe4e 	bl	8000d68 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d902      	bls.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	74fb      	strb	r3, [r7, #19]
        break;
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ef      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d15a      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01e      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	d019      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002136:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d016      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fe0e 	bl	8000d68 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	e00b      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe fe0a 	bl	8000d68 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d902      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	74fb      	strb	r3, [r7, #19]
            break;
 8002166:	e006      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ec      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002176:	7cfb      	ldrb	r3, [r7, #19]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	4904      	ldr	r1, [pc, #16]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002192:	e009      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
 8002198:	e006      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a8:	7c7b      	ldrb	r3, [r7, #17]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a89      	ldr	r2, [pc, #548]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021c6:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f023 0203 	bic.w	r2, r3, #3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4980      	ldr	r1, [pc, #512]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021e8:	4b7b      	ldr	r3, [pc, #492]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f023 020c 	bic.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	4978      	ldr	r1, [pc, #480]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800220a:	4b73      	ldr	r3, [pc, #460]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	496f      	ldr	r1, [pc, #444]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	4967      	ldr	r1, [pc, #412]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	495e      	ldr	r1, [pc, #376]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002270:	4b59      	ldr	r3, [pc, #356]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	4956      	ldr	r1, [pc, #344]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	494d      	ldr	r1, [pc, #308]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d028      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022b4:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4945      	ldr	r1, [pc, #276]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d2:	d106      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d4:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
 80022e0:	e011      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ea:	d10c      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f882 	bl	80023fc <RCCEx_PLLSAI1_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d028      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	492d      	ldr	r1, [pc, #180]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002330:	d106      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233c:	60d3      	str	r3, [r2, #12]
 800233e:	e011      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002348:	d10c      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3304      	adds	r3, #4
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f000 f853 	bl	80023fc <RCCEx_PLLSAI1_Config>
 8002356:	4603      	mov	r3, r0
 8002358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235a:	7cfb      	ldrb	r3, [r7, #19]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002370:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	4916      	ldr	r1, [pc, #88]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800238a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238e:	d10c      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	2102      	movs	r1, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f830 	bl	80023fc <RCCEx_PLLSAI1_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000

080023dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240a:	4b74      	ldr	r3, [pc, #464]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d018      	beq.n	8002448 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002416:	4b71      	ldr	r3, [pc, #452]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
       ||
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800242e:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	091b      	lsrs	r3, r3, #4
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
       ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d047      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d018      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x86>
 8002450:	2b03      	cmp	r3, #3
 8002452:	d825      	bhi.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002454:	2b01      	cmp	r3, #1
 8002456:	d002      	beq.n	800245e <RCCEx_PLLSAI1_Config+0x62>
 8002458:	2b02      	cmp	r3, #2
 800245a:	d009      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x74>
 800245c:	e020      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800245e:	4b5f      	ldr	r3, [pc, #380]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d11d      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e01a      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	2b00      	cmp	r3, #0
 800247a:	d116      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002480:	e013      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002482:	4b56      	ldr	r3, [pc, #344]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800248e:	4b53      	ldr	r3, [pc, #332]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800249e:	e006      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e004      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	430b      	orrs	r3, r1
 80024cc:	4943      	ldr	r1, [pc, #268]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d17c      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3f      	ldr	r2, [pc, #252]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe fc40 	bl	8000d68 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ea:	e009      	b.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ec:	f7fe fc3c 	bl	8000d68 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	73fb      	strb	r3, [r7, #15]
        break;
 80024fe:	e005      	b.n	800250c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ef      	bne.n	80024ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d15f      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002518:	4b30      	ldr	r3, [pc, #192]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	0211      	lsls	r1, r2, #8
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68d2      	ldr	r2, [r2, #12]
 800252e:	06d2      	lsls	r2, r2, #27
 8002530:	430a      	orrs	r2, r1
 8002532:	492a      	ldr	r1, [pc, #168]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	610b      	str	r3, [r1, #16]
 8002538:	e027      	b.n	800258a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d112      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	0211      	lsls	r1, r2, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6912      	ldr	r2, [r2, #16]
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0552      	lsls	r2, r2, #21
 800255c:	430a      	orrs	r2, r1
 800255e:	491f      	ldr	r1, [pc, #124]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	610b      	str	r3, [r1, #16]
 8002564:	e011      	b.n	800258a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800256e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6892      	ldr	r2, [r2, #8]
 8002576:	0211      	lsls	r1, r2, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6952      	ldr	r2, [r2, #20]
 800257c:	0852      	lsrs	r2, r2, #1
 800257e:	3a01      	subs	r2, #1
 8002580:	0652      	lsls	r2, r2, #25
 8002582:	430a      	orrs	r2, r1
 8002584:	4915      	ldr	r1, [pc, #84]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a13      	ldr	r2, [pc, #76]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002594:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7fe fbe7 	bl	8000d68 <HAL_GetTick>
 800259a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800259c:	e009      	b.n	80025b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259e:	f7fe fbe3 	bl	8000d68 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	73fb      	strb	r3, [r7, #15]
          break;
 80025b0:	e005      	b.n	80025be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ef      	beq.n	800259e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d106      	bne.n	80025d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e040      	b.n	8002674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe f9c4 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fba8 	bl	8002d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f979 	bl	8002924 <UART_SetConfig>
 8002632:	4603      	mov	r3, r0
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e01b      	b.n	8002674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800264a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800265a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fc27 	bl	8002ec0 <UART_CheckIdleState>
 8002672:	4603      	mov	r3, r0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af02      	add	r7, sp, #8
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002690:	2b20      	cmp	r3, #32
 8002692:	d178      	bne.n	8002786 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_UART_Transmit+0x24>
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e071      	b.n	8002788 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2221      	movs	r2, #33	; 0x21
 80026b0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fb59 	bl	8000d68 <HAL_GetTick>
 80026b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d108      	bne.n	80026e4 <HAL_UART_Transmit+0x68>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e003      	b.n	80026ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026ec:	e030      	b.n	8002750 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fc89 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e03c      	b.n	8002788 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	b292      	uxth	r2, r2
 8002722:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	3302      	adds	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e008      	b.n	800273e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b292      	uxth	r2, r2
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002756:	b29b      	uxth	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1c8      	bne.n	80026ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2200      	movs	r2, #0
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fc52 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e005      	b.n	8002788 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002786:	2302      	movs	r3, #2
  }
}
 8002788:	4618      	mov	r0, r3
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	f040 80b6 	bne.w	8002918 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Receive+0x28>
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0ae      	b.n	800291a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2222      	movs	r2, #34	; 0x22
 80027c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d2:	f7fe fac9 	bl	8000d68 <HAL_GetTick>
 80027d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	88fa      	ldrh	r2, [r7, #6]
 80027dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f0:	d10e      	bne.n	8002810 <HAL_UART_Receive+0x80>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <HAL_UART_Receive+0x76>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002800:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002804:	e02d      	b.n	8002862 <HAL_UART_Receive+0xd2>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	22ff      	movs	r2, #255	; 0xff
 800280a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800280e:	e028      	b.n	8002862 <HAL_UART_Receive+0xd2>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10d      	bne.n	8002834 <HAL_UART_Receive+0xa4>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d104      	bne.n	800282a <HAL_UART_Receive+0x9a>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002828:	e01b      	b.n	8002862 <HAL_UART_Receive+0xd2>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	227f      	movs	r2, #127	; 0x7f
 800282e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002832:	e016      	b.n	8002862 <HAL_UART_Receive+0xd2>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800283c:	d10d      	bne.n	800285a <HAL_UART_Receive+0xca>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_UART_Receive+0xc0>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	227f      	movs	r2, #127	; 0x7f
 800284a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800284e:	e008      	b.n	8002862 <HAL_UART_Receive+0xd2>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	223f      	movs	r2, #63	; 0x3f
 8002854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002858:	e003      	b.n	8002862 <HAL_UART_Receive+0xd2>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002868:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002872:	d108      	bne.n	8002886 <HAL_UART_Receive+0xf6>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e003      	b.n	800288e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800288e:	e037      	b.n	8002900 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2200      	movs	r2, #0
 8002898:	2120      	movs	r1, #32
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fbb8 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e033      	b.n	800291a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028be:	b29a      	uxth	r2, r3
 80028c0:	8a7b      	ldrh	r3, [r7, #18]
 80028c2:	4013      	ands	r3, r2
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e00d      	b.n	80028ee <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8a7b      	ldrh	r3, [r7, #18]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1c1      	bne.n	8002890 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002928:	b08a      	sub	sp, #40	; 0x28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	431a      	orrs	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4313      	orrs	r3, r2
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4bb4      	ldr	r3, [pc, #720]	; (8002c24 <UART_SetConfig+0x300>)
 8002954:	4013      	ands	r3, r2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295c:	430b      	orrs	r3, r1
 800295e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4aa9      	ldr	r2, [pc, #676]	; (8002c28 <UART_SetConfig+0x304>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	4313      	orrs	r3, r2
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4aa0      	ldr	r2, [pc, #640]	; (8002c2c <UART_SetConfig+0x308>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d126      	bne.n	80029fc <UART_SetConfig+0xd8>
 80029ae:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <UART_SetConfig+0x30c>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d81b      	bhi.n	80029f4 <UART_SetConfig+0xd0>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <UART_SetConfig+0xa0>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	080029d5 	.word	0x080029d5
 80029c8:	080029e5 	.word	0x080029e5
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029ed 	.word	0x080029ed
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029da:	e080      	b.n	8002ade <UART_SetConfig+0x1ba>
 80029dc:	2302      	movs	r3, #2
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029e2:	e07c      	b.n	8002ade <UART_SetConfig+0x1ba>
 80029e4:	2304      	movs	r3, #4
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e078      	b.n	8002ade <UART_SetConfig+0x1ba>
 80029ec:	2308      	movs	r3, #8
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e074      	b.n	8002ade <UART_SetConfig+0x1ba>
 80029f4:	2310      	movs	r3, #16
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e070      	b.n	8002ade <UART_SetConfig+0x1ba>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a8c      	ldr	r2, [pc, #560]	; (8002c34 <UART_SetConfig+0x310>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d138      	bne.n	8002a78 <UART_SetConfig+0x154>
 8002a06:	4b8a      	ldr	r3, [pc, #552]	; (8002c30 <UART_SetConfig+0x30c>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d82d      	bhi.n	8002a70 <UART_SetConfig+0x14c>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <UART_SetConfig+0xf8>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a51 	.word	0x08002a51
 8002a20:	08002a71 	.word	0x08002a71
 8002a24:	08002a71 	.word	0x08002a71
 8002a28:	08002a71 	.word	0x08002a71
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002a71 	.word	0x08002a71
 8002a34:	08002a71 	.word	0x08002a71
 8002a38:	08002a71 	.word	0x08002a71
 8002a3c:	08002a59 	.word	0x08002a59
 8002a40:	08002a71 	.word	0x08002a71
 8002a44:	08002a71 	.word	0x08002a71
 8002a48:	08002a71 	.word	0x08002a71
 8002a4c:	08002a69 	.word	0x08002a69
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a56:	e042      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a5e:	e03e      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002a60:	2304      	movs	r3, #4
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a66:	e03a      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002a68:	2308      	movs	r3, #8
 8002a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a6e:	e036      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002a70:	2310      	movs	r3, #16
 8002a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a76:	e032      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <UART_SetConfig+0x304>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12a      	bne.n	8002ad8 <UART_SetConfig+0x1b4>
 8002a82:	4b6b      	ldr	r3, [pc, #428]	; (8002c30 <UART_SetConfig+0x30c>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a90:	d01a      	beq.n	8002ac8 <UART_SetConfig+0x1a4>
 8002a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a96:	d81b      	bhi.n	8002ad0 <UART_SetConfig+0x1ac>
 8002a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9c:	d00c      	beq.n	8002ab8 <UART_SetConfig+0x194>
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa2:	d815      	bhi.n	8002ad0 <UART_SetConfig+0x1ac>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <UART_SetConfig+0x18c>
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d008      	beq.n	8002ac0 <UART_SetConfig+0x19c>
 8002aae:	e00f      	b.n	8002ad0 <UART_SetConfig+0x1ac>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ab6:	e012      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002abe:	e00e      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ac6:	e00a      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ace:	e006      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad6:	e002      	b.n	8002ade <UART_SetConfig+0x1ba>
 8002ad8:	2310      	movs	r3, #16
 8002ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a51      	ldr	r2, [pc, #324]	; (8002c28 <UART_SetConfig+0x304>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d17a      	bne.n	8002bde <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d824      	bhi.n	8002b3a <UART_SetConfig+0x216>
 8002af0:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <UART_SetConfig+0x1d4>)
 8002af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af6:	bf00      	nop
 8002af8:	08002b1d 	.word	0x08002b1d
 8002afc:	08002b3b 	.word	0x08002b3b
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b3b 	.word	0x08002b3b
 8002b08:	08002b2b 	.word	0x08002b2b
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b3b 	.word	0x08002b3b
 8002b14:	08002b3b 	.word	0x08002b3b
 8002b18:	08002b33 	.word	0x08002b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b1c:	f7ff f9dc 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002b20:	61f8      	str	r0, [r7, #28]
        break;
 8002b22:	e010      	b.n	8002b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b24:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <UART_SetConfig+0x314>)
 8002b26:	61fb      	str	r3, [r7, #28]
        break;
 8002b28:	e00d      	b.n	8002b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2a:	f7ff f93d 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002b2e:	61f8      	str	r0, [r7, #28]
        break;
 8002b30:	e009      	b.n	8002b46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b36:	61fb      	str	r3, [r7, #28]
        break;
 8002b38:	e005      	b.n	8002b46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8107 	beq.w	8002d5c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d305      	bcc.n	8002b6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d903      	bls.n	8002b72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b70:	e0f4      	b.n	8002d5c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2200      	movs	r2, #0
 8002b76:	461c      	mov	r4, r3
 8002b78:	4615      	mov	r5, r2
 8002b7a:	f04f 0200 	mov.w	r2, #0
 8002b7e:	f04f 0300 	mov.w	r3, #0
 8002b82:	022b      	lsls	r3, r5, #8
 8002b84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002b88:	0222      	lsls	r2, r4, #8
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	6849      	ldr	r1, [r1, #4]
 8002b8e:	0849      	lsrs	r1, r1, #1
 8002b90:	2000      	movs	r0, #0
 8002b92:	4688      	mov	r8, r1
 8002b94:	4681      	mov	r9, r0
 8002b96:	eb12 0a08 	adds.w	sl, r2, r8
 8002b9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bac:	4650      	mov	r0, sl
 8002bae:	4659      	mov	r1, fp
 8002bb0:	f7fd fb66 	bl	8000280 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc2:	d308      	bcc.n	8002bd6 <UART_SetConfig+0x2b2>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bca:	d204      	bcs.n	8002bd6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	60da      	str	r2, [r3, #12]
 8002bd4:	e0c2      	b.n	8002d5c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002bdc:	e0be      	b.n	8002d5c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be6:	d16a      	bne.n	8002cbe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d834      	bhi.n	8002c5a <UART_SetConfig+0x336>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <UART_SetConfig+0x2d4>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002c3d 	.word	0x08002c3d
 8002c00:	08002c45 	.word	0x08002c45
 8002c04:	08002c5b 	.word	0x08002c5b
 8002c08:	08002c4b 	.word	0x08002c4b
 8002c0c:	08002c5b 	.word	0x08002c5b
 8002c10:	08002c5b 	.word	0x08002c5b
 8002c14:	08002c5b 	.word	0x08002c5b
 8002c18:	08002c53 	.word	0x08002c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f7ff f95c 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002c20:	61f8      	str	r0, [r7, #28]
        break;
 8002c22:	e020      	b.n	8002c66 <UART_SetConfig+0x342>
 8002c24:	efff69f3 	.word	0xefff69f3
 8002c28:	40008000 	.word	0x40008000
 8002c2c:	40013800 	.word	0x40013800
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40004400 	.word	0x40004400
 8002c38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c3c:	f7ff f962 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8002c40:	61f8      	str	r0, [r7, #28]
        break;
 8002c42:	e010      	b.n	8002c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <UART_SetConfig+0x454>)
 8002c46:	61fb      	str	r3, [r7, #28]
        break;
 8002c48:	e00d      	b.n	8002c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c4a:	f7ff f8ad 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002c4e:	61f8      	str	r0, [r7, #28]
        break;
 8002c50:	e009      	b.n	8002c66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c56:	61fb      	str	r3, [r7, #28]
        break;
 8002c58:	e005      	b.n	8002c66 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d077      	beq.n	8002d5c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005a      	lsls	r2, r3, #1
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	441a      	add	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	d916      	bls.n	8002cb6 <UART_SetConfig+0x392>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8e:	d212      	bcs.n	8002cb6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f023 030f 	bic.w	r3, r3, #15
 8002c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	8afb      	ldrh	r3, [r7, #22]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	8afa      	ldrh	r2, [r7, #22]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	e052      	b.n	8002d5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cbc:	e04e      	b.n	8002d5c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d827      	bhi.n	8002d16 <UART_SetConfig+0x3f2>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <UART_SetConfig+0x3a8>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cf1 	.word	0x08002cf1
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d01 	.word	0x08002d01
 8002cd8:	08002d17 	.word	0x08002d17
 8002cdc:	08002d07 	.word	0x08002d07
 8002ce0:	08002d17 	.word	0x08002d17
 8002ce4:	08002d17 	.word	0x08002d17
 8002ce8:	08002d17 	.word	0x08002d17
 8002cec:	08002d0f 	.word	0x08002d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cf0:	f7ff f8f2 	bl	8001ed8 <HAL_RCC_GetPCLK1Freq>
 8002cf4:	61f8      	str	r0, [r7, #28]
        break;
 8002cf6:	e014      	b.n	8002d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7ff f904 	bl	8001f04 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	61f8      	str	r0, [r7, #28]
        break;
 8002cfe:	e010      	b.n	8002d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <UART_SetConfig+0x454>)
 8002d02:	61fb      	str	r3, [r7, #28]
        break;
 8002d04:	e00d      	b.n	8002d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d06:	f7ff f84f 	bl	8001da8 <HAL_RCC_GetSysClockFreq>
 8002d0a:	61f8      	str	r0, [r7, #28]
        break;
 8002d0c:	e009      	b.n	8002d22 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d12:	61fb      	str	r3, [r7, #28]
        break;
 8002d14:	e005      	b.n	8002d22 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d20:	bf00      	nop
    }

    if (pclk != 0U)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d019      	beq.n	8002d5c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	085a      	lsrs	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	441a      	add	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d909      	bls.n	8002d56 <UART_SetConfig+0x432>
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d48:	d205      	bcs.n	8002d56 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	e002      	b.n	8002d5c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d76:	bf00      	nop
 8002d78:	00f42400 	.word	0x00f42400

08002d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01a      	beq.n	8002e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7a:	d10a      	bne.n	8002e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b098      	sub	sp, #96	; 0x60
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ed0:	f7fd ff4a 	bl	8000d68 <HAL_GetTick>
 8002ed4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d12e      	bne.n	8002f42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	2200      	movs	r2, #0
 8002eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f88c 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	653b      	str	r3, [r7, #80]	; 0x50
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e6      	bne.n	8002efe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e062      	b.n	8003008 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d149      	bne.n	8002fe4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f856 	bl	8003010 <UART_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d03c      	beq.n	8002fe4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	e853 3f00 	ldrex	r3, [r3]
 8002f76:	623b      	str	r3, [r7, #32]
   return(result);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f90:	e841 2300 	strex	r3, r2, [r1]
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e6      	bne.n	8002f6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fbc:	61fa      	str	r2, [r7, #28]
 8002fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	69b9      	ldr	r1, [r7, #24]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e5      	bne.n	8002f9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e011      	b.n	8003008 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3758      	adds	r7, #88	; 0x58
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003020:	e049      	b.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d045      	beq.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7fd fe9d 	bl	8000d68 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <UART_WaitOnFlagUntilTimeout+0x30>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e048      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d031      	beq.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d110      	bne.n	8003082 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2208      	movs	r2, #8
 8003066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f838 	bl	80030de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2208      	movs	r2, #8
 8003072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e029      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003090:	d111      	bne.n	80030b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f81e 	bl	80030de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d0a6      	beq.n	8003022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030de:	b480      	push	{r7}
 80030e0:	b095      	sub	sp, #84	; 0x54
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	643b      	str	r3, [r7, #64]	; 0x40
 8003106:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800310a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e6      	bne.n	80030e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3308      	adds	r3, #8
 800311e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	61fb      	str	r3, [r7, #28]
   return(result);
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3308      	adds	r3, #8
 8003136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800313e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003150:	2b01      	cmp	r3, #1
 8003152:	d118      	bne.n	8003186 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	60bb      	str	r3, [r7, #8]
   return(result);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	647b      	str	r3, [r7, #68]	; 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	613b      	str	r3, [r7, #16]
   return(result);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e6      	bne.n	8003154 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	669a      	str	r2, [r3, #104]	; 0x68
}
 800319a:	bf00      	nop
 800319c:	3754      	adds	r7, #84	; 0x54
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <std>:
 80031a8:	2300      	movs	r3, #0
 80031aa:	b510      	push	{r4, lr}
 80031ac:	4604      	mov	r4, r0
 80031ae:	e9c0 3300 	strd	r3, r3, [r0]
 80031b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031b6:	6083      	str	r3, [r0, #8]
 80031b8:	8181      	strh	r1, [r0, #12]
 80031ba:	6643      	str	r3, [r0, #100]	; 0x64
 80031bc:	81c2      	strh	r2, [r0, #14]
 80031be:	6183      	str	r3, [r0, #24]
 80031c0:	4619      	mov	r1, r3
 80031c2:	2208      	movs	r2, #8
 80031c4:	305c      	adds	r0, #92	; 0x5c
 80031c6:	f000 fa09 	bl	80035dc <memset>
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <std+0x58>)
 80031cc:	6263      	str	r3, [r4, #36]	; 0x24
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <std+0x5c>)
 80031d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <std+0x60>)
 80031d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <std+0x64>)
 80031d8:	6323      	str	r3, [r4, #48]	; 0x30
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <std+0x68>)
 80031dc:	6224      	str	r4, [r4, #32]
 80031de:	429c      	cmp	r4, r3
 80031e0:	d006      	beq.n	80031f0 <std+0x48>
 80031e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80031e6:	4294      	cmp	r4, r2
 80031e8:	d002      	beq.n	80031f0 <std+0x48>
 80031ea:	33d0      	adds	r3, #208	; 0xd0
 80031ec:	429c      	cmp	r4, r3
 80031ee:	d105      	bne.n	80031fc <std+0x54>
 80031f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f000 ba68 	b.w	80036cc <__retarget_lock_init_recursive>
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	bf00      	nop
 8003200:	0800342d 	.word	0x0800342d
 8003204:	0800344f 	.word	0x0800344f
 8003208:	08003487 	.word	0x08003487
 800320c:	080034ab 	.word	0x080034ab
 8003210:	20000150 	.word	0x20000150

08003214 <stdio_exit_handler>:
 8003214:	4a02      	ldr	r2, [pc, #8]	; (8003220 <stdio_exit_handler+0xc>)
 8003216:	4903      	ldr	r1, [pc, #12]	; (8003224 <stdio_exit_handler+0x10>)
 8003218:	4803      	ldr	r0, [pc, #12]	; (8003228 <stdio_exit_handler+0x14>)
 800321a:	f000 b869 	b.w	80032f0 <_fwalk_sglue>
 800321e:	bf00      	nop
 8003220:	20000010 	.word	0x20000010
 8003224:	0800459d 	.word	0x0800459d
 8003228:	2000001c 	.word	0x2000001c

0800322c <cleanup_stdio>:
 800322c:	6841      	ldr	r1, [r0, #4]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <cleanup_stdio+0x34>)
 8003230:	4299      	cmp	r1, r3
 8003232:	b510      	push	{r4, lr}
 8003234:	4604      	mov	r4, r0
 8003236:	d001      	beq.n	800323c <cleanup_stdio+0x10>
 8003238:	f001 f9b0 	bl	800459c <_fflush_r>
 800323c:	68a1      	ldr	r1, [r4, #8]
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <cleanup_stdio+0x38>)
 8003240:	4299      	cmp	r1, r3
 8003242:	d002      	beq.n	800324a <cleanup_stdio+0x1e>
 8003244:	4620      	mov	r0, r4
 8003246:	f001 f9a9 	bl	800459c <_fflush_r>
 800324a:	68e1      	ldr	r1, [r4, #12]
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <cleanup_stdio+0x3c>)
 800324e:	4299      	cmp	r1, r3
 8003250:	d004      	beq.n	800325c <cleanup_stdio+0x30>
 8003252:	4620      	mov	r0, r4
 8003254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003258:	f001 b9a0 	b.w	800459c <_fflush_r>
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	20000150 	.word	0x20000150
 8003264:	200001b8 	.word	0x200001b8
 8003268:	20000220 	.word	0x20000220

0800326c <global_stdio_init.part.0>:
 800326c:	b510      	push	{r4, lr}
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <global_stdio_init.part.0+0x30>)
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <global_stdio_init.part.0+0x34>)
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <global_stdio_init.part.0+0x38>)
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	4620      	mov	r0, r4
 8003278:	2200      	movs	r2, #0
 800327a:	2104      	movs	r1, #4
 800327c:	f7ff ff94 	bl	80031a8 <std>
 8003280:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003284:	2201      	movs	r2, #1
 8003286:	2109      	movs	r1, #9
 8003288:	f7ff ff8e 	bl	80031a8 <std>
 800328c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003290:	2202      	movs	r2, #2
 8003292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003296:	2112      	movs	r1, #18
 8003298:	f7ff bf86 	b.w	80031a8 <std>
 800329c:	20000288 	.word	0x20000288
 80032a0:	20000150 	.word	0x20000150
 80032a4:	08003215 	.word	0x08003215

080032a8 <__sfp_lock_acquire>:
 80032a8:	4801      	ldr	r0, [pc, #4]	; (80032b0 <__sfp_lock_acquire+0x8>)
 80032aa:	f000 ba10 	b.w	80036ce <__retarget_lock_acquire_recursive>
 80032ae:	bf00      	nop
 80032b0:	20000291 	.word	0x20000291

080032b4 <__sfp_lock_release>:
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <__sfp_lock_release+0x8>)
 80032b6:	f000 ba0b 	b.w	80036d0 <__retarget_lock_release_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000291 	.word	0x20000291

080032c0 <__sinit>:
 80032c0:	b510      	push	{r4, lr}
 80032c2:	4604      	mov	r4, r0
 80032c4:	f7ff fff0 	bl	80032a8 <__sfp_lock_acquire>
 80032c8:	6a23      	ldr	r3, [r4, #32]
 80032ca:	b11b      	cbz	r3, 80032d4 <__sinit+0x14>
 80032cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d0:	f7ff bff0 	b.w	80032b4 <__sfp_lock_release>
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__sinit+0x28>)
 80032d6:	6223      	str	r3, [r4, #32]
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <__sinit+0x2c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f5      	bne.n	80032cc <__sinit+0xc>
 80032e0:	f7ff ffc4 	bl	800326c <global_stdio_init.part.0>
 80032e4:	e7f2      	b.n	80032cc <__sinit+0xc>
 80032e6:	bf00      	nop
 80032e8:	0800322d 	.word	0x0800322d
 80032ec:	20000288 	.word	0x20000288

080032f0 <_fwalk_sglue>:
 80032f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032f4:	4607      	mov	r7, r0
 80032f6:	4688      	mov	r8, r1
 80032f8:	4614      	mov	r4, r2
 80032fa:	2600      	movs	r6, #0
 80032fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003300:	f1b9 0901 	subs.w	r9, r9, #1
 8003304:	d505      	bpl.n	8003312 <_fwalk_sglue+0x22>
 8003306:	6824      	ldr	r4, [r4, #0]
 8003308:	2c00      	cmp	r4, #0
 800330a:	d1f7      	bne.n	80032fc <_fwalk_sglue+0xc>
 800330c:	4630      	mov	r0, r6
 800330e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003312:	89ab      	ldrh	r3, [r5, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d907      	bls.n	8003328 <_fwalk_sglue+0x38>
 8003318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800331c:	3301      	adds	r3, #1
 800331e:	d003      	beq.n	8003328 <_fwalk_sglue+0x38>
 8003320:	4629      	mov	r1, r5
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	4306      	orrs	r6, r0
 8003328:	3568      	adds	r5, #104	; 0x68
 800332a:	e7e9      	b.n	8003300 <_fwalk_sglue+0x10>

0800332c <iprintf>:
 800332c:	b40f      	push	{r0, r1, r2, r3}
 800332e:	b507      	push	{r0, r1, r2, lr}
 8003330:	4906      	ldr	r1, [pc, #24]	; (800334c <iprintf+0x20>)
 8003332:	ab04      	add	r3, sp, #16
 8003334:	6808      	ldr	r0, [r1, #0]
 8003336:	f853 2b04 	ldr.w	r2, [r3], #4
 800333a:	6881      	ldr	r1, [r0, #8]
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	f000 faf9 	bl	8003934 <_vfiprintf_r>
 8003342:	b003      	add	sp, #12
 8003344:	f85d eb04 	ldr.w	lr, [sp], #4
 8003348:	b004      	add	sp, #16
 800334a:	4770      	bx	lr
 800334c:	20000068 	.word	0x20000068

08003350 <_puts_r>:
 8003350:	6a03      	ldr	r3, [r0, #32]
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	6884      	ldr	r4, [r0, #8]
 8003356:	4605      	mov	r5, r0
 8003358:	460e      	mov	r6, r1
 800335a:	b90b      	cbnz	r3, 8003360 <_puts_r+0x10>
 800335c:	f7ff ffb0 	bl	80032c0 <__sinit>
 8003360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003362:	07db      	lsls	r3, r3, #31
 8003364:	d405      	bmi.n	8003372 <_puts_r+0x22>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	0598      	lsls	r0, r3, #22
 800336a:	d402      	bmi.n	8003372 <_puts_r+0x22>
 800336c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800336e:	f000 f9ae 	bl	80036ce <__retarget_lock_acquire_recursive>
 8003372:	89a3      	ldrh	r3, [r4, #12]
 8003374:	0719      	lsls	r1, r3, #28
 8003376:	d513      	bpl.n	80033a0 <_puts_r+0x50>
 8003378:	6923      	ldr	r3, [r4, #16]
 800337a:	b18b      	cbz	r3, 80033a0 <_puts_r+0x50>
 800337c:	3e01      	subs	r6, #1
 800337e:	68a3      	ldr	r3, [r4, #8]
 8003380:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003384:	3b01      	subs	r3, #1
 8003386:	60a3      	str	r3, [r4, #8]
 8003388:	b9e9      	cbnz	r1, 80033c6 <_puts_r+0x76>
 800338a:	2b00      	cmp	r3, #0
 800338c:	da2e      	bge.n	80033ec <_puts_r+0x9c>
 800338e:	4622      	mov	r2, r4
 8003390:	210a      	movs	r1, #10
 8003392:	4628      	mov	r0, r5
 8003394:	f000 f88d 	bl	80034b2 <__swbuf_r>
 8003398:	3001      	adds	r0, #1
 800339a:	d007      	beq.n	80033ac <_puts_r+0x5c>
 800339c:	250a      	movs	r5, #10
 800339e:	e007      	b.n	80033b0 <_puts_r+0x60>
 80033a0:	4621      	mov	r1, r4
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 f8c2 	bl	800352c <__swsetup_r>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0e7      	beq.n	800337c <_puts_r+0x2c>
 80033ac:	f04f 35ff 	mov.w	r5, #4294967295
 80033b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033b2:	07da      	lsls	r2, r3, #31
 80033b4:	d405      	bmi.n	80033c2 <_puts_r+0x72>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	059b      	lsls	r3, r3, #22
 80033ba:	d402      	bmi.n	80033c2 <_puts_r+0x72>
 80033bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033be:	f000 f987 	bl	80036d0 <__retarget_lock_release_recursive>
 80033c2:	4628      	mov	r0, r5
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da04      	bge.n	80033d4 <_puts_r+0x84>
 80033ca:	69a2      	ldr	r2, [r4, #24]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dc06      	bgt.n	80033de <_puts_r+0x8e>
 80033d0:	290a      	cmp	r1, #10
 80033d2:	d004      	beq.n	80033de <_puts_r+0x8e>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	7019      	strb	r1, [r3, #0]
 80033dc:	e7cf      	b.n	800337e <_puts_r+0x2e>
 80033de:	4622      	mov	r2, r4
 80033e0:	4628      	mov	r0, r5
 80033e2:	f000 f866 	bl	80034b2 <__swbuf_r>
 80033e6:	3001      	adds	r0, #1
 80033e8:	d1c9      	bne.n	800337e <_puts_r+0x2e>
 80033ea:	e7df      	b.n	80033ac <_puts_r+0x5c>
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	250a      	movs	r5, #10
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	6022      	str	r2, [r4, #0]
 80033f4:	701d      	strb	r5, [r3, #0]
 80033f6:	e7db      	b.n	80033b0 <_puts_r+0x60>

080033f8 <puts>:
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <puts+0xc>)
 80033fa:	4601      	mov	r1, r0
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	f7ff bfa7 	b.w	8003350 <_puts_r>
 8003402:	bf00      	nop
 8003404:	20000068 	.word	0x20000068

08003408 <iscanf>:
 8003408:	b40f      	push	{r0, r1, r2, r3}
 800340a:	b507      	push	{r0, r1, r2, lr}
 800340c:	4906      	ldr	r1, [pc, #24]	; (8003428 <iscanf+0x20>)
 800340e:	ab04      	add	r3, sp, #16
 8003410:	6808      	ldr	r0, [r1, #0]
 8003412:	f853 2b04 	ldr.w	r2, [r3], #4
 8003416:	6841      	ldr	r1, [r0, #4]
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	f000 fed7 	bl	80041cc <_vfiscanf_r>
 800341e:	b003      	add	sp, #12
 8003420:	f85d eb04 	ldr.w	lr, [sp], #4
 8003424:	b004      	add	sp, #16
 8003426:	4770      	bx	lr
 8003428:	20000068 	.word	0x20000068

0800342c <__sread>:
 800342c:	b510      	push	{r4, lr}
 800342e:	460c      	mov	r4, r1
 8003430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003434:	f000 f8fc 	bl	8003630 <_read_r>
 8003438:	2800      	cmp	r0, #0
 800343a:	bfab      	itete	ge
 800343c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800343e:	89a3      	ldrhlt	r3, [r4, #12]
 8003440:	181b      	addge	r3, r3, r0
 8003442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003446:	bfac      	ite	ge
 8003448:	6563      	strge	r3, [r4, #84]	; 0x54
 800344a:	81a3      	strhlt	r3, [r4, #12]
 800344c:	bd10      	pop	{r4, pc}

0800344e <__swrite>:
 800344e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003452:	461f      	mov	r7, r3
 8003454:	898b      	ldrh	r3, [r1, #12]
 8003456:	05db      	lsls	r3, r3, #23
 8003458:	4605      	mov	r5, r0
 800345a:	460c      	mov	r4, r1
 800345c:	4616      	mov	r6, r2
 800345e:	d505      	bpl.n	800346c <__swrite+0x1e>
 8003460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003464:	2302      	movs	r3, #2
 8003466:	2200      	movs	r2, #0
 8003468:	f000 f8d0 	bl	800360c <_lseek_r>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	4632      	mov	r2, r6
 800347a:	463b      	mov	r3, r7
 800347c:	4628      	mov	r0, r5
 800347e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003482:	f000 b8e7 	b.w	8003654 <_write_r>

08003486 <__sseek>:
 8003486:	b510      	push	{r4, lr}
 8003488:	460c      	mov	r4, r1
 800348a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348e:	f000 f8bd 	bl	800360c <_lseek_r>
 8003492:	1c43      	adds	r3, r0, #1
 8003494:	89a3      	ldrh	r3, [r4, #12]
 8003496:	bf15      	itete	ne
 8003498:	6560      	strne	r0, [r4, #84]	; 0x54
 800349a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800349e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034a2:	81a3      	strheq	r3, [r4, #12]
 80034a4:	bf18      	it	ne
 80034a6:	81a3      	strhne	r3, [r4, #12]
 80034a8:	bd10      	pop	{r4, pc}

080034aa <__sclose>:
 80034aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ae:	f000 b89d 	b.w	80035ec <_close_r>

080034b2 <__swbuf_r>:
 80034b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b4:	460e      	mov	r6, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	4605      	mov	r5, r0
 80034ba:	b118      	cbz	r0, 80034c4 <__swbuf_r+0x12>
 80034bc:	6a03      	ldr	r3, [r0, #32]
 80034be:	b90b      	cbnz	r3, 80034c4 <__swbuf_r+0x12>
 80034c0:	f7ff fefe 	bl	80032c0 <__sinit>
 80034c4:	69a3      	ldr	r3, [r4, #24]
 80034c6:	60a3      	str	r3, [r4, #8]
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	071a      	lsls	r2, r3, #28
 80034cc:	d525      	bpl.n	800351a <__swbuf_r+0x68>
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	b31b      	cbz	r3, 800351a <__swbuf_r+0x68>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	6922      	ldr	r2, [r4, #16]
 80034d6:	1a98      	subs	r0, r3, r2
 80034d8:	6963      	ldr	r3, [r4, #20]
 80034da:	b2f6      	uxtb	r6, r6
 80034dc:	4283      	cmp	r3, r0
 80034de:	4637      	mov	r7, r6
 80034e0:	dc04      	bgt.n	80034ec <__swbuf_r+0x3a>
 80034e2:	4621      	mov	r1, r4
 80034e4:	4628      	mov	r0, r5
 80034e6:	f001 f859 	bl	800459c <_fflush_r>
 80034ea:	b9e0      	cbnz	r0, 8003526 <__swbuf_r+0x74>
 80034ec:	68a3      	ldr	r3, [r4, #8]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	60a3      	str	r3, [r4, #8]
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	6022      	str	r2, [r4, #0]
 80034f8:	701e      	strb	r6, [r3, #0]
 80034fa:	6962      	ldr	r2, [r4, #20]
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	429a      	cmp	r2, r3
 8003500:	d004      	beq.n	800350c <__swbuf_r+0x5a>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	07db      	lsls	r3, r3, #31
 8003506:	d506      	bpl.n	8003516 <__swbuf_r+0x64>
 8003508:	2e0a      	cmp	r6, #10
 800350a:	d104      	bne.n	8003516 <__swbuf_r+0x64>
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f001 f844 	bl	800459c <_fflush_r>
 8003514:	b938      	cbnz	r0, 8003526 <__swbuf_r+0x74>
 8003516:	4638      	mov	r0, r7
 8003518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800351a:	4621      	mov	r1, r4
 800351c:	4628      	mov	r0, r5
 800351e:	f000 f805 	bl	800352c <__swsetup_r>
 8003522:	2800      	cmp	r0, #0
 8003524:	d0d5      	beq.n	80034d2 <__swbuf_r+0x20>
 8003526:	f04f 37ff 	mov.w	r7, #4294967295
 800352a:	e7f4      	b.n	8003516 <__swbuf_r+0x64>

0800352c <__swsetup_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <__swsetup_r+0xac>)
 8003530:	4605      	mov	r5, r0
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	460c      	mov	r4, r1
 8003536:	b118      	cbz	r0, 8003540 <__swsetup_r+0x14>
 8003538:	6a03      	ldr	r3, [r0, #32]
 800353a:	b90b      	cbnz	r3, 8003540 <__swsetup_r+0x14>
 800353c:	f7ff fec0 	bl	80032c0 <__sinit>
 8003540:	89a3      	ldrh	r3, [r4, #12]
 8003542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003546:	0718      	lsls	r0, r3, #28
 8003548:	d422      	bmi.n	8003590 <__swsetup_r+0x64>
 800354a:	06d9      	lsls	r1, r3, #27
 800354c:	d407      	bmi.n	800355e <__swsetup_r+0x32>
 800354e:	2309      	movs	r3, #9
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	e034      	b.n	80035c8 <__swsetup_r+0x9c>
 800355e:	0758      	lsls	r0, r3, #29
 8003560:	d512      	bpl.n	8003588 <__swsetup_r+0x5c>
 8003562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003564:	b141      	cbz	r1, 8003578 <__swsetup_r+0x4c>
 8003566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800356a:	4299      	cmp	r1, r3
 800356c:	d002      	beq.n	8003574 <__swsetup_r+0x48>
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f8be 	bl	80036f0 <_free_r>
 8003574:	2300      	movs	r3, #0
 8003576:	6363      	str	r3, [r4, #52]	; 0x34
 8003578:	89a3      	ldrh	r3, [r4, #12]
 800357a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800357e:	81a3      	strh	r3, [r4, #12]
 8003580:	2300      	movs	r3, #0
 8003582:	6063      	str	r3, [r4, #4]
 8003584:	6923      	ldr	r3, [r4, #16]
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f043 0308 	orr.w	r3, r3, #8
 800358e:	81a3      	strh	r3, [r4, #12]
 8003590:	6923      	ldr	r3, [r4, #16]
 8003592:	b94b      	cbnz	r3, 80035a8 <__swsetup_r+0x7c>
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800359a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359e:	d003      	beq.n	80035a8 <__swsetup_r+0x7c>
 80035a0:	4621      	mov	r1, r4
 80035a2:	4628      	mov	r0, r5
 80035a4:	f001 f848 	bl	8004638 <__smakebuf_r>
 80035a8:	89a0      	ldrh	r0, [r4, #12]
 80035aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035ae:	f010 0301 	ands.w	r3, r0, #1
 80035b2:	d00a      	beq.n	80035ca <__swsetup_r+0x9e>
 80035b4:	2300      	movs	r3, #0
 80035b6:	60a3      	str	r3, [r4, #8]
 80035b8:	6963      	ldr	r3, [r4, #20]
 80035ba:	425b      	negs	r3, r3
 80035bc:	61a3      	str	r3, [r4, #24]
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	b943      	cbnz	r3, 80035d4 <__swsetup_r+0xa8>
 80035c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035c6:	d1c4      	bne.n	8003552 <__swsetup_r+0x26>
 80035c8:	bd38      	pop	{r3, r4, r5, pc}
 80035ca:	0781      	lsls	r1, r0, #30
 80035cc:	bf58      	it	pl
 80035ce:	6963      	ldrpl	r3, [r4, #20]
 80035d0:	60a3      	str	r3, [r4, #8]
 80035d2:	e7f4      	b.n	80035be <__swsetup_r+0x92>
 80035d4:	2000      	movs	r0, #0
 80035d6:	e7f7      	b.n	80035c8 <__swsetup_r+0x9c>
 80035d8:	20000068 	.word	0x20000068

080035dc <memset>:
 80035dc:	4402      	add	r2, r0
 80035de:	4603      	mov	r3, r0
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d100      	bne.n	80035e6 <memset+0xa>
 80035e4:	4770      	bx	lr
 80035e6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ea:	e7f9      	b.n	80035e0 <memset+0x4>

080035ec <_close_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	4d06      	ldr	r5, [pc, #24]	; (8003608 <_close_r+0x1c>)
 80035f0:	2300      	movs	r3, #0
 80035f2:	4604      	mov	r4, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	602b      	str	r3, [r5, #0]
 80035f8:	f7fd fa80 	bl	8000afc <_close>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d102      	bne.n	8003606 <_close_r+0x1a>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	b103      	cbz	r3, 8003606 <_close_r+0x1a>
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	2000028c 	.word	0x2000028c

0800360c <_lseek_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4d07      	ldr	r5, [pc, #28]	; (800362c <_lseek_r+0x20>)
 8003610:	4604      	mov	r4, r0
 8003612:	4608      	mov	r0, r1
 8003614:	4611      	mov	r1, r2
 8003616:	2200      	movs	r2, #0
 8003618:	602a      	str	r2, [r5, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f7fd faa2 	bl	8000b64 <_lseek>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d102      	bne.n	800362a <_lseek_r+0x1e>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b103      	cbz	r3, 800362a <_lseek_r+0x1e>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	2000028c 	.word	0x2000028c

08003630 <_read_r>:
 8003630:	b538      	push	{r3, r4, r5, lr}
 8003632:	4d07      	ldr	r5, [pc, #28]	; (8003650 <_read_r+0x20>)
 8003634:	4604      	mov	r4, r0
 8003636:	4608      	mov	r0, r1
 8003638:	4611      	mov	r1, r2
 800363a:	2200      	movs	r2, #0
 800363c:	602a      	str	r2, [r5, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	f7fd faa4 	bl	8000b8c <_read>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_read_r+0x1e>
 8003648:	682b      	ldr	r3, [r5, #0]
 800364a:	b103      	cbz	r3, 800364e <_read_r+0x1e>
 800364c:	6023      	str	r3, [r4, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	2000028c 	.word	0x2000028c

08003654 <_write_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	4d07      	ldr	r5, [pc, #28]	; (8003674 <_write_r+0x20>)
 8003658:	4604      	mov	r4, r0
 800365a:	4608      	mov	r0, r1
 800365c:	4611      	mov	r1, r2
 800365e:	2200      	movs	r2, #0
 8003660:	602a      	str	r2, [r5, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	f7fd fa28 	bl	8000ab8 <_write>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_write_r+0x1e>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_write_r+0x1e>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	2000028c 	.word	0x2000028c

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000068 	.word	0x20000068

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	4d0d      	ldr	r5, [pc, #52]	; (80036bc <__libc_init_array+0x38>)
 8003688:	4c0d      	ldr	r4, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	2600      	movs	r6, #0
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	4d0b      	ldr	r5, [pc, #44]	; (80036c4 <__libc_init_array+0x40>)
 8003696:	4c0c      	ldr	r4, [pc, #48]	; (80036c8 <__libc_init_array+0x44>)
 8003698:	f001 faea 	bl	8004c70 <_init>
 800369c:	1b64      	subs	r4, r4, r5
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	2600      	movs	r6, #0
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	08005024 	.word	0x08005024
 80036c0:	08005024 	.word	0x08005024
 80036c4:	08005024 	.word	0x08005024
 80036c8:	08005028 	.word	0x08005028

080036cc <__retarget_lock_init_recursive>:
 80036cc:	4770      	bx	lr

080036ce <__retarget_lock_acquire_recursive>:
 80036ce:	4770      	bx	lr

080036d0 <__retarget_lock_release_recursive>:
 80036d0:	4770      	bx	lr

080036d2 <memcpy>:
 80036d2:	440a      	add	r2, r1
 80036d4:	4291      	cmp	r1, r2
 80036d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80036da:	d100      	bne.n	80036de <memcpy+0xc>
 80036dc:	4770      	bx	lr
 80036de:	b510      	push	{r4, lr}
 80036e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036e8:	4291      	cmp	r1, r2
 80036ea:	d1f9      	bne.n	80036e0 <memcpy+0xe>
 80036ec:	bd10      	pop	{r4, pc}
	...

080036f0 <_free_r>:
 80036f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036f2:	2900      	cmp	r1, #0
 80036f4:	d044      	beq.n	8003780 <_free_r+0x90>
 80036f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036fa:	9001      	str	r0, [sp, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f1a1 0404 	sub.w	r4, r1, #4
 8003702:	bfb8      	it	lt
 8003704:	18e4      	addlt	r4, r4, r3
 8003706:	f000 f8df 	bl	80038c8 <__malloc_lock>
 800370a:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <_free_r+0x94>)
 800370c:	9801      	ldr	r0, [sp, #4]
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	b933      	cbnz	r3, 8003720 <_free_r+0x30>
 8003712:	6063      	str	r3, [r4, #4]
 8003714:	6014      	str	r4, [r2, #0]
 8003716:	b003      	add	sp, #12
 8003718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800371c:	f000 b8da 	b.w	80038d4 <__malloc_unlock>
 8003720:	42a3      	cmp	r3, r4
 8003722:	d908      	bls.n	8003736 <_free_r+0x46>
 8003724:	6825      	ldr	r5, [r4, #0]
 8003726:	1961      	adds	r1, r4, r5
 8003728:	428b      	cmp	r3, r1
 800372a:	bf01      	itttt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	1949      	addeq	r1, r1, r5
 8003732:	6021      	streq	r1, [r4, #0]
 8003734:	e7ed      	b.n	8003712 <_free_r+0x22>
 8003736:	461a      	mov	r2, r3
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	b10b      	cbz	r3, 8003740 <_free_r+0x50>
 800373c:	42a3      	cmp	r3, r4
 800373e:	d9fa      	bls.n	8003736 <_free_r+0x46>
 8003740:	6811      	ldr	r1, [r2, #0]
 8003742:	1855      	adds	r5, r2, r1
 8003744:	42a5      	cmp	r5, r4
 8003746:	d10b      	bne.n	8003760 <_free_r+0x70>
 8003748:	6824      	ldr	r4, [r4, #0]
 800374a:	4421      	add	r1, r4
 800374c:	1854      	adds	r4, r2, r1
 800374e:	42a3      	cmp	r3, r4
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	d1e0      	bne.n	8003716 <_free_r+0x26>
 8003754:	681c      	ldr	r4, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	6053      	str	r3, [r2, #4]
 800375a:	440c      	add	r4, r1
 800375c:	6014      	str	r4, [r2, #0]
 800375e:	e7da      	b.n	8003716 <_free_r+0x26>
 8003760:	d902      	bls.n	8003768 <_free_r+0x78>
 8003762:	230c      	movs	r3, #12
 8003764:	6003      	str	r3, [r0, #0]
 8003766:	e7d6      	b.n	8003716 <_free_r+0x26>
 8003768:	6825      	ldr	r5, [r4, #0]
 800376a:	1961      	adds	r1, r4, r5
 800376c:	428b      	cmp	r3, r1
 800376e:	bf04      	itt	eq
 8003770:	6819      	ldreq	r1, [r3, #0]
 8003772:	685b      	ldreq	r3, [r3, #4]
 8003774:	6063      	str	r3, [r4, #4]
 8003776:	bf04      	itt	eq
 8003778:	1949      	addeq	r1, r1, r5
 800377a:	6021      	streq	r1, [r4, #0]
 800377c:	6054      	str	r4, [r2, #4]
 800377e:	e7ca      	b.n	8003716 <_free_r+0x26>
 8003780:	b003      	add	sp, #12
 8003782:	bd30      	pop	{r4, r5, pc}
 8003784:	20000294 	.word	0x20000294

08003788 <sbrk_aligned>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4e0e      	ldr	r6, [pc, #56]	; (80037c4 <sbrk_aligned+0x3c>)
 800378c:	460c      	mov	r4, r1
 800378e:	6831      	ldr	r1, [r6, #0]
 8003790:	4605      	mov	r5, r0
 8003792:	b911      	cbnz	r1, 800379a <sbrk_aligned+0x12>
 8003794:	f001 f92c 	bl	80049f0 <_sbrk_r>
 8003798:	6030      	str	r0, [r6, #0]
 800379a:	4621      	mov	r1, r4
 800379c:	4628      	mov	r0, r5
 800379e:	f001 f927 	bl	80049f0 <_sbrk_r>
 80037a2:	1c43      	adds	r3, r0, #1
 80037a4:	d00a      	beq.n	80037bc <sbrk_aligned+0x34>
 80037a6:	1cc4      	adds	r4, r0, #3
 80037a8:	f024 0403 	bic.w	r4, r4, #3
 80037ac:	42a0      	cmp	r0, r4
 80037ae:	d007      	beq.n	80037c0 <sbrk_aligned+0x38>
 80037b0:	1a21      	subs	r1, r4, r0
 80037b2:	4628      	mov	r0, r5
 80037b4:	f001 f91c 	bl	80049f0 <_sbrk_r>
 80037b8:	3001      	adds	r0, #1
 80037ba:	d101      	bne.n	80037c0 <sbrk_aligned+0x38>
 80037bc:	f04f 34ff 	mov.w	r4, #4294967295
 80037c0:	4620      	mov	r0, r4
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	20000298 	.word	0x20000298

080037c8 <_malloc_r>:
 80037c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037cc:	1ccd      	adds	r5, r1, #3
 80037ce:	f025 0503 	bic.w	r5, r5, #3
 80037d2:	3508      	adds	r5, #8
 80037d4:	2d0c      	cmp	r5, #12
 80037d6:	bf38      	it	cc
 80037d8:	250c      	movcc	r5, #12
 80037da:	2d00      	cmp	r5, #0
 80037dc:	4607      	mov	r7, r0
 80037de:	db01      	blt.n	80037e4 <_malloc_r+0x1c>
 80037e0:	42a9      	cmp	r1, r5
 80037e2:	d905      	bls.n	80037f0 <_malloc_r+0x28>
 80037e4:	230c      	movs	r3, #12
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	2600      	movs	r6, #0
 80037ea:	4630      	mov	r0, r6
 80037ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038c4 <_malloc_r+0xfc>
 80037f4:	f000 f868 	bl	80038c8 <__malloc_lock>
 80037f8:	f8d8 3000 	ldr.w	r3, [r8]
 80037fc:	461c      	mov	r4, r3
 80037fe:	bb5c      	cbnz	r4, 8003858 <_malloc_r+0x90>
 8003800:	4629      	mov	r1, r5
 8003802:	4638      	mov	r0, r7
 8003804:	f7ff ffc0 	bl	8003788 <sbrk_aligned>
 8003808:	1c43      	adds	r3, r0, #1
 800380a:	4604      	mov	r4, r0
 800380c:	d155      	bne.n	80038ba <_malloc_r+0xf2>
 800380e:	f8d8 4000 	ldr.w	r4, [r8]
 8003812:	4626      	mov	r6, r4
 8003814:	2e00      	cmp	r6, #0
 8003816:	d145      	bne.n	80038a4 <_malloc_r+0xdc>
 8003818:	2c00      	cmp	r4, #0
 800381a:	d048      	beq.n	80038ae <_malloc_r+0xe6>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	4631      	mov	r1, r6
 8003820:	4638      	mov	r0, r7
 8003822:	eb04 0903 	add.w	r9, r4, r3
 8003826:	f001 f8e3 	bl	80049f0 <_sbrk_r>
 800382a:	4581      	cmp	r9, r0
 800382c:	d13f      	bne.n	80038ae <_malloc_r+0xe6>
 800382e:	6821      	ldr	r1, [r4, #0]
 8003830:	1a6d      	subs	r5, r5, r1
 8003832:	4629      	mov	r1, r5
 8003834:	4638      	mov	r0, r7
 8003836:	f7ff ffa7 	bl	8003788 <sbrk_aligned>
 800383a:	3001      	adds	r0, #1
 800383c:	d037      	beq.n	80038ae <_malloc_r+0xe6>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	442b      	add	r3, r5
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	f8d8 3000 	ldr.w	r3, [r8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d038      	beq.n	80038be <_malloc_r+0xf6>
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	42a2      	cmp	r2, r4
 8003850:	d12b      	bne.n	80038aa <_malloc_r+0xe2>
 8003852:	2200      	movs	r2, #0
 8003854:	605a      	str	r2, [r3, #4]
 8003856:	e00f      	b.n	8003878 <_malloc_r+0xb0>
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	1b52      	subs	r2, r2, r5
 800385c:	d41f      	bmi.n	800389e <_malloc_r+0xd6>
 800385e:	2a0b      	cmp	r2, #11
 8003860:	d917      	bls.n	8003892 <_malloc_r+0xca>
 8003862:	1961      	adds	r1, r4, r5
 8003864:	42a3      	cmp	r3, r4
 8003866:	6025      	str	r5, [r4, #0]
 8003868:	bf18      	it	ne
 800386a:	6059      	strne	r1, [r3, #4]
 800386c:	6863      	ldr	r3, [r4, #4]
 800386e:	bf08      	it	eq
 8003870:	f8c8 1000 	streq.w	r1, [r8]
 8003874:	5162      	str	r2, [r4, r5]
 8003876:	604b      	str	r3, [r1, #4]
 8003878:	4638      	mov	r0, r7
 800387a:	f104 060b 	add.w	r6, r4, #11
 800387e:	f000 f829 	bl	80038d4 <__malloc_unlock>
 8003882:	f026 0607 	bic.w	r6, r6, #7
 8003886:	1d23      	adds	r3, r4, #4
 8003888:	1af2      	subs	r2, r6, r3
 800388a:	d0ae      	beq.n	80037ea <_malloc_r+0x22>
 800388c:	1b9b      	subs	r3, r3, r6
 800388e:	50a3      	str	r3, [r4, r2]
 8003890:	e7ab      	b.n	80037ea <_malloc_r+0x22>
 8003892:	42a3      	cmp	r3, r4
 8003894:	6862      	ldr	r2, [r4, #4]
 8003896:	d1dd      	bne.n	8003854 <_malloc_r+0x8c>
 8003898:	f8c8 2000 	str.w	r2, [r8]
 800389c:	e7ec      	b.n	8003878 <_malloc_r+0xb0>
 800389e:	4623      	mov	r3, r4
 80038a0:	6864      	ldr	r4, [r4, #4]
 80038a2:	e7ac      	b.n	80037fe <_malloc_r+0x36>
 80038a4:	4634      	mov	r4, r6
 80038a6:	6876      	ldr	r6, [r6, #4]
 80038a8:	e7b4      	b.n	8003814 <_malloc_r+0x4c>
 80038aa:	4613      	mov	r3, r2
 80038ac:	e7cc      	b.n	8003848 <_malloc_r+0x80>
 80038ae:	230c      	movs	r3, #12
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4638      	mov	r0, r7
 80038b4:	f000 f80e 	bl	80038d4 <__malloc_unlock>
 80038b8:	e797      	b.n	80037ea <_malloc_r+0x22>
 80038ba:	6025      	str	r5, [r4, #0]
 80038bc:	e7dc      	b.n	8003878 <_malloc_r+0xb0>
 80038be:	605b      	str	r3, [r3, #4]
 80038c0:	deff      	udf	#255	; 0xff
 80038c2:	bf00      	nop
 80038c4:	20000294 	.word	0x20000294

080038c8 <__malloc_lock>:
 80038c8:	4801      	ldr	r0, [pc, #4]	; (80038d0 <__malloc_lock+0x8>)
 80038ca:	f7ff bf00 	b.w	80036ce <__retarget_lock_acquire_recursive>
 80038ce:	bf00      	nop
 80038d0:	20000290 	.word	0x20000290

080038d4 <__malloc_unlock>:
 80038d4:	4801      	ldr	r0, [pc, #4]	; (80038dc <__malloc_unlock+0x8>)
 80038d6:	f7ff befb 	b.w	80036d0 <__retarget_lock_release_recursive>
 80038da:	bf00      	nop
 80038dc:	20000290 	.word	0x20000290

080038e0 <__sfputc_r>:
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	b410      	push	{r4}
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	da08      	bge.n	80038fe <__sfputc_r+0x1e>
 80038ec:	6994      	ldr	r4, [r2, #24]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	db01      	blt.n	80038f6 <__sfputc_r+0x16>
 80038f2:	290a      	cmp	r1, #10
 80038f4:	d103      	bne.n	80038fe <__sfputc_r+0x1e>
 80038f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038fa:	f7ff bdda 	b.w	80034b2 <__swbuf_r>
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	1c58      	adds	r0, r3, #1
 8003902:	6010      	str	r0, [r2, #0]
 8003904:	7019      	strb	r1, [r3, #0]
 8003906:	4608      	mov	r0, r1
 8003908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800390c:	4770      	bx	lr

0800390e <__sfputs_r>:
 800390e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003910:	4606      	mov	r6, r0
 8003912:	460f      	mov	r7, r1
 8003914:	4614      	mov	r4, r2
 8003916:	18d5      	adds	r5, r2, r3
 8003918:	42ac      	cmp	r4, r5
 800391a:	d101      	bne.n	8003920 <__sfputs_r+0x12>
 800391c:	2000      	movs	r0, #0
 800391e:	e007      	b.n	8003930 <__sfputs_r+0x22>
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	463a      	mov	r2, r7
 8003926:	4630      	mov	r0, r6
 8003928:	f7ff ffda 	bl	80038e0 <__sfputc_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d1f3      	bne.n	8003918 <__sfputs_r+0xa>
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003934 <_vfiprintf_r>:
 8003934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	460d      	mov	r5, r1
 800393a:	b09d      	sub	sp, #116	; 0x74
 800393c:	4614      	mov	r4, r2
 800393e:	4698      	mov	r8, r3
 8003940:	4606      	mov	r6, r0
 8003942:	b118      	cbz	r0, 800394c <_vfiprintf_r+0x18>
 8003944:	6a03      	ldr	r3, [r0, #32]
 8003946:	b90b      	cbnz	r3, 800394c <_vfiprintf_r+0x18>
 8003948:	f7ff fcba 	bl	80032c0 <__sinit>
 800394c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800394e:	07d9      	lsls	r1, r3, #31
 8003950:	d405      	bmi.n	800395e <_vfiprintf_r+0x2a>
 8003952:	89ab      	ldrh	r3, [r5, #12]
 8003954:	059a      	lsls	r2, r3, #22
 8003956:	d402      	bmi.n	800395e <_vfiprintf_r+0x2a>
 8003958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800395a:	f7ff feb8 	bl	80036ce <__retarget_lock_acquire_recursive>
 800395e:	89ab      	ldrh	r3, [r5, #12]
 8003960:	071b      	lsls	r3, r3, #28
 8003962:	d501      	bpl.n	8003968 <_vfiprintf_r+0x34>
 8003964:	692b      	ldr	r3, [r5, #16]
 8003966:	b99b      	cbnz	r3, 8003990 <_vfiprintf_r+0x5c>
 8003968:	4629      	mov	r1, r5
 800396a:	4630      	mov	r0, r6
 800396c:	f7ff fdde 	bl	800352c <__swsetup_r>
 8003970:	b170      	cbz	r0, 8003990 <_vfiprintf_r+0x5c>
 8003972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003974:	07dc      	lsls	r4, r3, #31
 8003976:	d504      	bpl.n	8003982 <_vfiprintf_r+0x4e>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	b01d      	add	sp, #116	; 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	89ab      	ldrh	r3, [r5, #12]
 8003984:	0598      	lsls	r0, r3, #22
 8003986:	d4f7      	bmi.n	8003978 <_vfiprintf_r+0x44>
 8003988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800398a:	f7ff fea1 	bl	80036d0 <__retarget_lock_release_recursive>
 800398e:	e7f3      	b.n	8003978 <_vfiprintf_r+0x44>
 8003990:	2300      	movs	r3, #0
 8003992:	9309      	str	r3, [sp, #36]	; 0x24
 8003994:	2320      	movs	r3, #32
 8003996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800399a:	f8cd 800c 	str.w	r8, [sp, #12]
 800399e:	2330      	movs	r3, #48	; 0x30
 80039a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003b54 <_vfiprintf_r+0x220>
 80039a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039a8:	f04f 0901 	mov.w	r9, #1
 80039ac:	4623      	mov	r3, r4
 80039ae:	469a      	mov	sl, r3
 80039b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039b4:	b10a      	cbz	r2, 80039ba <_vfiprintf_r+0x86>
 80039b6:	2a25      	cmp	r2, #37	; 0x25
 80039b8:	d1f9      	bne.n	80039ae <_vfiprintf_r+0x7a>
 80039ba:	ebba 0b04 	subs.w	fp, sl, r4
 80039be:	d00b      	beq.n	80039d8 <_vfiprintf_r+0xa4>
 80039c0:	465b      	mov	r3, fp
 80039c2:	4622      	mov	r2, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	4630      	mov	r0, r6
 80039c8:	f7ff ffa1 	bl	800390e <__sfputs_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	f000 80a9 	beq.w	8003b24 <_vfiprintf_r+0x1f0>
 80039d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039d4:	445a      	add	r2, fp
 80039d6:	9209      	str	r2, [sp, #36]	; 0x24
 80039d8:	f89a 3000 	ldrb.w	r3, [sl]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a1 	beq.w	8003b24 <_vfiprintf_r+0x1f0>
 80039e2:	2300      	movs	r3, #0
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ec:	f10a 0a01 	add.w	sl, sl, #1
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	9307      	str	r3, [sp, #28]
 80039f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039f8:	931a      	str	r3, [sp, #104]	; 0x68
 80039fa:	4654      	mov	r4, sl
 80039fc:	2205      	movs	r2, #5
 80039fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a02:	4854      	ldr	r0, [pc, #336]	; (8003b54 <_vfiprintf_r+0x220>)
 8003a04:	f7fc fbec 	bl	80001e0 <memchr>
 8003a08:	9a04      	ldr	r2, [sp, #16]
 8003a0a:	b9d8      	cbnz	r0, 8003a44 <_vfiprintf_r+0x110>
 8003a0c:	06d1      	lsls	r1, r2, #27
 8003a0e:	bf44      	itt	mi
 8003a10:	2320      	movmi	r3, #32
 8003a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a16:	0713      	lsls	r3, r2, #28
 8003a18:	bf44      	itt	mi
 8003a1a:	232b      	movmi	r3, #43	; 0x2b
 8003a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a20:	f89a 3000 	ldrb.w	r3, [sl]
 8003a24:	2b2a      	cmp	r3, #42	; 0x2a
 8003a26:	d015      	beq.n	8003a54 <_vfiprintf_r+0x120>
 8003a28:	9a07      	ldr	r2, [sp, #28]
 8003a2a:	4654      	mov	r4, sl
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f04f 0c0a 	mov.w	ip, #10
 8003a32:	4621      	mov	r1, r4
 8003a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a38:	3b30      	subs	r3, #48	; 0x30
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	d94d      	bls.n	8003ada <_vfiprintf_r+0x1a6>
 8003a3e:	b1b0      	cbz	r0, 8003a6e <_vfiprintf_r+0x13a>
 8003a40:	9207      	str	r2, [sp, #28]
 8003a42:	e014      	b.n	8003a6e <_vfiprintf_r+0x13a>
 8003a44:	eba0 0308 	sub.w	r3, r0, r8
 8003a48:	fa09 f303 	lsl.w	r3, r9, r3
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	46a2      	mov	sl, r4
 8003a52:	e7d2      	b.n	80039fa <_vfiprintf_r+0xc6>
 8003a54:	9b03      	ldr	r3, [sp, #12]
 8003a56:	1d19      	adds	r1, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	9103      	str	r1, [sp, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bfbb      	ittet	lt
 8003a60:	425b      	neglt	r3, r3
 8003a62:	f042 0202 	orrlt.w	r2, r2, #2
 8003a66:	9307      	strge	r3, [sp, #28]
 8003a68:	9307      	strlt	r3, [sp, #28]
 8003a6a:	bfb8      	it	lt
 8003a6c:	9204      	strlt	r2, [sp, #16]
 8003a6e:	7823      	ldrb	r3, [r4, #0]
 8003a70:	2b2e      	cmp	r3, #46	; 0x2e
 8003a72:	d10c      	bne.n	8003a8e <_vfiprintf_r+0x15a>
 8003a74:	7863      	ldrb	r3, [r4, #1]
 8003a76:	2b2a      	cmp	r3, #42	; 0x2a
 8003a78:	d134      	bne.n	8003ae4 <_vfiprintf_r+0x1b0>
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	9203      	str	r2, [sp, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfb8      	it	lt
 8003a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a8a:	3402      	adds	r4, #2
 8003a8c:	9305      	str	r3, [sp, #20]
 8003a8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003b64 <_vfiprintf_r+0x230>
 8003a92:	7821      	ldrb	r1, [r4, #0]
 8003a94:	2203      	movs	r2, #3
 8003a96:	4650      	mov	r0, sl
 8003a98:	f7fc fba2 	bl	80001e0 <memchr>
 8003a9c:	b138      	cbz	r0, 8003aae <_vfiprintf_r+0x17a>
 8003a9e:	9b04      	ldr	r3, [sp, #16]
 8003aa0:	eba0 000a 	sub.w	r0, r0, sl
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	4082      	lsls	r2, r0
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	3401      	adds	r4, #1
 8003aac:	9304      	str	r3, [sp, #16]
 8003aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab2:	4829      	ldr	r0, [pc, #164]	; (8003b58 <_vfiprintf_r+0x224>)
 8003ab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ab8:	2206      	movs	r2, #6
 8003aba:	f7fc fb91 	bl	80001e0 <memchr>
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d03f      	beq.n	8003b42 <_vfiprintf_r+0x20e>
 8003ac2:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <_vfiprintf_r+0x228>)
 8003ac4:	bb1b      	cbnz	r3, 8003b0e <_vfiprintf_r+0x1da>
 8003ac6:	9b03      	ldr	r3, [sp, #12]
 8003ac8:	3307      	adds	r3, #7
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	3308      	adds	r3, #8
 8003ad0:	9303      	str	r3, [sp, #12]
 8003ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad4:	443b      	add	r3, r7
 8003ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad8:	e768      	b.n	80039ac <_vfiprintf_r+0x78>
 8003ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ade:	460c      	mov	r4, r1
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	e7a6      	b.n	8003a32 <_vfiprintf_r+0xfe>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	3401      	adds	r4, #1
 8003ae8:	9305      	str	r3, [sp, #20]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 0c0a 	mov.w	ip, #10
 8003af0:	4620      	mov	r0, r4
 8003af2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003af6:	3a30      	subs	r2, #48	; 0x30
 8003af8:	2a09      	cmp	r2, #9
 8003afa:	d903      	bls.n	8003b04 <_vfiprintf_r+0x1d0>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0c6      	beq.n	8003a8e <_vfiprintf_r+0x15a>
 8003b00:	9105      	str	r1, [sp, #20]
 8003b02:	e7c4      	b.n	8003a8e <_vfiprintf_r+0x15a>
 8003b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b08:	4604      	mov	r4, r0
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e7f0      	b.n	8003af0 <_vfiprintf_r+0x1bc>
 8003b0e:	ab03      	add	r3, sp, #12
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	462a      	mov	r2, r5
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <_vfiprintf_r+0x22c>)
 8003b16:	a904      	add	r1, sp, #16
 8003b18:	4630      	mov	r0, r6
 8003b1a:	f3af 8000 	nop.w
 8003b1e:	4607      	mov	r7, r0
 8003b20:	1c78      	adds	r0, r7, #1
 8003b22:	d1d6      	bne.n	8003ad2 <_vfiprintf_r+0x19e>
 8003b24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b26:	07d9      	lsls	r1, r3, #31
 8003b28:	d405      	bmi.n	8003b36 <_vfiprintf_r+0x202>
 8003b2a:	89ab      	ldrh	r3, [r5, #12]
 8003b2c:	059a      	lsls	r2, r3, #22
 8003b2e:	d402      	bmi.n	8003b36 <_vfiprintf_r+0x202>
 8003b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b32:	f7ff fdcd 	bl	80036d0 <__retarget_lock_release_recursive>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af1d 	bmi.w	8003978 <_vfiprintf_r+0x44>
 8003b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b40:	e71c      	b.n	800397c <_vfiprintf_r+0x48>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <_vfiprintf_r+0x22c>)
 8003b4a:	a904      	add	r1, sp, #16
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f879 	bl	8003c44 <_printf_i>
 8003b52:	e7e4      	b.n	8003b1e <_vfiprintf_r+0x1ea>
 8003b54:	08004ecc 	.word	0x08004ecc
 8003b58:	08004ed6 	.word	0x08004ed6
 8003b5c:	00000000 	.word	0x00000000
 8003b60:	0800390f 	.word	0x0800390f
 8003b64:	08004ed2 	.word	0x08004ed2

08003b68 <_printf_common>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	4616      	mov	r6, r2
 8003b6e:	4699      	mov	r9, r3
 8003b70:	688a      	ldr	r2, [r1, #8]
 8003b72:	690b      	ldr	r3, [r1, #16]
 8003b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bfb8      	it	lt
 8003b7c:	4613      	movlt	r3, r2
 8003b7e:	6033      	str	r3, [r6, #0]
 8003b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b84:	4607      	mov	r7, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	b10a      	cbz	r2, 8003b8e <_printf_common+0x26>
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	6033      	str	r3, [r6, #0]
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	0699      	lsls	r1, r3, #26
 8003b92:	bf42      	ittt	mi
 8003b94:	6833      	ldrmi	r3, [r6, #0]
 8003b96:	3302      	addmi	r3, #2
 8003b98:	6033      	strmi	r3, [r6, #0]
 8003b9a:	6825      	ldr	r5, [r4, #0]
 8003b9c:	f015 0506 	ands.w	r5, r5, #6
 8003ba0:	d106      	bne.n	8003bb0 <_printf_common+0x48>
 8003ba2:	f104 0a19 	add.w	sl, r4, #25
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	6832      	ldr	r2, [r6, #0]
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dc26      	bgt.n	8003bfe <_printf_common+0x96>
 8003bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb4:	1e13      	subs	r3, r2, #0
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	0692      	lsls	r2, r2, #26
 8003bbe:	d42b      	bmi.n	8003c18 <_printf_common+0xb0>
 8003bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c0      	blx	r8
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d01e      	beq.n	8003c0c <_printf_common+0xa4>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	6922      	ldr	r2, [r4, #16]
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf02      	ittt	eq
 8003bda:	68e5      	ldreq	r5, [r4, #12]
 8003bdc:	6833      	ldreq	r3, [r6, #0]
 8003bde:	1aed      	subeq	r5, r5, r3
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	bf0c      	ite	eq
 8003be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be8:	2500      	movne	r5, #0
 8003bea:	4293      	cmp	r3, r2
 8003bec:	bfc4      	itt	gt
 8003bee:	1a9b      	subgt	r3, r3, r2
 8003bf0:	18ed      	addgt	r5, r5, r3
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	341a      	adds	r4, #26
 8003bf6:	42b5      	cmp	r5, r6
 8003bf8:	d11a      	bne.n	8003c30 <_printf_common+0xc8>
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e008      	b.n	8003c10 <_printf_common+0xa8>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4652      	mov	r2, sl
 8003c02:	4649      	mov	r1, r9
 8003c04:	4638      	mov	r0, r7
 8003c06:	47c0      	blx	r8
 8003c08:	3001      	adds	r0, #1
 8003c0a:	d103      	bne.n	8003c14 <_printf_common+0xac>
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	3501      	adds	r5, #1
 8003c16:	e7c6      	b.n	8003ba6 <_printf_common+0x3e>
 8003c18:	18e1      	adds	r1, r4, r3
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	2030      	movs	r0, #48	; 0x30
 8003c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c22:	4422      	add	r2, r4
 8003c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c2c:	3302      	adds	r3, #2
 8003c2e:	e7c7      	b.n	8003bc0 <_printf_common+0x58>
 8003c30:	2301      	movs	r3, #1
 8003c32:	4622      	mov	r2, r4
 8003c34:	4649      	mov	r1, r9
 8003c36:	4638      	mov	r0, r7
 8003c38:	47c0      	blx	r8
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d0e6      	beq.n	8003c0c <_printf_common+0xa4>
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7d9      	b.n	8003bf6 <_printf_common+0x8e>
	...

08003c44 <_printf_i>:
 8003c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c48:	7e0f      	ldrb	r7, [r1, #24]
 8003c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c4c:	2f78      	cmp	r7, #120	; 0x78
 8003c4e:	4691      	mov	r9, r2
 8003c50:	4680      	mov	r8, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	469a      	mov	sl, r3
 8003c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c5a:	d807      	bhi.n	8003c6c <_printf_i+0x28>
 8003c5c:	2f62      	cmp	r7, #98	; 0x62
 8003c5e:	d80a      	bhi.n	8003c76 <_printf_i+0x32>
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	f000 80d4 	beq.w	8003e0e <_printf_i+0x1ca>
 8003c66:	2f58      	cmp	r7, #88	; 0x58
 8003c68:	f000 80c0 	beq.w	8003dec <_printf_i+0x1a8>
 8003c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c74:	e03a      	b.n	8003cec <_printf_i+0xa8>
 8003c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c7a:	2b15      	cmp	r3, #21
 8003c7c:	d8f6      	bhi.n	8003c6c <_printf_i+0x28>
 8003c7e:	a101      	add	r1, pc, #4	; (adr r1, 8003c84 <_printf_i+0x40>)
 8003c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c84:	08003cdd 	.word	0x08003cdd
 8003c88:	08003cf1 	.word	0x08003cf1
 8003c8c:	08003c6d 	.word	0x08003c6d
 8003c90:	08003c6d 	.word	0x08003c6d
 8003c94:	08003c6d 	.word	0x08003c6d
 8003c98:	08003c6d 	.word	0x08003c6d
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003c6d 	.word	0x08003c6d
 8003ca4:	08003c6d 	.word	0x08003c6d
 8003ca8:	08003c6d 	.word	0x08003c6d
 8003cac:	08003c6d 	.word	0x08003c6d
 8003cb0:	08003df5 	.word	0x08003df5
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003daf 	.word	0x08003daf
 8003cbc:	08003c6d 	.word	0x08003c6d
 8003cc0:	08003c6d 	.word	0x08003c6d
 8003cc4:	08003e17 	.word	0x08003e17
 8003cc8:	08003c6d 	.word	0x08003c6d
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003c6d 	.word	0x08003c6d
 8003cd4:	08003c6d 	.word	0x08003c6d
 8003cd8:	08003db7 	.word	0x08003db7
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	602a      	str	r2, [r5, #0]
 8003ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e09f      	b.n	8003e30 <_printf_i+0x1ec>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	0607      	lsls	r7, r0, #24
 8003cf6:	f103 0104 	add.w	r1, r3, #4
 8003cfa:	6029      	str	r1, [r5, #0]
 8003cfc:	d501      	bpl.n	8003d02 <_printf_i+0xbe>
 8003cfe:	681e      	ldr	r6, [r3, #0]
 8003d00:	e003      	b.n	8003d0a <_printf_i+0xc6>
 8003d02:	0646      	lsls	r6, r0, #25
 8003d04:	d5fb      	bpl.n	8003cfe <_printf_i+0xba>
 8003d06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d0a:	2e00      	cmp	r6, #0
 8003d0c:	da03      	bge.n	8003d16 <_printf_i+0xd2>
 8003d0e:	232d      	movs	r3, #45	; 0x2d
 8003d10:	4276      	negs	r6, r6
 8003d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d16:	485a      	ldr	r0, [pc, #360]	; (8003e80 <_printf_i+0x23c>)
 8003d18:	230a      	movs	r3, #10
 8003d1a:	e012      	b.n	8003d42 <_printf_i+0xfe>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	6820      	ldr	r0, [r4, #0]
 8003d20:	1d19      	adds	r1, r3, #4
 8003d22:	6029      	str	r1, [r5, #0]
 8003d24:	0605      	lsls	r5, r0, #24
 8003d26:	d501      	bpl.n	8003d2c <_printf_i+0xe8>
 8003d28:	681e      	ldr	r6, [r3, #0]
 8003d2a:	e002      	b.n	8003d32 <_printf_i+0xee>
 8003d2c:	0641      	lsls	r1, r0, #25
 8003d2e:	d5fb      	bpl.n	8003d28 <_printf_i+0xe4>
 8003d30:	881e      	ldrh	r6, [r3, #0]
 8003d32:	4853      	ldr	r0, [pc, #332]	; (8003e80 <_printf_i+0x23c>)
 8003d34:	2f6f      	cmp	r7, #111	; 0x6f
 8003d36:	bf0c      	ite	eq
 8003d38:	2308      	moveq	r3, #8
 8003d3a:	230a      	movne	r3, #10
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d42:	6865      	ldr	r5, [r4, #4]
 8003d44:	60a5      	str	r5, [r4, #8]
 8003d46:	2d00      	cmp	r5, #0
 8003d48:	bfa2      	ittt	ge
 8003d4a:	6821      	ldrge	r1, [r4, #0]
 8003d4c:	f021 0104 	bicge.w	r1, r1, #4
 8003d50:	6021      	strge	r1, [r4, #0]
 8003d52:	b90e      	cbnz	r6, 8003d58 <_printf_i+0x114>
 8003d54:	2d00      	cmp	r5, #0
 8003d56:	d04b      	beq.n	8003df0 <_printf_i+0x1ac>
 8003d58:	4615      	mov	r5, r2
 8003d5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d5e:	fb03 6711 	mls	r7, r3, r1, r6
 8003d62:	5dc7      	ldrb	r7, [r0, r7]
 8003d64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d68:	4637      	mov	r7, r6
 8003d6a:	42bb      	cmp	r3, r7
 8003d6c:	460e      	mov	r6, r1
 8003d6e:	d9f4      	bls.n	8003d5a <_printf_i+0x116>
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d10b      	bne.n	8003d8c <_printf_i+0x148>
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	07de      	lsls	r6, r3, #31
 8003d78:	d508      	bpl.n	8003d8c <_printf_i+0x148>
 8003d7a:	6923      	ldr	r3, [r4, #16]
 8003d7c:	6861      	ldr	r1, [r4, #4]
 8003d7e:	4299      	cmp	r1, r3
 8003d80:	bfde      	ittt	le
 8003d82:	2330      	movle	r3, #48	; 0x30
 8003d84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d8c:	1b52      	subs	r2, r2, r5
 8003d8e:	6122      	str	r2, [r4, #16]
 8003d90:	f8cd a000 	str.w	sl, [sp]
 8003d94:	464b      	mov	r3, r9
 8003d96:	aa03      	add	r2, sp, #12
 8003d98:	4621      	mov	r1, r4
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f7ff fee4 	bl	8003b68 <_printf_common>
 8003da0:	3001      	adds	r0, #1
 8003da2:	d14a      	bne.n	8003e3a <_printf_i+0x1f6>
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	b004      	add	sp, #16
 8003daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	f043 0320 	orr.w	r3, r3, #32
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	4833      	ldr	r0, [pc, #204]	; (8003e84 <_printf_i+0x240>)
 8003db8:	2778      	movs	r7, #120	; 0x78
 8003dba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	6829      	ldr	r1, [r5, #0]
 8003dc2:	061f      	lsls	r7, r3, #24
 8003dc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dc8:	d402      	bmi.n	8003dd0 <_printf_i+0x18c>
 8003dca:	065f      	lsls	r7, r3, #25
 8003dcc:	bf48      	it	mi
 8003dce:	b2b6      	uxthmi	r6, r6
 8003dd0:	07df      	lsls	r7, r3, #31
 8003dd2:	bf48      	it	mi
 8003dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003dd8:	6029      	str	r1, [r5, #0]
 8003dda:	bf48      	it	mi
 8003ddc:	6023      	strmi	r3, [r4, #0]
 8003dde:	b91e      	cbnz	r6, 8003de8 <_printf_i+0x1a4>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	f023 0320 	bic.w	r3, r3, #32
 8003de6:	6023      	str	r3, [r4, #0]
 8003de8:	2310      	movs	r3, #16
 8003dea:	e7a7      	b.n	8003d3c <_printf_i+0xf8>
 8003dec:	4824      	ldr	r0, [pc, #144]	; (8003e80 <_printf_i+0x23c>)
 8003dee:	e7e4      	b.n	8003dba <_printf_i+0x176>
 8003df0:	4615      	mov	r5, r2
 8003df2:	e7bd      	b.n	8003d70 <_printf_i+0x12c>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	6826      	ldr	r6, [r4, #0]
 8003df8:	6961      	ldr	r1, [r4, #20]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	6028      	str	r0, [r5, #0]
 8003dfe:	0635      	lsls	r5, r6, #24
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	d501      	bpl.n	8003e08 <_printf_i+0x1c4>
 8003e04:	6019      	str	r1, [r3, #0]
 8003e06:	e002      	b.n	8003e0e <_printf_i+0x1ca>
 8003e08:	0670      	lsls	r0, r6, #25
 8003e0a:	d5fb      	bpl.n	8003e04 <_printf_i+0x1c0>
 8003e0c:	8019      	strh	r1, [r3, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6123      	str	r3, [r4, #16]
 8003e12:	4615      	mov	r5, r2
 8003e14:	e7bc      	b.n	8003d90 <_printf_i+0x14c>
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	1d1a      	adds	r2, r3, #4
 8003e1a:	602a      	str	r2, [r5, #0]
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	2100      	movs	r1, #0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f7fc f9dc 	bl	80001e0 <memchr>
 8003e28:	b108      	cbz	r0, 8003e2e <_printf_i+0x1ea>
 8003e2a:	1b40      	subs	r0, r0, r5
 8003e2c:	6060      	str	r0, [r4, #4]
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	6123      	str	r3, [r4, #16]
 8003e32:	2300      	movs	r3, #0
 8003e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e38:	e7aa      	b.n	8003d90 <_printf_i+0x14c>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	462a      	mov	r2, r5
 8003e3e:	4649      	mov	r1, r9
 8003e40:	4640      	mov	r0, r8
 8003e42:	47d0      	blx	sl
 8003e44:	3001      	adds	r0, #1
 8003e46:	d0ad      	beq.n	8003da4 <_printf_i+0x160>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	079b      	lsls	r3, r3, #30
 8003e4c:	d413      	bmi.n	8003e76 <_printf_i+0x232>
 8003e4e:	68e0      	ldr	r0, [r4, #12]
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	4298      	cmp	r0, r3
 8003e54:	bfb8      	it	lt
 8003e56:	4618      	movlt	r0, r3
 8003e58:	e7a6      	b.n	8003da8 <_printf_i+0x164>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4632      	mov	r2, r6
 8003e5e:	4649      	mov	r1, r9
 8003e60:	4640      	mov	r0, r8
 8003e62:	47d0      	blx	sl
 8003e64:	3001      	adds	r0, #1
 8003e66:	d09d      	beq.n	8003da4 <_printf_i+0x160>
 8003e68:	3501      	adds	r5, #1
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	9903      	ldr	r1, [sp, #12]
 8003e6e:	1a5b      	subs	r3, r3, r1
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	dcf2      	bgt.n	8003e5a <_printf_i+0x216>
 8003e74:	e7eb      	b.n	8003e4e <_printf_i+0x20a>
 8003e76:	2500      	movs	r5, #0
 8003e78:	f104 0619 	add.w	r6, r4, #25
 8003e7c:	e7f5      	b.n	8003e6a <_printf_i+0x226>
 8003e7e:	bf00      	nop
 8003e80:	08004edd 	.word	0x08004edd
 8003e84:	08004eee 	.word	0x08004eee

08003e88 <__svfiscanf_r>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	461d      	mov	r5, r3
 8003e8e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003e90:	07df      	lsls	r7, r3, #31
 8003e92:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003e96:	4606      	mov	r6, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	4692      	mov	sl, r2
 8003e9c:	d405      	bmi.n	8003eaa <__svfiscanf_r+0x22>
 8003e9e:	898b      	ldrh	r3, [r1, #12]
 8003ea0:	0598      	lsls	r0, r3, #22
 8003ea2:	d402      	bmi.n	8003eaa <__svfiscanf_r+0x22>
 8003ea4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8003ea6:	f7ff fc12 	bl	80036ce <__retarget_lock_acquire_recursive>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8003eb0:	4baa      	ldr	r3, [pc, #680]	; (800415c <__svfiscanf_r+0x2d4>)
 8003eb2:	93a0      	str	r3, [sp, #640]	; 0x280
 8003eb4:	f10d 0804 	add.w	r8, sp, #4
 8003eb8:	4ba9      	ldr	r3, [pc, #676]	; (8004160 <__svfiscanf_r+0x2d8>)
 8003eba:	4faa      	ldr	r7, [pc, #680]	; (8004164 <__svfiscanf_r+0x2dc>)
 8003ebc:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8004168 <__svfiscanf_r+0x2e0>
 8003ec0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003ec4:	93a1      	str	r3, [sp, #644]	; 0x284
 8003ec6:	9500      	str	r5, [sp, #0]
 8003ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8170 	beq.w	80041b2 <__svfiscanf_r+0x32a>
 8003ed2:	5cf9      	ldrb	r1, [r7, r3]
 8003ed4:	f011 0108 	ands.w	r1, r1, #8
 8003ed8:	f10a 0501 	add.w	r5, sl, #1
 8003edc:	d019      	beq.n	8003f12 <__svfiscanf_r+0x8a>
 8003ede:	6863      	ldr	r3, [r4, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	dd0f      	ble.n	8003f04 <__svfiscanf_r+0x7c>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	5cba      	ldrb	r2, [r7, r2]
 8003eea:	0711      	lsls	r1, r2, #28
 8003eec:	d401      	bmi.n	8003ef2 <__svfiscanf_r+0x6a>
 8003eee:	46aa      	mov	sl, r5
 8003ef0:	e7ea      	b.n	8003ec8 <__svfiscanf_r+0x40>
 8003ef2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003ef4:	3201      	adds	r2, #1
 8003ef6:	9245      	str	r2, [sp, #276]	; 0x114
 8003ef8:	6862      	ldr	r2, [r4, #4]
 8003efa:	3301      	adds	r3, #1
 8003efc:	3a01      	subs	r2, #1
 8003efe:	6062      	str	r2, [r4, #4]
 8003f00:	6023      	str	r3, [r4, #0]
 8003f02:	e7ec      	b.n	8003ede <__svfiscanf_r+0x56>
 8003f04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003f06:	4621      	mov	r1, r4
 8003f08:	4630      	mov	r0, r6
 8003f0a:	4798      	blx	r3
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d0e9      	beq.n	8003ee4 <__svfiscanf_r+0x5c>
 8003f10:	e7ed      	b.n	8003eee <__svfiscanf_r+0x66>
 8003f12:	2b25      	cmp	r3, #37	; 0x25
 8003f14:	d012      	beq.n	8003f3c <__svfiscanf_r+0xb4>
 8003f16:	469a      	mov	sl, r3
 8003f18:	6863      	ldr	r3, [r4, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f340 8093 	ble.w	8004046 <__svfiscanf_r+0x1be>
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	7813      	ldrb	r3, [r2, #0]
 8003f24:	4553      	cmp	r3, sl
 8003f26:	f040 8144 	bne.w	80041b2 <__svfiscanf_r+0x32a>
 8003f2a:	6863      	ldr	r3, [r4, #4]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	6063      	str	r3, [r4, #4]
 8003f30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003f32:	3201      	adds	r2, #1
 8003f34:	3301      	adds	r3, #1
 8003f36:	6022      	str	r2, [r4, #0]
 8003f38:	9345      	str	r3, [sp, #276]	; 0x114
 8003f3a:	e7d8      	b.n	8003eee <__svfiscanf_r+0x66>
 8003f3c:	9141      	str	r1, [sp, #260]	; 0x104
 8003f3e:	9143      	str	r1, [sp, #268]	; 0x10c
 8003f40:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003f44:	2b2a      	cmp	r3, #42	; 0x2a
 8003f46:	bf02      	ittt	eq
 8003f48:	2310      	moveq	r3, #16
 8003f4a:	9341      	streq	r3, [sp, #260]	; 0x104
 8003f4c:	f10a 0502 	addeq.w	r5, sl, #2
 8003f50:	220a      	movs	r2, #10
 8003f52:	46aa      	mov	sl, r5
 8003f54:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003f58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003f5c:	2b09      	cmp	r3, #9
 8003f5e:	d91d      	bls.n	8003f9c <__svfiscanf_r+0x114>
 8003f60:	4881      	ldr	r0, [pc, #516]	; (8004168 <__svfiscanf_r+0x2e0>)
 8003f62:	2203      	movs	r2, #3
 8003f64:	f7fc f93c 	bl	80001e0 <memchr>
 8003f68:	b138      	cbz	r0, 8003f7a <__svfiscanf_r+0xf2>
 8003f6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003f6c:	eba0 0009 	sub.w	r0, r0, r9
 8003f70:	2301      	movs	r3, #1
 8003f72:	4083      	lsls	r3, r0
 8003f74:	4313      	orrs	r3, r2
 8003f76:	9341      	str	r3, [sp, #260]	; 0x104
 8003f78:	4655      	mov	r5, sl
 8003f7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f7e:	2b78      	cmp	r3, #120	; 0x78
 8003f80:	d807      	bhi.n	8003f92 <__svfiscanf_r+0x10a>
 8003f82:	2b57      	cmp	r3, #87	; 0x57
 8003f84:	d811      	bhi.n	8003faa <__svfiscanf_r+0x122>
 8003f86:	2b25      	cmp	r3, #37	; 0x25
 8003f88:	d0c5      	beq.n	8003f16 <__svfiscanf_r+0x8e>
 8003f8a:	d857      	bhi.n	800403c <__svfiscanf_r+0x1b4>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80c6 	beq.w	800411e <__svfiscanf_r+0x296>
 8003f92:	2303      	movs	r3, #3
 8003f94:	9347      	str	r3, [sp, #284]	; 0x11c
 8003f96:	230a      	movs	r3, #10
 8003f98:	9342      	str	r3, [sp, #264]	; 0x108
 8003f9a:	e07f      	b.n	800409c <__svfiscanf_r+0x214>
 8003f9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003f9e:	fb02 1103 	mla	r1, r2, r3, r1
 8003fa2:	3930      	subs	r1, #48	; 0x30
 8003fa4:	9143      	str	r1, [sp, #268]	; 0x10c
 8003fa6:	4655      	mov	r5, sl
 8003fa8:	e7d3      	b.n	8003f52 <__svfiscanf_r+0xca>
 8003faa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003fae:	2a20      	cmp	r2, #32
 8003fb0:	d8ef      	bhi.n	8003f92 <__svfiscanf_r+0x10a>
 8003fb2:	a101      	add	r1, pc, #4	; (adr r1, 8003fb8 <__svfiscanf_r+0x130>)
 8003fb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003fb8:	0800407f 	.word	0x0800407f
 8003fbc:	08003f93 	.word	0x08003f93
 8003fc0:	08003f93 	.word	0x08003f93
 8003fc4:	080040dd 	.word	0x080040dd
 8003fc8:	08003f93 	.word	0x08003f93
 8003fcc:	08003f93 	.word	0x08003f93
 8003fd0:	08003f93 	.word	0x08003f93
 8003fd4:	08003f93 	.word	0x08003f93
 8003fd8:	08003f93 	.word	0x08003f93
 8003fdc:	08003f93 	.word	0x08003f93
 8003fe0:	08003f93 	.word	0x08003f93
 8003fe4:	080040f3 	.word	0x080040f3
 8003fe8:	080040d9 	.word	0x080040d9
 8003fec:	08004043 	.word	0x08004043
 8003ff0:	08004043 	.word	0x08004043
 8003ff4:	08004043 	.word	0x08004043
 8003ff8:	08003f93 	.word	0x08003f93
 8003ffc:	08004095 	.word	0x08004095
 8004000:	08003f93 	.word	0x08003f93
 8004004:	08003f93 	.word	0x08003f93
 8004008:	08003f93 	.word	0x08003f93
 800400c:	08003f93 	.word	0x08003f93
 8004010:	08004103 	.word	0x08004103
 8004014:	080040d1 	.word	0x080040d1
 8004018:	08004077 	.word	0x08004077
 800401c:	08003f93 	.word	0x08003f93
 8004020:	08003f93 	.word	0x08003f93
 8004024:	080040ff 	.word	0x080040ff
 8004028:	08003f93 	.word	0x08003f93
 800402c:	080040d9 	.word	0x080040d9
 8004030:	08003f93 	.word	0x08003f93
 8004034:	08003f93 	.word	0x08003f93
 8004038:	0800407f 	.word	0x0800407f
 800403c:	3b45      	subs	r3, #69	; 0x45
 800403e:	2b02      	cmp	r3, #2
 8004040:	d8a7      	bhi.n	8003f92 <__svfiscanf_r+0x10a>
 8004042:	2305      	movs	r3, #5
 8004044:	e029      	b.n	800409a <__svfiscanf_r+0x212>
 8004046:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004048:	4621      	mov	r1, r4
 800404a:	4630      	mov	r0, r6
 800404c:	4798      	blx	r3
 800404e:	2800      	cmp	r0, #0
 8004050:	f43f af66 	beq.w	8003f20 <__svfiscanf_r+0x98>
 8004054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004056:	07da      	lsls	r2, r3, #31
 8004058:	f140 80a3 	bpl.w	80041a2 <__svfiscanf_r+0x31a>
 800405c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800405e:	2800      	cmp	r0, #0
 8004060:	d066      	beq.n	8004130 <__svfiscanf_r+0x2a8>
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004068:	bf18      	it	ne
 800406a:	f04f 30ff 	movne.w	r0, #4294967295
 800406e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004076:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004078:	f042 0220 	orr.w	r2, r2, #32
 800407c:	9241      	str	r2, [sp, #260]	; 0x104
 800407e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004084:	9241      	str	r2, [sp, #260]	; 0x104
 8004086:	2210      	movs	r2, #16
 8004088:	2b6f      	cmp	r3, #111	; 0x6f
 800408a:	9242      	str	r2, [sp, #264]	; 0x108
 800408c:	bf34      	ite	cc
 800408e:	2303      	movcc	r3, #3
 8004090:	2304      	movcs	r3, #4
 8004092:	e002      	b.n	800409a <__svfiscanf_r+0x212>
 8004094:	2300      	movs	r3, #0
 8004096:	9342      	str	r3, [sp, #264]	; 0x108
 8004098:	2303      	movs	r3, #3
 800409a:	9347      	str	r3, [sp, #284]	; 0x11c
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	dd49      	ble.n	8004136 <__svfiscanf_r+0x2ae>
 80040a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040a4:	065b      	lsls	r3, r3, #25
 80040a6:	d404      	bmi.n	80040b2 <__svfiscanf_r+0x22a>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	781a      	ldrb	r2, [r3, #0]
 80040ac:	5cba      	ldrb	r2, [r7, r2]
 80040ae:	0710      	lsls	r0, r2, #28
 80040b0:	d448      	bmi.n	8004144 <__svfiscanf_r+0x2bc>
 80040b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	dc60      	bgt.n	800417a <__svfiscanf_r+0x2f2>
 80040b8:	466b      	mov	r3, sp
 80040ba:	4622      	mov	r2, r4
 80040bc:	a941      	add	r1, sp, #260	; 0x104
 80040be:	4630      	mov	r0, r6
 80040c0:	f000 f898 	bl	80041f4 <_scanf_chars>
 80040c4:	2801      	cmp	r0, #1
 80040c6:	d074      	beq.n	80041b2 <__svfiscanf_r+0x32a>
 80040c8:	2802      	cmp	r0, #2
 80040ca:	f47f af10 	bne.w	8003eee <__svfiscanf_r+0x66>
 80040ce:	e7c1      	b.n	8004054 <__svfiscanf_r+0x1cc>
 80040d0:	2308      	movs	r3, #8
 80040d2:	9342      	str	r3, [sp, #264]	; 0x108
 80040d4:	2304      	movs	r3, #4
 80040d6:	e7e0      	b.n	800409a <__svfiscanf_r+0x212>
 80040d8:	220a      	movs	r2, #10
 80040da:	e7d5      	b.n	8004088 <__svfiscanf_r+0x200>
 80040dc:	4629      	mov	r1, r5
 80040de:	4640      	mov	r0, r8
 80040e0:	f000 fb6c 	bl	80047bc <__sccl>
 80040e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ea:	9341      	str	r3, [sp, #260]	; 0x104
 80040ec:	4605      	mov	r5, r0
 80040ee:	2301      	movs	r3, #1
 80040f0:	e7d3      	b.n	800409a <__svfiscanf_r+0x212>
 80040f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80040f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f8:	9341      	str	r3, [sp, #260]	; 0x104
 80040fa:	2300      	movs	r3, #0
 80040fc:	e7cd      	b.n	800409a <__svfiscanf_r+0x212>
 80040fe:	2302      	movs	r3, #2
 8004100:	e7cb      	b.n	800409a <__svfiscanf_r+0x212>
 8004102:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004104:	06c3      	lsls	r3, r0, #27
 8004106:	f53f aef2 	bmi.w	8003eee <__svfiscanf_r+0x66>
 800410a:	9b00      	ldr	r3, [sp, #0]
 800410c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800410e:	1d19      	adds	r1, r3, #4
 8004110:	9100      	str	r1, [sp, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	07c0      	lsls	r0, r0, #31
 8004116:	bf4c      	ite	mi
 8004118:	801a      	strhmi	r2, [r3, #0]
 800411a:	601a      	strpl	r2, [r3, #0]
 800411c:	e6e7      	b.n	8003eee <__svfiscanf_r+0x66>
 800411e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004120:	07d8      	lsls	r0, r3, #31
 8004122:	d405      	bmi.n	8004130 <__svfiscanf_r+0x2a8>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	0599      	lsls	r1, r3, #22
 8004128:	d402      	bmi.n	8004130 <__svfiscanf_r+0x2a8>
 800412a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800412c:	f7ff fad0 	bl	80036d0 <__retarget_lock_release_recursive>
 8004130:	f04f 30ff 	mov.w	r0, #4294967295
 8004134:	e79b      	b.n	800406e <__svfiscanf_r+0x1e6>
 8004136:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004138:	4621      	mov	r1, r4
 800413a:	4630      	mov	r0, r6
 800413c:	4798      	blx	r3
 800413e:	2800      	cmp	r0, #0
 8004140:	d0af      	beq.n	80040a2 <__svfiscanf_r+0x21a>
 8004142:	e787      	b.n	8004054 <__svfiscanf_r+0x1cc>
 8004144:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004146:	3201      	adds	r2, #1
 8004148:	9245      	str	r2, [sp, #276]	; 0x114
 800414a:	6862      	ldr	r2, [r4, #4]
 800414c:	3a01      	subs	r2, #1
 800414e:	2a00      	cmp	r2, #0
 8004150:	6062      	str	r2, [r4, #4]
 8004152:	dd0b      	ble.n	800416c <__svfiscanf_r+0x2e4>
 8004154:	3301      	adds	r3, #1
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	e7a6      	b.n	80040a8 <__svfiscanf_r+0x220>
 800415a:	bf00      	nop
 800415c:	080048a3 	.word	0x080048a3
 8004160:	080046cd 	.word	0x080046cd
 8004164:	08004f1b 	.word	0x08004f1b
 8004168:	08004ed2 	.word	0x08004ed2
 800416c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800416e:	4621      	mov	r1, r4
 8004170:	4630      	mov	r0, r6
 8004172:	4798      	blx	r3
 8004174:	2800      	cmp	r0, #0
 8004176:	d097      	beq.n	80040a8 <__svfiscanf_r+0x220>
 8004178:	e76c      	b.n	8004054 <__svfiscanf_r+0x1cc>
 800417a:	2b04      	cmp	r3, #4
 800417c:	dc06      	bgt.n	800418c <__svfiscanf_r+0x304>
 800417e:	466b      	mov	r3, sp
 8004180:	4622      	mov	r2, r4
 8004182:	a941      	add	r1, sp, #260	; 0x104
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f88f 	bl	80042a8 <_scanf_i>
 800418a:	e79b      	b.n	80040c4 <__svfiscanf_r+0x23c>
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <__svfiscanf_r+0x340>)
 800418e:	2b00      	cmp	r3, #0
 8004190:	f43f aead 	beq.w	8003eee <__svfiscanf_r+0x66>
 8004194:	466b      	mov	r3, sp
 8004196:	4622      	mov	r2, r4
 8004198:	a941      	add	r1, sp, #260	; 0x104
 800419a:	4630      	mov	r0, r6
 800419c:	f3af 8000 	nop.w
 80041a0:	e790      	b.n	80040c4 <__svfiscanf_r+0x23c>
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	0599      	lsls	r1, r3, #22
 80041a6:	f53f af59 	bmi.w	800405c <__svfiscanf_r+0x1d4>
 80041aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041ac:	f7ff fa90 	bl	80036d0 <__retarget_lock_release_recursive>
 80041b0:	e754      	b.n	800405c <__svfiscanf_r+0x1d4>
 80041b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b4:	07da      	lsls	r2, r3, #31
 80041b6:	d405      	bmi.n	80041c4 <__svfiscanf_r+0x33c>
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	059b      	lsls	r3, r3, #22
 80041bc:	d402      	bmi.n	80041c4 <__svfiscanf_r+0x33c>
 80041be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c0:	f7ff fa86 	bl	80036d0 <__retarget_lock_release_recursive>
 80041c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80041c6:	e752      	b.n	800406e <__svfiscanf_r+0x1e6>
 80041c8:	00000000 	.word	0x00000000

080041cc <_vfiscanf_r>:
 80041cc:	b530      	push	{r4, r5, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	b085      	sub	sp, #20
 80041d2:	b148      	cbz	r0, 80041e8 <_vfiscanf_r+0x1c>
 80041d4:	6a05      	ldr	r5, [r0, #32]
 80041d6:	b93d      	cbnz	r5, 80041e8 <_vfiscanf_r+0x1c>
 80041d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041dc:	9101      	str	r1, [sp, #4]
 80041de:	f7ff f86f 	bl	80032c0 <__sinit>
 80041e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041e6:	9901      	ldr	r1, [sp, #4]
 80041e8:	4620      	mov	r0, r4
 80041ea:	b005      	add	sp, #20
 80041ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041f0:	f7ff be4a 	b.w	8003e88 <__svfiscanf_r>

080041f4 <_scanf_chars>:
 80041f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f8:	4615      	mov	r5, r2
 80041fa:	688a      	ldr	r2, [r1, #8]
 80041fc:	4680      	mov	r8, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	b932      	cbnz	r2, 8004210 <_scanf_chars+0x1c>
 8004202:	698a      	ldr	r2, [r1, #24]
 8004204:	2a00      	cmp	r2, #0
 8004206:	bf0c      	ite	eq
 8004208:	2201      	moveq	r2, #1
 800420a:	f04f 32ff 	movne.w	r2, #4294967295
 800420e:	608a      	str	r2, [r1, #8]
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80042a4 <_scanf_chars+0xb0>
 8004216:	06d1      	lsls	r1, r2, #27
 8004218:	bf5f      	itttt	pl
 800421a:	681a      	ldrpl	r2, [r3, #0]
 800421c:	1d11      	addpl	r1, r2, #4
 800421e:	6019      	strpl	r1, [r3, #0]
 8004220:	6816      	ldrpl	r6, [r2, #0]
 8004222:	2700      	movs	r7, #0
 8004224:	69a0      	ldr	r0, [r4, #24]
 8004226:	b188      	cbz	r0, 800424c <_scanf_chars+0x58>
 8004228:	2801      	cmp	r0, #1
 800422a:	d107      	bne.n	800423c <_scanf_chars+0x48>
 800422c:	682a      	ldr	r2, [r5, #0]
 800422e:	7811      	ldrb	r1, [r2, #0]
 8004230:	6962      	ldr	r2, [r4, #20]
 8004232:	5c52      	ldrb	r2, [r2, r1]
 8004234:	b952      	cbnz	r2, 800424c <_scanf_chars+0x58>
 8004236:	2f00      	cmp	r7, #0
 8004238:	d031      	beq.n	800429e <_scanf_chars+0xaa>
 800423a:	e022      	b.n	8004282 <_scanf_chars+0x8e>
 800423c:	2802      	cmp	r0, #2
 800423e:	d120      	bne.n	8004282 <_scanf_chars+0x8e>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004248:	071b      	lsls	r3, r3, #28
 800424a:	d41a      	bmi.n	8004282 <_scanf_chars+0x8e>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	06da      	lsls	r2, r3, #27
 8004250:	bf5e      	ittt	pl
 8004252:	682b      	ldrpl	r3, [r5, #0]
 8004254:	781b      	ldrbpl	r3, [r3, #0]
 8004256:	f806 3b01 	strbpl.w	r3, [r6], #1
 800425a:	682a      	ldr	r2, [r5, #0]
 800425c:	686b      	ldr	r3, [r5, #4]
 800425e:	3201      	adds	r2, #1
 8004260:	602a      	str	r2, [r5, #0]
 8004262:	68a2      	ldr	r2, [r4, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	3a01      	subs	r2, #1
 8004268:	606b      	str	r3, [r5, #4]
 800426a:	3701      	adds	r7, #1
 800426c:	60a2      	str	r2, [r4, #8]
 800426e:	b142      	cbz	r2, 8004282 <_scanf_chars+0x8e>
 8004270:	2b00      	cmp	r3, #0
 8004272:	dcd7      	bgt.n	8004224 <_scanf_chars+0x30>
 8004274:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004278:	4629      	mov	r1, r5
 800427a:	4640      	mov	r0, r8
 800427c:	4798      	blx	r3
 800427e:	2800      	cmp	r0, #0
 8004280:	d0d0      	beq.n	8004224 <_scanf_chars+0x30>
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	f013 0310 	ands.w	r3, r3, #16
 8004288:	d105      	bne.n	8004296 <_scanf_chars+0xa2>
 800428a:	68e2      	ldr	r2, [r4, #12]
 800428c:	3201      	adds	r2, #1
 800428e:	60e2      	str	r2, [r4, #12]
 8004290:	69a2      	ldr	r2, [r4, #24]
 8004292:	b102      	cbz	r2, 8004296 <_scanf_chars+0xa2>
 8004294:	7033      	strb	r3, [r6, #0]
 8004296:	6923      	ldr	r3, [r4, #16]
 8004298:	443b      	add	r3, r7
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2000      	movs	r0, #0
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	bf00      	nop
 80042a4:	08004f1b 	.word	0x08004f1b

080042a8 <_scanf_i>:
 80042a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ac:	4698      	mov	r8, r3
 80042ae:	4b74      	ldr	r3, [pc, #464]	; (8004480 <_scanf_i+0x1d8>)
 80042b0:	460c      	mov	r4, r1
 80042b2:	4682      	mov	sl, r0
 80042b4:	4616      	mov	r6, r2
 80042b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042ba:	b087      	sub	sp, #28
 80042bc:	ab03      	add	r3, sp, #12
 80042be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042c2:	4b70      	ldr	r3, [pc, #448]	; (8004484 <_scanf_i+0x1dc>)
 80042c4:	69a1      	ldr	r1, [r4, #24]
 80042c6:	4a70      	ldr	r2, [pc, #448]	; (8004488 <_scanf_i+0x1e0>)
 80042c8:	2903      	cmp	r1, #3
 80042ca:	bf18      	it	ne
 80042cc:	461a      	movne	r2, r3
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	9201      	str	r2, [sp, #4]
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80042d8:	bf88      	it	hi
 80042da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80042de:	4627      	mov	r7, r4
 80042e0:	bf82      	ittt	hi
 80042e2:	eb03 0905 	addhi.w	r9, r3, r5
 80042e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80042ea:	60a3      	strhi	r3, [r4, #8]
 80042ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80042f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80042f4:	bf98      	it	ls
 80042f6:	f04f 0900 	movls.w	r9, #0
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	463d      	mov	r5, r7
 80042fe:	f04f 0b00 	mov.w	fp, #0
 8004302:	6831      	ldr	r1, [r6, #0]
 8004304:	ab03      	add	r3, sp, #12
 8004306:	7809      	ldrb	r1, [r1, #0]
 8004308:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800430c:	2202      	movs	r2, #2
 800430e:	f7fb ff67 	bl	80001e0 <memchr>
 8004312:	b328      	cbz	r0, 8004360 <_scanf_i+0xb8>
 8004314:	f1bb 0f01 	cmp.w	fp, #1
 8004318:	d159      	bne.n	80043ce <_scanf_i+0x126>
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	b92a      	cbnz	r2, 800432a <_scanf_i+0x82>
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	2308      	movs	r3, #8
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	6063      	str	r3, [r4, #4]
 8004328:	6022      	str	r2, [r4, #0]
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004330:	6022      	str	r2, [r4, #0]
 8004332:	68a2      	ldr	r2, [r4, #8]
 8004334:	1e51      	subs	r1, r2, #1
 8004336:	60a1      	str	r1, [r4, #8]
 8004338:	b192      	cbz	r2, 8004360 <_scanf_i+0xb8>
 800433a:	6832      	ldr	r2, [r6, #0]
 800433c:	1c51      	adds	r1, r2, #1
 800433e:	6031      	str	r1, [r6, #0]
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	f805 2b01 	strb.w	r2, [r5], #1
 8004346:	6872      	ldr	r2, [r6, #4]
 8004348:	3a01      	subs	r2, #1
 800434a:	2a00      	cmp	r2, #0
 800434c:	6072      	str	r2, [r6, #4]
 800434e:	dc07      	bgt.n	8004360 <_scanf_i+0xb8>
 8004350:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004354:	4631      	mov	r1, r6
 8004356:	4650      	mov	r0, sl
 8004358:	4790      	blx	r2
 800435a:	2800      	cmp	r0, #0
 800435c:	f040 8085 	bne.w	800446a <_scanf_i+0x1c2>
 8004360:	f10b 0b01 	add.w	fp, fp, #1
 8004364:	f1bb 0f03 	cmp.w	fp, #3
 8004368:	d1cb      	bne.n	8004302 <_scanf_i+0x5a>
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	b90b      	cbnz	r3, 8004372 <_scanf_i+0xca>
 800436e:	230a      	movs	r3, #10
 8004370:	6063      	str	r3, [r4, #4]
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	4945      	ldr	r1, [pc, #276]	; (800448c <_scanf_i+0x1e4>)
 8004376:	6960      	ldr	r0, [r4, #20]
 8004378:	1ac9      	subs	r1, r1, r3
 800437a:	f000 fa1f 	bl	80047bc <__sccl>
 800437e:	f04f 0b00 	mov.w	fp, #0
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	6822      	ldr	r2, [r4, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03d      	beq.n	8004406 <_scanf_i+0x15e>
 800438a:	6831      	ldr	r1, [r6, #0]
 800438c:	6960      	ldr	r0, [r4, #20]
 800438e:	f891 c000 	ldrb.w	ip, [r1]
 8004392:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004396:	2800      	cmp	r0, #0
 8004398:	d035      	beq.n	8004406 <_scanf_i+0x15e>
 800439a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800439e:	d124      	bne.n	80043ea <_scanf_i+0x142>
 80043a0:	0510      	lsls	r0, r2, #20
 80043a2:	d522      	bpl.n	80043ea <_scanf_i+0x142>
 80043a4:	f10b 0b01 	add.w	fp, fp, #1
 80043a8:	f1b9 0f00 	cmp.w	r9, #0
 80043ac:	d003      	beq.n	80043b6 <_scanf_i+0x10e>
 80043ae:	3301      	adds	r3, #1
 80043b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80043b4:	60a3      	str	r3, [r4, #8]
 80043b6:	6873      	ldr	r3, [r6, #4]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	6073      	str	r3, [r6, #4]
 80043be:	dd1b      	ble.n	80043f8 <_scanf_i+0x150>
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	3301      	adds	r3, #1
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	60a3      	str	r3, [r4, #8]
 80043cc:	e7d9      	b.n	8004382 <_scanf_i+0xda>
 80043ce:	f1bb 0f02 	cmp.w	fp, #2
 80043d2:	d1ae      	bne.n	8004332 <_scanf_i+0x8a>
 80043d4:	6822      	ldr	r2, [r4, #0]
 80043d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80043da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043de:	d1bf      	bne.n	8004360 <_scanf_i+0xb8>
 80043e0:	2310      	movs	r3, #16
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	e7a2      	b.n	8004330 <_scanf_i+0x88>
 80043ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80043ee:	6022      	str	r2, [r4, #0]
 80043f0:	780b      	ldrb	r3, [r1, #0]
 80043f2:	f805 3b01 	strb.w	r3, [r5], #1
 80043f6:	e7de      	b.n	80043b6 <_scanf_i+0x10e>
 80043f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043fc:	4631      	mov	r1, r6
 80043fe:	4650      	mov	r0, sl
 8004400:	4798      	blx	r3
 8004402:	2800      	cmp	r0, #0
 8004404:	d0df      	beq.n	80043c6 <_scanf_i+0x11e>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	05d9      	lsls	r1, r3, #23
 800440a:	d50d      	bpl.n	8004428 <_scanf_i+0x180>
 800440c:	42bd      	cmp	r5, r7
 800440e:	d909      	bls.n	8004424 <_scanf_i+0x17c>
 8004410:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004414:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004418:	4632      	mov	r2, r6
 800441a:	4650      	mov	r0, sl
 800441c:	4798      	blx	r3
 800441e:	f105 39ff 	add.w	r9, r5, #4294967295
 8004422:	464d      	mov	r5, r9
 8004424:	42bd      	cmp	r5, r7
 8004426:	d028      	beq.n	800447a <_scanf_i+0x1d2>
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	f012 0210 	ands.w	r2, r2, #16
 800442e:	d113      	bne.n	8004458 <_scanf_i+0x1b0>
 8004430:	702a      	strb	r2, [r5, #0]
 8004432:	6863      	ldr	r3, [r4, #4]
 8004434:	9e01      	ldr	r6, [sp, #4]
 8004436:	4639      	mov	r1, r7
 8004438:	4650      	mov	r0, sl
 800443a:	47b0      	blx	r6
 800443c:	f8d8 3000 	ldr.w	r3, [r8]
 8004440:	6821      	ldr	r1, [r4, #0]
 8004442:	1d1a      	adds	r2, r3, #4
 8004444:	f8c8 2000 	str.w	r2, [r8]
 8004448:	f011 0f20 	tst.w	r1, #32
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	d00f      	beq.n	8004470 <_scanf_i+0x1c8>
 8004450:	6018      	str	r0, [r3, #0]
 8004452:	68e3      	ldr	r3, [r4, #12]
 8004454:	3301      	adds	r3, #1
 8004456:	60e3      	str	r3, [r4, #12]
 8004458:	6923      	ldr	r3, [r4, #16]
 800445a:	1bed      	subs	r5, r5, r7
 800445c:	445d      	add	r5, fp
 800445e:	442b      	add	r3, r5
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	2000      	movs	r0, #0
 8004464:	b007      	add	sp, #28
 8004466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446a:	f04f 0b00 	mov.w	fp, #0
 800446e:	e7ca      	b.n	8004406 <_scanf_i+0x15e>
 8004470:	07ca      	lsls	r2, r1, #31
 8004472:	bf4c      	ite	mi
 8004474:	8018      	strhmi	r0, [r3, #0]
 8004476:	6018      	strpl	r0, [r3, #0]
 8004478:	e7eb      	b.n	8004452 <_scanf_i+0x1aa>
 800447a:	2001      	movs	r0, #1
 800447c:	e7f2      	b.n	8004464 <_scanf_i+0x1bc>
 800447e:	bf00      	nop
 8004480:	08004e78 	.word	0x08004e78
 8004484:	08004c5d 	.word	0x08004c5d
 8004488:	08004b75 	.word	0x08004b75
 800448c:	08004f0f 	.word	0x08004f0f

08004490 <__sflush_r>:
 8004490:	898a      	ldrh	r2, [r1, #12]
 8004492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	4605      	mov	r5, r0
 8004498:	0710      	lsls	r0, r2, #28
 800449a:	460c      	mov	r4, r1
 800449c:	d458      	bmi.n	8004550 <__sflush_r+0xc0>
 800449e:	684b      	ldr	r3, [r1, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	dc05      	bgt.n	80044b0 <__sflush_r+0x20>
 80044a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	dc02      	bgt.n	80044b0 <__sflush_r+0x20>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044b2:	2e00      	cmp	r6, #0
 80044b4:	d0f9      	beq.n	80044aa <__sflush_r+0x1a>
 80044b6:	2300      	movs	r3, #0
 80044b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044bc:	682f      	ldr	r7, [r5, #0]
 80044be:	6a21      	ldr	r1, [r4, #32]
 80044c0:	602b      	str	r3, [r5, #0]
 80044c2:	d032      	beq.n	800452a <__sflush_r+0x9a>
 80044c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044c6:	89a3      	ldrh	r3, [r4, #12]
 80044c8:	075a      	lsls	r2, r3, #29
 80044ca:	d505      	bpl.n	80044d8 <__sflush_r+0x48>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	1ac0      	subs	r0, r0, r3
 80044d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044d2:	b10b      	cbz	r3, 80044d8 <__sflush_r+0x48>
 80044d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d6:	1ac0      	subs	r0, r0, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	4602      	mov	r2, r0
 80044dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	4628      	mov	r0, r5
 80044e2:	47b0      	blx	r6
 80044e4:	1c43      	adds	r3, r0, #1
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	d106      	bne.n	80044f8 <__sflush_r+0x68>
 80044ea:	6829      	ldr	r1, [r5, #0]
 80044ec:	291d      	cmp	r1, #29
 80044ee:	d82b      	bhi.n	8004548 <__sflush_r+0xb8>
 80044f0:	4a29      	ldr	r2, [pc, #164]	; (8004598 <__sflush_r+0x108>)
 80044f2:	410a      	asrs	r2, r1
 80044f4:	07d6      	lsls	r6, r2, #31
 80044f6:	d427      	bmi.n	8004548 <__sflush_r+0xb8>
 80044f8:	2200      	movs	r2, #0
 80044fa:	6062      	str	r2, [r4, #4]
 80044fc:	04d9      	lsls	r1, r3, #19
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	d504      	bpl.n	800450e <__sflush_r+0x7e>
 8004504:	1c42      	adds	r2, r0, #1
 8004506:	d101      	bne.n	800450c <__sflush_r+0x7c>
 8004508:	682b      	ldr	r3, [r5, #0]
 800450a:	b903      	cbnz	r3, 800450e <__sflush_r+0x7e>
 800450c:	6560      	str	r0, [r4, #84]	; 0x54
 800450e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004510:	602f      	str	r7, [r5, #0]
 8004512:	2900      	cmp	r1, #0
 8004514:	d0c9      	beq.n	80044aa <__sflush_r+0x1a>
 8004516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800451a:	4299      	cmp	r1, r3
 800451c:	d002      	beq.n	8004524 <__sflush_r+0x94>
 800451e:	4628      	mov	r0, r5
 8004520:	f7ff f8e6 	bl	80036f0 <_free_r>
 8004524:	2000      	movs	r0, #0
 8004526:	6360      	str	r0, [r4, #52]	; 0x34
 8004528:	e7c0      	b.n	80044ac <__sflush_r+0x1c>
 800452a:	2301      	movs	r3, #1
 800452c:	4628      	mov	r0, r5
 800452e:	47b0      	blx	r6
 8004530:	1c41      	adds	r1, r0, #1
 8004532:	d1c8      	bne.n	80044c6 <__sflush_r+0x36>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0c5      	beq.n	80044c6 <__sflush_r+0x36>
 800453a:	2b1d      	cmp	r3, #29
 800453c:	d001      	beq.n	8004542 <__sflush_r+0xb2>
 800453e:	2b16      	cmp	r3, #22
 8004540:	d101      	bne.n	8004546 <__sflush_r+0xb6>
 8004542:	602f      	str	r7, [r5, #0]
 8004544:	e7b1      	b.n	80044aa <__sflush_r+0x1a>
 8004546:	89a3      	ldrh	r3, [r4, #12]
 8004548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	e7ad      	b.n	80044ac <__sflush_r+0x1c>
 8004550:	690f      	ldr	r7, [r1, #16]
 8004552:	2f00      	cmp	r7, #0
 8004554:	d0a9      	beq.n	80044aa <__sflush_r+0x1a>
 8004556:	0793      	lsls	r3, r2, #30
 8004558:	680e      	ldr	r6, [r1, #0]
 800455a:	bf08      	it	eq
 800455c:	694b      	ldreq	r3, [r1, #20]
 800455e:	600f      	str	r7, [r1, #0]
 8004560:	bf18      	it	ne
 8004562:	2300      	movne	r3, #0
 8004564:	eba6 0807 	sub.w	r8, r6, r7
 8004568:	608b      	str	r3, [r1, #8]
 800456a:	f1b8 0f00 	cmp.w	r8, #0
 800456e:	dd9c      	ble.n	80044aa <__sflush_r+0x1a>
 8004570:	6a21      	ldr	r1, [r4, #32]
 8004572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004574:	4643      	mov	r3, r8
 8004576:	463a      	mov	r2, r7
 8004578:	4628      	mov	r0, r5
 800457a:	47b0      	blx	r6
 800457c:	2800      	cmp	r0, #0
 800457e:	dc06      	bgt.n	800458e <__sflush_r+0xfe>
 8004580:	89a3      	ldrh	r3, [r4, #12]
 8004582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004586:	81a3      	strh	r3, [r4, #12]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	e78e      	b.n	80044ac <__sflush_r+0x1c>
 800458e:	4407      	add	r7, r0
 8004590:	eba8 0800 	sub.w	r8, r8, r0
 8004594:	e7e9      	b.n	800456a <__sflush_r+0xda>
 8004596:	bf00      	nop
 8004598:	dfbffffe 	.word	0xdfbffffe

0800459c <_fflush_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	690b      	ldr	r3, [r1, #16]
 80045a0:	4605      	mov	r5, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	b913      	cbnz	r3, 80045ac <_fflush_r+0x10>
 80045a6:	2500      	movs	r5, #0
 80045a8:	4628      	mov	r0, r5
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	b118      	cbz	r0, 80045b6 <_fflush_r+0x1a>
 80045ae:	6a03      	ldr	r3, [r0, #32]
 80045b0:	b90b      	cbnz	r3, 80045b6 <_fflush_r+0x1a>
 80045b2:	f7fe fe85 	bl	80032c0 <__sinit>
 80045b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f3      	beq.n	80045a6 <_fflush_r+0xa>
 80045be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045c0:	07d0      	lsls	r0, r2, #31
 80045c2:	d404      	bmi.n	80045ce <_fflush_r+0x32>
 80045c4:	0599      	lsls	r1, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_fflush_r+0x32>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f7ff f880 	bl	80036ce <__retarget_lock_acquire_recursive>
 80045ce:	4628      	mov	r0, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	f7ff ff5d 	bl	8004490 <__sflush_r>
 80045d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045d8:	07da      	lsls	r2, r3, #31
 80045da:	4605      	mov	r5, r0
 80045dc:	d4e4      	bmi.n	80045a8 <_fflush_r+0xc>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	059b      	lsls	r3, r3, #22
 80045e2:	d4e1      	bmi.n	80045a8 <_fflush_r+0xc>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f7ff f873 	bl	80036d0 <__retarget_lock_release_recursive>
 80045ea:	e7dd      	b.n	80045a8 <_fflush_r+0xc>

080045ec <__swhatbuf_r>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	460c      	mov	r4, r1
 80045f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f4:	2900      	cmp	r1, #0
 80045f6:	b096      	sub	sp, #88	; 0x58
 80045f8:	4615      	mov	r5, r2
 80045fa:	461e      	mov	r6, r3
 80045fc:	da0d      	bge.n	800461a <__swhatbuf_r+0x2e>
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004604:	f04f 0100 	mov.w	r1, #0
 8004608:	bf0c      	ite	eq
 800460a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800460e:	2340      	movne	r3, #64	; 0x40
 8004610:	2000      	movs	r0, #0
 8004612:	6031      	str	r1, [r6, #0]
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	b016      	add	sp, #88	; 0x58
 8004618:	bd70      	pop	{r4, r5, r6, pc}
 800461a:	466a      	mov	r2, sp
 800461c:	f000 f9c6 	bl	80049ac <_fstat_r>
 8004620:	2800      	cmp	r0, #0
 8004622:	dbec      	blt.n	80045fe <__swhatbuf_r+0x12>
 8004624:	9901      	ldr	r1, [sp, #4]
 8004626:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800462a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800462e:	4259      	negs	r1, r3
 8004630:	4159      	adcs	r1, r3
 8004632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004636:	e7eb      	b.n	8004610 <__swhatbuf_r+0x24>

08004638 <__smakebuf_r>:
 8004638:	898b      	ldrh	r3, [r1, #12]
 800463a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800463c:	079d      	lsls	r5, r3, #30
 800463e:	4606      	mov	r6, r0
 8004640:	460c      	mov	r4, r1
 8004642:	d507      	bpl.n	8004654 <__smakebuf_r+0x1c>
 8004644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	6123      	str	r3, [r4, #16]
 800464c:	2301      	movs	r3, #1
 800464e:	6163      	str	r3, [r4, #20]
 8004650:	b002      	add	sp, #8
 8004652:	bd70      	pop	{r4, r5, r6, pc}
 8004654:	ab01      	add	r3, sp, #4
 8004656:	466a      	mov	r2, sp
 8004658:	f7ff ffc8 	bl	80045ec <__swhatbuf_r>
 800465c:	9900      	ldr	r1, [sp, #0]
 800465e:	4605      	mov	r5, r0
 8004660:	4630      	mov	r0, r6
 8004662:	f7ff f8b1 	bl	80037c8 <_malloc_r>
 8004666:	b948      	cbnz	r0, 800467c <__smakebuf_r+0x44>
 8004668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466c:	059a      	lsls	r2, r3, #22
 800466e:	d4ef      	bmi.n	8004650 <__smakebuf_r+0x18>
 8004670:	f023 0303 	bic.w	r3, r3, #3
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	81a3      	strh	r3, [r4, #12]
 800467a:	e7e3      	b.n	8004644 <__smakebuf_r+0xc>
 800467c:	89a3      	ldrh	r3, [r4, #12]
 800467e:	6020      	str	r0, [r4, #0]
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	9b00      	ldr	r3, [sp, #0]
 8004688:	6163      	str	r3, [r4, #20]
 800468a:	9b01      	ldr	r3, [sp, #4]
 800468c:	6120      	str	r0, [r4, #16]
 800468e:	b15b      	cbz	r3, 80046a8 <__smakebuf_r+0x70>
 8004690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004694:	4630      	mov	r0, r6
 8004696:	f000 f99b 	bl	80049d0 <_isatty_r>
 800469a:	b128      	cbz	r0, 80046a8 <__smakebuf_r+0x70>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	431d      	orrs	r5, r3
 80046ac:	81a5      	strh	r5, [r4, #12]
 80046ae:	e7cf      	b.n	8004650 <__smakebuf_r+0x18>

080046b0 <lflush>:
 80046b0:	898b      	ldrh	r3, [r1, #12]
 80046b2:	f003 0309 	and.w	r3, r3, #9
 80046b6:	2b09      	cmp	r3, #9
 80046b8:	d103      	bne.n	80046c2 <lflush+0x12>
 80046ba:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <lflush+0x18>)
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f7ff bf6d 	b.w	800459c <_fflush_r>
 80046c2:	2000      	movs	r0, #0
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000068 	.word	0x20000068

080046cc <__srefill_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	460c      	mov	r4, r1
 80046d0:	4605      	mov	r5, r0
 80046d2:	b118      	cbz	r0, 80046dc <__srefill_r+0x10>
 80046d4:	6a03      	ldr	r3, [r0, #32]
 80046d6:	b90b      	cbnz	r3, 80046dc <__srefill_r+0x10>
 80046d8:	f7fe fdf2 	bl	80032c0 <__sinit>
 80046dc:	2300      	movs	r3, #0
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e6:	069e      	lsls	r6, r3, #26
 80046e8:	d502      	bpl.n	80046f0 <__srefill_r+0x24>
 80046ea:	f04f 30ff 	mov.w	r0, #4294967295
 80046ee:	e05c      	b.n	80047aa <__srefill_r+0xde>
 80046f0:	0758      	lsls	r0, r3, #29
 80046f2:	d448      	bmi.n	8004786 <__srefill_r+0xba>
 80046f4:	06d9      	lsls	r1, r3, #27
 80046f6:	d405      	bmi.n	8004704 <__srefill_r+0x38>
 80046f8:	2309      	movs	r3, #9
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	e7f2      	b.n	80046ea <__srefill_r+0x1e>
 8004704:	071a      	lsls	r2, r3, #28
 8004706:	d50b      	bpl.n	8004720 <__srefill_r+0x54>
 8004708:	4621      	mov	r1, r4
 800470a:	4628      	mov	r0, r5
 800470c:	f7ff ff46 	bl	800459c <_fflush_r>
 8004710:	2800      	cmp	r0, #0
 8004712:	d1ea      	bne.n	80046ea <__srefill_r+0x1e>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	60a0      	str	r0, [r4, #8]
 8004718:	f023 0308 	bic.w	r3, r3, #8
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	61a0      	str	r0, [r4, #24]
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	f043 0304 	orr.w	r3, r3, #4
 8004726:	81a3      	strh	r3, [r4, #12]
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	b91b      	cbnz	r3, 8004734 <__srefill_r+0x68>
 800472c:	4621      	mov	r1, r4
 800472e:	4628      	mov	r0, r5
 8004730:	f7ff ff82 	bl	8004638 <__smakebuf_r>
 8004734:	89a6      	ldrh	r6, [r4, #12]
 8004736:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800473a:	07b3      	lsls	r3, r6, #30
 800473c:	d00f      	beq.n	800475e <__srefill_r+0x92>
 800473e:	2301      	movs	r3, #1
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <__srefill_r+0xe4>)
 8004742:	491c      	ldr	r1, [pc, #112]	; (80047b4 <__srefill_r+0xe8>)
 8004744:	481c      	ldr	r0, [pc, #112]	; (80047b8 <__srefill_r+0xec>)
 8004746:	81a3      	strh	r3, [r4, #12]
 8004748:	f006 0609 	and.w	r6, r6, #9
 800474c:	f7fe fdd0 	bl	80032f0 <_fwalk_sglue>
 8004750:	2e09      	cmp	r6, #9
 8004752:	81a7      	strh	r7, [r4, #12]
 8004754:	d103      	bne.n	800475e <__srefill_r+0x92>
 8004756:	4621      	mov	r1, r4
 8004758:	4628      	mov	r0, r5
 800475a:	f7ff fe99 	bl	8004490 <__sflush_r>
 800475e:	6922      	ldr	r2, [r4, #16]
 8004760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004762:	6963      	ldr	r3, [r4, #20]
 8004764:	6a21      	ldr	r1, [r4, #32]
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	4628      	mov	r0, r5
 800476a:	47b0      	blx	r6
 800476c:	2800      	cmp	r0, #0
 800476e:	6060      	str	r0, [r4, #4]
 8004770:	dc1c      	bgt.n	80047ac <__srefill_r+0xe0>
 8004772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004776:	bf17      	itett	ne
 8004778:	2200      	movne	r2, #0
 800477a:	f043 0320 	orreq.w	r3, r3, #32
 800477e:	6062      	strne	r2, [r4, #4]
 8004780:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004784:	e7bc      	b.n	8004700 <__srefill_r+0x34>
 8004786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004788:	2900      	cmp	r1, #0
 800478a:	d0cd      	beq.n	8004728 <__srefill_r+0x5c>
 800478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__srefill_r+0xce>
 8004794:	4628      	mov	r0, r5
 8004796:	f7fe ffab 	bl	80036f0 <_free_r>
 800479a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	2000      	movs	r0, #0
 80047a0:	6360      	str	r0, [r4, #52]	; 0x34
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0c0      	beq.n	8004728 <__srefill_r+0x5c>
 80047a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ac:	2000      	movs	r0, #0
 80047ae:	e7fc      	b.n	80047aa <__srefill_r+0xde>
 80047b0:	20000010 	.word	0x20000010
 80047b4:	080046b1 	.word	0x080046b1
 80047b8:	2000001c 	.word	0x2000001c

080047bc <__sccl>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	780b      	ldrb	r3, [r1, #0]
 80047c0:	4604      	mov	r4, r0
 80047c2:	2b5e      	cmp	r3, #94	; 0x5e
 80047c4:	bf0b      	itete	eq
 80047c6:	784b      	ldrbeq	r3, [r1, #1]
 80047c8:	1c4a      	addne	r2, r1, #1
 80047ca:	1c8a      	addeq	r2, r1, #2
 80047cc:	2100      	movne	r1, #0
 80047ce:	bf08      	it	eq
 80047d0:	2101      	moveq	r1, #1
 80047d2:	3801      	subs	r0, #1
 80047d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80047d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80047dc:	42a8      	cmp	r0, r5
 80047de:	d1fb      	bne.n	80047d8 <__sccl+0x1c>
 80047e0:	b90b      	cbnz	r3, 80047e6 <__sccl+0x2a>
 80047e2:	1e50      	subs	r0, r2, #1
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	f081 0101 	eor.w	r1, r1, #1
 80047ea:	54e1      	strb	r1, [r4, r3]
 80047ec:	4610      	mov	r0, r2
 80047ee:	4602      	mov	r2, r0
 80047f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80047f4:	2d2d      	cmp	r5, #45	; 0x2d
 80047f6:	d005      	beq.n	8004804 <__sccl+0x48>
 80047f8:	2d5d      	cmp	r5, #93	; 0x5d
 80047fa:	d016      	beq.n	800482a <__sccl+0x6e>
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d0f1      	beq.n	80047e4 <__sccl+0x28>
 8004800:	462b      	mov	r3, r5
 8004802:	e7f2      	b.n	80047ea <__sccl+0x2e>
 8004804:	7846      	ldrb	r6, [r0, #1]
 8004806:	2e5d      	cmp	r6, #93	; 0x5d
 8004808:	d0fa      	beq.n	8004800 <__sccl+0x44>
 800480a:	42b3      	cmp	r3, r6
 800480c:	dcf8      	bgt.n	8004800 <__sccl+0x44>
 800480e:	3002      	adds	r0, #2
 8004810:	461a      	mov	r2, r3
 8004812:	3201      	adds	r2, #1
 8004814:	4296      	cmp	r6, r2
 8004816:	54a1      	strb	r1, [r4, r2]
 8004818:	dcfb      	bgt.n	8004812 <__sccl+0x56>
 800481a:	1af2      	subs	r2, r6, r3
 800481c:	3a01      	subs	r2, #1
 800481e:	1c5d      	adds	r5, r3, #1
 8004820:	42b3      	cmp	r3, r6
 8004822:	bfa8      	it	ge
 8004824:	2200      	movge	r2, #0
 8004826:	18ab      	adds	r3, r5, r2
 8004828:	e7e1      	b.n	80047ee <__sccl+0x32>
 800482a:	4610      	mov	r0, r2
 800482c:	e7da      	b.n	80047e4 <__sccl+0x28>

0800482e <__submore>:
 800482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	460c      	mov	r4, r1
 8004834:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800483a:	4299      	cmp	r1, r3
 800483c:	d11d      	bne.n	800487a <__submore+0x4c>
 800483e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004842:	f7fe ffc1 	bl	80037c8 <_malloc_r>
 8004846:	b918      	cbnz	r0, 8004850 <__submore+0x22>
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004854:	63a3      	str	r3, [r4, #56]	; 0x38
 8004856:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800485a:	6360      	str	r0, [r4, #52]	; 0x34
 800485c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004860:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004864:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004868:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800486c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004870:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004874:	6020      	str	r0, [r4, #0]
 8004876:	2000      	movs	r0, #0
 8004878:	e7e8      	b.n	800484c <__submore+0x1e>
 800487a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800487c:	0077      	lsls	r7, r6, #1
 800487e:	463a      	mov	r2, r7
 8004880:	f000 f8c6 	bl	8004a10 <_realloc_r>
 8004884:	4605      	mov	r5, r0
 8004886:	2800      	cmp	r0, #0
 8004888:	d0de      	beq.n	8004848 <__submore+0x1a>
 800488a:	eb00 0806 	add.w	r8, r0, r6
 800488e:	4601      	mov	r1, r0
 8004890:	4632      	mov	r2, r6
 8004892:	4640      	mov	r0, r8
 8004894:	f7fe ff1d 	bl	80036d2 <memcpy>
 8004898:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800489c:	f8c4 8000 	str.w	r8, [r4]
 80048a0:	e7e9      	b.n	8004876 <__submore+0x48>

080048a2 <_ungetc_r>:
 80048a2:	b570      	push	{r4, r5, r6, lr}
 80048a4:	4614      	mov	r4, r2
 80048a6:	1c4a      	adds	r2, r1, #1
 80048a8:	4606      	mov	r6, r0
 80048aa:	460d      	mov	r5, r1
 80048ac:	d103      	bne.n	80048b6 <_ungetc_r+0x14>
 80048ae:	f04f 35ff 	mov.w	r5, #4294967295
 80048b2:	4628      	mov	r0, r5
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	b118      	cbz	r0, 80048c0 <_ungetc_r+0x1e>
 80048b8:	6a03      	ldr	r3, [r0, #32]
 80048ba:	b90b      	cbnz	r3, 80048c0 <_ungetc_r+0x1e>
 80048bc:	f7fe fd00 	bl	80032c0 <__sinit>
 80048c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048c2:	07db      	lsls	r3, r3, #31
 80048c4:	d405      	bmi.n	80048d2 <_ungetc_r+0x30>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	0598      	lsls	r0, r3, #22
 80048ca:	d402      	bmi.n	80048d2 <_ungetc_r+0x30>
 80048cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ce:	f7fe fefe 	bl	80036ce <__retarget_lock_acquire_recursive>
 80048d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d6:	f023 0320 	bic.w	r3, r3, #32
 80048da:	0759      	lsls	r1, r3, #29
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	d423      	bmi.n	800492a <_ungetc_r+0x88>
 80048e2:	06d3      	lsls	r3, r2, #27
 80048e4:	d409      	bmi.n	80048fa <_ungetc_r+0x58>
 80048e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e8:	07dd      	lsls	r5, r3, #31
 80048ea:	d4e0      	bmi.n	80048ae <_ungetc_r+0xc>
 80048ec:	f412 7f00 	tst.w	r2, #512	; 0x200
 80048f0:	d1dd      	bne.n	80048ae <_ungetc_r+0xc>
 80048f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f4:	f7fe feec 	bl	80036d0 <__retarget_lock_release_recursive>
 80048f8:	e7d9      	b.n	80048ae <_ungetc_r+0xc>
 80048fa:	0710      	lsls	r0, r2, #28
 80048fc:	d511      	bpl.n	8004922 <_ungetc_r+0x80>
 80048fe:	4621      	mov	r1, r4
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff fe4b 	bl	800459c <_fflush_r>
 8004906:	b130      	cbz	r0, 8004916 <_ungetc_r+0x74>
 8004908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800490a:	07d9      	lsls	r1, r3, #31
 800490c:	d4cf      	bmi.n	80048ae <_ungetc_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004914:	e7ec      	b.n	80048f0 <_ungetc_r+0x4e>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	60a0      	str	r0, [r4, #8]
 800491a:	f023 0308 	bic.w	r3, r3, #8
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	61a0      	str	r0, [r4, #24]
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	81a3      	strh	r3, [r4, #12]
 800492a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	b2ed      	uxtb	r5, r5
 8004930:	b1d3      	cbz	r3, 8004968 <_ungetc_r+0xc6>
 8004932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004934:	4293      	cmp	r3, r2
 8004936:	dc05      	bgt.n	8004944 <_ungetc_r+0xa2>
 8004938:	4621      	mov	r1, r4
 800493a:	4630      	mov	r0, r6
 800493c:	f7ff ff77 	bl	800482e <__submore>
 8004940:	2800      	cmp	r0, #0
 8004942:	d1e1      	bne.n	8004908 <_ungetc_r+0x66>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	6022      	str	r2, [r4, #0]
 800494a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	3301      	adds	r3, #1
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004956:	07da      	lsls	r2, r3, #31
 8004958:	d4ab      	bmi.n	80048b2 <_ungetc_r+0x10>
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	059b      	lsls	r3, r3, #22
 800495e:	d4a8      	bmi.n	80048b2 <_ungetc_r+0x10>
 8004960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004962:	f7fe feb5 	bl	80036d0 <__retarget_lock_release_recursive>
 8004966:	e7a4      	b.n	80048b2 <_ungetc_r+0x10>
 8004968:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800496a:	6920      	ldr	r0, [r4, #16]
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	f001 0101 	and.w	r1, r1, #1
 8004972:	b160      	cbz	r0, 800498e <_ungetc_r+0xec>
 8004974:	4298      	cmp	r0, r3
 8004976:	d20a      	bcs.n	800498e <_ungetc_r+0xec>
 8004978:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800497c:	42a8      	cmp	r0, r5
 800497e:	d106      	bne.n	800498e <_ungetc_r+0xec>
 8004980:	3b01      	subs	r3, #1
 8004982:	3201      	adds	r2, #1
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	6062      	str	r2, [r4, #4]
 8004988:	2900      	cmp	r1, #0
 800498a:	d192      	bne.n	80048b2 <_ungetc_r+0x10>
 800498c:	e7e5      	b.n	800495a <_ungetc_r+0xb8>
 800498e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004996:	6363      	str	r3, [r4, #52]	; 0x34
 8004998:	2303      	movs	r3, #3
 800499a:	63a3      	str	r3, [r4, #56]	; 0x38
 800499c:	4623      	mov	r3, r4
 800499e:	f803 5f46 	strb.w	r5, [r3, #70]!
 80049a2:	6023      	str	r3, [r4, #0]
 80049a4:	2301      	movs	r3, #1
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	e7ee      	b.n	8004988 <_ungetc_r+0xe6>
	...

080049ac <_fstat_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d07      	ldr	r5, [pc, #28]	; (80049cc <_fstat_r+0x20>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	602b      	str	r3, [r5, #0]
 80049ba:	f7fc f8b1 	bl	8000b20 <_fstat>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d102      	bne.n	80049c8 <_fstat_r+0x1c>
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	b103      	cbz	r3, 80049c8 <_fstat_r+0x1c>
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
 80049ca:	bf00      	nop
 80049cc:	2000028c 	.word	0x2000028c

080049d0 <_isatty_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d06      	ldr	r5, [pc, #24]	; (80049ec <_isatty_r+0x1c>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	f7fc f8b2 	bl	8000b44 <_isatty>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_isatty_r+0x1a>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_isatty_r+0x1a>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	2000028c 	.word	0x2000028c

080049f0 <_sbrk_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d06      	ldr	r5, [pc, #24]	; (8004a0c <_sbrk_r+0x1c>)
 80049f4:	2300      	movs	r3, #0
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	602b      	str	r3, [r5, #0]
 80049fc:	f7fc f8da 	bl	8000bb4 <_sbrk>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_sbrk_r+0x1a>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_sbrk_r+0x1a>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	2000028c 	.word	0x2000028c

08004a10 <_realloc_r>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4680      	mov	r8, r0
 8004a16:	4614      	mov	r4, r2
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b921      	cbnz	r1, 8004a26 <_realloc_r+0x16>
 8004a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a20:	4611      	mov	r1, r2
 8004a22:	f7fe bed1 	b.w	80037c8 <_malloc_r>
 8004a26:	b92a      	cbnz	r2, 8004a34 <_realloc_r+0x24>
 8004a28:	f7fe fe62 	bl	80036f0 <_free_r>
 8004a2c:	4625      	mov	r5, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	f000 f914 	bl	8004c60 <_malloc_usable_size_r>
 8004a38:	4284      	cmp	r4, r0
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	d802      	bhi.n	8004a44 <_realloc_r+0x34>
 8004a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a42:	d812      	bhi.n	8004a6a <_realloc_r+0x5a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7fe febe 	bl	80037c8 <_malloc_r>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0ed      	beq.n	8004a2e <_realloc_r+0x1e>
 8004a52:	42bc      	cmp	r4, r7
 8004a54:	4622      	mov	r2, r4
 8004a56:	4631      	mov	r1, r6
 8004a58:	bf28      	it	cs
 8004a5a:	463a      	movcs	r2, r7
 8004a5c:	f7fe fe39 	bl	80036d2 <memcpy>
 8004a60:	4631      	mov	r1, r6
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7fe fe44 	bl	80036f0 <_free_r>
 8004a68:	e7e1      	b.n	8004a2e <_realloc_r+0x1e>
 8004a6a:	4635      	mov	r5, r6
 8004a6c:	e7df      	b.n	8004a2e <_realloc_r+0x1e>
	...

08004a70 <_strtol_l.constprop.0>:
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a76:	d001      	beq.n	8004a7c <_strtol_l.constprop.0+0xc>
 8004a78:	2b24      	cmp	r3, #36	; 0x24
 8004a7a:	d906      	bls.n	8004a8a <_strtol_l.constprop.0+0x1a>
 8004a7c:	f7fe fdfc 	bl	8003678 <__errno>
 8004a80:	2316      	movs	r3, #22
 8004a82:	6003      	str	r3, [r0, #0]
 8004a84:	2000      	movs	r0, #0
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004b70 <_strtol_l.constprop.0+0x100>
 8004a8e:	460d      	mov	r5, r1
 8004a90:	462e      	mov	r6, r5
 8004a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a96:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004a9a:	f017 0708 	ands.w	r7, r7, #8
 8004a9e:	d1f7      	bne.n	8004a90 <_strtol_l.constprop.0+0x20>
 8004aa0:	2c2d      	cmp	r4, #45	; 0x2d
 8004aa2:	d132      	bne.n	8004b0a <_strtol_l.constprop.0+0x9a>
 8004aa4:	782c      	ldrb	r4, [r5, #0]
 8004aa6:	2701      	movs	r7, #1
 8004aa8:	1cb5      	adds	r5, r6, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d05b      	beq.n	8004b66 <_strtol_l.constprop.0+0xf6>
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d109      	bne.n	8004ac6 <_strtol_l.constprop.0+0x56>
 8004ab2:	2c30      	cmp	r4, #48	; 0x30
 8004ab4:	d107      	bne.n	8004ac6 <_strtol_l.constprop.0+0x56>
 8004ab6:	782c      	ldrb	r4, [r5, #0]
 8004ab8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004abc:	2c58      	cmp	r4, #88	; 0x58
 8004abe:	d14d      	bne.n	8004b5c <_strtol_l.constprop.0+0xec>
 8004ac0:	786c      	ldrb	r4, [r5, #1]
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	3502      	adds	r5, #2
 8004ac6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004aca:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ace:	f04f 0e00 	mov.w	lr, #0
 8004ad2:	fbb8 f9f3 	udiv	r9, r8, r3
 8004ad6:	4676      	mov	r6, lr
 8004ad8:	fb03 8a19 	mls	sl, r3, r9, r8
 8004adc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004ae0:	f1bc 0f09 	cmp.w	ip, #9
 8004ae4:	d816      	bhi.n	8004b14 <_strtol_l.constprop.0+0xa4>
 8004ae6:	4664      	mov	r4, ip
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	dd24      	ble.n	8004b36 <_strtol_l.constprop.0+0xc6>
 8004aec:	f1be 3fff 	cmp.w	lr, #4294967295
 8004af0:	d008      	beq.n	8004b04 <_strtol_l.constprop.0+0x94>
 8004af2:	45b1      	cmp	r9, r6
 8004af4:	d31c      	bcc.n	8004b30 <_strtol_l.constprop.0+0xc0>
 8004af6:	d101      	bne.n	8004afc <_strtol_l.constprop.0+0x8c>
 8004af8:	45a2      	cmp	sl, r4
 8004afa:	db19      	blt.n	8004b30 <_strtol_l.constprop.0+0xc0>
 8004afc:	fb06 4603 	mla	r6, r6, r3, r4
 8004b00:	f04f 0e01 	mov.w	lr, #1
 8004b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b08:	e7e8      	b.n	8004adc <_strtol_l.constprop.0+0x6c>
 8004b0a:	2c2b      	cmp	r4, #43	; 0x2b
 8004b0c:	bf04      	itt	eq
 8004b0e:	782c      	ldrbeq	r4, [r5, #0]
 8004b10:	1cb5      	addeq	r5, r6, #2
 8004b12:	e7ca      	b.n	8004aaa <_strtol_l.constprop.0+0x3a>
 8004b14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004b18:	f1bc 0f19 	cmp.w	ip, #25
 8004b1c:	d801      	bhi.n	8004b22 <_strtol_l.constprop.0+0xb2>
 8004b1e:	3c37      	subs	r4, #55	; 0x37
 8004b20:	e7e2      	b.n	8004ae8 <_strtol_l.constprop.0+0x78>
 8004b22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004b26:	f1bc 0f19 	cmp.w	ip, #25
 8004b2a:	d804      	bhi.n	8004b36 <_strtol_l.constprop.0+0xc6>
 8004b2c:	3c57      	subs	r4, #87	; 0x57
 8004b2e:	e7db      	b.n	8004ae8 <_strtol_l.constprop.0+0x78>
 8004b30:	f04f 3eff 	mov.w	lr, #4294967295
 8004b34:	e7e6      	b.n	8004b04 <_strtol_l.constprop.0+0x94>
 8004b36:	f1be 3fff 	cmp.w	lr, #4294967295
 8004b3a:	d105      	bne.n	8004b48 <_strtol_l.constprop.0+0xd8>
 8004b3c:	2322      	movs	r3, #34	; 0x22
 8004b3e:	6003      	str	r3, [r0, #0]
 8004b40:	4646      	mov	r6, r8
 8004b42:	b942      	cbnz	r2, 8004b56 <_strtol_l.constprop.0+0xe6>
 8004b44:	4630      	mov	r0, r6
 8004b46:	e79e      	b.n	8004a86 <_strtol_l.constprop.0+0x16>
 8004b48:	b107      	cbz	r7, 8004b4c <_strtol_l.constprop.0+0xdc>
 8004b4a:	4276      	negs	r6, r6
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	d0f9      	beq.n	8004b44 <_strtol_l.constprop.0+0xd4>
 8004b50:	f1be 0f00 	cmp.w	lr, #0
 8004b54:	d000      	beq.n	8004b58 <_strtol_l.constprop.0+0xe8>
 8004b56:	1e69      	subs	r1, r5, #1
 8004b58:	6011      	str	r1, [r2, #0]
 8004b5a:	e7f3      	b.n	8004b44 <_strtol_l.constprop.0+0xd4>
 8004b5c:	2430      	movs	r4, #48	; 0x30
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1b1      	bne.n	8004ac6 <_strtol_l.constprop.0+0x56>
 8004b62:	2308      	movs	r3, #8
 8004b64:	e7af      	b.n	8004ac6 <_strtol_l.constprop.0+0x56>
 8004b66:	2c30      	cmp	r4, #48	; 0x30
 8004b68:	d0a5      	beq.n	8004ab6 <_strtol_l.constprop.0+0x46>
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	e7ab      	b.n	8004ac6 <_strtol_l.constprop.0+0x56>
 8004b6e:	bf00      	nop
 8004b70:	08004f1b 	.word	0x08004f1b

08004b74 <_strtol_r>:
 8004b74:	f7ff bf7c 	b.w	8004a70 <_strtol_l.constprop.0>

08004b78 <_strtoul_l.constprop.0>:
 8004b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b7c:	4f36      	ldr	r7, [pc, #216]	; (8004c58 <_strtoul_l.constprop.0+0xe0>)
 8004b7e:	4686      	mov	lr, r0
 8004b80:	460d      	mov	r5, r1
 8004b82:	4628      	mov	r0, r5
 8004b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b88:	5d3e      	ldrb	r6, [r7, r4]
 8004b8a:	f016 0608 	ands.w	r6, r6, #8
 8004b8e:	d1f8      	bne.n	8004b82 <_strtoul_l.constprop.0+0xa>
 8004b90:	2c2d      	cmp	r4, #45	; 0x2d
 8004b92:	d130      	bne.n	8004bf6 <_strtoul_l.constprop.0+0x7e>
 8004b94:	782c      	ldrb	r4, [r5, #0]
 8004b96:	2601      	movs	r6, #1
 8004b98:	1c85      	adds	r5, r0, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d057      	beq.n	8004c4e <_strtoul_l.constprop.0+0xd6>
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d109      	bne.n	8004bb6 <_strtoul_l.constprop.0+0x3e>
 8004ba2:	2c30      	cmp	r4, #48	; 0x30
 8004ba4:	d107      	bne.n	8004bb6 <_strtoul_l.constprop.0+0x3e>
 8004ba6:	7828      	ldrb	r0, [r5, #0]
 8004ba8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004bac:	2858      	cmp	r0, #88	; 0x58
 8004bae:	d149      	bne.n	8004c44 <_strtoul_l.constprop.0+0xcc>
 8004bb0:	786c      	ldrb	r4, [r5, #1]
 8004bb2:	2310      	movs	r3, #16
 8004bb4:	3502      	adds	r5, #2
 8004bb6:	f04f 38ff 	mov.w	r8, #4294967295
 8004bba:	2700      	movs	r7, #0
 8004bbc:	fbb8 f8f3 	udiv	r8, r8, r3
 8004bc0:	fb03 f908 	mul.w	r9, r3, r8
 8004bc4:	ea6f 0909 	mvn.w	r9, r9
 8004bc8:	4638      	mov	r0, r7
 8004bca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004bce:	f1bc 0f09 	cmp.w	ip, #9
 8004bd2:	d815      	bhi.n	8004c00 <_strtoul_l.constprop.0+0x88>
 8004bd4:	4664      	mov	r4, ip
 8004bd6:	42a3      	cmp	r3, r4
 8004bd8:	dd23      	ble.n	8004c22 <_strtoul_l.constprop.0+0xaa>
 8004bda:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004bde:	d007      	beq.n	8004bf0 <_strtoul_l.constprop.0+0x78>
 8004be0:	4580      	cmp	r8, r0
 8004be2:	d31b      	bcc.n	8004c1c <_strtoul_l.constprop.0+0xa4>
 8004be4:	d101      	bne.n	8004bea <_strtoul_l.constprop.0+0x72>
 8004be6:	45a1      	cmp	r9, r4
 8004be8:	db18      	blt.n	8004c1c <_strtoul_l.constprop.0+0xa4>
 8004bea:	fb00 4003 	mla	r0, r0, r3, r4
 8004bee:	2701      	movs	r7, #1
 8004bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bf4:	e7e9      	b.n	8004bca <_strtoul_l.constprop.0+0x52>
 8004bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8004bf8:	bf04      	itt	eq
 8004bfa:	782c      	ldrbeq	r4, [r5, #0]
 8004bfc:	1c85      	addeq	r5, r0, #2
 8004bfe:	e7cc      	b.n	8004b9a <_strtoul_l.constprop.0+0x22>
 8004c00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c04:	f1bc 0f19 	cmp.w	ip, #25
 8004c08:	d801      	bhi.n	8004c0e <_strtoul_l.constprop.0+0x96>
 8004c0a:	3c37      	subs	r4, #55	; 0x37
 8004c0c:	e7e3      	b.n	8004bd6 <_strtoul_l.constprop.0+0x5e>
 8004c0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c12:	f1bc 0f19 	cmp.w	ip, #25
 8004c16:	d804      	bhi.n	8004c22 <_strtoul_l.constprop.0+0xaa>
 8004c18:	3c57      	subs	r4, #87	; 0x57
 8004c1a:	e7dc      	b.n	8004bd6 <_strtoul_l.constprop.0+0x5e>
 8004c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8004c20:	e7e6      	b.n	8004bf0 <_strtoul_l.constprop.0+0x78>
 8004c22:	1c7b      	adds	r3, r7, #1
 8004c24:	d106      	bne.n	8004c34 <_strtoul_l.constprop.0+0xbc>
 8004c26:	2322      	movs	r3, #34	; 0x22
 8004c28:	f8ce 3000 	str.w	r3, [lr]
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	b932      	cbnz	r2, 8004c3e <_strtoul_l.constprop.0+0xc6>
 8004c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c34:	b106      	cbz	r6, 8004c38 <_strtoul_l.constprop.0+0xc0>
 8004c36:	4240      	negs	r0, r0
 8004c38:	2a00      	cmp	r2, #0
 8004c3a:	d0f9      	beq.n	8004c30 <_strtoul_l.constprop.0+0xb8>
 8004c3c:	b107      	cbz	r7, 8004c40 <_strtoul_l.constprop.0+0xc8>
 8004c3e:	1e69      	subs	r1, r5, #1
 8004c40:	6011      	str	r1, [r2, #0]
 8004c42:	e7f5      	b.n	8004c30 <_strtoul_l.constprop.0+0xb8>
 8004c44:	2430      	movs	r4, #48	; 0x30
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1b5      	bne.n	8004bb6 <_strtoul_l.constprop.0+0x3e>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	e7b3      	b.n	8004bb6 <_strtoul_l.constprop.0+0x3e>
 8004c4e:	2c30      	cmp	r4, #48	; 0x30
 8004c50:	d0a9      	beq.n	8004ba6 <_strtoul_l.constprop.0+0x2e>
 8004c52:	230a      	movs	r3, #10
 8004c54:	e7af      	b.n	8004bb6 <_strtoul_l.constprop.0+0x3e>
 8004c56:	bf00      	nop
 8004c58:	08004f1b 	.word	0x08004f1b

08004c5c <_strtoul_r>:
 8004c5c:	f7ff bf8c 	b.w	8004b78 <_strtoul_l.constprop.0>

08004c60 <_malloc_usable_size_r>:
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f18      	subs	r0, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfbc      	itt	lt
 8004c6a:	580b      	ldrlt	r3, [r1, r0]
 8004c6c:	18c0      	addlt	r0, r0, r3
 8004c6e:	4770      	bx	lr

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
