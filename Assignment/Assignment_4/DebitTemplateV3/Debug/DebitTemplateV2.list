
DebitTemplateV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001230  08010b10  08010b10  00020b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d40  08011d40  000306cc  2**0
                  CONTENTS
  4 .ARM          00000008  08011d40  08011d40  00021d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d48  08011d48  000306cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011d48  08011d48  00021d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d50  08011d50  00021d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006cc  20000000  08011d54  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000544  200006cc  08012420  000306cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c10  08012420  00030c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000306fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015fbd  00000000  00000000  0003073f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d1b  00000000  00000000  000466fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00049418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104d  00000000  00000000  0004a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d64  00000000  00000000  0004b96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e7f  00000000  00000000  000706d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfebf  00000000  00000000  00088550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007664  00000000  00000000  00168410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0016fa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006cc 	.word	0x200006cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010af8 	.word	0x08010af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006d0 	.word	0x200006d0
 80001cc:	08010af8 	.word	0x08010af8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <deBounceInit>:
#include <stdio.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
 800101a:	460b      	mov	r3, r1
 800101c:	717b      	strb	r3, [r7, #5]
 800101e:	4613      	mov	r3, r2
 8001020:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001022:	2301      	movs	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
	switch(pin)
 8001026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d85a      	bhi.n	80010e4 <deBounceInit+0xd4>
 800102e:	a201      	add	r2, pc, #4	; (adr r2, 8001034 <deBounceInit+0x24>)
 8001030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001034:	08001075 	.word	0x08001075
 8001038:	0800107b 	.word	0x0800107b
 800103c:	08001081 	.word	0x08001081
 8001040:	08001087 	.word	0x08001087
 8001044:	0800108d 	.word	0x0800108d
 8001048:	08001093 	.word	0x08001093
 800104c:	08001099 	.word	0x08001099
 8001050:	0800109f 	.word	0x0800109f
 8001054:	080010a5 	.word	0x080010a5
 8001058:	080010ad 	.word	0x080010ad
 800105c:	080010b5 	.word	0x080010b5
 8001060:	080010bd 	.word	0x080010bd
 8001064:	080010c5 	.word	0x080010c5
 8001068:	080010cd 	.word	0x080010cd
 800106c:	080010d5 	.word	0x080010d5
 8001070:	080010dd 	.word	0x080010dd
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8001074:	2301      	movs	r3, #1
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e038      	b.n	80010ec <deBounceInit+0xdc>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 800107a:	2302      	movs	r3, #2
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	e035      	b.n	80010ec <deBounceInit+0xdc>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001080:	2304      	movs	r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e032      	b.n	80010ec <deBounceInit+0xdc>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8001086:	2308      	movs	r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	e02f      	b.n	80010ec <deBounceInit+0xdc>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 800108c:	2310      	movs	r3, #16
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e02c      	b.n	80010ec <deBounceInit+0xdc>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8001092:	2320      	movs	r3, #32
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e029      	b.n	80010ec <deBounceInit+0xdc>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001098:	2340      	movs	r3, #64	; 0x40
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e026      	b.n	80010ec <deBounceInit+0xdc>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e023      	b.n	80010ec <deBounceInit+0xdc>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 80010a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e01f      	b.n	80010ec <deBounceInit+0xdc>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e01b      	b.n	80010ec <deBounceInit+0xdc>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	e017      	b.n	80010ec <deBounceInit+0xdc>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80010bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e013      	b.n	80010ec <deBounceInit+0xdc>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e00f      	b.n	80010ec <deBounceInit+0xdc>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e00b      	b.n	80010ec <deBounceInit+0xdc>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80010d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e007      	b.n	80010ec <deBounceInit+0xdc>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e003      	b.n	80010ec <deBounceInit+0xdc>
		default:
			printf( "bad gpio pin number in init\n\r");
 80010e4:	4821      	ldr	r0, [pc, #132]	; (800116c <deBounceInit+0x15c>)
 80010e6:	f006 fc49 	bl	800797c <printf>
			break;
 80010ea:	bf00      	nop
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010f0:	2302      	movs	r3, #2
 80010f2:	617b      	str	r3, [r7, #20]
	switch (mode)
 80010f4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <deBounceInit+0xf2>
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d003      	beq.n	8001108 <deBounceInit+0xf8>
 8001100:	e005      	b.n	800110e <deBounceInit+0xfe>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e002      	b.n	800110e <deBounceInit+0xfe>
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	bf00      	nop
	}
	switch (port)
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	2b43      	cmp	r3, #67	; 0x43
 8001112:	d015      	beq.n	8001140 <deBounceInit+0x130>
 8001114:	2b43      	cmp	r3, #67	; 0x43
 8001116:	dc1a      	bgt.n	800114e <deBounceInit+0x13e>
 8001118:	2b41      	cmp	r3, #65	; 0x41
 800111a:	d002      	beq.n	8001122 <deBounceInit+0x112>
 800111c:	2b42      	cmp	r3, #66	; 0x42
 800111e:	d008      	beq.n	8001132 <deBounceInit+0x122>
 8001120:	e015      	b.n	800114e <deBounceInit+0x13e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f002 fec0 	bl	8003eb0 <HAL_GPIO_Init>
 8001130:	e011      	b.n	8001156 <deBounceInit+0x146>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <deBounceInit+0x160>)
 800113a:	f002 feb9 	bl	8003eb0 <HAL_GPIO_Init>
 800113e:	e00a      	b.n	8001156 <deBounceInit+0x146>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <deBounceInit+0x164>)
 8001148:	f002 feb2 	bl	8003eb0 <HAL_GPIO_Init>
 800114c:	e003      	b.n	8001156 <deBounceInit+0x146>
		default:
			printf( "bad gpio port number\n\r");
 800114e:	480a      	ldr	r0, [pc, #40]	; (8001178 <deBounceInit+0x168>)
 8001150:	f006 fc14 	bl	800797c <printf>
			break;
 8001154:	bf00      	nop
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f002 fea6 	bl	8003eb0 <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08010b10 	.word	0x08010b10
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	08010b30 	.word	0x08010b30

0800117c <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	460b      	mov	r3, r1
 8001188:	717b      	strb	r3, [r7, #5]
 800118a:	4613      	mov	r3, r2
 800118c:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int8_t pinStateWeAreLookingFor = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 800119a:	f001 fec3 	bl	8002f24 <HAL_GetTick>
 800119e:	4603      	mov	r3, r0
 80011a0:	623b      	str	r3, [r7, #32]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
		/*Configure GPIO pin : */
		switch(pin)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d85a      	bhi.n	8001264 <deBounceReadPin+0xe8>
 80011ae:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <deBounceReadPin+0x38>)
 80011b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b4:	080011f5 	.word	0x080011f5
 80011b8:	080011fb 	.word	0x080011fb
 80011bc:	08001201 	.word	0x08001201
 80011c0:	08001207 	.word	0x08001207
 80011c4:	0800120d 	.word	0x0800120d
 80011c8:	08001213 	.word	0x08001213
 80011cc:	08001219 	.word	0x08001219
 80011d0:	0800121f 	.word	0x0800121f
 80011d4:	08001225 	.word	0x08001225
 80011d8:	0800122d 	.word	0x0800122d
 80011dc:	08001235 	.word	0x08001235
 80011e0:	0800123d 	.word	0x0800123d
 80011e4:	08001245 	.word	0x08001245
 80011e8:	0800124d 	.word	0x0800124d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	0800125d 	.word	0x0800125d
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	e038      	b.n	800126c <deBounceReadPin+0xf0>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e035      	b.n	800126c <deBounceReadPin+0xf0>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001200:	2304      	movs	r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e032      	b.n	800126c <deBounceReadPin+0xf0>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8001206:	2308      	movs	r3, #8
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e02f      	b.n	800126c <deBounceReadPin+0xf0>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 800120c:	2310      	movs	r3, #16
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e02c      	b.n	800126c <deBounceReadPin+0xf0>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8001212:	2320      	movs	r3, #32
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	e029      	b.n	800126c <deBounceReadPin+0xf0>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001218:	2340      	movs	r3, #64	; 0x40
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e026      	b.n	800126c <deBounceReadPin+0xf0>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e023      	b.n	800126c <deBounceReadPin+0xf0>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8001224:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e01f      	b.n	800126c <deBounceReadPin+0xf0>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e01b      	b.n	800126c <deBounceReadPin+0xf0>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8001234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e017      	b.n	800126c <deBounceReadPin+0xf0>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 800123c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e013      	b.n	800126c <deBounceReadPin+0xf0>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	e00f      	b.n	800126c <deBounceReadPin+0xf0>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 800124c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	e00b      	b.n	800126c <deBounceReadPin+0xf0>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8001254:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e007      	b.n	800126c <deBounceReadPin+0xf0>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 800125c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	e003      	b.n	800126c <deBounceReadPin+0xf0>
			default:
				printf( "bad gpio pin number in read pin\n\r");
 8001264:	4847      	ldr	r0, [pc, #284]	; (8001384 <deBounceReadPin+0x208>)
 8001266:	f006 fb89 	bl	800797c <printf>
				break;
 800126a:	bf00      	nop
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	pinState = 0 ;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (port)
 8001272:	797b      	ldrb	r3, [r7, #5]
 8001274:	2b43      	cmp	r3, #67	; 0x43
 8001276:	d01b      	beq.n	80012b0 <deBounceReadPin+0x134>
 8001278:	2b43      	cmp	r3, #67	; 0x43
 800127a:	dc23      	bgt.n	80012c4 <deBounceReadPin+0x148>
 800127c:	2b41      	cmp	r3, #65	; 0x41
 800127e:	d002      	beq.n	8001286 <deBounceReadPin+0x10a>
 8001280:	2b42      	cmp	r3, #66	; 0x42
 8001282:	d00b      	beq.n	800129c <deBounceReadPin+0x120>
 8001284:	e01e      	b.n	80012c4 <deBounceReadPin+0x148>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	b29b      	uxth	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001290:	f002 ff78 	bl	8004184 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800129a:	e017      	b.n	80012cc <deBounceReadPin+0x150>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4619      	mov	r1, r3
 80012a2:	4839      	ldr	r0, [pc, #228]	; (8001388 <deBounceReadPin+0x20c>)
 80012a4:	f002 ff6e 	bl	8004184 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ae:	e00d      	b.n	80012cc <deBounceReadPin+0x150>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	4835      	ldr	r0, [pc, #212]	; (800138c <deBounceReadPin+0x210>)
 80012b8:	f002 ff64 	bl	8004184 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012c2:	e003      	b.n	80012cc <deBounceReadPin+0x150>
		default:
			printf( "bad gpio port name in read pin\n\r");
 80012c4:	4832      	ldr	r0, [pc, #200]	; (8001390 <deBounceReadPin+0x214>)
 80012c6:	f006 fb59 	bl	800797c <printf>
			break;
 80012ca:	bf00      	nop
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80012cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <deBounceReadPin+0x160>
	{
		pinStateWeAreLookingFor = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012da:	e043      	b.n	8001364 <deBounceReadPin+0x1e8>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 80012e2:	e03f      	b.n	8001364 <deBounceReadPin+0x1e8>
	{

		switch (port)
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	2b43      	cmp	r3, #67	; 0x43
 80012e8:	d01b      	beq.n	8001322 <deBounceReadPin+0x1a6>
 80012ea:	2b43      	cmp	r3, #67	; 0x43
 80012ec:	dc23      	bgt.n	8001336 <deBounceReadPin+0x1ba>
 80012ee:	2b41      	cmp	r3, #65	; 0x41
 80012f0:	d002      	beq.n	80012f8 <deBounceReadPin+0x17c>
 80012f2:	2b42      	cmp	r3, #66	; 0x42
 80012f4:	d00b      	beq.n	800130e <deBounceReadPin+0x192>
 80012f6:	e01e      	b.n	8001336 <deBounceReadPin+0x1ba>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f002 ff3f 	bl	8004184 <HAL_GPIO_ReadPin>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800130c:	e017      	b.n	800133e <deBounceReadPin+0x1c2>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	b29b      	uxth	r3, r3
 8001312:	4619      	mov	r1, r3
 8001314:	481c      	ldr	r0, [pc, #112]	; (8001388 <deBounceReadPin+0x20c>)
 8001316:	f002 ff35 	bl	8004184 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001320:	e00d      	b.n	800133e <deBounceReadPin+0x1c2>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4619      	mov	r1, r3
 8001328:	4818      	ldr	r0, [pc, #96]	; (800138c <deBounceReadPin+0x210>)
 800132a:	f002 ff2b 	bl	8004184 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001334:	e003      	b.n	800133e <deBounceReadPin+0x1c2>
			default:
				printf( "bad gpio port letter in read pin\n\r");
 8001336:	4817      	ldr	r0, [pc, #92]	; (8001394 <deBounceReadPin+0x218>)
 8001338:	f006 fb20 	bl	800797c <printf>
				break;
 800133c:	bf00      	nop
		}
		if(pinState != pinStateWeAreLookingFor)
 800133e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001342:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8001346:	429a      	cmp	r2, r3
 8001348:	d00c      	beq.n	8001364 <deBounceReadPin+0x1e8>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 800134a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 800135c:	f001 fde2 	bl	8002f24 <HAL_GetTick>
 8001360:	4603      	mov	r3, r0
 8001362:	623b      	str	r3, [r7, #32]
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8001364:	f001 fdde 	bl	8002f24 <HAL_GetTick>
 8001368:	4601      	mov	r1, r0
 800136a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	4413      	add	r3, r2
 8001372:	4299      	cmp	r1, r3
 8001374:	d3b6      	bcc.n	80012e4 <deBounceReadPin+0x168>
		}
	}
	return (pinStateWeAreLookingFor);
 8001376:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800137a:	4618      	mov	r0, r3
 800137c:	3728      	adds	r7, #40	; 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	08010b48 	.word	0x08010b48
 8001388:	48000400 	.word	0x48000400
 800138c:	48000800 	.word	0x48000800
 8001390:	08010b6c 	.word	0x08010b6c
 8001394:	08010b90 	.word	0x08010b90

08001398 <changeSpeakerFrequency>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void changeSpeakerFrequency(TIM_HandleTypeDef *htim,
		uint32_t newFrequency)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09c      	sub	sp, #112	; 0x70
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]

	//HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);

	// calculate the new period based off of frequency input
	uint32_t newPeriod = 1000000000 / (newFrequency * 250);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	22fa      	movs	r2, #250	; 0xfa
 80013a6:	fb02 f303 	mul.w	r3, r2, r3
 80013aa:	4a58      	ldr	r2, [pc, #352]	; (800150c <changeSpeakerFrequency+0x174>)
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	66fb      	str	r3, [r7, #108]	; 0x6c

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80013b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013c0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	222c      	movs	r2, #44	; 0x2c
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f006 fbb0 	bl	8007b4e <memset>

	htim->Instance = TIM1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <changeSpeakerFrequency+0x178>)
 80013f2:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = 0;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
	htim->Init.Period = newPeriod;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001404:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
	htim->Init.RepetitionCounter = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htim) != HAL_OK)
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f004 fc03 	bl	8005c24 <HAL_TIM_Base_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <changeSpeakerFrequency+0x90>
	{
		Error_Handler();
 8001424:	f001 f800 	bl	8002428 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK)
 800142e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f004 fdb7 	bl	8005fa8 <HAL_TIM_ConfigClockSource>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <changeSpeakerFrequency+0xac>
	{
		Error_Handler();
 8001440:	f000 fff2 	bl	8002428 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(htim) != HAL_OK)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f004 fc44 	bl	8005cd2 <HAL_TIM_PWM_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <changeSpeakerFrequency+0xbc>
	{
		Error_Handler();
 8001450:	f000 ffea 	bl	8002428 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)
 8001460:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001464:	4619      	mov	r1, r3
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f005 fae0 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <changeSpeakerFrequency+0xde>
			!= HAL_OK)
	{
		Error_Handler();
 8001472:	f000 ffd9 	bl	8002428 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001476:	2360      	movs	r3, #96	; 0x60
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = htim1.Init.Period/2;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <changeSpeakerFrequency+0x17c>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001486:	2300      	movs	r3, #0
 8001488:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001496:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	481d      	ldr	r0, [pc, #116]	; (8001514 <changeSpeakerFrequency+0x17c>)
 80014a0:	f004 fc6e 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <changeSpeakerFrequency+0x116>
			!= HAL_OK)
	{
		Error_Handler();
 80014aa:	f000 ffbd 	bl	8002428 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig)
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f005 fb07 	bl	8006af8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <changeSpeakerFrequency+0x15c>
			!= HAL_OK)
	{
		Error_Handler();
 80014f0:	f000 ff9a 	bl	8002428 <Error_Handler>
	}
	HAL_TIM_MspPostInit(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f001 faab 	bl	8002a50 <HAL_TIM_MspPostInit>

	// must restart the timer once changes are complete
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f005 f999 	bl	8006834 <HAL_TIMEx_PWMN_Start>
}
 8001502:	bf00      	nop
 8001504:	3770      	adds	r7, #112	; 0x70
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	3b9aca00 	.word	0x3b9aca00
 8001510:	40012c00 	.word	0x40012c00
 8001514:	200007d4 	.word	0x200007d4

08001518 <ErrorSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the error sound on speaker connected on PA7
  * ******************************************************************************
  */
void ErrorSound()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
//	printf("Playing error sound\n\r");
	for(uint8_t count = 0; count < 10; count++)
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e016      	b.n	8001552 <ErrorSound+0x3a>
	{
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 8001524:	2300      	movs	r3, #0
 8001526:	80bb      	strh	r3, [r7, #4]
 8001528:	e00b      	b.n	8001542 <ErrorSound+0x2a>
		{
//			printf("Error freq=%u\r\n", freq);			// print out the new frequency
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	4619      	mov	r1, r3
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <ErrorSound+0x50>)
 8001530:	f7ff ff32 	bl	8001398 <changeSpeakerFrequency>
			HAL_Delay(10);						// delay for 1 second
 8001534:	200a      	movs	r0, #10
 8001536:	f001 fd01 	bl	8002f3c <HAL_Delay>
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 800153a:	88bb      	ldrh	r3, [r7, #4]
 800153c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001540:	80bb      	strh	r3, [r7, #4]
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	f241 3287 	movw	r2, #4999	; 0x1387
 8001548:	4293      	cmp	r3, r2
 800154a:	d9ee      	bls.n	800152a <ErrorSound+0x12>
	for(uint8_t count = 0; count < 10; count++)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3301      	adds	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b09      	cmp	r3, #9
 8001556:	d9e5      	bls.n	8001524 <ErrorSound+0xc>
		}
	}

	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 8001558:	2100      	movs	r1, #0
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <ErrorSound+0x50>)
 800155c:	f005 fa08 	bl	8006970 <HAL_TIMEx_PWMN_Stop>

//	changeSpeakerFrequency(&htim1, 0);	// set new frequency
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200007d4 	.word	0x200007d4

0800156c <SuccessSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the success sound on speaker connected on PA7
  * ******************************************************************************
  */
void SuccessSound()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	717b      	strb	r3, [r7, #5]

	if(count < 1)
 8001576:	797b      	ldrb	r3, [r7, #5]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d114      	bne.n	80015a6 <SuccessSound+0x3a>
	{
		for(uint16_t freq = 3000; freq > 0; freq -= 200)
 800157c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	e00a      	b.n	800159a <SuccessSound+0x2e>
		{
//			printf("Success freq=%u\r\n", freq);			// print out the new frequency
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	4619      	mov	r1, r3
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <SuccessSound+0x4c>)
 800158a:	f7ff ff05 	bl	8001398 <changeSpeakerFrequency>
			HAL_Delay(35);						// delay for 1 second
 800158e:	2023      	movs	r0, #35	; 0x23
 8001590:	f001 fcd4 	bl	8002f3c <HAL_Delay>
		for(uint16_t freq = 3000; freq > 0; freq -= 200)
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	3bc8      	subs	r3, #200	; 0xc8
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f1      	bne.n	8001584 <SuccessSound+0x18>
		}
		count++;
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	3301      	adds	r3, #1
 80015a4:	717b      	strb	r3, [r7, #5]
	}
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80015a6:	2100      	movs	r1, #0
 80015a8:	4803      	ldr	r0, [pc, #12]	; (80015b8 <SuccessSound+0x4c>)
 80015aa:	f005 f9e1 	bl	8006970 <HAL_TIMEx_PWMN_Stop>
//	changeSpeakerFrequency(&htim1, 0);	// set new frequency
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200007d4 	.word	0x200007d4

080015bc <startUpOLEDSplashScreen>:
 *
 *
 *******************************************************************************
 */
void startUpOLEDSplashScreen(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
	snprintf (stringBuffer, sizeof(stringBuffer), "   Debit Demo");
 80015d0:	463b      	mov	r3, r7
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <startUpOLEDSplashScreen+0x48>)
 80015d4:	2110      	movs	r1, #16
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 fa42 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1206, GOLDEN);
 80015dc:	463a      	mov	r2, r7
 80015de:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	230c      	movs	r3, #12
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f001 f80b 	bl	8002604 <ssd1331_display_string>
	HAL_Delay (2000);
 80015ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015f2:	f001 fca3 	bl	8002f3c <HAL_Delay>
	ssd1331_clear_screen (BLACK);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f001 f84d 	bl	8002696 <ssd1331_clear_screen>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	08010bb4 	.word	0x08010bb4

08001608 <pushButtonInit>:
 lose printf output ability.
 *
 *******************************************************************************
 */
void pushButtonInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	deBounceInit (chequingPbPin, 'A', 1); 		//1 = pullup resistor enabled
 800160c:	2300      	movs	r3, #0
 800160e:	2201      	movs	r2, #1
 8001610:	2141      	movs	r1, #65	; 0x41
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fcfc 	bl	8001010 <deBounceInit>
	deBounceInit (savingsPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8001618:	2301      	movs	r3, #1
 800161a:	2201      	movs	r2, #1
 800161c:	2141      	movs	r1, #65	; 0x41
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fcf6 	bl	8001010 <deBounceInit>
	deBounceInit (okPbPin, 'A', 1); 			//1 = pullup resistor enabled
 8001624:	2303      	movs	r3, #3
 8001626:	2201      	movs	r2, #1
 8001628:	2141      	movs	r1, #65	; 0x41
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fcf0 	bl	8001010 <deBounceInit>
	deBounceInit (cancelPbPin, 'A', 1); 		//1 = pullup resistor enabled
 8001630:	2304      	movs	r3, #4
 8001632:	2201      	movs	r2, #1
 8001634:	2141      	movs	r1, #65	; 0x41
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fcea 	bl	8001010 <deBounceInit>
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <displayWelcome>:
 * DESCRIPTION   : clears the OLED display and displays
 * 				Welcome on line 1 of the display
 *******************************************************************************
 */
void displayWelcome(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af02      	add	r7, sp, #8
	char stringBuffer[STRING_BUFF_LEN_MAX] = { 0 };
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	829a      	strh	r2, [r3, #20]

	ssd1331_clear_screen (BLACK);
 800165c:	2000      	movs	r0, #0
 800165e:	f001 f81a 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "   Welcome ");
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <displayWelcome+0x48>)
 8001666:	211a      	movs	r1, #26
 8001668:	4618      	mov	r0, r3
 800166a:	f006 f9f9 	bl	8007a60 <snprintf>
	ssd1331_display_string (4, 0, stringBuffer, FONT_1206, WHITE);
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	230c      	movs	r3, #12
 8001678:	2100      	movs	r1, #0
 800167a:	2004      	movs	r0, #4
 800167c:	f000 ffc2 	bl	8002604 <ssd1331_display_string>
}
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08010bc4 	.word	0x08010bc4

0800168c <controlLEDSpeaker>:
 * RETURNS       : None
 * DESCRIPTION   :	Glows LED as per ATM machine transaction state
 *******************************************************************************
 */
static void controlLEDSpeaker(transactionState_e iTransactionState)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	switch (iTransactionState)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d002      	beq.n	80016a2 <controlLEDSpeaker+0x16>
 800169c:	2b06      	cmp	r3, #6
 800169e:	d01c      	beq.n	80016da <controlLEDSpeaker+0x4e>
 80016a0:	e037      	b.n	8001712 <controlLEDSpeaker+0x86>
	{
		case TRANSACTION_STATE_SUCCESS:
		{
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);		//Red LED OFF
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ac:	f002 fd82 	bl	80041b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//Green LED ON
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f002 fd7b 	bl	80041b4 <HAL_GPIO_WritePin>
			SuccessSound();
 80016be:	f7ff ff55 	bl	800156c <SuccessSound>
			HAL_Delay (3000);
 80016c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016c6:	f001 fc39 	bl	8002f3c <HAL_Delay>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//Green LED OFF
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f002 fd6e 	bl	80041b4 <HAL_GPIO_WritePin>

			break;
 80016d8:	e02a      	b.n	8001730 <controlLEDSpeaker+0xa4>
		}
		case TRANSACTION_STATE_FAILED:
		{
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//Green LED OFF
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f002 fd66 	bl	80041b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, GPIO_PIN_SET);		//Red LED ON
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f002 fd5f 	bl	80041b4 <HAL_GPIO_WritePin>
			ErrorSound();
 80016f6:	f7ff ff0f 	bl	8001518 <ErrorSound>

			HAL_Delay (3000);
 80016fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016fe:	f001 fc1d 	bl	8002f3c <HAL_Delay>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);		//Red LED OFF
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f002 fd52 	bl	80041b4 <HAL_GPIO_WritePin>
			break;
 8001710:	e00e      	b.n	8001730 <controlLEDSpeaker+0xa4>
		}
		default:
		{
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);		//Green LED OFF
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f002 fd4a 	bl	80041b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);		//Red LED OFF
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f002 fd43 	bl	80041b4 <HAL_GPIO_WritePin>
			break;
 800172e:	bf00      	nop
		}
	}
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <controlOLED>:
 *
 *******************************************************************************
 */
static void controlOLED(transactionState_e iTransactionState,
                transactionRespCode_e iTransactionRespCode)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08c      	sub	sp, #48	; 0x30
 800173c:	af02      	add	r7, sp, #8
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
	char stringBuffer[STRING_BUFF_LEN_MAX] = { 0 };
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
 800175c:	829a      	strh	r2, [r3, #20]

	switch (iTransactionState)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d002      	beq.n	800176a <controlOLED+0x32>
 8001764:	2b06      	cmp	r3, #6
 8001766:	d003      	beq.n	8001770 <controlOLED+0x38>
			break;
		}

		default:
		{
			break;
 8001768:	e04b      	b.n	8001802 <controlOLED+0xca>
			displayTransactionSuccessFull ();
 800176a:	f000 f911 	bl	8001990 <displayTransactionSuccessFull>
			break;
 800176e:	e048      	b.n	8001802 <controlOLED+0xca>
			switch (iTransactionRespCode)
 8001770:	79bb      	ldrb	r3, [r7, #6]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d016      	beq.n	80017a4 <controlOLED+0x6c>
 8001776:	2b03      	cmp	r3, #3
 8001778:	dc1c      	bgt.n	80017b4 <controlOLED+0x7c>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d002      	beq.n	8001784 <controlOLED+0x4c>
 800177e:	2b02      	cmp	r3, #2
 8001780:	d008      	beq.n	8001794 <controlOLED+0x5c>
 8001782:	e017      	b.n	80017b4 <controlOLED+0x7c>
					snprintf (stringBuffer, sizeof(stringBuffer), "%s", "Invalid Pin");
 8001784:	f107 000c 	add.w	r0, r7, #12
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <controlOLED+0xd4>)
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <controlOLED+0xd8>)
 800178c:	211a      	movs	r1, #26
 800178e:	f006 f967 	bl	8007a60 <snprintf>
					break;
 8001792:	e017      	b.n	80017c4 <controlOLED+0x8c>
					snprintf (stringBuffer, sizeof(stringBuffer), "%s",
 8001794:	f107 000c 	add.w	r0, r7, #12
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <controlOLED+0xdc>)
 800179a:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <controlOLED+0xd8>)
 800179c:	211a      	movs	r1, #26
 800179e:	f006 f95f 	bl	8007a60 <snprintf>
					break;
 80017a2:	e00f      	b.n	80017c4 <controlOLED+0x8c>
					snprintf (stringBuffer, sizeof(stringBuffer), "%s",
 80017a4:	f107 000c 	add.w	r0, r7, #12
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <controlOLED+0xe0>)
 80017aa:	4a19      	ldr	r2, [pc, #100]	; (8001810 <controlOLED+0xd8>)
 80017ac:	211a      	movs	r1, #26
 80017ae:	f006 f957 	bl	8007a60 <snprintf>
					break;
 80017b2:	e007      	b.n	80017c4 <controlOLED+0x8c>
					snprintf (stringBuffer, sizeof(stringBuffer), "%s", "");
 80017b4:	f107 000c 	add.w	r0, r7, #12
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <controlOLED+0xe4>)
 80017ba:	4a15      	ldr	r2, [pc, #84]	; (8001810 <controlOLED+0xd8>)
 80017bc:	211a      	movs	r1, #26
 80017be:	f006 f94f 	bl	8007a60 <snprintf>
					break;
 80017c2:	bf00      	nop
			ssd1331_clear_screen (BLACK);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 ff66 	bl	8002696 <ssd1331_clear_screen>
			ssd1331_display_string (0, 2, "Transaction Failed", FONT_1206, RED);
 80017ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	230c      	movs	r3, #12
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <controlOLED+0xe8>)
 80017d4:	2102      	movs	r1, #2
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 ff14 	bl	8002604 <ssd1331_display_string>
			ssd1331_display_string (0, 18, stringBuffer, FONT_1206, BLUE);
 80017dc:	f107 020c 	add.w	r2, r7, #12
 80017e0:	231f      	movs	r3, #31
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	230c      	movs	r3, #12
 80017e6:	2112      	movs	r1, #18
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 ff0b 	bl	8002604 <ssd1331_display_string>
			controlLEDSpeaker (iTransactionState);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff4b 	bl	800168c <controlLEDSpeaker>
			ssd1331_clear_screen (BLACK);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 ff4d 	bl	8002696 <ssd1331_clear_screen>
			displayWelcome ();
 80017fc:	f7ff ff20 	bl	8001640 <displayWelcome>
			break;
 8001800:	bf00      	nop
		}
	}
}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08010bd0 	.word	0x08010bd0
 8001810:	08010bdc 	.word	0x08010bdc
 8001814:	08010be0 	.word	0x08010be0
 8001818:	08010bf4 	.word	0x08010bf4
 800181c:	08010c04 	.word	0x08010c04
 8001820:	08010c08 	.word	0x08010c08

08001824 <displayAmount>:
 * DESCRIPTION   : clears the OLED display and displays
 *					the $amount received on line 1 of the display
 *******************************************************************************
 */
void displayAmount(float amount)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	; 0x30
 8001828:	af02      	add	r7, sp, #8
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
	char stringBuffer[STRING_BUFF_LEN_MAX] = { 0 };
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	829a      	strh	r2, [r3, #20]

	ssd1331_clear_screen (BLACK);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 ff26 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "$%.2f", amount);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7fe fe8c 	bl	8000568 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	f107 000c 	add.w	r0, r7, #12
 8001858:	e9cd 2300 	strd	r2, r3, [sp]
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <displayAmount+0x5c>)
 800185e:	211a      	movs	r1, #26
 8001860:	f006 f8fe 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1206, WHITE);
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	230c      	movs	r3, #12
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fec6 	bl	8002604 <ssd1331_display_string>
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	08010c1c 	.word	0x08010c1c

08001884 <checkIfAmountRecd>:
 * DESCRIPTION   : Checks that does user entered amount or not
 *
 *******************************************************************************
 */
float checkIfAmountRecd()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	float debitAmount = 0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	603b      	str	r3, [r7, #0]

	int16_t result = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	80fb      	strh	r3, [r7, #6]

	printf ("waiting for debitAmount to be received on serial port\r\n"); //}
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <checkIfAmountRecd+0x44>)
 8001896:	f006 f8c9 	bl	8007a2c <puts>
	result = scanf ("%f", &debitAmount);
 800189a:	463b      	mov	r3, r7
 800189c:	4619      	mov	r1, r3
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <checkIfAmountRecd+0x48>)
 80018a0:	f006 f8cc 	bl	8007a3c <scanf>
 80018a4:	4603      	mov	r3, r0
 80018a6:	80fb      	strh	r3, [r7, #6]
	if (result == 0)		//then somehow non-float chars were entered
 80018a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <checkIfAmountRecd+0x32>
	{						//and nothing was assigned to %f
		return 0;
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e000      	b.n	80018b8 <checkIfAmountRecd+0x34>
	}
	return debitAmount;
 80018b6:	683b      	ldr	r3, [r7, #0]
}
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb0 0a67 	vmov.f32	s0, s15
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	08010c24 	.word	0x08010c24
 80018cc:	08010c5c 	.word	0x08010c5c

080018d0 <checkOkOrCancel>:
 * 				button has been pressed.
 *
 *******************************************************************************
 */
pushButton_e checkOkOrCancel(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	if (deBounceReadPin (cancelPbPin, 'A', 10) == 0)
 80018d4:	2304      	movs	r3, #4
 80018d6:	220a      	movs	r2, #10
 80018d8:	2141      	movs	r1, #65	; 0x41
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fc4e 	bl	800117c <deBounceReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <checkOkOrCancel+0x1a>
	{
		//then the cancel pushbutton has been pressed
		return PUSHBUTTON_CANCEL;
 80018e6:	2304      	movs	r3, #4
 80018e8:	e00b      	b.n	8001902 <checkOkOrCancel+0x32>
	}
	else if (deBounceReadPin (okPbPin, 'A', 10) == 0)
 80018ea:	2303      	movs	r3, #3
 80018ec:	220a      	movs	r2, #10
 80018ee:	2141      	movs	r1, #65	; 0x41
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc43 	bl	800117c <deBounceReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <checkOkOrCancel+0x30>
	{
		//then ok pressed
		return PUSHBUTTON_OKAY;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e000      	b.n	8001902 <checkOkOrCancel+0x32>
	}
	return PUSHBUTTON_NONE; //as ok or cancel was not pressed.
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	bd80      	pop	{r7, pc}

08001906 <checkSavingsOrChequing>:
 * DESCRIPTION   : Checks whether the chequing or Savings button has been pressed.
 *
 *******************************************************************************
 */
pushButton_e checkSavingsOrChequing(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
	if (deBounceReadPin (chequingPbPin, 'A', 10) == 0)
 800190a:	2300      	movs	r3, #0
 800190c:	220a      	movs	r2, #10
 800190e:	2141      	movs	r1, #65	; 0x41
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fc33 	bl	800117c <deBounceReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <checkSavingsOrChequing+0x1a>
	{
		return PUSHBUTTON_CHEQUING;		//then the chequing pushbutton has been pressed
 800191c:	2301      	movs	r3, #1
 800191e:	e016      	b.n	800194e <checkSavingsOrChequing+0x48>
	}

	else if (deBounceReadPin (savingsPbPin, 'A', 10) == 0)
 8001920:	2301      	movs	r3, #1
 8001922:	220a      	movs	r2, #10
 8001924:	2141      	movs	r1, #65	; 0x41
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fc28 	bl	800117c <deBounceReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <checkSavingsOrChequing+0x30>
	{
		return PUSHBUTTON_SAVINGS;				//then savings pressed
 8001932:	2302      	movs	r3, #2
 8001934:	e00b      	b.n	800194e <checkSavingsOrChequing+0x48>
	}
	else if (deBounceReadPin (cancelPbPin, 'A', 20) == 0)
 8001936:	2304      	movs	r3, #4
 8001938:	2214      	movs	r2, #20
 800193a:	2141      	movs	r1, #65	; 0x41
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fc1d 	bl	800117c <deBounceReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <checkSavingsOrChequing+0x46>
	{
		return PUSHBUTTON_CANCEL;			//then the cancel pushbutton has been pressed
 8001948:	2304      	movs	r3, #4
 800194a:	e000      	b.n	800194e <checkSavingsOrChequing+0x48>
	}
	return PUSHBUTTON_NONE; 					//as chequing or savings was not pressed.
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <displayEnterPin>:
 * DESCRIPTION   : displays "Enter the Pin" on line 2 of OLED
 *
 *******************************************************************************
 */
void displayEnterPin(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af02      	add	r7, sp, #8
	ssd1331_clear_screen (BLACK);
 800195a:	2000      	movs	r0, #0
 800195c:	f000 fe9b 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, 25, "Enter the PIN");
 8001960:	4a09      	ldr	r2, [pc, #36]	; (8001988 <displayEnterPin+0x34>)
 8001962:	2119      	movs	r1, #25
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <displayEnterPin+0x38>)
 8001966:	f006 f87b 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 10, stringBuffer, FONT_1206, WHITE);
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	230c      	movs	r3, #12
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <displayEnterPin+0x38>)
 8001974:	210a      	movs	r1, #10
 8001976:	2000      	movs	r0, #0
 8001978:	f000 fe44 	bl	8002604 <ssd1331_display_string>
	HAL_Delay (100);
 800197c:	2064      	movs	r0, #100	; 0x64
 800197e:	f001 fadd 	bl	8002f3c <HAL_Delay>
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	08010c60 	.word	0x08010c60
 800198c:	200006f0 	.word	0x200006f0

08001990 <displayTransactionSuccessFull>:
 * DESCRIPTION   : displays "transaction is cancelled" on line 2 of OLED
 *
 *******************************************************************************
 */
void displayTransactionSuccessFull()
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af02      	add	r7, sp, #8
	char stringBuffer[STRING_BUFF_LEN_MAX] = { 0 };
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	829a      	strh	r2, [r3, #20]
	uint8_t tIdx = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	77fb      	strb	r3, [r7, #31]

	ssd1331_clear_screen (BLACK);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 fe70 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, 25, "Transaction is approved");
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4a5c      	ldr	r2, [pc, #368]	; (8001b2c <displayTransactionSuccessFull+0x19c>)
 80019ba:	2119      	movs	r1, #25
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 f84f 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 10, stringBuffer, FONT_1206, GREEN);
 80019c2:	1d3a      	adds	r2, r7, #4
 80019c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	230c      	movs	r3, #12
 80019cc:	210a      	movs	r1, #10
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 fe18 	bl	8002604 <ssd1331_display_string>

	controlLEDSpeaker (TRANSACTION_STATE_SUCCESS);
 80019d4:	2005      	movs	r0, #5
 80019d6:	f7ff fe59 	bl	800168c <controlLEDSpeaker>

	ssd1331_clear_screen (BLACK);
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 fe5b 	bl	8002696 <ssd1331_clear_screen>
	displayRaminingBalance ();
 80019e0:	f000 f8da 	bl	8001b98 <displayRaminingBalance>

	pbPressed = checkOkOrCancel ();
 80019e4:	f7ff ff74 	bl	80018d0 <checkOkOrCancel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <displayTransactionSuccessFull+0x1a0>)
 80019ee:	701a      	strb	r2, [r3, #0]
	pbPressed = PUSHBUTTON_OKAY;
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <displayTransactionSuccessFull+0x1a0>)
 80019f2:	2203      	movs	r2, #3
 80019f4:	701a      	strb	r2, [r3, #0]

	if (pbPressed != PUSHBUTTON_NONE)
 80019f6:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <displayTransactionSuccessFull+0x1a0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d072      	beq.n	8001ae4 <displayTransactionSuccessFull+0x154>
	{
		if (pbPressed == PUSHBUTTON_CANCEL)
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <displayTransactionSuccessFull+0x1a0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d103      	bne.n	8001a0e <displayTransactionSuccessFull+0x7e>
		{
			//then cancel was pressed.
			printf ("Cancel Pressed\r\n");
 8001a06:	484b      	ldr	r0, [pc, #300]	; (8001b34 <displayTransactionSuccessFull+0x1a4>)
 8001a08:	f006 f810 	bl	8007a2c <puts>
 8001a0c:	e06a      	b.n	8001ae4 <displayTransactionSuccessFull+0x154>
		}
		else if (pbPressed == PUSHBUTTON_OKAY)
 8001a0e:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <displayTransactionSuccessFull+0x1a0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d166      	bne.n	8001ae4 <displayTransactionSuccessFull+0x154>
		{
			memset (stringBuffer, 0, sizeof(stringBuffer));
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	221a      	movs	r2, #26
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 f896 	bl	8007b4e <memset>
			//then ok pressed
			printf ("OK Pressed\r\n");
 8001a22:	4845      	ldr	r0, [pc, #276]	; (8001b38 <displayTransactionSuccessFull+0x1a8>)
 8001a24:	f006 f802 	bl	8007a2c <puts>
			ssd1331_clear_screen (BLACK);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 fe34 	bl	8002696 <ssd1331_clear_screen>

			ssd1331_clear_screen (BLACK);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 fe31 	bl	8002696 <ssd1331_clear_screen>
			tIdx = snprintf (stringBuffer, sizeof(stringBuffer), "%s", "Balance.:$");
 8001a34:	1d38      	adds	r0, r7, #4
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <displayTransactionSuccessFull+0x1ac>)
 8001a38:	4a41      	ldr	r2, [pc, #260]	; (8001b40 <displayTransactionSuccessFull+0x1b0>)
 8001a3a:	211a      	movs	r1, #26
 8001a3c:	f006 f810 	bl	8007a60 <snprintf>
 8001a40:	4603      	mov	r3, r0
 8001a42:	77fb      	strb	r3, [r7, #31]
			if (isChequingSaving == PUSHBUTTON_CHEQUING)
 8001a44:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <displayTransactionSuccessFull+0x1b4>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11e      	bne.n	8001a8a <displayTransactionSuccessFull+0xfa>
			{
				snprintf (stringBuffer + tIdx, sizeof(stringBuffer) - tIdx, "%.1f",
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
 8001a4e:	1d3a      	adds	r2, r7, #4
 8001a50:	18d4      	adds	r4, r2, r3
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
 8001a54:	f1c3 051a 	rsb	r5, r3, #26
 8001a58:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <displayTransactionSuccessFull+0x1b8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fd83 	bl	8000568 <__aeabi_f2d>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9cd 2300 	strd	r2, r3, [sp]
 8001a6a:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <displayTransactionSuccessFull+0x1bc>)
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f005 fff6 	bl	8007a60 <snprintf>
				          chequingBalance);
				printf ("chequingBalance = %f\r\n", chequingBalance);
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <displayTransactionSuccessFull+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd75 	bl	8000568 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4833      	ldr	r0, [pc, #204]	; (8001b50 <displayTransactionSuccessFull+0x1c0>)
 8001a84:	f005 ff7a 	bl	800797c <printf>
 8001a88:	e021      	b.n	8001ace <displayTransactionSuccessFull+0x13e>
			}
			else if (isChequingSaving == PUSHBUTTON_SAVINGS)
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <displayTransactionSuccessFull+0x1b4>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11d      	bne.n	8001ace <displayTransactionSuccessFull+0x13e>
			{
				snprintf (stringBuffer + tIdx, sizeof(stringBuffer) - tIdx, "%.1f",
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
 8001a94:	1d3a      	adds	r2, r7, #4
 8001a96:	18d4      	adds	r4, r2, r3
 8001a98:	7ffb      	ldrb	r3, [r7, #31]
 8001a9a:	f1c3 051a 	rsb	r5, r3, #26
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <displayTransactionSuccessFull+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd60 	bl	8000568 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9cd 2300 	strd	r2, r3, [sp]
 8001ab0:	4a26      	ldr	r2, [pc, #152]	; (8001b4c <displayTransactionSuccessFull+0x1bc>)
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f005 ffd3 	bl	8007a60 <snprintf>
				          savingBalance);
				printf ("savingBalance = %f\r\n", savingBalance);
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <displayTransactionSuccessFull+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd52 	bl	8000568 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <displayTransactionSuccessFull+0x1c8>)
 8001aca:	f005 ff57 	bl	800797c <printf>
			}
			ssd1331_display_string (0, 0, stringBuffer, FONT_1206, PURPLE);
 8001ace:	1d3a      	adds	r2, r7, #4
 8001ad0:	f24a 131e 	movw	r3, #41246	; 0xa11e
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 fd92 	bl	8002604 <ssd1331_display_string>
			tIdx = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	77fb      	strb	r3, [r7, #31]
		}
	}

	HAL_Delay (2000);
 8001ae4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ae8:	f001 fa28 	bl	8002f3c <HAL_Delay>
	ssd1331_clear_screen (BLACK);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 fdd2 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, 25, "Thank you");
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <displayTransactionSuccessFull+0x1cc>)
 8001af6:	2119      	movs	r1, #25
 8001af8:	4618      	mov	r0, r3
 8001afa:	f005 ffb1 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 10, stringBuffer, FONT_1206, WHITE);
 8001afe:	1d3a      	adds	r2, r7, #4
 8001b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	230c      	movs	r3, #12
 8001b08:	210a      	movs	r1, #10
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 fd7a 	bl	8002604 <ssd1331_display_string>
	HAL_Delay (2000);
 8001b10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b14:	f001 fa12 	bl	8002f3c <HAL_Delay>
	ssd1331_clear_screen (BLACK);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 fdbc 	bl	8002696 <ssd1331_clear_screen>
	displayWelcome ();
 8001b1e:	f7ff fd8f 	bl	8001640 <displayWelcome>
}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	08010c70 	.word	0x08010c70
 8001b30:	200008f5 	.word	0x200008f5
 8001b34:	08010c88 	.word	0x08010c88
 8001b38:	08010c98 	.word	0x08010c98
 8001b3c:	08010ca4 	.word	0x08010ca4
 8001b40:	08010bdc 	.word	0x08010bdc
 8001b44:	200008f6 	.word	0x200008f6
 8001b48:	20000004 	.word	0x20000004
 8001b4c:	08010cb0 	.word	0x08010cb0
 8001b50:	08010cb8 	.word	0x08010cb8
 8001b54:	20000008 	.word	0x20000008
 8001b58:	08010cd0 	.word	0x08010cd0
 8001b5c:	08010ce8 	.word	0x08010ce8

08001b60 <displaySavingsChequing>:
 * DESCRIPTION   : displays "Savings or Chequing?" on line 2 of OLED
 *
 *******************************************************************************
 */
void displaySavingsChequing(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af02      	add	r7, sp, #8
	ssd1331_clear_screen (BLACK);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f000 fd95 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "Savings or Chequing?");
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <displaySavingsChequing+0x30>)
 8001b6e:	211a      	movs	r1, #26
 8001b70:	4808      	ldr	r0, [pc, #32]	; (8001b94 <displaySavingsChequing+0x34>)
 8001b72:	f005 ff75 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 10, stringBuffer, FONT_1206, WHITE);
 8001b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <displaySavingsChequing+0x34>)
 8001b80:	210a      	movs	r1, #10
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 fd3e 	bl	8002604 <ssd1331_display_string>
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	08010cf4 	.word	0x08010cf4
 8001b94:	200006f0 	.word	0x200006f0

08001b98 <displayRaminingBalance>:
 * DESCRIPTION   : displays "Show available balance?" on line 1 of OLED
 *
 *******************************************************************************
 */
void displayRaminingBalance(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af02      	add	r7, sp, #8
	ssd1331_clear_screen (BLACK);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 fd79 	bl	8002696 <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "Show available balance?");
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <displayRaminingBalance+0x38>)
 8001ba6:	211a      	movs	r1, #26
 8001ba8:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <displayRaminingBalance+0x3c>)
 8001baa:	f005 ff59 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 2, stringBuffer, FONT_1206, CYAN);
 8001bae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <displayRaminingBalance+0x3c>)
 8001bb8:	2102      	movs	r1, #2
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 fd22 	bl	8002604 <ssd1331_display_string>
	HAL_Delay (1000);
 8001bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc4:	f001 f9ba 	bl	8002f3c <HAL_Delay>

}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	08010d0c 	.word	0x08010d0c
 8001bd4:	200006f0 	.word	0x200006f0

08001bd8 <validatePin>:
 * DESCRIPTION   : check the pin entered and compare with globally defined PIN
 *
 *******************************************************************************
 */
void validatePin(char *userEnteredPIN)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	scanf ("%s", userEnteredPIN);
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4813      	ldr	r0, [pc, #76]	; (8001c30 <validatePin+0x58>)
 8001be4:	f005 ff2a 	bl	8007a3c <scanf>
	printf ("Entered PIN is %s\r\n", userEnteredPIN);
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4812      	ldr	r0, [pc, #72]	; (8001c34 <validatePin+0x5c>)
 8001bec:	f005 fec6 	bl	800797c <printf>
	for (int i = 0; i < 10; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e013      	b.n	8001c1e <validatePin+0x46>
	{
		if (strcmp (userEnteredPIN, PIN[i]) == 0)
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	4a0e      	ldr	r2, [pc, #56]	; (8001c38 <validatePin+0x60>)
 8001c00:	4413      	add	r3, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7fe fae3 	bl	80001d0 <strcmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d103      	bne.n	8001c18 <validatePin+0x40>
		{
			isAccessGranted = 1;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <validatePin+0x64>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
			break;
 8001c16:	e006      	b.n	8001c26 <validatePin+0x4e>
	for (int i = 0; i < 10; i++)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b09      	cmp	r3, #9
 8001c22:	dde8      	ble.n	8001bf6 <validatePin+0x1e>
		}
	}
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08010bdc 	.word	0x08010bdc
 8001c34:	08010d24 	.word	0x08010d24
 8001c38:	08011838 	.word	0x08011838
 8001c3c:	200006ed 	.word	0x200006ed

08001c40 <WaitforResponse>:
 * DESCRIPTION   : wait for response from the bank and print message based on that
 *
 *******************************************************************************
 */
transactionState_e WaitforResponse(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	if (isAccessGranted == 1)					//transaction approved i.e pin is correct
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <WaitforResponse+0x28>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <WaitforResponse+0x16>
	{
		printf ("transaction is approved\r\n");
 8001c4c:	4807      	ldr	r0, [pc, #28]	; (8001c6c <WaitforResponse+0x2c>)
 8001c4e:	f005 feed 	bl	8007a2c <puts>
		return TRANSACTION_STATE_SUCCESS;
 8001c52:	2305      	movs	r3, #5
 8001c54:	e006      	b.n	8001c64 <WaitforResponse+0x24>

	}
	else										//transaction denied i.e pin is incorrect
	{
		transactionFailCause = TRANSACTION_FAIL_INVALID_PIN;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <WaitforResponse+0x30>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
		printf ("transaction is denied\r\n");
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <WaitforResponse+0x34>)
 8001c5e:	f005 fee5 	bl	8007a2c <puts>
		return TRANSACTION_STATE_FAILED;
 8001c62:	2306      	movs	r3, #6
	}
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200006ed 	.word	0x200006ed
 8001c6c:	08010d38 	.word	0x08010d38
 8001c70:	20000000 	.word	0x20000000
 8001c74:	08010d54 	.word	0x08010d54

08001c78 <displayOkCancel>:
 * DESCRIPTION   : displays "OK or Cancel?" on line 2 of OLED
 *
 *******************************************************************************
 */
void displayOkCancel(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
	snprintf (stringBuffer, 16, "OK or Cancel?");
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <displayOkCancel+0x3c>)
 8001c90:	2110      	movs	r1, #16
 8001c92:	4618      	mov	r0, r3
 8001c94:	f005 fee4 	bl	8007a60 <snprintf>
	ssd1331_display_string (0, 10, stringBuffer, FONT_1206, WHITE);
 8001c98:	463a      	mov	r2, r7
 8001c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	210a      	movs	r1, #10
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f000 fcad 	bl	8002604 <ssd1331_display_string>
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08010d6c 	.word	0x08010d6c

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbc:	f001 f8c9 	bl	8002e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc0:	f000 f94e 	bl	8001f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc4:	f000 fb34 	bl	8002330 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cc8:	f000 fb02 	bl	80022d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001ccc:	f000 fa4c 	bl	8002168 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001cd0:	f000 fa0c 	bl	80020ec <MX_SPI1_Init>
  MX_TIM16_Init();
 8001cd4:	f000 fad6 	bl	8002284 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001cd8:	f000 f9a4 	bl	8002024 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	// initialize the OLED
	ssd1331_init ();
 8001cdc:	f000 fd00 	bl	80026e0 <ssd1331_init>

	/* setup Port A bits 0,1,2 and 3, i.e.: PA0-PA3 for input */
	pushButtonInit ();
 8001ce0:	f7ff fc92 	bl	8001608 <pushButtonInit>
	startUpOLEDSplashScreen ();
 8001ce4:	f7ff fc6a 	bl	80015bc <startUpOLEDSplashScreen>
	HAL_Delay (1000);
 8001ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cec:	f001 f926 	bl	8002f3c <HAL_Delay>
	displayWelcome ();
 8001cf0:	f7ff fca6 	bl	8001640 <displayWelcome>
	HAL_Delay (1000);
 8001cf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf8:	f001 f920 	bl	8002f3c <HAL_Delay>
		 5   Pin Correct, send transaction data to bank. Waiting
		 for OK back from Bank If OK from Bank received. Print
		 Receipt, Record transaction. Move back to State 1.
		 6   Cancel Pressed. Display "Transaction Cancelled" back to state 1
		 */
		switch (transactionState)
 8001cfc:	4b89      	ldr	r3, [pc, #548]	; (8001f24 <main+0x26c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b06      	cmp	r3, #6
 8001d02:	f200 8107 	bhi.w	8001f14 <main+0x25c>
 8001d06:	a201      	add	r2, pc, #4	; (adr r2, 8001d0c <main+0x54>)
 8001d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0c:	08001d29 	.word	0x08001d29
 8001d10:	08001d69 	.word	0x08001d69
 8001d14:	08001db7 	.word	0x08001db7
 8001d18:	08001e5f 	.word	0x08001e5f
 8001d1c:	08001e91 	.word	0x08001e91
 8001d20:	08001eab 	.word	0x08001eab
 8001d24:	08001efd 	.word	0x08001efd
		{
			case TRANSACTION_STATE_WELCOME: 	//checking if an amount has been received
			{
				printf ("\033[0H\033[0J");
 8001d28:	487f      	ldr	r0, [pc, #508]	; (8001f28 <main+0x270>)
 8001d2a:	f005 fe27 	bl	800797c <printf>
				amount = checkIfAmountRecd ();
 8001d2e:	f7ff fda9 	bl	8001884 <checkIfAmountRecd>
 8001d32:	eef0 7a40 	vmov.f32	s15, s0
 8001d36:	4b7d      	ldr	r3, [pc, #500]	; (8001f2c <main+0x274>)
 8001d38:	edc3 7a00 	vstr	s15, [r3]
				if (amount != 0)        //returns a 0 if an transaction amount has
 8001d3c:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <main+0x274>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	f000 80e5 	beq.w	8001f18 <main+0x260>
				{ 						//NOT been received on the serial port.
					displayAmount (amount); //but if we're we've received a debitAmount
 8001d4e:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <main+0x274>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	f7ff fd64 	bl	8001824 <displayAmount>
					displayOkCancel ();	//so display it and the prompt ok or cancel
 8001d5c:	f7ff ff8c 	bl	8001c78 <displayOkCancel>
					transactionState = TRANSACTION_STATE_OK_CANCEL;	//and do that before we move on to state 2
 8001d60:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <main+0x26c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001d66:	e0d7      	b.n	8001f18 <main+0x260>
			}

			case TRANSACTION_STATE_OK_CANCEL: 		//amount has been received waiting for
			{
				pbPressed = checkOkOrCancel ();
 8001d68:	f7ff fdb2 	bl	80018d0 <checkOkOrCancel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <main+0x278>)
 8001d72:	701a      	strb	r2, [r3, #0]

				if (pbPressed != PUSHBUTTON_NONE)
 8001d74:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <main+0x278>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80cf 	beq.w	8001f1c <main+0x264>
				{
					if (pbPressed == PUSHBUTTON_CANCEL)
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <main+0x278>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d109      	bne.n	8001d9a <main+0xe2>
					{
						//then cancel was pressed.
						printf ("Cancel Pressed\r\n");
 8001d86:	486b      	ldr	r0, [pc, #428]	; (8001f34 <main+0x27c>)
 8001d88:	f005 fe50 	bl	8007a2c <puts>
						transactionState = TRANSACTION_STATE_FAILED;
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <main+0x26c>)
 8001d8e:	2206      	movs	r2, #6
 8001d90:	701a      	strb	r2, [r3, #0]
						transactionFailCause = TRANSACTION_FAIL_USER_CALCELLED;
 8001d92:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <main+0x280>)
 8001d94:	2203      	movs	r2, #3
 8001d96:	701a      	strb	r2, [r3, #0]
						displaySavingsChequing ();
						transactionState = TRANSACTION_STATE_CHEQ_OR_SAVING;

					}
				}
				break;
 8001d98:	e0c0      	b.n	8001f1c <main+0x264>
					else if (pbPressed == PUSHBUTTON_OKAY)
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <main+0x278>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	f040 80bc 	bne.w	8001f1c <main+0x264>
						printf ("OK Pressed\r\n");
 8001da4:	4865      	ldr	r0, [pc, #404]	; (8001f3c <main+0x284>)
 8001da6:	f005 fe41 	bl	8007a2c <puts>
						displaySavingsChequing ();
 8001daa:	f7ff fed9 	bl	8001b60 <displaySavingsChequing>
						transactionState = TRANSACTION_STATE_CHEQ_OR_SAVING;
 8001dae:	4b5d      	ldr	r3, [pc, #372]	; (8001f24 <main+0x26c>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
				break;
 8001db4:	e0b2      	b.n	8001f1c <main+0x264>
			}

			case TRANSACTION_STATE_CHEQ_OR_SAVING:
			{
				isChequingSaving = checkSavingsOrChequing ();
 8001db6:	f7ff fda6 	bl	8001906 <checkSavingsOrChequing>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b60      	ldr	r3, [pc, #384]	; (8001f40 <main+0x288>)
 8001dc0:	701a      	strb	r2, [r3, #0]

				if (isChequingSaving != PUSHBUTTON_NONE)
 8001dc2:	4b5f      	ldr	r3, [pc, #380]	; (8001f40 <main+0x288>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80aa 	beq.w	8001f20 <main+0x268>
				{
					if (isChequingSaving == PUSHBUTTON_CHEQUING)
 8001dcc:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <main+0x288>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d11a      	bne.n	8001e0a <main+0x152>
					{
						if (chequingBalance - amount <= 0.0) // Check that user has sufficient fund in chequing account
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <main+0x28c>)
 8001dd6:	ed93 7a00 	vldr	s14, [r3]
 8001dda:	4b54      	ldr	r3, [pc, #336]	; (8001f2c <main+0x274>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d806      	bhi.n	8001dfc <main+0x144>
						{
							transactionState = TRANSACTION_STATE_FAILED;
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <main+0x26c>)
 8001df0:	2206      	movs	r2, #6
 8001df2:	701a      	strb	r2, [r3, #0]
							transactionFailCause = TRANSACTION_FAIL_INSUFICIENT_BALANCE;
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <main+0x280>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	701a      	strb	r2, [r3, #0]
							break;
 8001dfa:	e092      	b.n	8001f22 <main+0x26a>
						}
						printf ("chequing Pressed\r\n");	//then chequing was pressed.
 8001dfc:	4852      	ldr	r0, [pc, #328]	; (8001f48 <main+0x290>)
 8001dfe:	f005 fe15 	bl	8007a2c <puts>
						transactionState = TRANSACTION_STATE_RECEIVE_PIN;
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <main+0x26c>)
 8001e04:	2203      	movs	r2, #3
 8001e06:	701a      	strb	r2, [r3, #0]
					{
						printf ("Cancel Pressed\r\n");			//then cancel was pressed.
						transactionState = TRANSACTION_STATE_FAILED;
					}
				}
				break;
 8001e08:	e08a      	b.n	8001f20 <main+0x268>
					else if (isChequingSaving == PUSHBUTTON_SAVINGS)
 8001e0a:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <main+0x288>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d11a      	bne.n	8001e48 <main+0x190>
						if (savingBalance - amount <= 0.0) // Check that user has sufficient fund in saving account
 8001e12:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <main+0x294>)
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <main+0x274>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2a:	d806      	bhi.n	8001e3a <main+0x182>
							transactionState = TRANSACTION_STATE_FAILED;
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <main+0x26c>)
 8001e2e:	2206      	movs	r2, #6
 8001e30:	701a      	strb	r2, [r3, #0]
							transactionFailCause = TRANSACTION_FAIL_INSUFICIENT_BALANCE;
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <main+0x280>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	701a      	strb	r2, [r3, #0]
							break;
 8001e38:	e073      	b.n	8001f22 <main+0x26a>
						printf ("savings Pressed\r\n");				//then savings pressed
 8001e3a:	4845      	ldr	r0, [pc, #276]	; (8001f50 <main+0x298>)
 8001e3c:	f005 fdf6 	bl	8007a2c <puts>
						transactionState = TRANSACTION_STATE_RECEIVE_PIN;
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <main+0x26c>)
 8001e42:	2203      	movs	r2, #3
 8001e44:	701a      	strb	r2, [r3, #0]
				break;
 8001e46:	e06b      	b.n	8001f20 <main+0x268>
					else if (isChequingSaving == PUSHBUTTON_CANCEL)
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <main+0x288>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d167      	bne.n	8001f20 <main+0x268>
						printf ("Cancel Pressed\r\n");			//then cancel was pressed.
 8001e50:	4838      	ldr	r0, [pc, #224]	; (8001f34 <main+0x27c>)
 8001e52:	f005 fdeb 	bl	8007a2c <puts>
						transactionState = TRANSACTION_STATE_FAILED;
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <main+0x26c>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	701a      	strb	r2, [r3, #0]
				break;
 8001e5c:	e060      	b.n	8001f20 <main+0x268>
			}

			case TRANSACTION_STATE_RECEIVE_PIN:
			{
				printf ("Enter the PIN\r\n");
 8001e5e:	483d      	ldr	r0, [pc, #244]	; (8001f54 <main+0x29c>)
 8001e60:	f005 fde4 	bl	8007a2c <puts>

				displayEnterPin ();
 8001e64:	f7ff fd76 	bl	8001954 <displayEnterPin>
				pbPressed = checkOkOrCancel ();
 8001e68:	f7ff fd32 	bl	80018d0 <checkOkOrCancel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <main+0x278>)
 8001e72:	701a      	strb	r2, [r3, #0]
				if (pbPressed == PUSHBUTTON_CANCEL)
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <main+0x278>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d105      	bne.n	8001e88 <main+0x1d0>
				{
					//then cancel was pressed.
					printf ("Cancel Pressed\r\n");
 8001e7c:	482d      	ldr	r0, [pc, #180]	; (8001f34 <main+0x27c>)
 8001e7e:	f005 fdd5 	bl	8007a2c <puts>
					transactionState = TRANSACTION_STATE_FAILED;
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <main+0x26c>)
 8001e84:	2206      	movs	r2, #6
 8001e86:	701a      	strb	r2, [r3, #0]
				}
				transactionState = TRANSACTION_STATE_VALIDATE_PIN;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <main+0x26c>)
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	701a      	strb	r2, [r3, #0]
				break;
 8001e8e:	e048      	b.n	8001f22 <main+0x26a>
			}

			case TRANSACTION_STATE_VALIDATE_PIN:
			{
				validatePin (userEnteredPIN);		//check the pin entered
 8001e90:	4831      	ldr	r0, [pc, #196]	; (8001f58 <main+0x2a0>)
 8001e92:	f7ff fea1 	bl	8001bd8 <validatePin>
				printf ("In validating Pin\r\n");
 8001e96:	4831      	ldr	r0, [pc, #196]	; (8001f5c <main+0x2a4>)
 8001e98:	f005 fdc8 	bl	8007a2c <puts>
				transactionState = WaitforResponse ();	//display message on OLED based on the response received from bank
 8001e9c:	f7ff fed0 	bl	8001c40 <WaitforResponse>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <main+0x26c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
				break;
 8001ea8:	e03b      	b.n	8001f22 <main+0x26a>
			}

			case TRANSACTION_STATE_SUCCESS:
			{
				switch (isChequingSaving)
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <main+0x288>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d002      	beq.n	8001eb8 <main+0x200>
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d00c      	beq.n	8001ed0 <main+0x218>
						savingBalance = savingBalance - amount;	// Deduct the successfully debited amount
						break;
					}
					default:
					{
						break;
 8001eb6:	e017      	b.n	8001ee8 <main+0x230>
						chequingBalance = chequingBalance - amount;	// Deduct the successfully debited amount
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <main+0x28c>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <main+0x274>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <main+0x28c>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
						break;
 8001ece:	e00b      	b.n	8001ee8 <main+0x230>
						savingBalance = savingBalance - amount;	// Deduct the successfully debited amount
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <main+0x294>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <main+0x274>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <main+0x294>)
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
						break;
 8001ee6:	bf00      	nop
					}
				}

				controlOLED (transactionState, TRANSACTION_SUCCESSFULL);
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <main+0x26c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc22 	bl	8001738 <controlOLED>

				transactionState = TRANSACTION_STATE_WELCOME;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <main+0x26c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
				break;
 8001efa:	e012      	b.n	8001f22 <main+0x26a>
			}
			case TRANSACTION_STATE_FAILED:
			{
				//transaction is cancelled
				controlOLED (transactionState, transactionFailCause);
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <main+0x26c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <main+0x280>)
 8001f02:	7812      	ldrb	r2, [r2, #0]
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc16 	bl	8001738 <controlOLED>
				transactionState = TRANSACTION_STATE_WELCOME;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <main+0x26c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
				break;
 8001f12:	e006      	b.n	8001f22 <main+0x26a>
			}

			default:
			{
				break;
 8001f14:	bf00      	nop
 8001f16:	e6f1      	b.n	8001cfc <main+0x44>
				break;
 8001f18:	bf00      	nop
 8001f1a:	e6ef      	b.n	8001cfc <main+0x44>
				break;
 8001f1c:	bf00      	nop
 8001f1e:	e6ed      	b.n	8001cfc <main+0x44>
				break;
 8001f20:	bf00      	nop
	{
 8001f22:	e6eb      	b.n	8001cfc <main+0x44>
 8001f24:	200008f4 	.word	0x200008f4
 8001f28:	08010d7c 	.word	0x08010d7c
 8001f2c:	200008f8 	.word	0x200008f8
 8001f30:	200008f5 	.word	0x200008f5
 8001f34:	08010c88 	.word	0x08010c88
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	08010c98 	.word	0x08010c98
 8001f40:	200008f6 	.word	0x200008f6
 8001f44:	20000004 	.word	0x20000004
 8001f48:	08010d88 	.word	0x08010d88
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	08010d9c 	.word	0x08010d9c
 8001f54:	08010db0 	.word	0x08010db0
 8001f58:	200006e8 	.word	0x200006e8
 8001f5c:	08010dc0 	.word	0x08010dc0

08001f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b096      	sub	sp, #88	; 0x58
 8001f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	2244      	movs	r2, #68	; 0x44
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f005 fded 	bl	8007b4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f74:	463b      	mov	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f86:	f002 f94b 	bl	8004220 <HAL_PWREx_ControlVoltageScaling>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001f90:	f000 fa4a 	bl	8002428 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f94:	f002 f926 	bl	80041e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f98:	4b21      	ldr	r3, [pc, #132]	; (8002020 <SystemClock_Config+0xc0>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a20      	ldr	r2, [pc, #128]	; (8002020 <SystemClock_Config+0xc0>)
 8001fa0:	f023 0318 	bic.w	r3, r3, #24
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001fa8:	2314      	movs	r3, #20
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fb8:	2360      	movs	r3, #96	; 0x60
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001fc8:	2310      	movs	r3, #16
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 f975 	bl	80042cc <HAL_RCC_OscConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001fe8:	f000 fa1e 	bl	8002428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fec:	230f      	movs	r3, #15
 8001fee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f002 fd75 	bl	8004af4 <HAL_RCC_ClockConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002010:	f000 fa0a 	bl	8002428 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002014:	f003 f988 	bl	8005328 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002018:	bf00      	nop
 800201a:	3758      	adds	r7, #88	; 0x58
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000

08002024 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800202a:	463b      	mov	r3, r7
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <MX_ADC1_Init+0xc0>)
 800203e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002040:	4b27      	ldr	r3, [pc, #156]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002042:	2200      	movs	r2, #0
 8002044:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800205a:	2204      	movs	r2, #4
 800205c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002060:	2200      	movs	r2, #0
 8002062:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002066:	2200      	movs	r2, #0
 8002068:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800206c:	2201      	movs	r2, #1
 800206e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800207a:	2200      	movs	r2, #0
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002092:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <MX_ADC1_Init+0xbc>)
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209a:	4811      	ldr	r0, [pc, #68]	; (80020e0 <MX_ADC1_Init+0xbc>)
 800209c:	f001 f8fe 	bl	800329c <HAL_ADC_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80020a6:	f000 f9bf 	bl	8002428 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_ADC1_Init+0xc4>)
 80020ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020ae:	2306      	movs	r3, #6
 80020b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020b6:	237f      	movs	r3, #127	; 0x7f
 80020b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020ba:	2304      	movs	r3, #4
 80020bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c2:	463b      	mov	r3, r7
 80020c4:	4619      	mov	r1, r3
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <MX_ADC1_Init+0xbc>)
 80020c8:	f001 fa2a 	bl	8003520 <HAL_ADC_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80020d2:	f000 f9a9 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000070c 	.word	0x2000070c
 80020e4:	50040000 	.word	0x50040000
 80020e8:	2e300800 	.word	0x2e300800

080020ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_SPI1_Init+0x74>)
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <MX_SPI1_Init+0x78>)
 80020f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_SPI1_Init+0x74>)
 80020f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_SPI1_Init+0x74>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <MX_SPI1_Init+0x74>)
 8002106:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800210a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_SPI1_Init+0x74>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <MX_SPI1_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_SPI1_Init+0x74>)
 800211a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_SPI1_Init+0x74>)
 8002122:	2210      	movs	r2, #16
 8002124:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MX_SPI1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <MX_SPI1_Init+0x74>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_SPI1_Init+0x74>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MX_SPI1_Init+0x74>)
 800213a:	2207      	movs	r2, #7
 800213c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <MX_SPI1_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MX_SPI1_Init+0x74>)
 8002146:	2208      	movs	r2, #8
 8002148:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800214a:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_SPI1_Init+0x74>)
 800214c:	f003 f9ee 	bl	800552c <HAL_SPI_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002156:	f000 f967 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000770 	.word	0x20000770
 8002164:	40013000 	.word	0x40013000

08002168 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b096      	sub	sp, #88	; 0x58
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	615a      	str	r2, [r3, #20]
 800218c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	222c      	movs	r2, #44	; 0x2c
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f005 fcda 	bl	8007b4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800219a:	4b38      	ldr	r3, [pc, #224]	; (800227c <MX_TIM1_Init+0x114>)
 800219c:	4a38      	ldr	r2, [pc, #224]	; (8002280 <MX_TIM1_Init+0x118>)
 800219e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <MX_TIM1_Init+0x114>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <MX_TIM1_Init+0x114>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <MX_TIM1_Init+0x114>)
 80021ae:	2264      	movs	r2, #100	; 0x64
 80021b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <MX_TIM1_Init+0x114>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <MX_TIM1_Init+0x114>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <MX_TIM1_Init+0x114>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021c4:	482d      	ldr	r0, [pc, #180]	; (800227c <MX_TIM1_Init+0x114>)
 80021c6:	f003 fd84 	bl	8005cd2 <HAL_TIM_PWM_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80021d0:	f000 f92a 	bl	8002428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021e4:	4619      	mov	r1, r3
 80021e6:	4825      	ldr	r0, [pc, #148]	; (800227c <MX_TIM1_Init+0x114>)
 80021e8:	f004 fc20 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80021f2:	f000 f919 	bl	8002428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f6:	2360      	movs	r3, #96	; 0x60
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021fe:	2300      	movs	r3, #0
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002216:	2200      	movs	r2, #0
 8002218:	4619      	mov	r1, r3
 800221a:	4818      	ldr	r0, [pc, #96]	; (800227c <MX_TIM1_Init+0x114>)
 800221c:	f003 fdb0 	bl	8005d80 <HAL_TIM_PWM_ConfigChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002226:	f000 f8ff 	bl	8002428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800223e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002242:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800224c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <MX_TIM1_Init+0x114>)
 8002260:	f004 fc4a 	bl	8006af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800226a:	f000 f8dd 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <MX_TIM1_Init+0x114>)
 8002270:	f000 fbee 	bl	8002a50 <HAL_TIM_MspPostInit>

}
 8002274:	bf00      	nop
 8002276:	3758      	adds	r7, #88	; 0x58
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200007d4 	.word	0x200007d4
 8002280:	40012c00 	.word	0x40012c00

08002284 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_TIM16_Init+0x44>)
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <MX_TIM16_Init+0x48>)
 800228c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_TIM16_Init+0x44>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_TIM16_Init+0x44>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_TIM16_Init+0x44>)
 800229c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_TIM16_Init+0x44>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_TIM16_Init+0x44>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_TIM16_Init+0x44>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_TIM16_Init+0x44>)
 80022b6:	f003 fcb5 	bl	8005c24 <HAL_TIM_Base_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80022c0:	f000 f8b2 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000820 	.word	0x20000820
 80022cc:	40014400 	.word	0x40014400

080022d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022d6:	4a15      	ldr	r2, [pc, #84]	; (800232c <MX_USART2_UART_Init+0x5c>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_USART2_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_USART2_UART_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002306:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_USART2_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_USART2_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_USART2_UART_Init+0x58>)
 8002314:	f004 fc8d 	bl	8006c32 <HAL_UART_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800231e:	f000 f883 	bl	8002428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000086c 	.word	0x2000086c
 800232c:	40004400 	.word	0x40004400

08002330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a35      	ldr	r2, [pc, #212]	; (8002420 <MX_GPIO_Init+0xf0>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <MX_GPIO_Init+0xf0>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a29      	ldr	r2, [pc, #164]	; (8002420 <MX_GPIO_Init+0xf0>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b27      	ldr	r3, [pc, #156]	; (8002420 <MX_GPIO_Init+0xf0>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin
 800238e:	2200      	movs	r2, #0
 8002390:	21f9      	movs	r1, #249	; 0xf9
 8002392:	4824      	ldr	r0, [pc, #144]	; (8002424 <MX_GPIO_Init+0xf4>)
 8002394:	f001 ff0e 	bl	80041b4 <HAL_GPIO_WritePin>
                          |SSD1331_RES_Pin|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800239e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a2:	f001 ff07 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80023a6:	231b      	movs	r3, #27
 80023a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ae:	2301      	movs	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	4619      	mov	r1, r3
 80023b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023bc:	f001 fd78 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80023c0:	2381      	movs	r3, #129	; 0x81
 80023c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023c8:	2302      	movs	r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	4813      	ldr	r0, [pc, #76]	; (8002424 <MX_GPIO_Init+0xf4>)
 80023d8:	f001 fd6a 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80023dc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80023e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	4619      	mov	r1, r3
 80023f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f8:	f001 fd5a 	bl	8003eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|SSD1331_CS_Pin|SSD1331_DC_Pin|SSD1331_RES_Pin;
 80023fc:	2378      	movs	r3, #120	; 0x78
 80023fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	4619      	mov	r1, r3
 8002412:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_GPIO_Init+0xf4>)
 8002414:	f001 fd4c 	bl	8003eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	48000400 	.word	0x48000400

08002428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	460a      	mov	r2, r1
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	4613      	mov	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 800244e:	2201      	movs	r2, #1
 8002450:	2120      	movs	r1, #32
 8002452:	4811      	ldr	r0, [pc, #68]	; (8002498 <ssd1331_write_byte+0x60>)
 8002454:	f001 feae 	bl	80041b4 <HAL_GPIO_WritePin>
 8002458:	e004      	b.n	8002464 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 800245a:	2200      	movs	r2, #0
 800245c:	2120      	movs	r1, #32
 800245e:	480e      	ldr	r0, [pc, #56]	; (8002498 <ssd1331_write_byte+0x60>)
 8002460:	f001 fea8 	bl	80041b4 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8002464:	2200      	movs	r2, #0
 8002466:	2110      	movs	r1, #16
 8002468:	480b      	ldr	r0, [pc, #44]	; (8002498 <ssd1331_write_byte+0x60>)
 800246a:	f001 fea3 	bl	80041b4 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 800246e:	1df9      	adds	r1, r7, #7
 8002470:	2364      	movs	r3, #100	; 0x64
 8002472:	2201      	movs	r2, #1
 8002474:	4809      	ldr	r0, [pc, #36]	; (800249c <ssd1331_write_byte+0x64>)
 8002476:	f003 f8fc 	bl	8005672 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 800247a:	2201      	movs	r2, #1
 800247c:	2110      	movs	r1, #16
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <ssd1331_write_byte+0x60>)
 8002480:	f001 fe98 	bl	80041b4 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8002484:	2201      	movs	r2, #1
 8002486:	2120      	movs	r1, #32
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <ssd1331_write_byte+0x60>)
 800248a:	f001 fe93 	bl	80041b4 <HAL_GPIO_WritePin>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	48000400 	.word	0x48000400
 800249c:	20000770 	.word	0x20000770

080024a0 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	460b      	mov	r3, r1
 80024ac:	71bb      	strb	r3, [r7, #6]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	2b5f      	cmp	r3, #95	; 0x5f
 80024b6:	d82b      	bhi.n	8002510 <ssd1331_draw_point+0x70>
 80024b8:	79bb      	ldrb	r3, [r7, #6]
 80024ba:	2b3f      	cmp	r3, #63	; 0x3f
 80024bc:	d828      	bhi.n	8002510 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 80024be:	2100      	movs	r1, #0
 80024c0:	2015      	movs	r0, #21
 80024c2:	f7ff ffb9 	bl	8002438 <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ffb4 	bl	8002438 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 80024d0:	2100      	movs	r1, #0
 80024d2:	205f      	movs	r0, #95	; 0x5f
 80024d4:	f7ff ffb0 	bl	8002438 <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 80024d8:	2100      	movs	r1, #0
 80024da:	2075      	movs	r0, #117	; 0x75
 80024dc:	f7ff ffac 	bl	8002438 <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ffa7 	bl	8002438 <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 80024ea:	2100      	movs	r1, #0
 80024ec:	203f      	movs	r0, #63	; 0x3f
 80024ee:	f7ff ffa3 	bl	8002438 <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff9b 	bl	8002438 <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8002502:	88bb      	ldrh	r3, [r7, #4]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2101      	movs	r1, #1
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff95 	bl	8002438 <ssd1331_write_byte>
 800250e:	e000      	b.n	8002512 <ssd1331_draw_point+0x72>
		return;
 8002510:	bf00      	nop
}
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	4604      	mov	r4, r0
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4623      	mov	r3, r4
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	4603      	mov	r3, r0
 800252c:	71bb      	strb	r3, [r7, #6]
 800252e:	460b      	mov	r3, r1
 8002530:	717b      	strb	r3, [r7, #5]
 8002532:	4613      	mov	r3, r2
 8002534:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	2b5f      	cmp	r3, #95	; 0x5f
 8002542:	d857      	bhi.n	80025f4 <ssd1331_display_char+0xdc>
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	2b3f      	cmp	r3, #63	; 0x3f
 8002548:	d854      	bhi.n	80025f4 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e04c      	b.n	80025ea <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d10d      	bne.n	8002572 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	f1a3 0220 	sub.w	r2, r3, #32
 800255c:	7bf9      	ldrb	r1, [r7, #15]
 800255e:	4827      	ldr	r0, [pc, #156]	; (80025fc <ssd1331_display_char+0xe4>)
 8002560:	4613      	mov	r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4403      	add	r3, r0
 800256a:	440b      	add	r3, r1
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	737b      	strb	r3, [r7, #13]
 8002570:	e00c      	b.n	800258c <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8002572:	793b      	ldrb	r3, [r7, #4]
 8002574:	2b10      	cmp	r3, #16
 8002576:	d109      	bne.n	800258c <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 8002578:	797b      	ldrb	r3, [r7, #5]
 800257a:	f1a3 0220 	sub.w	r2, r3, #32
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	491f      	ldr	r1, [pc, #124]	; (8002600 <ssd1331_display_char+0xe8>)
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	440a      	add	r2, r1
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 800258c:	2300      	movs	r3, #0
 800258e:	73bb      	strb	r3, [r7, #14]
 8002590:	e025      	b.n	80025de <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8002592:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002596:	2b00      	cmp	r3, #0
 8002598:	da06      	bge.n	80025a8 <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 800259a:	8c3a      	ldrh	r2, [r7, #32]
 800259c:	79b9      	ldrb	r1, [r7, #6]
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff7d 	bl	80024a0 <ssd1331_draw_point>
 80025a6:	e005      	b.n	80025b4 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 80025a8:	79b9      	ldrb	r1, [r7, #6]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2200      	movs	r2, #0
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff76 	bl	80024a0 <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 80025b4:	7b7b      	ldrb	r3, [r7, #13]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	3301      	adds	r3, #1
 80025be:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80025c0:	79ba      	ldrb	r2, [r7, #6]
 80025c2:	7b3b      	ldrb	r3, [r7, #12]
 80025c4:	1ad2      	subs	r2, r2, r3
 80025c6:	793b      	ldrb	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d105      	bne.n	80025d8 <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 80025cc:	7b3b      	ldrb	r3, [r7, #12]
 80025ce:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	3301      	adds	r3, #1
 80025d4:	71fb      	strb	r3, [r7, #7]
				break;
 80025d6:	e005      	b.n	80025e4 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	3301      	adds	r3, #1
 80025dc:	73bb      	strb	r3, [r7, #14]
 80025de:	7bbb      	ldrb	r3, [r7, #14]
 80025e0:	2b07      	cmp	r3, #7
 80025e2:	d9d6      	bls.n	8002592 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	3301      	adds	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	793b      	ldrb	r3, [r7, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d3ae      	bcc.n	8002550 <ssd1331_display_char+0x38>
 80025f2:	e000      	b.n	80025f6 <ssd1331_display_char+0xde>
		return;
 80025f4:	bf00      	nop
			}
		}  	 
    } 
}
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	08010dd4 	.word	0x08010dd4
 8002600:	08011248 	.word	0x08011248

08002604 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af02      	add	r7, sp, #8
 800260a:	603a      	str	r2, [r7, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
 8002612:	460b      	mov	r3, r1
 8002614:	71bb      	strb	r3, [r7, #6]
 8002616:	4613      	mov	r3, r2
 8002618:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b5f      	cmp	r3, #95	; 0x5f
 800261e:	d836      	bhi.n	800268e <ssd1331_display_string+0x8a>
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	2b3f      	cmp	r3, #63	; 0x3f
 8002624:	d833      	bhi.n	800268e <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 8002626:	e02d      	b.n	8002684 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	797b      	ldrb	r3, [r7, #5]
 800262c:	085b      	lsrs	r3, r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002634:	429a      	cmp	r2, r3
 8002636:	dd12      	ble.n	800265e <ssd1331_display_string+0x5a>
			chXpos = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 800263c:	79ba      	ldrb	r2, [r7, #6]
 800263e:	797b      	ldrb	r3, [r7, #5]
 8002640:	4413      	add	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8002644:	79ba      	ldrb	r2, [r7, #6]
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800264c:	429a      	cmp	r2, r3
 800264e:	dd06      	ble.n	800265e <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f000 f81c 	bl	8002696 <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	797c      	ldrb	r4, [r7, #5]
 8002664:	79b9      	ldrb	r1, [r7, #6]
 8002666:	79f8      	ldrb	r0, [r7, #7]
 8002668:	8b3b      	ldrh	r3, [r7, #24]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4623      	mov	r3, r4
 800266e:	f7ff ff53 	bl	8002518 <ssd1331_display_char>
        chXpos += chSize / 2;
 8002672:	797b      	ldrb	r3, [r7, #5]
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4413      	add	r3, r2
 800267c:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1cd      	bne.n	8002628 <ssd1331_display_string+0x24>
 800268c:	e000      	b.n	8002690 <ssd1331_display_string+0x8c>
		return;
 800268e:	bf00      	nop
    } 
}
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}

08002696 <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	81fb      	strh	r3, [r7, #14]
 80026a4:	e013      	b.n	80026ce <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80026a6:	2300      	movs	r3, #0
 80026a8:	81bb      	strh	r3, [r7, #12]
 80026aa:	e00a      	b.n	80026c2 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80026ac:	89bb      	ldrh	r3, [r7, #12]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	89fa      	ldrh	r2, [r7, #14]
 80026b2:	b2d1      	uxtb	r1, r2
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fef2 	bl	80024a0 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80026bc:	89bb      	ldrh	r3, [r7, #12]
 80026be:	3301      	adds	r3, #1
 80026c0:	81bb      	strh	r3, [r7, #12]
 80026c2:	89bb      	ldrh	r3, [r7, #12]
 80026c4:	2b5f      	cmp	r3, #95	; 0x5f
 80026c6:	d9f1      	bls.n	80026ac <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 80026c8:	89fb      	ldrh	r3, [r7, #14]
 80026ca:	3301      	adds	r3, #1
 80026cc:	81fb      	strh	r3, [r7, #14]
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	2b3f      	cmp	r3, #63	; 0x3f
 80026d2:	d9e8      	bls.n	80026a6 <ssd1331_clear_screen+0x10>
		}
	}
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <ssd1331_init>:


void ssd1331_init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 80026e4:	2201      	movs	r2, #1
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	4852      	ldr	r0, [pc, #328]	; (8002834 <ssd1331_init+0x154>)
 80026ea:	f001 fd63 	bl	80041b4 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 80026ee:	2201      	movs	r2, #1
 80026f0:	2110      	movs	r1, #16
 80026f2:	4850      	ldr	r0, [pc, #320]	; (8002834 <ssd1331_init+0x154>)
 80026f4:	f001 fd5e 	bl	80041b4 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 80026f8:	2100      	movs	r1, #0
 80026fa:	20ae      	movs	r0, #174	; 0xae
 80026fc:	f7ff fe9c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8002700:	2100      	movs	r1, #0
 8002702:	2081      	movs	r0, #129	; 0x81
 8002704:	f7ff fe98 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 8002708:	2100      	movs	r1, #0
 800270a:	20ff      	movs	r0, #255	; 0xff
 800270c:	f7ff fe94 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8002710:	2100      	movs	r1, #0
 8002712:	2082      	movs	r0, #130	; 0x82
 8002714:	f7ff fe90 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 8002718:	2100      	movs	r1, #0
 800271a:	20ff      	movs	r0, #255	; 0xff
 800271c:	f7ff fe8c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8002720:	2100      	movs	r1, #0
 8002722:	2083      	movs	r0, #131	; 0x83
 8002724:	f7ff fe88 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 8002728:	2100      	movs	r1, #0
 800272a:	20ff      	movs	r0, #255	; 0xff
 800272c:	f7ff fe84 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8002730:	2100      	movs	r1, #0
 8002732:	2087      	movs	r0, #135	; 0x87
 8002734:	f7ff fe80 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 8002738:	2100      	movs	r1, #0
 800273a:	2006      	movs	r0, #6
 800273c:	f7ff fe7c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8002740:	2100      	movs	r1, #0
 8002742:	208a      	movs	r0, #138	; 0x8a
 8002744:	f7ff fe78 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002748:	2100      	movs	r1, #0
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f7ff fe74 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8002750:	2100      	movs	r1, #0
 8002752:	208b      	movs	r0, #139	; 0x8b
 8002754:	f7ff fe70 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 8002758:	2100      	movs	r1, #0
 800275a:	2078      	movs	r0, #120	; 0x78
 800275c:	f7ff fe6c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8002760:	2100      	movs	r1, #0
 8002762:	208c      	movs	r0, #140	; 0x8c
 8002764:	f7ff fe68 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 8002768:	2100      	movs	r1, #0
 800276a:	2064      	movs	r0, #100	; 0x64
 800276c:	f7ff fe64 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8002770:	2100      	movs	r1, #0
 8002772:	20a0      	movs	r0, #160	; 0xa0
 8002774:	f7ff fe60 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 8002778:	2100      	movs	r1, #0
 800277a:	2072      	movs	r0, #114	; 0x72
 800277c:	f7ff fe5c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8002780:	2100      	movs	r1, #0
 8002782:	20a1      	movs	r0, #161	; 0xa1
 8002784:	f7ff fe58 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8002788:	2100      	movs	r1, #0
 800278a:	2000      	movs	r0, #0
 800278c:	f7ff fe54 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8002790:	2100      	movs	r1, #0
 8002792:	20a2      	movs	r0, #162	; 0xa2
 8002794:	f7ff fe50 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 8002798:	2100      	movs	r1, #0
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff fe4c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80027a0:	2100      	movs	r1, #0
 80027a2:	20a4      	movs	r0, #164	; 0xa4
 80027a4:	f7ff fe48 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80027a8:	2100      	movs	r1, #0
 80027aa:	20a8      	movs	r0, #168	; 0xa8
 80027ac:	f7ff fe44 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80027b0:	2100      	movs	r1, #0
 80027b2:	203f      	movs	r0, #63	; 0x3f
 80027b4:	f7ff fe40 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80027b8:	2100      	movs	r1, #0
 80027ba:	20ad      	movs	r0, #173	; 0xad
 80027bc:	f7ff fe3c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80027c0:	2100      	movs	r1, #0
 80027c2:	208e      	movs	r0, #142	; 0x8e
 80027c4:	f7ff fe38 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 80027c8:	2100      	movs	r1, #0
 80027ca:	20b0      	movs	r0, #176	; 0xb0
 80027cc:	f7ff fe34 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 80027d0:	2100      	movs	r1, #0
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7ff fe30 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 80027d8:	2100      	movs	r1, #0
 80027da:	20b1      	movs	r0, #177	; 0xb1
 80027dc:	f7ff fe2c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 80027e0:	2100      	movs	r1, #0
 80027e2:	2031      	movs	r0, #49	; 0x31
 80027e4:	f7ff fe28 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80027e8:	2100      	movs	r1, #0
 80027ea:	20b3      	movs	r0, #179	; 0xb3
 80027ec:	f7ff fe24 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 80027f0:	2100      	movs	r1, #0
 80027f2:	20f0      	movs	r0, #240	; 0xf0
 80027f4:	f7ff fe20 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 80027f8:	2100      	movs	r1, #0
 80027fa:	20bb      	movs	r0, #187	; 0xbb
 80027fc:	f7ff fe1c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8002800:	2100      	movs	r1, #0
 8002802:	203a      	movs	r0, #58	; 0x3a
 8002804:	f7ff fe18 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 8002808:	2100      	movs	r1, #0
 800280a:	20be      	movs	r0, #190	; 0xbe
 800280c:	f7ff fe14 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8002810:	2100      	movs	r1, #0
 8002812:	203e      	movs	r0, #62	; 0x3e
 8002814:	f7ff fe10 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 8002818:	2100      	movs	r1, #0
 800281a:	202e      	movs	r0, #46	; 0x2e
 800281c:	f7ff fe0c 	bl	8002438 <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8002820:	2100      	movs	r1, #0
 8002822:	20af      	movs	r0, #175	; 0xaf
 8002824:	f7ff fe08 	bl	8002438 <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff ff34 	bl	8002696 <ssd1331_clear_screen>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	48000400 	.word	0x48000400

08002838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_MspInit+0x44>)
 8002840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_MspInit+0x44>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6613      	str	r3, [r2, #96]	; 0x60
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_MspInit+0x44>)
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_MspInit+0x44>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_MspInit+0x44>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	6593      	str	r3, [r2, #88]	; 0x58
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_MspInit+0x44>)
 8002864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000

08002880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b09e      	sub	sp, #120	; 0x78
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	2254      	movs	r2, #84	; 0x54
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f005 f954 	bl	8007b4e <memset>
  if(hadc->Instance==ADC1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a25      	ldr	r2, [pc, #148]	; (8002940 <HAL_ADC_MspInit+0xc0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d143      	bne.n	8002938 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028ba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028c0:	2301      	movs	r3, #1
 80028c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80028c4:	2310      	movs	r3, #16
 80028c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028c8:	2307      	movs	r3, #7
 80028ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80028d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fb2c 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80028ea:	f7ff fd9d 	bl	8002428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f2:	4a14      	ldr	r2, [pc, #80]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 80028f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 80028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_ADC_MspInit+0xc4>)
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002922:	230b      	movs	r3, #11
 8002924:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	2300      	movs	r3, #0
 8002928:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800292e:	4619      	mov	r1, r3
 8002930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002934:	f001 fabc 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002938:	bf00      	nop
 800293a:	3778      	adds	r7, #120	; 0x78
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	50040000 	.word	0x50040000
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_SPI_MspInit+0x80>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d129      	bne.n	80029be <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_SPI_MspInit+0x84>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_SPI_MspInit+0x84>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	6613      	str	r3, [r2, #96]	; 0x60
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_SPI_MspInit+0x84>)
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_SPI_MspInit+0x84>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_SPI_MspInit+0x84>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_SPI_MspInit+0x84>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800299a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ac:	2305      	movs	r3, #5
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ba:	f001 fa79 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40013000 	.word	0x40013000
 80029cc:	40021000 	.word	0x40021000

080029d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <HAL_TIM_PWM_MspInit+0x38>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d10b      	bne.n	80029fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029e2:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80029e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029ec:	6613      	str	r3, [r2, #96]	; 0x60
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <HAL_TIM_Base_MspInit+0x38>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d10b      	bne.n	8002a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_TIM_Base_MspInit+0x3c>)
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_TIM_Base_MspInit+0x3c>)
 8002a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_TIM_Base_MspInit+0x3c>)
 8002a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40021000 	.word	0x40021000

08002a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_TIM_MspPostInit+0x64>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11c      	bne.n	8002aac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_TIM_MspPostInit+0x68>)
 8002a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIM_MspPostInit+0x68>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_TIM_MspPostInit+0x68>)
 8002a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aa8:	f001 fa02 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002aac:	bf00      	nop
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b09e      	sub	sp, #120	; 0x78
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	2254      	movs	r2, #84	; 0x54
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f005 f836 	bl	8007b4e <memset>
  if(huart->Instance==USART2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <HAL_UART_MspInit+0xcc>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d148      	bne.n	8002b7e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002aec:	2302      	movs	r3, #2
 8002aee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af4:	f107 0310 	add.w	r3, r7, #16
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fa1f 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b04:	f7ff fc90 	bl	8002428 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b12:	6593      	str	r3, [r2, #88]	; 0x58
 8002b14:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_UART_MspInit+0xd0>)
 8002b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002b38:	2304      	movs	r3, #4
 8002b3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b56:	f001 f9ab 	bl	8003eb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b74:	4619      	mov	r1, r3
 8002b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7a:	f001 f999 	bl	8003eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b7e:	bf00      	nop
 8002b80:	3778      	adds	r7, #120	; 0x78
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	40021000 	.word	0x40021000

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba2:	e7fe      	b.n	8002ba2 <HardFault_Handler+0x4>

08002ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba8:	e7fe      	b.n	8002ba8 <MemManage_Handler+0x4>

08002baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bae:	e7fe      	b.n	8002bae <BusFault_Handler+0x4>

08002bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <UsageFault_Handler+0x4>

08002bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002be4:	f000 f98a 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
	return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_kill>:

int _kill(int pid, int sig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c06:	f004 fff1 	bl	8007bec <__errno>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2216      	movs	r2, #22
 8002c0e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_exit>:

void _exit (int status)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ffe7 	bl	8002bfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c2e:	e7fe      	b.n	8002c2e <_exit+0x12>

08002c30 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	int returnVal= 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
	len = 1;						// over ride the read and only get 1 char
 8002c40:	2301      	movs	r3, #1
 8002c42:	607b      	str	r3, [r7, #4]

	returnVal = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 0xffffffff);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	480a      	ldr	r0, [pc, #40]	; (8002c78 <_read+0x48>)
 8002c50:	f004 f8c7 	bl	8006de2 <HAL_UART_Receive>
 8002c54:	4603      	mov	r3, r0
 8002c56:	617b      	str	r3, [r7, #20]
	if( returnVal == HAL_OK )
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <_read+0x32>
		return len;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	e006      	b.n	8002c70 <_read+0x40>
	else if( returnVal == HAL_TIMEOUT )
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d101      	bne.n	8002c6c <_read+0x3c>
		return 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e001      	b.n	8002c70 <_read+0x40>
	else
		return EOF;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295

}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000086c 	.word	0x2000086c

08002c7c <_write>:

int _write(int file, char *ptr, int len)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	4809      	ldr	r0, [pc, #36]	; (8002cbc <_write+0x40>)
 8002c98:	f004 f819 	bl	8006cce <HAL_UART_Transmit>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d002      	beq.n	8002cac <_write+0x30>
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d101      	bne.n	8002cb0 <_write+0x34>
	{
		Error_Handler();
 8002cac:	f7ff fbbc 	bl	8002428 <Error_Handler>
	}

	return len;
 8002cb0:	687b      	ldr	r3, [r7, #4]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000086c 	.word	0x2000086c

08002cc0 <_close>:



int _close(int file)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	return -1;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce8:	605a      	str	r2, [r3, #4]
	return 0;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_isatty>:

int _isatty(int file)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	return 1;
 8002d00:	2301      	movs	r3, #1
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
	return 0;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d30:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <_sbrk+0x5c>)
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <_sbrk+0x60>)
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <_sbrk+0x64>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <_sbrk+0x68>)
 8002d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d207      	bcs.n	8002d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d58:	f004 ff48 	bl	8007bec <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	220c      	movs	r2, #12
 8002d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	e009      	b.n	8002d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <_sbrk+0x64>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <_sbrk+0x64>)
 8002d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20010000 	.word	0x20010000
 8002d88:	00000400 	.word	0x00000400
 8002d8c:	200008fc 	.word	0x200008fc
 8002d90:	20000c10 	.word	0x20000c10

08002d94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d98:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <SystemInit+0x64>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <SystemInit+0x64>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002da8:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <SystemInit+0x68>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <SystemInit+0x68>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <SystemInit+0x68>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <SystemInit+0x68>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <SystemInit+0x68>)
 8002dc0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002dc4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002dc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <SystemInit+0x68>)
 8002dcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <SystemInit+0x68>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <SystemInit+0x68>)
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <SystemInit+0x68>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SystemInit+0x64>)
 8002de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dea:	609a      	str	r2, [r3, #8]
#endif
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000ed00 	.word	0xe000ed00
 8002dfc:	40021000 	.word	0x40021000

08002e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e04:	f7ff ffc6 	bl	8002d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e0a:	e003      	b.n	8002e14 <LoopCopyDataInit>

08002e0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e12:	3104      	adds	r1, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e14:	480a      	ldr	r0, [pc, #40]	; (8002e40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e1c:	d3f6      	bcc.n	8002e0c <CopyDataInit>
	ldr	r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e20:	e002      	b.n	8002e28 <LoopFillZerobss>

08002e22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e24:	f842 3b04 	str.w	r3, [r2], #4

08002e28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <LoopForever+0x16>)
	cmp	r2, r3
 8002e2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e2c:	d3f9      	bcc.n	8002e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f004 fee3 	bl	8007bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e32:	f7fe ff41 	bl	8001cb8 <main>

08002e36 <LoopForever>:

LoopForever:
    b LoopForever
 8002e36:	e7fe      	b.n	8002e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e38:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002e3c:	08011d54 	.word	0x08011d54
	ldr	r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e44:	200006cc 	.word	0x200006cc
	ldr	r2, =_sbss
 8002e48:	200006cc 	.word	0x200006cc
	ldr	r3, = _ebss
 8002e4c:	20000c10 	.word	0x20000c10

08002e50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC1_IRQHandler>

08002e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	f000 fff3 	bl	8003e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e62:	2000      	movs	r0, #0
 8002e64:	f000 f80e 	bl	8002e84 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	71fb      	strb	r3, [r7, #7]
 8002e72:	e001      	b.n	8002e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e74:	f7ff fce0 	bl	8002838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e78:	79fb      	ldrb	r3, [r7, #7]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_InitTick+0x6c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_InitTick+0x70>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <HAL_InitTick+0x6c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fff1 	bl	8003e96 <HAL_SYSTICK_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10f      	bne.n	8002eda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d809      	bhi.n	8002ed4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f000 ffc9 	bl	8003e5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ecc:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_InitTick+0x74>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e007      	b.n	8002ee4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
 8002ed8:	e004      	b.n	8002ee4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e001      	b.n	8002ee4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000014 	.word	0x20000014
 8002ef4:	2000000c 	.word	0x2000000c
 8002ef8:	20000010 	.word	0x20000010

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_IncTick+0x24>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <HAL_IncTick+0x24>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000014 	.word	0x20000014
 8002f20:	20000900 	.word	0x20000900

08002f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return uwTick;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_GetTick+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000900 	.word	0x20000900

08002f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff ffee 	bl	8002f24 <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d005      	beq.n	8002f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_Delay+0x44>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f62:	bf00      	nop
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d8f7      	bhi.n	8002f64 <HAL_Delay+0x28>
  {
  }
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000014 	.word	0x20000014

08002f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3360      	adds	r3, #96	; 0x60
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LL_ADC_SetOffset+0x44>)
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	4313      	orrs	r3, r2
 800301c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	03fff000 	.word	0x03fff000

08003034 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3360      	adds	r3, #96	; 0x60
 8003042:	461a      	mov	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3360      	adds	r3, #96	; 0x60
 8003070:	461a      	mov	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003096:	b480      	push	{r7}
 8003098:	b087      	sub	sp, #28
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3330      	adds	r3, #48	; 0x30
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	4413      	add	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	211f      	movs	r1, #31
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	401a      	ands	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	f003 011f 	and.w	r1, r3, #31
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3314      	adds	r3, #20
 80030fe:	461a      	mov	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	0e5b      	lsrs	r3, r3, #25
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	4413      	add	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2107      	movs	r1, #7
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0d1b      	lsrs	r3, r3, #20
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	431a      	orrs	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0318 	and.w	r3, r3, #24
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003168:	40d9      	lsrs	r1, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	400b      	ands	r3, r1
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003172:	431a      	orrs	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	0007ffff 	.word	0x0007ffff

0800318c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800319c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6093      	str	r3, [r2, #8]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c4:	d101      	bne.n	80031ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003214:	d101      	bne.n	800321a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <LL_ADC_IsEnabled+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_ADC_IsEnabled+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d101      	bne.n	8003266 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d101      	bne.n	800328c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e126      	b.n	8003504 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fadb 	bl	8002880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff67 	bl	80031b0 <LL_ADC_IsDeepPowerDownEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff4d 	bl	800318c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff ff82 	bl	8003200 <LL_ADC_IsInternalRegulatorEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d115      	bne.n	800332e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff66 	bl	80031d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800330c:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_ADC_Init+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	099b      	lsrs	r3, r3, #6
 8003312:	4a7f      	ldr	r2, [pc, #508]	; (8003510 <HAL_ADC_Init+0x274>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	099b      	lsrs	r3, r3, #6
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003320:	e002      	b.n	8003328 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3b01      	subs	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f9      	bne.n	8003322 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff64 	bl	8003200 <LL_ADC_IsInternalRegulatorEnabled>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff ff75 	bl	800324e <LL_ADC_REG_IsConversionOngoing>
 8003364:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 80bf 	bne.w	80034f2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 80bb 	bne.w	80034f2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003380:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003384:	f043 0202 	orr.w	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff49 	bl	8003228 <LL_ADC_IsEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10b      	bne.n	80033b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800339c:	485d      	ldr	r0, [pc, #372]	; (8003514 <HAL_ADC_Init+0x278>)
 800339e:	f7ff ff43 	bl	8003228 <LL_ADC_IsEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4619      	mov	r1, r3
 80033ae:	485a      	ldr	r0, [pc, #360]	; (8003518 <HAL_ADC_Init+0x27c>)
 80033b0:	f7ff fde8 	bl	8002f84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7e5b      	ldrb	r3, [r3, #25]
 80033b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	3b01      	subs	r3, #1
 80033e8:	045b      	lsls	r3, r3, #17
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d009      	beq.n	800340c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <HAL_ADC_Init+0x280>)
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	430b      	orrs	r3, r1
 800341e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff25 	bl	8003274 <LL_ADC_INJ_IsConversionOngoing>
 800342a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d13a      	bne.n	80034ae <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800343c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003444:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003454:	f023 0302 	bic.w	r3, r3, #2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	430b      	orrs	r3, r1
 8003460:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003468:	2b01      	cmp	r3, #1
 800346a:	d118      	bne.n	800349e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800348e:	430a      	orrs	r2, r1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	611a      	str	r2, [r3, #16]
 800349c:	e007      	b.n	80034ae <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10c      	bne.n	80034d0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	f023 010f 	bic.w	r1, r3, #15
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	1e5a      	subs	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
 80034ce:	e007      	b.n	80034e0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 020f 	bic.w	r2, r2, #15
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f023 0303 	bic.w	r3, r3, #3
 80034e8:	f043 0201 	orr.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
 80034f0:	e007      	b.n	8003502 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003502:	7ffb      	ldrb	r3, [r7, #31]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3720      	adds	r7, #32
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000000c 	.word	0x2000000c
 8003510:	053e2d63 	.word	0x053e2d63
 8003514:	50040000 	.word	0x50040000
 8003518:	50040300 	.word	0x50040300
 800351c:	fff0c007 	.word	0xfff0c007

08003520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0b6      	sub	sp, #216	; 0xd8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x22>
 800353e:	2302      	movs	r3, #2
 8003540:	e3bb      	b.n	8003cba <HAL_ADC_ConfigChannel+0x79a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fe7d 	bl	800324e <LL_ADC_REG_IsConversionOngoing>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 83a0 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b05      	cmp	r3, #5
 800356a:	d824      	bhi.n	80035b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	3b02      	subs	r3, #2
 8003572:	2b03      	cmp	r3, #3
 8003574:	d81b      	bhi.n	80035ae <HAL_ADC_ConfigChannel+0x8e>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_ADC_ConfigChannel+0x5c>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	0800358d 	.word	0x0800358d
 8003580:	08003595 	.word	0x08003595
 8003584:	0800359d 	.word	0x0800359d
 8003588:	080035a5 	.word	0x080035a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800358c:	230c      	movs	r3, #12
 800358e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003592:	e010      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003594:	2312      	movs	r3, #18
 8003596:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800359a:	e00c      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800359c:	2318      	movs	r3, #24
 800359e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035a2:	e008      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035ac:	e003      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035ae:	2306      	movs	r3, #6
 80035b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80035c4:	f7ff fd67 	bl	8003096 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fe3e 	bl	800324e <LL_ADC_REG_IsConversionOngoing>
 80035d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fe4a 	bl	8003274 <LL_ADC_INJ_IsConversionOngoing>
 80035e0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 81a4 	bne.w	8003936 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f040 819f 	bne.w	8003936 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	461a      	mov	r2, r3
 8003606:	f7ff fd72 	bl	80030ee <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d00a      	beq.n	8003642 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6919      	ldr	r1, [r3, #16]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800363c:	f7ff fcd6 	bl	8002fec <LL_ADC_SetOffset>
 8003640:	e179      	b.n	8003936 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fcf3 	bl	8003034 <LL_ADC_GetOffsetChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_ADC_ConfigChannel+0x14e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fce8 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	0e9b      	lsrs	r3, r3, #26
 8003668:	f003 021f 	and.w	r2, r3, #31
 800366c:	e01e      	b.n	80036ac <HAL_ADC_ConfigChannel+0x18c>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fcdd 	bl	8003034 <LL_ADC_GetOffsetChannel>
 800367a:	4603      	mov	r3, r0
 800367c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800368c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003690:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e004      	b.n	80036aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80036a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036a4:	fab3 f383 	clz	r3, r3
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x1a4>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0e9b      	lsrs	r3, r3, #26
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	e018      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1d6>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80036d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80036e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80036e8:	2320      	movs	r3, #32
 80036ea:	e004      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80036ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d106      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fcac 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fc90 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003714:	4603      	mov	r3, r0
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x214>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fc85 	bl	8003034 <LL_ADC_GetOffsetChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	f003 021f 	and.w	r2, r3, #31
 8003732:	e01e      	b.n	8003772 <HAL_ADC_ConfigChannel+0x252>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fc7a 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003740:	4603      	mov	r3, r0
 8003742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800375a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003762:	2320      	movs	r3, #32
 8003764:	e004      	b.n	8003770 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <HAL_ADC_ConfigChannel+0x26a>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	0e9b      	lsrs	r3, r3, #26
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	e018      	b.n	80037bc <HAL_ADC_ConfigChannel+0x29c>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800379e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80037a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e004      	b.n	80037bc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80037b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037bc:	429a      	cmp	r2, r3
 80037be:	d106      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fc49 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fc2d 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80037da:	4603      	mov	r3, r0
 80037dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x2da>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fc22 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80037f0:	4603      	mov	r3, r0
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	e01e      	b.n	8003838 <HAL_ADC_ConfigChannel+0x318>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2102      	movs	r1, #2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fc17 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003806:	4603      	mov	r3, r0
 8003808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800381c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e004      	b.n	8003836 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800382c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x330>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0e9b      	lsrs	r3, r3, #26
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	e014      	b.n	800387a <HAL_ADC_ConfigChannel+0x35a>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800385e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800386c:	2320      	movs	r3, #32
 800386e:	e004      	b.n	800387a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800387a:	429a      	cmp	r2, r3
 800387c:	d106      	bne.n	800388c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	2102      	movs	r1, #2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fbea 	bl	8003060 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2103      	movs	r1, #3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fbce 	bl	8003034 <LL_ADC_GetOffsetChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x398>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2103      	movs	r1, #3
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fbc3 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80038ae:	4603      	mov	r3, r0
 80038b0:	0e9b      	lsrs	r3, r3, #26
 80038b2:	f003 021f 	and.w	r2, r3, #31
 80038b6:	e017      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x3c8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2103      	movs	r1, #3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fbb8 	bl	8003034 <LL_ADC_GetOffsetChannel>
 80038c4:	4603      	mov	r3, r0
 80038c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80038d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80038da:	2320      	movs	r3, #32
 80038dc:	e003      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80038de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x3e0>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	0e9b      	lsrs	r3, r3, #26
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	e011      	b.n	8003924 <HAL_ADC_ConfigChannel+0x404>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800390e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	e003      	b.n	8003924 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800391c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003924:	429a      	cmp	r2, r3
 8003926:	d106      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2200      	movs	r2, #0
 800392e:	2103      	movs	r1, #3
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fb95 	bl	8003060 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff fc74 	bl	8003228 <LL_ADC_IsEnabled>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8140 	bne.w	8003bc8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6819      	ldr	r1, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	461a      	mov	r2, r3
 8003956:	f7ff fbf5 	bl	8003144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	4a8f      	ldr	r2, [pc, #572]	; (8003b9c <HAL_ADC_ConfigChannel+0x67c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	f040 8131 	bne.w	8003bc8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <HAL_ADC_ConfigChannel+0x46e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0e9b      	lsrs	r3, r3, #26
 800397c:	3301      	adds	r3, #1
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2b09      	cmp	r3, #9
 8003984:	bf94      	ite	ls
 8003986:	2301      	movls	r3, #1
 8003988:	2300      	movhi	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	e019      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x4a2>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80039a6:	2320      	movs	r3, #32
 80039a8:	e003      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d079      	beq.n	8003aba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x4c2>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	0e9b      	lsrs	r3, r3, #26
 80039d8:	3301      	adds	r3, #1
 80039da:	069b      	lsls	r3, r3, #26
 80039dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039e0:	e015      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x4ee>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ea:	fa93 f3a3 	rbit	r3, r3
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80039f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80039fa:	2320      	movs	r3, #32
 80039fc:	e003      	b.n	8003a06 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80039fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a00:	fab3 f383 	clz	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	069b      	lsls	r3, r3, #26
 8003a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <HAL_ADC_ConfigChannel+0x50e>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	0e9b      	lsrs	r3, r3, #26
 8003a20:	3301      	adds	r3, #1
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	e017      	b.n	8003a5e <HAL_ADC_ConfigChannel+0x53e>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a46:	2320      	movs	r3, #32
 8003a48:	e003      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2101      	movs	r1, #1
 8003a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a5e:	ea42 0103 	orr.w	r1, r2, r3
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10a      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x564>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	0e9b      	lsrs	r3, r3, #26
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	051b      	lsls	r3, r3, #20
 8003a82:	e018      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0x596>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	f003 021f 	and.w	r2, r3, #31
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	e081      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x5b6>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0e9b      	lsrs	r3, r3, #26
 8003acc:	3301      	adds	r3, #1
 8003ace:	069b      	lsls	r3, r3, #26
 8003ad0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ad4:	e015      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x5e2>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003aee:	2320      	movs	r3, #32
 8003af0:	e003      	b.n	8003afa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af4:	fab3 f383 	clz	r3, r3
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	3301      	adds	r3, #1
 8003afc:	069b      	lsls	r3, r3, #26
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d109      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x602>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	3301      	adds	r3, #1
 8003b16:	f003 031f 	and.w	r3, r3, #31
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	e017      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x632>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	61bb      	str	r3, [r7, #24]
  return result;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	e003      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b52:	ea42 0103 	orr.w	r1, r2, r3
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x65e>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	0e9b      	lsrs	r3, r3, #26
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f003 021f 	and.w	r2, r3, #31
 8003b6e:	4613      	mov	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	4413      	add	r3, r2
 8003b74:	3b1e      	subs	r3, #30
 8003b76:	051b      	lsls	r3, r3, #20
 8003b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	e01e      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x69c>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	60fb      	str	r3, [r7, #12]
  return result;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003b96:	2320      	movs	r3, #32
 8003b98:	e006      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x688>
 8003b9a:	bf00      	nop
 8003b9c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f003 021f 	and.w	r2, r3, #31
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b1e      	subs	r3, #30
 8003bb6:	051b      	lsls	r3, r3, #20
 8003bb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7ff fa93 	bl	80030ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d06c      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bd4:	483c      	ldr	r0, [pc, #240]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003bd6:	f7ff f9fb 	bl	8002fd0 <LL_ADC_GetCommonPathInternalCh>
 8003bda:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <HAL_ADC_ConfigChannel+0x7ac>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d127      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d121      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d157      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c06:	4619      	mov	r1, r3
 8003c08:	482f      	ldr	r0, [pc, #188]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003c0a:	f7ff f9ce 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	099b      	lsrs	r3, r3, #6
 8003c14:	4a30      	ldr	r2, [pc, #192]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c28:	e002      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f9      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c36:	e03a      	b.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <HAL_ADC_ConfigChannel+0x7bc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d113      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d12a      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c60:	4619      	mov	r1, r3
 8003c62:	4819      	ldr	r0, [pc, #100]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003c64:	f7ff f9a1 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c68:	e021      	b.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d11c      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d116      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d111      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c92:	4619      	mov	r1, r3
 8003c94:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003c96:	f7ff f988 	bl	8002faa <LL_ADC_SetCommonPathInternalCh>
 8003c9a:	e008      	b.n	8003cae <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0220 	orr.w	r2, r3, #32
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	37d8      	adds	r7, #216	; 0xd8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	80080000 	.word	0x80080000
 8003cc8:	50040300 	.word	0x50040300
 8003ccc:	c7520000 	.word	0xc7520000
 8003cd0:	50040000 	.word	0x50040000
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	053e2d63 	.word	0x053e2d63
 8003cdc:	cb840000 	.word	0xcb840000
 8003ce0:	80000001 	.word	0x80000001

08003ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d00:	4013      	ands	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d16:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <__NVIC_SetPriorityGrouping+0x44>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	60d3      	str	r3, [r2, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	e000ed00 	.word	0xe000ed00

08003d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <__NVIC_GetPriorityGrouping+0x18>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	0a1b      	lsrs	r3, r3, #8
 8003d36:	f003 0307 	and.w	r3, r3, #7
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db0a      	blt.n	8003d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	490c      	ldr	r1, [pc, #48]	; (8003d94 <__NVIC_SetPriority+0x4c>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d70:	e00a      	b.n	8003d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <__NVIC_SetPriority+0x50>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	0112      	lsls	r2, r2, #4
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	440b      	add	r3, r1
 8003d86:	761a      	strb	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr
 8003d94:	e000e100 	.word	0xe000e100
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f1c3 0307 	rsb	r3, r3, #7
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf28      	it	cs
 8003dba:	2304      	movcs	r3, #4
 8003dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d902      	bls.n	8003dcc <NVIC_EncodePriority+0x30>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3b03      	subs	r3, #3
 8003dca:	e000      	b.n	8003dce <NVIC_EncodePriority+0x32>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	401a      	ands	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	4313      	orrs	r3, r2
         );
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e14:	d301      	bcc.n	8003e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <SysTick_Config+0x40>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e22:	210f      	movs	r1, #15
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f7ff ff8e 	bl	8003d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SysTick_Config+0x40>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <SysTick_Config+0x40>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff47 	bl	8003ce4 <__NVIC_SetPriorityGrouping>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e70:	f7ff ff5c 	bl	8003d2c <__NVIC_GetPriorityGrouping>
 8003e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f7ff ff8e 	bl	8003d9c <NVIC_EncodePriority>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff5d 	bl	8003d48 <__NVIC_SetPriority>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffb0 	bl	8003e04 <SysTick_Config>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ebe:	e148      	b.n	8004152 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 813a 	beq.w	800414c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d005      	beq.n	8003ef0 <HAL_GPIO_Init+0x40>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d130      	bne.n	8003f52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f26:	2201      	movs	r2, #1
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 0201 	and.w	r2, r3, #1
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d017      	beq.n	8003f8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2203      	movs	r2, #3
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d123      	bne.n	8003fe2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	08da      	lsrs	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	08da      	lsrs	r2, r3, #3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3208      	adds	r2, #8
 8003fdc:	6939      	ldr	r1, [r7, #16]
 8003fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0203 	and.w	r2, r3, #3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8094 	beq.w	800414c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004024:	4b52      	ldr	r3, [pc, #328]	; (8004170 <HAL_GPIO_Init+0x2c0>)
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	4a51      	ldr	r2, [pc, #324]	; (8004170 <HAL_GPIO_Init+0x2c0>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6613      	str	r3, [r2, #96]	; 0x60
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_GPIO_Init+0x2c0>)
 8004032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800403c:	4a4d      	ldr	r2, [pc, #308]	; (8004174 <HAL_GPIO_Init+0x2c4>)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	3302      	adds	r3, #2
 8004044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	220f      	movs	r2, #15
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004066:	d00d      	beq.n	8004084 <HAL_GPIO_Init+0x1d4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a43      	ldr	r2, [pc, #268]	; (8004178 <HAL_GPIO_Init+0x2c8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <HAL_GPIO_Init+0x1d0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a42      	ldr	r2, [pc, #264]	; (800417c <HAL_GPIO_Init+0x2cc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_GPIO_Init+0x1cc>
 8004078:	2302      	movs	r3, #2
 800407a:	e004      	b.n	8004086 <HAL_GPIO_Init+0x1d6>
 800407c:	2307      	movs	r3, #7
 800407e:	e002      	b.n	8004086 <HAL_GPIO_Init+0x1d6>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_GPIO_Init+0x1d6>
 8004084:	2300      	movs	r3, #0
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f002 0203 	and.w	r2, r2, #3
 800408c:	0092      	lsls	r2, r2, #2
 800408e:	4093      	lsls	r3, r2
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004096:	4937      	ldr	r1, [pc, #220]	; (8004174 <HAL_GPIO_Init+0x2c4>)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	089b      	lsrs	r3, r3, #2
 800409c:	3302      	adds	r3, #2
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c8:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040f8:	4b21      	ldr	r3, [pc, #132]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004146:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_GPIO_Init+0x2d0>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3301      	adds	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f aeaf 	bne.w	8003ec0 <HAL_GPIO_Init+0x10>
  }
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	40021000 	.word	0x40021000
 8004174:	40010000 	.word	0x40010000
 8004178:	48000400 	.word	0x48000400
 800417c:	48000800 	.word	0x48000800
 8004180:	40010400 	.word	0x40010400

08004184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
 80041a0:	e001      	b.n	80041a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041d0:	e002      	b.n	80041d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40007000 	.word	0x40007000

08004204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_PWREx_GetVoltageRange+0x18>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40007000 	.word	0x40007000

08004220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422e:	d130      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d038      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2232      	movs	r2, #50	; 0x32
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0c9b      	lsrs	r3, r3, #18
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004264:	e002      	b.n	800426c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b01      	subs	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d102      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f2      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d110      	bne.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d007      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000
 80042c4:	2000000c 	.word	0x2000000c
 80042c8:	431bde83 	.word	0x431bde83

080042cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f000 bc02 	b.w	8004ae4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042e0:	4b96      	ldr	r3, [pc, #600]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ea:	4b94      	ldr	r3, [pc, #592]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80e4 	beq.w	80044ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_RCC_OscConfig+0x4c>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	f040 808b 	bne.w	8004426 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b01      	cmp	r3, #1
 8004314:	f040 8087 	bne.w	8004426 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004318:	4b88      	ldr	r3, [pc, #544]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_OscConfig+0x64>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e3d9      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	4b81      	ldr	r3, [pc, #516]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_RCC_OscConfig+0x7e>
 8004340:	4b7e      	ldr	r3, [pc, #504]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004348:	e005      	b.n	8004356 <HAL_RCC_OscConfig+0x8a>
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004356:	4293      	cmp	r3, r2
 8004358:	d223      	bcs.n	80043a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fd8c 	bl	8004e7c <RCC_SetFlashLatencyFromMSIRange>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e3ba      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436e:	4b73      	ldr	r3, [pc, #460]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a72      	ldr	r2, [pc, #456]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004374:	f043 0308 	orr.w	r3, r3, #8
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b70      	ldr	r3, [pc, #448]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	496d      	ldr	r1, [pc, #436]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438c:	4b6b      	ldr	r3, [pc, #428]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	4968      	ldr	r1, [pc, #416]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
 80043a0:	e025      	b.n	80043ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a2:	4b66      	ldr	r3, [pc, #408]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a65      	ldr	r2, [pc, #404]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043a8:	f043 0308 	orr.w	r3, r3, #8
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b63      	ldr	r3, [pc, #396]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	4960      	ldr	r1, [pc, #384]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043c0:	4b5e      	ldr	r3, [pc, #376]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	495b      	ldr	r1, [pc, #364]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd4c 	bl	8004e7c <RCC_SetFlashLatencyFromMSIRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e37a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ee:	f000 fc81 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	4950      	ldr	r1, [pc, #320]	; (8004540 <HAL_RCC_OscConfig+0x274>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_RCC_OscConfig+0x278>)
 800440c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800440e:	4b4e      	ldr	r3, [pc, #312]	; (8004548 <HAL_RCC_OscConfig+0x27c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fd36 	bl	8002e84 <HAL_InitTick>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d052      	beq.n	80044c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	e35e      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d032      	beq.n	8004494 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800442e:	4b43      	ldr	r3, [pc, #268]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a42      	ldr	r2, [pc, #264]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800443a:	f7fe fd73 	bl	8002f24 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004442:	f7fe fd6f 	bl	8002f24 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e347      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004454:	4b39      	ldr	r3, [pc, #228]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b33      	ldr	r3, [pc, #204]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4930      	ldr	r1, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	492b      	ldr	r1, [pc, #172]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
 8004492:	e01a      	b.n	80044ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044a0:	f7fe fd40 	bl	8002f24 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a8:	f7fe fd3c 	bl	8002f24 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e314      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f0      	bne.n	80044a8 <HAL_RCC_OscConfig+0x1dc>
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d073      	beq.n	80045be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x21c>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b0c      	cmp	r3, #12
 80044e0:	d10e      	bne.n	8004500 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <HAL_RCC_OscConfig+0x270>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d063      	beq.n	80045bc <HAL_RCC_OscConfig+0x2f0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d15f      	bne.n	80045bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e2f1      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x24c>
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e025      	b.n	8004564 <HAL_RCC_OscConfig+0x298>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004520:	d114      	bne.n	800454c <HAL_RCC_OscConfig+0x280>
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a05      	ldr	r2, [pc, #20]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b03      	ldr	r3, [pc, #12]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a02      	ldr	r2, [pc, #8]	; (800453c <HAL_RCC_OscConfig+0x270>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e013      	b.n	8004564 <HAL_RCC_OscConfig+0x298>
 800453c:	40021000 	.word	0x40021000
 8004540:	0801186c 	.word	0x0801186c
 8004544:	2000000c 	.word	0x2000000c
 8004548:	20000010 	.word	0x20000010
 800454c:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a9f      	ldr	r2, [pc, #636]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a9c      	ldr	r2, [pc, #624]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe fcda 	bl	8002f24 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fcd6 	bl	8002f24 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e2ae      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x2a8>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fcc6 	bl	8002f24 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe fcc2 	bl	8002f24 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e29a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x2d0>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d060      	beq.n	800468c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x310>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d119      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	4b7c      	ldr	r3, [pc, #496]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_OscConfig+0x328>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e277      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4973      	ldr	r1, [pc, #460]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	e040      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004612:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fc81 	bl	8002f24 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fc7d 	bl	8002f24 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e255      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	495f      	ldr	r1, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fc5d 	bl	8002f24 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fc59 	bl	8002f24 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e231      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d03c      	beq.n	8004712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fe fc38 	bl	8002f24 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b8:	f7fe fc34 	bl	8002f24 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e20c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3ec>
 80046d8:	e01b      	b.n	8004712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046da:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e0:	4a3b      	ldr	r2, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fe fc1b 	bl	8002f24 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fe fc17 	bl	8002f24 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1ef      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	4b32      	ldr	r3, [pc, #200]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a6 	beq.w	800486c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004724:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474c:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004764:	f7fe fbde 	bl	8002f24 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fe fbda 	bl	8002f24 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e1b2      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_RCC_OscConfig+0x508>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4d8>
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	4a0d      	ldr	r2, [pc, #52]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a2:	e029      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d115      	bne.n	80047d8 <HAL_RCC_OscConfig+0x50c>
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	4a03      	ldr	r2, [pc, #12]	; (80047d0 <HAL_RCC_OscConfig+0x504>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047cc:	e014      	b.n	80047f8 <HAL_RCC_OscConfig+0x52c>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	4b9a      	ldr	r3, [pc, #616]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a99      	ldr	r2, [pc, #612]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e8:	4b96      	ldr	r3, [pc, #600]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	4a95      	ldr	r2, [pc, #596]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80047f0:	f023 0304 	bic.w	r3, r3, #4
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d016      	beq.n	800482e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fe fb90 	bl	8002f24 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fe fb8c 	bl	8002f24 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e162      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	4b89      	ldr	r3, [pc, #548]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ed      	beq.n	8004808 <HAL_RCC_OscConfig+0x53c>
 800482c:	e015      	b.n	800485a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fe fb79 	bl	8002f24 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004834:	e00a      	b.n	800484c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004836:	f7fe fb75 	bl	8002f24 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	f241 3288 	movw	r2, #5000	; 0x1388
 8004844:	4293      	cmp	r3, r2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e14b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484c:	4b7d      	ldr	r3, [pc, #500]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1ed      	bne.n	8004836 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b78      	ldr	r3, [pc, #480]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a77      	ldr	r2, [pc, #476]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b00      	cmp	r3, #0
 8004876:	d03c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01c      	beq.n	80048ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004880:	4b70      	ldr	r3, [pc, #448]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004886:	4a6f      	ldr	r2, [pc, #444]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe fb48 	bl	8002f24 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004898:	f7fe fb44 	bl	8002f24 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e11c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048aa:	4b66      	ldr	r3, [pc, #408]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80048ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0ef      	beq.n	8004898 <HAL_RCC_OscConfig+0x5cc>
 80048b8:	e01b      	b.n	80048f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80048bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048c0:	4a60      	ldr	r2, [pc, #384]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ca:	f7fe fb2b 	bl	8002f24 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d2:	f7fe fb27 	bl	8002f24 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0ff      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e4:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80048e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ef      	bne.n	80048d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80f3 	beq.w	8004ae2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	2b02      	cmp	r3, #2
 8004902:	f040 80c9 	bne.w	8004a98 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004906:	4b4f      	ldr	r3, [pc, #316]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d12c      	bne.n	8004974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	3b01      	subs	r3, #1
 8004926:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d123      	bne.n	8004974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004936:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d11b      	bne.n	8004974 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d113      	bne.n	8004974 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	3b01      	subs	r3, #1
 800495a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d109      	bne.n	8004974 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	3b01      	subs	r3, #1
 800496e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d06b      	beq.n	8004a4c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d062      	beq.n	8004a40 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800497a:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0ac      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800498a:	4b2e      	ldr	r3, [pc, #184]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004994:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004996:	f7fe fac5 	bl	8002f24 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499e:	f7fe fac1 	bl	8002f24 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e099      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049bc:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <HAL_RCC_OscConfig+0x77c>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049cc:	3a01      	subs	r2, #1
 80049ce:	0112      	lsls	r2, r2, #4
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d6:	0212      	lsls	r2, r2, #8
 80049d8:	4311      	orrs	r1, r2
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049de:	0852      	lsrs	r2, r2, #1
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0552      	lsls	r2, r2, #21
 80049e4:	4311      	orrs	r1, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049ea:	0852      	lsrs	r2, r2, #1
 80049ec:	3a01      	subs	r2, #1
 80049ee:	0652      	lsls	r2, r2, #25
 80049f0:	4311      	orrs	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f6:	06d2      	lsls	r2, r2, #27
 80049f8:	430a      	orrs	r2, r1
 80049fa:	4912      	ldr	r1, [pc, #72]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a18:	f7fe fa84 	bl	8002f24 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fe fa80 	bl	8002f24 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e058      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_RCC_OscConfig+0x778>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a3e:	e050      	b.n	8004ae2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e04f      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
 8004a44:	40021000 	.word	0x40021000
 8004a48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4c:	4b27      	ldr	r3, [pc, #156]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d144      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a58:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a64:	4b21      	ldr	r3, [pc, #132]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a20      	ldr	r2, [pc, #128]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a70:	f7fe fa58 	bl	8002f24 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fe fa54 	bl	8002f24 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e02c      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8a:	4b18      	ldr	r3, [pc, #96]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f0      	beq.n	8004a78 <HAL_RCC_OscConfig+0x7ac>
 8004a96:	e024      	b.n	8004ae2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d01f      	beq.n	8004ade <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fa3b 	bl	8002f24 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fe fa37 	bl	8002f24 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e00f      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	4905      	ldr	r1, [pc, #20]	; (8004aec <HAL_RCC_OscConfig+0x820>)
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x824>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
 8004adc:	e001      	b.n	8004ae2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3720      	adds	r7, #32
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	feeefffc 	.word	0xfeeefffc

08004af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0e7      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b08:	4b75      	ldr	r3, [pc, #468]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d910      	bls.n	8004b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b72      	ldr	r3, [pc, #456]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 0207 	bic.w	r2, r3, #7
 8004b1e:	4970      	ldr	r1, [pc, #448]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b6e      	ldr	r3, [pc, #440]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0cf      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b66      	ldr	r3, [pc, #408]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d908      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b63      	ldr	r3, [pc, #396]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4960      	ldr	r1, [pc, #384]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04c      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d107      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d121      	bne.n	8004bca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0a6      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b92:	4b54      	ldr	r3, [pc, #336]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d115      	bne.n	8004bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e09a      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004baa:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e08e      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bba:	4b4a      	ldr	r3, [pc, #296]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e086      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bca:	4b46      	ldr	r3, [pc, #280]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 0203 	bic.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4943      	ldr	r1, [pc, #268]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bdc:	f7fe f9a2 	bl	8002f24 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fe f99e 	bl	8002f24 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e06e      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	4b3a      	ldr	r3, [pc, #232]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 020c 	and.w	r2, r3, #12
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1eb      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d208      	bcs.n	8004c3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	492b      	ldr	r1, [pc, #172]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d210      	bcs.n	8004c6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 0207 	bic.w	r2, r3, #7
 8004c50:	4923      	ldr	r1, [pc, #140]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d001      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e036      	b.n	8004cd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c76:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4918      	ldr	r1, [pc, #96]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4910      	ldr	r1, [pc, #64]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca8:	f000 f824 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004cac:	4602      	mov	r2, r0
 8004cae:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	490b      	ldr	r1, [pc, #44]	; (8004ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8004cba:	5ccb      	ldrb	r3, [r1, r3]
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <HAL_RCC_ClockConfig+0x1f8>)
 8004cc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe f8d9 	bl	8002e84 <HAL_InitTick>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40022000 	.word	0x40022000
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	0801186c 	.word	0x0801186c
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	20000010 	.word	0x20000010

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x34>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d11e      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d34:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e005      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e004      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d134      	bne.n	8004dec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d003      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0xac>
 8004d98:	e005      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d9a:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9c:	617b      	str	r3, [r7, #20]
      break;
 8004d9e:	e005      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004da2:	617b      	str	r3, [r7, #20]
      break;
 8004da4:	e002      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	617b      	str	r3, [r7, #20]
      break;
 8004daa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	3301      	adds	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	fb03 f202 	mul.w	r2, r3, r2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	0e5b      	lsrs	r3, r3, #25
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dec:	69bb      	ldr	r3, [r7, #24]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	08011884 	.word	0x08011884
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	007a1200 	.word	0x007a1200

08004e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4904      	ldr	r1, [pc, #16]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	0801187c 	.word	0x0801187c

08004e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e54:	f7ff ffda 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0adb      	lsrs	r3, r3, #11
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	0801187c 	.word	0x0801187c

08004e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e94:	f7ff f9b6 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004e98:	6178      	str	r0, [r7, #20]
 8004e9a:	e014      	b.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eb4:	f7ff f9a6 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d10b      	bne.n	8004ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d919      	bls.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ed8:	d902      	bls.n	8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eda:	2302      	movs	r3, #2
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e013      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e010      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d902      	bls.n	8004ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004eec:	2303      	movs	r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e00a      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d102      	bne.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef8:	2302      	movs	r3, #2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e004      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d101      	bne.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 0207 	bic.w	r2, r3, #7
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40022000 	.word	0x40022000

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f44:	2300      	movs	r3, #0
 8004f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d031      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f60:	d01a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f66:	d814      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f70:	d10f      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f72:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4a5c      	ldr	r2, [pc, #368]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f7e:	e00c      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f9de 	bl	8005348 <RCCEx_PLLSAI1_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	74fb      	strb	r3, [r7, #19]
      break;
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fa0:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	494e      	ldr	r1, [pc, #312]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fb6:	e001      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 809e 	beq.w	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fce:	4b46      	ldr	r3, [pc, #280]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b40      	ldr	r3, [pc, #256]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	4a3f      	ldr	r2, [pc, #252]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff0:	4b3d      	ldr	r3, [pc, #244]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005000:	4b3a      	ldr	r3, [pc, #232]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a39      	ldr	r2, [pc, #228]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500c:	f7fd ff8a 	bl	8002f24 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005012:	e009      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fd ff86 	bl	8002f24 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d902      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	74fb      	strb	r3, [r7, #19]
        break;
 8005026:	e005      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005028:	4b30      	ldr	r3, [pc, #192]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ef      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d15a      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800503a:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	429a      	cmp	r2, r3
 8005054:	d019      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	4b21      	ldr	r3, [pc, #132]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	4a1f      	ldr	r2, [pc, #124]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005072:	4b1d      	ldr	r3, [pc, #116]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800507a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005082:	4a19      	ldr	r2, [pc, #100]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fd ff46 	bl	8002f24 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00b      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd ff42 	bl	8002f24 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d902      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	74fb      	strb	r3, [r7, #19]
            break;
 80050b2:	e006      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ec      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	4904      	ldr	r1, [pc, #16]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050de:	e009      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	74bb      	strb	r3, [r7, #18]
 80050e4:	e006      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	7cfb      	ldrb	r3, [r7, #19]
 80050f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f4:	7c7b      	ldrb	r3, [r7, #17]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fa:	4b8a      	ldr	r3, [pc, #552]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fe:	4a89      	ldr	r2, [pc, #548]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005112:	4b84      	ldr	r3, [pc, #528]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f023 0203 	bic.w	r2, r3, #3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4980      	ldr	r1, [pc, #512]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005134:	4b7b      	ldr	r3, [pc, #492]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f023 020c 	bic.w	r2, r3, #12
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4978      	ldr	r1, [pc, #480]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005156:	4b73      	ldr	r3, [pc, #460]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005164:	496f      	ldr	r1, [pc, #444]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005178:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005186:	4967      	ldr	r1, [pc, #412]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	495e      	ldr	r1, [pc, #376]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051bc:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4956      	ldr	r1, [pc, #344]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051de:	4b51      	ldr	r3, [pc, #324]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	494d      	ldr	r1, [pc, #308]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d028      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005200:	4b48      	ldr	r3, [pc, #288]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	4945      	ldr	r1, [pc, #276]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521e:	d106      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005220:	4b40      	ldr	r3, [pc, #256]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a3f      	ldr	r2, [pc, #252]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522a:	60d3      	str	r3, [r2, #12]
 800522c:	e011      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005236:	d10c      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f882 	bl	8005348 <RCCEx_PLLSAI1_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d028      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800525e:	4b31      	ldr	r3, [pc, #196]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	492d      	ldr	r1, [pc, #180]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527e:	4b29      	ldr	r3, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a28      	ldr	r2, [pc, #160]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005288:	60d3      	str	r3, [r2, #12]
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f853 	bl	8005348 <RCCEx_PLLSAI1_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01c      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052bc:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ca:	4916      	ldr	r1, [pc, #88]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052da:	d10c      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	2102      	movs	r1, #2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f830 	bl	8005348 <RCCEx_PLLSAI1_Config>
 80052e8:	4603      	mov	r3, r0
 80052ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ec:	7cfb      	ldrb	r3, [r7, #19]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005308:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005310:	4904      	ldr	r1, [pc, #16]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005318:	7cbb      	ldrb	r3, [r7, #18]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6013      	str	r3, [r2, #0]
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000

08005348 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005356:	4b74      	ldr	r3, [pc, #464]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005362:	4b71      	ldr	r3, [pc, #452]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0203 	and.w	r2, r3, #3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d10d      	bne.n	800538e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
       ||
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800537a:	4b6b      	ldr	r3, [pc, #428]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
       ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d047      	beq.n	800541e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
 8005392:	e044      	b.n	800541e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d018      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x86>
 800539c:	2b03      	cmp	r3, #3
 800539e:	d825      	bhi.n	80053ec <RCCEx_PLLSAI1_Config+0xa4>
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d002      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0x62>
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d009      	beq.n	80053bc <RCCEx_PLLSAI1_Config+0x74>
 80053a8:	e020      	b.n	80053ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d11d      	bne.n	80053f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ba:	e01a      	b.n	80053f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053bc:	4b5a      	ldr	r3, [pc, #360]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d116      	bne.n	80053f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053cc:	e013      	b.n	80053f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053ce:	4b56      	ldr	r3, [pc, #344]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053da:	4b53      	ldr	r3, [pc, #332]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053ea:	e006      	b.n	80053fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      break;
 80053f0:	e004      	b.n	80053fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053f2:	bf00      	nop
 80053f4:	e002      	b.n	80053fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053f6:	bf00      	nop
 80053f8:	e000      	b.n	80053fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005402:	4b49      	ldr	r3, [pc, #292]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	430b      	orrs	r3, r1
 8005418:	4943      	ldr	r1, [pc, #268]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d17c      	bne.n	800551e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005424:	4b40      	ldr	r3, [pc, #256]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800542e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005430:	f7fd fd78 	bl	8002f24 <HAL_GetTick>
 8005434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005436:	e009      	b.n	800544c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005438:	f7fd fd74 	bl	8002f24 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d902      	bls.n	800544c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	73fb      	strb	r3, [r7, #15]
        break;
 800544a:	e005      	b.n	8005458 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800544c:	4b36      	ldr	r3, [pc, #216]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ef      	bne.n	8005438 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d15f      	bne.n	800551e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d110      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005464:	4b30      	ldr	r3, [pc, #192]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800546c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6892      	ldr	r2, [r2, #8]
 8005474:	0211      	lsls	r1, r2, #8
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68d2      	ldr	r2, [r2, #12]
 800547a:	06d2      	lsls	r2, r2, #27
 800547c:	430a      	orrs	r2, r1
 800547e:	492a      	ldr	r1, [pc, #168]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005480:	4313      	orrs	r3, r2
 8005482:	610b      	str	r3, [r1, #16]
 8005484:	e027      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d112      	bne.n	80054b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800548c:	4b26      	ldr	r3, [pc, #152]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005494:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6892      	ldr	r2, [r2, #8]
 800549c:	0211      	lsls	r1, r2, #8
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6912      	ldr	r2, [r2, #16]
 80054a2:	0852      	lsrs	r2, r2, #1
 80054a4:	3a01      	subs	r2, #1
 80054a6:	0552      	lsls	r2, r2, #21
 80054a8:	430a      	orrs	r2, r1
 80054aa:	491f      	ldr	r1, [pc, #124]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]
 80054b0:	e011      	b.n	80054d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6892      	ldr	r2, [r2, #8]
 80054c2:	0211      	lsls	r1, r2, #8
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6952      	ldr	r2, [r2, #20]
 80054c8:	0852      	lsrs	r2, r2, #1
 80054ca:	3a01      	subs	r2, #1
 80054cc:	0652      	lsls	r2, r2, #25
 80054ce:	430a      	orrs	r2, r1
 80054d0:	4915      	ldr	r1, [pc, #84]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a13      	ldr	r2, [pc, #76]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e2:	f7fd fd1f 	bl	8002f24 <HAL_GetTick>
 80054e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054e8:	e009      	b.n	80054fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ea:	f7fd fd1b 	bl	8002f24 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d902      	bls.n	80054fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	73fb      	strb	r3, [r7, #15]
          break;
 80054fc:	e005      	b.n	800550a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0ef      	beq.n	80054ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <RCCEx_PLLSAI1_Config+0x1e0>)
 800551a:	4313      	orrs	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021000 	.word	0x40021000

0800552c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e095      	b.n	800566a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554e:	d009      	beq.n	8005564 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
 8005556:	e005      	b.n	8005564 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fd f9e2 	bl	8002948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a4:	d902      	bls.n	80055ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055a6:	2300      	movs	r3, #0
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	e002      	b.n	80055b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055ba:	d007      	beq.n	80055cc <HAL_SPI_Init+0xa0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	ea42 0103 	orr.w	r1, r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 0204 	and.w	r2, r3, #4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005648:	ea42 0103 	orr.w	r1, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b088      	sub	sp, #32
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	4613      	mov	r3, r2
 8005680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_SPI_Transmit+0x22>
 8005690:	2302      	movs	r3, #2
 8005692:	e15f      	b.n	8005954 <HAL_SPI_Transmit+0x2e2>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800569c:	f7fd fc42 	bl	8002f24 <HAL_GetTick>
 80056a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d002      	beq.n	80056b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056b6:	e148      	b.n	800594a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Transmit+0x52>
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056c8:	e13f      	b.n	800594a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2203      	movs	r2, #3
 80056ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	88fa      	ldrh	r2, [r7, #6]
 80056e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005714:	d10f      	bne.n	8005736 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d007      	beq.n	8005754 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800575c:	d94f      	bls.n	80057fe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0xfa>
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d142      	bne.n	80057f2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	881a      	ldrh	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	1c9a      	adds	r2, r3, #2
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005790:	e02f      	b.n	80057f2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b02      	cmp	r3, #2
 800579e:	d112      	bne.n	80057c6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	1c9a      	adds	r2, r3, #2
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057c4:	e015      	b.n	80057f2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c6:	f7fd fbad 	bl	8002f24 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d803      	bhi.n	80057de <HAL_SPI_Transmit+0x16c>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d102      	bne.n	80057e4 <HAL_SPI_Transmit+0x172>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057f0:	e0ab      	b.n	800594a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1ca      	bne.n	8005792 <HAL_SPI_Transmit+0x120>
 80057fc:	e080      	b.n	8005900 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_Transmit+0x19a>
 8005806:	8afb      	ldrh	r3, [r7, #22]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d174      	bne.n	80058f6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d912      	bls.n	800583c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	881a      	ldrh	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b02      	subs	r3, #2
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
 800583a:	e05c      	b.n	80058f6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	330c      	adds	r3, #12
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005862:	e048      	b.n	80058f6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d12b      	bne.n	80058ca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d912      	bls.n	80058a2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	881a      	ldrh	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	1c9a      	adds	r2, r3, #2
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b02      	subs	r3, #2
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a0:	e029      	b.n	80058f6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	1c5a      	adds	r2, r3, #1
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058c8:	e015      	b.n	80058f6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ca:	f7fd fb2b 	bl	8002f24 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d803      	bhi.n	80058e2 <HAL_SPI_Transmit+0x270>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d102      	bne.n	80058e8 <HAL_SPI_Transmit+0x276>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80058f4:	e029      	b.n	800594a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1b1      	bne.n	8005864 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f947 	bl	8005b98 <SPI_EndRxTxTransaction>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2220      	movs	r2, #32
 8005914:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	613b      	str	r3, [r7, #16]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	77fb      	strb	r3, [r7, #31]
 8005940:	e003      	b.n	800594a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005952:	7ffb      	ldrb	r3, [r7, #31]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800596c:	f7fd fada 	bl	8002f24 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	4413      	add	r3, r2
 800597a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800597c:	f7fd fad2 	bl	8002f24 <HAL_GetTick>
 8005980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005982:	4b39      	ldr	r3, [pc, #228]	; (8005a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	015b      	lsls	r3, r3, #5
 8005988:	0d1b      	lsrs	r3, r3, #20
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005992:	e054      	b.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d050      	beq.n	8005a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599c:	f7fd fac2 	bl	8002f24 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d902      	bls.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d13d      	bne.n	8005a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ca:	d111      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d4:	d004      	beq.n	80059e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059de:	d107      	bne.n	80059f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059f8:	d10f      	bne.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e017      	b.n	8005a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d19b      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000000c 	.word	0x2000000c

08005a6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a7e:	f7fd fa51 	bl	8002f24 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a8e:	f7fd fa49 	bl	8002f24 <HAL_GetTick>
 8005a92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a9c:	4b3d      	ldr	r3, [pc, #244]	; (8005b94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00da      	lsls	r2, r3, #3
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	0d1b      	lsrs	r3, r3, #20
 8005aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aae:	fb02 f303 	mul.w	r3, r2, r3
 8005ab2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ab4:	e060      	b.n	8005b78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005abc:	d107      	bne.n	8005ace <SPI_WaitFifoStateUntilTimeout+0x62>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d050      	beq.n	8005b78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ad6:	f7fd fa25 	bl	8002f24 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d902      	bls.n	8005aec <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d13d      	bne.n	8005b68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005afa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b04:	d111      	bne.n	8005b2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b0e:	d004      	beq.n	8005b1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d107      	bne.n	8005b2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	d10f      	bne.n	8005b54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e010      	b.n	8005b8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4013      	ands	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d196      	bne.n	8005ab6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3728      	adds	r7, #40	; 0x28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	2000000c 	.word	0x2000000c

08005b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff ff5b 	bl	8005a6c <SPI_WaitFifoStateUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc0:	f043 0220 	orr.w	r2, r3, #32
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e027      	b.n	8005c1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7ff fec0 	bl	800595c <SPI_WaitFlagStateUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e014      	b.n	8005c1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff34 	bl	8005a6c <SPI_WaitFifoStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e000      	b.n	8005c1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e049      	b.n	8005cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fc fee0 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3304      	adds	r3, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f000 fa6a 	bl	800613c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b082      	sub	sp, #8
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e049      	b.n	8005d78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7fc fe69 	bl	80029d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2202      	movs	r2, #2
 8005d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f000 fa13 	bl	800613c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e0ff      	b.n	8005f9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b14      	cmp	r3, #20
 8005daa:	f200 80f0 	bhi.w	8005f8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005f8f 	.word	0x08005f8f
 8005dbc:	08005f8f 	.word	0x08005f8f
 8005dc0:	08005f8f 	.word	0x08005f8f
 8005dc4:	08005e49 	.word	0x08005e49
 8005dc8:	08005f8f 	.word	0x08005f8f
 8005dcc:	08005f8f 	.word	0x08005f8f
 8005dd0:	08005f8f 	.word	0x08005f8f
 8005dd4:	08005e8b 	.word	0x08005e8b
 8005dd8:	08005f8f 	.word	0x08005f8f
 8005ddc:	08005f8f 	.word	0x08005f8f
 8005de0:	08005f8f 	.word	0x08005f8f
 8005de4:	08005ecb 	.word	0x08005ecb
 8005de8:	08005f8f 	.word	0x08005f8f
 8005dec:	08005f8f 	.word	0x08005f8f
 8005df0:	08005f8f 	.word	0x08005f8f
 8005df4:	08005f0d 	.word	0x08005f0d
 8005df8:	08005f8f 	.word	0x08005f8f
 8005dfc:	08005f8f 	.word	0x08005f8f
 8005e00:	08005f8f 	.word	0x08005f8f
 8005e04:	08005f4d 	.word	0x08005f4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f9f8 	bl	8006204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0208 	orr.w	r2, r2, #8
 8005e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
      break;
 8005e46:	e0a5      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fa54 	bl	80062fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
      break;
 8005e88:	e084      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 faad 	bl	80063f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0204 	bic.w	r2, r2, #4
 8005eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69d9      	ldr	r1, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	61da      	str	r2, [r3, #28]
      break;
 8005ec8:	e064      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fb05 	bl	80064e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	021a      	lsls	r2, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	61da      	str	r2, [r3, #28]
      break;
 8005f0a:	e043      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fb42 	bl	800659c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f4a:	e023      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fb7a 	bl	800664c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f8c:	e002      	b.n	8005f94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop

08005fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e0b6      	b.n	8006132 <HAL_TIM_ConfigClockSource+0x18a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006000:	d03e      	beq.n	8006080 <HAL_TIM_ConfigClockSource+0xd8>
 8006002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006006:	f200 8087 	bhi.w	8006118 <HAL_TIM_ConfigClockSource+0x170>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	f000 8086 	beq.w	800611e <HAL_TIM_ConfigClockSource+0x176>
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d87f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006018:	2b70      	cmp	r3, #112	; 0x70
 800601a:	d01a      	beq.n	8006052 <HAL_TIM_ConfigClockSource+0xaa>
 800601c:	2b70      	cmp	r3, #112	; 0x70
 800601e:	d87b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006020:	2b60      	cmp	r3, #96	; 0x60
 8006022:	d050      	beq.n	80060c6 <HAL_TIM_ConfigClockSource+0x11e>
 8006024:	2b60      	cmp	r3, #96	; 0x60
 8006026:	d877      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006028:	2b50      	cmp	r3, #80	; 0x50
 800602a:	d03c      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xfe>
 800602c:	2b50      	cmp	r3, #80	; 0x50
 800602e:	d873      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d058      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0x13e>
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d86f      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006038:	2b30      	cmp	r3, #48	; 0x30
 800603a:	d064      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15e>
 800603c:	2b30      	cmp	r3, #48	; 0x30
 800603e:	d86b      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006040:	2b20      	cmp	r3, #32
 8006042:	d060      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15e>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d867      	bhi.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
 8006048:	2b00      	cmp	r3, #0
 800604a:	d05c      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15e>
 800604c:	2b10      	cmp	r3, #16
 800604e:	d05a      	beq.n	8006106 <HAL_TIM_ConfigClockSource+0x15e>
 8006050:	e062      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006062:	f000 fbc7 	bl	80067f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	609a      	str	r2, [r3, #8]
      break;
 800607e:	e04f      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006090:	f000 fbb0 	bl	80067f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060a2:	609a      	str	r2, [r3, #8]
      break;
 80060a4:	e03c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b2:	461a      	mov	r2, r3
 80060b4:	f000 fb24 	bl	8006700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2150      	movs	r1, #80	; 0x50
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb7d 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 80060c4:	e02c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060d2:	461a      	mov	r2, r3
 80060d4:	f000 fb43 	bl	800675e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2160      	movs	r1, #96	; 0x60
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fb6d 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 80060e4:	e01c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f2:	461a      	mov	r2, r3
 80060f4:	f000 fb04 	bl	8006700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fb5d 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8006104:	e00c      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4619      	mov	r1, r3
 8006110:	4610      	mov	r0, r2
 8006112:	f000 fb54 	bl	80067be <TIM_ITRx_SetConfig>
      break;
 8006116:	e003      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e000      	b.n	8006120 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800611e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <TIM_Base_SetConfig+0xbc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_Base_SetConfig+0x20>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615a:	d108      	bne.n	800616e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <TIM_Base_SetConfig+0xbc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00b      	beq.n	800618e <TIM_Base_SetConfig+0x52>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617c:	d007      	beq.n	800618e <TIM_Base_SetConfig+0x52>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <TIM_Base_SetConfig+0xc0>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_Base_SetConfig+0x52>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <TIM_Base_SetConfig+0xc4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d108      	bne.n	80061a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <TIM_Base_SetConfig+0xbc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_Base_SetConfig+0xa0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <TIM_Base_SetConfig+0xc0>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_Base_SetConfig+0xa0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <TIM_Base_SetConfig+0xc4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d103      	bne.n	80061e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	615a      	str	r2, [r3, #20]
}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400

08006204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f023 0201 	bic.w	r2, r3, #1
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0303 	bic.w	r3, r3, #3
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f023 0302 	bic.w	r3, r3, #2
 8006250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a24      	ldr	r2, [pc, #144]	; (80062f0 <TIM_OC1_SetConfig+0xec>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_OC1_SetConfig+0x70>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a23      	ldr	r2, [pc, #140]	; (80062f4 <TIM_OC1_SetConfig+0xf0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC1_SetConfig+0x70>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <TIM_OC1_SetConfig+0xf4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10c      	bne.n	800628e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0308 	bic.w	r3, r3, #8
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0304 	bic.w	r3, r3, #4
 800628c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a17      	ldr	r2, [pc, #92]	; (80062f0 <TIM_OC1_SetConfig+0xec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_OC1_SetConfig+0xa2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a16      	ldr	r2, [pc, #88]	; (80062f4 <TIM_OC1_SetConfig+0xf0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_OC1_SetConfig+0xa2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a15      	ldr	r2, [pc, #84]	; (80062f8 <TIM_OC1_SetConfig+0xf4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d111      	bne.n	80062ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400

080062fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f023 0210 	bic.w	r2, r3, #16
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f023 0320 	bic.w	r3, r3, #32
 800634a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a22      	ldr	r2, [pc, #136]	; (80063e4 <TIM_OC2_SetConfig+0xe8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d10d      	bne.n	800637c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800637a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <TIM_OC2_SetConfig+0xe8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_OC2_SetConfig+0x98>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <TIM_OC2_SetConfig+0xec>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC2_SetConfig+0x98>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a17      	ldr	r2, [pc, #92]	; (80063ec <TIM_OC2_SetConfig+0xf0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d113      	bne.n	80063bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800639a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40014000 	.word	0x40014000
 80063ec:	40014400 	.word	0x40014400

080063f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a1b      	ldr	r3, [r3, #32]
 8006404:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0303 	bic.w	r3, r3, #3
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800643c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <TIM_OC3_SetConfig+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d10d      	bne.n	800646e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800646c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <TIM_OC3_SetConfig+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_OC3_SetConfig+0x96>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <TIM_OC3_SetConfig+0xe8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_OC3_SetConfig+0x96>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a16      	ldr	r2, [pc, #88]	; (80064dc <TIM_OC3_SetConfig+0xec>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	011b      	lsls	r3, r3, #4
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	621a      	str	r2, [r3, #32]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400

080064e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800652e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	031b      	lsls	r3, r3, #12
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a14      	ldr	r2, [pc, #80]	; (8006590 <TIM_OC4_SetConfig+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_OC4_SetConfig+0x74>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <TIM_OC4_SetConfig+0xb4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC4_SetConfig+0x74>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <TIM_OC4_SetConfig+0xb8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d109      	bne.n	8006568 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800655a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	019b      	lsls	r3, r3, #6
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400

0800659c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a13      	ldr	r2, [pc, #76]	; (8006640 <TIM_OC5_SetConfig+0xa4>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_OC5_SetConfig+0x6a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a12      	ldr	r2, [pc, #72]	; (8006644 <TIM_OC5_SetConfig+0xa8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC5_SetConfig+0x6a>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a11      	ldr	r2, [pc, #68]	; (8006648 <TIM_OC5_SetConfig+0xac>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d109      	bne.n	800661a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	40012c00 	.word	0x40012c00
 8006644:	40014000 	.word	0x40014000
 8006648:	40014400 	.word	0x40014400

0800664c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800667a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	021b      	lsls	r3, r3, #8
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	051b      	lsls	r3, r3, #20
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <TIM_OC6_SetConfig+0xa8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d007      	beq.n	80066b8 <TIM_OC6_SetConfig+0x6c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <TIM_OC6_SetConfig+0xac>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d003      	beq.n	80066b8 <TIM_OC6_SetConfig+0x6c>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <TIM_OC6_SetConfig+0xb0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d109      	bne.n	80066cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	621a      	str	r2, [r3, #32]
}
 80066e6:	bf00      	nop
 80066e8:	371c      	adds	r7, #28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400

08006700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f023 030a 	bic.w	r3, r3, #10
 800673c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800675e:	b480      	push	{r7}
 8006760:	b087      	sub	sp, #28
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0210 	bic.w	r2, r3, #16
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	031b      	lsls	r3, r3, #12
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800679a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	f043 0307 	orr.w	r3, r3, #7
 80067e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800680e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	021a      	lsls	r2, r3, #8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	431a      	orrs	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	609a      	str	r2, [r3, #8]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d109      	bne.n	8006858 <HAL_TIMEx_PWMN_Start+0x24>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b01      	cmp	r3, #1
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e022      	b.n	800689e <HAL_TIMEx_PWMN_Start+0x6a>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d109      	bne.n	8006872 <HAL_TIMEx_PWMN_Start+0x3e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	bf14      	ite	ne
 800686a:	2301      	movne	r3, #1
 800686c:	2300      	moveq	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	e015      	b.n	800689e <HAL_TIMEx_PWMN_Start+0x6a>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b08      	cmp	r3, #8
 8006876:	d109      	bne.n	800688c <HAL_TIMEx_PWMN_Start+0x58>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e008      	b.n	800689e <HAL_TIMEx_PWMN_Start+0x6a>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	bf14      	ite	ne
 8006898:	2301      	movne	r3, #1
 800689a:	2300      	moveq	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e05a      	b.n	800695c <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <HAL_TIMEx_PWMN_Start+0x82>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	e013      	b.n	80068de <HAL_TIMEx_PWMN_Start+0xaa>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d104      	bne.n	80068c6 <HAL_TIMEx_PWMN_Start+0x92>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068c4:	e00b      	b.n	80068de <HAL_TIMEx_PWMN_Start+0xaa>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d104      	bne.n	80068d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068d4:	e003      	b.n	80068de <HAL_TIMEx_PWMN_Start+0xaa>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2204      	movs	r2, #4
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f97e 	bl	8006be8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_TIMEx_PWMN_Start+0x130>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_TIMEx_PWMN_Start+0xe6>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d004      	beq.n	800691a <HAL_TIMEx_PWMN_Start+0xe6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <HAL_TIMEx_PWMN_Start+0x134>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d115      	bne.n	8006946 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_TIMEx_PWMN_Start+0x138>)
 8006922:	4013      	ands	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b06      	cmp	r3, #6
 800692a:	d015      	beq.n	8006958 <HAL_TIMEx_PWMN_Start+0x124>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006932:	d011      	beq.n	8006958 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006944:	e008      	b.n	8006958 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e000      	b.n	800695a <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006958:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40014000 	.word	0x40014000
 800696c:	00010007 	.word	0x00010007

08006970 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f930 	bl	8006be8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a1a      	ldr	r2, [r3, #32]
 800698e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006992:	4013      	ands	r3, r2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10f      	bne.n	80069b8 <HAL_TIMEx_PWMN_Stop+0x48>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	f240 4344 	movw	r3, #1092	; 0x444
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d107      	bne.n	80069b8 <HAL_TIMEx_PWMN_Stop+0x48>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a1a      	ldr	r2, [r3, #32]
 80069be:	f241 1311 	movw	r3, #4369	; 0x1111
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10f      	bne.n	80069e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a1a      	ldr	r2, [r3, #32]
 80069ce:	f240 4344 	movw	r3, #1092	; 0x444
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d107      	bne.n	80069e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_TIMEx_PWMN_Stop+0x88>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069f6:	e013      	b.n	8006a20 <HAL_TIMEx_PWMN_Stop+0xb0>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d104      	bne.n	8006a08 <HAL_TIMEx_PWMN_Stop+0x98>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a06:	e00b      	b.n	8006a20 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d104      	bne.n	8006a18 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a16:	e003      	b.n	8006a20 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e04f      	b.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a10      	ldr	r2, [pc, #64]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10c      	bne.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40014000 	.word	0x40014000

08006af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e060      	b.n	8006bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d115      	bne.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	051b      	lsls	r3, r3, #20
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40012c00 	.word	0x40012c00

08006be8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	f003 030f 	and.w	r3, r3, #15
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	43db      	mvns	r3, r3
 8006c0a:	401a      	ands	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1a      	ldr	r2, [r3, #32]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c20:	431a      	orrs	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e040      	b.n	8006cc6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fb ff31 	bl	8002abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	; 0x24
 8006c5e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fba7 	bl	80073cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f978 	bl	8006f74 <UART_SetConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e01b      	b.n	8006cc6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc26 	bl	8007510 <UART_CheckIdleState>
 8006cc4:	4603      	mov	r3, r0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b08a      	sub	sp, #40	; 0x28
 8006cd2:	af02      	add	r7, sp, #8
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	d178      	bne.n	8006dd8 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_UART_Transmit+0x24>
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e071      	b.n	8006dda <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2221      	movs	r2, #33	; 0x21
 8006d02:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d04:	f7fc f90e 	bl	8002f24 <HAL_GetTick>
 8006d08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	88fa      	ldrh	r2, [r7, #6]
 8006d0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d108      	bne.n	8006d36 <HAL_UART_Transmit+0x68>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	e003      	b.n	8006d3e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d3e:	e030      	b.n	8006da2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2200      	movs	r2, #0
 8006d48:	2180      	movs	r1, #128	; 0x80
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fc88 	bl	8007660 <UART_WaitOnFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e03c      	b.n	8006dda <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	881a      	ldrh	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d72:	b292      	uxth	r2, r2
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	3302      	adds	r3, #2
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	e008      	b.n	8006d90 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	781a      	ldrb	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	b292      	uxth	r2, r2
 8006d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1c8      	bne.n	8006d40 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2140      	movs	r1, #64	; 0x40
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fc51 	bl	8007660 <UART_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d004      	beq.n	8006dce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e005      	b.n	8006dda <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3720      	adds	r7, #32
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b08a      	sub	sp, #40	; 0x28
 8006de6:	af02      	add	r7, sp, #8
 8006de8:	60f8      	str	r0, [r7, #12]
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	f040 80b6 	bne.w	8006f6a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <HAL_UART_Receive+0x28>
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e0ae      	b.n	8006f6c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2222      	movs	r2, #34	; 0x22
 8006e1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e24:	f7fc f87e 	bl	8002f24 <HAL_GetTick>
 8006e28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	88fa      	ldrh	r2, [r7, #6]
 8006e2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d10e      	bne.n	8006e62 <HAL_UART_Receive+0x80>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d105      	bne.n	8006e58 <HAL_UART_Receive+0x76>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e56:	e02d      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	22ff      	movs	r2, #255	; 0xff
 8006e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e60:	e028      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <HAL_UART_Receive+0xa4>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <HAL_UART_Receive+0x9a>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e7a:	e01b      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	227f      	movs	r2, #127	; 0x7f
 8006e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e84:	e016      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e8e:	d10d      	bne.n	8006eac <HAL_UART_Receive+0xca>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <HAL_UART_Receive+0xc0>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	227f      	movs	r2, #127	; 0x7f
 8006e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ea0:	e008      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	223f      	movs	r2, #63	; 0x3f
 8006ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eaa:	e003      	b.n	8006eb4 <HAL_UART_Receive+0xd2>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec4:	d108      	bne.n	8006ed8 <HAL_UART_Receive+0xf6>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	e003      	b.n	8006ee0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ee0:	e037      	b.n	8006f52 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2120      	movs	r1, #32
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fbb7 	bl	8007660 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e033      	b.n	8006f6c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10c      	bne.n	8006f24 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	8a7b      	ldrh	r3, [r7, #18]
 8006f14:	4013      	ands	r3, r2
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	3302      	adds	r3, #2
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e00d      	b.n	8006f40 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	8a7b      	ldrh	r3, [r7, #18]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	4013      	ands	r3, r2
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1c1      	bne.n	8006ee2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3720      	adds	r7, #32
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f78:	b08a      	sub	sp, #40	; 0x28
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	689a      	ldr	r2, [r3, #8]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	4bb4      	ldr	r3, [pc, #720]	; (8007274 <UART_SetConfig+0x300>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	6812      	ldr	r2, [r2, #0]
 8006faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fac:	430b      	orrs	r3, r1
 8006fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4aa9      	ldr	r2, [pc, #676]	; (8007278 <UART_SetConfig+0x304>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4aa0      	ldr	r2, [pc, #640]	; (800727c <UART_SetConfig+0x308>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d126      	bne.n	800704c <UART_SetConfig+0xd8>
 8006ffe:	4ba0      	ldr	r3, [pc, #640]	; (8007280 <UART_SetConfig+0x30c>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b03      	cmp	r3, #3
 800700a:	d81b      	bhi.n	8007044 <UART_SetConfig+0xd0>
 800700c:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <UART_SetConfig+0xa0>)
 800700e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007012:	bf00      	nop
 8007014:	08007025 	.word	0x08007025
 8007018:	08007035 	.word	0x08007035
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800703d 	.word	0x0800703d
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702a:	e080      	b.n	800712e <UART_SetConfig+0x1ba>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007032:	e07c      	b.n	800712e <UART_SetConfig+0x1ba>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703a:	e078      	b.n	800712e <UART_SetConfig+0x1ba>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e074      	b.n	800712e <UART_SetConfig+0x1ba>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e070      	b.n	800712e <UART_SetConfig+0x1ba>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a8c      	ldr	r2, [pc, #560]	; (8007284 <UART_SetConfig+0x310>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d138      	bne.n	80070c8 <UART_SetConfig+0x154>
 8007056:	4b8a      	ldr	r3, [pc, #552]	; (8007280 <UART_SetConfig+0x30c>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b0c      	cmp	r3, #12
 8007062:	d82d      	bhi.n	80070c0 <UART_SetConfig+0x14c>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0xf8>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070a1 	.word	0x080070a1
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070c1 	.word	0x080070c1
 8007078:	080070c1 	.word	0x080070c1
 800707c:	080070b1 	.word	0x080070b1
 8007080:	080070c1 	.word	0x080070c1
 8007084:	080070c1 	.word	0x080070c1
 8007088:	080070c1 	.word	0x080070c1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070c1 	.word	0x080070c1
 8007094:	080070c1 	.word	0x080070c1
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070b9 	.word	0x080070b9
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a6:	e042      	b.n	800712e <UART_SetConfig+0x1ba>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ae:	e03e      	b.n	800712e <UART_SetConfig+0x1ba>
 80070b0:	2304      	movs	r3, #4
 80070b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b6:	e03a      	b.n	800712e <UART_SetConfig+0x1ba>
 80070b8:	2308      	movs	r3, #8
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e036      	b.n	800712e <UART_SetConfig+0x1ba>
 80070c0:	2310      	movs	r3, #16
 80070c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c6:	e032      	b.n	800712e <UART_SetConfig+0x1ba>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6a      	ldr	r2, [pc, #424]	; (8007278 <UART_SetConfig+0x304>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d12a      	bne.n	8007128 <UART_SetConfig+0x1b4>
 80070d2:	4b6b      	ldr	r3, [pc, #428]	; (8007280 <UART_SetConfig+0x30c>)
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e0:	d01a      	beq.n	8007118 <UART_SetConfig+0x1a4>
 80070e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e6:	d81b      	bhi.n	8007120 <UART_SetConfig+0x1ac>
 80070e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ec:	d00c      	beq.n	8007108 <UART_SetConfig+0x194>
 80070ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f2:	d815      	bhi.n	8007120 <UART_SetConfig+0x1ac>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <UART_SetConfig+0x18c>
 80070f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fc:	d008      	beq.n	8007110 <UART_SetConfig+0x19c>
 80070fe:	e00f      	b.n	8007120 <UART_SetConfig+0x1ac>
 8007100:	2300      	movs	r3, #0
 8007102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007106:	e012      	b.n	800712e <UART_SetConfig+0x1ba>
 8007108:	2302      	movs	r3, #2
 800710a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710e:	e00e      	b.n	800712e <UART_SetConfig+0x1ba>
 8007110:	2304      	movs	r3, #4
 8007112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007116:	e00a      	b.n	800712e <UART_SetConfig+0x1ba>
 8007118:	2308      	movs	r3, #8
 800711a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711e:	e006      	b.n	800712e <UART_SetConfig+0x1ba>
 8007120:	2310      	movs	r3, #16
 8007122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007126:	e002      	b.n	800712e <UART_SetConfig+0x1ba>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a51      	ldr	r2, [pc, #324]	; (8007278 <UART_SetConfig+0x304>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d17a      	bne.n	800722e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800713c:	2b08      	cmp	r3, #8
 800713e:	d824      	bhi.n	800718a <UART_SetConfig+0x216>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <UART_SetConfig+0x1d4>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	0800716d 	.word	0x0800716d
 800714c:	0800718b 	.word	0x0800718b
 8007150:	08007175 	.word	0x08007175
 8007154:	0800718b 	.word	0x0800718b
 8007158:	0800717b 	.word	0x0800717b
 800715c:	0800718b 	.word	0x0800718b
 8007160:	0800718b 	.word	0x0800718b
 8007164:	0800718b 	.word	0x0800718b
 8007168:	08007183 	.word	0x08007183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800716c:	f7fd fe5a 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8007170:	61f8      	str	r0, [r7, #28]
        break;
 8007172:	e010      	b.n	8007196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007174:	4b44      	ldr	r3, [pc, #272]	; (8007288 <UART_SetConfig+0x314>)
 8007176:	61fb      	str	r3, [r7, #28]
        break;
 8007178:	e00d      	b.n	8007196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717a:	f7fd fdbb 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 800717e:	61f8      	str	r0, [r7, #28]
        break;
 8007180:	e009      	b.n	8007196 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007186:	61fb      	str	r3, [r7, #28]
        break;
 8007188:	e005      	b.n	8007196 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8107 	beq.w	80073ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d305      	bcc.n	80071ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d903      	bls.n	80071c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071c0:	e0f4      	b.n	80073ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	2200      	movs	r2, #0
 80071c6:	461c      	mov	r4, r3
 80071c8:	4615      	mov	r5, r2
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	022b      	lsls	r3, r5, #8
 80071d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071d8:	0222      	lsls	r2, r4, #8
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	6849      	ldr	r1, [r1, #4]
 80071de:	0849      	lsrs	r1, r1, #1
 80071e0:	2000      	movs	r0, #0
 80071e2:	4688      	mov	r8, r1
 80071e4:	4681      	mov	r9, r0
 80071e6:	eb12 0a08 	adds.w	sl, r2, r8
 80071ea:	eb43 0b09 	adc.w	fp, r3, r9
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	603b      	str	r3, [r7, #0]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	4650      	mov	r0, sl
 80071fe:	4659      	mov	r1, fp
 8007200:	f7f9 fd52 	bl	8000ca8 <__aeabi_uldivmod>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4613      	mov	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007212:	d308      	bcc.n	8007226 <UART_SetConfig+0x2b2>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721a:	d204      	bcs.n	8007226 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	60da      	str	r2, [r3, #12]
 8007224:	e0c2      	b.n	80073ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800722c:	e0be      	b.n	80073ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007236:	d16a      	bne.n	800730e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800723c:	2b08      	cmp	r3, #8
 800723e:	d834      	bhi.n	80072aa <UART_SetConfig+0x336>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x2d4>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800728d 	.word	0x0800728d
 8007250:	08007295 	.word	0x08007295
 8007254:	080072ab 	.word	0x080072ab
 8007258:	0800729b 	.word	0x0800729b
 800725c:	080072ab 	.word	0x080072ab
 8007260:	080072ab 	.word	0x080072ab
 8007264:	080072ab 	.word	0x080072ab
 8007268:	080072a3 	.word	0x080072a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fd fdda 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8007270:	61f8      	str	r0, [r7, #28]
        break;
 8007272:	e020      	b.n	80072b6 <UART_SetConfig+0x342>
 8007274:	efff69f3 	.word	0xefff69f3
 8007278:	40008000 	.word	0x40008000
 800727c:	40013800 	.word	0x40013800
 8007280:	40021000 	.word	0x40021000
 8007284:	40004400 	.word	0x40004400
 8007288:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800728c:	f7fd fde0 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8007290:	61f8      	str	r0, [r7, #28]
        break;
 8007292:	e010      	b.n	80072b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007294:	4b4c      	ldr	r3, [pc, #304]	; (80073c8 <UART_SetConfig+0x454>)
 8007296:	61fb      	str	r3, [r7, #28]
        break;
 8007298:	e00d      	b.n	80072b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729a:	f7fd fd2b 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 800729e:	61f8      	str	r0, [r7, #28]
        break;
 80072a0:	e009      	b.n	80072b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a6:	61fb      	str	r3, [r7, #28]
        break;
 80072a8:	e005      	b.n	80072b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d077      	beq.n	80073ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	005a      	lsls	r2, r3, #1
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	085b      	lsrs	r3, r3, #1
 80072c6:	441a      	add	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d916      	bls.n	8007306 <UART_SetConfig+0x392>
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072de:	d212      	bcs.n	8007306 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f023 030f 	bic.w	r3, r3, #15
 80072e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f003 0307 	and.w	r3, r3, #7
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	8afa      	ldrh	r2, [r7, #22]
 8007302:	60da      	str	r2, [r3, #12]
 8007304:	e052      	b.n	80073ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800730c:	e04e      	b.n	80073ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800730e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007312:	2b08      	cmp	r3, #8
 8007314:	d827      	bhi.n	8007366 <UART_SetConfig+0x3f2>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0x3a8>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007341 	.word	0x08007341
 8007320:	08007349 	.word	0x08007349
 8007324:	08007351 	.word	0x08007351
 8007328:	08007367 	.word	0x08007367
 800732c:	08007357 	.word	0x08007357
 8007330:	08007367 	.word	0x08007367
 8007334:	08007367 	.word	0x08007367
 8007338:	08007367 	.word	0x08007367
 800733c:	0800735f 	.word	0x0800735f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fd fd70 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8007344:	61f8      	str	r0, [r7, #28]
        break;
 8007346:	e014      	b.n	8007372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007348:	f7fd fd82 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 800734c:	61f8      	str	r0, [r7, #28]
        break;
 800734e:	e010      	b.n	8007372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007350:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <UART_SetConfig+0x454>)
 8007352:	61fb      	str	r3, [r7, #28]
        break;
 8007354:	e00d      	b.n	8007372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007356:	f7fd fccd 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 800735a:	61f8      	str	r0, [r7, #28]
        break;
 800735c:	e009      	b.n	8007372 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007362:	61fb      	str	r3, [r7, #28]
        break;
 8007364:	e005      	b.n	8007372 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007370:	bf00      	nop
    }

    if (pclk != 0U)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d019      	beq.n	80073ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	085a      	lsrs	r2, r3, #1
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	441a      	add	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d909      	bls.n	80073a6 <UART_SetConfig+0x432>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007398:	d205      	bcs.n	80073a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60da      	str	r2, [r3, #12]
 80073a4:	e002      	b.n	80073ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3728      	adds	r7, #40	; 0x28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073c6:	bf00      	nop
 80073c8:	00f42400 	.word	0x00f42400

080073cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00a      	beq.n	800743a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	f003 0310 	and.w	r3, r3, #16
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01a      	beq.n	80074e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ca:	d10a      	bne.n	80074e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b098      	sub	sp, #96	; 0x60
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007520:	f7fb fd00 	bl	8002f24 <HAL_GetTick>
 8007524:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b08      	cmp	r3, #8
 8007532:	d12e      	bne.n	8007592 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f88c 	bl	8007660 <UART_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d021      	beq.n	8007592 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007562:	653b      	str	r3, [r7, #80]	; 0x50
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	647b      	str	r3, [r7, #68]	; 0x44
 800756e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800757a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2220      	movs	r2, #32
 8007584:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e062      	b.n	8007658 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b04      	cmp	r3, #4
 800759e:	d149      	bne.n	8007634 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a8:	2200      	movs	r2, #0
 80075aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f856 	bl	8007660 <UART_WaitOnFlagUntilTimeout>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d03c      	beq.n	8007634 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	e853 3f00 	ldrex	r3, [r3]
 80075c6:	623b      	str	r3, [r7, #32]
   return(result);
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	633b      	str	r3, [r7, #48]	; 0x30
 80075da:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e6      	bne.n	80075ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3308      	adds	r3, #8
 80075f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0301 	bic.w	r3, r3, #1
 8007602:	64bb      	str	r3, [r7, #72]	; 0x48
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3308      	adds	r3, #8
 800760a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760c:	61fa      	str	r2, [r7, #28]
 800760e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	69b9      	ldr	r1, [r7, #24]
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	617b      	str	r3, [r7, #20]
   return(result);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e5      	bne.n	80075ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e011      	b.n	8007658 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3758      	adds	r7, #88	; 0x58
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007670:	e049      	b.n	8007706 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d045      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767a:	f7fb fc53 	bl	8002f24 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	429a      	cmp	r2, r3
 8007688:	d302      	bcc.n	8007690 <UART_WaitOnFlagUntilTimeout+0x30>
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e048      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d031      	beq.n	8007706 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f003 0308 	and.w	r3, r3, #8
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d110      	bne.n	80076d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2208      	movs	r2, #8
 80076b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f838 	bl	800772e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2208      	movs	r2, #8
 80076c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e029      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e0:	d111      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f81e 	bl	800772e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e00f      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4013      	ands	r3, r2
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	bf0c      	ite	eq
 8007716:	2301      	moveq	r3, #1
 8007718:	2300      	movne	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	461a      	mov	r2, r3
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	429a      	cmp	r2, r3
 8007722:	d0a6      	beq.n	8007672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800772e:	b480      	push	{r7}
 8007730:	b095      	sub	sp, #84	; 0x54
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773e:	e853 3f00 	ldrex	r3, [r3]
 8007742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007754:	643b      	str	r3, [r7, #64]	; 0x40
 8007756:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800775a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800775c:	e841 2300 	strex	r3, r2, [r1]
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1e6      	bne.n	8007736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	61fb      	str	r3, [r7, #28]
   return(result);
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3308      	adds	r3, #8
 8007786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800778a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800778e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e5      	bne.n	8007768 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d118      	bne.n	80077d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f023 0310 	bic.w	r3, r3, #16
 80077b8:	647b      	str	r3, [r7, #68]	; 0x44
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6979      	ldr	r1, [r7, #20]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	613b      	str	r3, [r7, #16]
   return(result);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e6      	bne.n	80077a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077ea:	bf00      	nop
 80077ec:	3754      	adds	r7, #84	; 0x54
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
	...

080077f8 <std>:
 80077f8:	2300      	movs	r3, #0
 80077fa:	b510      	push	{r4, lr}
 80077fc:	4604      	mov	r4, r0
 80077fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007806:	6083      	str	r3, [r0, #8]
 8007808:	8181      	strh	r1, [r0, #12]
 800780a:	6643      	str	r3, [r0, #100]	; 0x64
 800780c:	81c2      	strh	r2, [r0, #14]
 800780e:	6183      	str	r3, [r0, #24]
 8007810:	4619      	mov	r1, r3
 8007812:	2208      	movs	r2, #8
 8007814:	305c      	adds	r0, #92	; 0x5c
 8007816:	f000 f99a 	bl	8007b4e <memset>
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <std+0x58>)
 800781c:	6223      	str	r3, [r4, #32]
 800781e:	4b0d      	ldr	r3, [pc, #52]	; (8007854 <std+0x5c>)
 8007820:	6263      	str	r3, [r4, #36]	; 0x24
 8007822:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <std+0x60>)
 8007824:	62a3      	str	r3, [r4, #40]	; 0x28
 8007826:	4b0d      	ldr	r3, [pc, #52]	; (800785c <std+0x64>)
 8007828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <std+0x68>)
 800782c:	61e4      	str	r4, [r4, #28]
 800782e:	429c      	cmp	r4, r3
 8007830:	d006      	beq.n	8007840 <std+0x48>
 8007832:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007836:	4294      	cmp	r4, r2
 8007838:	d002      	beq.n	8007840 <std+0x48>
 800783a:	33d0      	adds	r3, #208	; 0xd0
 800783c:	429c      	cmp	r4, r3
 800783e:	d105      	bne.n	800784c <std+0x54>
 8007840:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	f000 b9fa 	b.w	8007c40 <__retarget_lock_init_recursive>
 800784c:	bd10      	pop	{r4, pc}
 800784e:	bf00      	nop
 8007850:	08007ac9 	.word	0x08007ac9
 8007854:	08007aeb 	.word	0x08007aeb
 8007858:	08007b23 	.word	0x08007b23
 800785c:	08007b47 	.word	0x08007b47
 8007860:	20000904 	.word	0x20000904

08007864 <stdio_exit_handler>:
 8007864:	4a02      	ldr	r2, [pc, #8]	; (8007870 <stdio_exit_handler+0xc>)
 8007866:	4903      	ldr	r1, [pc, #12]	; (8007874 <stdio_exit_handler+0x10>)
 8007868:	4803      	ldr	r0, [pc, #12]	; (8007878 <stdio_exit_handler+0x14>)
 800786a:	f000 b869 	b.w	8007940 <_fwalk_sglue>
 800786e:	bf00      	nop
 8007870:	20000018 	.word	0x20000018
 8007874:	0800c9a1 	.word	0x0800c9a1
 8007878:	20000028 	.word	0x20000028

0800787c <cleanup_stdio>:
 800787c:	6841      	ldr	r1, [r0, #4]
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <cleanup_stdio+0x34>)
 8007880:	4299      	cmp	r1, r3
 8007882:	b510      	push	{r4, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	d001      	beq.n	800788c <cleanup_stdio+0x10>
 8007888:	f005 f88a 	bl	800c9a0 <_fclose_r>
 800788c:	68a1      	ldr	r1, [r4, #8]
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <cleanup_stdio+0x38>)
 8007890:	4299      	cmp	r1, r3
 8007892:	d002      	beq.n	800789a <cleanup_stdio+0x1e>
 8007894:	4620      	mov	r0, r4
 8007896:	f005 f883 	bl	800c9a0 <_fclose_r>
 800789a:	68e1      	ldr	r1, [r4, #12]
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <cleanup_stdio+0x3c>)
 800789e:	4299      	cmp	r1, r3
 80078a0:	d004      	beq.n	80078ac <cleanup_stdio+0x30>
 80078a2:	4620      	mov	r0, r4
 80078a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a8:	f005 b87a 	b.w	800c9a0 <_fclose_r>
 80078ac:	bd10      	pop	{r4, pc}
 80078ae:	bf00      	nop
 80078b0:	20000904 	.word	0x20000904
 80078b4:	2000096c 	.word	0x2000096c
 80078b8:	200009d4 	.word	0x200009d4

080078bc <global_stdio_init.part.0>:
 80078bc:	b510      	push	{r4, lr}
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <global_stdio_init.part.0+0x30>)
 80078c0:	4c0b      	ldr	r4, [pc, #44]	; (80078f0 <global_stdio_init.part.0+0x34>)
 80078c2:	4a0c      	ldr	r2, [pc, #48]	; (80078f4 <global_stdio_init.part.0+0x38>)
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	4620      	mov	r0, r4
 80078c8:	2200      	movs	r2, #0
 80078ca:	2104      	movs	r1, #4
 80078cc:	f7ff ff94 	bl	80077f8 <std>
 80078d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078d4:	2201      	movs	r2, #1
 80078d6:	2109      	movs	r1, #9
 80078d8:	f7ff ff8e 	bl	80077f8 <std>
 80078dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078e0:	2202      	movs	r2, #2
 80078e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e6:	2112      	movs	r1, #18
 80078e8:	f7ff bf86 	b.w	80077f8 <std>
 80078ec:	20000a3c 	.word	0x20000a3c
 80078f0:	20000904 	.word	0x20000904
 80078f4:	08007865 	.word	0x08007865

080078f8 <__sfp_lock_acquire>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__sfp_lock_acquire+0x8>)
 80078fa:	f000 b9a3 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	20000a46 	.word	0x20000a46

08007904 <__sfp_lock_release>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__sfp_lock_release+0x8>)
 8007906:	f000 b99e 	b.w	8007c46 <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	20000a46 	.word	0x20000a46

08007910 <__sinit>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	f7ff fff0 	bl	80078f8 <__sfp_lock_acquire>
 8007918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800791a:	b11b      	cbz	r3, 8007924 <__sinit+0x14>
 800791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007920:	f7ff bff0 	b.w	8007904 <__sfp_lock_release>
 8007924:	4b04      	ldr	r3, [pc, #16]	; (8007938 <__sinit+0x28>)
 8007926:	6363      	str	r3, [r4, #52]	; 0x34
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <__sinit+0x2c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f5      	bne.n	800791c <__sinit+0xc>
 8007930:	f7ff ffc4 	bl	80078bc <global_stdio_init.part.0>
 8007934:	e7f2      	b.n	800791c <__sinit+0xc>
 8007936:	bf00      	nop
 8007938:	0800787d 	.word	0x0800787d
 800793c:	20000a3c 	.word	0x20000a3c

08007940 <_fwalk_sglue>:
 8007940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007944:	4607      	mov	r7, r0
 8007946:	4688      	mov	r8, r1
 8007948:	4614      	mov	r4, r2
 800794a:	2600      	movs	r6, #0
 800794c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007950:	f1b9 0901 	subs.w	r9, r9, #1
 8007954:	d505      	bpl.n	8007962 <_fwalk_sglue+0x22>
 8007956:	6824      	ldr	r4, [r4, #0]
 8007958:	2c00      	cmp	r4, #0
 800795a:	d1f7      	bne.n	800794c <_fwalk_sglue+0xc>
 800795c:	4630      	mov	r0, r6
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	89ab      	ldrh	r3, [r5, #12]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d907      	bls.n	8007978 <_fwalk_sglue+0x38>
 8007968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800796c:	3301      	adds	r3, #1
 800796e:	d003      	beq.n	8007978 <_fwalk_sglue+0x38>
 8007970:	4629      	mov	r1, r5
 8007972:	4638      	mov	r0, r7
 8007974:	47c0      	blx	r8
 8007976:	4306      	orrs	r6, r0
 8007978:	3568      	adds	r5, #104	; 0x68
 800797a:	e7e9      	b.n	8007950 <_fwalk_sglue+0x10>

0800797c <printf>:
 800797c:	b40f      	push	{r0, r1, r2, r3}
 800797e:	b507      	push	{r0, r1, r2, lr}
 8007980:	4906      	ldr	r1, [pc, #24]	; (800799c <printf+0x20>)
 8007982:	ab04      	add	r3, sp, #16
 8007984:	6808      	ldr	r0, [r1, #0]
 8007986:	f853 2b04 	ldr.w	r2, [r3], #4
 800798a:	6881      	ldr	r1, [r0, #8]
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	f001 feb7 	bl	8009700 <_vfprintf_r>
 8007992:	b003      	add	sp, #12
 8007994:	f85d eb04 	ldr.w	lr, [sp], #4
 8007998:	b004      	add	sp, #16
 800799a:	4770      	bx	lr
 800799c:	20000148 	.word	0x20000148

080079a0 <_puts_r>:
 80079a0:	b530      	push	{r4, r5, lr}
 80079a2:	4605      	mov	r5, r0
 80079a4:	b089      	sub	sp, #36	; 0x24
 80079a6:	4608      	mov	r0, r1
 80079a8:	460c      	mov	r4, r1
 80079aa:	f7f8 fc1b 	bl	80001e4 <strlen>
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <_puts_r+0x88>)
 80079b0:	9306      	str	r3, [sp, #24]
 80079b2:	2301      	movs	r3, #1
 80079b4:	e9cd 4004 	strd	r4, r0, [sp, #16]
 80079b8:	9307      	str	r3, [sp, #28]
 80079ba:	4418      	add	r0, r3
 80079bc:	ab04      	add	r3, sp, #16
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	2302      	movs	r3, #2
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	9003      	str	r0, [sp, #12]
 80079ca:	b913      	cbnz	r3, 80079d2 <_puts_r+0x32>
 80079cc:	4628      	mov	r0, r5
 80079ce:	f7ff ff9f 	bl	8007910 <__sinit>
 80079d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d4:	07db      	lsls	r3, r3, #31
 80079d6:	d405      	bmi.n	80079e4 <_puts_r+0x44>
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	0598      	lsls	r0, r3, #22
 80079dc:	d402      	bmi.n	80079e4 <_puts_r+0x44>
 80079de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e0:	f000 f930 	bl	8007c44 <__retarget_lock_acquire_recursive>
 80079e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e8:	0499      	lsls	r1, r3, #18
 80079ea:	d406      	bmi.n	80079fa <_puts_r+0x5a>
 80079ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f8:	6663      	str	r3, [r4, #100]	; 0x64
 80079fa:	4628      	mov	r0, r5
 80079fc:	aa01      	add	r2, sp, #4
 80079fe:	4621      	mov	r1, r4
 8007a00:	f005 f940 	bl	800cc84 <__sfvwrite_r>
 8007a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a06:	2800      	cmp	r0, #0
 8007a08:	bf14      	ite	ne
 8007a0a:	f04f 35ff 	movne.w	r5, #4294967295
 8007a0e:	250a      	moveq	r5, #10
 8007a10:	07da      	lsls	r2, r3, #31
 8007a12:	d405      	bmi.n	8007a20 <_puts_r+0x80>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	059b      	lsls	r3, r3, #22
 8007a18:	d402      	bmi.n	8007a20 <_puts_r+0x80>
 8007a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1c:	f000 f913 	bl	8007c46 <__retarget_lock_release_recursive>
 8007a20:	4628      	mov	r0, r5
 8007a22:	b009      	add	sp, #36	; 0x24
 8007a24:	bd30      	pop	{r4, r5, pc}
 8007a26:	bf00      	nop
 8007a28:	08011cdb 	.word	0x08011cdb

08007a2c <puts>:
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <puts+0xc>)
 8007a2e:	4601      	mov	r1, r0
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	f7ff bfb5 	b.w	80079a0 <_puts_r>
 8007a36:	bf00      	nop
 8007a38:	20000148 	.word	0x20000148

08007a3c <scanf>:
 8007a3c:	b40f      	push	{r0, r1, r2, r3}
 8007a3e:	b507      	push	{r0, r1, r2, lr}
 8007a40:	4906      	ldr	r1, [pc, #24]	; (8007a5c <scanf+0x20>)
 8007a42:	ab04      	add	r3, sp, #16
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4a:	6841      	ldr	r1, [r0, #4]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	f004 ff93 	bl	800c978 <_vfscanf_r>
 8007a52:	b003      	add	sp, #12
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	b004      	add	sp, #16
 8007a5a:	4770      	bx	lr
 8007a5c:	20000148 	.word	0x20000148

08007a60 <snprintf>:
 8007a60:	b40c      	push	{r2, r3}
 8007a62:	b530      	push	{r4, r5, lr}
 8007a64:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <snprintf+0x64>)
 8007a66:	1e0c      	subs	r4, r1, #0
 8007a68:	681d      	ldr	r5, [r3, #0]
 8007a6a:	b09d      	sub	sp, #116	; 0x74
 8007a6c:	da08      	bge.n	8007a80 <snprintf+0x20>
 8007a6e:	238b      	movs	r3, #139	; 0x8b
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	b01d      	add	sp, #116	; 0x74
 8007a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a7c:	b002      	add	sp, #8
 8007a7e:	4770      	bx	lr
 8007a80:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a88:	bf14      	ite	ne
 8007a8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a8e:	4623      	moveq	r3, r4
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	9006      	str	r0, [sp, #24]
 8007a9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007aa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007aa2:	ab21      	add	r3, sp, #132	; 0x84
 8007aa4:	a902      	add	r1, sp, #8
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	f000 fc39 	bl	8008320 <_svfprintf_r>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	bfbc      	itt	lt
 8007ab2:	238b      	movlt	r3, #139	; 0x8b
 8007ab4:	602b      	strlt	r3, [r5, #0]
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	d0dd      	beq.n	8007a76 <snprintf+0x16>
 8007aba:	9b02      	ldr	r3, [sp, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e7d9      	b.n	8007a76 <snprintf+0x16>
 8007ac2:	bf00      	nop
 8007ac4:	20000148 	.word	0x20000148

08007ac8 <__sread>:
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	460c      	mov	r4, r1
 8007acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad0:	f000 f868 	bl	8007ba4 <_read_r>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	bfab      	itete	ge
 8007ad8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8007ada:	89a3      	ldrhlt	r3, [r4, #12]
 8007adc:	181b      	addge	r3, r3, r0
 8007ade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ae2:	bfac      	ite	ge
 8007ae4:	6523      	strge	r3, [r4, #80]	; 0x50
 8007ae6:	81a3      	strhlt	r3, [r4, #12]
 8007ae8:	bd10      	pop	{r4, pc}

08007aea <__swrite>:
 8007aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	461f      	mov	r7, r3
 8007af0:	898b      	ldrh	r3, [r1, #12]
 8007af2:	05db      	lsls	r3, r3, #23
 8007af4:	4605      	mov	r5, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4616      	mov	r6, r2
 8007afa:	d505      	bpl.n	8007b08 <__swrite+0x1e>
 8007afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b00:	2302      	movs	r3, #2
 8007b02:	2200      	movs	r2, #0
 8007b04:	f000 f83c 	bl	8007b80 <_lseek_r>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	4632      	mov	r2, r6
 8007b16:	463b      	mov	r3, r7
 8007b18:	4628      	mov	r0, r5
 8007b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	f000 b853 	b.w	8007bc8 <_write_r>

08007b22 <__sseek>:
 8007b22:	b510      	push	{r4, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2a:	f000 f829 	bl	8007b80 <_lseek_r>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	bf15      	itete	ne
 8007b34:	6520      	strne	r0, [r4, #80]	; 0x50
 8007b36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b3e:	81a3      	strheq	r3, [r4, #12]
 8007b40:	bf18      	it	ne
 8007b42:	81a3      	strhne	r3, [r4, #12]
 8007b44:	bd10      	pop	{r4, pc}

08007b46 <__sclose>:
 8007b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4a:	f000 b809 	b.w	8007b60 <_close_r>

08007b4e <memset>:
 8007b4e:	4402      	add	r2, r0
 8007b50:	4603      	mov	r3, r0
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d100      	bne.n	8007b58 <memset+0xa>
 8007b56:	4770      	bx	lr
 8007b58:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5c:	e7f9      	b.n	8007b52 <memset+0x4>
	...

08007b60 <_close_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_close_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7fb f8a8 	bl	8002cc0 <_close>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_close_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_close_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000a40 	.word	0x20000a40

08007b80 <_lseek_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d07      	ldr	r5, [pc, #28]	; (8007ba0 <_lseek_r+0x20>)
 8007b84:	4604      	mov	r4, r0
 8007b86:	4608      	mov	r0, r1
 8007b88:	4611      	mov	r1, r2
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	602a      	str	r2, [r5, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7fb f8bd 	bl	8002d0e <_lseek>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_lseek_r+0x1e>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_lseek_r+0x1e>
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	20000a40 	.word	0x20000a40

08007ba4 <_read_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	4d07      	ldr	r5, [pc, #28]	; (8007bc4 <_read_r+0x20>)
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	602a      	str	r2, [r5, #0]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f7fb f83c 	bl	8002c30 <_read>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_read_r+0x1e>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_read_r+0x1e>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20000a40 	.word	0x20000a40

08007bc8 <_write_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d07      	ldr	r5, [pc, #28]	; (8007be8 <_write_r+0x20>)
 8007bcc:	4604      	mov	r4, r0
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7fb f850 	bl	8002c7c <_write>
 8007bdc:	1c43      	adds	r3, r0, #1
 8007bde:	d102      	bne.n	8007be6 <_write_r+0x1e>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	b103      	cbz	r3, 8007be6 <_write_r+0x1e>
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	20000a40 	.word	0x20000a40

08007bec <__errno>:
 8007bec:	4b01      	ldr	r3, [pc, #4]	; (8007bf4 <__errno+0x8>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	20000148 	.word	0x20000148

08007bf8 <__libc_init_array>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4d0d      	ldr	r5, [pc, #52]	; (8007c30 <__libc_init_array+0x38>)
 8007bfc:	4c0d      	ldr	r4, [pc, #52]	; (8007c34 <__libc_init_array+0x3c>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	2600      	movs	r6, #0
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	d109      	bne.n	8007c1c <__libc_init_array+0x24>
 8007c08:	4d0b      	ldr	r5, [pc, #44]	; (8007c38 <__libc_init_array+0x40>)
 8007c0a:	4c0c      	ldr	r4, [pc, #48]	; (8007c3c <__libc_init_array+0x44>)
 8007c0c:	f008 ff74 	bl	8010af8 <_init>
 8007c10:	1b64      	subs	r4, r4, r5
 8007c12:	10a4      	asrs	r4, r4, #2
 8007c14:	2600      	movs	r6, #0
 8007c16:	42a6      	cmp	r6, r4
 8007c18:	d105      	bne.n	8007c26 <__libc_init_array+0x2e>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c20:	4798      	blx	r3
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7ee      	b.n	8007c04 <__libc_init_array+0xc>
 8007c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c2a:	4798      	blx	r3
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	e7f2      	b.n	8007c16 <__libc_init_array+0x1e>
 8007c30:	08011d48 	.word	0x08011d48
 8007c34:	08011d48 	.word	0x08011d48
 8007c38:	08011d48 	.word	0x08011d48
 8007c3c:	08011d50 	.word	0x08011d50

08007c40 <__retarget_lock_init_recursive>:
 8007c40:	4770      	bx	lr

08007c42 <__retarget_lock_close_recursive>:
 8007c42:	4770      	bx	lr

08007c44 <__retarget_lock_acquire_recursive>:
 8007c44:	4770      	bx	lr

08007c46 <__retarget_lock_release_recursive>:
 8007c46:	4770      	bx	lr

08007c48 <register_fini>:
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <register_fini+0xc>)
 8007c4a:	b113      	cbz	r3, 8007c52 <register_fini+0xa>
 8007c4c:	4802      	ldr	r0, [pc, #8]	; (8007c58 <register_fini+0x10>)
 8007c4e:	f000 b805 	b.w	8007c5c <atexit>
 8007c52:	4770      	bx	lr
 8007c54:	00000000 	.word	0x00000000
 8007c58:	0800d499 	.word	0x0800d499

08007c5c <atexit>:
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4601      	mov	r1, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	4618      	mov	r0, r3
 8007c64:	f005 bc84 	b.w	800d570 <__register_exitproc>

08007c68 <_malloc_trim_r>:
 8007c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	2008      	movs	r0, #8
 8007c70:	460c      	mov	r4, r1
 8007c72:	f005 fc25 	bl	800d4c0 <sysconf>
 8007c76:	4f23      	ldr	r7, [pc, #140]	; (8007d04 <_malloc_trim_r+0x9c>)
 8007c78:	4680      	mov	r8, r0
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f000 fb42 	bl	8008304 <__malloc_lock>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	685d      	ldr	r5, [r3, #4]
 8007c84:	f025 0503 	bic.w	r5, r5, #3
 8007c88:	1b2c      	subs	r4, r5, r4
 8007c8a:	3c11      	subs	r4, #17
 8007c8c:	4444      	add	r4, r8
 8007c8e:	fbb4 f4f8 	udiv	r4, r4, r8
 8007c92:	3c01      	subs	r4, #1
 8007c94:	fb08 f404 	mul.w	r4, r8, r4
 8007c98:	45a0      	cmp	r8, r4
 8007c9a:	dd05      	ble.n	8007ca8 <_malloc_trim_r+0x40>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 fb37 	bl	8008310 <__malloc_unlock>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4630      	mov	r0, r6
 8007cac:	f005 fbe4 	bl	800d478 <_sbrk_r>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	442b      	add	r3, r5
 8007cb4:	4298      	cmp	r0, r3
 8007cb6:	d1f1      	bne.n	8007c9c <_malloc_trim_r+0x34>
 8007cb8:	4261      	negs	r1, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f005 fbdc 	bl	800d478 <_sbrk_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d110      	bne.n	8007ce6 <_malloc_trim_r+0x7e>
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	f005 fbd6 	bl	800d478 <_sbrk_r>
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	1a83      	subs	r3, r0, r2
 8007cd0:	2b0f      	cmp	r3, #15
 8007cd2:	dde3      	ble.n	8007c9c <_malloc_trim_r+0x34>
 8007cd4:	490c      	ldr	r1, [pc, #48]	; (8007d08 <_malloc_trim_r+0xa0>)
 8007cd6:	6809      	ldr	r1, [r1, #0]
 8007cd8:	1a40      	subs	r0, r0, r1
 8007cda:	490c      	ldr	r1, [pc, #48]	; (8007d0c <_malloc_trim_r+0xa4>)
 8007cdc:	f043 0301 	orr.w	r3, r3, #1
 8007ce0:	6008      	str	r0, [r1, #0]
 8007ce2:	6053      	str	r3, [r2, #4]
 8007ce4:	e7da      	b.n	8007c9c <_malloc_trim_r+0x34>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4a08      	ldr	r2, [pc, #32]	; (8007d0c <_malloc_trim_r+0xa4>)
 8007cea:	1b2d      	subs	r5, r5, r4
 8007cec:	f045 0501 	orr.w	r5, r5, #1
 8007cf0:	605d      	str	r5, [r3, #4]
 8007cf2:	6813      	ldr	r3, [r2, #0]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	1b1b      	subs	r3, r3, r4
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	f000 fb09 	bl	8008310 <__malloc_unlock>
 8007cfe:	2001      	movs	r0, #1
 8007d00:	e7d0      	b.n	8007ca4 <_malloc_trim_r+0x3c>
 8007d02:	bf00      	nop
 8007d04:	20000150 	.word	0x20000150
 8007d08:	20000558 	.word	0x20000558
 8007d0c:	20000a4c 	.word	0x20000a4c

08007d10 <_free_r>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	2900      	cmp	r1, #0
 8007d18:	f000 80b1 	beq.w	8007e7e <_free_r+0x16e>
 8007d1c:	f000 faf2 	bl	8008304 <__malloc_lock>
 8007d20:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007d24:	4856      	ldr	r0, [pc, #344]	; (8007e80 <_free_r+0x170>)
 8007d26:	f022 0401 	bic.w	r4, r2, #1
 8007d2a:	f1a7 0308 	sub.w	r3, r7, #8
 8007d2e:	eb03 0c04 	add.w	ip, r3, r4
 8007d32:	6881      	ldr	r1, [r0, #8]
 8007d34:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007d38:	4561      	cmp	r1, ip
 8007d3a:	f026 0603 	bic.w	r6, r6, #3
 8007d3e:	f002 0201 	and.w	r2, r2, #1
 8007d42:	d11b      	bne.n	8007d7c <_free_r+0x6c>
 8007d44:	4426      	add	r6, r4
 8007d46:	b93a      	cbnz	r2, 8007d58 <_free_r+0x48>
 8007d48:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007d4c:	1a9b      	subs	r3, r3, r2
 8007d4e:	4416      	add	r6, r2
 8007d50:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007d54:	60ca      	str	r2, [r1, #12]
 8007d56:	6091      	str	r1, [r2, #8]
 8007d58:	f046 0201 	orr.w	r2, r6, #1
 8007d5c:	605a      	str	r2, [r3, #4]
 8007d5e:	6083      	str	r3, [r0, #8]
 8007d60:	4b48      	ldr	r3, [pc, #288]	; (8007e84 <_free_r+0x174>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	42b3      	cmp	r3, r6
 8007d66:	d804      	bhi.n	8007d72 <_free_r+0x62>
 8007d68:	4b47      	ldr	r3, [pc, #284]	; (8007e88 <_free_r+0x178>)
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	6819      	ldr	r1, [r3, #0]
 8007d6e:	f7ff ff7b 	bl	8007c68 <_malloc_trim_r>
 8007d72:	4628      	mov	r0, r5
 8007d74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d78:	f000 baca 	b.w	8008310 <__malloc_unlock>
 8007d7c:	f8cc 6004 	str.w	r6, [ip, #4]
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d138      	bne.n	8007df6 <_free_r+0xe6>
 8007d84:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007d88:	1a5b      	subs	r3, r3, r1
 8007d8a:	440c      	add	r4, r1
 8007d8c:	6899      	ldr	r1, [r3, #8]
 8007d8e:	f100 0708 	add.w	r7, r0, #8
 8007d92:	42b9      	cmp	r1, r7
 8007d94:	d031      	beq.n	8007dfa <_free_r+0xea>
 8007d96:	68df      	ldr	r7, [r3, #12]
 8007d98:	60cf      	str	r7, [r1, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	eb0c 0106 	add.w	r1, ip, r6
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	07c9      	lsls	r1, r1, #31
 8007da4:	d40b      	bmi.n	8007dbe <_free_r+0xae>
 8007da6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007daa:	4434      	add	r4, r6
 8007dac:	bb3a      	cbnz	r2, 8007dfe <_free_r+0xee>
 8007dae:	4e37      	ldr	r6, [pc, #220]	; (8007e8c <_free_r+0x17c>)
 8007db0:	42b1      	cmp	r1, r6
 8007db2:	d124      	bne.n	8007dfe <_free_r+0xee>
 8007db4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db8:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f044 0101 	orr.w	r1, r4, #1
 8007dc2:	6059      	str	r1, [r3, #4]
 8007dc4:	511c      	str	r4, [r3, r4]
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	d1d3      	bne.n	8007d72 <_free_r+0x62>
 8007dca:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007dce:	d21b      	bcs.n	8007e08 <_free_r+0xf8>
 8007dd0:	08e2      	lsrs	r2, r4, #3
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	0964      	lsrs	r4, r4, #5
 8007dd6:	40a1      	lsls	r1, r4
 8007dd8:	6844      	ldr	r4, [r0, #4]
 8007dda:	3201      	adds	r2, #1
 8007ddc:	4321      	orrs	r1, r4
 8007dde:	6041      	str	r1, [r0, #4]
 8007de0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007de4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007de8:	3908      	subs	r1, #8
 8007dea:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007dee:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007df2:	60e3      	str	r3, [r4, #12]
 8007df4:	e7bd      	b.n	8007d72 <_free_r+0x62>
 8007df6:	2200      	movs	r2, #0
 8007df8:	e7d0      	b.n	8007d9c <_free_r+0x8c>
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	e7ce      	b.n	8007d9c <_free_r+0x8c>
 8007dfe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007e02:	60ce      	str	r6, [r1, #12]
 8007e04:	60b1      	str	r1, [r6, #8]
 8007e06:	e7da      	b.n	8007dbe <_free_r+0xae>
 8007e08:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007e0c:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007e10:	d214      	bcs.n	8007e3c <_free_r+0x12c>
 8007e12:	09a2      	lsrs	r2, r4, #6
 8007e14:	3238      	adds	r2, #56	; 0x38
 8007e16:	1c51      	adds	r1, r2, #1
 8007e18:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007e1c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007e20:	428e      	cmp	r6, r1
 8007e22:	d125      	bne.n	8007e70 <_free_r+0x160>
 8007e24:	2401      	movs	r4, #1
 8007e26:	1092      	asrs	r2, r2, #2
 8007e28:	fa04 f202 	lsl.w	r2, r4, r2
 8007e2c:	6844      	ldr	r4, [r0, #4]
 8007e2e:	4322      	orrs	r2, r4
 8007e30:	6042      	str	r2, [r0, #4]
 8007e32:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007e36:	60b3      	str	r3, [r6, #8]
 8007e38:	60cb      	str	r3, [r1, #12]
 8007e3a:	e79a      	b.n	8007d72 <_free_r+0x62>
 8007e3c:	2a14      	cmp	r2, #20
 8007e3e:	d801      	bhi.n	8007e44 <_free_r+0x134>
 8007e40:	325b      	adds	r2, #91	; 0x5b
 8007e42:	e7e8      	b.n	8007e16 <_free_r+0x106>
 8007e44:	2a54      	cmp	r2, #84	; 0x54
 8007e46:	d802      	bhi.n	8007e4e <_free_r+0x13e>
 8007e48:	0b22      	lsrs	r2, r4, #12
 8007e4a:	326e      	adds	r2, #110	; 0x6e
 8007e4c:	e7e3      	b.n	8007e16 <_free_r+0x106>
 8007e4e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007e52:	d802      	bhi.n	8007e5a <_free_r+0x14a>
 8007e54:	0be2      	lsrs	r2, r4, #15
 8007e56:	3277      	adds	r2, #119	; 0x77
 8007e58:	e7dd      	b.n	8007e16 <_free_r+0x106>
 8007e5a:	f240 5154 	movw	r1, #1364	; 0x554
 8007e5e:	428a      	cmp	r2, r1
 8007e60:	bf9a      	itte	ls
 8007e62:	0ca2      	lsrls	r2, r4, #18
 8007e64:	327c      	addls	r2, #124	; 0x7c
 8007e66:	227e      	movhi	r2, #126	; 0x7e
 8007e68:	e7d5      	b.n	8007e16 <_free_r+0x106>
 8007e6a:	6889      	ldr	r1, [r1, #8]
 8007e6c:	428e      	cmp	r6, r1
 8007e6e:	d004      	beq.n	8007e7a <_free_r+0x16a>
 8007e70:	684a      	ldr	r2, [r1, #4]
 8007e72:	f022 0203 	bic.w	r2, r2, #3
 8007e76:	42a2      	cmp	r2, r4
 8007e78:	d8f7      	bhi.n	8007e6a <_free_r+0x15a>
 8007e7a:	68ce      	ldr	r6, [r1, #12]
 8007e7c:	e7d9      	b.n	8007e32 <_free_r+0x122>
 8007e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e80:	20000150 	.word	0x20000150
 8007e84:	2000055c 	.word	0x2000055c
 8007e88:	20000a7c 	.word	0x20000a7c
 8007e8c:	20000158 	.word	0x20000158

08007e90 <_malloc_r>:
 8007e90:	f101 030b 	add.w	r3, r1, #11
 8007e94:	2b16      	cmp	r3, #22
 8007e96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9a:	4605      	mov	r5, r0
 8007e9c:	d906      	bls.n	8007eac <_malloc_r+0x1c>
 8007e9e:	f033 0707 	bics.w	r7, r3, #7
 8007ea2:	d504      	bpl.n	8007eae <_malloc_r+0x1e>
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	e1a3      	b.n	80081f4 <_malloc_r+0x364>
 8007eac:	2710      	movs	r7, #16
 8007eae:	42b9      	cmp	r1, r7
 8007eb0:	d8f8      	bhi.n	8007ea4 <_malloc_r+0x14>
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f000 fa26 	bl	8008304 <__malloc_lock>
 8007eb8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007ebc:	4eaf      	ldr	r6, [pc, #700]	; (800817c <_malloc_r+0x2ec>)
 8007ebe:	d237      	bcs.n	8007f30 <_malloc_r+0xa0>
 8007ec0:	f107 0208 	add.w	r2, r7, #8
 8007ec4:	4432      	add	r2, r6
 8007ec6:	f1a2 0108 	sub.w	r1, r2, #8
 8007eca:	6854      	ldr	r4, [r2, #4]
 8007ecc:	428c      	cmp	r4, r1
 8007ece:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8007ed2:	d102      	bne.n	8007eda <_malloc_r+0x4a>
 8007ed4:	68d4      	ldr	r4, [r2, #12]
 8007ed6:	42a2      	cmp	r2, r4
 8007ed8:	d010      	beq.n	8007efc <_malloc_r+0x6c>
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	60ca      	str	r2, [r1, #12]
 8007ee6:	4423      	add	r3, r4
 8007ee8:	6091      	str	r1, [r2, #8]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	f042 0201 	orr.w	r2, r2, #1
 8007ef0:	605a      	str	r2, [r3, #4]
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 fa0c 	bl	8008310 <__malloc_unlock>
 8007ef8:	3408      	adds	r4, #8
 8007efa:	e17b      	b.n	80081f4 <_malloc_r+0x364>
 8007efc:	3302      	adds	r3, #2
 8007efe:	6934      	ldr	r4, [r6, #16]
 8007f00:	499f      	ldr	r1, [pc, #636]	; (8008180 <_malloc_r+0x2f0>)
 8007f02:	428c      	cmp	r4, r1
 8007f04:	d077      	beq.n	8007ff6 <_malloc_r+0x166>
 8007f06:	6862      	ldr	r2, [r4, #4]
 8007f08:	f022 0c03 	bic.w	ip, r2, #3
 8007f0c:	ebac 0007 	sub.w	r0, ip, r7
 8007f10:	280f      	cmp	r0, #15
 8007f12:	dd48      	ble.n	8007fa6 <_malloc_r+0x116>
 8007f14:	19e2      	adds	r2, r4, r7
 8007f16:	f040 0301 	orr.w	r3, r0, #1
 8007f1a:	f047 0701 	orr.w	r7, r7, #1
 8007f1e:	6067      	str	r7, [r4, #4]
 8007f20:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007f24:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007f28:	6053      	str	r3, [r2, #4]
 8007f2a:	f844 000c 	str.w	r0, [r4, ip]
 8007f2e:	e7e0      	b.n	8007ef2 <_malloc_r+0x62>
 8007f30:	0a7b      	lsrs	r3, r7, #9
 8007f32:	d02a      	beq.n	8007f8a <_malloc_r+0xfa>
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d812      	bhi.n	8007f5e <_malloc_r+0xce>
 8007f38:	09bb      	lsrs	r3, r7, #6
 8007f3a:	3338      	adds	r3, #56	; 0x38
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8007f42:	f1a2 0c08 	sub.w	ip, r2, #8
 8007f46:	6854      	ldr	r4, [r2, #4]
 8007f48:	4564      	cmp	r4, ip
 8007f4a:	d006      	beq.n	8007f5a <_malloc_r+0xca>
 8007f4c:	6862      	ldr	r2, [r4, #4]
 8007f4e:	f022 0203 	bic.w	r2, r2, #3
 8007f52:	1bd0      	subs	r0, r2, r7
 8007f54:	280f      	cmp	r0, #15
 8007f56:	dd1c      	ble.n	8007f92 <_malloc_r+0x102>
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	e7cf      	b.n	8007efe <_malloc_r+0x6e>
 8007f5e:	2b14      	cmp	r3, #20
 8007f60:	d801      	bhi.n	8007f66 <_malloc_r+0xd6>
 8007f62:	335b      	adds	r3, #91	; 0x5b
 8007f64:	e7ea      	b.n	8007f3c <_malloc_r+0xac>
 8007f66:	2b54      	cmp	r3, #84	; 0x54
 8007f68:	d802      	bhi.n	8007f70 <_malloc_r+0xe0>
 8007f6a:	0b3b      	lsrs	r3, r7, #12
 8007f6c:	336e      	adds	r3, #110	; 0x6e
 8007f6e:	e7e5      	b.n	8007f3c <_malloc_r+0xac>
 8007f70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007f74:	d802      	bhi.n	8007f7c <_malloc_r+0xec>
 8007f76:	0bfb      	lsrs	r3, r7, #15
 8007f78:	3377      	adds	r3, #119	; 0x77
 8007f7a:	e7df      	b.n	8007f3c <_malloc_r+0xac>
 8007f7c:	f240 5254 	movw	r2, #1364	; 0x554
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d804      	bhi.n	8007f8e <_malloc_r+0xfe>
 8007f84:	0cbb      	lsrs	r3, r7, #18
 8007f86:	337c      	adds	r3, #124	; 0x7c
 8007f88:	e7d8      	b.n	8007f3c <_malloc_r+0xac>
 8007f8a:	233f      	movs	r3, #63	; 0x3f
 8007f8c:	e7d6      	b.n	8007f3c <_malloc_r+0xac>
 8007f8e:	237e      	movs	r3, #126	; 0x7e
 8007f90:	e7d4      	b.n	8007f3c <_malloc_r+0xac>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	68e1      	ldr	r1, [r4, #12]
 8007f96:	db04      	blt.n	8007fa2 <_malloc_r+0x112>
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	60d9      	str	r1, [r3, #12]
 8007f9c:	608b      	str	r3, [r1, #8]
 8007f9e:	18a3      	adds	r3, r4, r2
 8007fa0:	e7a3      	b.n	8007eea <_malloc_r+0x5a>
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	e7d0      	b.n	8007f48 <_malloc_r+0xb8>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8007fac:	db07      	blt.n	8007fbe <_malloc_r+0x12e>
 8007fae:	44a4      	add	ip, r4
 8007fb0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007fb4:	f043 0301 	orr.w	r3, r3, #1
 8007fb8:	f8cc 3004 	str.w	r3, [ip, #4]
 8007fbc:	e799      	b.n	8007ef2 <_malloc_r+0x62>
 8007fbe:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007fc2:	6870      	ldr	r0, [r6, #4]
 8007fc4:	f080 8095 	bcs.w	80080f2 <_malloc_r+0x262>
 8007fc8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8007fcc:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8007fd0:	f04f 0c01 	mov.w	ip, #1
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007fda:	ea4c 0000 	orr.w	r0, ip, r0
 8007fde:	6070      	str	r0, [r6, #4]
 8007fe0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8007fe4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007fe8:	3808      	subs	r0, #8
 8007fea:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007fee:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8007ff2:	f8cc 400c 	str.w	r4, [ip, #12]
 8007ff6:	1098      	asrs	r0, r3, #2
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	4082      	lsls	r2, r0
 8007ffc:	6870      	ldr	r0, [r6, #4]
 8007ffe:	4290      	cmp	r0, r2
 8008000:	d326      	bcc.n	8008050 <_malloc_r+0x1c0>
 8008002:	4210      	tst	r0, r2
 8008004:	d106      	bne.n	8008014 <_malloc_r+0x184>
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	0052      	lsls	r2, r2, #1
 800800c:	4210      	tst	r0, r2
 800800e:	f103 0304 	add.w	r3, r3, #4
 8008012:	d0fa      	beq.n	800800a <_malloc_r+0x17a>
 8008014:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8008018:	46c1      	mov	r9, r8
 800801a:	469e      	mov	lr, r3
 800801c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008020:	454c      	cmp	r4, r9
 8008022:	f040 80b9 	bne.w	8008198 <_malloc_r+0x308>
 8008026:	f10e 0e01 	add.w	lr, lr, #1
 800802a:	f01e 0f03 	tst.w	lr, #3
 800802e:	f109 0908 	add.w	r9, r9, #8
 8008032:	d1f3      	bne.n	800801c <_malloc_r+0x18c>
 8008034:	0798      	lsls	r0, r3, #30
 8008036:	f040 80e3 	bne.w	8008200 <_malloc_r+0x370>
 800803a:	6873      	ldr	r3, [r6, #4]
 800803c:	ea23 0302 	bic.w	r3, r3, r2
 8008040:	6073      	str	r3, [r6, #4]
 8008042:	6870      	ldr	r0, [r6, #4]
 8008044:	0052      	lsls	r2, r2, #1
 8008046:	4290      	cmp	r0, r2
 8008048:	d302      	bcc.n	8008050 <_malloc_r+0x1c0>
 800804a:	2a00      	cmp	r2, #0
 800804c:	f040 80e5 	bne.w	800821a <_malloc_r+0x38a>
 8008050:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8008054:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008058:	f023 0903 	bic.w	r9, r3, #3
 800805c:	45b9      	cmp	r9, r7
 800805e:	d304      	bcc.n	800806a <_malloc_r+0x1da>
 8008060:	eba9 0207 	sub.w	r2, r9, r7
 8008064:	2a0f      	cmp	r2, #15
 8008066:	f300 8141 	bgt.w	80082ec <_malloc_r+0x45c>
 800806a:	4b46      	ldr	r3, [pc, #280]	; (8008184 <_malloc_r+0x2f4>)
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	3110      	adds	r1, #16
 8008070:	4439      	add	r1, r7
 8008072:	2008      	movs	r0, #8
 8008074:	9101      	str	r1, [sp, #4]
 8008076:	f005 fa23 	bl	800d4c0 <sysconf>
 800807a:	4a43      	ldr	r2, [pc, #268]	; (8008188 <_malloc_r+0x2f8>)
 800807c:	9901      	ldr	r1, [sp, #4]
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	bf1f      	itttt	ne
 8008084:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008088:	1809      	addne	r1, r1, r0
 800808a:	4243      	negne	r3, r0
 800808c:	4019      	andne	r1, r3
 800808e:	4680      	mov	r8, r0
 8008090:	4628      	mov	r0, r5
 8008092:	9101      	str	r1, [sp, #4]
 8008094:	f005 f9f0 	bl	800d478 <_sbrk_r>
 8008098:	1c42      	adds	r2, r0, #1
 800809a:	eb0a 0b09 	add.w	fp, sl, r9
 800809e:	4604      	mov	r4, r0
 80080a0:	f000 80f7 	beq.w	8008292 <_malloc_r+0x402>
 80080a4:	4583      	cmp	fp, r0
 80080a6:	9901      	ldr	r1, [sp, #4]
 80080a8:	4a37      	ldr	r2, [pc, #220]	; (8008188 <_malloc_r+0x2f8>)
 80080aa:	d902      	bls.n	80080b2 <_malloc_r+0x222>
 80080ac:	45b2      	cmp	sl, r6
 80080ae:	f040 80f0 	bne.w	8008292 <_malloc_r+0x402>
 80080b2:	4b36      	ldr	r3, [pc, #216]	; (800818c <_malloc_r+0x2fc>)
 80080b4:	6818      	ldr	r0, [r3, #0]
 80080b6:	45a3      	cmp	fp, r4
 80080b8:	eb00 0e01 	add.w	lr, r0, r1
 80080bc:	f8c3 e000 	str.w	lr, [r3]
 80080c0:	f108 3cff 	add.w	ip, r8, #4294967295
 80080c4:	f040 80ab 	bne.w	800821e <_malloc_r+0x38e>
 80080c8:	ea1b 0f0c 	tst.w	fp, ip
 80080cc:	f040 80a7 	bne.w	800821e <_malloc_r+0x38e>
 80080d0:	68b2      	ldr	r2, [r6, #8]
 80080d2:	4449      	add	r1, r9
 80080d4:	f041 0101 	orr.w	r1, r1, #1
 80080d8:	6051      	str	r1, [r2, #4]
 80080da:	4a2d      	ldr	r2, [pc, #180]	; (8008190 <_malloc_r+0x300>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6811      	ldr	r1, [r2, #0]
 80080e0:	428b      	cmp	r3, r1
 80080e2:	bf88      	it	hi
 80080e4:	6013      	strhi	r3, [r2, #0]
 80080e6:	4a2b      	ldr	r2, [pc, #172]	; (8008194 <_malloc_r+0x304>)
 80080e8:	6811      	ldr	r1, [r2, #0]
 80080ea:	428b      	cmp	r3, r1
 80080ec:	bf88      	it	hi
 80080ee:	6013      	strhi	r3, [r2, #0]
 80080f0:	e0cf      	b.n	8008292 <_malloc_r+0x402>
 80080f2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80080f6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80080fa:	d218      	bcs.n	800812e <_malloc_r+0x29e>
 80080fc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008100:	3238      	adds	r2, #56	; 0x38
 8008102:	f102 0e01 	add.w	lr, r2, #1
 8008106:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800810a:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800810e:	45f0      	cmp	r8, lr
 8008110:	d12b      	bne.n	800816a <_malloc_r+0x2da>
 8008112:	1092      	asrs	r2, r2, #2
 8008114:	f04f 0c01 	mov.w	ip, #1
 8008118:	fa0c f202 	lsl.w	r2, ip, r2
 800811c:	4302      	orrs	r2, r0
 800811e:	6072      	str	r2, [r6, #4]
 8008120:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008124:	f8c8 4008 	str.w	r4, [r8, #8]
 8008128:	f8ce 400c 	str.w	r4, [lr, #12]
 800812c:	e763      	b.n	8007ff6 <_malloc_r+0x166>
 800812e:	2a14      	cmp	r2, #20
 8008130:	d801      	bhi.n	8008136 <_malloc_r+0x2a6>
 8008132:	325b      	adds	r2, #91	; 0x5b
 8008134:	e7e5      	b.n	8008102 <_malloc_r+0x272>
 8008136:	2a54      	cmp	r2, #84	; 0x54
 8008138:	d803      	bhi.n	8008142 <_malloc_r+0x2b2>
 800813a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800813e:	326e      	adds	r2, #110	; 0x6e
 8008140:	e7df      	b.n	8008102 <_malloc_r+0x272>
 8008142:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008146:	d803      	bhi.n	8008150 <_malloc_r+0x2c0>
 8008148:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800814c:	3277      	adds	r2, #119	; 0x77
 800814e:	e7d8      	b.n	8008102 <_malloc_r+0x272>
 8008150:	f240 5e54 	movw	lr, #1364	; 0x554
 8008154:	4572      	cmp	r2, lr
 8008156:	bf9a      	itte	ls
 8008158:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800815c:	327c      	addls	r2, #124	; 0x7c
 800815e:	227e      	movhi	r2, #126	; 0x7e
 8008160:	e7cf      	b.n	8008102 <_malloc_r+0x272>
 8008162:	f8de e008 	ldr.w	lr, [lr, #8]
 8008166:	45f0      	cmp	r8, lr
 8008168:	d005      	beq.n	8008176 <_malloc_r+0x2e6>
 800816a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800816e:	f022 0203 	bic.w	r2, r2, #3
 8008172:	4562      	cmp	r2, ip
 8008174:	d8f5      	bhi.n	8008162 <_malloc_r+0x2d2>
 8008176:	f8de 800c 	ldr.w	r8, [lr, #12]
 800817a:	e7d1      	b.n	8008120 <_malloc_r+0x290>
 800817c:	20000150 	.word	0x20000150
 8008180:	20000158 	.word	0x20000158
 8008184:	20000a7c 	.word	0x20000a7c
 8008188:	20000558 	.word	0x20000558
 800818c:	20000a4c 	.word	0x20000a4c
 8008190:	20000a74 	.word	0x20000a74
 8008194:	20000a78 	.word	0x20000a78
 8008198:	6860      	ldr	r0, [r4, #4]
 800819a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800819e:	f020 0003 	bic.w	r0, r0, #3
 80081a2:	eba0 0a07 	sub.w	sl, r0, r7
 80081a6:	f1ba 0f0f 	cmp.w	sl, #15
 80081aa:	dd12      	ble.n	80081d2 <_malloc_r+0x342>
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	19e2      	adds	r2, r4, r7
 80081b0:	f047 0701 	orr.w	r7, r7, #1
 80081b4:	6067      	str	r7, [r4, #4]
 80081b6:	f8c3 c00c 	str.w	ip, [r3, #12]
 80081ba:	f8cc 3008 	str.w	r3, [ip, #8]
 80081be:	f04a 0301 	orr.w	r3, sl, #1
 80081c2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80081c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80081ca:	6053      	str	r3, [r2, #4]
 80081cc:	f844 a000 	str.w	sl, [r4, r0]
 80081d0:	e68f      	b.n	8007ef2 <_malloc_r+0x62>
 80081d2:	f1ba 0f00 	cmp.w	sl, #0
 80081d6:	db11      	blt.n	80081fc <_malloc_r+0x36c>
 80081d8:	4420      	add	r0, r4
 80081da:	6843      	ldr	r3, [r0, #4]
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	6043      	str	r3, [r0, #4]
 80081e2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80081e6:	4628      	mov	r0, r5
 80081e8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80081ec:	f8cc 3008 	str.w	r3, [ip, #8]
 80081f0:	f000 f88e 	bl	8008310 <__malloc_unlock>
 80081f4:	4620      	mov	r0, r4
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	4664      	mov	r4, ip
 80081fe:	e70f      	b.n	8008020 <_malloc_r+0x190>
 8008200:	f858 0908 	ldr.w	r0, [r8], #-8
 8008204:	4540      	cmp	r0, r8
 8008206:	f103 33ff 	add.w	r3, r3, #4294967295
 800820a:	f43f af13 	beq.w	8008034 <_malloc_r+0x1a4>
 800820e:	e718      	b.n	8008042 <_malloc_r+0x1b2>
 8008210:	3304      	adds	r3, #4
 8008212:	0052      	lsls	r2, r2, #1
 8008214:	4210      	tst	r0, r2
 8008216:	d0fb      	beq.n	8008210 <_malloc_r+0x380>
 8008218:	e6fc      	b.n	8008014 <_malloc_r+0x184>
 800821a:	4673      	mov	r3, lr
 800821c:	e7fa      	b.n	8008214 <_malloc_r+0x384>
 800821e:	6810      	ldr	r0, [r2, #0]
 8008220:	3001      	adds	r0, #1
 8008222:	bf1b      	ittet	ne
 8008224:	eba4 0b0b 	subne.w	fp, r4, fp
 8008228:	eb0b 020e 	addne.w	r2, fp, lr
 800822c:	6014      	streq	r4, [r2, #0]
 800822e:	601a      	strne	r2, [r3, #0]
 8008230:	f014 0b07 	ands.w	fp, r4, #7
 8008234:	bf1a      	itte	ne
 8008236:	f1cb 0008 	rsbne	r0, fp, #8
 800823a:	1824      	addne	r4, r4, r0
 800823c:	4658      	moveq	r0, fp
 800823e:	1862      	adds	r2, r4, r1
 8008240:	ea02 010c 	and.w	r1, r2, ip
 8008244:	4480      	add	r8, r0
 8008246:	eba8 0801 	sub.w	r8, r8, r1
 800824a:	ea08 080c 	and.w	r8, r8, ip
 800824e:	4641      	mov	r1, r8
 8008250:	4628      	mov	r0, r5
 8008252:	9201      	str	r2, [sp, #4]
 8008254:	f005 f910 	bl	800d478 <_sbrk_r>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	9a01      	ldr	r2, [sp, #4]
 800825c:	4b28      	ldr	r3, [pc, #160]	; (8008300 <_malloc_r+0x470>)
 800825e:	d107      	bne.n	8008270 <_malloc_r+0x3e0>
 8008260:	f1bb 0f00 	cmp.w	fp, #0
 8008264:	d023      	beq.n	80082ae <_malloc_r+0x41e>
 8008266:	f1ab 0008 	sub.w	r0, fp, #8
 800826a:	4410      	add	r0, r2
 800826c:	f04f 0800 	mov.w	r8, #0
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	60b4      	str	r4, [r6, #8]
 8008274:	1b00      	subs	r0, r0, r4
 8008276:	4440      	add	r0, r8
 8008278:	4442      	add	r2, r8
 800827a:	f040 0001 	orr.w	r0, r0, #1
 800827e:	45b2      	cmp	sl, r6
 8008280:	601a      	str	r2, [r3, #0]
 8008282:	6060      	str	r0, [r4, #4]
 8008284:	f43f af29 	beq.w	80080da <_malloc_r+0x24a>
 8008288:	f1b9 0f0f 	cmp.w	r9, #15
 800828c:	d812      	bhi.n	80082b4 <_malloc_r+0x424>
 800828e:	2301      	movs	r3, #1
 8008290:	6063      	str	r3, [r4, #4]
 8008292:	68b3      	ldr	r3, [r6, #8]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	42bb      	cmp	r3, r7
 800829c:	eba3 0207 	sub.w	r2, r3, r7
 80082a0:	d301      	bcc.n	80082a6 <_malloc_r+0x416>
 80082a2:	2a0f      	cmp	r2, #15
 80082a4:	dc22      	bgt.n	80082ec <_malloc_r+0x45c>
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f832 	bl	8008310 <__malloc_unlock>
 80082ac:	e5fc      	b.n	8007ea8 <_malloc_r+0x18>
 80082ae:	4610      	mov	r0, r2
 80082b0:	46d8      	mov	r8, fp
 80082b2:	e7dd      	b.n	8008270 <_malloc_r+0x3e0>
 80082b4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80082b8:	f1a9 090c 	sub.w	r9, r9, #12
 80082bc:	f029 0907 	bic.w	r9, r9, #7
 80082c0:	f002 0201 	and.w	r2, r2, #1
 80082c4:	ea42 0209 	orr.w	r2, r2, r9
 80082c8:	f8ca 2004 	str.w	r2, [sl, #4]
 80082cc:	2105      	movs	r1, #5
 80082ce:	eb0a 0209 	add.w	r2, sl, r9
 80082d2:	f1b9 0f0f 	cmp.w	r9, #15
 80082d6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80082da:	f67f aefe 	bls.w	80080da <_malloc_r+0x24a>
 80082de:	f10a 0108 	add.w	r1, sl, #8
 80082e2:	4628      	mov	r0, r5
 80082e4:	f7ff fd14 	bl	8007d10 <_free_r>
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <_malloc_r+0x470>)
 80082ea:	e6f6      	b.n	80080da <_malloc_r+0x24a>
 80082ec:	68b4      	ldr	r4, [r6, #8]
 80082ee:	f047 0301 	orr.w	r3, r7, #1
 80082f2:	4427      	add	r7, r4
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	6063      	str	r3, [r4, #4]
 80082fa:	60b7      	str	r7, [r6, #8]
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	e5f8      	b.n	8007ef2 <_malloc_r+0x62>
 8008300:	20000a4c 	.word	0x20000a4c

08008304 <__malloc_lock>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__malloc_lock+0x8>)
 8008306:	f7ff bc9d 	b.w	8007c44 <__retarget_lock_acquire_recursive>
 800830a:	bf00      	nop
 800830c:	20000a45 	.word	0x20000a45

08008310 <__malloc_unlock>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__malloc_unlock+0x8>)
 8008312:	f7ff bc98 	b.w	8007c46 <__retarget_lock_release_recursive>
 8008316:	bf00      	nop
 8008318:	20000a45 	.word	0x20000a45
 800831c:	00000000 	.word	0x00000000

08008320 <_svfprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	ed2d 8b04 	vpush	{d8-d9}
 8008328:	b0cf      	sub	sp, #316	; 0x13c
 800832a:	4689      	mov	r9, r1
 800832c:	9203      	str	r2, [sp, #12]
 800832e:	461d      	mov	r5, r3
 8008330:	4682      	mov	sl, r0
 8008332:	f005 f89d 	bl	800d470 <_localeconv_r>
 8008336:	6803      	ldr	r3, [r0, #0]
 8008338:	9313      	str	r3, [sp, #76]	; 0x4c
 800833a:	4618      	mov	r0, r3
 800833c:	f7f7 ff52 	bl	80001e4 <strlen>
 8008340:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008344:	900e      	str	r0, [sp, #56]	; 0x38
 8008346:	0619      	lsls	r1, r3, #24
 8008348:	d51a      	bpl.n	8008380 <_svfprintf_r+0x60>
 800834a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800834e:	b9bb      	cbnz	r3, 8008380 <_svfprintf_r+0x60>
 8008350:	2140      	movs	r1, #64	; 0x40
 8008352:	4650      	mov	r0, sl
 8008354:	f7ff fd9c 	bl	8007e90 <_malloc_r>
 8008358:	f8c9 0000 	str.w	r0, [r9]
 800835c:	f8c9 0010 	str.w	r0, [r9, #16]
 8008360:	b958      	cbnz	r0, 800837a <_svfprintf_r+0x5a>
 8008362:	230c      	movs	r3, #12
 8008364:	f8ca 3000 	str.w	r3, [sl]
 8008368:	f04f 33ff 	mov.w	r3, #4294967295
 800836c:	930b      	str	r3, [sp, #44]	; 0x2c
 800836e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008370:	b04f      	add	sp, #316	; 0x13c
 8008372:	ecbd 8b04 	vpop	{d8-d9}
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	f8c9 3014 	str.w	r3, [r9, #20]
 8008380:	ed9f 7b91 	vldr	d7, [pc, #580]	; 80085c8 <_svfprintf_r+0x2a8>
 8008384:	2300      	movs	r3, #0
 8008386:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800838a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800838e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8008392:	ac25      	add	r4, sp, #148	; 0x94
 8008394:	9422      	str	r4, [sp, #136]	; 0x88
 8008396:	9305      	str	r3, [sp, #20]
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	9311      	str	r3, [sp, #68]	; 0x44
 800839c:	9314      	str	r3, [sp, #80]	; 0x50
 800839e:	930b      	str	r3, [sp, #44]	; 0x2c
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	461e      	mov	r6, r3
 80083a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a8:	b10a      	cbz	r2, 80083ae <_svfprintf_r+0x8e>
 80083aa:	2a25      	cmp	r2, #37	; 0x25
 80083ac:	d1f9      	bne.n	80083a2 <_svfprintf_r+0x82>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	1af7      	subs	r7, r6, r3
 80083b2:	d00d      	beq.n	80083d0 <_svfprintf_r+0xb0>
 80083b4:	e9c4 3700 	strd	r3, r7, [r4]
 80083b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80083ba:	443b      	add	r3, r7
 80083bc:	9324      	str	r3, [sp, #144]	; 0x90
 80083be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083c0:	3301      	adds	r3, #1
 80083c2:	2b07      	cmp	r3, #7
 80083c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80083c6:	dc78      	bgt.n	80084ba <_svfprintf_r+0x19a>
 80083c8:	3408      	adds	r4, #8
 80083ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083cc:	443b      	add	r3, r7
 80083ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80083d0:	7833      	ldrb	r3, [r6, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f001 815a 	beq.w	800968c <_svfprintf_r+0x136c>
 80083d8:	2300      	movs	r3, #0
 80083da:	3601      	adds	r6, #1
 80083dc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80083e0:	f04f 38ff 	mov.w	r8, #4294967295
 80083e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e6:	469b      	mov	fp, r3
 80083e8:	270a      	movs	r7, #10
 80083ea:	212b      	movs	r1, #43	; 0x2b
 80083ec:	4633      	mov	r3, r6
 80083ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f2:	9207      	str	r2, [sp, #28]
 80083f4:	930a      	str	r3, [sp, #40]	; 0x28
 80083f6:	9b07      	ldr	r3, [sp, #28]
 80083f8:	3b20      	subs	r3, #32
 80083fa:	2b5a      	cmp	r3, #90	; 0x5a
 80083fc:	f200 85c6 	bhi.w	8008f8c <_svfprintf_r+0xc6c>
 8008400:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008404:	05c4007e 	.word	0x05c4007e
 8008408:	008605c4 	.word	0x008605c4
 800840c:	05c405c4 	.word	0x05c405c4
 8008410:	006505c4 	.word	0x006505c4
 8008414:	05c405c4 	.word	0x05c405c4
 8008418:	00930089 	.word	0x00930089
 800841c:	009005c4 	.word	0x009005c4
 8008420:	05c40096 	.word	0x05c40096
 8008424:	00b200af 	.word	0x00b200af
 8008428:	00b200b2 	.word	0x00b200b2
 800842c:	00b200b2 	.word	0x00b200b2
 8008430:	00b200b2 	.word	0x00b200b2
 8008434:	00b200b2 	.word	0x00b200b2
 8008438:	05c405c4 	.word	0x05c405c4
 800843c:	05c405c4 	.word	0x05c405c4
 8008440:	05c405c4 	.word	0x05c405c4
 8008444:	012905c4 	.word	0x012905c4
 8008448:	00e605c4 	.word	0x00e605c4
 800844c:	012900f9 	.word	0x012900f9
 8008450:	01290129 	.word	0x01290129
 8008454:	05c405c4 	.word	0x05c405c4
 8008458:	05c405c4 	.word	0x05c405c4
 800845c:	05c400c2 	.word	0x05c400c2
 8008460:	049105c4 	.word	0x049105c4
 8008464:	05c405c4 	.word	0x05c405c4
 8008468:	04db05c4 	.word	0x04db05c4
 800846c:	050105c4 	.word	0x050105c4
 8008470:	05c405c4 	.word	0x05c405c4
 8008474:	05c40523 	.word	0x05c40523
 8008478:	05c405c4 	.word	0x05c405c4
 800847c:	05c405c4 	.word	0x05c405c4
 8008480:	05c405c4 	.word	0x05c405c4
 8008484:	012905c4 	.word	0x012905c4
 8008488:	00e605c4 	.word	0x00e605c4
 800848c:	012900fb 	.word	0x012900fb
 8008490:	01290129 	.word	0x01290129
 8008494:	00fb00c5 	.word	0x00fb00c5
 8008498:	05c400d9 	.word	0x05c400d9
 800849c:	05c400d2 	.word	0x05c400d2
 80084a0:	0493046c 	.word	0x0493046c
 80084a4:	00d904ca 	.word	0x00d904ca
 80084a8:	04db05c4 	.word	0x04db05c4
 80084ac:	0503007c 	.word	0x0503007c
 80084b0:	05c405c4 	.word	0x05c405c4
 80084b4:	05c40542 	.word	0x05c40542
 80084b8:	007c      	.short	0x007c
 80084ba:	aa22      	add	r2, sp, #136	; 0x88
 80084bc:	4649      	mov	r1, r9
 80084be:	4650      	mov	r0, sl
 80084c0:	f007 fdaa 	bl	8010018 <__ssprint_r>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f040 8137 	bne.w	8008738 <_svfprintf_r+0x418>
 80084ca:	ac25      	add	r4, sp, #148	; 0x94
 80084cc:	e77d      	b.n	80083ca <_svfprintf_r+0xaa>
 80084ce:	4650      	mov	r0, sl
 80084d0:	f004 ffce 	bl	800d470 <_localeconv_r>
 80084d4:	6843      	ldr	r3, [r0, #4]
 80084d6:	9314      	str	r3, [sp, #80]	; 0x50
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f7 fe83 	bl	80001e4 <strlen>
 80084de:	9011      	str	r0, [sp, #68]	; 0x44
 80084e0:	4650      	mov	r0, sl
 80084e2:	f004 ffc5 	bl	800d470 <_localeconv_r>
 80084e6:	6883      	ldr	r3, [r0, #8]
 80084e8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ec:	212b      	movs	r1, #43	; 0x2b
 80084ee:	b12b      	cbz	r3, 80084fc <_svfprintf_r+0x1dc>
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	b11b      	cbz	r3, 80084fc <_svfprintf_r+0x1dc>
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b10b      	cbz	r3, 80084fc <_svfprintf_r+0x1dc>
 80084f8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80084fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084fe:	e775      	b.n	80083ec <_svfprintf_r+0xcc>
 8008500:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f9      	bne.n	80084fc <_svfprintf_r+0x1dc>
 8008508:	2320      	movs	r3, #32
 800850a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800850e:	e7f5      	b.n	80084fc <_svfprintf_r+0x1dc>
 8008510:	f04b 0b01 	orr.w	fp, fp, #1
 8008514:	e7f2      	b.n	80084fc <_svfprintf_r+0x1dc>
 8008516:	f855 3b04 	ldr.w	r3, [r5], #4
 800851a:	930f      	str	r3, [sp, #60]	; 0x3c
 800851c:	2b00      	cmp	r3, #0
 800851e:	daed      	bge.n	80084fc <_svfprintf_r+0x1dc>
 8008520:	425b      	negs	r3, r3
 8008522:	930f      	str	r3, [sp, #60]	; 0x3c
 8008524:	f04b 0b04 	orr.w	fp, fp, #4
 8008528:	e7e8      	b.n	80084fc <_svfprintf_r+0x1dc>
 800852a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800852e:	e7e5      	b.n	80084fc <_svfprintf_r+0x1dc>
 8008530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	9207      	str	r2, [sp, #28]
 8008538:	2a2a      	cmp	r2, #42	; 0x2a
 800853a:	d10f      	bne.n	800855c <_svfprintf_r+0x23c>
 800853c:	f855 2b04 	ldr.w	r2, [r5], #4
 8008540:	930a      	str	r3, [sp, #40]	; 0x28
 8008542:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8008546:	e7d9      	b.n	80084fc <_svfprintf_r+0x1dc>
 8008548:	fb07 2808 	mla	r8, r7, r8, r2
 800854c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008550:	9207      	str	r2, [sp, #28]
 8008552:	9a07      	ldr	r2, [sp, #28]
 8008554:	3a30      	subs	r2, #48	; 0x30
 8008556:	2a09      	cmp	r2, #9
 8008558:	d9f6      	bls.n	8008548 <_svfprintf_r+0x228>
 800855a:	e74b      	b.n	80083f4 <_svfprintf_r+0xd4>
 800855c:	f04f 0800 	mov.w	r8, #0
 8008560:	e7f7      	b.n	8008552 <_svfprintf_r+0x232>
 8008562:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008566:	e7c9      	b.n	80084fc <_svfprintf_r+0x1dc>
 8008568:	2200      	movs	r2, #0
 800856a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856c:	920f      	str	r2, [sp, #60]	; 0x3c
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008572:	3a30      	subs	r2, #48	; 0x30
 8008574:	fb07 2200 	mla	r2, r7, r0, r2
 8008578:	920f      	str	r2, [sp, #60]	; 0x3c
 800857a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857e:	9207      	str	r2, [sp, #28]
 8008580:	3a30      	subs	r2, #48	; 0x30
 8008582:	2a09      	cmp	r2, #9
 8008584:	d9f3      	bls.n	800856e <_svfprintf_r+0x24e>
 8008586:	e735      	b.n	80083f4 <_svfprintf_r+0xd4>
 8008588:	f04b 0b08 	orr.w	fp, fp, #8
 800858c:	e7b6      	b.n	80084fc <_svfprintf_r+0x1dc>
 800858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b68      	cmp	r3, #104	; 0x68
 8008594:	bf01      	itttt	eq
 8008596:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8008598:	3301      	addeq	r3, #1
 800859a:	930a      	streq	r3, [sp, #40]	; 0x28
 800859c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80085a0:	bf18      	it	ne
 80085a2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80085a6:	e7a9      	b.n	80084fc <_svfprintf_r+0x1dc>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b6c      	cmp	r3, #108	; 0x6c
 80085ae:	d105      	bne.n	80085bc <_svfprintf_r+0x29c>
 80085b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085b2:	3301      	adds	r3, #1
 80085b4:	930a      	str	r3, [sp, #40]	; 0x28
 80085b6:	f04b 0b20 	orr.w	fp, fp, #32
 80085ba:	e79f      	b.n	80084fc <_svfprintf_r+0x1dc>
 80085bc:	f04b 0b10 	orr.w	fp, fp, #16
 80085c0:	e79c      	b.n	80084fc <_svfprintf_r+0x1dc>
 80085c2:	bf00      	nop
 80085c4:	f3af 8000 	nop.w
	...
 80085d0:	462a      	mov	r2, r5
 80085d2:	f852 3b04 	ldr.w	r3, [r2], #4
 80085d6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80085da:	2300      	movs	r3, #0
 80085dc:	9206      	str	r2, [sp, #24]
 80085de:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	461f      	mov	r7, r3
 80085e6:	461e      	mov	r6, r3
 80085e8:	9308      	str	r3, [sp, #32]
 80085ea:	461d      	mov	r5, r3
 80085ec:	ab35      	add	r3, sp, #212	; 0xd4
 80085ee:	f04f 0801 	mov.w	r8, #1
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	e1b9      	b.n	800896a <_svfprintf_r+0x64a>
 80085f6:	f04b 0b10 	orr.w	fp, fp, #16
 80085fa:	f01b 0f20 	tst.w	fp, #32
 80085fe:	d012      	beq.n	8008626 <_svfprintf_r+0x306>
 8008600:	3507      	adds	r5, #7
 8008602:	f025 0307 	bic.w	r3, r5, #7
 8008606:	461a      	mov	r2, r3
 8008608:	685e      	ldr	r6, [r3, #4]
 800860a:	f852 5b08 	ldr.w	r5, [r2], #8
 800860e:	9206      	str	r2, [sp, #24]
 8008610:	2e00      	cmp	r6, #0
 8008612:	da06      	bge.n	8008622 <_svfprintf_r+0x302>
 8008614:	426d      	negs	r5, r5
 8008616:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800861a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800861e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008622:	2301      	movs	r3, #1
 8008624:	e392      	b.n	8008d4c <_svfprintf_r+0xa2c>
 8008626:	462b      	mov	r3, r5
 8008628:	f01b 0f10 	tst.w	fp, #16
 800862c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008630:	9306      	str	r3, [sp, #24]
 8008632:	d002      	beq.n	800863a <_svfprintf_r+0x31a>
 8008634:	4635      	mov	r5, r6
 8008636:	17f6      	asrs	r6, r6, #31
 8008638:	e7ea      	b.n	8008610 <_svfprintf_r+0x2f0>
 800863a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800863e:	d003      	beq.n	8008648 <_svfprintf_r+0x328>
 8008640:	b235      	sxth	r5, r6
 8008642:	f346 36c0 	sbfx	r6, r6, #15, #1
 8008646:	e7e3      	b.n	8008610 <_svfprintf_r+0x2f0>
 8008648:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800864c:	d0f2      	beq.n	8008634 <_svfprintf_r+0x314>
 800864e:	b275      	sxtb	r5, r6
 8008650:	f346 16c0 	sbfx	r6, r6, #7, #1
 8008654:	e7dc      	b.n	8008610 <_svfprintf_r+0x2f0>
 8008656:	3507      	adds	r5, #7
 8008658:	f025 0307 	bic.w	r3, r5, #7
 800865c:	ecb3 7b02 	vldmia	r3!, {d7}
 8008660:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008664:	9306      	str	r3, [sp, #24]
 8008666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008668:	ee09 3a10 	vmov	s18, r3
 800866c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800866e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008672:	ee09 3a90 	vmov	s19, r3
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	4b34      	ldr	r3, [pc, #208]	; (800874c <_svfprintf_r+0x42c>)
 800867c:	ec51 0b19 	vmov	r0, r1, d9
 8008680:	f7f8 fa64 	bl	8000b4c <__aeabi_dcmpun>
 8008684:	bb18      	cbnz	r0, 80086ce <_svfprintf_r+0x3ae>
 8008686:	4b31      	ldr	r3, [pc, #196]	; (800874c <_svfprintf_r+0x42c>)
 8008688:	ec51 0b19 	vmov	r0, r1, d9
 800868c:	f04f 32ff 	mov.w	r2, #4294967295
 8008690:	f7f8 fa3e 	bl	8000b10 <__aeabi_dcmple>
 8008694:	b9d8      	cbnz	r0, 80086ce <_svfprintf_r+0x3ae>
 8008696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	f7f8 fa2d 	bl	8000afc <__aeabi_dcmplt>
 80086a2:	b110      	cbz	r0, 80086aa <_svfprintf_r+0x38a>
 80086a4:	232d      	movs	r3, #45	; 0x2d
 80086a6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80086aa:	4a29      	ldr	r2, [pc, #164]	; (8008750 <_svfprintf_r+0x430>)
 80086ac:	4b29      	ldr	r3, [pc, #164]	; (8008754 <_svfprintf_r+0x434>)
 80086ae:	9907      	ldr	r1, [sp, #28]
 80086b0:	2947      	cmp	r1, #71	; 0x47
 80086b2:	bfc8      	it	gt
 80086b4:	461a      	movgt	r2, r3
 80086b6:	2300      	movs	r3, #0
 80086b8:	9203      	str	r2, [sp, #12]
 80086ba:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	f04f 0803 	mov.w	r8, #3
 80086c4:	461f      	mov	r7, r3
 80086c6:	461e      	mov	r6, r3
 80086c8:	9308      	str	r3, [sp, #32]
 80086ca:	461d      	mov	r5, r3
 80086cc:	e14d      	b.n	800896a <_svfprintf_r+0x64a>
 80086ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086d2:	4610      	mov	r0, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7f8 fa39 	bl	8000b4c <__aeabi_dcmpun>
 80086da:	b140      	cbz	r0, 80086ee <_svfprintf_r+0x3ce>
 80086dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086de:	4a1e      	ldr	r2, [pc, #120]	; (8008758 <_svfprintf_r+0x438>)
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbc      	itt	lt
 80086e4:	232d      	movlt	r3, #45	; 0x2d
 80086e6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80086ea:	4b1c      	ldr	r3, [pc, #112]	; (800875c <_svfprintf_r+0x43c>)
 80086ec:	e7df      	b.n	80086ae <_svfprintf_r+0x38e>
 80086ee:	9b07      	ldr	r3, [sp, #28]
 80086f0:	f023 0320 	bic.w	r3, r3, #32
 80086f4:	2b41      	cmp	r3, #65	; 0x41
 80086f6:	9308      	str	r3, [sp, #32]
 80086f8:	d132      	bne.n	8008760 <_svfprintf_r+0x440>
 80086fa:	2330      	movs	r3, #48	; 0x30
 80086fc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008700:	9b07      	ldr	r3, [sp, #28]
 8008702:	2b61      	cmp	r3, #97	; 0x61
 8008704:	bf0c      	ite	eq
 8008706:	2378      	moveq	r3, #120	; 0x78
 8008708:	2358      	movne	r3, #88	; 0x58
 800870a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800870e:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008712:	f04b 0b02 	orr.w	fp, fp, #2
 8008716:	f340 8204 	ble.w	8008b22 <_svfprintf_r+0x802>
 800871a:	f108 0101 	add.w	r1, r8, #1
 800871e:	4650      	mov	r0, sl
 8008720:	f7ff fbb6 	bl	8007e90 <_malloc_r>
 8008724:	9003      	str	r0, [sp, #12]
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 81ff 	bne.w	8008b2a <_svfprintf_r+0x80a>
 800872c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008734:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008738:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800873c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008742:	bf18      	it	ne
 8008744:	f04f 33ff 	movne.w	r3, #4294967295
 8008748:	e610      	b.n	800836c <_svfprintf_r+0x4c>
 800874a:	bf00      	nop
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	080118b4 	.word	0x080118b4
 8008754:	080118b8 	.word	0x080118b8
 8008758:	080118bc 	.word	0x080118bc
 800875c:	080118c0 	.word	0x080118c0
 8008760:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008764:	f000 81e4 	beq.w	8008b30 <_svfprintf_r+0x810>
 8008768:	9b08      	ldr	r3, [sp, #32]
 800876a:	2b47      	cmp	r3, #71	; 0x47
 800876c:	f040 81e4 	bne.w	8008b38 <_svfprintf_r+0x818>
 8008770:	f1b8 0f00 	cmp.w	r8, #0
 8008774:	f040 81e0 	bne.w	8008b38 <_svfprintf_r+0x818>
 8008778:	f8cd 8010 	str.w	r8, [sp, #16]
 800877c:	f04f 0801 	mov.w	r8, #1
 8008780:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008784:	9310      	str	r3, [sp, #64]	; 0x40
 8008786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	f280 81d7 	bge.w	8008b3c <_svfprintf_r+0x81c>
 800878e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008790:	ee08 3a10 	vmov	s16, r3
 8008794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008796:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800879a:	ee08 3a90 	vmov	s17, r3
 800879e:	232d      	movs	r3, #45	; 0x2d
 80087a0:	9318      	str	r3, [sp, #96]	; 0x60
 80087a2:	9b08      	ldr	r3, [sp, #32]
 80087a4:	2b41      	cmp	r3, #65	; 0x41
 80087a6:	f040 81e7 	bne.w	8008b78 <_svfprintf_r+0x858>
 80087aa:	eeb0 0a48 	vmov.f32	s0, s16
 80087ae:	eef0 0a68 	vmov.f32	s1, s17
 80087b2:	a81c      	add	r0, sp, #112	; 0x70
 80087b4:	f004 fea4 	bl	800d500 <frexp>
 80087b8:	2200      	movs	r2, #0
 80087ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80087be:	ec51 0b10 	vmov	r0, r1, d0
 80087c2:	f7f7 ff29 	bl	8000618 <__aeabi_dmul>
 80087c6:	2200      	movs	r2, #0
 80087c8:	2300      	movs	r3, #0
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	f7f8 f98b 	bl	8000ae8 <__aeabi_dcmpeq>
 80087d2:	b108      	cbz	r0, 80087d8 <_svfprintf_r+0x4b8>
 80087d4:	2301      	movs	r3, #1
 80087d6:	931c      	str	r3, [sp, #112]	; 0x70
 80087d8:	4bac      	ldr	r3, [pc, #688]	; (8008a8c <_svfprintf_r+0x76c>)
 80087da:	4aad      	ldr	r2, [pc, #692]	; (8008a90 <_svfprintf_r+0x770>)
 80087dc:	9907      	ldr	r1, [sp, #28]
 80087de:	9d03      	ldr	r5, [sp, #12]
 80087e0:	2961      	cmp	r1, #97	; 0x61
 80087e2:	bf18      	it	ne
 80087e4:	461a      	movne	r2, r3
 80087e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80087ea:	9217      	str	r2, [sp, #92]	; 0x5c
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	4ba9      	ldr	r3, [pc, #676]	; (8008a94 <_svfprintf_r+0x774>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	4630      	mov	r0, r6
 80087f4:	4639      	mov	r1, r7
 80087f6:	f7f7 ff0f 	bl	8000618 <__aeabi_dmul>
 80087fa:	460f      	mov	r7, r1
 80087fc:	4606      	mov	r6, r0
 80087fe:	f7f8 f9bb 	bl	8000b78 <__aeabi_d2iz>
 8008802:	9019      	str	r0, [sp, #100]	; 0x64
 8008804:	f7f7 fe9e 	bl	8000544 <__aeabi_i2d>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4630      	mov	r0, r6
 800880e:	4639      	mov	r1, r7
 8008810:	f7f7 fd4a 	bl	80002a8 <__aeabi_dsub>
 8008814:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008818:	5c9b      	ldrb	r3, [r3, r2]
 800881a:	f805 3b01 	strb.w	r3, [r5], #1
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	9312      	str	r3, [sp, #72]	; 0x48
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	4606      	mov	r6, r0
 8008826:	460f      	mov	r7, r1
 8008828:	d007      	beq.n	800883a <_svfprintf_r+0x51a>
 800882a:	3b01      	subs	r3, #1
 800882c:	9305      	str	r3, [sp, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	2300      	movs	r3, #0
 8008832:	f7f8 f959 	bl	8000ae8 <__aeabi_dcmpeq>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0d9      	beq.n	80087ee <_svfprintf_r+0x4ce>
 800883a:	4b97      	ldr	r3, [pc, #604]	; (8008a98 <_svfprintf_r+0x778>)
 800883c:	2200      	movs	r2, #0
 800883e:	4630      	mov	r0, r6
 8008840:	4639      	mov	r1, r7
 8008842:	f7f8 f979 	bl	8000b38 <__aeabi_dcmpgt>
 8008846:	b960      	cbnz	r0, 8008862 <_svfprintf_r+0x542>
 8008848:	4b93      	ldr	r3, [pc, #588]	; (8008a98 <_svfprintf_r+0x778>)
 800884a:	2200      	movs	r2, #0
 800884c:	4630      	mov	r0, r6
 800884e:	4639      	mov	r1, r7
 8008850:	f7f8 f94a 	bl	8000ae8 <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	f000 818a 	beq.w	8008b6e <_svfprintf_r+0x84e>
 800885a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800885c:	07de      	lsls	r6, r3, #31
 800885e:	f140 8186 	bpl.w	8008b6e <_svfprintf_r+0x84e>
 8008862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008864:	9520      	str	r5, [sp, #128]	; 0x80
 8008866:	7bd9      	ldrb	r1, [r3, #15]
 8008868:	2030      	movs	r0, #48	; 0x30
 800886a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800886c:	1e53      	subs	r3, r2, #1
 800886e:	9320      	str	r3, [sp, #128]	; 0x80
 8008870:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008874:	428b      	cmp	r3, r1
 8008876:	f000 8169 	beq.w	8008b4c <_svfprintf_r+0x82c>
 800887a:	2b39      	cmp	r3, #57	; 0x39
 800887c:	bf0b      	itete	eq
 800887e:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008880:	3301      	addne	r3, #1
 8008882:	7a9b      	ldrbeq	r3, [r3, #10]
 8008884:	b2db      	uxtbne	r3, r3
 8008886:	f802 3c01 	strb.w	r3, [r2, #-1]
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	1aeb      	subs	r3, r5, r3
 800888e:	9305      	str	r3, [sp, #20]
 8008890:	9b08      	ldr	r3, [sp, #32]
 8008892:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008894:	2b47      	cmp	r3, #71	; 0x47
 8008896:	f040 81b9 	bne.w	8008c0c <_svfprintf_r+0x8ec>
 800889a:	1ce8      	adds	r0, r5, #3
 800889c:	db02      	blt.n	80088a4 <_svfprintf_r+0x584>
 800889e:	45a8      	cmp	r8, r5
 80088a0:	f280 81d7 	bge.w	8008c52 <_svfprintf_r+0x932>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	3b02      	subs	r3, #2
 80088a8:	9307      	str	r3, [sp, #28]
 80088aa:	9907      	ldr	r1, [sp, #28]
 80088ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80088b0:	f021 0120 	bic.w	r1, r1, #32
 80088b4:	2941      	cmp	r1, #65	; 0x41
 80088b6:	bf08      	it	eq
 80088b8:	320f      	addeq	r2, #15
 80088ba:	f105 33ff 	add.w	r3, r5, #4294967295
 80088be:	bf06      	itte	eq
 80088c0:	b2d2      	uxtbeq	r2, r2
 80088c2:	2101      	moveq	r1, #1
 80088c4:	2100      	movne	r1, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	931c      	str	r3, [sp, #112]	; 0x70
 80088ca:	bfb8      	it	lt
 80088cc:	f1c5 0301 	rsblt	r3, r5, #1
 80088d0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80088d4:	bfb4      	ite	lt
 80088d6:	222d      	movlt	r2, #45	; 0x2d
 80088d8:	222b      	movge	r2, #43	; 0x2b
 80088da:	2b09      	cmp	r3, #9
 80088dc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80088e0:	f340 81aa 	ble.w	8008c38 <_svfprintf_r+0x918>
 80088e4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80088e8:	260a      	movs	r6, #10
 80088ea:	4602      	mov	r2, r0
 80088ec:	fb93 f5f6 	sdiv	r5, r3, r6
 80088f0:	fb06 3115 	mls	r1, r6, r5, r3
 80088f4:	3130      	adds	r1, #48	; 0x30
 80088f6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088fa:	4619      	mov	r1, r3
 80088fc:	2963      	cmp	r1, #99	; 0x63
 80088fe:	f100 30ff 	add.w	r0, r0, #4294967295
 8008902:	462b      	mov	r3, r5
 8008904:	dcf1      	bgt.n	80088ea <_svfprintf_r+0x5ca>
 8008906:	3330      	adds	r3, #48	; 0x30
 8008908:	1e91      	subs	r1, r2, #2
 800890a:	f800 3c01 	strb.w	r3, [r0, #-1]
 800890e:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8008912:	460b      	mov	r3, r1
 8008914:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8008918:	4283      	cmp	r3, r0
 800891a:	f0c0 8188 	bcc.w	8008c2e <_svfprintf_r+0x90e>
 800891e:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	4281      	cmp	r1, r0
 8008926:	bf88      	it	hi
 8008928:	2300      	movhi	r3, #0
 800892a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800892e:	441a      	add	r2, r3
 8008930:	ab1e      	add	r3, sp, #120	; 0x78
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	9a05      	ldr	r2, [sp, #20]
 8008936:	9315      	str	r3, [sp, #84]	; 0x54
 8008938:	2a01      	cmp	r2, #1
 800893a:	eb03 0802 	add.w	r8, r3, r2
 800893e:	dc02      	bgt.n	8008946 <_svfprintf_r+0x626>
 8008940:	f01b 0f01 	tst.w	fp, #1
 8008944:	d001      	beq.n	800894a <_svfprintf_r+0x62a>
 8008946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008948:	4498      	add	r8, r3
 800894a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800894e:	2600      	movs	r6, #0
 8008950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008954:	9310      	str	r3, [sp, #64]	; 0x40
 8008956:	9608      	str	r6, [sp, #32]
 8008958:	4635      	mov	r5, r6
 800895a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800895c:	b113      	cbz	r3, 8008964 <_svfprintf_r+0x644>
 800895e:	232d      	movs	r3, #45	; 0x2d
 8008960:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008964:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8008968:	2700      	movs	r7, #0
 800896a:	4547      	cmp	r7, r8
 800896c:	463b      	mov	r3, r7
 800896e:	bfb8      	it	lt
 8008970:	4643      	movlt	r3, r8
 8008972:	9310      	str	r3, [sp, #64]	; 0x40
 8008974:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008978:	b113      	cbz	r3, 8008980 <_svfprintf_r+0x660>
 800897a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800897c:	3301      	adds	r3, #1
 800897e:	9310      	str	r3, [sp, #64]	; 0x40
 8008980:	f01b 0302 	ands.w	r3, fp, #2
 8008984:	9317      	str	r3, [sp, #92]	; 0x5c
 8008986:	bf1e      	ittt	ne
 8008988:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800898a:	3302      	addne	r3, #2
 800898c:	9310      	strne	r3, [sp, #64]	; 0x40
 800898e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008992:	9318      	str	r3, [sp, #96]	; 0x60
 8008994:	d122      	bne.n	80089dc <_svfprintf_r+0x6bc>
 8008996:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	9312      	str	r3, [sp, #72]	; 0x48
 80089a0:	dd1c      	ble.n	80089dc <_svfprintf_r+0x6bc>
 80089a2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089a4:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80089a8:	2810      	cmp	r0, #16
 80089aa:	483c      	ldr	r0, [pc, #240]	; (8008a9c <_svfprintf_r+0x77c>)
 80089ac:	6020      	str	r0, [r4, #0]
 80089ae:	f102 0201 	add.w	r2, r2, #1
 80089b2:	f104 0108 	add.w	r1, r4, #8
 80089b6:	f300 82f7 	bgt.w	8008fa8 <_svfprintf_r+0xc88>
 80089ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	4403      	add	r3, r0
 80089c0:	2a07      	cmp	r2, #7
 80089c2:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80089c6:	f340 8304 	ble.w	8008fd2 <_svfprintf_r+0xcb2>
 80089ca:	aa22      	add	r2, sp, #136	; 0x88
 80089cc:	4649      	mov	r1, r9
 80089ce:	4650      	mov	r0, sl
 80089d0:	f007 fb22 	bl	8010018 <__ssprint_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f040 8637 	bne.w	8009648 <_svfprintf_r+0x1328>
 80089da:	ac25      	add	r4, sp, #148	; 0x94
 80089dc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80089e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089e2:	b16a      	cbz	r2, 8008a00 <_svfprintf_r+0x6e0>
 80089e4:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	2201      	movs	r2, #1
 80089ec:	4413      	add	r3, r2
 80089ee:	9324      	str	r3, [sp, #144]	; 0x90
 80089f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089f2:	6062      	str	r2, [r4, #4]
 80089f4:	4413      	add	r3, r2
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80089fa:	f300 82ec 	bgt.w	8008fd6 <_svfprintf_r+0xcb6>
 80089fe:	3408      	adds	r4, #8
 8008a00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008a02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a04:	b162      	cbz	r2, 8008a20 <_svfprintf_r+0x700>
 8008a06:	aa1b      	add	r2, sp, #108	; 0x6c
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	9324      	str	r3, [sp, #144]	; 0x90
 8008a10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a12:	6062      	str	r2, [r4, #4]
 8008a14:	3301      	adds	r3, #1
 8008a16:	2b07      	cmp	r3, #7
 8008a18:	9323      	str	r3, [sp, #140]	; 0x8c
 8008a1a:	f300 82e6 	bgt.w	8008fea <_svfprintf_r+0xcca>
 8008a1e:	3408      	adds	r4, #8
 8008a20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008a22:	2b80      	cmp	r3, #128	; 0x80
 8008a24:	d122      	bne.n	8008a6c <_svfprintf_r+0x74c>
 8008a26:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	9312      	str	r3, [sp, #72]	; 0x48
 8008a30:	dd1c      	ble.n	8008a6c <_svfprintf_r+0x74c>
 8008a32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a34:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8008a38:	2810      	cmp	r0, #16
 8008a3a:	4819      	ldr	r0, [pc, #100]	; (8008aa0 <_svfprintf_r+0x780>)
 8008a3c:	6020      	str	r0, [r4, #0]
 8008a3e:	f102 0201 	add.w	r2, r2, #1
 8008a42:	f104 0108 	add.w	r1, r4, #8
 8008a46:	f300 82da 	bgt.w	8008ffe <_svfprintf_r+0xcde>
 8008a4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a4c:	6060      	str	r0, [r4, #4]
 8008a4e:	4403      	add	r3, r0
 8008a50:	2a07      	cmp	r2, #7
 8008a52:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008a56:	f340 82e7 	ble.w	8009028 <_svfprintf_r+0xd08>
 8008a5a:	aa22      	add	r2, sp, #136	; 0x88
 8008a5c:	4649      	mov	r1, r9
 8008a5e:	4650      	mov	r0, sl
 8008a60:	f007 fada 	bl	8010018 <__ssprint_r>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f040 85ef 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008a6a:	ac25      	add	r4, sp, #148	; 0x94
 8008a6c:	eba7 0708 	sub.w	r7, r7, r8
 8008a70:	2f00      	cmp	r7, #0
 8008a72:	dd27      	ble.n	8008ac4 <_svfprintf_r+0x7a4>
 8008a74:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <_svfprintf_r+0x780>)
 8008a7a:	6020      	str	r0, [r4, #0]
 8008a7c:	2f10      	cmp	r7, #16
 8008a7e:	f103 0301 	add.w	r3, r3, #1
 8008a82:	f104 0108 	add.w	r1, r4, #8
 8008a86:	f300 82d1 	bgt.w	800902c <_svfprintf_r+0xd0c>
 8008a8a:	e00b      	b.n	8008aa4 <_svfprintf_r+0x784>
 8008a8c:	080118d5 	.word	0x080118d5
 8008a90:	080118c4 	.word	0x080118c4
 8008a94:	40300000 	.word	0x40300000
 8008a98:	3fe00000 	.word	0x3fe00000
 8008a9c:	080118e8 	.word	0x080118e8
 8008aa0:	080118f8 	.word	0x080118f8
 8008aa4:	6067      	str	r7, [r4, #4]
 8008aa6:	2b07      	cmp	r3, #7
 8008aa8:	4417      	add	r7, r2
 8008aaa:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8008aae:	f340 82d0 	ble.w	8009052 <_svfprintf_r+0xd32>
 8008ab2:	aa22      	add	r2, sp, #136	; 0x88
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	f007 faae 	bl	8010018 <__ssprint_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 85c3 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008ac2:	ac25      	add	r4, sp, #148	; 0x94
 8008ac4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ac8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8008aca:	f040 82c9 	bne.w	8009060 <_svfprintf_r+0xd40>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	e9c4 3800 	strd	r3, r8, [r4]
 8008ad4:	4447      	add	r7, r8
 8008ad6:	9724      	str	r7, [sp, #144]	; 0x90
 8008ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ada:	3301      	adds	r3, #1
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	9323      	str	r3, [sp, #140]	; 0x8c
 8008ae0:	f300 8303 	bgt.w	80090ea <_svfprintf_r+0xdca>
 8008ae4:	3408      	adds	r4, #8
 8008ae6:	f01b 0f04 	tst.w	fp, #4
 8008aea:	f040 858f 	bne.w	800960c <_svfprintf_r+0x12ec>
 8008aee:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af4:	428a      	cmp	r2, r1
 8008af6:	bfac      	ite	ge
 8008af8:	189b      	addge	r3, r3, r2
 8008afa:	185b      	addlt	r3, r3, r1
 8008afc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008afe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b00:	b13b      	cbz	r3, 8008b12 <_svfprintf_r+0x7f2>
 8008b02:	aa22      	add	r2, sp, #136	; 0x88
 8008b04:	4649      	mov	r1, r9
 8008b06:	4650      	mov	r0, sl
 8008b08:	f007 fa86 	bl	8010018 <__ssprint_r>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f040 859b 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008b12:	2300      	movs	r3, #0
 8008b14:	9323      	str	r3, [sp, #140]	; 0x8c
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 85b1 	bne.w	8009680 <_svfprintf_r+0x1360>
 8008b1e:	ac25      	add	r4, sp, #148	; 0x94
 8008b20:	e0e7      	b.n	8008cf2 <_svfprintf_r+0x9d2>
 8008b22:	ab35      	add	r3, sp, #212	; 0xd4
 8008b24:	9004      	str	r0, [sp, #16]
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	e62a      	b.n	8008780 <_svfprintf_r+0x460>
 8008b2a:	9b03      	ldr	r3, [sp, #12]
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	e627      	b.n	8008780 <_svfprintf_r+0x460>
 8008b30:	9004      	str	r0, [sp, #16]
 8008b32:	f04f 0806 	mov.w	r8, #6
 8008b36:	e623      	b.n	8008780 <_svfprintf_r+0x460>
 8008b38:	9004      	str	r0, [sp, #16]
 8008b3a:	e621      	b.n	8008780 <_svfprintf_r+0x460>
 8008b3c:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8008b40:	2300      	movs	r3, #0
 8008b42:	eeb0 8a47 	vmov.f32	s16, s14
 8008b46:	eef0 8a67 	vmov.f32	s17, s15
 8008b4a:	e629      	b.n	80087a0 <_svfprintf_r+0x480>
 8008b4c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008b50:	e68b      	b.n	800886a <_svfprintf_r+0x54a>
 8008b52:	f803 0b01 	strb.w	r0, [r3], #1
 8008b56:	1aca      	subs	r2, r1, r3
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	dafa      	bge.n	8008b52 <_svfprintf_r+0x832>
 8008b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b60:	3201      	adds	r2, #1
 8008b62:	f103 0301 	add.w	r3, r3, #1
 8008b66:	bfb8      	it	lt
 8008b68:	2300      	movlt	r3, #0
 8008b6a:	441d      	add	r5, r3
 8008b6c:	e68d      	b.n	800888a <_svfprintf_r+0x56a>
 8008b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b70:	462b      	mov	r3, r5
 8008b72:	18a9      	adds	r1, r5, r2
 8008b74:	2030      	movs	r0, #48	; 0x30
 8008b76:	e7ee      	b.n	8008b56 <_svfprintf_r+0x836>
 8008b78:	9b08      	ldr	r3, [sp, #32]
 8008b7a:	2b46      	cmp	r3, #70	; 0x46
 8008b7c:	d005      	beq.n	8008b8a <_svfprintf_r+0x86a>
 8008b7e:	2b45      	cmp	r3, #69	; 0x45
 8008b80:	d11d      	bne.n	8008bbe <_svfprintf_r+0x89e>
 8008b82:	f108 0501 	add.w	r5, r8, #1
 8008b86:	2102      	movs	r1, #2
 8008b88:	e001      	b.n	8008b8e <_svfprintf_r+0x86e>
 8008b8a:	4645      	mov	r5, r8
 8008b8c:	2103      	movs	r1, #3
 8008b8e:	ab20      	add	r3, sp, #128	; 0x80
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	ab1d      	add	r3, sp, #116	; 0x74
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	462a      	mov	r2, r5
 8008b98:	ab1c      	add	r3, sp, #112	; 0x70
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008ba0:	eef0 0a68 	vmov.f32	s1, s17
 8008ba4:	f004 fdac 	bl	800d700 <_dtoa_r>
 8008ba8:	9b08      	ldr	r3, [sp, #32]
 8008baa:	9003      	str	r0, [sp, #12]
 8008bac:	2b47      	cmp	r3, #71	; 0x47
 8008bae:	d108      	bne.n	8008bc2 <_svfprintf_r+0x8a2>
 8008bb0:	f01b 0f01 	tst.w	fp, #1
 8008bb4:	d105      	bne.n	8008bc2 <_svfprintf_r+0x8a2>
 8008bb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bb8:	9a03      	ldr	r2, [sp, #12]
 8008bba:	1a9b      	subs	r3, r3, r2
 8008bbc:	e667      	b.n	800888e <_svfprintf_r+0x56e>
 8008bbe:	4645      	mov	r5, r8
 8008bc0:	e7e1      	b.n	8008b86 <_svfprintf_r+0x866>
 8008bc2:	9b03      	ldr	r3, [sp, #12]
 8008bc4:	195e      	adds	r6, r3, r5
 8008bc6:	9b08      	ldr	r3, [sp, #32]
 8008bc8:	2b46      	cmp	r3, #70	; 0x46
 8008bca:	d10f      	bne.n	8008bec <_svfprintf_r+0x8cc>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b30      	cmp	r3, #48	; 0x30
 8008bd2:	d109      	bne.n	8008be8 <_svfprintf_r+0x8c8>
 8008bd4:	ec51 0b18 	vmov	r0, r1, d8
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f7f7 ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8008be0:	b910      	cbnz	r0, 8008be8 <_svfprintf_r+0x8c8>
 8008be2:	f1c5 0501 	rsb	r5, r5, #1
 8008be6:	951c      	str	r5, [sp, #112]	; 0x70
 8008be8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008bea:	441e      	add	r6, r3
 8008bec:	ec51 0b18 	vmov	r0, r1, d8
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f7f7 ff78 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bf8:	b100      	cbz	r0, 8008bfc <_svfprintf_r+0x8dc>
 8008bfa:	9620      	str	r6, [sp, #128]	; 0x80
 8008bfc:	2230      	movs	r2, #48	; 0x30
 8008bfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c00:	429e      	cmp	r6, r3
 8008c02:	d9d8      	bls.n	8008bb6 <_svfprintf_r+0x896>
 8008c04:	1c59      	adds	r1, r3, #1
 8008c06:	9120      	str	r1, [sp, #128]	; 0x80
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e7f8      	b.n	8008bfe <_svfprintf_r+0x8de>
 8008c0c:	9b08      	ldr	r3, [sp, #32]
 8008c0e:	2b46      	cmp	r3, #70	; 0x46
 8008c10:	f47f ae4b 	bne.w	80088aa <_svfprintf_r+0x58a>
 8008c14:	f00b 0301 	and.w	r3, fp, #1
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	ea43 0308 	orr.w	r3, r3, r8
 8008c1e:	dd25      	ble.n	8008c6c <_svfprintf_r+0x94c>
 8008c20:	b383      	cbz	r3, 8008c84 <_svfprintf_r+0x964>
 8008c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c24:	18eb      	adds	r3, r5, r3
 8008c26:	4498      	add	r8, r3
 8008c28:	2366      	movs	r3, #102	; 0x66
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	e030      	b.n	8008c90 <_svfprintf_r+0x970>
 8008c2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c32:	f805 6f01 	strb.w	r6, [r5, #1]!
 8008c36:	e66f      	b.n	8008918 <_svfprintf_r+0x5f8>
 8008c38:	b941      	cbnz	r1, 8008c4c <_svfprintf_r+0x92c>
 8008c3a:	2230      	movs	r2, #48	; 0x30
 8008c3c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008c40:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008c44:	3330      	adds	r3, #48	; 0x30
 8008c46:	f802 3b01 	strb.w	r3, [r2], #1
 8008c4a:	e671      	b.n	8008930 <_svfprintf_r+0x610>
 8008c4c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008c50:	e7f8      	b.n	8008c44 <_svfprintf_r+0x924>
 8008c52:	9b05      	ldr	r3, [sp, #20]
 8008c54:	42ab      	cmp	r3, r5
 8008c56:	dd0d      	ble.n	8008c74 <_svfprintf_r+0x954>
 8008c58:	9b05      	ldr	r3, [sp, #20]
 8008c5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	eb03 0802 	add.w	r8, r3, r2
 8008c62:	dc0d      	bgt.n	8008c80 <_svfprintf_r+0x960>
 8008c64:	f1c5 0301 	rsb	r3, r5, #1
 8008c68:	4498      	add	r8, r3
 8008c6a:	e009      	b.n	8008c80 <_svfprintf_r+0x960>
 8008c6c:	b163      	cbz	r3, 8008c88 <_svfprintf_r+0x968>
 8008c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c70:	3301      	adds	r3, #1
 8008c72:	e7d8      	b.n	8008c26 <_svfprintf_r+0x906>
 8008c74:	f01b 0f01 	tst.w	fp, #1
 8008c78:	d01d      	beq.n	8008cb6 <_svfprintf_r+0x996>
 8008c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c7c:	eb05 0803 	add.w	r8, r5, r3
 8008c80:	2367      	movs	r3, #103	; 0x67
 8008c82:	e7d2      	b.n	8008c2a <_svfprintf_r+0x90a>
 8008c84:	46a8      	mov	r8, r5
 8008c86:	e7cf      	b.n	8008c28 <_svfprintf_r+0x908>
 8008c88:	2366      	movs	r3, #102	; 0x66
 8008c8a:	9307      	str	r3, [sp, #28]
 8008c8c:	f04f 0801 	mov.w	r8, #1
 8008c90:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8008c94:	9308      	str	r3, [sp, #32]
 8008c96:	d01f      	beq.n	8008cd8 <_svfprintf_r+0x9b8>
 8008c98:	2600      	movs	r6, #0
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	9608      	str	r6, [sp, #32]
 8008c9e:	f77f ae5c 	ble.w	800895a <_svfprintf_r+0x63a>
 8008ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	2bff      	cmp	r3, #255	; 0xff
 8008ca8:	d107      	bne.n	8008cba <_svfprintf_r+0x99a>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cae:	4433      	add	r3, r6
 8008cb0:	fb02 8803 	mla	r8, r2, r3, r8
 8008cb4:	e651      	b.n	800895a <_svfprintf_r+0x63a>
 8008cb6:	46a8      	mov	r8, r5
 8008cb8:	e7e2      	b.n	8008c80 <_svfprintf_r+0x960>
 8008cba:	42ab      	cmp	r3, r5
 8008cbc:	daf5      	bge.n	8008caa <_svfprintf_r+0x98a>
 8008cbe:	1aed      	subs	r5, r5, r3
 8008cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	b133      	cbz	r3, 8008cd4 <_svfprintf_r+0x9b4>
 8008cc6:	9b08      	ldr	r3, [sp, #32]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cce:	3301      	adds	r3, #1
 8008cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd2:	e7e6      	b.n	8008ca2 <_svfprintf_r+0x982>
 8008cd4:	3601      	adds	r6, #1
 8008cd6:	e7e4      	b.n	8008ca2 <_svfprintf_r+0x982>
 8008cd8:	9e08      	ldr	r6, [sp, #32]
 8008cda:	e63e      	b.n	800895a <_svfprintf_r+0x63a>
 8008cdc:	1d2b      	adds	r3, r5, #4
 8008cde:	f01b 0f20 	tst.w	fp, #32
 8008ce2:	9306      	str	r3, [sp, #24]
 8008ce4:	d00a      	beq.n	8008cfc <_svfprintf_r+0x9dc>
 8008ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008cec:	17d2      	asrs	r2, r2, #31
 8008cee:	e9c3 1200 	strd	r1, r2, [r3]
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	9d06      	ldr	r5, [sp, #24]
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	f7ff bb52 	b.w	80083a0 <_svfprintf_r+0x80>
 8008cfc:	f01b 0f10 	tst.w	fp, #16
 8008d00:	d003      	beq.n	8008d0a <_svfprintf_r+0x9ea>
 8008d02:	682b      	ldr	r3, [r5, #0]
 8008d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e7f3      	b.n	8008cf2 <_svfprintf_r+0x9d2>
 8008d0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008d0e:	d003      	beq.n	8008d18 <_svfprintf_r+0x9f8>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d14:	801a      	strh	r2, [r3, #0]
 8008d16:	e7ec      	b.n	8008cf2 <_svfprintf_r+0x9d2>
 8008d18:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008d1c:	d0f1      	beq.n	8008d02 <_svfprintf_r+0x9e2>
 8008d1e:	682b      	ldr	r3, [r5, #0]
 8008d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	e7e5      	b.n	8008cf2 <_svfprintf_r+0x9d2>
 8008d26:	f04b 0b10 	orr.w	fp, fp, #16
 8008d2a:	f01b 0320 	ands.w	r3, fp, #32
 8008d2e:	d020      	beq.n	8008d72 <_svfprintf_r+0xa52>
 8008d30:	3507      	adds	r5, #7
 8008d32:	f025 0307 	bic.w	r3, r5, #7
 8008d36:	461a      	mov	r2, r3
 8008d38:	685e      	ldr	r6, [r3, #4]
 8008d3a:	f852 5b08 	ldr.w	r5, [r2], #8
 8008d3e:	9206      	str	r2, [sp, #24]
 8008d40:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008d44:	2300      	movs	r3, #0
 8008d46:	2200      	movs	r2, #0
 8008d48:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008d4c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008d50:	f000 84a7 	beq.w	80096a2 <_svfprintf_r+0x1382>
 8008d54:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8008d58:	9204      	str	r2, [sp, #16]
 8008d5a:	ea55 0206 	orrs.w	r2, r5, r6
 8008d5e:	f040 84a6 	bne.w	80096ae <_svfprintf_r+0x138e>
 8008d62:	f1b8 0f00 	cmp.w	r8, #0
 8008d66:	f000 8107 	beq.w	8008f78 <_svfprintf_r+0xc58>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	f040 84a2 	bne.w	80096b4 <_svfprintf_r+0x1394>
 8008d70:	e0a3      	b.n	8008eba <_svfprintf_r+0xb9a>
 8008d72:	462a      	mov	r2, r5
 8008d74:	f01b 0610 	ands.w	r6, fp, #16
 8008d78:	f852 5b04 	ldr.w	r5, [r2], #4
 8008d7c:	9206      	str	r2, [sp, #24]
 8008d7e:	d001      	beq.n	8008d84 <_svfprintf_r+0xa64>
 8008d80:	461e      	mov	r6, r3
 8008d82:	e7dd      	b.n	8008d40 <_svfprintf_r+0xa20>
 8008d84:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008d88:	d001      	beq.n	8008d8e <_svfprintf_r+0xa6e>
 8008d8a:	b2ad      	uxth	r5, r5
 8008d8c:	e7d8      	b.n	8008d40 <_svfprintf_r+0xa20>
 8008d8e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008d92:	d0d5      	beq.n	8008d40 <_svfprintf_r+0xa20>
 8008d94:	b2ed      	uxtb	r5, r5
 8008d96:	e7f3      	b.n	8008d80 <_svfprintf_r+0xa60>
 8008d98:	462b      	mov	r3, r5
 8008d9a:	2278      	movs	r2, #120	; 0x78
 8008d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008da0:	9306      	str	r3, [sp, #24]
 8008da2:	f647 0330 	movw	r3, #30768	; 0x7830
 8008da6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8008daa:	4bab      	ldr	r3, [pc, #684]	; (8009058 <_svfprintf_r+0xd38>)
 8008dac:	9316      	str	r3, [sp, #88]	; 0x58
 8008dae:	2600      	movs	r6, #0
 8008db0:	f04b 0b02 	orr.w	fp, fp, #2
 8008db4:	2302      	movs	r3, #2
 8008db6:	9207      	str	r2, [sp, #28]
 8008db8:	e7c5      	b.n	8008d46 <_svfprintf_r+0xa26>
 8008dba:	462b      	mov	r3, r5
 8008dbc:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc4:	9203      	str	r2, [sp, #12]
 8008dc6:	f04f 0500 	mov.w	r5, #0
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8008dd0:	d010      	beq.n	8008df4 <_svfprintf_r+0xad4>
 8008dd2:	9803      	ldr	r0, [sp, #12]
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fa12 	bl	8000200 <memchr>
 8008ddc:	9004      	str	r0, [sp, #16]
 8008dde:	2800      	cmp	r0, #0
 8008de0:	f000 80e0 	beq.w	8008fa4 <_svfprintf_r+0xc84>
 8008de4:	9a03      	ldr	r2, [sp, #12]
 8008de6:	9504      	str	r5, [sp, #16]
 8008de8:	eba0 0802 	sub.w	r8, r0, r2
 8008dec:	462f      	mov	r7, r5
 8008dee:	462e      	mov	r6, r5
 8008df0:	9508      	str	r5, [sp, #32]
 8008df2:	e5ba      	b.n	800896a <_svfprintf_r+0x64a>
 8008df4:	9803      	ldr	r0, [sp, #12]
 8008df6:	f7f7 f9f5 	bl	80001e4 <strlen>
 8008dfa:	462f      	mov	r7, r5
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	9504      	str	r5, [sp, #16]
 8008e00:	463e      	mov	r6, r7
 8008e02:	463b      	mov	r3, r7
 8008e04:	e460      	b.n	80086c8 <_svfprintf_r+0x3a8>
 8008e06:	f04b 0b10 	orr.w	fp, fp, #16
 8008e0a:	f01b 0320 	ands.w	r3, fp, #32
 8008e0e:	d009      	beq.n	8008e24 <_svfprintf_r+0xb04>
 8008e10:	3507      	adds	r5, #7
 8008e12:	f025 0307 	bic.w	r3, r5, #7
 8008e16:	461a      	mov	r2, r3
 8008e18:	685e      	ldr	r6, [r3, #4]
 8008e1a:	f852 5b08 	ldr.w	r5, [r2], #8
 8008e1e:	9206      	str	r2, [sp, #24]
 8008e20:	2301      	movs	r3, #1
 8008e22:	e790      	b.n	8008d46 <_svfprintf_r+0xa26>
 8008e24:	462a      	mov	r2, r5
 8008e26:	f01b 0610 	ands.w	r6, fp, #16
 8008e2a:	f852 5b04 	ldr.w	r5, [r2], #4
 8008e2e:	9206      	str	r2, [sp, #24]
 8008e30:	d001      	beq.n	8008e36 <_svfprintf_r+0xb16>
 8008e32:	461e      	mov	r6, r3
 8008e34:	e7f4      	b.n	8008e20 <_svfprintf_r+0xb00>
 8008e36:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008e3a:	d001      	beq.n	8008e40 <_svfprintf_r+0xb20>
 8008e3c:	b2ad      	uxth	r5, r5
 8008e3e:	e7ef      	b.n	8008e20 <_svfprintf_r+0xb00>
 8008e40:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008e44:	d0ec      	beq.n	8008e20 <_svfprintf_r+0xb00>
 8008e46:	b2ed      	uxtb	r5, r5
 8008e48:	e7f3      	b.n	8008e32 <_svfprintf_r+0xb12>
 8008e4a:	4b84      	ldr	r3, [pc, #528]	; (800905c <_svfprintf_r+0xd3c>)
 8008e4c:	9316      	str	r3, [sp, #88]	; 0x58
 8008e4e:	f01b 0320 	ands.w	r3, fp, #32
 8008e52:	d01b      	beq.n	8008e8c <_svfprintf_r+0xb6c>
 8008e54:	3507      	adds	r5, #7
 8008e56:	f025 0307 	bic.w	r3, r5, #7
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	685e      	ldr	r6, [r3, #4]
 8008e5e:	f852 5b08 	ldr.w	r5, [r2], #8
 8008e62:	9206      	str	r2, [sp, #24]
 8008e64:	f01b 0f01 	tst.w	fp, #1
 8008e68:	d00a      	beq.n	8008e80 <_svfprintf_r+0xb60>
 8008e6a:	ea55 0306 	orrs.w	r3, r5, r6
 8008e6e:	d007      	beq.n	8008e80 <_svfprintf_r+0xb60>
 8008e70:	2330      	movs	r3, #48	; 0x30
 8008e72:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008e76:	9b07      	ldr	r3, [sp, #28]
 8008e78:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008e7c:	f04b 0b02 	orr.w	fp, fp, #2
 8008e80:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008e84:	2302      	movs	r3, #2
 8008e86:	e75e      	b.n	8008d46 <_svfprintf_r+0xa26>
 8008e88:	4b73      	ldr	r3, [pc, #460]	; (8009058 <_svfprintf_r+0xd38>)
 8008e8a:	e7df      	b.n	8008e4c <_svfprintf_r+0xb2c>
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	f01b 0610 	ands.w	r6, fp, #16
 8008e92:	f852 5b04 	ldr.w	r5, [r2], #4
 8008e96:	9206      	str	r2, [sp, #24]
 8008e98:	d001      	beq.n	8008e9e <_svfprintf_r+0xb7e>
 8008e9a:	461e      	mov	r6, r3
 8008e9c:	e7e2      	b.n	8008e64 <_svfprintf_r+0xb44>
 8008e9e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008ea2:	d001      	beq.n	8008ea8 <_svfprintf_r+0xb88>
 8008ea4:	b2ad      	uxth	r5, r5
 8008ea6:	e7dd      	b.n	8008e64 <_svfprintf_r+0xb44>
 8008ea8:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008eac:	d0da      	beq.n	8008e64 <_svfprintf_r+0xb44>
 8008eae:	b2ed      	uxtb	r5, r5
 8008eb0:	e7f3      	b.n	8008e9a <_svfprintf_r+0xb7a>
 8008eb2:	2d0a      	cmp	r5, #10
 8008eb4:	f176 0300 	sbcs.w	r3, r6, #0
 8008eb8:	d206      	bcs.n	8008ec8 <_svfprintf_r+0xba8>
 8008eba:	3530      	adds	r5, #48	; 0x30
 8008ebc:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8008ec0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8008ec4:	f000 bc16 	b.w	80096f4 <_svfprintf_r+0x13d4>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	9b04      	ldr	r3, [sp, #16]
 8008ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ed2:	af4e      	add	r7, sp, #312	; 0x138
 8008ed4:	9308      	str	r3, [sp, #32]
 8008ed6:	220a      	movs	r2, #10
 8008ed8:	2300      	movs	r3, #0
 8008eda:	4628      	mov	r0, r5
 8008edc:	4631      	mov	r1, r6
 8008ede:	f7f7 fee3 	bl	8000ca8 <__aeabi_uldivmod>
 8008ee2:	1e7b      	subs	r3, r7, #1
 8008ee4:	9303      	str	r3, [sp, #12]
 8008ee6:	9b05      	ldr	r3, [sp, #20]
 8008ee8:	9010      	str	r0, [sp, #64]	; 0x40
 8008eea:	3301      	adds	r3, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	9b08      	ldr	r3, [sp, #32]
 8008ef0:	3230      	adds	r2, #48	; 0x30
 8008ef2:	468b      	mov	fp, r1
 8008ef4:	f807 2c01 	strb.w	r2, [r7, #-1]
 8008ef8:	b1d3      	cbz	r3, 8008f30 <_svfprintf_r+0xc10>
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	9a05      	ldr	r2, [sp, #20]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d115      	bne.n	8008f30 <_svfprintf_r+0xc10>
 8008f04:	2aff      	cmp	r2, #255	; 0xff
 8008f06:	d013      	beq.n	8008f30 <_svfprintf_r+0xc10>
 8008f08:	2d0a      	cmp	r5, #10
 8008f0a:	f176 0300 	sbcs.w	r3, r6, #0
 8008f0e:	d30f      	bcc.n	8008f30 <_svfprintf_r+0xc10>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008f14:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	f004 fa8f 	bl	800d43e <strncpy>
 8008f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	b11b      	cbz	r3, 8008f2e <_svfprintf_r+0xc0e>
 8008f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f28:	3301      	adds	r3, #1
 8008f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9305      	str	r3, [sp, #20]
 8008f30:	2d0a      	cmp	r5, #10
 8008f32:	f176 0600 	sbcs.w	r6, r6, #0
 8008f36:	d20b      	bcs.n	8008f50 <_svfprintf_r+0xc30>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008f3e:	aa4e      	add	r2, sp, #312	; 0x138
 8008f40:	4647      	mov	r7, r8
 8008f42:	eba2 0803 	sub.w	r8, r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	461e      	mov	r6, r3
 8008f4c:	f7ff bbbc 	b.w	80086c8 <_svfprintf_r+0x3a8>
 8008f50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f52:	9f03      	ldr	r7, [sp, #12]
 8008f54:	465e      	mov	r6, fp
 8008f56:	e7be      	b.n	8008ed6 <_svfprintf_r+0xbb6>
 8008f58:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f5a:	f005 030f 	and.w	r3, r5, #15
 8008f5e:	092d      	lsrs	r5, r5, #4
 8008f60:	5cd3      	ldrb	r3, [r2, r3]
 8008f62:	9a03      	ldr	r2, [sp, #12]
 8008f64:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8008f68:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008f6c:	0936      	lsrs	r6, r6, #4
 8008f6e:	ea55 0306 	orrs.w	r3, r5, r6
 8008f72:	9203      	str	r2, [sp, #12]
 8008f74:	d1f0      	bne.n	8008f58 <_svfprintf_r+0xc38>
 8008f76:	e7df      	b.n	8008f38 <_svfprintf_r+0xc18>
 8008f78:	b933      	cbnz	r3, 8008f88 <_svfprintf_r+0xc68>
 8008f7a:	f01b 0f01 	tst.w	fp, #1
 8008f7e:	d003      	beq.n	8008f88 <_svfprintf_r+0xc68>
 8008f80:	2330      	movs	r3, #48	; 0x30
 8008f82:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8008f86:	e79b      	b.n	8008ec0 <_svfprintf_r+0xba0>
 8008f88:	ab4e      	add	r3, sp, #312	; 0x138
 8008f8a:	e3b3      	b.n	80096f4 <_svfprintf_r+0x13d4>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 837c 	beq.w	800968c <_svfprintf_r+0x136c>
 8008f94:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008f9e:	9506      	str	r5, [sp, #24]
 8008fa0:	f7ff bb1f 	b.w	80085e2 <_svfprintf_r+0x2c2>
 8008fa4:	9f04      	ldr	r7, [sp, #16]
 8008fa6:	e72b      	b.n	8008e00 <_svfprintf_r+0xae0>
 8008fa8:	2010      	movs	r0, #16
 8008faa:	4403      	add	r3, r0
 8008fac:	2a07      	cmp	r2, #7
 8008fae:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008fb2:	6060      	str	r0, [r4, #4]
 8008fb4:	dd08      	ble.n	8008fc8 <_svfprintf_r+0xca8>
 8008fb6:	aa22      	add	r2, sp, #136	; 0x88
 8008fb8:	4649      	mov	r1, r9
 8008fba:	4650      	mov	r0, sl
 8008fbc:	f007 f82c 	bl	8010018 <__ssprint_r>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f040 8341 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008fc6:	a925      	add	r1, sp, #148	; 0x94
 8008fc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fca:	3b10      	subs	r3, #16
 8008fcc:	9312      	str	r3, [sp, #72]	; 0x48
 8008fce:	460c      	mov	r4, r1
 8008fd0:	e4e7      	b.n	80089a2 <_svfprintf_r+0x682>
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	e502      	b.n	80089dc <_svfprintf_r+0x6bc>
 8008fd6:	aa22      	add	r2, sp, #136	; 0x88
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4650      	mov	r0, sl
 8008fdc:	f007 f81c 	bl	8010018 <__ssprint_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f040 8331 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008fe6:	ac25      	add	r4, sp, #148	; 0x94
 8008fe8:	e50a      	b.n	8008a00 <_svfprintf_r+0x6e0>
 8008fea:	aa22      	add	r2, sp, #136	; 0x88
 8008fec:	4649      	mov	r1, r9
 8008fee:	4650      	mov	r0, sl
 8008ff0:	f007 f812 	bl	8010018 <__ssprint_r>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f040 8327 	bne.w	8009648 <_svfprintf_r+0x1328>
 8008ffa:	ac25      	add	r4, sp, #148	; 0x94
 8008ffc:	e510      	b.n	8008a20 <_svfprintf_r+0x700>
 8008ffe:	2010      	movs	r0, #16
 8009000:	4403      	add	r3, r0
 8009002:	2a07      	cmp	r2, #7
 8009004:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009008:	6060      	str	r0, [r4, #4]
 800900a:	dd08      	ble.n	800901e <_svfprintf_r+0xcfe>
 800900c:	aa22      	add	r2, sp, #136	; 0x88
 800900e:	4649      	mov	r1, r9
 8009010:	4650      	mov	r0, sl
 8009012:	f007 f801 	bl	8010018 <__ssprint_r>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8316 	bne.w	8009648 <_svfprintf_r+0x1328>
 800901c:	a925      	add	r1, sp, #148	; 0x94
 800901e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009020:	3b10      	subs	r3, #16
 8009022:	9312      	str	r3, [sp, #72]	; 0x48
 8009024:	460c      	mov	r4, r1
 8009026:	e504      	b.n	8008a32 <_svfprintf_r+0x712>
 8009028:	460c      	mov	r4, r1
 800902a:	e51f      	b.n	8008a6c <_svfprintf_r+0x74c>
 800902c:	2010      	movs	r0, #16
 800902e:	4402      	add	r2, r0
 8009030:	2b07      	cmp	r3, #7
 8009032:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009036:	6060      	str	r0, [r4, #4]
 8009038:	dd08      	ble.n	800904c <_svfprintf_r+0xd2c>
 800903a:	aa22      	add	r2, sp, #136	; 0x88
 800903c:	4649      	mov	r1, r9
 800903e:	4650      	mov	r0, sl
 8009040:	f006 ffea 	bl	8010018 <__ssprint_r>
 8009044:	2800      	cmp	r0, #0
 8009046:	f040 82ff 	bne.w	8009648 <_svfprintf_r+0x1328>
 800904a:	a925      	add	r1, sp, #148	; 0x94
 800904c:	3f10      	subs	r7, #16
 800904e:	460c      	mov	r4, r1
 8009050:	e510      	b.n	8008a74 <_svfprintf_r+0x754>
 8009052:	460c      	mov	r4, r1
 8009054:	e536      	b.n	8008ac4 <_svfprintf_r+0x7a4>
 8009056:	bf00      	nop
 8009058:	080118c4 	.word	0x080118c4
 800905c:	080118d5 	.word	0x080118d5
 8009060:	9b07      	ldr	r3, [sp, #28]
 8009062:	2b65      	cmp	r3, #101	; 0x65
 8009064:	f340 823a 	ble.w	80094dc <_svfprintf_r+0x11bc>
 8009068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	f7f7 fd3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009074:	2800      	cmp	r0, #0
 8009076:	d068      	beq.n	800914a <_svfprintf_r+0xe2a>
 8009078:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <_svfprintf_r+0xf10>)
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	2301      	movs	r3, #1
 800907e:	441f      	add	r7, r3
 8009080:	6063      	str	r3, [r4, #4]
 8009082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009084:	9724      	str	r7, [sp, #144]	; 0x90
 8009086:	3301      	adds	r3, #1
 8009088:	2b07      	cmp	r3, #7
 800908a:	9323      	str	r3, [sp, #140]	; 0x8c
 800908c:	dc37      	bgt.n	80090fe <_svfprintf_r+0xdde>
 800908e:	3408      	adds	r4, #8
 8009090:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009092:	9a05      	ldr	r2, [sp, #20]
 8009094:	4293      	cmp	r3, r2
 8009096:	db03      	blt.n	80090a0 <_svfprintf_r+0xd80>
 8009098:	f01b 0f01 	tst.w	fp, #1
 800909c:	f43f ad23 	beq.w	8008ae6 <_svfprintf_r+0x7c6>
 80090a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a8:	6063      	str	r3, [r4, #4]
 80090aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090ac:	4413      	add	r3, r2
 80090ae:	9324      	str	r3, [sp, #144]	; 0x90
 80090b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090b2:	3301      	adds	r3, #1
 80090b4:	2b07      	cmp	r3, #7
 80090b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80090b8:	dc2b      	bgt.n	8009112 <_svfprintf_r+0xdf2>
 80090ba:	3408      	adds	r4, #8
 80090bc:	9b05      	ldr	r3, [sp, #20]
 80090be:	1e5d      	subs	r5, r3, #1
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	f77f ad10 	ble.w	8008ae6 <_svfprintf_r+0x7c6>
 80090c6:	4e5b      	ldr	r6, [pc, #364]	; (8009234 <_svfprintf_r+0xf14>)
 80090c8:	2710      	movs	r7, #16
 80090ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80090ce:	2d10      	cmp	r5, #16
 80090d0:	f103 0301 	add.w	r3, r3, #1
 80090d4:	f104 0108 	add.w	r1, r4, #8
 80090d8:	6026      	str	r6, [r4, #0]
 80090da:	dc24      	bgt.n	8009126 <_svfprintf_r+0xe06>
 80090dc:	6065      	str	r5, [r4, #4]
 80090de:	4415      	add	r5, r2
 80090e0:	9524      	str	r5, [sp, #144]	; 0x90
 80090e2:	2b07      	cmp	r3, #7
 80090e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80090e6:	f340 828e 	ble.w	8009606 <_svfprintf_r+0x12e6>
 80090ea:	aa22      	add	r2, sp, #136	; 0x88
 80090ec:	4649      	mov	r1, r9
 80090ee:	4650      	mov	r0, sl
 80090f0:	f006 ff92 	bl	8010018 <__ssprint_r>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f040 82a7 	bne.w	8009648 <_svfprintf_r+0x1328>
 80090fa:	ac25      	add	r4, sp, #148	; 0x94
 80090fc:	e4f3      	b.n	8008ae6 <_svfprintf_r+0x7c6>
 80090fe:	aa22      	add	r2, sp, #136	; 0x88
 8009100:	4649      	mov	r1, r9
 8009102:	4650      	mov	r0, sl
 8009104:	f006 ff88 	bl	8010018 <__ssprint_r>
 8009108:	2800      	cmp	r0, #0
 800910a:	f040 829d 	bne.w	8009648 <_svfprintf_r+0x1328>
 800910e:	ac25      	add	r4, sp, #148	; 0x94
 8009110:	e7be      	b.n	8009090 <_svfprintf_r+0xd70>
 8009112:	aa22      	add	r2, sp, #136	; 0x88
 8009114:	4649      	mov	r1, r9
 8009116:	4650      	mov	r0, sl
 8009118:	f006 ff7e 	bl	8010018 <__ssprint_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	f040 8293 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009122:	ac25      	add	r4, sp, #148	; 0x94
 8009124:	e7ca      	b.n	80090bc <_svfprintf_r+0xd9c>
 8009126:	3210      	adds	r2, #16
 8009128:	2b07      	cmp	r3, #7
 800912a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800912e:	6067      	str	r7, [r4, #4]
 8009130:	dd08      	ble.n	8009144 <_svfprintf_r+0xe24>
 8009132:	aa22      	add	r2, sp, #136	; 0x88
 8009134:	4649      	mov	r1, r9
 8009136:	4650      	mov	r0, sl
 8009138:	f006 ff6e 	bl	8010018 <__ssprint_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	f040 8283 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009142:	a925      	add	r1, sp, #148	; 0x94
 8009144:	3d10      	subs	r5, #16
 8009146:	460c      	mov	r4, r1
 8009148:	e7bf      	b.n	80090ca <_svfprintf_r+0xdaa>
 800914a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc73      	bgt.n	8009238 <_svfprintf_r+0xf18>
 8009150:	4b37      	ldr	r3, [pc, #220]	; (8009230 <_svfprintf_r+0xf10>)
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2301      	movs	r3, #1
 8009156:	441f      	add	r7, r3
 8009158:	6063      	str	r3, [r4, #4]
 800915a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800915c:	9724      	str	r7, [sp, #144]	; 0x90
 800915e:	3301      	adds	r3, #1
 8009160:	2b07      	cmp	r3, #7
 8009162:	9323      	str	r3, [sp, #140]	; 0x8c
 8009164:	dc3d      	bgt.n	80091e2 <_svfprintf_r+0xec2>
 8009166:	3408      	adds	r4, #8
 8009168:	9905      	ldr	r1, [sp, #20]
 800916a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800916c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800916e:	430b      	orrs	r3, r1
 8009170:	f00b 0101 	and.w	r1, fp, #1
 8009174:	430b      	orrs	r3, r1
 8009176:	f43f acb6 	beq.w	8008ae6 <_svfprintf_r+0x7c6>
 800917a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	441a      	add	r2, r3
 8009184:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009186:	9224      	str	r2, [sp, #144]	; 0x90
 8009188:	3301      	adds	r3, #1
 800918a:	2b07      	cmp	r3, #7
 800918c:	9323      	str	r3, [sp, #140]	; 0x8c
 800918e:	dc32      	bgt.n	80091f6 <_svfprintf_r+0xed6>
 8009190:	3408      	adds	r4, #8
 8009192:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009194:	2d00      	cmp	r5, #0
 8009196:	da1b      	bge.n	80091d0 <_svfprintf_r+0xeb0>
 8009198:	4e26      	ldr	r6, [pc, #152]	; (8009234 <_svfprintf_r+0xf14>)
 800919a:	426d      	negs	r5, r5
 800919c:	4623      	mov	r3, r4
 800919e:	2710      	movs	r7, #16
 80091a0:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 80091a4:	2d10      	cmp	r5, #16
 80091a6:	f102 0201 	add.w	r2, r2, #1
 80091aa:	f104 0408 	add.w	r4, r4, #8
 80091ae:	601e      	str	r6, [r3, #0]
 80091b0:	dc2b      	bgt.n	800920a <_svfprintf_r+0xeea>
 80091b2:	605d      	str	r5, [r3, #4]
 80091b4:	2a07      	cmp	r2, #7
 80091b6:	440d      	add	r5, r1
 80091b8:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80091bc:	dd08      	ble.n	80091d0 <_svfprintf_r+0xeb0>
 80091be:	aa22      	add	r2, sp, #136	; 0x88
 80091c0:	4649      	mov	r1, r9
 80091c2:	4650      	mov	r0, sl
 80091c4:	f006 ff28 	bl	8010018 <__ssprint_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f040 823d 	bne.w	8009648 <_svfprintf_r+0x1328>
 80091ce:	ac25      	add	r4, sp, #148	; 0x94
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	9b05      	ldr	r3, [sp, #20]
 80091d6:	9a05      	ldr	r2, [sp, #20]
 80091d8:	6063      	str	r3, [r4, #4]
 80091da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091dc:	4413      	add	r3, r2
 80091de:	9324      	str	r3, [sp, #144]	; 0x90
 80091e0:	e47a      	b.n	8008ad8 <_svfprintf_r+0x7b8>
 80091e2:	aa22      	add	r2, sp, #136	; 0x88
 80091e4:	4649      	mov	r1, r9
 80091e6:	4650      	mov	r0, sl
 80091e8:	f006 ff16 	bl	8010018 <__ssprint_r>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f040 822b 	bne.w	8009648 <_svfprintf_r+0x1328>
 80091f2:	ac25      	add	r4, sp, #148	; 0x94
 80091f4:	e7b8      	b.n	8009168 <_svfprintf_r+0xe48>
 80091f6:	aa22      	add	r2, sp, #136	; 0x88
 80091f8:	4649      	mov	r1, r9
 80091fa:	4650      	mov	r0, sl
 80091fc:	f006 ff0c 	bl	8010018 <__ssprint_r>
 8009200:	2800      	cmp	r0, #0
 8009202:	f040 8221 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009206:	ac25      	add	r4, sp, #148	; 0x94
 8009208:	e7c3      	b.n	8009192 <_svfprintf_r+0xe72>
 800920a:	3110      	adds	r1, #16
 800920c:	2a07      	cmp	r2, #7
 800920e:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8009212:	605f      	str	r7, [r3, #4]
 8009214:	dd08      	ble.n	8009228 <_svfprintf_r+0xf08>
 8009216:	aa22      	add	r2, sp, #136	; 0x88
 8009218:	4649      	mov	r1, r9
 800921a:	4650      	mov	r0, sl
 800921c:	f006 fefc 	bl	8010018 <__ssprint_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	f040 8211 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009226:	ac25      	add	r4, sp, #148	; 0x94
 8009228:	3d10      	subs	r5, #16
 800922a:	4623      	mov	r3, r4
 800922c:	e7b8      	b.n	80091a0 <_svfprintf_r+0xe80>
 800922e:	bf00      	nop
 8009230:	080118e6 	.word	0x080118e6
 8009234:	080118f8 	.word	0x080118f8
 8009238:	9b05      	ldr	r3, [sp, #20]
 800923a:	42ab      	cmp	r3, r5
 800923c:	bfa8      	it	ge
 800923e:	462b      	movge	r3, r5
 8009240:	2b00      	cmp	r3, #0
 8009242:	4698      	mov	r8, r3
 8009244:	dd0a      	ble.n	800925c <_svfprintf_r+0xf3c>
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	e9c4 3800 	strd	r3, r8, [r4]
 800924c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800924e:	3301      	adds	r3, #1
 8009250:	4447      	add	r7, r8
 8009252:	2b07      	cmp	r3, #7
 8009254:	9724      	str	r7, [sp, #144]	; 0x90
 8009256:	9323      	str	r3, [sp, #140]	; 0x8c
 8009258:	dc7b      	bgt.n	8009352 <_svfprintf_r+0x1032>
 800925a:	3408      	adds	r4, #8
 800925c:	f1b8 0f00 	cmp.w	r8, #0
 8009260:	bfac      	ite	ge
 8009262:	eba5 0708 	subge.w	r7, r5, r8
 8009266:	462f      	movlt	r7, r5
 8009268:	2f00      	cmp	r7, #0
 800926a:	dd1a      	ble.n	80092a2 <_svfprintf_r+0xf82>
 800926c:	f8df 8368 	ldr.w	r8, [pc, #872]	; 80095d8 <_svfprintf_r+0x12b8>
 8009270:	f8c4 8000 	str.w	r8, [r4]
 8009274:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009278:	2f10      	cmp	r7, #16
 800927a:	f103 0301 	add.w	r3, r3, #1
 800927e:	f104 0108 	add.w	r1, r4, #8
 8009282:	dc70      	bgt.n	8009366 <_svfprintf_r+0x1046>
 8009284:	6067      	str	r7, [r4, #4]
 8009286:	2b07      	cmp	r3, #7
 8009288:	4417      	add	r7, r2
 800928a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800928e:	dd7d      	ble.n	800938c <_svfprintf_r+0x106c>
 8009290:	aa22      	add	r2, sp, #136	; 0x88
 8009292:	4649      	mov	r1, r9
 8009294:	4650      	mov	r0, sl
 8009296:	f006 febf 	bl	8010018 <__ssprint_r>
 800929a:	2800      	cmp	r0, #0
 800929c:	f040 81d4 	bne.w	8009648 <_svfprintf_r+0x1328>
 80092a0:	ac25      	add	r4, sp, #148	; 0x94
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80092a8:	441d      	add	r5, r3
 80092aa:	d00a      	beq.n	80092c2 <_svfprintf_r+0xfa2>
 80092ac:	9b08      	ldr	r3, [sp, #32]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d16e      	bne.n	8009390 <_svfprintf_r+0x1070>
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	d16e      	bne.n	8009394 <_svfprintf_r+0x1074>
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	9a05      	ldr	r2, [sp, #20]
 80092ba:	4413      	add	r3, r2
 80092bc:	429d      	cmp	r5, r3
 80092be:	bf28      	it	cs
 80092c0:	461d      	movcs	r5, r3
 80092c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80092c4:	9a05      	ldr	r2, [sp, #20]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	db02      	blt.n	80092d0 <_svfprintf_r+0xfb0>
 80092ca:	f01b 0f01 	tst.w	fp, #1
 80092ce:	d00e      	beq.n	80092ee <_svfprintf_r+0xfce>
 80092d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092d8:	6063      	str	r3, [r4, #4]
 80092da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092dc:	4413      	add	r3, r2
 80092de:	9324      	str	r3, [sp, #144]	; 0x90
 80092e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092e2:	3301      	adds	r3, #1
 80092e4:	2b07      	cmp	r3, #7
 80092e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80092e8:	f300 80d2 	bgt.w	8009490 <_svfprintf_r+0x1170>
 80092ec:	3408      	adds	r4, #8
 80092ee:	9b05      	ldr	r3, [sp, #20]
 80092f0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80092f2:	9a05      	ldr	r2, [sp, #20]
 80092f4:	1b9e      	subs	r6, r3, r6
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	1b5b      	subs	r3, r3, r5
 80092fc:	429e      	cmp	r6, r3
 80092fe:	bfa8      	it	ge
 8009300:	461e      	movge	r6, r3
 8009302:	2e00      	cmp	r6, #0
 8009304:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009306:	dd0a      	ble.n	800931e <_svfprintf_r+0xffe>
 8009308:	4433      	add	r3, r6
 800930a:	9324      	str	r3, [sp, #144]	; 0x90
 800930c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800930e:	3301      	adds	r3, #1
 8009310:	2b07      	cmp	r3, #7
 8009312:	e9c4 5600 	strd	r5, r6, [r4]
 8009316:	9323      	str	r3, [sp, #140]	; 0x8c
 8009318:	f300 80c4 	bgt.w	80094a4 <_svfprintf_r+0x1184>
 800931c:	3408      	adds	r4, #8
 800931e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	2e00      	cmp	r6, #0
 8009324:	eba3 0505 	sub.w	r5, r3, r5
 8009328:	bfa8      	it	ge
 800932a:	1bad      	subge	r5, r5, r6
 800932c:	2d00      	cmp	r5, #0
 800932e:	f77f abda 	ble.w	8008ae6 <_svfprintf_r+0x7c6>
 8009332:	4ea9      	ldr	r6, [pc, #676]	; (80095d8 <_svfprintf_r+0x12b8>)
 8009334:	2710      	movs	r7, #16
 8009336:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800933a:	2d10      	cmp	r5, #16
 800933c:	f103 0301 	add.w	r3, r3, #1
 8009340:	f104 0108 	add.w	r1, r4, #8
 8009344:	6026      	str	r6, [r4, #0]
 8009346:	f300 80b7 	bgt.w	80094b8 <_svfprintf_r+0x1198>
 800934a:	442a      	add	r2, r5
 800934c:	6065      	str	r5, [r4, #4]
 800934e:	9224      	str	r2, [sp, #144]	; 0x90
 8009350:	e6c7      	b.n	80090e2 <_svfprintf_r+0xdc2>
 8009352:	aa22      	add	r2, sp, #136	; 0x88
 8009354:	4649      	mov	r1, r9
 8009356:	4650      	mov	r0, sl
 8009358:	f006 fe5e 	bl	8010018 <__ssprint_r>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 8173 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009362:	ac25      	add	r4, sp, #148	; 0x94
 8009364:	e77a      	b.n	800925c <_svfprintf_r+0xf3c>
 8009366:	2010      	movs	r0, #16
 8009368:	4402      	add	r2, r0
 800936a:	2b07      	cmp	r3, #7
 800936c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009370:	6060      	str	r0, [r4, #4]
 8009372:	dd08      	ble.n	8009386 <_svfprintf_r+0x1066>
 8009374:	aa22      	add	r2, sp, #136	; 0x88
 8009376:	4649      	mov	r1, r9
 8009378:	4650      	mov	r0, sl
 800937a:	f006 fe4d 	bl	8010018 <__ssprint_r>
 800937e:	2800      	cmp	r0, #0
 8009380:	f040 8162 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009384:	a925      	add	r1, sp, #148	; 0x94
 8009386:	3f10      	subs	r7, #16
 8009388:	460c      	mov	r4, r1
 800938a:	e771      	b.n	8009270 <_svfprintf_r+0xf50>
 800938c:	460c      	mov	r4, r1
 800938e:	e788      	b.n	80092a2 <_svfprintf_r+0xf82>
 8009390:	2e00      	cmp	r6, #0
 8009392:	d04d      	beq.n	8009430 <_svfprintf_r+0x1110>
 8009394:	3e01      	subs	r6, #1
 8009396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800939c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800939e:	6063      	str	r3, [r4, #4]
 80093a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093a2:	4413      	add	r3, r2
 80093a4:	9324      	str	r3, [sp, #144]	; 0x90
 80093a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093a8:	3301      	adds	r3, #1
 80093aa:	2b07      	cmp	r3, #7
 80093ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80093ae:	dc46      	bgt.n	800943e <_svfprintf_r+0x111e>
 80093b0:	3408      	adds	r4, #8
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	9a05      	ldr	r2, [sp, #20]
 80093b6:	eb03 0802 	add.w	r8, r3, r2
 80093ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	eba8 0805 	sub.w	r8, r8, r5
 80093c2:	4598      	cmp	r8, r3
 80093c4:	bfa8      	it	ge
 80093c6:	4698      	movge	r8, r3
 80093c8:	f1b8 0f00 	cmp.w	r8, #0
 80093cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093ce:	dd09      	ble.n	80093e4 <_svfprintf_r+0x10c4>
 80093d0:	4443      	add	r3, r8
 80093d2:	9324      	str	r3, [sp, #144]	; 0x90
 80093d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093d6:	3301      	adds	r3, #1
 80093d8:	2b07      	cmp	r3, #7
 80093da:	e9c4 5800 	strd	r5, r8, [r4]
 80093de:	9323      	str	r3, [sp, #140]	; 0x8c
 80093e0:	dc37      	bgt.n	8009452 <_svfprintf_r+0x1132>
 80093e2:	3408      	adds	r4, #8
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	781f      	ldrb	r7, [r3, #0]
 80093e8:	f1b8 0f00 	cmp.w	r8, #0
 80093ec:	bfa8      	it	ge
 80093ee:	eba7 0708 	subge.w	r7, r7, r8
 80093f2:	2f00      	cmp	r7, #0
 80093f4:	dd18      	ble.n	8009428 <_svfprintf_r+0x1108>
 80093f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80093fa:	4877      	ldr	r0, [pc, #476]	; (80095d8 <_svfprintf_r+0x12b8>)
 80093fc:	6020      	str	r0, [r4, #0]
 80093fe:	2f10      	cmp	r7, #16
 8009400:	f103 0301 	add.w	r3, r3, #1
 8009404:	f104 0108 	add.w	r1, r4, #8
 8009408:	dc2d      	bgt.n	8009466 <_svfprintf_r+0x1146>
 800940a:	443a      	add	r2, r7
 800940c:	2b07      	cmp	r3, #7
 800940e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009412:	6067      	str	r7, [r4, #4]
 8009414:	dd3a      	ble.n	800948c <_svfprintf_r+0x116c>
 8009416:	aa22      	add	r2, sp, #136	; 0x88
 8009418:	4649      	mov	r1, r9
 800941a:	4650      	mov	r0, sl
 800941c:	f006 fdfc 	bl	8010018 <__ssprint_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	f040 8111 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009426:	ac25      	add	r4, sp, #148	; 0x94
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	441d      	add	r5, r3
 800942e:	e73d      	b.n	80092ac <_svfprintf_r+0xf8c>
 8009430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009432:	3b01      	subs	r3, #1
 8009434:	9309      	str	r3, [sp, #36]	; 0x24
 8009436:	9b08      	ldr	r3, [sp, #32]
 8009438:	3b01      	subs	r3, #1
 800943a:	9308      	str	r3, [sp, #32]
 800943c:	e7ab      	b.n	8009396 <_svfprintf_r+0x1076>
 800943e:	aa22      	add	r2, sp, #136	; 0x88
 8009440:	4649      	mov	r1, r9
 8009442:	4650      	mov	r0, sl
 8009444:	f006 fde8 	bl	8010018 <__ssprint_r>
 8009448:	2800      	cmp	r0, #0
 800944a:	f040 80fd 	bne.w	8009648 <_svfprintf_r+0x1328>
 800944e:	ac25      	add	r4, sp, #148	; 0x94
 8009450:	e7af      	b.n	80093b2 <_svfprintf_r+0x1092>
 8009452:	aa22      	add	r2, sp, #136	; 0x88
 8009454:	4649      	mov	r1, r9
 8009456:	4650      	mov	r0, sl
 8009458:	f006 fdde 	bl	8010018 <__ssprint_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	f040 80f3 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009462:	ac25      	add	r4, sp, #148	; 0x94
 8009464:	e7be      	b.n	80093e4 <_svfprintf_r+0x10c4>
 8009466:	2010      	movs	r0, #16
 8009468:	4402      	add	r2, r0
 800946a:	2b07      	cmp	r3, #7
 800946c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009470:	6060      	str	r0, [r4, #4]
 8009472:	dd08      	ble.n	8009486 <_svfprintf_r+0x1166>
 8009474:	aa22      	add	r2, sp, #136	; 0x88
 8009476:	4649      	mov	r1, r9
 8009478:	4650      	mov	r0, sl
 800947a:	f006 fdcd 	bl	8010018 <__ssprint_r>
 800947e:	2800      	cmp	r0, #0
 8009480:	f040 80e2 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009484:	a925      	add	r1, sp, #148	; 0x94
 8009486:	3f10      	subs	r7, #16
 8009488:	460c      	mov	r4, r1
 800948a:	e7b4      	b.n	80093f6 <_svfprintf_r+0x10d6>
 800948c:	460c      	mov	r4, r1
 800948e:	e7cb      	b.n	8009428 <_svfprintf_r+0x1108>
 8009490:	aa22      	add	r2, sp, #136	; 0x88
 8009492:	4649      	mov	r1, r9
 8009494:	4650      	mov	r0, sl
 8009496:	f006 fdbf 	bl	8010018 <__ssprint_r>
 800949a:	2800      	cmp	r0, #0
 800949c:	f040 80d4 	bne.w	8009648 <_svfprintf_r+0x1328>
 80094a0:	ac25      	add	r4, sp, #148	; 0x94
 80094a2:	e724      	b.n	80092ee <_svfprintf_r+0xfce>
 80094a4:	aa22      	add	r2, sp, #136	; 0x88
 80094a6:	4649      	mov	r1, r9
 80094a8:	4650      	mov	r0, sl
 80094aa:	f006 fdb5 	bl	8010018 <__ssprint_r>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f040 80ca 	bne.w	8009648 <_svfprintf_r+0x1328>
 80094b4:	ac25      	add	r4, sp, #148	; 0x94
 80094b6:	e732      	b.n	800931e <_svfprintf_r+0xffe>
 80094b8:	3210      	adds	r2, #16
 80094ba:	2b07      	cmp	r3, #7
 80094bc:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80094c0:	6067      	str	r7, [r4, #4]
 80094c2:	dd08      	ble.n	80094d6 <_svfprintf_r+0x11b6>
 80094c4:	aa22      	add	r2, sp, #136	; 0x88
 80094c6:	4649      	mov	r1, r9
 80094c8:	4650      	mov	r0, sl
 80094ca:	f006 fda5 	bl	8010018 <__ssprint_r>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	f040 80ba 	bne.w	8009648 <_svfprintf_r+0x1328>
 80094d4:	a925      	add	r1, sp, #148	; 0x94
 80094d6:	3d10      	subs	r5, #16
 80094d8:	460c      	mov	r4, r1
 80094da:	e72c      	b.n	8009336 <_svfprintf_r+0x1016>
 80094dc:	9a05      	ldr	r2, [sp, #20]
 80094de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80094e0:	2a01      	cmp	r2, #1
 80094e2:	9a03      	ldr	r2, [sp, #12]
 80094e4:	6022      	str	r2, [r4, #0]
 80094e6:	f107 0701 	add.w	r7, r7, #1
 80094ea:	f103 0301 	add.w	r3, r3, #1
 80094ee:	f04f 0201 	mov.w	r2, #1
 80094f2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80094f6:	f104 0508 	add.w	r5, r4, #8
 80094fa:	6062      	str	r2, [r4, #4]
 80094fc:	dc02      	bgt.n	8009504 <_svfprintf_r+0x11e4>
 80094fe:	f01b 0f01 	tst.w	fp, #1
 8009502:	d07b      	beq.n	80095fc <_svfprintf_r+0x12dc>
 8009504:	2b07      	cmp	r3, #7
 8009506:	dd08      	ble.n	800951a <_svfprintf_r+0x11fa>
 8009508:	aa22      	add	r2, sp, #136	; 0x88
 800950a:	4649      	mov	r1, r9
 800950c:	4650      	mov	r0, sl
 800950e:	f006 fd83 	bl	8010018 <__ssprint_r>
 8009512:	2800      	cmp	r0, #0
 8009514:	f040 8098 	bne.w	8009648 <_svfprintf_r+0x1328>
 8009518:	ad25      	add	r5, sp, #148	; 0x94
 800951a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009522:	606b      	str	r3, [r5, #4]
 8009524:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009526:	4413      	add	r3, r2
 8009528:	9324      	str	r3, [sp, #144]	; 0x90
 800952a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800952c:	3301      	adds	r3, #1
 800952e:	2b07      	cmp	r3, #7
 8009530:	9323      	str	r3, [sp, #140]	; 0x8c
 8009532:	dc32      	bgt.n	800959a <_svfprintf_r+0x127a>
 8009534:	3508      	adds	r5, #8
 8009536:	9b05      	ldr	r3, [sp, #20]
 8009538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800953c:	1e5c      	subs	r4, r3, #1
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 8009546:	f7f7 facf 	bl	8000ae8 <__aeabi_dcmpeq>
 800954a:	2800      	cmp	r0, #0
 800954c:	d12e      	bne.n	80095ac <_svfprintf_r+0x128c>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	e9c5 3400 	strd	r3, r4, [r5]
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	3701      	adds	r7, #1
 800955a:	3e01      	subs	r6, #1
 800955c:	441e      	add	r6, r3
 800955e:	2f07      	cmp	r7, #7
 8009560:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8009564:	dd4d      	ble.n	8009602 <_svfprintf_r+0x12e2>
 8009566:	aa22      	add	r2, sp, #136	; 0x88
 8009568:	4649      	mov	r1, r9
 800956a:	4650      	mov	r0, sl
 800956c:	f006 fd54 	bl	8010018 <__ssprint_r>
 8009570:	2800      	cmp	r0, #0
 8009572:	d169      	bne.n	8009648 <_svfprintf_r+0x1328>
 8009574:	ad25      	add	r5, sp, #148	; 0x94
 8009576:	ab1e      	add	r3, sp, #120	; 0x78
 8009578:	602b      	str	r3, [r5, #0]
 800957a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800957c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800957e:	606b      	str	r3, [r5, #4]
 8009580:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009582:	4413      	add	r3, r2
 8009584:	9324      	str	r3, [sp, #144]	; 0x90
 8009586:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009588:	3301      	adds	r3, #1
 800958a:	2b07      	cmp	r3, #7
 800958c:	9323      	str	r3, [sp, #140]	; 0x8c
 800958e:	f73f adac 	bgt.w	80090ea <_svfprintf_r+0xdca>
 8009592:	f105 0408 	add.w	r4, r5, #8
 8009596:	f7ff baa6 	b.w	8008ae6 <_svfprintf_r+0x7c6>
 800959a:	aa22      	add	r2, sp, #136	; 0x88
 800959c:	4649      	mov	r1, r9
 800959e:	4650      	mov	r0, sl
 80095a0:	f006 fd3a 	bl	8010018 <__ssprint_r>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d14f      	bne.n	8009648 <_svfprintf_r+0x1328>
 80095a8:	ad25      	add	r5, sp, #148	; 0x94
 80095aa:	e7c4      	b.n	8009536 <_svfprintf_r+0x1216>
 80095ac:	2c00      	cmp	r4, #0
 80095ae:	dde2      	ble.n	8009576 <_svfprintf_r+0x1256>
 80095b0:	4e09      	ldr	r6, [pc, #36]	; (80095d8 <_svfprintf_r+0x12b8>)
 80095b2:	2710      	movs	r7, #16
 80095b4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80095b8:	2c10      	cmp	r4, #16
 80095ba:	f103 0301 	add.w	r3, r3, #1
 80095be:	f105 0108 	add.w	r1, r5, #8
 80095c2:	602e      	str	r6, [r5, #0]
 80095c4:	dc0a      	bgt.n	80095dc <_svfprintf_r+0x12bc>
 80095c6:	606c      	str	r4, [r5, #4]
 80095c8:	2b07      	cmp	r3, #7
 80095ca:	4414      	add	r4, r2
 80095cc:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80095d0:	dcc9      	bgt.n	8009566 <_svfprintf_r+0x1246>
 80095d2:	460d      	mov	r5, r1
 80095d4:	e7cf      	b.n	8009576 <_svfprintf_r+0x1256>
 80095d6:	bf00      	nop
 80095d8:	080118f8 	.word	0x080118f8
 80095dc:	3210      	adds	r2, #16
 80095de:	2b07      	cmp	r3, #7
 80095e0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80095e4:	606f      	str	r7, [r5, #4]
 80095e6:	dd06      	ble.n	80095f6 <_svfprintf_r+0x12d6>
 80095e8:	aa22      	add	r2, sp, #136	; 0x88
 80095ea:	4649      	mov	r1, r9
 80095ec:	4650      	mov	r0, sl
 80095ee:	f006 fd13 	bl	8010018 <__ssprint_r>
 80095f2:	bb48      	cbnz	r0, 8009648 <_svfprintf_r+0x1328>
 80095f4:	a925      	add	r1, sp, #148	; 0x94
 80095f6:	3c10      	subs	r4, #16
 80095f8:	460d      	mov	r5, r1
 80095fa:	e7db      	b.n	80095b4 <_svfprintf_r+0x1294>
 80095fc:	2b07      	cmp	r3, #7
 80095fe:	ddba      	ble.n	8009576 <_svfprintf_r+0x1256>
 8009600:	e7b1      	b.n	8009566 <_svfprintf_r+0x1246>
 8009602:	3508      	adds	r5, #8
 8009604:	e7b7      	b.n	8009576 <_svfprintf_r+0x1256>
 8009606:	460c      	mov	r4, r1
 8009608:	f7ff ba6d 	b.w	8008ae6 <_svfprintf_r+0x7c6>
 800960c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8009610:	1a9d      	subs	r5, r3, r2
 8009612:	2d00      	cmp	r5, #0
 8009614:	f77f aa6b 	ble.w	8008aee <_svfprintf_r+0x7ce>
 8009618:	4e37      	ldr	r6, [pc, #220]	; (80096f8 <_svfprintf_r+0x13d8>)
 800961a:	2710      	movs	r7, #16
 800961c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009620:	2d10      	cmp	r5, #16
 8009622:	f103 0301 	add.w	r3, r3, #1
 8009626:	6026      	str	r6, [r4, #0]
 8009628:	dc18      	bgt.n	800965c <_svfprintf_r+0x133c>
 800962a:	6065      	str	r5, [r4, #4]
 800962c:	2b07      	cmp	r3, #7
 800962e:	4415      	add	r5, r2
 8009630:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8009634:	f77f aa5b 	ble.w	8008aee <_svfprintf_r+0x7ce>
 8009638:	aa22      	add	r2, sp, #136	; 0x88
 800963a:	4649      	mov	r1, r9
 800963c:	4650      	mov	r0, sl
 800963e:	f006 fceb 	bl	8010018 <__ssprint_r>
 8009642:	2800      	cmp	r0, #0
 8009644:	f43f aa53 	beq.w	8008aee <_svfprintf_r+0x7ce>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f43f a874 	beq.w	8008738 <_svfprintf_r+0x418>
 8009650:	4619      	mov	r1, r3
 8009652:	4650      	mov	r0, sl
 8009654:	f7fe fb5c 	bl	8007d10 <_free_r>
 8009658:	f7ff b86e 	b.w	8008738 <_svfprintf_r+0x418>
 800965c:	3210      	adds	r2, #16
 800965e:	2b07      	cmp	r3, #7
 8009660:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009664:	6067      	str	r7, [r4, #4]
 8009666:	dc02      	bgt.n	800966e <_svfprintf_r+0x134e>
 8009668:	3408      	adds	r4, #8
 800966a:	3d10      	subs	r5, #16
 800966c:	e7d6      	b.n	800961c <_svfprintf_r+0x12fc>
 800966e:	aa22      	add	r2, sp, #136	; 0x88
 8009670:	4649      	mov	r1, r9
 8009672:	4650      	mov	r0, sl
 8009674:	f006 fcd0 	bl	8010018 <__ssprint_r>
 8009678:	2800      	cmp	r0, #0
 800967a:	d1e5      	bne.n	8009648 <_svfprintf_r+0x1328>
 800967c:	ac25      	add	r4, sp, #148	; 0x94
 800967e:	e7f4      	b.n	800966a <_svfprintf_r+0x134a>
 8009680:	9904      	ldr	r1, [sp, #16]
 8009682:	4650      	mov	r0, sl
 8009684:	f7fe fb44 	bl	8007d10 <_free_r>
 8009688:	f7ff ba49 	b.w	8008b1e <_svfprintf_r+0x7fe>
 800968c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800968e:	2b00      	cmp	r3, #0
 8009690:	f43f a852 	beq.w	8008738 <_svfprintf_r+0x418>
 8009694:	aa22      	add	r2, sp, #136	; 0x88
 8009696:	4649      	mov	r1, r9
 8009698:	4650      	mov	r0, sl
 800969a:	f006 fcbd 	bl	8010018 <__ssprint_r>
 800969e:	f7ff b84b 	b.w	8008738 <_svfprintf_r+0x418>
 80096a2:	ea55 0206 	orrs.w	r2, r5, r6
 80096a6:	f8cd b010 	str.w	fp, [sp, #16]
 80096aa:	f43f ab5e 	beq.w	8008d6a <_svfprintf_r+0xa4a>
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	f43f abff 	beq.w	8008eb2 <_svfprintf_r+0xb92>
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	ab4e      	add	r3, sp, #312	; 0x138
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	f43f ac4d 	beq.w	8008f58 <_svfprintf_r+0xc38>
 80096be:	9a03      	ldr	r2, [sp, #12]
 80096c0:	f005 0307 	and.w	r3, r5, #7
 80096c4:	4611      	mov	r1, r2
 80096c6:	3330      	adds	r3, #48	; 0x30
 80096c8:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80096cc:	08ed      	lsrs	r5, r5, #3
 80096ce:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 80096d2:	08f6      	lsrs	r6, r6, #3
 80096d4:	9103      	str	r1, [sp, #12]
 80096d6:	ea55 0106 	orrs.w	r1, r5, r6
 80096da:	d1f0      	bne.n	80096be <_svfprintf_r+0x139e>
 80096dc:	9904      	ldr	r1, [sp, #16]
 80096de:	07c9      	lsls	r1, r1, #31
 80096e0:	f57f ac2a 	bpl.w	8008f38 <_svfprintf_r+0xc18>
 80096e4:	2b30      	cmp	r3, #48	; 0x30
 80096e6:	f43f ac27 	beq.w	8008f38 <_svfprintf_r+0xc18>
 80096ea:	9903      	ldr	r1, [sp, #12]
 80096ec:	2330      	movs	r3, #48	; 0x30
 80096ee:	f801 3c01 	strb.w	r3, [r1, #-1]
 80096f2:	1e93      	subs	r3, r2, #2
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	e41f      	b.n	8008f38 <_svfprintf_r+0xc18>
 80096f8:	080118e8 	.word	0x080118e8
 80096fc:	00000000 	.word	0x00000000

08009700 <_vfprintf_r>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	ed2d 8b04 	vpush	{d8-d9}
 8009708:	b0cf      	sub	sp, #316	; 0x13c
 800970a:	468b      	mov	fp, r1
 800970c:	4691      	mov	r9, r2
 800970e:	461c      	mov	r4, r3
 8009710:	461d      	mov	r5, r3
 8009712:	4682      	mov	sl, r0
 8009714:	f003 feac 	bl	800d470 <_localeconv_r>
 8009718:	6803      	ldr	r3, [r0, #0]
 800971a:	9313      	str	r3, [sp, #76]	; 0x4c
 800971c:	4618      	mov	r0, r3
 800971e:	f7f6 fd61 	bl	80001e4 <strlen>
 8009722:	900e      	str	r0, [sp, #56]	; 0x38
 8009724:	f1ba 0f00 	cmp.w	sl, #0
 8009728:	d005      	beq.n	8009736 <_vfprintf_r+0x36>
 800972a:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 800972e:	b913      	cbnz	r3, 8009736 <_vfprintf_r+0x36>
 8009730:	4650      	mov	r0, sl
 8009732:	f7fe f8ed 	bl	8007910 <__sinit>
 8009736:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 800973a:	07d8      	lsls	r0, r3, #31
 800973c:	d407      	bmi.n	800974e <_vfprintf_r+0x4e>
 800973e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009742:	0599      	lsls	r1, r3, #22
 8009744:	d403      	bmi.n	800974e <_vfprintf_r+0x4e>
 8009746:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 800974a:	f7fe fa7b 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800974e:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8009752:	049a      	lsls	r2, r3, #18
 8009754:	d409      	bmi.n	800976a <_vfprintf_r+0x6a>
 8009756:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800975a:	f8ab 300c 	strh.w	r3, [fp, #12]
 800975e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8009762:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009766:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
 800976a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800976e:	071b      	lsls	r3, r3, #28
 8009770:	d502      	bpl.n	8009778 <_vfprintf_r+0x78>
 8009772:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009776:	b9d3      	cbnz	r3, 80097ae <_vfprintf_r+0xae>
 8009778:	4659      	mov	r1, fp
 800977a:	4650      	mov	r0, sl
 800977c:	f003 fd82 	bl	800d284 <__swsetup_r>
 8009780:	b1a8      	cbz	r0, 80097ae <_vfprintf_r+0xae>
 8009782:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8009786:	07df      	lsls	r7, r3, #31
 8009788:	d508      	bpl.n	800979c <_vfprintf_r+0x9c>
 800978a:	f04f 33ff 	mov.w	r3, #4294967295
 800978e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009790:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009792:	b04f      	add	sp, #316	; 0x13c
 8009794:	ecbd 8b04 	vpop	{d8-d9}
 8009798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80097a0:	059e      	lsls	r6, r3, #22
 80097a2:	d4f2      	bmi.n	800978a <_vfprintf_r+0x8a>
 80097a4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80097a8:	f7fe fa4d 	bl	8007c46 <__retarget_lock_release_recursive>
 80097ac:	e7ed      	b.n	800978a <_vfprintf_r+0x8a>
 80097ae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80097b2:	f003 021a 	and.w	r2, r3, #26
 80097b6:	2a0a      	cmp	r2, #10
 80097b8:	d118      	bne.n	80097ec <_vfprintf_r+0xec>
 80097ba:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 80097be:	2a00      	cmp	r2, #0
 80097c0:	db14      	blt.n	80097ec <_vfprintf_r+0xec>
 80097c2:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80097c6:	07d5      	lsls	r5, r2, #31
 80097c8:	d405      	bmi.n	80097d6 <_vfprintf_r+0xd6>
 80097ca:	0598      	lsls	r0, r3, #22
 80097cc:	d403      	bmi.n	80097d6 <_vfprintf_r+0xd6>
 80097ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 80097d2:	f7fe fa38 	bl	8007c46 <__retarget_lock_release_recursive>
 80097d6:	4623      	mov	r3, r4
 80097d8:	464a      	mov	r2, r9
 80097da:	4659      	mov	r1, fp
 80097dc:	4650      	mov	r0, sl
 80097de:	b04f      	add	sp, #316	; 0x13c
 80097e0:	ecbd 8b04 	vpop	{d8-d9}
 80097e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	f001 b9be 	b.w	800ab68 <__sbprintf>
 80097ec:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8009a38 <_vfprintf_r+0x338>
 80097f0:	2300      	movs	r3, #0
 80097f2:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 80097f6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80097fa:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80097fe:	ac25      	add	r4, sp, #148	; 0x94
 8009800:	9422      	str	r4, [sp, #136]	; 0x88
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	930a      	str	r3, [sp, #40]	; 0x28
 8009806:	9312      	str	r3, [sp, #72]	; 0x48
 8009808:	9314      	str	r3, [sp, #80]	; 0x50
 800980a:	930f      	str	r3, [sp, #60]	; 0x3c
 800980c:	464b      	mov	r3, r9
 800980e:	461e      	mov	r6, r3
 8009810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009814:	b10a      	cbz	r2, 800981a <_vfprintf_r+0x11a>
 8009816:	2a25      	cmp	r2, #37	; 0x25
 8009818:	d1f9      	bne.n	800980e <_vfprintf_r+0x10e>
 800981a:	ebb6 0709 	subs.w	r7, r6, r9
 800981e:	d00d      	beq.n	800983c <_vfprintf_r+0x13c>
 8009820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009822:	443b      	add	r3, r7
 8009824:	9324      	str	r3, [sp, #144]	; 0x90
 8009826:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009828:	3301      	adds	r3, #1
 800982a:	2b07      	cmp	r3, #7
 800982c:	e9c4 9700 	strd	r9, r7, [r4]
 8009830:	9323      	str	r3, [sp, #140]	; 0x8c
 8009832:	dc79      	bgt.n	8009928 <_vfprintf_r+0x228>
 8009834:	3408      	adds	r4, #8
 8009836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009838:	443b      	add	r3, r7
 800983a:	930f      	str	r3, [sp, #60]	; 0x3c
 800983c:	7833      	ldrb	r3, [r6, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f001 814e 	beq.w	800aae0 <_vfprintf_r+0x13e0>
 8009844:	2300      	movs	r3, #0
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	3601      	adds	r6, #1
 800984c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009850:	9204      	str	r2, [sp, #16]
 8009852:	9310      	str	r3, [sp, #64]	; 0x40
 8009854:	4698      	mov	r8, r3
 8009856:	270a      	movs	r7, #10
 8009858:	212b      	movs	r1, #43	; 0x2b
 800985a:	4633      	mov	r3, r6
 800985c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009860:	9207      	str	r2, [sp, #28]
 8009862:	930b      	str	r3, [sp, #44]	; 0x2c
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	3b20      	subs	r3, #32
 8009868:	2b5a      	cmp	r3, #90	; 0x5a
 800986a:	f200 85c4 	bhi.w	800a3f6 <_vfprintf_r+0xcf6>
 800986e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009872:	007e      	.short	0x007e
 8009874:	05c205c2 	.word	0x05c205c2
 8009878:	05c20086 	.word	0x05c20086
 800987c:	05c205c2 	.word	0x05c205c2
 8009880:	05c20065 	.word	0x05c20065
 8009884:	008905c2 	.word	0x008905c2
 8009888:	05c20093 	.word	0x05c20093
 800988c:	00960090 	.word	0x00960090
 8009890:	00b205c2 	.word	0x00b205c2
 8009894:	00b500b5 	.word	0x00b500b5
 8009898:	00b500b5 	.word	0x00b500b5
 800989c:	00b500b5 	.word	0x00b500b5
 80098a0:	00b500b5 	.word	0x00b500b5
 80098a4:	05c200b5 	.word	0x05c200b5
 80098a8:	05c205c2 	.word	0x05c205c2
 80098ac:	05c205c2 	.word	0x05c205c2
 80098b0:	05c205c2 	.word	0x05c205c2
 80098b4:	05c2012a 	.word	0x05c2012a
 80098b8:	00fa00e7 	.word	0x00fa00e7
 80098bc:	012a012a 	.word	0x012a012a
 80098c0:	05c2012a 	.word	0x05c2012a
 80098c4:	05c205c2 	.word	0x05c205c2
 80098c8:	00c505c2 	.word	0x00c505c2
 80098cc:	05c205c2 	.word	0x05c205c2
 80098d0:	05c204a2 	.word	0x05c204a2
 80098d4:	05c205c2 	.word	0x05c205c2
 80098d8:	05c204eb 	.word	0x05c204eb
 80098dc:	05c2050c 	.word	0x05c2050c
 80098e0:	052e05c2 	.word	0x052e05c2
 80098e4:	05c205c2 	.word	0x05c205c2
 80098e8:	05c205c2 	.word	0x05c205c2
 80098ec:	05c205c2 	.word	0x05c205c2
 80098f0:	05c205c2 	.word	0x05c205c2
 80098f4:	05c2012a 	.word	0x05c2012a
 80098f8:	00fc00e7 	.word	0x00fc00e7
 80098fc:	012a012a 	.word	0x012a012a
 8009900:	00c8012a 	.word	0x00c8012a
 8009904:	00dc00fc 	.word	0x00dc00fc
 8009908:	00d505c2 	.word	0x00d505c2
 800990c:	047d05c2 	.word	0x047d05c2
 8009910:	04da04a4 	.word	0x04da04a4
 8009914:	05c200dc 	.word	0x05c200dc
 8009918:	007c04eb 	.word	0x007c04eb
 800991c:	05c2050e 	.word	0x05c2050e
 8009920:	054d05c2 	.word	0x054d05c2
 8009924:	007c05c2 	.word	0x007c05c2
 8009928:	aa22      	add	r2, sp, #136	; 0x88
 800992a:	4659      	mov	r1, fp
 800992c:	4650      	mov	r0, sl
 800992e:	f001 f95b 	bl	800abe8 <__sprint_r>
 8009932:	2800      	cmp	r0, #0
 8009934:	f040 8135 	bne.w	8009ba2 <_vfprintf_r+0x4a2>
 8009938:	ac25      	add	r4, sp, #148	; 0x94
 800993a:	e77c      	b.n	8009836 <_vfprintf_r+0x136>
 800993c:	4650      	mov	r0, sl
 800993e:	f003 fd97 	bl	800d470 <_localeconv_r>
 8009942:	6843      	ldr	r3, [r0, #4]
 8009944:	9314      	str	r3, [sp, #80]	; 0x50
 8009946:	4618      	mov	r0, r3
 8009948:	f7f6 fc4c 	bl	80001e4 <strlen>
 800994c:	9012      	str	r0, [sp, #72]	; 0x48
 800994e:	4650      	mov	r0, sl
 8009950:	f003 fd8e 	bl	800d470 <_localeconv_r>
 8009954:	6883      	ldr	r3, [r0, #8]
 8009956:	930a      	str	r3, [sp, #40]	; 0x28
 8009958:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800995a:	212b      	movs	r1, #43	; 0x2b
 800995c:	b12b      	cbz	r3, 800996a <_vfprintf_r+0x26a>
 800995e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009960:	b11b      	cbz	r3, 800996a <_vfprintf_r+0x26a>
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b10b      	cbz	r3, 800996a <_vfprintf_r+0x26a>
 8009966:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800996a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800996c:	e775      	b.n	800985a <_vfprintf_r+0x15a>
 800996e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1f9      	bne.n	800996a <_vfprintf_r+0x26a>
 8009976:	2320      	movs	r3, #32
 8009978:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800997c:	e7f5      	b.n	800996a <_vfprintf_r+0x26a>
 800997e:	f048 0801 	orr.w	r8, r8, #1
 8009982:	e7f2      	b.n	800996a <_vfprintf_r+0x26a>
 8009984:	f855 3b04 	ldr.w	r3, [r5], #4
 8009988:	9310      	str	r3, [sp, #64]	; 0x40
 800998a:	2b00      	cmp	r3, #0
 800998c:	daed      	bge.n	800996a <_vfprintf_r+0x26a>
 800998e:	425b      	negs	r3, r3
 8009990:	9310      	str	r3, [sp, #64]	; 0x40
 8009992:	f048 0804 	orr.w	r8, r8, #4
 8009996:	e7e8      	b.n	800996a <_vfprintf_r+0x26a>
 8009998:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800999c:	e7e5      	b.n	800996a <_vfprintf_r+0x26a>
 800999e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a4:	9207      	str	r2, [sp, #28]
 80099a6:	2a2a      	cmp	r2, #42	; 0x2a
 80099a8:	d112      	bne.n	80099d0 <_vfprintf_r+0x2d0>
 80099aa:	f855 2b04 	ldr.w	r2, [r5], #4
 80099ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80099b0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80099b4:	9204      	str	r2, [sp, #16]
 80099b6:	e7d8      	b.n	800996a <_vfprintf_r+0x26a>
 80099b8:	9804      	ldr	r0, [sp, #16]
 80099ba:	fb07 2200 	mla	r2, r7, r0, r2
 80099be:	9204      	str	r2, [sp, #16]
 80099c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099c4:	9207      	str	r2, [sp, #28]
 80099c6:	9a07      	ldr	r2, [sp, #28]
 80099c8:	3a30      	subs	r2, #48	; 0x30
 80099ca:	2a09      	cmp	r2, #9
 80099cc:	d9f4      	bls.n	80099b8 <_vfprintf_r+0x2b8>
 80099ce:	e748      	b.n	8009862 <_vfprintf_r+0x162>
 80099d0:	2200      	movs	r2, #0
 80099d2:	9204      	str	r2, [sp, #16]
 80099d4:	e7f7      	b.n	80099c6 <_vfprintf_r+0x2c6>
 80099d6:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80099da:	e7c6      	b.n	800996a <_vfprintf_r+0x26a>
 80099dc:	2200      	movs	r2, #0
 80099de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e0:	9210      	str	r2, [sp, #64]	; 0x40
 80099e2:	9a07      	ldr	r2, [sp, #28]
 80099e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80099e6:	3a30      	subs	r2, #48	; 0x30
 80099e8:	fb07 2200 	mla	r2, r7, r0, r2
 80099ec:	9210      	str	r2, [sp, #64]	; 0x40
 80099ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099f2:	9207      	str	r2, [sp, #28]
 80099f4:	3a30      	subs	r2, #48	; 0x30
 80099f6:	2a09      	cmp	r2, #9
 80099f8:	d9f3      	bls.n	80099e2 <_vfprintf_r+0x2e2>
 80099fa:	e732      	b.n	8009862 <_vfprintf_r+0x162>
 80099fc:	f048 0808 	orr.w	r8, r8, #8
 8009a00:	e7b3      	b.n	800996a <_vfprintf_r+0x26a>
 8009a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b68      	cmp	r3, #104	; 0x68
 8009a08:	bf01      	itttt	eq
 8009a0a:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 8009a0c:	3301      	addeq	r3, #1
 8009a0e:	930b      	streq	r3, [sp, #44]	; 0x2c
 8009a10:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8009a14:	bf18      	it	ne
 8009a16:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8009a1a:	e7a6      	b.n	800996a <_vfprintf_r+0x26a>
 8009a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b6c      	cmp	r3, #108	; 0x6c
 8009a22:	d105      	bne.n	8009a30 <_vfprintf_r+0x330>
 8009a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a26:	3301      	adds	r3, #1
 8009a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a2a:	f048 0820 	orr.w	r8, r8, #32
 8009a2e:	e79c      	b.n	800996a <_vfprintf_r+0x26a>
 8009a30:	f048 0810 	orr.w	r8, r8, #16
 8009a34:	e799      	b.n	800996a <_vfprintf_r+0x26a>
 8009a36:	bf00      	nop
	...
 8009a40:	462a      	mov	r2, r5
 8009a42:	f852 3b04 	ldr.w	r3, [r2], #4
 8009a46:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9206      	str	r2, [sp, #24]
 8009a4e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009a52:	2600      	movs	r6, #0
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	2301      	movs	r3, #1
 8009a58:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	4635      	mov	r5, r6
 8009a60:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8009a64:	e1c6      	b.n	8009df4 <_vfprintf_r+0x6f4>
 8009a66:	f048 0810 	orr.w	r8, r8, #16
 8009a6a:	f018 0f20 	tst.w	r8, #32
 8009a6e:	d012      	beq.n	8009a96 <_vfprintf_r+0x396>
 8009a70:	3507      	adds	r5, #7
 8009a72:	f025 0307 	bic.w	r3, r5, #7
 8009a76:	461a      	mov	r2, r3
 8009a78:	685e      	ldr	r6, [r3, #4]
 8009a7a:	f852 5b08 	ldr.w	r5, [r2], #8
 8009a7e:	9206      	str	r2, [sp, #24]
 8009a80:	2e00      	cmp	r6, #0
 8009a82:	da06      	bge.n	8009a92 <_vfprintf_r+0x392>
 8009a84:	426d      	negs	r5, r5
 8009a86:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009a8a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8009a8e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009a92:	2301      	movs	r3, #1
 8009a94:	e3a2      	b.n	800a1dc <_vfprintf_r+0xadc>
 8009a96:	462b      	mov	r3, r5
 8009a98:	f018 0f10 	tst.w	r8, #16
 8009a9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aa0:	9306      	str	r3, [sp, #24]
 8009aa2:	d002      	beq.n	8009aaa <_vfprintf_r+0x3aa>
 8009aa4:	4635      	mov	r5, r6
 8009aa6:	17f6      	asrs	r6, r6, #31
 8009aa8:	e7ea      	b.n	8009a80 <_vfprintf_r+0x380>
 8009aaa:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009aae:	d003      	beq.n	8009ab8 <_vfprintf_r+0x3b8>
 8009ab0:	b235      	sxth	r5, r6
 8009ab2:	f346 36c0 	sbfx	r6, r6, #15, #1
 8009ab6:	e7e3      	b.n	8009a80 <_vfprintf_r+0x380>
 8009ab8:	f418 7f00 	tst.w	r8, #512	; 0x200
 8009abc:	d0f2      	beq.n	8009aa4 <_vfprintf_r+0x3a4>
 8009abe:	b275      	sxtb	r5, r6
 8009ac0:	f346 16c0 	sbfx	r6, r6, #7, #1
 8009ac4:	e7dc      	b.n	8009a80 <_vfprintf_r+0x380>
 8009ac6:	3507      	adds	r5, #7
 8009ac8:	f025 0307 	bic.w	r3, r5, #7
 8009acc:	ecb3 7b02 	vldmia	r3!, {d7}
 8009ad0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009ad4:	9306      	str	r3, [sp, #24]
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad8:	ee09 3a10 	vmov	s18, r3
 8009adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ade:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ae2:	ee09 3a90 	vmov	s19, r3
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aea:	4b3f      	ldr	r3, [pc, #252]	; (8009be8 <_vfprintf_r+0x4e8>)
 8009aec:	ec51 0b19 	vmov	r0, r1, d9
 8009af0:	f7f7 f82c 	bl	8000b4c <__aeabi_dcmpun>
 8009af4:	bb10      	cbnz	r0, 8009b3c <_vfprintf_r+0x43c>
 8009af6:	4b3c      	ldr	r3, [pc, #240]	; (8009be8 <_vfprintf_r+0x4e8>)
 8009af8:	ec51 0b19 	vmov	r0, r1, d9
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	f7f7 f806 	bl	8000b10 <__aeabi_dcmple>
 8009b04:	b9d0      	cbnz	r0, 8009b3c <_vfprintf_r+0x43c>
 8009b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f7f6 fff5 	bl	8000afc <__aeabi_dcmplt>
 8009b12:	b110      	cbz	r0, 8009b1a <_vfprintf_r+0x41a>
 8009b14:	232d      	movs	r3, #45	; 0x2d
 8009b16:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009b1a:	4a34      	ldr	r2, [pc, #208]	; (8009bec <_vfprintf_r+0x4ec>)
 8009b1c:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <_vfprintf_r+0x4f0>)
 8009b1e:	9907      	ldr	r1, [sp, #28]
 8009b20:	2947      	cmp	r1, #71	; 0x47
 8009b22:	bfd4      	ite	le
 8009b24:	4691      	movle	r9, r2
 8009b26:	4699      	movgt	r9, r3
 8009b28:	2100      	movs	r1, #0
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8009b30:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8009b34:	2600      	movs	r6, #0
 8009b36:	4633      	mov	r3, r6
 8009b38:	f001 b80c 	b.w	800ab54 <_vfprintf_r+0x1454>
 8009b3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7f7 f802 	bl	8000b4c <__aeabi_dcmpun>
 8009b48:	b140      	cbz	r0, 8009b5c <_vfprintf_r+0x45c>
 8009b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b4c:	4a29      	ldr	r2, [pc, #164]	; (8009bf4 <_vfprintf_r+0x4f4>)
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	bfbc      	itt	lt
 8009b52:	232d      	movlt	r3, #45	; 0x2d
 8009b54:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8009b58:	4b27      	ldr	r3, [pc, #156]	; (8009bf8 <_vfprintf_r+0x4f8>)
 8009b5a:	e7e0      	b.n	8009b1e <_vfprintf_r+0x41e>
 8009b5c:	9b07      	ldr	r3, [sp, #28]
 8009b5e:	f023 0320 	bic.w	r3, r3, #32
 8009b62:	2b41      	cmp	r3, #65	; 0x41
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	d12e      	bne.n	8009bc6 <_vfprintf_r+0x4c6>
 8009b68:	2330      	movs	r3, #48	; 0x30
 8009b6a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8009b6e:	9b07      	ldr	r3, [sp, #28]
 8009b70:	2b61      	cmp	r3, #97	; 0x61
 8009b72:	bf0c      	ite	eq
 8009b74:	2378      	moveq	r3, #120	; 0x78
 8009b76:	2358      	movne	r3, #88	; 0x58
 8009b78:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	2b63      	cmp	r3, #99	; 0x63
 8009b80:	f048 0802 	orr.w	r8, r8, #2
 8009b84:	dd3a      	ble.n	8009bfc <_vfprintf_r+0x4fc>
 8009b86:	1c59      	adds	r1, r3, #1
 8009b88:	4650      	mov	r0, sl
 8009b8a:	f7fe f981 	bl	8007e90 <_malloc_r>
 8009b8e:	4681      	mov	r9, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f040 8207 	bne.w	8009fa4 <_vfprintf_r+0x8a4>
 8009b96:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8009ba2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
 8009ba6:	07d9      	lsls	r1, r3, #31
 8009ba8:	d407      	bmi.n	8009bba <_vfprintf_r+0x4ba>
 8009baa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009bae:	059a      	lsls	r2, r3, #22
 8009bb0:	d403      	bmi.n	8009bba <_vfprintf_r+0x4ba>
 8009bb2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
 8009bb6:	f7fe f846 	bl	8007c46 <__retarget_lock_release_recursive>
 8009bba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009bbe:	065b      	lsls	r3, r3, #25
 8009bc0:	f57f ade6 	bpl.w	8009790 <_vfprintf_r+0x90>
 8009bc4:	e5e1      	b.n	800978a <_vfprintf_r+0x8a>
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f000 81ed 	beq.w	8009fa8 <_vfprintf_r+0x8a8>
 8009bce:	9b08      	ldr	r3, [sp, #32]
 8009bd0:	2b47      	cmp	r3, #71	; 0x47
 8009bd2:	f040 81ec 	bne.w	8009fae <_vfprintf_r+0x8ae>
 8009bd6:	9b04      	ldr	r3, [sp, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f040 81e8 	bne.w	8009fae <_vfprintf_r+0x8ae>
 8009bde:	9303      	str	r3, [sp, #12]
 8009be0:	2301      	movs	r3, #1
 8009be2:	9304      	str	r3, [sp, #16]
 8009be4:	e00d      	b.n	8009c02 <_vfprintf_r+0x502>
 8009be6:	bf00      	nop
 8009be8:	7fefffff 	.word	0x7fefffff
 8009bec:	080118b4 	.word	0x080118b4
 8009bf0:	080118b8 	.word	0x080118b8
 8009bf4:	080118bc 	.word	0x080118bc
 8009bf8:	080118c0 	.word	0x080118c0
 8009bfc:	9003      	str	r0, [sp, #12]
 8009bfe:	f10d 09d4 	add.w	r9, sp, #212	; 0xd4
 8009c02:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 8009c06:	9311      	str	r3, [sp, #68]	; 0x44
 8009c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f280 81d1 	bge.w	8009fb2 <_vfprintf_r+0x8b2>
 8009c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c12:	ee08 3a10 	vmov	s16, r3
 8009c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c1c:	ee08 3a90 	vmov	s17, r3
 8009c20:	232d      	movs	r3, #45	; 0x2d
 8009c22:	9318      	str	r3, [sp, #96]	; 0x60
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	2b41      	cmp	r3, #65	; 0x41
 8009c28:	f040 81e1 	bne.w	8009fee <_vfprintf_r+0x8ee>
 8009c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c30:	eef0 0a68 	vmov.f32	s1, s17
 8009c34:	a81c      	add	r0, sp, #112	; 0x70
 8009c36:	f003 fc63 	bl	800d500 <frexp>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009c40:	ec51 0b10 	vmov	r0, r1, d0
 8009c44:	f7f6 fce8 	bl	8000618 <__aeabi_dmul>
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	f7f6 ff4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c54:	b108      	cbz	r0, 8009c5a <_vfprintf_r+0x55a>
 8009c56:	2301      	movs	r3, #1
 8009c58:	931c      	str	r3, [sp, #112]	; 0x70
 8009c5a:	4ba7      	ldr	r3, [pc, #668]	; (8009ef8 <_vfprintf_r+0x7f8>)
 8009c5c:	4aa7      	ldr	r2, [pc, #668]	; (8009efc <_vfprintf_r+0x7fc>)
 8009c5e:	9907      	ldr	r1, [sp, #28]
 8009c60:	2961      	cmp	r1, #97	; 0x61
 8009c62:	bf18      	it	ne
 8009c64:	461a      	movne	r2, r3
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	464d      	mov	r5, r9
 8009c70:	4ba3      	ldr	r3, [pc, #652]	; (8009f00 <_vfprintf_r+0x800>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	4630      	mov	r0, r6
 8009c76:	4639      	mov	r1, r7
 8009c78:	f7f6 fcce 	bl	8000618 <__aeabi_dmul>
 8009c7c:	460f      	mov	r7, r1
 8009c7e:	4606      	mov	r6, r0
 8009c80:	f7f6 ff7a 	bl	8000b78 <__aeabi_d2iz>
 8009c84:	9019      	str	r0, [sp, #100]	; 0x64
 8009c86:	f7f6 fc5d 	bl	8000544 <__aeabi_i2d>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fb09 	bl	80002a8 <__aeabi_dsub>
 8009c96:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c9a:	5c9b      	ldrb	r3, [r3, r2]
 8009c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	460f      	mov	r7, r1
 8009caa:	d007      	beq.n	8009cbc <_vfprintf_r+0x5bc>
 8009cac:	3b01      	subs	r3, #1
 8009cae:	9305      	str	r3, [sp, #20]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	f7f6 ff18 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0d9      	beq.n	8009c70 <_vfprintf_r+0x570>
 8009cbc:	4b91      	ldr	r3, [pc, #580]	; (8009f04 <_vfprintf_r+0x804>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 ff38 	bl	8000b38 <__aeabi_dcmpgt>
 8009cc8:	b960      	cbnz	r0, 8009ce4 <_vfprintf_r+0x5e4>
 8009cca:	4b8e      	ldr	r3, [pc, #568]	; (8009f04 <_vfprintf_r+0x804>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	f7f6 ff09 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f000 8184 	beq.w	8009fe4 <_vfprintf_r+0x8e4>
 8009cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cde:	07da      	lsls	r2, r3, #31
 8009ce0:	f140 8180 	bpl.w	8009fe4 <_vfprintf_r+0x8e4>
 8009ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce6:	9520      	str	r5, [sp, #128]	; 0x80
 8009ce8:	7bd9      	ldrb	r1, [r3, #15]
 8009cea:	2030      	movs	r0, #48	; 0x30
 8009cec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009cee:	1e53      	subs	r3, r2, #1
 8009cf0:	9320      	str	r3, [sp, #128]	; 0x80
 8009cf2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8009cf6:	428b      	cmp	r3, r1
 8009cf8:	f000 8163 	beq.w	8009fc2 <_vfprintf_r+0x8c2>
 8009cfc:	2b39      	cmp	r3, #57	; 0x39
 8009cfe:	bf0b      	itete	eq
 8009d00:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8009d02:	3301      	addne	r3, #1
 8009d04:	7a9b      	ldrbeq	r3, [r3, #10]
 8009d06:	b2db      	uxtbne	r3, r3
 8009d08:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d0c:	eba5 0309 	sub.w	r3, r5, r9
 8009d10:	9305      	str	r3, [sp, #20]
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009d16:	2b47      	cmp	r3, #71	; 0x47
 8009d18:	f040 81b3 	bne.w	800a082 <_vfprintf_r+0x982>
 8009d1c:	1ceb      	adds	r3, r5, #3
 8009d1e:	db03      	blt.n	8009d28 <_vfprintf_r+0x628>
 8009d20:	9b04      	ldr	r3, [sp, #16]
 8009d22:	42ab      	cmp	r3, r5
 8009d24:	f280 81d3 	bge.w	800a0ce <_vfprintf_r+0x9ce>
 8009d28:	9b07      	ldr	r3, [sp, #28]
 8009d2a:	3b02      	subs	r3, #2
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	9907      	ldr	r1, [sp, #28]
 8009d30:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009d34:	f021 0120 	bic.w	r1, r1, #32
 8009d38:	2941      	cmp	r1, #65	; 0x41
 8009d3a:	bf08      	it	eq
 8009d3c:	320f      	addeq	r2, #15
 8009d3e:	f105 33ff 	add.w	r3, r5, #4294967295
 8009d42:	bf06      	itte	eq
 8009d44:	b2d2      	uxtbeq	r2, r2
 8009d46:	2101      	moveq	r1, #1
 8009d48:	2100      	movne	r1, #0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	931c      	str	r3, [sp, #112]	; 0x70
 8009d4e:	bfb8      	it	lt
 8009d50:	f1c5 0301 	rsblt	r3, r5, #1
 8009d54:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8009d58:	bfb4      	ite	lt
 8009d5a:	222d      	movlt	r2, #45	; 0x2d
 8009d5c:	222b      	movge	r2, #43	; 0x2b
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8009d64:	f340 81a6 	ble.w	800a0b4 <_vfprintf_r+0x9b4>
 8009d68:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8009d6c:	260a      	movs	r6, #10
 8009d6e:	4602      	mov	r2, r0
 8009d70:	fb93 f5f6 	sdiv	r5, r3, r6
 8009d74:	fb06 3115 	mls	r1, r6, r5, r3
 8009d78:	3130      	adds	r1, #48	; 0x30
 8009d7a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	2963      	cmp	r1, #99	; 0x63
 8009d82:	f100 30ff 	add.w	r0, r0, #4294967295
 8009d86:	462b      	mov	r3, r5
 8009d88:	dcf1      	bgt.n	8009d6e <_vfprintf_r+0x66e>
 8009d8a:	3330      	adds	r3, #48	; 0x30
 8009d8c:	1e91      	subs	r1, r2, #2
 8009d8e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009d92:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8009d96:	460b      	mov	r3, r1
 8009d98:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8009d9c:	4283      	cmp	r3, r0
 8009d9e:	f0c0 8184 	bcc.w	800a0aa <_vfprintf_r+0x9aa>
 8009da2:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8009da6:	1a9b      	subs	r3, r3, r2
 8009da8:	4281      	cmp	r1, r0
 8009daa:	bf88      	it	hi
 8009dac:	2300      	movhi	r3, #0
 8009dae:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8009db2:	441a      	add	r2, r3
 8009db4:	ab1e      	add	r3, sp, #120	; 0x78
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	9a05      	ldr	r2, [sp, #20]
 8009dba:	9315      	str	r3, [sp, #84]	; 0x54
 8009dbc:	2a01      	cmp	r2, #1
 8009dbe:	4413      	add	r3, r2
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	dc02      	bgt.n	8009dca <_vfprintf_r+0x6ca>
 8009dc4:	f018 0f01 	tst.w	r8, #1
 8009dc8:	d003      	beq.n	8009dd2 <_vfprintf_r+0x6d2>
 8009dca:	9b04      	ldr	r3, [sp, #16]
 8009dcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dce:	4413      	add	r3, r2
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8009dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dda:	9311      	str	r3, [sp, #68]	; 0x44
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8009de2:	461d      	mov	r5, r3
 8009de4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009de6:	b113      	cbz	r3, 8009dee <_vfprintf_r+0x6ee>
 8009de8:	232d      	movs	r3, #45	; 0x2d
 8009dea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009dee:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8009df2:	2600      	movs	r6, #0
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	42b3      	cmp	r3, r6
 8009df8:	bfb8      	it	lt
 8009dfa:	4633      	movlt	r3, r6
 8009dfc:	9311      	str	r3, [sp, #68]	; 0x44
 8009dfe:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009e02:	b113      	cbz	r3, 8009e0a <_vfprintf_r+0x70a>
 8009e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e06:	3301      	adds	r3, #1
 8009e08:	9311      	str	r3, [sp, #68]	; 0x44
 8009e0a:	f018 0302 	ands.w	r3, r8, #2
 8009e0e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e10:	bf1e      	ittt	ne
 8009e12:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8009e14:	3302      	addne	r3, #2
 8009e16:	9311      	strne	r3, [sp, #68]	; 0x44
 8009e18:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 8009e1c:	9318      	str	r3, [sp, #96]	; 0x60
 8009e1e:	d11f      	bne.n	8009e60 <_vfprintf_r+0x760>
 8009e20:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009e24:	1a9f      	subs	r7, r3, r2
 8009e26:	2f00      	cmp	r7, #0
 8009e28:	dd1a      	ble.n	8009e60 <_vfprintf_r+0x760>
 8009e2a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009e2e:	4836      	ldr	r0, [pc, #216]	; (8009f08 <_vfprintf_r+0x808>)
 8009e30:	6020      	str	r0, [r4, #0]
 8009e32:	2f10      	cmp	r7, #16
 8009e34:	f103 0301 	add.w	r3, r3, #1
 8009e38:	f104 0108 	add.w	r1, r4, #8
 8009e3c:	f300 82ea 	bgt.w	800a414 <_vfprintf_r+0xd14>
 8009e40:	6067      	str	r7, [r4, #4]
 8009e42:	2b07      	cmp	r3, #7
 8009e44:	4417      	add	r7, r2
 8009e46:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8009e4a:	f340 82f6 	ble.w	800a43a <_vfprintf_r+0xd3a>
 8009e4e:	aa22      	add	r2, sp, #136	; 0x88
 8009e50:	4659      	mov	r1, fp
 8009e52:	4650      	mov	r0, sl
 8009e54:	f000 fec8 	bl	800abe8 <__sprint_r>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f040 861f 	bne.w	800aa9c <_vfprintf_r+0x139c>
 8009e5e:	ac25      	add	r4, sp, #148	; 0x94
 8009e60:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8009e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e66:	b16a      	cbz	r2, 8009e84 <_vfprintf_r+0x784>
 8009e68:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8009e6c:	6022      	str	r2, [r4, #0]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4413      	add	r3, r2
 8009e72:	9324      	str	r3, [sp, #144]	; 0x90
 8009e74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e76:	6062      	str	r2, [r4, #4]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2b07      	cmp	r3, #7
 8009e7c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e7e:	f300 82de 	bgt.w	800a43e <_vfprintf_r+0xd3e>
 8009e82:	3408      	adds	r4, #8
 8009e84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e86:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e88:	b162      	cbz	r2, 8009ea4 <_vfprintf_r+0x7a4>
 8009e8a:	aa1b      	add	r2, sp, #108	; 0x6c
 8009e8c:	6022      	str	r2, [r4, #0]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	9324      	str	r3, [sp, #144]	; 0x90
 8009e94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e96:	6062      	str	r2, [r4, #4]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	2b07      	cmp	r3, #7
 8009e9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e9e:	f300 82d8 	bgt.w	800a452 <_vfprintf_r+0xd52>
 8009ea2:	3408      	adds	r4, #8
 8009ea4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009ea6:	2b80      	cmp	r3, #128	; 0x80
 8009ea8:	d11f      	bne.n	8009eea <_vfprintf_r+0x7ea>
 8009eaa:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 8009eae:	1a9f      	subs	r7, r3, r2
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	dd1a      	ble.n	8009eea <_vfprintf_r+0x7ea>
 8009eb4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009eb8:	4814      	ldr	r0, [pc, #80]	; (8009f0c <_vfprintf_r+0x80c>)
 8009eba:	6020      	str	r0, [r4, #0]
 8009ebc:	2f10      	cmp	r7, #16
 8009ebe:	f103 0301 	add.w	r3, r3, #1
 8009ec2:	f104 0108 	add.w	r1, r4, #8
 8009ec6:	f300 82ce 	bgt.w	800a466 <_vfprintf_r+0xd66>
 8009eca:	6067      	str	r7, [r4, #4]
 8009ecc:	2b07      	cmp	r3, #7
 8009ece:	4417      	add	r7, r2
 8009ed0:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8009ed4:	f340 82da 	ble.w	800a48c <_vfprintf_r+0xd8c>
 8009ed8:	aa22      	add	r2, sp, #136	; 0x88
 8009eda:	4659      	mov	r1, fp
 8009edc:	4650      	mov	r0, sl
 8009ede:	f000 fe83 	bl	800abe8 <__sprint_r>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	f040 85da 	bne.w	800aa9c <_vfprintf_r+0x139c>
 8009ee8:	ac25      	add	r4, sp, #148	; 0x94
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	1af6      	subs	r6, r6, r3
 8009eee:	2e00      	cmp	r6, #0
 8009ef0:	dd28      	ble.n	8009f44 <_vfprintf_r+0x844>
 8009ef2:	4f06      	ldr	r7, [pc, #24]	; (8009f0c <_vfprintf_r+0x80c>)
 8009ef4:	e00c      	b.n	8009f10 <_vfprintf_r+0x810>
 8009ef6:	bf00      	nop
 8009ef8:	080118d5 	.word	0x080118d5
 8009efc:	080118c4 	.word	0x080118c4
 8009f00:	40300000 	.word	0x40300000
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	08011908 	.word	0x08011908
 8009f0c:	08011918 	.word	0x08011918
 8009f10:	6027      	str	r7, [r4, #0]
 8009f12:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009f16:	2e10      	cmp	r6, #16
 8009f18:	f103 0301 	add.w	r3, r3, #1
 8009f1c:	f104 0108 	add.w	r1, r4, #8
 8009f20:	f300 82b6 	bgt.w	800a490 <_vfprintf_r+0xd90>
 8009f24:	6066      	str	r6, [r4, #4]
 8009f26:	2b07      	cmp	r3, #7
 8009f28:	4416      	add	r6, r2
 8009f2a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009f2e:	f340 82c2 	ble.w	800a4b6 <_vfprintf_r+0xdb6>
 8009f32:	aa22      	add	r2, sp, #136	; 0x88
 8009f34:	4659      	mov	r1, fp
 8009f36:	4650      	mov	r0, sl
 8009f38:	f000 fe56 	bl	800abe8 <__sprint_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 85ad 	bne.w	800aa9c <_vfprintf_r+0x139c>
 8009f42:	ac25      	add	r4, sp, #148	; 0x94
 8009f44:	f418 7f80 	tst.w	r8, #256	; 0x100
 8009f48:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009f4a:	f040 82bb 	bne.w	800a4c4 <_vfprintf_r+0xdc4>
 8009f4e:	9b04      	ldr	r3, [sp, #16]
 8009f50:	f8c4 9000 	str.w	r9, [r4]
 8009f54:	441e      	add	r6, r3
 8009f56:	6063      	str	r3, [r4, #4]
 8009f58:	9624      	str	r6, [sp, #144]	; 0x90
 8009f5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	2b07      	cmp	r3, #7
 8009f60:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f62:	f300 82f4 	bgt.w	800a54e <_vfprintf_r+0xe4e>
 8009f66:	3408      	adds	r4, #8
 8009f68:	f018 0f04 	tst.w	r8, #4
 8009f6c:	f040 8578 	bne.w	800aa60 <_vfprintf_r+0x1360>
 8009f70:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8009f74:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f76:	428a      	cmp	r2, r1
 8009f78:	bfac      	ite	ge
 8009f7a:	189b      	addge	r3, r3, r2
 8009f7c:	185b      	addlt	r3, r3, r1
 8009f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f82:	b13b      	cbz	r3, 8009f94 <_vfprintf_r+0x894>
 8009f84:	aa22      	add	r2, sp, #136	; 0x88
 8009f86:	4659      	mov	r1, fp
 8009f88:	4650      	mov	r0, sl
 8009f8a:	f000 fe2d 	bl	800abe8 <__sprint_r>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	f040 8584 	bne.w	800aa9c <_vfprintf_r+0x139c>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f040 859a 	bne.w	800aad4 <_vfprintf_r+0x13d4>
 8009fa0:	ac25      	add	r4, sp, #148	; 0x94
 8009fa2:	e0ee      	b.n	800a182 <_vfprintf_r+0xa82>
 8009fa4:	9003      	str	r0, [sp, #12]
 8009fa6:	e62c      	b.n	8009c02 <_vfprintf_r+0x502>
 8009fa8:	9003      	str	r0, [sp, #12]
 8009faa:	2306      	movs	r3, #6
 8009fac:	e619      	b.n	8009be2 <_vfprintf_r+0x4e2>
 8009fae:	9003      	str	r0, [sp, #12]
 8009fb0:	e627      	b.n	8009c02 <_vfprintf_r+0x502>
 8009fb2:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	eeb0 8a47 	vmov.f32	s16, s14
 8009fbc:	eef0 8a67 	vmov.f32	s17, s15
 8009fc0:	e62f      	b.n	8009c22 <_vfprintf_r+0x522>
 8009fc2:	f802 0c01 	strb.w	r0, [r2, #-1]
 8009fc6:	e691      	b.n	8009cec <_vfprintf_r+0x5ec>
 8009fc8:	f803 0b01 	strb.w	r0, [r3], #1
 8009fcc:	1aca      	subs	r2, r1, r3
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	dafa      	bge.n	8009fc8 <_vfprintf_r+0x8c8>
 8009fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd6:	3201      	adds	r2, #1
 8009fd8:	f103 0301 	add.w	r3, r3, #1
 8009fdc:	bfb8      	it	lt
 8009fde:	2300      	movlt	r3, #0
 8009fe0:	441d      	add	r5, r3
 8009fe2:	e693      	b.n	8009d0c <_vfprintf_r+0x60c>
 8009fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	18a9      	adds	r1, r5, r2
 8009fea:	2030      	movs	r0, #48	; 0x30
 8009fec:	e7ee      	b.n	8009fcc <_vfprintf_r+0x8cc>
 8009fee:	9b08      	ldr	r3, [sp, #32]
 8009ff0:	2b46      	cmp	r3, #70	; 0x46
 8009ff2:	d005      	beq.n	800a000 <_vfprintf_r+0x900>
 8009ff4:	2b45      	cmp	r3, #69	; 0x45
 8009ff6:	d11d      	bne.n	800a034 <_vfprintf_r+0x934>
 8009ff8:	9b04      	ldr	r3, [sp, #16]
 8009ffa:	1c5d      	adds	r5, r3, #1
 8009ffc:	2102      	movs	r1, #2
 8009ffe:	e001      	b.n	800a004 <_vfprintf_r+0x904>
 800a000:	9d04      	ldr	r5, [sp, #16]
 800a002:	2103      	movs	r1, #3
 800a004:	ab20      	add	r3, sp, #128	; 0x80
 800a006:	9301      	str	r3, [sp, #4]
 800a008:	ab1d      	add	r3, sp, #116	; 0x74
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	462a      	mov	r2, r5
 800a00e:	ab1c      	add	r3, sp, #112	; 0x70
 800a010:	4650      	mov	r0, sl
 800a012:	eeb0 0a48 	vmov.f32	s0, s16
 800a016:	eef0 0a68 	vmov.f32	s1, s17
 800a01a:	f003 fb71 	bl	800d700 <_dtoa_r>
 800a01e:	9b08      	ldr	r3, [sp, #32]
 800a020:	2b47      	cmp	r3, #71	; 0x47
 800a022:	4681      	mov	r9, r0
 800a024:	d108      	bne.n	800a038 <_vfprintf_r+0x938>
 800a026:	f018 0f01 	tst.w	r8, #1
 800a02a:	d105      	bne.n	800a038 <_vfprintf_r+0x938>
 800a02c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a02e:	eba3 0309 	sub.w	r3, r3, r9
 800a032:	e66d      	b.n	8009d10 <_vfprintf_r+0x610>
 800a034:	9d04      	ldr	r5, [sp, #16]
 800a036:	e7e1      	b.n	8009ffc <_vfprintf_r+0x8fc>
 800a038:	9b08      	ldr	r3, [sp, #32]
 800a03a:	2b46      	cmp	r3, #70	; 0x46
 800a03c:	eb09 0605 	add.w	r6, r9, r5
 800a040:	d10f      	bne.n	800a062 <_vfprintf_r+0x962>
 800a042:	f899 3000 	ldrb.w	r3, [r9]
 800a046:	2b30      	cmp	r3, #48	; 0x30
 800a048:	d109      	bne.n	800a05e <_vfprintf_r+0x95e>
 800a04a:	ec51 0b18 	vmov	r0, r1, d8
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	f7f6 fd49 	bl	8000ae8 <__aeabi_dcmpeq>
 800a056:	b910      	cbnz	r0, 800a05e <_vfprintf_r+0x95e>
 800a058:	f1c5 0501 	rsb	r5, r5, #1
 800a05c:	951c      	str	r5, [sp, #112]	; 0x70
 800a05e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a060:	441e      	add	r6, r3
 800a062:	ec51 0b18 	vmov	r0, r1, d8
 800a066:	2200      	movs	r2, #0
 800a068:	2300      	movs	r3, #0
 800a06a:	f7f6 fd3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a06e:	b100      	cbz	r0, 800a072 <_vfprintf_r+0x972>
 800a070:	9620      	str	r6, [sp, #128]	; 0x80
 800a072:	2230      	movs	r2, #48	; 0x30
 800a074:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a076:	429e      	cmp	r6, r3
 800a078:	d9d8      	bls.n	800a02c <_vfprintf_r+0x92c>
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	9120      	str	r1, [sp, #128]	; 0x80
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e7f8      	b.n	800a074 <_vfprintf_r+0x974>
 800a082:	9b08      	ldr	r3, [sp, #32]
 800a084:	2b46      	cmp	r3, #70	; 0x46
 800a086:	f47f ae52 	bne.w	8009d2e <_vfprintf_r+0x62e>
 800a08a:	9a04      	ldr	r2, [sp, #16]
 800a08c:	f008 0301 	and.w	r3, r8, #1
 800a090:	2d00      	cmp	r5, #0
 800a092:	ea43 0302 	orr.w	r3, r3, r2
 800a096:	dd29      	ble.n	800a0ec <_vfprintf_r+0x9ec>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d034      	beq.n	800a106 <_vfprintf_r+0xa06>
 800a09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a09e:	18eb      	adds	r3, r5, r3
 800a0a0:	441a      	add	r2, r3
 800a0a2:	9204      	str	r2, [sp, #16]
 800a0a4:	2366      	movs	r3, #102	; 0x66
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	e033      	b.n	800a112 <_vfprintf_r+0xa12>
 800a0aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0ae:	f805 6f01 	strb.w	r6, [r5, #1]!
 800a0b2:	e673      	b.n	8009d9c <_vfprintf_r+0x69c>
 800a0b4:	b941      	cbnz	r1, 800a0c8 <_vfprintf_r+0x9c8>
 800a0b6:	2230      	movs	r2, #48	; 0x30
 800a0b8:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800a0bc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a0c0:	3330      	adds	r3, #48	; 0x30
 800a0c2:	f802 3b01 	strb.w	r3, [r2], #1
 800a0c6:	e675      	b.n	8009db4 <_vfprintf_r+0x6b4>
 800a0c8:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800a0cc:	e7f8      	b.n	800a0c0 <_vfprintf_r+0x9c0>
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	42ab      	cmp	r3, r5
 800a0d2:	dd10      	ble.n	800a0f6 <_vfprintf_r+0x9f6>
 800a0d4:	9b05      	ldr	r3, [sp, #20]
 800a0d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0d8:	2d00      	cmp	r5, #0
 800a0da:	4413      	add	r3, r2
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	dc10      	bgt.n	800a102 <_vfprintf_r+0xa02>
 800a0e0:	9a04      	ldr	r2, [sp, #16]
 800a0e2:	f1c5 0301 	rsb	r3, r5, #1
 800a0e6:	441a      	add	r2, r3
 800a0e8:	9204      	str	r2, [sp, #16]
 800a0ea:	e00a      	b.n	800a102 <_vfprintf_r+0xa02>
 800a0ec:	b16b      	cbz	r3, 800a10a <_vfprintf_r+0xa0a>
 800a0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f0:	9a04      	ldr	r2, [sp, #16]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	e7d4      	b.n	800a0a0 <_vfprintf_r+0x9a0>
 800a0f6:	f018 0f01 	tst.w	r8, #1
 800a0fa:	d021      	beq.n	800a140 <_vfprintf_r+0xa40>
 800a0fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0fe:	18eb      	adds	r3, r5, r3
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	2367      	movs	r3, #103	; 0x67
 800a104:	e7cf      	b.n	800a0a6 <_vfprintf_r+0x9a6>
 800a106:	9504      	str	r5, [sp, #16]
 800a108:	e7cc      	b.n	800a0a4 <_vfprintf_r+0x9a4>
 800a10a:	2366      	movs	r3, #102	; 0x66
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	2301      	movs	r3, #1
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	d025      	beq.n	800a166 <_vfprintf_r+0xa66>
 800a11a:	2300      	movs	r3, #0
 800a11c:	2d00      	cmp	r5, #0
 800a11e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a122:	f77f ae5f 	ble.w	8009de4 <_vfprintf_r+0x6e4>
 800a126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	2bff      	cmp	r3, #255	; 0xff
 800a12c:	d10a      	bne.n	800a144 <_vfprintf_r+0xa44>
 800a12e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a132:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a134:	4413      	add	r3, r2
 800a136:	9a04      	ldr	r2, [sp, #16]
 800a138:	fb01 2303 	mla	r3, r1, r3, r2
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	e651      	b.n	8009de4 <_vfprintf_r+0x6e4>
 800a140:	9504      	str	r5, [sp, #16]
 800a142:	e7de      	b.n	800a102 <_vfprintf_r+0xa02>
 800a144:	42ab      	cmp	r3, r5
 800a146:	daf2      	bge.n	800a12e <_vfprintf_r+0xa2e>
 800a148:	1aed      	subs	r5, r5, r3
 800a14a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14c:	785b      	ldrb	r3, [r3, #1]
 800a14e:	b133      	cbz	r3, 800a15e <_vfprintf_r+0xa5e>
 800a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a152:	3301      	adds	r3, #1
 800a154:	9309      	str	r3, [sp, #36]	; 0x24
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	3301      	adds	r3, #1
 800a15a:	930a      	str	r3, [sp, #40]	; 0x28
 800a15c:	e7e3      	b.n	800a126 <_vfprintf_r+0xa26>
 800a15e:	9b08      	ldr	r3, [sp, #32]
 800a160:	3301      	adds	r3, #1
 800a162:	9308      	str	r3, [sp, #32]
 800a164:	e7df      	b.n	800a126 <_vfprintf_r+0xa26>
 800a166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a168:	9308      	str	r3, [sp, #32]
 800a16a:	e63b      	b.n	8009de4 <_vfprintf_r+0x6e4>
 800a16c:	1d2b      	adds	r3, r5, #4
 800a16e:	f018 0f20 	tst.w	r8, #32
 800a172:	9306      	str	r3, [sp, #24]
 800a174:	d00a      	beq.n	800a18c <_vfprintf_r+0xa8c>
 800a176:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a17c:	17d2      	asrs	r2, r2, #31
 800a17e:	e9c3 1200 	strd	r1, r2, [r3]
 800a182:	9d06      	ldr	r5, [sp, #24]
 800a184:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a188:	f7ff bb40 	b.w	800980c <_vfprintf_r+0x10c>
 800a18c:	f018 0f10 	tst.w	r8, #16
 800a190:	d003      	beq.n	800a19a <_vfprintf_r+0xa9a>
 800a192:	682b      	ldr	r3, [r5, #0]
 800a194:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	e7f3      	b.n	800a182 <_vfprintf_r+0xa82>
 800a19a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800a19e:	d003      	beq.n	800a1a8 <_vfprintf_r+0xaa8>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e7ec      	b.n	800a182 <_vfprintf_r+0xa82>
 800a1a8:	f418 7f00 	tst.w	r8, #512	; 0x200
 800a1ac:	d0f1      	beq.n	800a192 <_vfprintf_r+0xa92>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1b2:	701a      	strb	r2, [r3, #0]
 800a1b4:	e7e5      	b.n	800a182 <_vfprintf_r+0xa82>
 800a1b6:	f048 0810 	orr.w	r8, r8, #16
 800a1ba:	f018 0320 	ands.w	r3, r8, #32
 800a1be:	d01f      	beq.n	800a200 <_vfprintf_r+0xb00>
 800a1c0:	3507      	adds	r5, #7
 800a1c2:	f025 0307 	bic.w	r3, r5, #7
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	685e      	ldr	r6, [r3, #4]
 800a1ca:	f852 5b08 	ldr.w	r5, [r2], #8
 800a1ce:	9206      	str	r2, [sp, #24]
 800a1d0:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800a1dc:	9a04      	ldr	r2, [sp, #16]
 800a1de:	3201      	adds	r2, #1
 800a1e0:	f000 848d 	beq.w	800aafe <_vfprintf_r+0x13fe>
 800a1e4:	ea55 0206 	orrs.w	r2, r5, r6
 800a1e8:	f028 0780 	bic.w	r7, r8, #128	; 0x80
 800a1ec:	f040 848c 	bne.w	800ab08 <_vfprintf_r+0x1408>
 800a1f0:	9a04      	ldr	r2, [sp, #16]
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	f000 80f4 	beq.w	800a3e0 <_vfprintf_r+0xce0>
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	f040 8488 	bne.w	800ab0e <_vfprintf_r+0x140e>
 800a1fe:	e09e      	b.n	800a33e <_vfprintf_r+0xc3e>
 800a200:	462a      	mov	r2, r5
 800a202:	f018 0610 	ands.w	r6, r8, #16
 800a206:	f852 5b04 	ldr.w	r5, [r2], #4
 800a20a:	9206      	str	r2, [sp, #24]
 800a20c:	d001      	beq.n	800a212 <_vfprintf_r+0xb12>
 800a20e:	461e      	mov	r6, r3
 800a210:	e7de      	b.n	800a1d0 <_vfprintf_r+0xad0>
 800a212:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800a216:	d001      	beq.n	800a21c <_vfprintf_r+0xb1c>
 800a218:	b2ad      	uxth	r5, r5
 800a21a:	e7d9      	b.n	800a1d0 <_vfprintf_r+0xad0>
 800a21c:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800a220:	d0d6      	beq.n	800a1d0 <_vfprintf_r+0xad0>
 800a222:	b2ed      	uxtb	r5, r5
 800a224:	e7f3      	b.n	800a20e <_vfprintf_r+0xb0e>
 800a226:	462b      	mov	r3, r5
 800a228:	2278      	movs	r2, #120	; 0x78
 800a22a:	f853 5b04 	ldr.w	r5, [r3], #4
 800a22e:	9306      	str	r3, [sp, #24]
 800a230:	f647 0330 	movw	r3, #30768	; 0x7830
 800a234:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800a238:	4ba0      	ldr	r3, [pc, #640]	; (800a4bc <_vfprintf_r+0xdbc>)
 800a23a:	9316      	str	r3, [sp, #88]	; 0x58
 800a23c:	2600      	movs	r6, #0
 800a23e:	f048 0802 	orr.w	r8, r8, #2
 800a242:	2302      	movs	r3, #2
 800a244:	9207      	str	r2, [sp, #28]
 800a246:	e7c6      	b.n	800a1d6 <_vfprintf_r+0xad6>
 800a248:	462b      	mov	r3, r5
 800a24a:	2500      	movs	r5, #0
 800a24c:	f853 9b04 	ldr.w	r9, [r3], #4
 800a250:	9306      	str	r3, [sp, #24]
 800a252:	9b04      	ldr	r3, [sp, #16]
 800a254:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800a258:	1c5e      	adds	r6, r3, #1
 800a25a:	d010      	beq.n	800a27e <_vfprintf_r+0xb7e>
 800a25c:	461a      	mov	r2, r3
 800a25e:	4629      	mov	r1, r5
 800a260:	4648      	mov	r0, r9
 800a262:	f7f5 ffcd 	bl	8000200 <memchr>
 800a266:	9003      	str	r0, [sp, #12]
 800a268:	2800      	cmp	r0, #0
 800a26a:	f000 80d0 	beq.w	800a40e <_vfprintf_r+0xd0e>
 800a26e:	eba0 0309 	sub.w	r3, r0, r9
 800a272:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800a276:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800a27a:	462e      	mov	r6, r5
 800a27c:	e5ba      	b.n	8009df4 <_vfprintf_r+0x6f4>
 800a27e:	4648      	mov	r0, r9
 800a280:	f7f5 ffb0 	bl	80001e4 <strlen>
 800a284:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800a288:	e454      	b.n	8009b34 <_vfprintf_r+0x434>
 800a28a:	f048 0810 	orr.w	r8, r8, #16
 800a28e:	f018 0320 	ands.w	r3, r8, #32
 800a292:	d009      	beq.n	800a2a8 <_vfprintf_r+0xba8>
 800a294:	3507      	adds	r5, #7
 800a296:	f025 0307 	bic.w	r3, r5, #7
 800a29a:	461a      	mov	r2, r3
 800a29c:	685e      	ldr	r6, [r3, #4]
 800a29e:	f852 5b08 	ldr.w	r5, [r2], #8
 800a2a2:	9206      	str	r2, [sp, #24]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e796      	b.n	800a1d6 <_vfprintf_r+0xad6>
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	f018 0610 	ands.w	r6, r8, #16
 800a2ae:	f852 5b04 	ldr.w	r5, [r2], #4
 800a2b2:	9206      	str	r2, [sp, #24]
 800a2b4:	d001      	beq.n	800a2ba <_vfprintf_r+0xbba>
 800a2b6:	461e      	mov	r6, r3
 800a2b8:	e7f4      	b.n	800a2a4 <_vfprintf_r+0xba4>
 800a2ba:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800a2be:	d001      	beq.n	800a2c4 <_vfprintf_r+0xbc4>
 800a2c0:	b2ad      	uxth	r5, r5
 800a2c2:	e7ef      	b.n	800a2a4 <_vfprintf_r+0xba4>
 800a2c4:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800a2c8:	d0ec      	beq.n	800a2a4 <_vfprintf_r+0xba4>
 800a2ca:	b2ed      	uxtb	r5, r5
 800a2cc:	e7f3      	b.n	800a2b6 <_vfprintf_r+0xbb6>
 800a2ce:	4b7c      	ldr	r3, [pc, #496]	; (800a4c0 <_vfprintf_r+0xdc0>)
 800a2d0:	9316      	str	r3, [sp, #88]	; 0x58
 800a2d2:	f018 0320 	ands.w	r3, r8, #32
 800a2d6:	d01b      	beq.n	800a310 <_vfprintf_r+0xc10>
 800a2d8:	3507      	adds	r5, #7
 800a2da:	f025 0307 	bic.w	r3, r5, #7
 800a2de:	461a      	mov	r2, r3
 800a2e0:	685e      	ldr	r6, [r3, #4]
 800a2e2:	f852 5b08 	ldr.w	r5, [r2], #8
 800a2e6:	9206      	str	r2, [sp, #24]
 800a2e8:	f018 0f01 	tst.w	r8, #1
 800a2ec:	d00a      	beq.n	800a304 <_vfprintf_r+0xc04>
 800a2ee:	ea55 0306 	orrs.w	r3, r5, r6
 800a2f2:	d007      	beq.n	800a304 <_vfprintf_r+0xc04>
 800a2f4:	2330      	movs	r3, #48	; 0x30
 800a2f6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800a2fa:	9b07      	ldr	r3, [sp, #28]
 800a2fc:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800a300:	f048 0802 	orr.w	r8, r8, #2
 800a304:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800a308:	2302      	movs	r3, #2
 800a30a:	e764      	b.n	800a1d6 <_vfprintf_r+0xad6>
 800a30c:	4b6b      	ldr	r3, [pc, #428]	; (800a4bc <_vfprintf_r+0xdbc>)
 800a30e:	e7df      	b.n	800a2d0 <_vfprintf_r+0xbd0>
 800a310:	462a      	mov	r2, r5
 800a312:	f018 0610 	ands.w	r6, r8, #16
 800a316:	f852 5b04 	ldr.w	r5, [r2], #4
 800a31a:	9206      	str	r2, [sp, #24]
 800a31c:	d001      	beq.n	800a322 <_vfprintf_r+0xc22>
 800a31e:	461e      	mov	r6, r3
 800a320:	e7e2      	b.n	800a2e8 <_vfprintf_r+0xbe8>
 800a322:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 800a326:	d001      	beq.n	800a32c <_vfprintf_r+0xc2c>
 800a328:	b2ad      	uxth	r5, r5
 800a32a:	e7dd      	b.n	800a2e8 <_vfprintf_r+0xbe8>
 800a32c:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 800a330:	d0da      	beq.n	800a2e8 <_vfprintf_r+0xbe8>
 800a332:	b2ed      	uxtb	r5, r5
 800a334:	e7f3      	b.n	800a31e <_vfprintf_r+0xc1e>
 800a336:	2d0a      	cmp	r5, #10
 800a338:	f176 0300 	sbcs.w	r3, r6, #0
 800a33c:	d205      	bcs.n	800a34a <_vfprintf_r+0xc4a>
 800a33e:	3530      	adds	r5, #48	; 0x30
 800a340:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800a344:	f20d 1937 	addw	r9, sp, #311	; 0x137
 800a348:	e3fc      	b.n	800ab44 <_vfprintf_r+0x1444>
 800a34a:	2300      	movs	r3, #0
 800a34c:	9305      	str	r3, [sp, #20]
 800a34e:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800a352:	f50d 789c 	add.w	r8, sp, #312	; 0x138
 800a356:	9303      	str	r3, [sp, #12]
 800a358:	220a      	movs	r2, #10
 800a35a:	2300      	movs	r3, #0
 800a35c:	4628      	mov	r0, r5
 800a35e:	4631      	mov	r1, r6
 800a360:	f7f6 fca2 	bl	8000ca8 <__aeabi_uldivmod>
 800a364:	9b05      	ldr	r3, [sp, #20]
 800a366:	3301      	adds	r3, #1
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	3230      	adds	r2, #48	; 0x30
 800a36e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a372:	f108 39ff 	add.w	r9, r8, #4294967295
 800a376:	f808 2c01 	strb.w	r2, [r8, #-1]
 800a37a:	b1d3      	cbz	r3, 800a3b2 <_vfprintf_r+0xcb2>
 800a37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37e:	9a05      	ldr	r2, [sp, #20]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d115      	bne.n	800a3b2 <_vfprintf_r+0xcb2>
 800a386:	2aff      	cmp	r2, #255	; 0xff
 800a388:	d013      	beq.n	800a3b2 <_vfprintf_r+0xcb2>
 800a38a:	2d0a      	cmp	r5, #10
 800a38c:	f176 0300 	sbcs.w	r3, r6, #0
 800a390:	d30f      	bcc.n	800a3b2 <_vfprintf_r+0xcb2>
 800a392:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a394:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a396:	eba9 0903 	sub.w	r9, r9, r3
 800a39a:	461a      	mov	r2, r3
 800a39c:	4648      	mov	r0, r9
 800a39e:	f003 f84e 	bl	800d43e <strncpy>
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a4:	785b      	ldrb	r3, [r3, #1]
 800a3a6:	b11b      	cbz	r3, 800a3b0 <_vfprintf_r+0xcb0>
 800a3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9305      	str	r3, [sp, #20]
 800a3b2:	2d0a      	cmp	r5, #10
 800a3b4:	f176 0600 	sbcs.w	r6, r6, #0
 800a3b8:	f0c0 83c4 	bcc.w	800ab44 <_vfprintf_r+0x1444>
 800a3bc:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
 800a3c0:	46c8      	mov	r8, r9
 800a3c2:	e7c9      	b.n	800a358 <_vfprintf_r+0xc58>
 800a3c4:	f005 030f 	and.w	r3, r5, #15
 800a3c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3ca:	092d      	lsrs	r5, r5, #4
 800a3cc:	5cd3      	ldrb	r3, [r2, r3]
 800a3ce:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a3d2:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800a3d6:	0936      	lsrs	r6, r6, #4
 800a3d8:	ea55 0306 	orrs.w	r3, r5, r6
 800a3dc:	d1f2      	bne.n	800a3c4 <_vfprintf_r+0xcc4>
 800a3de:	e3b1      	b.n	800ab44 <_vfprintf_r+0x1444>
 800a3e0:	b933      	cbnz	r3, 800a3f0 <_vfprintf_r+0xcf0>
 800a3e2:	f018 0f01 	tst.w	r8, #1
 800a3e6:	d003      	beq.n	800a3f0 <_vfprintf_r+0xcf0>
 800a3e8:	2330      	movs	r3, #48	; 0x30
 800a3ea:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800a3ee:	e7a9      	b.n	800a344 <_vfprintf_r+0xc44>
 800a3f0:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800a3f4:	e3a6      	b.n	800ab44 <_vfprintf_r+0x1444>
 800a3f6:	9b07      	ldr	r3, [sp, #28]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8371 	beq.w	800aae0 <_vfprintf_r+0x13e0>
 800a3fe:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800a402:	2300      	movs	r3, #0
 800a404:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800a408:	9506      	str	r5, [sp, #24]
 800a40a:	f7ff bb22 	b.w	8009a52 <_vfprintf_r+0x352>
 800a40e:	9e03      	ldr	r6, [sp, #12]
 800a410:	f7ff bb91 	b.w	8009b36 <_vfprintf_r+0x436>
 800a414:	2010      	movs	r0, #16
 800a416:	4402      	add	r2, r0
 800a418:	2b07      	cmp	r3, #7
 800a41a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a41e:	6060      	str	r0, [r4, #4]
 800a420:	dd08      	ble.n	800a434 <_vfprintf_r+0xd34>
 800a422:	aa22      	add	r2, sp, #136	; 0x88
 800a424:	4659      	mov	r1, fp
 800a426:	4650      	mov	r0, sl
 800a428:	f000 fbde 	bl	800abe8 <__sprint_r>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f040 8335 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a432:	a925      	add	r1, sp, #148	; 0x94
 800a434:	3f10      	subs	r7, #16
 800a436:	460c      	mov	r4, r1
 800a438:	e4f7      	b.n	8009e2a <_vfprintf_r+0x72a>
 800a43a:	460c      	mov	r4, r1
 800a43c:	e510      	b.n	8009e60 <_vfprintf_r+0x760>
 800a43e:	aa22      	add	r2, sp, #136	; 0x88
 800a440:	4659      	mov	r1, fp
 800a442:	4650      	mov	r0, sl
 800a444:	f000 fbd0 	bl	800abe8 <__sprint_r>
 800a448:	2800      	cmp	r0, #0
 800a44a:	f040 8327 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a44e:	ac25      	add	r4, sp, #148	; 0x94
 800a450:	e518      	b.n	8009e84 <_vfprintf_r+0x784>
 800a452:	aa22      	add	r2, sp, #136	; 0x88
 800a454:	4659      	mov	r1, fp
 800a456:	4650      	mov	r0, sl
 800a458:	f000 fbc6 	bl	800abe8 <__sprint_r>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f040 831d 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a462:	ac25      	add	r4, sp, #148	; 0x94
 800a464:	e51e      	b.n	8009ea4 <_vfprintf_r+0x7a4>
 800a466:	2010      	movs	r0, #16
 800a468:	4402      	add	r2, r0
 800a46a:	2b07      	cmp	r3, #7
 800a46c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a470:	6060      	str	r0, [r4, #4]
 800a472:	dd08      	ble.n	800a486 <_vfprintf_r+0xd86>
 800a474:	aa22      	add	r2, sp, #136	; 0x88
 800a476:	4659      	mov	r1, fp
 800a478:	4650      	mov	r0, sl
 800a47a:	f000 fbb5 	bl	800abe8 <__sprint_r>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f040 830c 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a484:	a925      	add	r1, sp, #148	; 0x94
 800a486:	3f10      	subs	r7, #16
 800a488:	460c      	mov	r4, r1
 800a48a:	e513      	b.n	8009eb4 <_vfprintf_r+0x7b4>
 800a48c:	460c      	mov	r4, r1
 800a48e:	e52c      	b.n	8009eea <_vfprintf_r+0x7ea>
 800a490:	2010      	movs	r0, #16
 800a492:	4402      	add	r2, r0
 800a494:	2b07      	cmp	r3, #7
 800a496:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a49a:	6060      	str	r0, [r4, #4]
 800a49c:	dd08      	ble.n	800a4b0 <_vfprintf_r+0xdb0>
 800a49e:	aa22      	add	r2, sp, #136	; 0x88
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f000 fba0 	bl	800abe8 <__sprint_r>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f040 82f7 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a4ae:	a925      	add	r1, sp, #148	; 0x94
 800a4b0:	3e10      	subs	r6, #16
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	e52c      	b.n	8009f10 <_vfprintf_r+0x810>
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	e544      	b.n	8009f44 <_vfprintf_r+0x844>
 800a4ba:	bf00      	nop
 800a4bc:	080118c4 	.word	0x080118c4
 800a4c0:	080118d5 	.word	0x080118d5
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	2b65      	cmp	r3, #101	; 0x65
 800a4c8:	f340 8230 	ble.w	800a92c <_vfprintf_r+0x122c>
 800a4cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f7f6 fb08 	bl	8000ae8 <__aeabi_dcmpeq>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d068      	beq.n	800a5ae <_vfprintf_r+0xeae>
 800a4dc:	4b6d      	ldr	r3, [pc, #436]	; (800a694 <_vfprintf_r+0xf94>)
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	441e      	add	r6, r3
 800a4e4:	6063      	str	r3, [r4, #4]
 800a4e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4e8:	9624      	str	r6, [sp, #144]	; 0x90
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	2b07      	cmp	r3, #7
 800a4ee:	9323      	str	r3, [sp, #140]	; 0x8c
 800a4f0:	dc37      	bgt.n	800a562 <_vfprintf_r+0xe62>
 800a4f2:	3408      	adds	r4, #8
 800a4f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a4f6:	9a05      	ldr	r2, [sp, #20]
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	db03      	blt.n	800a504 <_vfprintf_r+0xe04>
 800a4fc:	f018 0f01 	tst.w	r8, #1
 800a500:	f43f ad32 	beq.w	8009f68 <_vfprintf_r+0x868>
 800a504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a50a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a50c:	6063      	str	r3, [r4, #4]
 800a50e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a510:	4413      	add	r3, r2
 800a512:	9324      	str	r3, [sp, #144]	; 0x90
 800a514:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a516:	3301      	adds	r3, #1
 800a518:	2b07      	cmp	r3, #7
 800a51a:	9323      	str	r3, [sp, #140]	; 0x8c
 800a51c:	dc2b      	bgt.n	800a576 <_vfprintf_r+0xe76>
 800a51e:	3408      	adds	r4, #8
 800a520:	9b05      	ldr	r3, [sp, #20]
 800a522:	1e5d      	subs	r5, r3, #1
 800a524:	2d00      	cmp	r5, #0
 800a526:	f77f ad1f 	ble.w	8009f68 <_vfprintf_r+0x868>
 800a52a:	4e5b      	ldr	r6, [pc, #364]	; (800a698 <_vfprintf_r+0xf98>)
 800a52c:	2710      	movs	r7, #16
 800a52e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a532:	2d10      	cmp	r5, #16
 800a534:	f103 0301 	add.w	r3, r3, #1
 800a538:	f104 0108 	add.w	r1, r4, #8
 800a53c:	6026      	str	r6, [r4, #0]
 800a53e:	dc24      	bgt.n	800a58a <_vfprintf_r+0xe8a>
 800a540:	6065      	str	r5, [r4, #4]
 800a542:	2b07      	cmp	r3, #7
 800a544:	4415      	add	r5, r2
 800a546:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800a54a:	f340 8286 	ble.w	800aa5a <_vfprintf_r+0x135a>
 800a54e:	aa22      	add	r2, sp, #136	; 0x88
 800a550:	4659      	mov	r1, fp
 800a552:	4650      	mov	r0, sl
 800a554:	f000 fb48 	bl	800abe8 <__sprint_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f040 829f 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a55e:	ac25      	add	r4, sp, #148	; 0x94
 800a560:	e502      	b.n	8009f68 <_vfprintf_r+0x868>
 800a562:	aa22      	add	r2, sp, #136	; 0x88
 800a564:	4659      	mov	r1, fp
 800a566:	4650      	mov	r0, sl
 800a568:	f000 fb3e 	bl	800abe8 <__sprint_r>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f040 8295 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a572:	ac25      	add	r4, sp, #148	; 0x94
 800a574:	e7be      	b.n	800a4f4 <_vfprintf_r+0xdf4>
 800a576:	aa22      	add	r2, sp, #136	; 0x88
 800a578:	4659      	mov	r1, fp
 800a57a:	4650      	mov	r0, sl
 800a57c:	f000 fb34 	bl	800abe8 <__sprint_r>
 800a580:	2800      	cmp	r0, #0
 800a582:	f040 828b 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a586:	ac25      	add	r4, sp, #148	; 0x94
 800a588:	e7ca      	b.n	800a520 <_vfprintf_r+0xe20>
 800a58a:	3210      	adds	r2, #16
 800a58c:	2b07      	cmp	r3, #7
 800a58e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a592:	6067      	str	r7, [r4, #4]
 800a594:	dd08      	ble.n	800a5a8 <_vfprintf_r+0xea8>
 800a596:	aa22      	add	r2, sp, #136	; 0x88
 800a598:	4659      	mov	r1, fp
 800a59a:	4650      	mov	r0, sl
 800a59c:	f000 fb24 	bl	800abe8 <__sprint_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	f040 827b 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a5a6:	a925      	add	r1, sp, #148	; 0x94
 800a5a8:	3d10      	subs	r5, #16
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	e7bf      	b.n	800a52e <_vfprintf_r+0xe2e>
 800a5ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc73      	bgt.n	800a69c <_vfprintf_r+0xf9c>
 800a5b4:	4b37      	ldr	r3, [pc, #220]	; (800a694 <_vfprintf_r+0xf94>)
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	441e      	add	r6, r3
 800a5bc:	6063      	str	r3, [r4, #4]
 800a5be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5c0:	9624      	str	r6, [sp, #144]	; 0x90
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	2b07      	cmp	r3, #7
 800a5c6:	9323      	str	r3, [sp, #140]	; 0x8c
 800a5c8:	dc3d      	bgt.n	800a646 <_vfprintf_r+0xf46>
 800a5ca:	3408      	adds	r4, #8
 800a5cc:	9905      	ldr	r1, [sp, #20]
 800a5ce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a5d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	f008 0101 	and.w	r1, r8, #1
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	f43f acc5 	beq.w	8009f68 <_vfprintf_r+0x868>
 800a5de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5e4:	6063      	str	r3, [r4, #4]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5ea:	9224      	str	r2, [sp, #144]	; 0x90
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	2b07      	cmp	r3, #7
 800a5f0:	9323      	str	r3, [sp, #140]	; 0x8c
 800a5f2:	dc32      	bgt.n	800a65a <_vfprintf_r+0xf5a>
 800a5f4:	3408      	adds	r4, #8
 800a5f6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	da1b      	bge.n	800a634 <_vfprintf_r+0xf34>
 800a5fc:	4e26      	ldr	r6, [pc, #152]	; (800a698 <_vfprintf_r+0xf98>)
 800a5fe:	426d      	negs	r5, r5
 800a600:	4623      	mov	r3, r4
 800a602:	2710      	movs	r7, #16
 800a604:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800a608:	2d10      	cmp	r5, #16
 800a60a:	f102 0201 	add.w	r2, r2, #1
 800a60e:	f104 0408 	add.w	r4, r4, #8
 800a612:	601e      	str	r6, [r3, #0]
 800a614:	dc2b      	bgt.n	800a66e <_vfprintf_r+0xf6e>
 800a616:	605d      	str	r5, [r3, #4]
 800a618:	2a07      	cmp	r2, #7
 800a61a:	440d      	add	r5, r1
 800a61c:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800a620:	dd08      	ble.n	800a634 <_vfprintf_r+0xf34>
 800a622:	aa22      	add	r2, sp, #136	; 0x88
 800a624:	4659      	mov	r1, fp
 800a626:	4650      	mov	r0, sl
 800a628:	f000 fade 	bl	800abe8 <__sprint_r>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f040 8235 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a632:	ac25      	add	r4, sp, #148	; 0x94
 800a634:	9b05      	ldr	r3, [sp, #20]
 800a636:	9a05      	ldr	r2, [sp, #20]
 800a638:	6063      	str	r3, [r4, #4]
 800a63a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a63c:	f8c4 9000 	str.w	r9, [r4]
 800a640:	4413      	add	r3, r2
 800a642:	9324      	str	r3, [sp, #144]	; 0x90
 800a644:	e489      	b.n	8009f5a <_vfprintf_r+0x85a>
 800a646:	aa22      	add	r2, sp, #136	; 0x88
 800a648:	4659      	mov	r1, fp
 800a64a:	4650      	mov	r0, sl
 800a64c:	f000 facc 	bl	800abe8 <__sprint_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	f040 8223 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a656:	ac25      	add	r4, sp, #148	; 0x94
 800a658:	e7b8      	b.n	800a5cc <_vfprintf_r+0xecc>
 800a65a:	aa22      	add	r2, sp, #136	; 0x88
 800a65c:	4659      	mov	r1, fp
 800a65e:	4650      	mov	r0, sl
 800a660:	f000 fac2 	bl	800abe8 <__sprint_r>
 800a664:	2800      	cmp	r0, #0
 800a666:	f040 8219 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a66a:	ac25      	add	r4, sp, #148	; 0x94
 800a66c:	e7c3      	b.n	800a5f6 <_vfprintf_r+0xef6>
 800a66e:	3110      	adds	r1, #16
 800a670:	2a07      	cmp	r2, #7
 800a672:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800a676:	605f      	str	r7, [r3, #4]
 800a678:	dd08      	ble.n	800a68c <_vfprintf_r+0xf8c>
 800a67a:	aa22      	add	r2, sp, #136	; 0x88
 800a67c:	4659      	mov	r1, fp
 800a67e:	4650      	mov	r0, sl
 800a680:	f000 fab2 	bl	800abe8 <__sprint_r>
 800a684:	2800      	cmp	r0, #0
 800a686:	f040 8209 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a68a:	ac25      	add	r4, sp, #148	; 0x94
 800a68c:	3d10      	subs	r5, #16
 800a68e:	4623      	mov	r3, r4
 800a690:	e7b8      	b.n	800a604 <_vfprintf_r+0xf04>
 800a692:	bf00      	nop
 800a694:	080118e6 	.word	0x080118e6
 800a698:	08011918 	.word	0x08011918
 800a69c:	9f05      	ldr	r7, [sp, #20]
 800a69e:	42af      	cmp	r7, r5
 800a6a0:	bfa8      	it	ge
 800a6a2:	462f      	movge	r7, r5
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	dd0a      	ble.n	800a6be <_vfprintf_r+0xfbe>
 800a6a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	443e      	add	r6, r7
 800a6ae:	2b07      	cmp	r3, #7
 800a6b0:	e9c4 9700 	strd	r9, r7, [r4]
 800a6b4:	9624      	str	r6, [sp, #144]	; 0x90
 800a6b6:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6b8:	f300 8084 	bgt.w	800a7c4 <_vfprintf_r+0x10c4>
 800a6bc:	3408      	adds	r4, #8
 800a6be:	2f00      	cmp	r7, #0
 800a6c0:	bfac      	ite	ge
 800a6c2:	1bee      	subge	r6, r5, r7
 800a6c4:	462e      	movlt	r6, r5
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	dd19      	ble.n	800a6fe <_vfprintf_r+0xffe>
 800a6ca:	4f97      	ldr	r7, [pc, #604]	; (800a928 <_vfprintf_r+0x1228>)
 800a6cc:	6027      	str	r7, [r4, #0]
 800a6ce:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a6d2:	2e10      	cmp	r6, #16
 800a6d4:	f103 0301 	add.w	r3, r3, #1
 800a6d8:	f104 0108 	add.w	r1, r4, #8
 800a6dc:	dc7c      	bgt.n	800a7d8 <_vfprintf_r+0x10d8>
 800a6de:	6066      	str	r6, [r4, #4]
 800a6e0:	2b07      	cmp	r3, #7
 800a6e2:	4416      	add	r6, r2
 800a6e4:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a6e8:	f340 8089 	ble.w	800a7fe <_vfprintf_r+0x10fe>
 800a6ec:	aa22      	add	r2, sp, #136	; 0x88
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	f000 fa79 	bl	800abe8 <__sprint_r>
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 81d0 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a6fc:	ac25      	add	r4, sp, #148	; 0x94
 800a6fe:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800a702:	444d      	add	r5, r9
 800a704:	d00a      	beq.n	800a71c <_vfprintf_r+0x101c>
 800a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d17a      	bne.n	800a802 <_vfprintf_r+0x1102>
 800a70c:	9b08      	ldr	r3, [sp, #32]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d17a      	bne.n	800a808 <_vfprintf_r+0x1108>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	444b      	add	r3, r9
 800a716:	429d      	cmp	r5, r3
 800a718:	bf28      	it	cs
 800a71a:	461d      	movcs	r5, r3
 800a71c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a71e:	9a05      	ldr	r2, [sp, #20]
 800a720:	4293      	cmp	r3, r2
 800a722:	db02      	blt.n	800a72a <_vfprintf_r+0x102a>
 800a724:	f018 0f01 	tst.w	r8, #1
 800a728:	d00e      	beq.n	800a748 <_vfprintf_r+0x1048>
 800a72a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a732:	6063      	str	r3, [r4, #4]
 800a734:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a736:	4413      	add	r3, r2
 800a738:	9324      	str	r3, [sp, #144]	; 0x90
 800a73a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a73c:	3301      	adds	r3, #1
 800a73e:	2b07      	cmp	r3, #7
 800a740:	9323      	str	r3, [sp, #140]	; 0x8c
 800a742:	f300 80dc 	bgt.w	800a8fe <_vfprintf_r+0x11fe>
 800a746:	3408      	adds	r4, #8
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800a74c:	1b9e      	subs	r6, r3, r6
 800a74e:	444b      	add	r3, r9
 800a750:	1b5b      	subs	r3, r3, r5
 800a752:	429e      	cmp	r6, r3
 800a754:	bfa8      	it	ge
 800a756:	461e      	movge	r6, r3
 800a758:	2e00      	cmp	r6, #0
 800a75a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a75c:	dd0a      	ble.n	800a774 <_vfprintf_r+0x1074>
 800a75e:	4433      	add	r3, r6
 800a760:	9324      	str	r3, [sp, #144]	; 0x90
 800a762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a764:	3301      	adds	r3, #1
 800a766:	2b07      	cmp	r3, #7
 800a768:	e9c4 5600 	strd	r5, r6, [r4]
 800a76c:	9323      	str	r3, [sp, #140]	; 0x8c
 800a76e:	f300 80d0 	bgt.w	800a912 <_vfprintf_r+0x1212>
 800a772:	3408      	adds	r4, #8
 800a774:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800a776:	9b05      	ldr	r3, [sp, #20]
 800a778:	2e00      	cmp	r6, #0
 800a77a:	eba3 0505 	sub.w	r5, r3, r5
 800a77e:	bfa8      	it	ge
 800a780:	1bad      	subge	r5, r5, r6
 800a782:	2d00      	cmp	r5, #0
 800a784:	f77f abf0 	ble.w	8009f68 <_vfprintf_r+0x868>
 800a788:	4e67      	ldr	r6, [pc, #412]	; (800a928 <_vfprintf_r+0x1228>)
 800a78a:	2710      	movs	r7, #16
 800a78c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a790:	2d10      	cmp	r5, #16
 800a792:	f103 0301 	add.w	r3, r3, #1
 800a796:	f104 0108 	add.w	r1, r4, #8
 800a79a:	6026      	str	r6, [r4, #0]
 800a79c:	f77f aed0 	ble.w	800a540 <_vfprintf_r+0xe40>
 800a7a0:	3210      	adds	r2, #16
 800a7a2:	2b07      	cmp	r3, #7
 800a7a4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a7a8:	6067      	str	r7, [r4, #4]
 800a7aa:	dd08      	ble.n	800a7be <_vfprintf_r+0x10be>
 800a7ac:	aa22      	add	r2, sp, #136	; 0x88
 800a7ae:	4659      	mov	r1, fp
 800a7b0:	4650      	mov	r0, sl
 800a7b2:	f000 fa19 	bl	800abe8 <__sprint_r>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f040 8170 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a7bc:	a925      	add	r1, sp, #148	; 0x94
 800a7be:	3d10      	subs	r5, #16
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	e7e3      	b.n	800a78c <_vfprintf_r+0x108c>
 800a7c4:	aa22      	add	r2, sp, #136	; 0x88
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	f000 fa0d 	bl	800abe8 <__sprint_r>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f040 8164 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a7d4:	ac25      	add	r4, sp, #148	; 0x94
 800a7d6:	e772      	b.n	800a6be <_vfprintf_r+0xfbe>
 800a7d8:	2010      	movs	r0, #16
 800a7da:	4402      	add	r2, r0
 800a7dc:	2b07      	cmp	r3, #7
 800a7de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a7e2:	6060      	str	r0, [r4, #4]
 800a7e4:	dd08      	ble.n	800a7f8 <_vfprintf_r+0x10f8>
 800a7e6:	aa22      	add	r2, sp, #136	; 0x88
 800a7e8:	4659      	mov	r1, fp
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	f000 f9fc 	bl	800abe8 <__sprint_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f040 8153 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a7f6:	a925      	add	r1, sp, #148	; 0x94
 800a7f8:	3e10      	subs	r6, #16
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	e766      	b.n	800a6cc <_vfprintf_r+0xfcc>
 800a7fe:	460c      	mov	r4, r1
 800a800:	e77d      	b.n	800a6fe <_vfprintf_r+0xffe>
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d04a      	beq.n	800a89e <_vfprintf_r+0x119e>
 800a808:	9b08      	ldr	r3, [sp, #32]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	9308      	str	r3, [sp, #32]
 800a80e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a816:	6063      	str	r3, [r4, #4]
 800a818:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a81a:	4413      	add	r3, r2
 800a81c:	9324      	str	r3, [sp, #144]	; 0x90
 800a81e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a820:	3301      	adds	r3, #1
 800a822:	2b07      	cmp	r3, #7
 800a824:	9323      	str	r3, [sp, #140]	; 0x8c
 800a826:	dc41      	bgt.n	800a8ac <_vfprintf_r+0x11ac>
 800a828:	3408      	adds	r4, #8
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	eb09 0703 	add.w	r7, r9, r3
 800a830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	1b7f      	subs	r7, r7, r5
 800a836:	429f      	cmp	r7, r3
 800a838:	bfa8      	it	ge
 800a83a:	461f      	movge	r7, r3
 800a83c:	2f00      	cmp	r7, #0
 800a83e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a840:	dd09      	ble.n	800a856 <_vfprintf_r+0x1156>
 800a842:	443b      	add	r3, r7
 800a844:	9324      	str	r3, [sp, #144]	; 0x90
 800a846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a848:	3301      	adds	r3, #1
 800a84a:	2b07      	cmp	r3, #7
 800a84c:	e9c4 5700 	strd	r5, r7, [r4]
 800a850:	9323      	str	r3, [sp, #140]	; 0x8c
 800a852:	dc35      	bgt.n	800a8c0 <_vfprintf_r+0x11c0>
 800a854:	3408      	adds	r4, #8
 800a856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a858:	781e      	ldrb	r6, [r3, #0]
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	bfa8      	it	ge
 800a85e:	1bf6      	subge	r6, r6, r7
 800a860:	2e00      	cmp	r6, #0
 800a862:	dd18      	ble.n	800a896 <_vfprintf_r+0x1196>
 800a864:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a868:	482f      	ldr	r0, [pc, #188]	; (800a928 <_vfprintf_r+0x1228>)
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	2e10      	cmp	r6, #16
 800a86e:	f103 0301 	add.w	r3, r3, #1
 800a872:	f104 0108 	add.w	r1, r4, #8
 800a876:	dc2d      	bgt.n	800a8d4 <_vfprintf_r+0x11d4>
 800a878:	6066      	str	r6, [r4, #4]
 800a87a:	2b07      	cmp	r3, #7
 800a87c:	4416      	add	r6, r2
 800a87e:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a882:	dd3a      	ble.n	800a8fa <_vfprintf_r+0x11fa>
 800a884:	aa22      	add	r2, sp, #136	; 0x88
 800a886:	4659      	mov	r1, fp
 800a888:	4650      	mov	r0, sl
 800a88a:	f000 f9ad 	bl	800abe8 <__sprint_r>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f040 8104 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a894:	ac25      	add	r4, sp, #148	; 0x94
 800a896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	441d      	add	r5, r3
 800a89c:	e733      	b.n	800a706 <_vfprintf_r+0x1006>
 800a89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	e7b0      	b.n	800a80e <_vfprintf_r+0x110e>
 800a8ac:	aa22      	add	r2, sp, #136	; 0x88
 800a8ae:	4659      	mov	r1, fp
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	f000 f999 	bl	800abe8 <__sprint_r>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f040 80f0 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a8bc:	ac25      	add	r4, sp, #148	; 0x94
 800a8be:	e7b4      	b.n	800a82a <_vfprintf_r+0x112a>
 800a8c0:	aa22      	add	r2, sp, #136	; 0x88
 800a8c2:	4659      	mov	r1, fp
 800a8c4:	4650      	mov	r0, sl
 800a8c6:	f000 f98f 	bl	800abe8 <__sprint_r>
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f040 80e6 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a8d0:	ac25      	add	r4, sp, #148	; 0x94
 800a8d2:	e7c0      	b.n	800a856 <_vfprintf_r+0x1156>
 800a8d4:	2010      	movs	r0, #16
 800a8d6:	4402      	add	r2, r0
 800a8d8:	2b07      	cmp	r3, #7
 800a8da:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a8de:	6060      	str	r0, [r4, #4]
 800a8e0:	dd08      	ble.n	800a8f4 <_vfprintf_r+0x11f4>
 800a8e2:	aa22      	add	r2, sp, #136	; 0x88
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	4650      	mov	r0, sl
 800a8e8:	f000 f97e 	bl	800abe8 <__sprint_r>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	f040 80d5 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a8f2:	a925      	add	r1, sp, #148	; 0x94
 800a8f4:	3e10      	subs	r6, #16
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	e7b4      	b.n	800a864 <_vfprintf_r+0x1164>
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	e7cb      	b.n	800a896 <_vfprintf_r+0x1196>
 800a8fe:	aa22      	add	r2, sp, #136	; 0x88
 800a900:	4659      	mov	r1, fp
 800a902:	4650      	mov	r0, sl
 800a904:	f000 f970 	bl	800abe8 <__sprint_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	f040 80c7 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a90e:	ac25      	add	r4, sp, #148	; 0x94
 800a910:	e71a      	b.n	800a748 <_vfprintf_r+0x1048>
 800a912:	aa22      	add	r2, sp, #136	; 0x88
 800a914:	4659      	mov	r1, fp
 800a916:	4650      	mov	r0, sl
 800a918:	f000 f966 	bl	800abe8 <__sprint_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	f040 80bd 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a922:	ac25      	add	r4, sp, #148	; 0x94
 800a924:	e726      	b.n	800a774 <_vfprintf_r+0x1074>
 800a926:	bf00      	nop
 800a928:	08011918 	.word	0x08011918
 800a92c:	9a05      	ldr	r2, [sp, #20]
 800a92e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a930:	2a01      	cmp	r2, #1
 800a932:	f106 0601 	add.w	r6, r6, #1
 800a936:	f103 0301 	add.w	r3, r3, #1
 800a93a:	f104 0508 	add.w	r5, r4, #8
 800a93e:	dc02      	bgt.n	800a946 <_vfprintf_r+0x1246>
 800a940:	f018 0f01 	tst.w	r8, #1
 800a944:	d07e      	beq.n	800aa44 <_vfprintf_r+0x1344>
 800a946:	2201      	movs	r2, #1
 800a948:	2b07      	cmp	r3, #7
 800a94a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a94e:	f8c4 9000 	str.w	r9, [r4]
 800a952:	6062      	str	r2, [r4, #4]
 800a954:	dd08      	ble.n	800a968 <_vfprintf_r+0x1268>
 800a956:	aa22      	add	r2, sp, #136	; 0x88
 800a958:	4659      	mov	r1, fp
 800a95a:	4650      	mov	r0, sl
 800a95c:	f000 f944 	bl	800abe8 <__sprint_r>
 800a960:	2800      	cmp	r0, #0
 800a962:	f040 809b 	bne.w	800aa9c <_vfprintf_r+0x139c>
 800a966:	ad25      	add	r5, sp, #148	; 0x94
 800a968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a96e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a970:	606b      	str	r3, [r5, #4]
 800a972:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a974:	4413      	add	r3, r2
 800a976:	9324      	str	r3, [sp, #144]	; 0x90
 800a978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a97a:	3301      	adds	r3, #1
 800a97c:	2b07      	cmp	r3, #7
 800a97e:	9323      	str	r3, [sp, #140]	; 0x8c
 800a980:	dc32      	bgt.n	800a9e8 <_vfprintf_r+0x12e8>
 800a982:	3508      	adds	r5, #8
 800a984:	9b05      	ldr	r3, [sp, #20]
 800a986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a98a:	1e5c      	subs	r4, r3, #1
 800a98c:	2200      	movs	r2, #0
 800a98e:	2300      	movs	r3, #0
 800a990:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800a994:	f7f6 f8a8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d12e      	bne.n	800a9fa <_vfprintf_r+0x12fa>
 800a99c:	f109 0301 	add.w	r3, r9, #1
 800a9a0:	e9c5 3400 	strd	r3, r4, [r5]
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	3701      	adds	r7, #1
 800a9a8:	3e01      	subs	r6, #1
 800a9aa:	441e      	add	r6, r3
 800a9ac:	2f07      	cmp	r7, #7
 800a9ae:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800a9b2:	dd50      	ble.n	800aa56 <_vfprintf_r+0x1356>
 800a9b4:	aa22      	add	r2, sp, #136	; 0x88
 800a9b6:	4659      	mov	r1, fp
 800a9b8:	4650      	mov	r0, sl
 800a9ba:	f000 f915 	bl	800abe8 <__sprint_r>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d16c      	bne.n	800aa9c <_vfprintf_r+0x139c>
 800a9c2:	ad25      	add	r5, sp, #148	; 0x94
 800a9c4:	ab1e      	add	r3, sp, #120	; 0x78
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9cc:	606b      	str	r3, [r5, #4]
 800a9ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a9d0:	4413      	add	r3, r2
 800a9d2:	9324      	str	r3, [sp, #144]	; 0x90
 800a9d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	2b07      	cmp	r3, #7
 800a9da:	9323      	str	r3, [sp, #140]	; 0x8c
 800a9dc:	f73f adb7 	bgt.w	800a54e <_vfprintf_r+0xe4e>
 800a9e0:	f105 0408 	add.w	r4, r5, #8
 800a9e4:	f7ff bac0 	b.w	8009f68 <_vfprintf_r+0x868>
 800a9e8:	aa22      	add	r2, sp, #136	; 0x88
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	4650      	mov	r0, sl
 800a9ee:	f000 f8fb 	bl	800abe8 <__sprint_r>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d152      	bne.n	800aa9c <_vfprintf_r+0x139c>
 800a9f6:	ad25      	add	r5, sp, #148	; 0x94
 800a9f8:	e7c4      	b.n	800a984 <_vfprintf_r+0x1284>
 800a9fa:	2c00      	cmp	r4, #0
 800a9fc:	dde2      	ble.n	800a9c4 <_vfprintf_r+0x12c4>
 800a9fe:	4e58      	ldr	r6, [pc, #352]	; (800ab60 <_vfprintf_r+0x1460>)
 800aa00:	2710      	movs	r7, #16
 800aa02:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800aa06:	2c10      	cmp	r4, #16
 800aa08:	f103 0301 	add.w	r3, r3, #1
 800aa0c:	f105 0108 	add.w	r1, r5, #8
 800aa10:	602e      	str	r6, [r5, #0]
 800aa12:	dc07      	bgt.n	800aa24 <_vfprintf_r+0x1324>
 800aa14:	606c      	str	r4, [r5, #4]
 800aa16:	2b07      	cmp	r3, #7
 800aa18:	4414      	add	r4, r2
 800aa1a:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800aa1e:	dcc9      	bgt.n	800a9b4 <_vfprintf_r+0x12b4>
 800aa20:	460d      	mov	r5, r1
 800aa22:	e7cf      	b.n	800a9c4 <_vfprintf_r+0x12c4>
 800aa24:	3210      	adds	r2, #16
 800aa26:	2b07      	cmp	r3, #7
 800aa28:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800aa2c:	606f      	str	r7, [r5, #4]
 800aa2e:	dd06      	ble.n	800aa3e <_vfprintf_r+0x133e>
 800aa30:	aa22      	add	r2, sp, #136	; 0x88
 800aa32:	4659      	mov	r1, fp
 800aa34:	4650      	mov	r0, sl
 800aa36:	f000 f8d7 	bl	800abe8 <__sprint_r>
 800aa3a:	bb78      	cbnz	r0, 800aa9c <_vfprintf_r+0x139c>
 800aa3c:	a925      	add	r1, sp, #148	; 0x94
 800aa3e:	3c10      	subs	r4, #16
 800aa40:	460d      	mov	r5, r1
 800aa42:	e7de      	b.n	800aa02 <_vfprintf_r+0x1302>
 800aa44:	2201      	movs	r2, #1
 800aa46:	2b07      	cmp	r3, #7
 800aa48:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800aa4c:	f8c4 9000 	str.w	r9, [r4]
 800aa50:	6062      	str	r2, [r4, #4]
 800aa52:	ddb7      	ble.n	800a9c4 <_vfprintf_r+0x12c4>
 800aa54:	e7ae      	b.n	800a9b4 <_vfprintf_r+0x12b4>
 800aa56:	3508      	adds	r5, #8
 800aa58:	e7b4      	b.n	800a9c4 <_vfprintf_r+0x12c4>
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	f7ff ba84 	b.w	8009f68 <_vfprintf_r+0x868>
 800aa60:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800aa64:	1a9d      	subs	r5, r3, r2
 800aa66:	2d00      	cmp	r5, #0
 800aa68:	f77f aa82 	ble.w	8009f70 <_vfprintf_r+0x870>
 800aa6c:	4e3d      	ldr	r6, [pc, #244]	; (800ab64 <_vfprintf_r+0x1464>)
 800aa6e:	2710      	movs	r7, #16
 800aa70:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800aa74:	2d10      	cmp	r5, #16
 800aa76:	f103 0301 	add.w	r3, r3, #1
 800aa7a:	6026      	str	r6, [r4, #0]
 800aa7c:	dc18      	bgt.n	800aab0 <_vfprintf_r+0x13b0>
 800aa7e:	6065      	str	r5, [r4, #4]
 800aa80:	2b07      	cmp	r3, #7
 800aa82:	4415      	add	r5, r2
 800aa84:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800aa88:	f77f aa72 	ble.w	8009f70 <_vfprintf_r+0x870>
 800aa8c:	aa22      	add	r2, sp, #136	; 0x88
 800aa8e:	4659      	mov	r1, fp
 800aa90:	4650      	mov	r0, sl
 800aa92:	f000 f8a9 	bl	800abe8 <__sprint_r>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f43f aa6a 	beq.w	8009f70 <_vfprintf_r+0x870>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f43f a87f 	beq.w	8009ba2 <_vfprintf_r+0x4a2>
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	f7fd f932 	bl	8007d10 <_free_r>
 800aaac:	f7ff b879 	b.w	8009ba2 <_vfprintf_r+0x4a2>
 800aab0:	3210      	adds	r2, #16
 800aab2:	2b07      	cmp	r3, #7
 800aab4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800aab8:	6067      	str	r7, [r4, #4]
 800aaba:	dc02      	bgt.n	800aac2 <_vfprintf_r+0x13c2>
 800aabc:	3408      	adds	r4, #8
 800aabe:	3d10      	subs	r5, #16
 800aac0:	e7d6      	b.n	800aa70 <_vfprintf_r+0x1370>
 800aac2:	aa22      	add	r2, sp, #136	; 0x88
 800aac4:	4659      	mov	r1, fp
 800aac6:	4650      	mov	r0, sl
 800aac8:	f000 f88e 	bl	800abe8 <__sprint_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	d1e5      	bne.n	800aa9c <_vfprintf_r+0x139c>
 800aad0:	ac25      	add	r4, sp, #148	; 0x94
 800aad2:	e7f4      	b.n	800aabe <_vfprintf_r+0x13be>
 800aad4:	9903      	ldr	r1, [sp, #12]
 800aad6:	4650      	mov	r0, sl
 800aad8:	f7fd f91a 	bl	8007d10 <_free_r>
 800aadc:	f7ff ba60 	b.w	8009fa0 <_vfprintf_r+0x8a0>
 800aae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aae2:	b91b      	cbnz	r3, 800aaec <_vfprintf_r+0x13ec>
 800aae4:	2300      	movs	r3, #0
 800aae6:	9323      	str	r3, [sp, #140]	; 0x8c
 800aae8:	f7ff b85b 	b.w	8009ba2 <_vfprintf_r+0x4a2>
 800aaec:	aa22      	add	r2, sp, #136	; 0x88
 800aaee:	4659      	mov	r1, fp
 800aaf0:	4650      	mov	r0, sl
 800aaf2:	f000 f879 	bl	800abe8 <__sprint_r>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0f4      	beq.n	800aae4 <_vfprintf_r+0x13e4>
 800aafa:	f7ff b852 	b.w	8009ba2 <_vfprintf_r+0x4a2>
 800aafe:	ea55 0206 	orrs.w	r2, r5, r6
 800ab02:	4647      	mov	r7, r8
 800ab04:	f43f ab78 	beq.w	800a1f8 <_vfprintf_r+0xaf8>
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f43f ac14 	beq.w	800a336 <_vfprintf_r+0xc36>
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	f50d 799c 	add.w	r9, sp, #312	; 0x138
 800ab14:	f43f ac56 	beq.w	800a3c4 <_vfprintf_r+0xcc4>
 800ab18:	f005 0307 	and.w	r3, r5, #7
 800ab1c:	08ed      	lsrs	r5, r5, #3
 800ab1e:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800ab22:	08f6      	lsrs	r6, r6, #3
 800ab24:	3330      	adds	r3, #48	; 0x30
 800ab26:	ea55 0106 	orrs.w	r1, r5, r6
 800ab2a:	464a      	mov	r2, r9
 800ab2c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800ab30:	d1f2      	bne.n	800ab18 <_vfprintf_r+0x1418>
 800ab32:	07f8      	lsls	r0, r7, #31
 800ab34:	d506      	bpl.n	800ab44 <_vfprintf_r+0x1444>
 800ab36:	2b30      	cmp	r3, #48	; 0x30
 800ab38:	d004      	beq.n	800ab44 <_vfprintf_r+0x1444>
 800ab3a:	2330      	movs	r3, #48	; 0x30
 800ab3c:	f809 3c01 	strb.w	r3, [r9, #-1]
 800ab40:	f1a2 0902 	sub.w	r9, r2, #2
 800ab44:	ab4e      	add	r3, sp, #312	; 0x138
 800ab46:	eba3 0309 	sub.w	r3, r3, r9
 800ab4a:	9e04      	ldr	r6, [sp, #16]
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	46b8      	mov	r8, r7
 800ab52:	9303      	str	r3, [sp, #12]
 800ab54:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800ab58:	461d      	mov	r5, r3
 800ab5a:	f7ff b94b 	b.w	8009df4 <_vfprintf_r+0x6f4>
 800ab5e:	bf00      	nop
 800ab60:	08011918 	.word	0x08011918
 800ab64:	08011908 	.word	0x08011908

0800ab68 <__sbprintf>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	8989      	ldrh	r1, [r1, #12]
 800ab6e:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800ab72:	f021 0102 	bic.w	r1, r1, #2
 800ab76:	f8ad 1014 	strh.w	r1, [sp, #20]
 800ab7a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ab7c:	911b      	str	r1, [sp, #108]	; 0x6c
 800ab7e:	89e1      	ldrh	r1, [r4, #14]
 800ab80:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ab84:	69e1      	ldr	r1, [r4, #28]
 800ab86:	9109      	str	r1, [sp, #36]	; 0x24
 800ab88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ab8a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ab8c:	a91c      	add	r1, sp, #112	; 0x70
 800ab8e:	9102      	str	r1, [sp, #8]
 800ab90:	9106      	str	r1, [sp, #24]
 800ab92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab96:	4606      	mov	r6, r0
 800ab98:	9104      	str	r1, [sp, #16]
 800ab9a:	9107      	str	r1, [sp, #28]
 800ab9c:	a818      	add	r0, sp, #96	; 0x60
 800ab9e:	2100      	movs	r1, #0
 800aba0:	e9cd 3200 	strd	r3, r2, [sp]
 800aba4:	9108      	str	r1, [sp, #32]
 800aba6:	f7fd f84b 	bl	8007c40 <__retarget_lock_init_recursive>
 800abaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abae:	a902      	add	r1, sp, #8
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7fe fda5 	bl	8009700 <_vfprintf_r>
 800abb6:	1e05      	subs	r5, r0, #0
 800abb8:	db07      	blt.n	800abca <__sbprintf+0x62>
 800abba:	a902      	add	r1, sp, #8
 800abbc:	4630      	mov	r0, r6
 800abbe:	f001 ffd5 	bl	800cb6c <_fflush_r>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	bf18      	it	ne
 800abc6:	f04f 35ff 	movne.w	r5, #4294967295
 800abca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800abce:	9818      	ldr	r0, [sp, #96]	; 0x60
 800abd0:	065b      	lsls	r3, r3, #25
 800abd2:	bf42      	ittt	mi
 800abd4:	89a3      	ldrhmi	r3, [r4, #12]
 800abd6:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800abda:	81a3      	strhmi	r3, [r4, #12]
 800abdc:	f7fd f831 	bl	8007c42 <__retarget_lock_close_recursive>
 800abe0:	4628      	mov	r0, r5
 800abe2:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <__sprint_r>:
 800abe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	6893      	ldr	r3, [r2, #8]
 800abee:	4680      	mov	r8, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	4614      	mov	r4, r2
 800abf4:	b343      	cbz	r3, 800ac48 <__sprint_r+0x60>
 800abf6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800abf8:	049d      	lsls	r5, r3, #18
 800abfa:	d522      	bpl.n	800ac42 <__sprint_r+0x5a>
 800abfc:	6815      	ldr	r5, [r2, #0]
 800abfe:	3508      	adds	r5, #8
 800ac00:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800ac04:	f04f 0900 	mov.w	r9, #0
 800ac08:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800ac0c:	45ca      	cmp	sl, r9
 800ac0e:	dc0d      	bgt.n	800ac2c <__sprint_r+0x44>
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	f026 0603 	bic.w	r6, r6, #3
 800ac16:	1b98      	subs	r0, r3, r6
 800ac18:	60a0      	str	r0, [r4, #8]
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d1ef      	bne.n	800ac00 <__sprint_r+0x18>
 800ac20:	2300      	movs	r3, #0
 800ac22:	60a3      	str	r3, [r4, #8]
 800ac24:	2300      	movs	r3, #0
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800ac30:	463a      	mov	r2, r7
 800ac32:	4640      	mov	r0, r8
 800ac34:	f002 fbbf 	bl	800d3b6 <_fputwc_r>
 800ac38:	1c43      	adds	r3, r0, #1
 800ac3a:	d0f1      	beq.n	800ac20 <__sprint_r+0x38>
 800ac3c:	f109 0901 	add.w	r9, r9, #1
 800ac40:	e7e4      	b.n	800ac0c <__sprint_r+0x24>
 800ac42:	f002 f81f 	bl	800cc84 <__sfvwrite_r>
 800ac46:	e7eb      	b.n	800ac20 <__sprint_r+0x38>
 800ac48:	4618      	mov	r0, r3
 800ac4a:	e7eb      	b.n	800ac24 <__sprint_r+0x3c>

0800ac4c <_vfiprintf_r>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	ed2d 8b02 	vpush	{d8}
 800ac54:	b0bb      	sub	sp, #236	; 0xec
 800ac56:	460f      	mov	r7, r1
 800ac58:	9201      	str	r2, [sp, #4]
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	461c      	mov	r4, r3
 800ac5e:	4681      	mov	r9, r0
 800ac60:	b118      	cbz	r0, 800ac6a <_vfiprintf_r+0x1e>
 800ac62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac64:	b90b      	cbnz	r3, 800ac6a <_vfiprintf_r+0x1e>
 800ac66:	f7fc fe53 	bl	8007910 <__sinit>
 800ac6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac6c:	07d8      	lsls	r0, r3, #31
 800ac6e:	d405      	bmi.n	800ac7c <_vfiprintf_r+0x30>
 800ac70:	89bb      	ldrh	r3, [r7, #12]
 800ac72:	0599      	lsls	r1, r3, #22
 800ac74:	d402      	bmi.n	800ac7c <_vfiprintf_r+0x30>
 800ac76:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ac78:	f7fc ffe4 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800ac7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac80:	049a      	lsls	r2, r3, #18
 800ac82:	d406      	bmi.n	800ac92 <_vfiprintf_r+0x46>
 800ac84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac88:	81bb      	strh	r3, [r7, #12]
 800ac8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac90:	667b      	str	r3, [r7, #100]	; 0x64
 800ac92:	89bb      	ldrh	r3, [r7, #12]
 800ac94:	071e      	lsls	r6, r3, #28
 800ac96:	d501      	bpl.n	800ac9c <_vfiprintf_r+0x50>
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	b9bb      	cbnz	r3, 800accc <_vfiprintf_r+0x80>
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	4648      	mov	r0, r9
 800aca0:	f002 faf0 	bl	800d284 <__swsetup_r>
 800aca4:	b190      	cbz	r0, 800accc <_vfiprintf_r+0x80>
 800aca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aca8:	07d8      	lsls	r0, r3, #31
 800acaa:	d508      	bpl.n	800acbe <_vfiprintf_r+0x72>
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	9302      	str	r3, [sp, #8]
 800acb2:	9802      	ldr	r0, [sp, #8]
 800acb4:	b03b      	add	sp, #236	; 0xec
 800acb6:	ecbd 8b02 	vpop	{d8}
 800acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbe:	89bb      	ldrh	r3, [r7, #12]
 800acc0:	0599      	lsls	r1, r3, #22
 800acc2:	d4f3      	bmi.n	800acac <_vfiprintf_r+0x60>
 800acc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800acc6:	f7fc ffbe 	bl	8007c46 <__retarget_lock_release_recursive>
 800acca:	e7ef      	b.n	800acac <_vfiprintf_r+0x60>
 800accc:	89bb      	ldrh	r3, [r7, #12]
 800acce:	f003 021a 	and.w	r2, r3, #26
 800acd2:	2a0a      	cmp	r2, #10
 800acd4:	d116      	bne.n	800ad04 <_vfiprintf_r+0xb8>
 800acd6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800acda:	2a00      	cmp	r2, #0
 800acdc:	db12      	blt.n	800ad04 <_vfiprintf_r+0xb8>
 800acde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ace0:	07d2      	lsls	r2, r2, #31
 800ace2:	d404      	bmi.n	800acee <_vfiprintf_r+0xa2>
 800ace4:	059e      	lsls	r6, r3, #22
 800ace6:	d402      	bmi.n	800acee <_vfiprintf_r+0xa2>
 800ace8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800acea:	f7fc ffac 	bl	8007c46 <__retarget_lock_release_recursive>
 800acee:	9a01      	ldr	r2, [sp, #4]
 800acf0:	462b      	mov	r3, r5
 800acf2:	4639      	mov	r1, r7
 800acf4:	4648      	mov	r0, r9
 800acf6:	b03b      	add	sp, #236	; 0xec
 800acf8:	ecbd 8b02 	vpop	{d8}
 800acfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	f000 bc36 	b.w	800b570 <__sbprintf>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800ad0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800ad0e:	ae11      	add	r6, sp, #68	; 0x44
 800ad10:	ee08 3a10 	vmov	s16, r3
 800ad14:	960e      	str	r6, [sp, #56]	; 0x38
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	9302      	str	r3, [sp, #8]
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	461d      	mov	r5, r3
 800ad1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad22:	b10a      	cbz	r2, 800ad28 <_vfiprintf_r+0xdc>
 800ad24:	2a25      	cmp	r2, #37	; 0x25
 800ad26:	d1f9      	bne.n	800ad1c <_vfiprintf_r+0xd0>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	ebb5 0803 	subs.w	r8, r5, r3
 800ad2e:	d00d      	beq.n	800ad4c <_vfiprintf_r+0x100>
 800ad30:	e9c6 3800 	strd	r3, r8, [r6]
 800ad34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad36:	4443      	add	r3, r8
 800ad38:	9310      	str	r3, [sp, #64]	; 0x40
 800ad3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	2b07      	cmp	r3, #7
 800ad40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad42:	dc76      	bgt.n	800ae32 <_vfiprintf_r+0x1e6>
 800ad44:	3608      	adds	r6, #8
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	4443      	add	r3, r8
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	782b      	ldrb	r3, [r5, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f000 83d0 	beq.w	800b4f4 <_vfiprintf_r+0x8a8>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5a:	3501      	adds	r5, #1
 800ad5c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ad60:	9200      	str	r2, [sp, #0]
 800ad62:	9303      	str	r3, [sp, #12]
 800ad64:	469a      	mov	sl, r3
 800ad66:	462a      	mov	r2, r5
 800ad68:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ad6c:	9201      	str	r2, [sp, #4]
 800ad6e:	f1a3 0220 	sub.w	r2, r3, #32
 800ad72:	2a5a      	cmp	r2, #90	; 0x5a
 800ad74:	f200 831c 	bhi.w	800b3b0 <_vfiprintf_r+0x764>
 800ad78:	e8df f012 	tbh	[pc, r2, lsl #1]
 800ad7c:	031a007e 	.word	0x031a007e
 800ad80:	0086031a 	.word	0x0086031a
 800ad84:	031a031a 	.word	0x031a031a
 800ad88:	0065031a 	.word	0x0065031a
 800ad8c:	031a031a 	.word	0x031a031a
 800ad90:	00930089 	.word	0x00930089
 800ad94:	0090031a 	.word	0x0090031a
 800ad98:	031a0095 	.word	0x031a0095
 800ad9c:	00b300b0 	.word	0x00b300b0
 800ada0:	00b300b3 	.word	0x00b300b3
 800ada4:	00b300b3 	.word	0x00b300b3
 800ada8:	00b300b3 	.word	0x00b300b3
 800adac:	00b300b3 	.word	0x00b300b3
 800adb0:	031a031a 	.word	0x031a031a
 800adb4:	031a031a 	.word	0x031a031a
 800adb8:	031a031a 	.word	0x031a031a
 800adbc:	031a031a 	.word	0x031a031a
 800adc0:	00dd031a 	.word	0x00dd031a
 800adc4:	031a00eb 	.word	0x031a00eb
 800adc8:	031a031a 	.word	0x031a031a
 800adcc:	031a031a 	.word	0x031a031a
 800add0:	031a031a 	.word	0x031a031a
 800add4:	031a031a 	.word	0x031a031a
 800add8:	013b031a 	.word	0x013b031a
 800addc:	031a031a 	.word	0x031a031a
 800ade0:	0180031a 	.word	0x0180031a
 800ade4:	025e031a 	.word	0x025e031a
 800ade8:	031a031a 	.word	0x031a031a
 800adec:	031a027e 	.word	0x031a027e
 800adf0:	031a031a 	.word	0x031a031a
 800adf4:	031a031a 	.word	0x031a031a
 800adf8:	031a031a 	.word	0x031a031a
 800adfc:	031a031a 	.word	0x031a031a
 800ae00:	00dd031a 	.word	0x00dd031a
 800ae04:	031a00ed 	.word	0x031a00ed
 800ae08:	031a031a 	.word	0x031a031a
 800ae0c:	00ed00c3 	.word	0x00ed00c3
 800ae10:	031a00d7 	.word	0x031a00d7
 800ae14:	031a00d0 	.word	0x031a00d0
 800ae18:	013d0119 	.word	0x013d0119
 800ae1c:	00d70172 	.word	0x00d70172
 800ae20:	0180031a 	.word	0x0180031a
 800ae24:	0260007c 	.word	0x0260007c
 800ae28:	031a031a 	.word	0x031a031a
 800ae2c:	031a029a 	.word	0x031a029a
 800ae30:	007c      	.short	0x007c
 800ae32:	aa0e      	add	r2, sp, #56	; 0x38
 800ae34:	4639      	mov	r1, r7
 800ae36:	4648      	mov	r0, r9
 800ae38:	f7ff fed6 	bl	800abe8 <__sprint_r>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f040 8338 	bne.w	800b4b2 <_vfiprintf_r+0x866>
 800ae42:	ae11      	add	r6, sp, #68	; 0x44
 800ae44:	e77f      	b.n	800ad46 <_vfiprintf_r+0xfa>
 800ae46:	4648      	mov	r0, r9
 800ae48:	f002 fb12 	bl	800d470 <_localeconv_r>
 800ae4c:	6843      	ldr	r3, [r0, #4]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	ee08 3a10 	vmov	s16, r3
 800ae54:	f7f5 f9c6 	bl	80001e4 <strlen>
 800ae58:	9007      	str	r0, [sp, #28]
 800ae5a:	4648      	mov	r0, r9
 800ae5c:	f002 fb08 	bl	800d470 <_localeconv_r>
 800ae60:	6883      	ldr	r3, [r0, #8]
 800ae62:	9306      	str	r3, [sp, #24]
 800ae64:	9b07      	ldr	r3, [sp, #28]
 800ae66:	b12b      	cbz	r3, 800ae74 <_vfiprintf_r+0x228>
 800ae68:	9b06      	ldr	r3, [sp, #24]
 800ae6a:	b11b      	cbz	r3, 800ae74 <_vfiprintf_r+0x228>
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b10b      	cbz	r3, 800ae74 <_vfiprintf_r+0x228>
 800ae70:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800ae74:	9d01      	ldr	r5, [sp, #4]
 800ae76:	e776      	b.n	800ad66 <_vfiprintf_r+0x11a>
 800ae78:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1f9      	bne.n	800ae74 <_vfiprintf_r+0x228>
 800ae80:	2320      	movs	r3, #32
 800ae82:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ae86:	e7f5      	b.n	800ae74 <_vfiprintf_r+0x228>
 800ae88:	f04a 0a01 	orr.w	sl, sl, #1
 800ae8c:	e7f2      	b.n	800ae74 <_vfiprintf_r+0x228>
 800ae8e:	f854 3b04 	ldr.w	r3, [r4], #4
 800ae92:	9303      	str	r3, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	daed      	bge.n	800ae74 <_vfiprintf_r+0x228>
 800ae98:	425b      	negs	r3, r3
 800ae9a:	9303      	str	r3, [sp, #12]
 800ae9c:	f04a 0a04 	orr.w	sl, sl, #4
 800aea0:	e7e8      	b.n	800ae74 <_vfiprintf_r+0x228>
 800aea2:	232b      	movs	r3, #43	; 0x2b
 800aea4:	e7ed      	b.n	800ae82 <_vfiprintf_r+0x236>
 800aea6:	9a01      	ldr	r2, [sp, #4]
 800aea8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aeac:	2b2a      	cmp	r3, #42	; 0x2a
 800aeae:	d112      	bne.n	800aed6 <_vfiprintf_r+0x28a>
 800aeb0:	f854 3b04 	ldr.w	r3, [r4], #4
 800aeb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aeb8:	e9cd 3200 	strd	r3, r2, [sp]
 800aebc:	e7da      	b.n	800ae74 <_vfiprintf_r+0x228>
 800aebe:	9b00      	ldr	r3, [sp, #0]
 800aec0:	200a      	movs	r0, #10
 800aec2:	fb00 1303 	mla	r3, r0, r3, r1
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aecc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aed0:	2909      	cmp	r1, #9
 800aed2:	d9f4      	bls.n	800aebe <_vfiprintf_r+0x272>
 800aed4:	e74a      	b.n	800ad6c <_vfiprintf_r+0x120>
 800aed6:	2100      	movs	r1, #0
 800aed8:	9100      	str	r1, [sp, #0]
 800aeda:	e7f7      	b.n	800aecc <_vfiprintf_r+0x280>
 800aedc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800aee0:	e7c8      	b.n	800ae74 <_vfiprintf_r+0x228>
 800aee2:	2100      	movs	r1, #0
 800aee4:	9a01      	ldr	r2, [sp, #4]
 800aee6:	9103      	str	r1, [sp, #12]
 800aee8:	9903      	ldr	r1, [sp, #12]
 800aeea:	3b30      	subs	r3, #48	; 0x30
 800aeec:	200a      	movs	r0, #10
 800aeee:	fb00 3301 	mla	r3, r0, r1, r3
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800aef8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aefc:	2909      	cmp	r1, #9
 800aefe:	d9f3      	bls.n	800aee8 <_vfiprintf_r+0x29c>
 800af00:	e734      	b.n	800ad6c <_vfiprintf_r+0x120>
 800af02:	9b01      	ldr	r3, [sp, #4]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b68      	cmp	r3, #104	; 0x68
 800af08:	bf01      	itttt	eq
 800af0a:	9b01      	ldreq	r3, [sp, #4]
 800af0c:	3301      	addeq	r3, #1
 800af0e:	9301      	streq	r3, [sp, #4]
 800af10:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800af14:	bf18      	it	ne
 800af16:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800af1a:	e7ab      	b.n	800ae74 <_vfiprintf_r+0x228>
 800af1c:	9b01      	ldr	r3, [sp, #4]
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	2b6c      	cmp	r3, #108	; 0x6c
 800af22:	d105      	bne.n	800af30 <_vfiprintf_r+0x2e4>
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	3301      	adds	r3, #1
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	f04a 0a20 	orr.w	sl, sl, #32
 800af2e:	e7a1      	b.n	800ae74 <_vfiprintf_r+0x228>
 800af30:	f04a 0a10 	orr.w	sl, sl, #16
 800af34:	e79e      	b.n	800ae74 <_vfiprintf_r+0x228>
 800af36:	46a0      	mov	r8, r4
 800af38:	f858 3b04 	ldr.w	r3, [r8], #4
 800af3c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800af40:	2300      	movs	r3, #0
 800af42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800af46:	2201      	movs	r2, #1
 800af48:	9200      	str	r2, [sp, #0]
 800af4a:	461d      	mov	r5, r3
 800af4c:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800af50:	e0a9      	b.n	800b0a6 <_vfiprintf_r+0x45a>
 800af52:	f04a 0a10 	orr.w	sl, sl, #16
 800af56:	f01a 0f20 	tst.w	sl, #32
 800af5a:	d011      	beq.n	800af80 <_vfiprintf_r+0x334>
 800af5c:	3407      	adds	r4, #7
 800af5e:	f024 0307 	bic.w	r3, r4, #7
 800af62:	4698      	mov	r8, r3
 800af64:	685d      	ldr	r5, [r3, #4]
 800af66:	f858 4b08 	ldr.w	r4, [r8], #8
 800af6a:	2d00      	cmp	r5, #0
 800af6c:	da06      	bge.n	800af7c <_vfiprintf_r+0x330>
 800af6e:	4264      	negs	r4, r4
 800af70:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800af74:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800af78:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800af7c:	2301      	movs	r3, #1
 800af7e:	e04a      	b.n	800b016 <_vfiprintf_r+0x3ca>
 800af80:	46a0      	mov	r8, r4
 800af82:	f01a 0f10 	tst.w	sl, #16
 800af86:	f858 5b04 	ldr.w	r5, [r8], #4
 800af8a:	d002      	beq.n	800af92 <_vfiprintf_r+0x346>
 800af8c:	462c      	mov	r4, r5
 800af8e:	17ed      	asrs	r5, r5, #31
 800af90:	e7eb      	b.n	800af6a <_vfiprintf_r+0x31e>
 800af92:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800af96:	d003      	beq.n	800afa0 <_vfiprintf_r+0x354>
 800af98:	b22c      	sxth	r4, r5
 800af9a:	f345 35c0 	sbfx	r5, r5, #15, #1
 800af9e:	e7e4      	b.n	800af6a <_vfiprintf_r+0x31e>
 800afa0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800afa4:	d0f2      	beq.n	800af8c <_vfiprintf_r+0x340>
 800afa6:	b26c      	sxtb	r4, r5
 800afa8:	f345 15c0 	sbfx	r5, r5, #7, #1
 800afac:	e7dd      	b.n	800af6a <_vfiprintf_r+0x31e>
 800afae:	f01a 0f20 	tst.w	sl, #32
 800afb2:	f104 0804 	add.w	r8, r4, #4
 800afb6:	d007      	beq.n	800afc8 <_vfiprintf_r+0x37c>
 800afb8:	9a02      	ldr	r2, [sp, #8]
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	9902      	ldr	r1, [sp, #8]
 800afbe:	17d2      	asrs	r2, r2, #31
 800afc0:	e9c3 1200 	strd	r1, r2, [r3]
 800afc4:	4644      	mov	r4, r8
 800afc6:	e6a8      	b.n	800ad1a <_vfiprintf_r+0xce>
 800afc8:	f01a 0f10 	tst.w	sl, #16
 800afcc:	d003      	beq.n	800afd6 <_vfiprintf_r+0x38a>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	9a02      	ldr	r2, [sp, #8]
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e7f6      	b.n	800afc4 <_vfiprintf_r+0x378>
 800afd6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800afda:	d003      	beq.n	800afe4 <_vfiprintf_r+0x398>
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	9a02      	ldr	r2, [sp, #8]
 800afe0:	801a      	strh	r2, [r3, #0]
 800afe2:	e7ef      	b.n	800afc4 <_vfiprintf_r+0x378>
 800afe4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800afe8:	d0f1      	beq.n	800afce <_vfiprintf_r+0x382>
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	9a02      	ldr	r2, [sp, #8]
 800afee:	701a      	strb	r2, [r3, #0]
 800aff0:	e7e8      	b.n	800afc4 <_vfiprintf_r+0x378>
 800aff2:	f04a 0a10 	orr.w	sl, sl, #16
 800aff6:	f01a 0320 	ands.w	r3, sl, #32
 800affa:	d01f      	beq.n	800b03c <_vfiprintf_r+0x3f0>
 800affc:	3407      	adds	r4, #7
 800affe:	f024 0307 	bic.w	r3, r4, #7
 800b002:	4698      	mov	r8, r3
 800b004:	685d      	ldr	r5, [r3, #4]
 800b006:	f858 4b08 	ldr.w	r4, [r8], #8
 800b00a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b00e:	2300      	movs	r3, #0
 800b010:	2200      	movs	r2, #0
 800b012:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800b016:	9a00      	ldr	r2, [sp, #0]
 800b018:	3201      	adds	r2, #1
 800b01a:	f000 8278 	beq.w	800b50e <_vfiprintf_r+0x8c2>
 800b01e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800b022:	9204      	str	r2, [sp, #16]
 800b024:	ea54 0205 	orrs.w	r2, r4, r5
 800b028:	f040 8277 	bne.w	800b51a <_vfiprintf_r+0x8ce>
 800b02c:	9a00      	ldr	r2, [sp, #0]
 800b02e:	2a00      	cmp	r2, #0
 800b030:	f000 81b3 	beq.w	800b39a <_vfiprintf_r+0x74e>
 800b034:	2b01      	cmp	r3, #1
 800b036:	f040 8273 	bne.w	800b520 <_vfiprintf_r+0x8d4>
 800b03a:	e151      	b.n	800b2e0 <_vfiprintf_r+0x694>
 800b03c:	46a0      	mov	r8, r4
 800b03e:	f01a 0510 	ands.w	r5, sl, #16
 800b042:	f858 4b04 	ldr.w	r4, [r8], #4
 800b046:	d001      	beq.n	800b04c <_vfiprintf_r+0x400>
 800b048:	461d      	mov	r5, r3
 800b04a:	e7de      	b.n	800b00a <_vfiprintf_r+0x3be>
 800b04c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b050:	d001      	beq.n	800b056 <_vfiprintf_r+0x40a>
 800b052:	b2a4      	uxth	r4, r4
 800b054:	e7d9      	b.n	800b00a <_vfiprintf_r+0x3be>
 800b056:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b05a:	d0d6      	beq.n	800b00a <_vfiprintf_r+0x3be>
 800b05c:	b2e4      	uxtb	r4, r4
 800b05e:	e7f3      	b.n	800b048 <_vfiprintf_r+0x3fc>
 800b060:	46a0      	mov	r8, r4
 800b062:	f647 0330 	movw	r3, #30768	; 0x7830
 800b066:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800b06a:	f858 4b04 	ldr.w	r4, [r8], #4
 800b06e:	4b9f      	ldr	r3, [pc, #636]	; (800b2ec <_vfiprintf_r+0x6a0>)
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	2500      	movs	r5, #0
 800b074:	f04a 0a02 	orr.w	sl, sl, #2
 800b078:	2302      	movs	r3, #2
 800b07a:	e7c9      	b.n	800b010 <_vfiprintf_r+0x3c4>
 800b07c:	9b00      	ldr	r3, [sp, #0]
 800b07e:	46a0      	mov	r8, r4
 800b080:	2500      	movs	r5, #0
 800b082:	1c5c      	adds	r4, r3, #1
 800b084:	f858 bb04 	ldr.w	fp, [r8], #4
 800b088:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800b08c:	f000 80cf 	beq.w	800b22e <_vfiprintf_r+0x5e2>
 800b090:	461a      	mov	r2, r3
 800b092:	4629      	mov	r1, r5
 800b094:	4658      	mov	r0, fp
 800b096:	f7f5 f8b3 	bl	8000200 <memchr>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	f000 8192 	beq.w	800b3c4 <_vfiprintf_r+0x778>
 800b0a0:	eba0 030b 	sub.w	r3, r0, fp
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800b0ac:	42ab      	cmp	r3, r5
 800b0ae:	bfb8      	it	lt
 800b0b0:	462b      	movlt	r3, r5
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	b10a      	cbz	r2, 800b0ba <_vfiprintf_r+0x46e>
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	9304      	str	r3, [sp, #16]
 800b0ba:	f01a 0302 	ands.w	r3, sl, #2
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	bf1e      	ittt	ne
 800b0c2:	9b04      	ldrne	r3, [sp, #16]
 800b0c4:	3302      	addne	r3, #2
 800b0c6:	9304      	strne	r3, [sp, #16]
 800b0c8:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800b0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ce:	d11f      	bne.n	800b110 <_vfiprintf_r+0x4c4>
 800b0d0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b0d4:	1a9c      	subs	r4, r3, r2
 800b0d6:	2c00      	cmp	r4, #0
 800b0d8:	dd1a      	ble.n	800b110 <_vfiprintf_r+0x4c4>
 800b0da:	4b85      	ldr	r3, [pc, #532]	; (800b2f0 <_vfiprintf_r+0x6a4>)
 800b0dc:	6033      	str	r3, [r6, #0]
 800b0de:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b0e2:	2c10      	cmp	r4, #16
 800b0e4:	f102 0201 	add.w	r2, r2, #1
 800b0e8:	f106 0008 	add.w	r0, r6, #8
 800b0ec:	f300 816c 	bgt.w	800b3c8 <_vfiprintf_r+0x77c>
 800b0f0:	6074      	str	r4, [r6, #4]
 800b0f2:	2a07      	cmp	r2, #7
 800b0f4:	4464      	add	r4, ip
 800b0f6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b0fa:	f340 8178 	ble.w	800b3ee <_vfiprintf_r+0x7a2>
 800b0fe:	aa0e      	add	r2, sp, #56	; 0x38
 800b100:	4639      	mov	r1, r7
 800b102:	4648      	mov	r0, r9
 800b104:	f7ff fd70 	bl	800abe8 <__sprint_r>
 800b108:	2800      	cmp	r0, #0
 800b10a:	f040 81d2 	bne.w	800b4b2 <_vfiprintf_r+0x866>
 800b10e:	ae11      	add	r6, sp, #68	; 0x44
 800b110:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800b114:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b118:	b160      	cbz	r0, 800b134 <_vfiprintf_r+0x4e8>
 800b11a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800b11e:	3201      	adds	r2, #1
 800b120:	6030      	str	r0, [r6, #0]
 800b122:	2001      	movs	r0, #1
 800b124:	4401      	add	r1, r0
 800b126:	2a07      	cmp	r2, #7
 800b128:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b12c:	6070      	str	r0, [r6, #4]
 800b12e:	f300 8160 	bgt.w	800b3f2 <_vfiprintf_r+0x7a6>
 800b132:	3608      	adds	r6, #8
 800b134:	9b08      	ldr	r3, [sp, #32]
 800b136:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b13a:	b15b      	cbz	r3, 800b154 <_vfiprintf_r+0x508>
 800b13c:	a80d      	add	r0, sp, #52	; 0x34
 800b13e:	3201      	adds	r2, #1
 800b140:	6030      	str	r0, [r6, #0]
 800b142:	2002      	movs	r0, #2
 800b144:	4401      	add	r1, r0
 800b146:	2a07      	cmp	r2, #7
 800b148:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b14c:	6070      	str	r0, [r6, #4]
 800b14e:	f300 8159 	bgt.w	800b404 <_vfiprintf_r+0x7b8>
 800b152:	3608      	adds	r6, #8
 800b154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b156:	2b80      	cmp	r3, #128	; 0x80
 800b158:	d11f      	bne.n	800b19a <_vfiprintf_r+0x54e>
 800b15a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b15e:	1a9c      	subs	r4, r3, r2
 800b160:	2c00      	cmp	r4, #0
 800b162:	dd1a      	ble.n	800b19a <_vfiprintf_r+0x54e>
 800b164:	4b63      	ldr	r3, [pc, #396]	; (800b2f4 <_vfiprintf_r+0x6a8>)
 800b166:	6033      	str	r3, [r6, #0]
 800b168:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b16c:	2c10      	cmp	r4, #16
 800b16e:	f102 0201 	add.w	r2, r2, #1
 800b172:	f106 0008 	add.w	r0, r6, #8
 800b176:	f300 814e 	bgt.w	800b416 <_vfiprintf_r+0x7ca>
 800b17a:	6074      	str	r4, [r6, #4]
 800b17c:	2a07      	cmp	r2, #7
 800b17e:	4464      	add	r4, ip
 800b180:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b184:	f340 815a 	ble.w	800b43c <_vfiprintf_r+0x7f0>
 800b188:	aa0e      	add	r2, sp, #56	; 0x38
 800b18a:	4639      	mov	r1, r7
 800b18c:	4648      	mov	r0, r9
 800b18e:	f7ff fd2b 	bl	800abe8 <__sprint_r>
 800b192:	2800      	cmp	r0, #0
 800b194:	f040 818d 	bne.w	800b4b2 <_vfiprintf_r+0x866>
 800b198:	ae11      	add	r6, sp, #68	; 0x44
 800b19a:	9b00      	ldr	r3, [sp, #0]
 800b19c:	1aec      	subs	r4, r5, r3
 800b19e:	2c00      	cmp	r4, #0
 800b1a0:	dd1b      	ble.n	800b1da <_vfiprintf_r+0x58e>
 800b1a2:	4d54      	ldr	r5, [pc, #336]	; (800b2f4 <_vfiprintf_r+0x6a8>)
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b1aa:	2c10      	cmp	r4, #16
 800b1ac:	f102 0201 	add.w	r2, r2, #1
 800b1b0:	f106 0008 	add.w	r0, r6, #8
 800b1b4:	6035      	str	r5, [r6, #0]
 800b1b6:	f300 8143 	bgt.w	800b440 <_vfiprintf_r+0x7f4>
 800b1ba:	6074      	str	r4, [r6, #4]
 800b1bc:	2a07      	cmp	r2, #7
 800b1be:	440c      	add	r4, r1
 800b1c0:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b1c4:	f340 814d 	ble.w	800b462 <_vfiprintf_r+0x816>
 800b1c8:	aa0e      	add	r2, sp, #56	; 0x38
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	4648      	mov	r0, r9
 800b1ce:	f7ff fd0b 	bl	800abe8 <__sprint_r>
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	f040 816d 	bne.w	800b4b2 <_vfiprintf_r+0x866>
 800b1d8:	ae11      	add	r6, sp, #68	; 0x44
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	9a00      	ldr	r2, [sp, #0]
 800b1de:	6073      	str	r3, [r6, #4]
 800b1e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1e2:	f8c6 b000 	str.w	fp, [r6]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	9310      	str	r3, [sp, #64]	; 0x40
 800b1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	2b07      	cmp	r3, #7
 800b1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1f2:	f300 8138 	bgt.w	800b466 <_vfiprintf_r+0x81a>
 800b1f6:	f106 0308 	add.w	r3, r6, #8
 800b1fa:	f01a 0f04 	tst.w	sl, #4
 800b1fe:	f040 813a 	bne.w	800b476 <_vfiprintf_r+0x82a>
 800b202:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b206:	9904      	ldr	r1, [sp, #16]
 800b208:	428a      	cmp	r2, r1
 800b20a:	bfac      	ite	ge
 800b20c:	189b      	addge	r3, r3, r2
 800b20e:	185b      	addlt	r3, r3, r1
 800b210:	9302      	str	r3, [sp, #8]
 800b212:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b214:	b13b      	cbz	r3, 800b226 <_vfiprintf_r+0x5da>
 800b216:	aa0e      	add	r2, sp, #56	; 0x38
 800b218:	4639      	mov	r1, r7
 800b21a:	4648      	mov	r0, r9
 800b21c:	f7ff fce4 	bl	800abe8 <__sprint_r>
 800b220:	2800      	cmp	r0, #0
 800b222:	f040 8146 	bne.w	800b4b2 <_vfiprintf_r+0x866>
 800b226:	2300      	movs	r3, #0
 800b228:	930f      	str	r3, [sp, #60]	; 0x3c
 800b22a:	ae11      	add	r6, sp, #68	; 0x44
 800b22c:	e6ca      	b.n	800afc4 <_vfiprintf_r+0x378>
 800b22e:	4658      	mov	r0, fp
 800b230:	f7f4 ffd8 	bl	80001e4 <strlen>
 800b234:	9000      	str	r0, [sp, #0]
 800b236:	e736      	b.n	800b0a6 <_vfiprintf_r+0x45a>
 800b238:	f04a 0a10 	orr.w	sl, sl, #16
 800b23c:	f01a 0320 	ands.w	r3, sl, #32
 800b240:	d008      	beq.n	800b254 <_vfiprintf_r+0x608>
 800b242:	3407      	adds	r4, #7
 800b244:	f024 0307 	bic.w	r3, r4, #7
 800b248:	4698      	mov	r8, r3
 800b24a:	685d      	ldr	r5, [r3, #4]
 800b24c:	f858 4b08 	ldr.w	r4, [r8], #8
 800b250:	2301      	movs	r3, #1
 800b252:	e6dd      	b.n	800b010 <_vfiprintf_r+0x3c4>
 800b254:	46a0      	mov	r8, r4
 800b256:	f01a 0510 	ands.w	r5, sl, #16
 800b25a:	f858 4b04 	ldr.w	r4, [r8], #4
 800b25e:	d001      	beq.n	800b264 <_vfiprintf_r+0x618>
 800b260:	461d      	mov	r5, r3
 800b262:	e7f5      	b.n	800b250 <_vfiprintf_r+0x604>
 800b264:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b268:	d001      	beq.n	800b26e <_vfiprintf_r+0x622>
 800b26a:	b2a4      	uxth	r4, r4
 800b26c:	e7f0      	b.n	800b250 <_vfiprintf_r+0x604>
 800b26e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b272:	d0ed      	beq.n	800b250 <_vfiprintf_r+0x604>
 800b274:	b2e4      	uxtb	r4, r4
 800b276:	e7f3      	b.n	800b260 <_vfiprintf_r+0x614>
 800b278:	4a1f      	ldr	r2, [pc, #124]	; (800b2f8 <_vfiprintf_r+0x6ac>)
 800b27a:	9205      	str	r2, [sp, #20]
 800b27c:	f01a 0220 	ands.w	r2, sl, #32
 800b280:	d018      	beq.n	800b2b4 <_vfiprintf_r+0x668>
 800b282:	3407      	adds	r4, #7
 800b284:	f024 0207 	bic.w	r2, r4, #7
 800b288:	4690      	mov	r8, r2
 800b28a:	6855      	ldr	r5, [r2, #4]
 800b28c:	f858 4b08 	ldr.w	r4, [r8], #8
 800b290:	f01a 0f01 	tst.w	sl, #1
 800b294:	d009      	beq.n	800b2aa <_vfiprintf_r+0x65e>
 800b296:	ea54 0205 	orrs.w	r2, r4, r5
 800b29a:	bf1f      	itttt	ne
 800b29c:	2230      	movne	r2, #48	; 0x30
 800b29e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800b2a2:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800b2a6:	f04a 0a02 	orrne.w	sl, sl, #2
 800b2aa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b2ae:	e6e3      	b.n	800b078 <_vfiprintf_r+0x42c>
 800b2b0:	4a0e      	ldr	r2, [pc, #56]	; (800b2ec <_vfiprintf_r+0x6a0>)
 800b2b2:	e7e2      	b.n	800b27a <_vfiprintf_r+0x62e>
 800b2b4:	46a0      	mov	r8, r4
 800b2b6:	f01a 0510 	ands.w	r5, sl, #16
 800b2ba:	f858 4b04 	ldr.w	r4, [r8], #4
 800b2be:	d001      	beq.n	800b2c4 <_vfiprintf_r+0x678>
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	e7e5      	b.n	800b290 <_vfiprintf_r+0x644>
 800b2c4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800b2c8:	d001      	beq.n	800b2ce <_vfiprintf_r+0x682>
 800b2ca:	b2a4      	uxth	r4, r4
 800b2cc:	e7e0      	b.n	800b290 <_vfiprintf_r+0x644>
 800b2ce:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b2d2:	d0dd      	beq.n	800b290 <_vfiprintf_r+0x644>
 800b2d4:	b2e4      	uxtb	r4, r4
 800b2d6:	e7f3      	b.n	800b2c0 <_vfiprintf_r+0x674>
 800b2d8:	2c0a      	cmp	r4, #10
 800b2da:	f175 0300 	sbcs.w	r3, r5, #0
 800b2de:	d20d      	bcs.n	800b2fc <_vfiprintf_r+0x6b0>
 800b2e0:	3430      	adds	r4, #48	; 0x30
 800b2e2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800b2e6:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800b2ea:	e135      	b.n	800b558 <_vfiprintf_r+0x90c>
 800b2ec:	080118c4 	.word	0x080118c4
 800b2f0:	08011928 	.word	0x08011928
 800b2f4:	08011938 	.word	0x08011938
 800b2f8:	080118d5 	.word	0x080118d5
 800b2fc:	ab3a      	add	r3, sp, #232	; 0xe8
 800b2fe:	9308      	str	r3, [sp, #32]
 800b300:	9b04      	ldr	r3, [sp, #16]
 800b302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b306:	f04f 0a00 	mov.w	sl, #0
 800b30a:	9309      	str	r3, [sp, #36]	; 0x24
 800b30c:	220a      	movs	r2, #10
 800b30e:	2300      	movs	r3, #0
 800b310:	4620      	mov	r0, r4
 800b312:	4629      	mov	r1, r5
 800b314:	f7f5 fcc8 	bl	8000ca8 <__aeabi_uldivmod>
 800b318:	9b08      	ldr	r3, [sp, #32]
 800b31a:	3230      	adds	r2, #48	; 0x30
 800b31c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b320:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b32a:	f10a 0a01 	add.w	sl, sl, #1
 800b32e:	b1d3      	cbz	r3, 800b366 <_vfiprintf_r+0x71a>
 800b330:	9b06      	ldr	r3, [sp, #24]
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	4552      	cmp	r2, sl
 800b336:	d116      	bne.n	800b366 <_vfiprintf_r+0x71a>
 800b338:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b33c:	d013      	beq.n	800b366 <_vfiprintf_r+0x71a>
 800b33e:	2c0a      	cmp	r4, #10
 800b340:	f175 0200 	sbcs.w	r2, r5, #0
 800b344:	d30f      	bcc.n	800b366 <_vfiprintf_r+0x71a>
 800b346:	9b07      	ldr	r3, [sp, #28]
 800b348:	ebab 0b03 	sub.w	fp, fp, r3
 800b34c:	461a      	mov	r2, r3
 800b34e:	ee18 1a10 	vmov	r1, s16
 800b352:	4658      	mov	r0, fp
 800b354:	f002 f873 	bl	800d43e <strncpy>
 800b358:	9b06      	ldr	r3, [sp, #24]
 800b35a:	785a      	ldrb	r2, [r3, #1]
 800b35c:	b16a      	cbz	r2, 800b37a <_vfiprintf_r+0x72e>
 800b35e:	3301      	adds	r3, #1
 800b360:	9306      	str	r3, [sp, #24]
 800b362:	f04f 0a00 	mov.w	sl, #0
 800b366:	2c0a      	cmp	r4, #10
 800b368:	f175 0500 	sbcs.w	r5, r5, #0
 800b36c:	f0c0 80f4 	bcc.w	800b558 <_vfiprintf_r+0x90c>
 800b370:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800b374:	f8cd b020 	str.w	fp, [sp, #32]
 800b378:	e7c8      	b.n	800b30c <_vfiprintf_r+0x6c0>
 800b37a:	4692      	mov	sl, r2
 800b37c:	e7f3      	b.n	800b366 <_vfiprintf_r+0x71a>
 800b37e:	f004 020f 	and.w	r2, r4, #15
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	0924      	lsrs	r4, r4, #4
 800b386:	5c9a      	ldrb	r2, [r3, r2]
 800b388:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800b38c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800b390:	092d      	lsrs	r5, r5, #4
 800b392:	ea54 0205 	orrs.w	r2, r4, r5
 800b396:	d1f2      	bne.n	800b37e <_vfiprintf_r+0x732>
 800b398:	e0de      	b.n	800b558 <_vfiprintf_r+0x90c>
 800b39a:	b933      	cbnz	r3, 800b3aa <_vfiprintf_r+0x75e>
 800b39c:	f01a 0f01 	tst.w	sl, #1
 800b3a0:	d003      	beq.n	800b3aa <_vfiprintf_r+0x75e>
 800b3a2:	2330      	movs	r3, #48	; 0x30
 800b3a4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800b3a8:	e79d      	b.n	800b2e6 <_vfiprintf_r+0x69a>
 800b3aa:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800b3ae:	e0d3      	b.n	800b558 <_vfiprintf_r+0x90c>
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f000 809f 	beq.w	800b4f4 <_vfiprintf_r+0x8a8>
 800b3b6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b3c0:	46a0      	mov	r8, r4
 800b3c2:	e5c0      	b.n	800af46 <_vfiprintf_r+0x2fa>
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	e66e      	b.n	800b0a6 <_vfiprintf_r+0x45a>
 800b3c8:	2110      	movs	r1, #16
 800b3ca:	6071      	str	r1, [r6, #4]
 800b3cc:	2a07      	cmp	r2, #7
 800b3ce:	4461      	add	r1, ip
 800b3d0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b3d4:	dd08      	ble.n	800b3e8 <_vfiprintf_r+0x79c>
 800b3d6:	aa0e      	add	r2, sp, #56	; 0x38
 800b3d8:	4639      	mov	r1, r7
 800b3da:	4648      	mov	r0, r9
 800b3dc:	f7ff fc04 	bl	800abe8 <__sprint_r>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d166      	bne.n	800b4b2 <_vfiprintf_r+0x866>
 800b3e4:	4b60      	ldr	r3, [pc, #384]	; (800b568 <_vfiprintf_r+0x91c>)
 800b3e6:	a811      	add	r0, sp, #68	; 0x44
 800b3e8:	3c10      	subs	r4, #16
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	e676      	b.n	800b0dc <_vfiprintf_r+0x490>
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	e68e      	b.n	800b110 <_vfiprintf_r+0x4c4>
 800b3f2:	aa0e      	add	r2, sp, #56	; 0x38
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4648      	mov	r0, r9
 800b3f8:	f7ff fbf6 	bl	800abe8 <__sprint_r>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d158      	bne.n	800b4b2 <_vfiprintf_r+0x866>
 800b400:	ae11      	add	r6, sp, #68	; 0x44
 800b402:	e697      	b.n	800b134 <_vfiprintf_r+0x4e8>
 800b404:	aa0e      	add	r2, sp, #56	; 0x38
 800b406:	4639      	mov	r1, r7
 800b408:	4648      	mov	r0, r9
 800b40a:	f7ff fbed 	bl	800abe8 <__sprint_r>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d14f      	bne.n	800b4b2 <_vfiprintf_r+0x866>
 800b412:	ae11      	add	r6, sp, #68	; 0x44
 800b414:	e69e      	b.n	800b154 <_vfiprintf_r+0x508>
 800b416:	2110      	movs	r1, #16
 800b418:	6071      	str	r1, [r6, #4]
 800b41a:	2a07      	cmp	r2, #7
 800b41c:	4461      	add	r1, ip
 800b41e:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b422:	dd08      	ble.n	800b436 <_vfiprintf_r+0x7ea>
 800b424:	aa0e      	add	r2, sp, #56	; 0x38
 800b426:	4639      	mov	r1, r7
 800b428:	4648      	mov	r0, r9
 800b42a:	f7ff fbdd 	bl	800abe8 <__sprint_r>
 800b42e:	2800      	cmp	r0, #0
 800b430:	d13f      	bne.n	800b4b2 <_vfiprintf_r+0x866>
 800b432:	4b4e      	ldr	r3, [pc, #312]	; (800b56c <_vfiprintf_r+0x920>)
 800b434:	a811      	add	r0, sp, #68	; 0x44
 800b436:	3c10      	subs	r4, #16
 800b438:	4606      	mov	r6, r0
 800b43a:	e694      	b.n	800b166 <_vfiprintf_r+0x51a>
 800b43c:	4606      	mov	r6, r0
 800b43e:	e6ac      	b.n	800b19a <_vfiprintf_r+0x54e>
 800b440:	3110      	adds	r1, #16
 800b442:	2a07      	cmp	r2, #7
 800b444:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b448:	6073      	str	r3, [r6, #4]
 800b44a:	dd07      	ble.n	800b45c <_vfiprintf_r+0x810>
 800b44c:	aa0e      	add	r2, sp, #56	; 0x38
 800b44e:	4639      	mov	r1, r7
 800b450:	4648      	mov	r0, r9
 800b452:	f7ff fbc9 	bl	800abe8 <__sprint_r>
 800b456:	bb60      	cbnz	r0, 800b4b2 <_vfiprintf_r+0x866>
 800b458:	a811      	add	r0, sp, #68	; 0x44
 800b45a:	2310      	movs	r3, #16
 800b45c:	3c10      	subs	r4, #16
 800b45e:	4606      	mov	r6, r0
 800b460:	e6a1      	b.n	800b1a6 <_vfiprintf_r+0x55a>
 800b462:	4606      	mov	r6, r0
 800b464:	e6b9      	b.n	800b1da <_vfiprintf_r+0x58e>
 800b466:	aa0e      	add	r2, sp, #56	; 0x38
 800b468:	4639      	mov	r1, r7
 800b46a:	4648      	mov	r0, r9
 800b46c:	f7ff fbbc 	bl	800abe8 <__sprint_r>
 800b470:	b9f8      	cbnz	r0, 800b4b2 <_vfiprintf_r+0x866>
 800b472:	ab11      	add	r3, sp, #68	; 0x44
 800b474:	e6c1      	b.n	800b1fa <_vfiprintf_r+0x5ae>
 800b476:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800b47a:	1a54      	subs	r4, r2, r1
 800b47c:	2c00      	cmp	r4, #0
 800b47e:	f77f aec0 	ble.w	800b202 <_vfiprintf_r+0x5b6>
 800b482:	4d39      	ldr	r5, [pc, #228]	; (800b568 <_vfiprintf_r+0x91c>)
 800b484:	2610      	movs	r6, #16
 800b486:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b48a:	2c10      	cmp	r4, #16
 800b48c:	f102 0201 	add.w	r2, r2, #1
 800b490:	601d      	str	r5, [r3, #0]
 800b492:	dc1d      	bgt.n	800b4d0 <_vfiprintf_r+0x884>
 800b494:	605c      	str	r4, [r3, #4]
 800b496:	2a07      	cmp	r2, #7
 800b498:	440c      	add	r4, r1
 800b49a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b49e:	f77f aeb0 	ble.w	800b202 <_vfiprintf_r+0x5b6>
 800b4a2:	aa0e      	add	r2, sp, #56	; 0x38
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	4648      	mov	r0, r9
 800b4a8:	f7ff fb9e 	bl	800abe8 <__sprint_r>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f43f aea8 	beq.w	800b202 <_vfiprintf_r+0x5b6>
 800b4b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4b4:	07d9      	lsls	r1, r3, #31
 800b4b6:	d405      	bmi.n	800b4c4 <_vfiprintf_r+0x878>
 800b4b8:	89bb      	ldrh	r3, [r7, #12]
 800b4ba:	059a      	lsls	r2, r3, #22
 800b4bc:	d402      	bmi.n	800b4c4 <_vfiprintf_r+0x878>
 800b4be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b4c0:	f7fc fbc1 	bl	8007c46 <__retarget_lock_release_recursive>
 800b4c4:	89bb      	ldrh	r3, [r7, #12]
 800b4c6:	065b      	lsls	r3, r3, #25
 800b4c8:	f57f abf3 	bpl.w	800acb2 <_vfiprintf_r+0x66>
 800b4cc:	f7ff bbee 	b.w	800acac <_vfiprintf_r+0x60>
 800b4d0:	3110      	adds	r1, #16
 800b4d2:	2a07      	cmp	r2, #7
 800b4d4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b4d8:	605e      	str	r6, [r3, #4]
 800b4da:	dc02      	bgt.n	800b4e2 <_vfiprintf_r+0x896>
 800b4dc:	3308      	adds	r3, #8
 800b4de:	3c10      	subs	r4, #16
 800b4e0:	e7d1      	b.n	800b486 <_vfiprintf_r+0x83a>
 800b4e2:	aa0e      	add	r2, sp, #56	; 0x38
 800b4e4:	4639      	mov	r1, r7
 800b4e6:	4648      	mov	r0, r9
 800b4e8:	f7ff fb7e 	bl	800abe8 <__sprint_r>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d1e0      	bne.n	800b4b2 <_vfiprintf_r+0x866>
 800b4f0:	ab11      	add	r3, sp, #68	; 0x44
 800b4f2:	e7f4      	b.n	800b4de <_vfiprintf_r+0x892>
 800b4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4f6:	b913      	cbnz	r3, 800b4fe <_vfiprintf_r+0x8b2>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4fc:	e7d9      	b.n	800b4b2 <_vfiprintf_r+0x866>
 800b4fe:	aa0e      	add	r2, sp, #56	; 0x38
 800b500:	4639      	mov	r1, r7
 800b502:	4648      	mov	r0, r9
 800b504:	f7ff fb70 	bl	800abe8 <__sprint_r>
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0f5      	beq.n	800b4f8 <_vfiprintf_r+0x8ac>
 800b50c:	e7d1      	b.n	800b4b2 <_vfiprintf_r+0x866>
 800b50e:	ea54 0205 	orrs.w	r2, r4, r5
 800b512:	f8cd a010 	str.w	sl, [sp, #16]
 800b516:	f43f ad8d 	beq.w	800b034 <_vfiprintf_r+0x3e8>
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	f43f aedc 	beq.w	800b2d8 <_vfiprintf_r+0x68c>
 800b520:	2b02      	cmp	r3, #2
 800b522:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800b526:	f43f af2a 	beq.w	800b37e <_vfiprintf_r+0x732>
 800b52a:	f004 0207 	and.w	r2, r4, #7
 800b52e:	08e4      	lsrs	r4, r4, #3
 800b530:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800b534:	08ed      	lsrs	r5, r5, #3
 800b536:	3230      	adds	r2, #48	; 0x30
 800b538:	ea54 0005 	orrs.w	r0, r4, r5
 800b53c:	4659      	mov	r1, fp
 800b53e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800b542:	d1f2      	bne.n	800b52a <_vfiprintf_r+0x8de>
 800b544:	9b04      	ldr	r3, [sp, #16]
 800b546:	07d8      	lsls	r0, r3, #31
 800b548:	d506      	bpl.n	800b558 <_vfiprintf_r+0x90c>
 800b54a:	2a30      	cmp	r2, #48	; 0x30
 800b54c:	d004      	beq.n	800b558 <_vfiprintf_r+0x90c>
 800b54e:	2230      	movs	r2, #48	; 0x30
 800b550:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800b554:	f1a1 0b02 	sub.w	fp, r1, #2
 800b558:	ab3a      	add	r3, sp, #232	; 0xe8
 800b55a:	eba3 030b 	sub.w	r3, r3, fp
 800b55e:	9d00      	ldr	r5, [sp, #0]
 800b560:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	e59e      	b.n	800b0a6 <_vfiprintf_r+0x45a>
 800b568:	08011928 	.word	0x08011928
 800b56c:	08011938 	.word	0x08011938

0800b570 <__sbprintf>:
 800b570:	b570      	push	{r4, r5, r6, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	8989      	ldrh	r1, [r1, #12]
 800b576:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800b57a:	f021 0102 	bic.w	r1, r1, #2
 800b57e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800b582:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b584:	911b      	str	r1, [sp, #108]	; 0x6c
 800b586:	89e1      	ldrh	r1, [r4, #14]
 800b588:	f8ad 1016 	strh.w	r1, [sp, #22]
 800b58c:	69e1      	ldr	r1, [r4, #28]
 800b58e:	9109      	str	r1, [sp, #36]	; 0x24
 800b590:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b592:	910b      	str	r1, [sp, #44]	; 0x2c
 800b594:	a91c      	add	r1, sp, #112	; 0x70
 800b596:	9102      	str	r1, [sp, #8]
 800b598:	9106      	str	r1, [sp, #24]
 800b59a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b59e:	4606      	mov	r6, r0
 800b5a0:	9104      	str	r1, [sp, #16]
 800b5a2:	9107      	str	r1, [sp, #28]
 800b5a4:	a818      	add	r0, sp, #96	; 0x60
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	e9cd 3200 	strd	r3, r2, [sp]
 800b5ac:	9108      	str	r1, [sp, #32]
 800b5ae:	f7fc fb47 	bl	8007c40 <__retarget_lock_init_recursive>
 800b5b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5b6:	a902      	add	r1, sp, #8
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff fb47 	bl	800ac4c <_vfiprintf_r>
 800b5be:	1e05      	subs	r5, r0, #0
 800b5c0:	db07      	blt.n	800b5d2 <__sbprintf+0x62>
 800b5c2:	a902      	add	r1, sp, #8
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f001 fad1 	bl	800cb6c <_fflush_r>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	bf18      	it	ne
 800b5ce:	f04f 35ff 	movne.w	r5, #4294967295
 800b5d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800b5d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b5d8:	065b      	lsls	r3, r3, #25
 800b5da:	bf42      	ittt	mi
 800b5dc:	89a3      	ldrhmi	r3, [r4, #12]
 800b5de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800b5e2:	81a3      	strhmi	r3, [r4, #12]
 800b5e4:	f7fc fb2d 	bl	8007c42 <__retarget_lock_close_recursive>
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}

0800b5f0 <__svfscanf_r>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ed2d 8b02 	vpush	{d8}
 800b5f8:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800b5fc:	461e      	mov	r6, r3
 800b5fe:	af02      	add	r7, sp, #8
 800b600:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b602:	617a      	str	r2, [r7, #20]
 800b604:	07da      	lsls	r2, r3, #31
 800b606:	ee08 0a10 	vmov	s16, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	d405      	bmi.n	800b61a <__svfscanf_r+0x2a>
 800b60e:	898b      	ldrh	r3, [r1, #12]
 800b610:	059b      	lsls	r3, r3, #22
 800b612:	d402      	bmi.n	800b61a <__svfscanf_r+0x2a>
 800b614:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800b616:	f7fc fb15 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800b61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b61e:	049d      	lsls	r5, r3, #18
 800b620:	d406      	bmi.n	800b630 <__svfscanf_r+0x40>
 800b622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b626:	81a3      	strh	r3, [r4, #12]
 800b628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b62a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b62e:	6663      	str	r3, [r4, #100]	; 0x64
 800b630:	2300      	movs	r3, #0
 800b632:	e9c7 3307 	strd	r3, r3, [r7, #28]
 800b636:	61bb      	str	r3, [r7, #24]
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
 800b63a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b644:	617a      	str	r2, [r7, #20]
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 80d5 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800b64e:	4a91      	ldr	r2, [pc, #580]	; (800b894 <__svfscanf_r+0x2a4>)
 800b650:	f812 9003 	ldrb.w	r9, [r2, r3]
 800b654:	f019 0508 	ands.w	r5, r9, #8
 800b658:	d019      	beq.n	800b68e <__svfscanf_r+0x9e>
 800b65a:	6863      	ldr	r3, [r4, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dd0e      	ble.n	800b67e <__svfscanf_r+0x8e>
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	498c      	ldr	r1, [pc, #560]	; (800b894 <__svfscanf_r+0x2a4>)
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	5c8a      	ldrb	r2, [r1, r2]
 800b668:	0710      	lsls	r0, r2, #28
 800b66a:	d5e8      	bpl.n	800b63e <__svfscanf_r+0x4e>
 800b66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b66e:	3201      	adds	r2, #1
 800b670:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b672:	6862      	ldr	r2, [r4, #4]
 800b674:	3301      	adds	r3, #1
 800b676:	3a01      	subs	r2, #1
 800b678:	6062      	str	r2, [r4, #4]
 800b67a:	6023      	str	r3, [r4, #0]
 800b67c:	e7ed      	b.n	800b65a <__svfscanf_r+0x6a>
 800b67e:	ee18 0a10 	vmov	r0, s16
 800b682:	4621      	mov	r1, r4
 800b684:	f001 fc56 	bl	800cf34 <__srefill_r>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d0e9      	beq.n	800b660 <__svfscanf_r+0x70>
 800b68c:	e7d7      	b.n	800b63e <__svfscanf_r+0x4e>
 800b68e:	2b25      	cmp	r3, #37	; 0x25
 800b690:	d164      	bne.n	800b75c <__svfscanf_r+0x16c>
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	633d      	str	r5, [r7, #48]	; 0x30
 800b696:	46a9      	mov	r9, r5
 800b698:	210a      	movs	r1, #10
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	3201      	adds	r2, #1
 800b69e:	617a      	str	r2, [r7, #20]
 800b6a0:	781a      	ldrb	r2, [r3, #0]
 800b6a2:	f1a2 0025 	sub.w	r0, r2, #37	; 0x25
 800b6a6:	2855      	cmp	r0, #85	; 0x55
 800b6a8:	f200 80a6 	bhi.w	800b7f8 <__svfscanf_r+0x208>
 800b6ac:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b6b0:	00a40056 	.word	0x00a40056
 800b6b4:	00a400a4 	.word	0x00a400a4
 800b6b8:	007d00a4 	.word	0x007d00a4
 800b6bc:	00a400a4 	.word	0x00a400a4
 800b6c0:	00a400a4 	.word	0x00a400a4
 800b6c4:	00d100a4 	.word	0x00d100a4
 800b6c8:	00d100d1 	.word	0x00d100d1
 800b6cc:	00d100d1 	.word	0x00d100d1
 800b6d0:	00d100d1 	.word	0x00d100d1
 800b6d4:	00d100d1 	.word	0x00d100d1
 800b6d8:	00a400d1 	.word	0x00a400d1
 800b6dc:	00a400a4 	.word	0x00a400a4
 800b6e0:	00a400a4 	.word	0x00a400a4
 800b6e4:	00a400a4 	.word	0x00a400a4
 800b6e8:	00a400f8 	.word	0x00a400f8
 800b6ec:	00db011c 	.word	0x00db011c
 800b6f0:	00f800f8 	.word	0x00f800f8
 800b6f4:	00a400f8 	.word	0x00a400f8
 800b6f8:	00a400a4 	.word	0x00a400a4
 800b6fc:	00a100a4 	.word	0x00a100a4
 800b700:	00a400a4 	.word	0x00a400a4
 800b704:	00a400e3 	.word	0x00a400e3
 800b708:	00a400a4 	.word	0x00a400a4
 800b70c:	00a4010e 	.word	0x00a4010e
 800b710:	00a400a4 	.word	0x00a400a4
 800b714:	00eb00a4 	.word	0x00eb00a4
 800b718:	00a400a4 	.word	0x00a400a4
 800b71c:	00a40112 	.word	0x00a40112
 800b720:	00a400a4 	.word	0x00a400a4
 800b724:	00a400a4 	.word	0x00a400a4
 800b728:	00a400f8 	.word	0x00a400f8
 800b72c:	00dd011e 	.word	0x00dd011e
 800b730:	00f800f8 	.word	0x00f800f8
 800b734:	009400f8 	.word	0x009400f8
 800b738:	00a10146 	.word	0x00a10146
 800b73c:	008600a4 	.word	0x008600a4
 800b740:	012500c4 	.word	0x012500c4
 800b744:	012200e5 	.word	0x012200e5
 800b748:	00a400a4 	.word	0x00a400a4
 800b74c:	00c00110 	.word	0x00c00110
 800b750:	00a400e9 	.word	0x00a400e9
 800b754:	00eb00a4 	.word	0x00eb00a4
 800b758:	00c000a4 	.word	0x00c000a4
 800b75c:	6863      	ldr	r3, [r4, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	dd0f      	ble.n	800b782 <__svfscanf_r+0x192>
 800b762:	6823      	ldr	r3, [r4, #0]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	7819      	ldrb	r1, [r3, #0]
 800b768:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800b76c:	4291      	cmp	r1, r2
 800b76e:	d143      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b770:	6862      	ldr	r2, [r4, #4]
 800b772:	3301      	adds	r3, #1
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b778:	3a01      	subs	r2, #1
 800b77a:	6062      	str	r2, [r4, #4]
 800b77c:	3301      	adds	r3, #1
 800b77e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b780:	e75d      	b.n	800b63e <__svfscanf_r+0x4e>
 800b782:	ee18 0a10 	vmov	r0, s16
 800b786:	4621      	mov	r1, r4
 800b788:	f001 fbd4 	bl	800cf34 <__srefill_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0e8      	beq.n	800b762 <__svfscanf_r+0x172>
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 810f 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	bf18      	it	ne
 800b7a2:	f04f 33ff 	movne.w	r3, #4294967295
 800b7a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7a8:	e026      	b.n	800b7f8 <__svfscanf_r+0x208>
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	ea53 0309 	orrs.w	r3, r3, r9
 800b7b0:	633b      	str	r3, [r7, #48]	; 0x30
 800b7b2:	d121      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b7b4:	f04f 0910 	mov.w	r9, #16
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	e76e      	b.n	800b69a <__svfscanf_r+0xaa>
 800b7bc:	f019 0f0f 	tst.w	r9, #15
 800b7c0:	d11a      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b7c2:	785a      	ldrb	r2, [r3, #1]
 800b7c4:	2a6c      	cmp	r2, #108	; 0x6c
 800b7c6:	d104      	bne.n	800b7d2 <__svfscanf_r+0x1e2>
 800b7c8:	3302      	adds	r3, #2
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	f049 0902 	orr.w	r9, r9, #2
 800b7d0:	e7f2      	b.n	800b7b8 <__svfscanf_r+0x1c8>
 800b7d2:	f049 0901 	orr.w	r9, r9, #1
 800b7d6:	e7ef      	b.n	800b7b8 <__svfscanf_r+0x1c8>
 800b7d8:	f019 0f0f 	tst.w	r9, #15
 800b7dc:	d10c      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b7de:	785a      	ldrb	r2, [r3, #1]
 800b7e0:	2a68      	cmp	r2, #104	; 0x68
 800b7e2:	bf03      	ittte	eq
 800b7e4:	3302      	addeq	r3, #2
 800b7e6:	617b      	streq	r3, [r7, #20]
 800b7e8:	f049 0908 	orreq.w	r9, r9, #8
 800b7ec:	f049 0904 	orrne.w	r9, r9, #4
 800b7f0:	e7e2      	b.n	800b7b8 <__svfscanf_r+0x1c8>
 800b7f2:	f019 0f0f 	tst.w	r9, #15
 800b7f6:	d0e9      	beq.n	800b7cc <__svfscanf_r+0x1dc>
 800b7f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7fa:	07da      	lsls	r2, r3, #31
 800b7fc:	d405      	bmi.n	800b80a <__svfscanf_r+0x21a>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	059b      	lsls	r3, r3, #22
 800b802:	d402      	bmi.n	800b80a <__svfscanf_r+0x21a>
 800b804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b806:	f7fc fa1e 	bl	8007c46 <__retarget_lock_release_recursive>
 800b80a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80c:	b143      	cbz	r3, 800b820 <__svfscanf_r+0x230>
 800b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b810:	3301      	adds	r3, #1
 800b812:	f001 80a6 	beq.w	800c962 <__svfscanf_r+0x1372>
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f041 80a4 	bne.w	800c968 <__svfscanf_r+0x1378>
 800b820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b822:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800b826:	46bd      	mov	sp, r7
 800b828:	ecbd 8b02 	vpop	{d8}
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	f019 0f0f 	tst.w	r9, #15
 800b834:	d0c0      	beq.n	800b7b8 <__svfscanf_r+0x1c8>
 800b836:	e7df      	b.n	800b7f8 <__svfscanf_r+0x208>
 800b838:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 800b83c:	d1dc      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b83e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b840:	b922      	cbnz	r2, 800b84c <__svfscanf_r+0x25c>
 800b842:	b082      	sub	sp, #8
 800b844:	aa02      	add	r2, sp, #8
 800b846:	e9c2 3300 	strd	r3, r3, [r2]
 800b84a:	637a      	str	r2, [r7, #52]	; 0x34
 800b84c:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800b850:	e7b2      	b.n	800b7b8 <__svfscanf_r+0x1c8>
 800b852:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 800b856:	d1cf      	bne.n	800b7f8 <__svfscanf_r+0x208>
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	fb01 2203 	mla	r2, r1, r3, r2
 800b85e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b862:	633b      	str	r3, [r7, #48]	; 0x30
 800b864:	e7a8      	b.n	800b7b8 <__svfscanf_r+0x1c8>
 800b866:	f049 0901 	orr.w	r9, r9, #1
 800b86a:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <__svfscanf_r+0x2a8>)
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	230a      	movs	r3, #10
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	2503      	movs	r5, #3
 800b874:	e015      	b.n	800b8a2 <__svfscanf_r+0x2b2>
 800b876:	f049 0901 	orr.w	r9, r9, #1
 800b87a:	4b08      	ldr	r3, [pc, #32]	; (800b89c <__svfscanf_r+0x2ac>)
 800b87c:	61bb      	str	r3, [r7, #24]
 800b87e:	2308      	movs	r3, #8
 800b880:	e7f6      	b.n	800b870 <__svfscanf_r+0x280>
 800b882:	4b06      	ldr	r3, [pc, #24]	; (800b89c <__svfscanf_r+0x2ac>)
 800b884:	e7f2      	b.n	800b86c <__svfscanf_r+0x27c>
 800b886:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800b88a:	4b04      	ldr	r3, [pc, #16]	; (800b89c <__svfscanf_r+0x2ac>)
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	2310      	movs	r3, #16
 800b890:	e7ee      	b.n	800b870 <__svfscanf_r+0x280>
 800b892:	bf00      	nop
 800b894:	08011ba1 	.word	0x08011ba1
 800b898:	0800fc39 	.word	0x0800fc39
 800b89c:	0800fd21 	.word	0x0800fd21
 800b8a0:	2504      	movs	r5, #4
 800b8a2:	6863      	ldr	r3, [r4, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dd4d      	ble.n	800b944 <__svfscanf_r+0x354>
 800b8a8:	f019 0f40 	tst.w	r9, #64	; 0x40
 800b8ac:	d105      	bne.n	800b8ba <__svfscanf_r+0x2ca>
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	49a2      	ldr	r1, [pc, #648]	; (800bb3c <__svfscanf_r+0x54c>)
 800b8b2:	781a      	ldrb	r2, [r3, #0]
 800b8b4:	5c8a      	ldrb	r2, [r1, r2]
 800b8b6:	0711      	lsls	r1, r2, #28
 800b8b8:	d44c      	bmi.n	800b954 <__svfscanf_r+0x364>
 800b8ba:	3d01      	subs	r5, #1
 800b8bc:	2d03      	cmp	r5, #3
 800b8be:	d85c      	bhi.n	800b97a <__svfscanf_r+0x38a>
 800b8c0:	e8df f015 	tbh	[pc, r5, lsl #1]
 800b8c4:	037801b8 	.word	0x037801b8
 800b8c8:	06150524 	.word	0x06150524
 800b8cc:	f049 0901 	orr.w	r9, r9, #1
 800b8d0:	2502      	movs	r5, #2
 800b8d2:	e7e6      	b.n	800b8a2 <__svfscanf_r+0x2b2>
 800b8d4:	6979      	ldr	r1, [r7, #20]
 800b8d6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800b8da:	f001 fbaf 	bl	800d03c <__sccl>
 800b8de:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800b8e2:	6178      	str	r0, [r7, #20]
 800b8e4:	2501      	movs	r5, #1
 800b8e6:	e7dc      	b.n	800b8a2 <__svfscanf_r+0x2b2>
 800b8e8:	f049 0901 	orr.w	r9, r9, #1
 800b8ec:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800b8f0:	2500      	movs	r5, #0
 800b8f2:	e7d6      	b.n	800b8a2 <__svfscanf_r+0x2b2>
 800b8f4:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 800b8f8:	e7c7      	b.n	800b88a <__svfscanf_r+0x29a>
 800b8fa:	f019 0f10 	tst.w	r9, #16
 800b8fe:	f47f ae9e 	bne.w	800b63e <__svfscanf_r+0x4e>
 800b902:	f019 0f08 	tst.w	r9, #8
 800b906:	f856 3b04 	ldr.w	r3, [r6], #4
 800b90a:	d002      	beq.n	800b912 <__svfscanf_r+0x322>
 800b90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e695      	b.n	800b63e <__svfscanf_r+0x4e>
 800b912:	f019 0f04 	tst.w	r9, #4
 800b916:	d002      	beq.n	800b91e <__svfscanf_r+0x32e>
 800b918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b91a:	801a      	strh	r2, [r3, #0]
 800b91c:	e68f      	b.n	800b63e <__svfscanf_r+0x4e>
 800b91e:	f019 0f01 	tst.w	r9, #1
 800b922:	d002      	beq.n	800b92a <__svfscanf_r+0x33a>
 800b924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	e689      	b.n	800b63e <__svfscanf_r+0x4e>
 800b92a:	f019 0f02 	tst.w	r9, #2
 800b92e:	d0f9      	beq.n	800b924 <__svfscanf_r+0x334>
 800b930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b934:	17d2      	asrs	r2, r2, #31
 800b936:	e9c3 1200 	strd	r1, r2, [r3]
 800b93a:	e680      	b.n	800b63e <__svfscanf_r+0x4e>
 800b93c:	4b80      	ldr	r3, [pc, #512]	; (800bb40 <__svfscanf_r+0x550>)
 800b93e:	61bb      	str	r3, [r7, #24]
 800b940:	2300      	movs	r3, #0
 800b942:	e795      	b.n	800b870 <__svfscanf_r+0x280>
 800b944:	ee18 0a10 	vmov	r0, s16
 800b948:	4621      	mov	r1, r4
 800b94a:	f001 faf3 	bl	800cf34 <__srefill_r>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d0aa      	beq.n	800b8a8 <__svfscanf_r+0x2b8>
 800b952:	e71d      	b.n	800b790 <__svfscanf_r+0x1a0>
 800b954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b956:	3201      	adds	r2, #1
 800b958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b95a:	6862      	ldr	r2, [r4, #4]
 800b95c:	3a01      	subs	r2, #1
 800b95e:	2a00      	cmp	r2, #0
 800b960:	6062      	str	r2, [r4, #4]
 800b962:	dd02      	ble.n	800b96a <__svfscanf_r+0x37a>
 800b964:	3301      	adds	r3, #1
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	e7a1      	b.n	800b8ae <__svfscanf_r+0x2be>
 800b96a:	ee18 0a10 	vmov	r0, s16
 800b96e:	4621      	mov	r1, r4
 800b970:	f001 fae0 	bl	800cf34 <__srefill_r>
 800b974:	2800      	cmp	r0, #0
 800b976:	d09a      	beq.n	800b8ae <__svfscanf_r+0x2be>
 800b978:	e70a      	b.n	800b790 <__svfscanf_r+0x1a0>
 800b97a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800b97c:	2d01      	cmp	r5, #1
 800b97e:	bf38      	it	cc
 800b980:	2501      	movcc	r5, #1
 800b982:	f019 0801 	ands.w	r8, r9, #1
 800b986:	f009 0b10 	and.w	fp, r9, #16
 800b98a:	f000 80db 	beq.w	800bb44 <__svfscanf_r+0x554>
 800b98e:	f1bb 0f00 	cmp.w	fp, #0
 800b992:	f040 809a 	bne.w	800baca <__svfscanf_r+0x4da>
 800b996:	4633      	mov	r3, r6
 800b998:	f019 0f80 	tst.w	r9, #128	; 0x80
 800b99c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b9a0:	633b      	str	r3, [r7, #48]	; 0x30
 800b9a2:	f000 8099 	beq.w	800bad8 <__svfscanf_r+0x4e8>
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	f43f af26 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800b9ac:	2080      	movs	r0, #128	; 0x80
 800b9ae:	f002 fc7d 	bl	800e2ac <malloc>
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	b910      	cbnz	r0, 800b9bc <__svfscanf_r+0x3cc>
 800b9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ba:	e6f4      	b.n	800b7a6 <__svfscanf_r+0x1b6>
 800b9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9be:	6030      	str	r0, [r6, #0]
 800b9c0:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800b9c4:	889b      	ldrh	r3, [r3, #4]
 800b9c6:	4599      	cmp	r9, r3
 800b9c8:	d312      	bcc.n	800b9f0 <__svfscanf_r+0x400>
 800b9ca:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d8f1      	bhi.n	800b9b6 <__svfscanf_r+0x3c6>
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	fa1f fa83 	uxth.w	sl, r3
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9da:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800b9de:	6818      	ldr	r0, [r3, #0]
 800b9e0:	f003 f8e6 	bl	800ebb0 <realloc>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	d0e6      	beq.n	800b9b6 <__svfscanf_r+0x3c6>
 800b9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ea:	6018      	str	r0, [r3, #0]
 800b9ec:	f8a3 a004 	strh.w	sl, [r3, #4]
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f109 0201 	add.w	r2, r9, #1
 800b9fa:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800b9fe:	46b2      	mov	sl, r6
 800ba00:	80ca      	strh	r2, [r1, #6]
 800ba02:	4646      	mov	r6, r8
 800ba04:	f04f 0920 	mov.w	r9, #32
 800ba08:	2200      	movs	r2, #0
 800ba0a:	627a      	str	r2, [r7, #36]	; 0x24
 800ba0c:	f001 fd2a 	bl	800d464 <__locale_mb_cur_max>
 800ba10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba12:	4290      	cmp	r0, r2
 800ba14:	f43f aebc 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800ba18:	6821      	ldr	r1, [r4, #0]
 800ba1a:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800ba1e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800ba22:	f80c 0002 	strb.w	r0, [ip, r2]
 800ba26:	1c53      	adds	r3, r2, #1
 800ba28:	6862      	ldr	r2, [r4, #4]
 800ba2a:	3a01      	subs	r2, #1
 800ba2c:	e9c4 1200 	strd	r1, r2, [r4]
 800ba30:	6a3a      	ldr	r2, [r7, #32]
 800ba32:	2a03      	cmp	r2, #3
 800ba34:	d102      	bne.n	800ba3c <__svfscanf_r+0x44c>
 800ba36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba38:	2a04      	cmp	r2, #4
 800ba3a:	d007      	beq.n	800ba4c <__svfscanf_r+0x45c>
 800ba3c:	2208      	movs	r2, #8
 800ba3e:	2100      	movs	r1, #0
 800ba40:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800ba44:	627b      	str	r3, [r7, #36]	; 0x24
 800ba46:	f7fc f882 	bl	8007b4e <memset>
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ba52:	9200      	str	r2, [sp, #0]
 800ba54:	ee18 0a10 	vmov	r0, s16
 800ba58:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	f004 fa9d 	bl	800ff9c <_mbrtowc_r>
 800ba62:	1c42      	adds	r2, r0, #1
 800ba64:	6238      	str	r0, [r7, #32]
 800ba66:	f43f ae93 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	d137      	bne.n	800bae0 <__svfscanf_r+0x4f0>
 800ba70:	f1bb 0f00 	cmp.w	fp, #0
 800ba74:	d101      	bne.n	800ba7a <__svfscanf_r+0x48a>
 800ba76:	f8c6 b000 	str.w	fp, [r6]
 800ba7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba7c:	441a      	add	r2, r3
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d102      	bne.n	800ba8c <__svfscanf_r+0x49c>
 800ba86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d000      	beq.n	800ba8e <__svfscanf_r+0x49e>
 800ba8c:	3d01      	subs	r5, #1
 800ba8e:	f1bb 0f00 	cmp.w	fp, #0
 800ba92:	d118      	bne.n	800bac6 <__svfscanf_r+0x4d6>
 800ba94:	f1ba 0f00 	cmp.w	sl, #0
 800ba98:	d014      	beq.n	800bac4 <__svfscanf_r+0x4d4>
 800ba9a:	eba6 0308 	sub.w	r3, r6, r8
 800ba9e:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800baa2:	d80f      	bhi.n	800bac4 <__svfscanf_r+0x4d4>
 800baa4:	4640      	mov	r0, r8
 800baa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24
 800baac:	f003 f880 	bl	800ebb0 <realloc>
 800bab0:	4680      	mov	r8, r0
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f43f af7f 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	f8ca 0000 	str.w	r0, [sl]
 800babe:	18c6      	adds	r6, r0, r3
 800bac0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800bac4:	3604      	adds	r6, #4
 800bac6:	2300      	movs	r3, #0
 800bac8:	e00d      	b.n	800bae6 <__svfscanf_r+0x4f6>
 800baca:	f04f 0900 	mov.w	r9, #0
 800bace:	633e      	str	r6, [r7, #48]	; 0x30
 800bad0:	46c8      	mov	r8, r9
 800bad2:	46ca      	mov	sl, r9
 800bad4:	464e      	mov	r6, r9
 800bad6:	e797      	b.n	800ba08 <__svfscanf_r+0x418>
 800bad8:	46d9      	mov	r9, fp
 800bada:	46d8      	mov	r8, fp
 800badc:	46da      	mov	sl, fp
 800bade:	e793      	b.n	800ba08 <__svfscanf_r+0x418>
 800bae0:	6a3a      	ldr	r2, [r7, #32]
 800bae2:	3202      	adds	r2, #2
 800bae4:	d1c9      	bne.n	800ba7a <__svfscanf_r+0x48a>
 800bae6:	6862      	ldr	r2, [r4, #4]
 800bae8:	2a00      	cmp	r2, #0
 800baea:	dc15      	bgt.n	800bb18 <__svfscanf_r+0x528>
 800baec:	ee18 0a10 	vmov	r0, s16
 800baf0:	4621      	mov	r1, r4
 800baf2:	627b      	str	r3, [r7, #36]	; 0x24
 800baf4:	f001 fa1e 	bl	800cf34 <__srefill_r>
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	b168      	cbz	r0, 800bb18 <__svfscanf_r+0x528>
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f47f ae47 	bne.w	800b790 <__svfscanf_r+0x1a0>
 800bb02:	f1ba 0f00 	cmp.w	sl, #0
 800bb06:	d10b      	bne.n	800bb20 <__svfscanf_r+0x530>
 800bb08:	f1bb 0f00 	cmp.w	fp, #0
 800bb0c:	d102      	bne.n	800bb14 <__svfscanf_r+0x524>
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	3301      	adds	r3, #1
 800bb12:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb14:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800bb16:	e592      	b.n	800b63e <__svfscanf_r+0x4e>
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	d0f2      	beq.n	800bb02 <__svfscanf_r+0x512>
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	e774      	b.n	800ba0a <__svfscanf_r+0x41a>
 800bb20:	eba6 0108 	sub.w	r1, r6, r8
 800bb24:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 800bb28:	d9ee      	bls.n	800bb08 <__svfscanf_r+0x518>
 800bb2a:	f8da 0000 	ldr.w	r0, [sl]
 800bb2e:	f003 f83f 	bl	800ebb0 <realloc>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d0e8      	beq.n	800bb08 <__svfscanf_r+0x518>
 800bb36:	f8ca 0000 	str.w	r0, [sl]
 800bb3a:	e7e5      	b.n	800bb08 <__svfscanf_r+0x518>
 800bb3c:	08011ba1 	.word	0x08011ba1
 800bb40:	0800fc39 	.word	0x0800fc39
 800bb44:	f1bb 0f00 	cmp.w	fp, #0
 800bb48:	d01b      	beq.n	800bb82 <__svfscanf_r+0x592>
 800bb4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb4e:	429d      	cmp	r5, r3
 800bb50:	dd11      	ble.n	800bb76 <__svfscanf_r+0x586>
 800bb52:	441a      	add	r2, r3
 800bb54:	ee18 0a10 	vmov	r0, s16
 800bb58:	6022      	str	r2, [r4, #0]
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4498      	add	r8, r3
 800bb5e:	1aed      	subs	r5, r5, r3
 800bb60:	f001 f9e8 	bl	800cf34 <__srefill_r>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d0f0      	beq.n	800bb4a <__svfscanf_r+0x55a>
 800bb68:	f1b8 0f00 	cmp.w	r8, #0
 800bb6c:	f43f ae10 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	4443      	add	r3, r8
 800bb74:	e603      	b.n	800b77e <__svfscanf_r+0x18e>
 800bb76:	1b5b      	subs	r3, r3, r5
 800bb78:	442a      	add	r2, r5
 800bb7a:	44a8      	add	r8, r5
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	6022      	str	r2, [r4, #0]
 800bb80:	e7f6      	b.n	800bb70 <__svfscanf_r+0x580>
 800bb82:	46b0      	mov	r8, r6
 800bb84:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800bb88:	f858 6b04 	ldr.w	r6, [r8], #4
 800bb8c:	d031      	beq.n	800bbf2 <__svfscanf_r+0x602>
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	f43f ae32 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800bb94:	4628      	mov	r0, r5
 800bb96:	f002 fb89 	bl	800e2ac <malloc>
 800bb9a:	4682      	mov	sl, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f43f af0a 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba4:	6030      	str	r0, [r6, #0]
 800bba6:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800bbaa:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800bbae:	45cb      	cmp	fp, r9
 800bbb0:	d315      	bcc.n	800bbde <__svfscanf_r+0x5ee>
 800bbb2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800bbb6:	4599      	cmp	r9, r3
 800bbb8:	f63f aefd 	bhi.w	800b9b6 <__svfscanf_r+0x3c6>
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	f109 0908 	add.w	r9, r9, #8
 800bbc2:	fa1f f989 	uxth.w	r9, r9
 800bbc6:	6818      	ldr	r0, [r3, #0]
 800bbc8:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800bbcc:	f002 fff0 	bl	800ebb0 <realloc>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	f43f aef0 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd8:	6018      	str	r0, [r3, #0]
 800bbda:	f8a3 9004 	strh.w	r9, [r3, #4]
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f10b 0201 	add.w	r2, fp, #1
 800bbe8:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800bbec:	46b1      	mov	r9, r6
 800bbee:	80ca      	strh	r2, [r1, #6]
 800bbf0:	4656      	mov	r6, sl
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	ee18 0a10 	vmov	r0, s16
 800bbf8:	9400      	str	r4, [sp, #0]
 800bbfa:	462b      	mov	r3, r5
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f000 ffda 	bl	800cbb6 <_fread_r>
 800bc02:	4606      	mov	r6, r0
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f43f adc3 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800bc0a:	f1b9 0f00 	cmp.w	r9, #0
 800bc0e:	d009      	beq.n	800bc24 <__svfscanf_r+0x634>
 800bc10:	4285      	cmp	r5, r0
 800bc12:	d907      	bls.n	800bc24 <__svfscanf_r+0x634>
 800bc14:	4601      	mov	r1, r0
 800bc16:	f8d9 0000 	ldr.w	r0, [r9]
 800bc1a:	f002 ffc9 	bl	800ebb0 <realloc>
 800bc1e:	b108      	cbz	r0, 800bc24 <__svfscanf_r+0x634>
 800bc20:	f8c9 0000 	str.w	r0, [r9]
 800bc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc26:	4433      	add	r3, r6
 800bc28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc30:	4646      	mov	r6, r8
 800bc32:	e504      	b.n	800b63e <__svfscanf_r+0x4e>
 800bc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bf08      	it	eq
 800bc3a:	f04f 33ff 	moveq.w	r3, #4294967295
 800bc3e:	f019 0501 	ands.w	r5, r9, #1
 800bc42:	633b      	str	r3, [r7, #48]	; 0x30
 800bc44:	f009 0b10 	and.w	fp, r9, #16
 800bc48:	f000 8107 	beq.w	800be5a <__svfscanf_r+0x86a>
 800bc4c:	f1bb 0f00 	cmp.w	fp, #0
 800bc50:	f040 80a7 	bne.w	800bda2 <__svfscanf_r+0x7b2>
 800bc54:	4633      	mov	r3, r6
 800bc56:	f019 0f80 	tst.w	r9, #128	; 0x80
 800bc5a:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc5e:	613b      	str	r3, [r7, #16]
 800bc60:	f000 80a8 	beq.w	800bdb4 <__svfscanf_r+0x7c4>
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	f43f adc7 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800bc6a:	2080      	movs	r0, #128	; 0x80
 800bc6c:	f002 fb1e 	bl	800e2ac <malloc>
 800bc70:	4680      	mov	r8, r0
 800bc72:	2800      	cmp	r0, #0
 800bc74:	f43f ae9f 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bc78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc7a:	6028      	str	r0, [r5, #0]
 800bc7c:	88de      	ldrh	r6, [r3, #6]
 800bc7e:	889b      	ldrh	r3, [r3, #4]
 800bc80:	429e      	cmp	r6, r3
 800bc82:	d314      	bcc.n	800bcae <__svfscanf_r+0x6be>
 800bc84:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	f63f ae94 	bhi.w	800b9b6 <__svfscanf_r+0x3c6>
 800bc8e:	3308      	adds	r3, #8
 800bc90:	fa1f f983 	uxth.w	r9, r3
 800bc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc96:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800bc9a:	6818      	ldr	r0, [r3, #0]
 800bc9c:	f002 ff88 	bl	800ebb0 <realloc>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	f43f ae88 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	6018      	str	r0, [r3, #0]
 800bcaa:	f8a3 9004 	strh.w	r9, [r3, #4]
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	627d      	str	r5, [r7, #36]	; 0x24
 800bcb6:	1c72      	adds	r2, r6, #1
 800bcb8:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800bcbc:	80ca      	strh	r2, [r1, #6]
 800bcbe:	4645      	mov	r5, r8
 800bcc0:	f04f 0a20 	mov.w	sl, #32
 800bcc4:	2600      	movs	r6, #0
 800bcc6:	f001 fbcd 	bl	800d464 <__locale_mb_cur_max>
 800bcca:	42b0      	cmp	r0, r6
 800bccc:	f43f ad60 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800bcd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcda:	558a      	strb	r2, [r1, r6]
 800bcdc:	6862      	ldr	r2, [r4, #4]
 800bcde:	3a01      	subs	r2, #1
 800bce0:	e9c4 3200 	strd	r3, r2, [r4]
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	f106 0901 	add.w	r9, r6, #1
 800bcec:	d102      	bne.n	800bcf4 <__svfscanf_r+0x704>
 800bcee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d005      	beq.n	800bd00 <__svfscanf_r+0x710>
 800bcf4:	2208      	movs	r2, #8
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800bcfc:	f7fb ff27 	bl	8007b4e <memset>
 800bd00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd04:	9300      	str	r3, [sp, #0]
 800bd06:	ee18 0a10 	vmov	r0, s16
 800bd0a:	464b      	mov	r3, r9
 800bd0c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800bd10:	4629      	mov	r1, r5
 800bd12:	f004 f943 	bl	800ff9c <_mbrtowc_r>
 800bd16:	4603      	mov	r3, r0
 800bd18:	6238      	str	r0, [r7, #32]
 800bd1a:	1c58      	adds	r0, r3, #1
 800bd1c:	f43f ad38 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d14c      	bne.n	800bdbe <__svfscanf_r+0x7ce>
 800bd24:	602b      	str	r3, [r5, #0]
 800bd26:	682e      	ldr	r6, [r5, #0]
 800bd28:	1c71      	adds	r1, r6, #1
 800bd2a:	d059      	beq.n	800bde0 <__svfscanf_r+0x7f0>
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	2100      	movs	r1, #0
 800bd30:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800bd34:	f7fb ff0b 	bl	8007b4e <memset>
 800bd38:	4b9d      	ldr	r3, [pc, #628]	; (800bfb0 <__svfscanf_r+0x9c0>)
 800bd3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	4632      	mov	r2, r6
 800bd42:	ee18 0a10 	vmov	r0, s16
 800bd46:	68fe      	ldr	r6, [r7, #12]
 800bd48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bd4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800bd50:	47b0      	blx	r6
 800bd52:	2801      	cmp	r0, #1
 800bd54:	d146      	bne.n	800bde4 <__svfscanf_r+0x7f4>
 800bd56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd5e:	5c9b      	ldrb	r3, [r3, r2]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d14b      	bne.n	800bdfc <__svfscanf_r+0x80c>
 800bd64:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 800bd68:	f1b9 0f00 	cmp.w	r9, #0
 800bd6c:	d13c      	bne.n	800bde8 <__svfscanf_r+0x7f8>
 800bd6e:	f1bb 0f00 	cmp.w	fp, #0
 800bd72:	d114      	bne.n	800bd9e <__svfscanf_r+0x7ae>
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	f8c5 b000 	str.w	fp, [r5]
 800bd7a:	b16b      	cbz	r3, 800bd98 <__svfscanf_r+0x7a8>
 800bd7c:	eba5 0108 	sub.w	r1, r5, r8
 800bd80:	108b      	asrs	r3, r1, #2
 800bd82:	3301      	adds	r3, #1
 800bd84:	459a      	cmp	sl, r3
 800bd86:	d907      	bls.n	800bd98 <__svfscanf_r+0x7a8>
 800bd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8a:	3104      	adds	r1, #4
 800bd8c:	6818      	ldr	r0, [r3, #0]
 800bd8e:	f002 ff0f 	bl	800ebb0 <realloc>
 800bd92:	b108      	cbz	r0, 800bd98 <__svfscanf_r+0x7a8>
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	6018      	str	r0, [r3, #0]
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd9e:	693e      	ldr	r6, [r7, #16]
 800bda0:	e44d      	b.n	800b63e <__svfscanf_r+0x4e>
 800bda2:	f04f 0a00 	mov.w	sl, #0
 800bda6:	613e      	str	r6, [r7, #16]
 800bda8:	46d0      	mov	r8, sl
 800bdaa:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800bdae:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 800bdb2:	e787      	b.n	800bcc4 <__svfscanf_r+0x6d4>
 800bdb4:	46da      	mov	sl, fp
 800bdb6:	46d8      	mov	r8, fp
 800bdb8:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800bdbc:	e782      	b.n	800bcc4 <__svfscanf_r+0x6d4>
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	3302      	adds	r3, #2
 800bdc2:	d1b0      	bne.n	800bd26 <__svfscanf_r+0x736>
 800bdc4:	6863      	ldr	r3, [r4, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	dc42      	bgt.n	800be50 <__svfscanf_r+0x860>
 800bdca:	ee18 0a10 	vmov	r0, s16
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f001 f8b0 	bl	800cf34 <__srefill_r>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d03b      	beq.n	800be50 <__svfscanf_r+0x860>
 800bdd8:	f1b9 0f00 	cmp.w	r9, #0
 800bddc:	d0c7      	beq.n	800bd6e <__svfscanf_r+0x77e>
 800bdde:	e4d7      	b.n	800b790 <__svfscanf_r+0x1a0>
 800bde0:	4632      	mov	r2, r6
 800bde2:	e7ba      	b.n	800bd5a <__svfscanf_r+0x76a>
 800bde4:	2200      	movs	r2, #0
 800bde6:	e7b8      	b.n	800bd5a <__svfscanf_r+0x76a>
 800bde8:	f109 39ff 	add.w	r9, r9, #4294967295
 800bdec:	ee18 0a10 	vmov	r0, s16
 800bdf0:	f816 1009 	ldrb.w	r1, [r6, r9]
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	f001 f9b5 	bl	800d164 <_ungetc_r>
 800bdfa:	e7b5      	b.n	800bd68 <__svfscanf_r+0x778>
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	444b      	add	r3, r9
 800be00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	2b03      	cmp	r3, #3
 800be06:	d102      	bne.n	800be0e <__svfscanf_r+0x81e>
 800be08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d002      	beq.n	800be14 <__svfscanf_r+0x824>
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	3b01      	subs	r3, #1
 800be12:	633b      	str	r3, [r7, #48]	; 0x30
 800be14:	f1bb 0f00 	cmp.w	fp, #0
 800be18:	d117      	bne.n	800be4a <__svfscanf_r+0x85a>
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	3504      	adds	r5, #4
 800be1e:	b1a3      	cbz	r3, 800be4a <__svfscanf_r+0x85a>
 800be20:	eba5 0608 	sub.w	r6, r5, r8
 800be24:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 800be28:	d80d      	bhi.n	800be46 <__svfscanf_r+0x856>
 800be2a:	4640      	mov	r0, r8
 800be2c:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800be30:	f002 febe 	bl	800ebb0 <realloc>
 800be34:	4680      	mov	r8, r0
 800be36:	2800      	cmp	r0, #0
 800be38:	f43f adbd 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	1985      	adds	r5, r0, r6
 800be40:	6018      	str	r0, [r3, #0]
 800be42:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800be46:	46d9      	mov	r9, fp
 800be48:	e7bc      	b.n	800bdc4 <__svfscanf_r+0x7d4>
 800be4a:	f04f 0900 	mov.w	r9, #0
 800be4e:	e7b9      	b.n	800bdc4 <__svfscanf_r+0x7d4>
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	2b00      	cmp	r3, #0
 800be54:	d08b      	beq.n	800bd6e <__svfscanf_r+0x77e>
 800be56:	464e      	mov	r6, r9
 800be58:	e735      	b.n	800bcc6 <__svfscanf_r+0x6d6>
 800be5a:	f1bb 0f00 	cmp.w	fp, #0
 800be5e:	d01d      	beq.n	800be9c <__svfscanf_r+0x8ac>
 800be60:	f107 0850 	add.w	r8, r7, #80	; 0x50
 800be64:	6823      	ldr	r3, [r4, #0]
 800be66:	781a      	ldrb	r2, [r3, #0]
 800be68:	f818 2002 	ldrb.w	r2, [r8, r2]
 800be6c:	b90a      	cbnz	r2, 800be72 <__svfscanf_r+0x882>
 800be6e:	b995      	cbnz	r5, 800be96 <__svfscanf_r+0x8a6>
 800be70:	e4c2      	b.n	800b7f8 <__svfscanf_r+0x208>
 800be72:	3301      	adds	r3, #1
 800be74:	6862      	ldr	r2, [r4, #4]
 800be76:	6023      	str	r3, [r4, #0]
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	3501      	adds	r5, #1
 800be7c:	3a01      	subs	r2, #1
 800be7e:	429d      	cmp	r5, r3
 800be80:	6062      	str	r2, [r4, #4]
 800be82:	d008      	beq.n	800be96 <__svfscanf_r+0x8a6>
 800be84:	2a00      	cmp	r2, #0
 800be86:	dced      	bgt.n	800be64 <__svfscanf_r+0x874>
 800be88:	ee18 0a10 	vmov	r0, s16
 800be8c:	4621      	mov	r1, r4
 800be8e:	f001 f851 	bl	800cf34 <__srefill_r>
 800be92:	2800      	cmp	r0, #0
 800be94:	d0e6      	beq.n	800be64 <__svfscanf_r+0x874>
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	442b      	add	r3, r5
 800be9a:	e470      	b.n	800b77e <__svfscanf_r+0x18e>
 800be9c:	46b3      	mov	fp, r6
 800be9e:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 800bea2:	f85b 6b04 	ldr.w	r6, [fp], #4
 800bea6:	f000 8081 	beq.w	800bfac <__svfscanf_r+0x9bc>
 800beaa:	2e00      	cmp	r6, #0
 800beac:	f43f aca4 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800beb0:	2020      	movs	r0, #32
 800beb2:	f002 f9fb 	bl	800e2ac <malloc>
 800beb6:	4680      	mov	r8, r0
 800beb8:	2800      	cmp	r0, #0
 800beba:	f43f ad7c 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec0:	6030      	str	r0, [r6, #0]
 800bec2:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800bec6:	889d      	ldrh	r5, [r3, #4]
 800bec8:	45a9      	cmp	r9, r5
 800beca:	d311      	bcc.n	800bef0 <__svfscanf_r+0x900>
 800becc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800bed0:	429d      	cmp	r5, r3
 800bed2:	f63f ad70 	bhi.w	800b9b6 <__svfscanf_r+0x3c6>
 800bed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed8:	3508      	adds	r5, #8
 800beda:	b2ad      	uxth	r5, r5
 800bedc:	6818      	ldr	r0, [r3, #0]
 800bede:	00a9      	lsls	r1, r5, #2
 800bee0:	f002 fe66 	bl	800ebb0 <realloc>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	f43f ad66 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800beea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beec:	6018      	str	r0, [r3, #0]
 800beee:	809d      	strh	r5, [r3, #4]
 800bef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f109 0201 	add.w	r2, r9, #1
 800befa:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800befe:	46b2      	mov	sl, r6
 800bf00:	80ca      	strh	r2, [r1, #6]
 800bf02:	4646      	mov	r6, r8
 800bf04:	2520      	movs	r5, #32
 800bf06:	46b0      	mov	r8, r6
 800bf08:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	f819 2002 	ldrb.w	r2, [r9, r2]
 800bf14:	b36a      	cbz	r2, 800bf72 <__svfscanf_r+0x982>
 800bf16:	6862      	ldr	r2, [r4, #4]
 800bf18:	3a01      	subs	r2, #1
 800bf1a:	6062      	str	r2, [r4, #4]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	6022      	str	r2, [r4, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	f806 3b01 	strb.w	r3, [r6], #1
 800bf26:	f1ba 0f00 	cmp.w	sl, #0
 800bf2a:	d011      	beq.n	800bf50 <__svfscanf_r+0x960>
 800bf2c:	eba6 0308 	sub.w	r3, r6, r8
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	d30d      	bcc.n	800bf50 <__svfscanf_r+0x960>
 800bf34:	006d      	lsls	r5, r5, #1
 800bf36:	4640      	mov	r0, r8
 800bf38:	4629      	mov	r1, r5
 800bf3a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf3c:	f002 fe38 	bl	800ebb0 <realloc>
 800bf40:	4680      	mov	r8, r0
 800bf42:	2800      	cmp	r0, #0
 800bf44:	f43f ad37 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	f8ca 0000 	str.w	r0, [sl]
 800bf4e:	18c6      	adds	r6, r0, r3
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	3b01      	subs	r3, #1
 800bf54:	633b      	str	r3, [r7, #48]	; 0x30
 800bf56:	d00c      	beq.n	800bf72 <__svfscanf_r+0x982>
 800bf58:	6863      	ldr	r3, [r4, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dcd6      	bgt.n	800bf0c <__svfscanf_r+0x91c>
 800bf5e:	ee18 0a10 	vmov	r0, s16
 800bf62:	4621      	mov	r1, r4
 800bf64:	f000 ffe6 	bl	800cf34 <__srefill_r>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d0cf      	beq.n	800bf0c <__svfscanf_r+0x91c>
 800bf6c:	4546      	cmp	r6, r8
 800bf6e:	f43f ac0f 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800bf72:	ebb6 0808 	subs.w	r8, r6, r8
 800bf76:	f43f ac3f 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	7033      	strb	r3, [r6, #0]
 800bf7e:	f1ba 0f00 	cmp.w	sl, #0
 800bf82:	d00a      	beq.n	800bf9a <__svfscanf_r+0x9aa>
 800bf84:	f108 0101 	add.w	r1, r8, #1
 800bf88:	428d      	cmp	r5, r1
 800bf8a:	d906      	bls.n	800bf9a <__svfscanf_r+0x9aa>
 800bf8c:	f8da 0000 	ldr.w	r0, [sl]
 800bf90:	f002 fe0e 	bl	800ebb0 <realloc>
 800bf94:	b108      	cbz	r0, 800bf9a <__svfscanf_r+0x9aa>
 800bf96:	f8ca 0000 	str.w	r0, [sl]
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	4443      	add	r3, r8
 800bfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfa6:	465e      	mov	r6, fp
 800bfa8:	f7ff bb49 	b.w	800b63e <__svfscanf_r+0x4e>
 800bfac:	46aa      	mov	sl, r5
 800bfae:	e7aa      	b.n	800bf06 <__svfscanf_r+0x916>
 800bfb0:	20000560 	.word	0x20000560
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bf08      	it	eq
 800bfba:	f04f 33ff 	moveq.w	r3, #4294967295
 800bfbe:	f019 0501 	ands.w	r5, r9, #1
 800bfc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bfc4:	f009 0810 	and.w	r8, r9, #16
 800bfc8:	f000 80fb 	beq.w	800c1c2 <__svfscanf_r+0xbd2>
 800bfcc:	f1b8 0f00 	cmp.w	r8, #0
 800bfd0:	f040 80a0 	bne.w	800c114 <__svfscanf_r+0xb24>
 800bfd4:	4633      	mov	r3, r6
 800bfd6:	f019 0f80 	tst.w	r9, #128	; 0x80
 800bfda:	f853 6b04 	ldr.w	r6, [r3], #4
 800bfde:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe0:	f000 80a0 	beq.w	800c124 <__svfscanf_r+0xb34>
 800bfe4:	2e00      	cmp	r6, #0
 800bfe6:	f43f ac07 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800bfea:	2080      	movs	r0, #128	; 0x80
 800bfec:	f002 f95e 	bl	800e2ac <malloc>
 800bff0:	4605      	mov	r5, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f43f acdf 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	6030      	str	r0, [r6, #0]
 800bffc:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800c000:	889b      	ldrh	r3, [r3, #4]
 800c002:	4599      	cmp	r9, r3
 800c004:	d314      	bcc.n	800c030 <__svfscanf_r+0xa40>
 800c006:	f64f 72f6 	movw	r2, #65526	; 0xfff6
 800c00a:	4293      	cmp	r3, r2
 800c00c:	f63f acd3 	bhi.w	800b9b6 <__svfscanf_r+0x3c6>
 800c010:	3308      	adds	r3, #8
 800c012:	fa1f fa83 	uxth.w	sl, r3
 800c016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c018:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	f002 fdc7 	bl	800ebb0 <realloc>
 800c022:	2800      	cmp	r0, #0
 800c024:	f43f acc7 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800c028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02a:	6018      	str	r0, [r3, #0]
 800c02c:	f8a3 a004 	strh.w	sl, [r3, #4]
 800c030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f109 0201 	add.w	r2, r9, #1
 800c03a:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 800c03e:	46b2      	mov	sl, r6
 800c040:	80ca      	strh	r2, [r1, #6]
 800c042:	462e      	mov	r6, r5
 800c044:	f04f 0920 	mov.w	r9, #32
 800c048:	2200      	movs	r2, #0
 800c04a:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	49ad      	ldr	r1, [pc, #692]	; (800c308 <__svfscanf_r+0xd18>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	5ccb      	ldrb	r3, [r1, r3]
 800c056:	0718      	lsls	r0, r3, #28
 800c058:	d441      	bmi.n	800c0de <__svfscanf_r+0xaee>
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d03e      	beq.n	800c0de <__svfscanf_r+0xaee>
 800c060:	613a      	str	r2, [r7, #16]
 800c062:	f001 f9ff 	bl	800d464 <__locale_mb_cur_max>
 800c066:	693a      	ldr	r2, [r7, #16]
 800c068:	4290      	cmp	r0, r2
 800c06a:	f43f ab91 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800c06e:	6821      	ldr	r1, [r4, #0]
 800c070:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 800c074:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c078:	f80c 0002 	strb.w	r0, [ip, r2]
 800c07c:	1c53      	adds	r3, r2, #1
 800c07e:	6862      	ldr	r2, [r4, #4]
 800c080:	3a01      	subs	r2, #1
 800c082:	e9c4 1200 	strd	r1, r2, [r4]
 800c086:	6a3a      	ldr	r2, [r7, #32]
 800c088:	2a03      	cmp	r2, #3
 800c08a:	d103      	bne.n	800c094 <__svfscanf_r+0xaa4>
 800c08c:	f8db 2000 	ldr.w	r2, [fp]
 800c090:	2a04      	cmp	r2, #4
 800c092:	d006      	beq.n	800c0a2 <__svfscanf_r+0xab2>
 800c094:	2208      	movs	r2, #8
 800c096:	2100      	movs	r1, #0
 800c098:	4658      	mov	r0, fp
 800c09a:	623b      	str	r3, [r7, #32]
 800c09c:	f7fb fd57 	bl	8007b4e <memset>
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	f8cd b000 	str.w	fp, [sp]
 800c0a6:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800c0aa:	ee18 0a10 	vmov	r0, s16
 800c0ae:	4631      	mov	r1, r6
 800c0b0:	613b      	str	r3, [r7, #16]
 800c0b2:	f003 ff73 	bl	800ff9c <_mbrtowc_r>
 800c0b6:	1c42      	adds	r2, r0, #1
 800c0b8:	6238      	str	r0, [r7, #32]
 800c0ba:	f43f ab69 	beq.w	800b790 <__svfscanf_r+0x1a0>
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d133      	bne.n	800c12c <__svfscanf_r+0xb3c>
 800c0c4:	6030      	str	r0, [r6, #0]
 800c0c6:	6830      	ldr	r0, [r6, #0]
 800c0c8:	613b      	str	r3, [r7, #16]
 800c0ca:	f003 ff97 	bl	800fffc <iswspace>
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d049      	beq.n	800c16a <__svfscanf_r+0xb7a>
 800c0d6:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d13a      	bne.n	800c154 <__svfscanf_r+0xb64>
 800c0de:	f1b8 0f00 	cmp.w	r8, #0
 800c0e2:	d114      	bne.n	800c10e <__svfscanf_r+0xb1e>
 800c0e4:	f8c6 8000 	str.w	r8, [r6]
 800c0e8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ec:	d00c      	beq.n	800c108 <__svfscanf_r+0xb18>
 800c0ee:	1b71      	subs	r1, r6, r5
 800c0f0:	108b      	asrs	r3, r1, #2
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	4599      	cmp	r9, r3
 800c0f6:	d907      	bls.n	800c108 <__svfscanf_r+0xb18>
 800c0f8:	f8da 0000 	ldr.w	r0, [sl]
 800c0fc:	3104      	adds	r1, #4
 800c0fe:	f002 fd57 	bl	800ebb0 <realloc>
 800c102:	b108      	cbz	r0, 800c108 <__svfscanf_r+0xb18>
 800c104:	f8ca 0000 	str.w	r0, [sl]
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	3301      	adds	r3, #1
 800c10c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c10e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800c110:	f7ff ba95 	b.w	800b63e <__svfscanf_r+0x4e>
 800c114:	f04f 0900 	mov.w	r9, #0
 800c118:	627e      	str	r6, [r7, #36]	; 0x24
 800c11a:	464d      	mov	r5, r9
 800c11c:	46ca      	mov	sl, r9
 800c11e:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 800c122:	e791      	b.n	800c048 <__svfscanf_r+0xa58>
 800c124:	46c1      	mov	r9, r8
 800c126:	4645      	mov	r5, r8
 800c128:	46c2      	mov	sl, r8
 800c12a:	e78d      	b.n	800c048 <__svfscanf_r+0xa58>
 800c12c:	6a3a      	ldr	r2, [r7, #32]
 800c12e:	3202      	adds	r2, #2
 800c130:	d1c9      	bne.n	800c0c6 <__svfscanf_r+0xad6>
 800c132:	461a      	mov	r2, r3
 800c134:	6863      	ldr	r3, [r4, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dc89      	bgt.n	800c04e <__svfscanf_r+0xa5e>
 800c13a:	ee18 0a10 	vmov	r0, s16
 800c13e:	4621      	mov	r1, r4
 800c140:	613a      	str	r2, [r7, #16]
 800c142:	f000 fef7 	bl	800cf34 <__srefill_r>
 800c146:	693a      	ldr	r2, [r7, #16]
 800c148:	2800      	cmp	r0, #0
 800c14a:	d080      	beq.n	800c04e <__svfscanf_r+0xa5e>
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	f47f ab1f 	bne.w	800b790 <__svfscanf_r+0x1a0>
 800c152:	e7c4      	b.n	800c0de <__svfscanf_r+0xaee>
 800c154:	3b01      	subs	r3, #1
 800c156:	ee18 0a10 	vmov	r0, s16
 800c15a:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800c15e:	633b      	str	r3, [r7, #48]	; 0x30
 800c160:	4622      	mov	r2, r4
 800c162:	f000 ffff 	bl	800d164 <_ungetc_r>
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	e7b7      	b.n	800c0da <__svfscanf_r+0xaea>
 800c16a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c16c:	4419      	add	r1, r3
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c172:	2b03      	cmp	r3, #3
 800c174:	d103      	bne.n	800c17e <__svfscanf_r+0xb8e>
 800c176:	f8db 3000 	ldr.w	r3, [fp]
 800c17a:	2b04      	cmp	r3, #4
 800c17c:	d002      	beq.n	800c184 <__svfscanf_r+0xb94>
 800c17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c180:	3b01      	subs	r3, #1
 800c182:	633b      	str	r3, [r7, #48]	; 0x30
 800c184:	f1b8 0f00 	cmp.w	r8, #0
 800c188:	d1d4      	bne.n	800c134 <__svfscanf_r+0xb44>
 800c18a:	3604      	adds	r6, #4
 800c18c:	f1ba 0f00 	cmp.w	sl, #0
 800c190:	d015      	beq.n	800c1be <__svfscanf_r+0xbce>
 800c192:	1b73      	subs	r3, r6, r5
 800c194:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800c198:	d80f      	bhi.n	800c1ba <__svfscanf_r+0xbca>
 800c19a:	4628      	mov	r0, r5
 800c19c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	f002 fd05 	bl	800ebb0 <realloc>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f43f ac04 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f8ca 0000 	str.w	r0, [sl]
 800c1b4:	18c6      	adds	r6, r0, r3
 800c1b6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c1ba:	4642      	mov	r2, r8
 800c1bc:	e7ba      	b.n	800c134 <__svfscanf_r+0xb44>
 800c1be:	4652      	mov	r2, sl
 800c1c0:	e7b8      	b.n	800c134 <__svfscanf_r+0xb44>
 800c1c2:	f1b8 0f00 	cmp.w	r8, #0
 800c1c6:	d01a      	beq.n	800c1fe <__svfscanf_r+0xc0e>
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	494f      	ldr	r1, [pc, #316]	; (800c308 <__svfscanf_r+0xd18>)
 800c1cc:	781a      	ldrb	r2, [r3, #0]
 800c1ce:	5c8a      	ldrb	r2, [r1, r2]
 800c1d0:	0711      	lsls	r1, r2, #28
 800c1d2:	f53f ae60 	bmi.w	800be96 <__svfscanf_r+0x8a6>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	6862      	ldr	r2, [r4, #4]
 800c1da:	6023      	str	r3, [r4, #0]
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	3501      	adds	r5, #1
 800c1e0:	3a01      	subs	r2, #1
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	6062      	str	r2, [r4, #4]
 800c1e6:	f43f ae56 	beq.w	800be96 <__svfscanf_r+0x8a6>
 800c1ea:	2a00      	cmp	r2, #0
 800c1ec:	dcec      	bgt.n	800c1c8 <__svfscanf_r+0xbd8>
 800c1ee:	ee18 0a10 	vmov	r0, s16
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	f000 fe9e 	bl	800cf34 <__srefill_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d0e5      	beq.n	800c1c8 <__svfscanf_r+0xbd8>
 800c1fc:	e64b      	b.n	800be96 <__svfscanf_r+0x8a6>
 800c1fe:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800c202:	f856 5b04 	ldr.w	r5, [r6], #4
 800c206:	d07d      	beq.n	800c304 <__svfscanf_r+0xd14>
 800c208:	2d00      	cmp	r5, #0
 800c20a:	f43f aaf5 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800c20e:	2020      	movs	r0, #32
 800c210:	f002 f84c 	bl	800e2ac <malloc>
 800c214:	4681      	mov	r9, r0
 800c216:	2800      	cmp	r0, #0
 800c218:	f43f abcd 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800c21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c21e:	6028      	str	r0, [r5, #0]
 800c220:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800c224:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 800c228:	45c2      	cmp	sl, r8
 800c22a:	d315      	bcc.n	800c258 <__svfscanf_r+0xc68>
 800c22c:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800c230:	4598      	cmp	r8, r3
 800c232:	f63f abc0 	bhi.w	800b9b6 <__svfscanf_r+0x3c6>
 800c236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c238:	f108 0808 	add.w	r8, r8, #8
 800c23c:	fa1f f888 	uxth.w	r8, r8
 800c240:	6818      	ldr	r0, [r3, #0]
 800c242:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800c246:	f002 fcb3 	bl	800ebb0 <realloc>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f43f abb3 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	6018      	str	r0, [r3, #0]
 800c254:	f8a3 8004 	strh.w	r8, [r3, #4]
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f10a 0201 	add.w	r2, sl, #1
 800c262:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 800c266:	80ca      	strh	r2, [r1, #6]
 800c268:	46aa      	mov	sl, r5
 800c26a:	464d      	mov	r5, r9
 800c26c:	f04f 0920 	mov.w	r9, #32
 800c270:	46a8      	mov	r8, r5
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	4924      	ldr	r1, [pc, #144]	; (800c308 <__svfscanf_r+0xd18>)
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	5c8a      	ldrb	r2, [r1, r2]
 800c27a:	0712      	lsls	r2, r2, #28
 800c27c:	d42a      	bmi.n	800c2d4 <__svfscanf_r+0xce4>
 800c27e:	6862      	ldr	r2, [r4, #4]
 800c280:	3a01      	subs	r2, #1
 800c282:	6062      	str	r2, [r4, #4]
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	6022      	str	r2, [r4, #0]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	f805 3b01 	strb.w	r3, [r5], #1
 800c28e:	f1ba 0f00 	cmp.w	sl, #0
 800c292:	d011      	beq.n	800c2b8 <__svfscanf_r+0xcc8>
 800c294:	eba5 0b08 	sub.w	fp, r5, r8
 800c298:	45cb      	cmp	fp, r9
 800c29a:	d30d      	bcc.n	800c2b8 <__svfscanf_r+0xcc8>
 800c29c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	f002 fc84 	bl	800ebb0 <realloc>
 800c2a8:	4680      	mov	r8, r0
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	f43f ab83 	beq.w	800b9b6 <__svfscanf_r+0x3c6>
 800c2b0:	eb00 050b 	add.w	r5, r0, fp
 800c2b4:	f8ca 0000 	str.w	r0, [sl]
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c2be:	d009      	beq.n	800c2d4 <__svfscanf_r+0xce4>
 800c2c0:	6863      	ldr	r3, [r4, #4]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dcd5      	bgt.n	800c272 <__svfscanf_r+0xc82>
 800c2c6:	ee18 0a10 	vmov	r0, s16
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	f000 fe32 	bl	800cf34 <__srefill_r>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d0ce      	beq.n	800c272 <__svfscanf_r+0xc82>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	702b      	strb	r3, [r5, #0]
 800c2d8:	eba5 0508 	sub.w	r5, r5, r8
 800c2dc:	f1ba 0f00 	cmp.w	sl, #0
 800c2e0:	d009      	beq.n	800c2f6 <__svfscanf_r+0xd06>
 800c2e2:	1c69      	adds	r1, r5, #1
 800c2e4:	4589      	cmp	r9, r1
 800c2e6:	d906      	bls.n	800c2f6 <__svfscanf_r+0xd06>
 800c2e8:	f8da 0000 	ldr.w	r0, [sl]
 800c2ec:	f002 fc60 	bl	800ebb0 <realloc>
 800c2f0:	b108      	cbz	r0, 800c2f6 <__svfscanf_r+0xd06>
 800c2f2:	f8ca 0000 	str.w	r0, [sl]
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	442b      	add	r3, r5
 800c2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	3301      	adds	r3, #1
 800c300:	f7ff b99c 	b.w	800b63c <__svfscanf_r+0x4c>
 800c304:	46ca      	mov	sl, r9
 800c306:	e7b3      	b.n	800c270 <__svfscanf_r+0xc80>
 800c308:	08011ba1 	.word	0x08011ba1
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	3b01      	subs	r3, #1
 800c310:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c314:	bf81      	itttt	hi
 800c316:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800c318:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 800c31c:	eb03 0b0c 	addhi.w	fp, r3, ip
 800c320:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c324:	bf88      	it	hi
 800c326:	633b      	strhi	r3, [r7, #48]	; 0x30
 800c328:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 800c32c:	f8df 9418 	ldr.w	r9, [pc, #1048]	; 800c748 <__svfscanf_r+0x1158>
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
 800c332:	bf98      	it	ls
 800c334:	f04f 0b00 	movls.w	fp, #0
 800c338:	f04f 0a00 	mov.w	sl, #0
 800c33c:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 800c340:	6822      	ldr	r2, [r4, #0]
 800c342:	7813      	ldrb	r3, [r2, #0]
 800c344:	2b39      	cmp	r3, #57	; 0x39
 800c346:	d80f      	bhi.n	800c368 <__svfscanf_r+0xd78>
 800c348:	2b2a      	cmp	r3, #42	; 0x2a
 800c34a:	d91a      	bls.n	800c382 <__svfscanf_r+0xd92>
 800c34c:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c350:	290e      	cmp	r1, #14
 800c352:	d816      	bhi.n	800c382 <__svfscanf_r+0xd92>
 800c354:	e8df f001 	tbb	[pc, r1]
 800c358:	157f157f 	.word	0x157f157f
 800c35c:	70704215 	.word	0x70704215
 800c360:	70707070 	.word	0x70707070
 800c364:	7870      	.short	0x7870
 800c366:	78          	.byte	0x78
 800c367:	00          	.byte	0x00
 800c368:	2b66      	cmp	r3, #102	; 0x66
 800c36a:	d835      	bhi.n	800c3d8 <__svfscanf_r+0xde8>
 800c36c:	2b60      	cmp	r3, #96	; 0x60
 800c36e:	d803      	bhi.n	800c378 <__svfscanf_r+0xd88>
 800c370:	2b46      	cmp	r3, #70	; 0x46
 800c372:	d804      	bhi.n	800c37e <__svfscanf_r+0xd8e>
 800c374:	2b40      	cmp	r3, #64	; 0x40
 800c376:	d904      	bls.n	800c382 <__svfscanf_r+0xd92>
 800c378:	69f9      	ldr	r1, [r7, #28]
 800c37a:	290a      	cmp	r1, #10
 800c37c:	e069      	b.n	800c452 <__svfscanf_r+0xe62>
 800c37e:	2b58      	cmp	r3, #88	; 0x58
 800c380:	d06f      	beq.n	800c462 <__svfscanf_r+0xe72>
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	05d8      	lsls	r0, r3, #23
 800c386:	d512      	bpl.n	800c3ae <__svfscanf_r+0xdbe>
 800c388:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800c38c:	4598      	cmp	r8, r3
 800c38e:	d909      	bls.n	800c3a4 <__svfscanf_r+0xdb4>
 800c390:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 800c394:	ee18 0a10 	vmov	r0, s16
 800c398:	4622      	mov	r2, r4
 800c39a:	f000 fee3 	bl	800d164 <_ungetc_r>
 800c39e:	f108 39ff 	add.w	r9, r8, #4294967295
 800c3a2:	46c8      	mov	r8, r9
 800c3a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800c3a8:	4598      	cmp	r8, r3
 800c3aa:	f43f aa25 	beq.w	800b7f8 <__svfscanf_r+0x208>
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	f013 0210 	ands.w	r2, r3, #16
 800c3b4:	d175      	bne.n	800c4a2 <__svfscanf_r+0xeb2>
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	69bd      	ldr	r5, [r7, #24]
 800c3ba:	f888 2000 	strb.w	r2, [r8]
 800c3be:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800c3c2:	ee18 0a10 	vmov	r0, s16
 800c3c6:	47a8      	blx	r5
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	0699      	lsls	r1, r3, #26
 800c3cc:	f106 0904 	add.w	r9, r6, #4
 800c3d0:	d55e      	bpl.n	800c490 <__svfscanf_r+0xea0>
 800c3d2:	6833      	ldr	r3, [r6, #0]
 800c3d4:	6018      	str	r0, [r3, #0]
 800c3d6:	e060      	b.n	800c49a <__svfscanf_r+0xeaa>
 800c3d8:	2b78      	cmp	r3, #120	; 0x78
 800c3da:	e7d1      	b.n	800c380 <__svfscanf_r+0xd90>
 800c3dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3de:	050d      	lsls	r5, r1, #20
 800c3e0:	d50d      	bpl.n	800c3fe <__svfscanf_r+0xe0e>
 800c3e2:	69f9      	ldr	r1, [r7, #28]
 800c3e4:	b929      	cbnz	r1, 800c3f2 <__svfscanf_r+0xe02>
 800c3e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3e8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800c3ec:	6279      	str	r1, [r7, #36]	; 0x24
 800c3ee:	2108      	movs	r1, #8
 800c3f0:	61f9      	str	r1, [r7, #28]
 800c3f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c3f4:	0548      	lsls	r0, r1, #21
 800c3f6:	d505      	bpl.n	800c404 <__svfscanf_r+0xe14>
 800c3f8:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 800c3fc:	6279      	str	r1, [r7, #36]	; 0x24
 800c3fe:	f808 3b01 	strb.w	r3, [r8], #1
 800c402:	e00d      	b.n	800c420 <__svfscanf_r+0xe30>
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800c40a:	627b      	str	r3, [r7, #36]	; 0x24
 800c40c:	f1bb 0f00 	cmp.w	fp, #0
 800c410:	d004      	beq.n	800c41c <__svfscanf_r+0xe2c>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	3301      	adds	r3, #1
 800c416:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c41a:	633b      	str	r3, [r7, #48]	; 0x30
 800c41c:	f10a 0a01 	add.w	sl, sl, #1
 800c420:	6863      	ldr	r3, [r4, #4]
 800c422:	3b01      	subs	r3, #1
 800c424:	2b00      	cmp	r3, #0
 800c426:	6063      	str	r3, [r4, #4]
 800c428:	dd2a      	ble.n	800c480 <__svfscanf_r+0xe90>
 800c42a:	3201      	adds	r2, #1
 800c42c:	6022      	str	r2, [r4, #0]
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	3b01      	subs	r3, #1
 800c432:	633b      	str	r3, [r7, #48]	; 0x30
 800c434:	d184      	bne.n	800c340 <__svfscanf_r+0xd50>
 800c436:	e7a4      	b.n	800c382 <__svfscanf_r+0xd92>
 800c438:	69f9      	ldr	r1, [r7, #28]
 800c43a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800c43e:	61f9      	str	r1, [r7, #28]
 800c440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c442:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 800c446:	e7d9      	b.n	800c3fc <__svfscanf_r+0xe0c>
 800c448:	69f9      	ldr	r1, [r7, #28]
 800c44a:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800c44e:	61f9      	str	r1, [r7, #28]
 800c450:	2908      	cmp	r1, #8
 800c452:	dcf5      	bgt.n	800c440 <__svfscanf_r+0xe50>
 800c454:	e795      	b.n	800c382 <__svfscanf_r+0xd92>
 800c456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c458:	060d      	lsls	r5, r1, #24
 800c45a:	d592      	bpl.n	800c382 <__svfscanf_r+0xd92>
 800c45c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c460:	e7cc      	b.n	800c3fc <__svfscanf_r+0xe0c>
 800c462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c464:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 800c468:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c46c:	d189      	bne.n	800c382 <__svfscanf_r+0xd92>
 800c46e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c470:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 800c474:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 800c478:	6279      	str	r1, [r7, #36]	; 0x24
 800c47a:	2110      	movs	r1, #16
 800c47c:	61f9      	str	r1, [r7, #28]
 800c47e:	e7be      	b.n	800c3fe <__svfscanf_r+0xe0e>
 800c480:	ee18 0a10 	vmov	r0, s16
 800c484:	4621      	mov	r1, r4
 800c486:	f000 fd55 	bl	800cf34 <__srefill_r>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d0cf      	beq.n	800c42e <__svfscanf_r+0xe3e>
 800c48e:	e778      	b.n	800c382 <__svfscanf_r+0xd92>
 800c490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c492:	071a      	lsls	r2, r3, #28
 800c494:	d50c      	bpl.n	800c4b0 <__svfscanf_r+0xec0>
 800c496:	6833      	ldr	r3, [r6, #0]
 800c498:	7018      	strb	r0, [r3, #0]
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	3301      	adds	r3, #1
 800c49e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4a0:	464e      	mov	r6, r9
 800c4a2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800c4a6:	eba8 0803 	sub.w	r8, r8, r3
 800c4aa:	44d0      	add	r8, sl
 800c4ac:	f7ff bb60 	b.w	800bb70 <__svfscanf_r+0x580>
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	075b      	lsls	r3, r3, #29
 800c4b4:	d502      	bpl.n	800c4bc <__svfscanf_r+0xecc>
 800c4b6:	6833      	ldr	r3, [r6, #0]
 800c4b8:	8018      	strh	r0, [r3, #0]
 800c4ba:	e7ee      	b.n	800c49a <__svfscanf_r+0xeaa>
 800c4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4be:	f013 0201 	ands.w	r2, r3, #1
 800c4c2:	d186      	bne.n	800c3d2 <__svfscanf_r+0xde2>
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	079d      	lsls	r5, r3, #30
 800c4c8:	d583      	bpl.n	800c3d2 <__svfscanf_r+0xde2>
 800c4ca:	4b9e      	ldr	r3, [pc, #632]	; (800c744 <__svfscanf_r+0x1154>)
 800c4cc:	69b9      	ldr	r1, [r7, #24]
 800c4ce:	4299      	cmp	r1, r3
 800c4d0:	ee18 0a10 	vmov	r0, s16
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800c4da:	d105      	bne.n	800c4e8 <__svfscanf_r+0xef8>
 800c4dc:	f003 fd5c 	bl	800ff98 <_strtoull_r>
 800c4e0:	6833      	ldr	r3, [r6, #0]
 800c4e2:	e9c3 0100 	strd	r0, r1, [r3]
 800c4e6:	e7d8      	b.n	800c49a <__svfscanf_r+0xeaa>
 800c4e8:	f003 fcbc 	bl	800fe64 <_strtoll_r>
 800c4ec:	e7f8      	b.n	800c4e0 <__svfscanf_r+0xef0>
 800c4ee:	ee18 0a10 	vmov	r0, s16
 800c4f2:	f000 ffbd 	bl	800d470 <_localeconv_r>
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	6802      	ldr	r2, [r0, #0]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800c500:	f04f 0800 	mov.w	r8, #0
 800c504:	bf88      	it	hi
 800c506:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 800c508:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
 800c50c:	e9c7 8803 	strd	r8, r8, [r7, #12]
 800c510:	bf84      	itt	hi
 800c512:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 800c516:	f240 115d 	movwhi	r1, #349	; 0x15d
 800c51a:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 800c51e:	bf86      	itte	hi
 800c520:	181b      	addhi	r3, r3, r0
 800c522:	6339      	strhi	r1, [r7, #48]	; 0x30
 800c524:	2300      	movls	r3, #0
 800c526:	46c3      	mov	fp, r8
 800c528:	46c2      	mov	sl, r8
 800c52a:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800c52e:	6821      	ldr	r1, [r4, #0]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	7808      	ldrb	r0, [r1, #0]
 800c534:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
 800c538:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
 800c53c:	f200 8128 	bhi.w	800c790 <__svfscanf_r+0x11a0>
 800c540:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800c544:	01260091 	.word	0x01260091
 800c548:	01260091 	.word	0x01260091
 800c54c:	004f0126 	.word	0x004f0126
 800c550:	006d006d 	.word	0x006d006d
 800c554:	006d006d 	.word	0x006d006d
 800c558:	006d006d 	.word	0x006d006d
 800c55c:	006d006d 	.word	0x006d006d
 800c560:	0126006d 	.word	0x0126006d
 800c564:	01260126 	.word	0x01260126
 800c568:	01260126 	.word	0x01260126
 800c56c:	01260126 	.word	0x01260126
 800c570:	007500b5 	.word	0x007500b5
 800c574:	00750075 	.word	0x00750075
 800c578:	00ef0123 	.word	0x00ef0123
 800c57c:	01260126 	.word	0x01260126
 800c580:	012600d9 	.word	0x012600d9
 800c584:	01260126 	.word	0x01260126
 800c588:	00960126 	.word	0x00960126
 800c58c:	010a0126 	.word	0x010a0126
 800c590:	01260126 	.word	0x01260126
 800c594:	00fa0126 	.word	0x00fa0126
 800c598:	01260126 	.word	0x01260126
 800c59c:	007b0126 	.word	0x007b0126
 800c5a0:	01260104 	.word	0x01260104
 800c5a4:	01260126 	.word	0x01260126
 800c5a8:	01260126 	.word	0x01260126
 800c5ac:	01260126 	.word	0x01260126
 800c5b0:	007500b5 	.word	0x007500b5
 800c5b4:	00750075 	.word	0x00750075
 800c5b8:	00ef0123 	.word	0x00ef0123
 800c5bc:	01260126 	.word	0x01260126
 800c5c0:	012600d9 	.word	0x012600d9
 800c5c4:	01260126 	.word	0x01260126
 800c5c8:	00960126 	.word	0x00960126
 800c5cc:	010a0126 	.word	0x010a0126
 800c5d0:	01260126 	.word	0x01260126
 800c5d4:	00fa0126 	.word	0x00fa0126
 800c5d8:	01260126 	.word	0x01260126
 800c5dc:	007b0126 	.word	0x007b0126
 800c5e0:	0104      	.short	0x0104
 800c5e2:	05e9      	lsls	r1, r5, #23
 800c5e4:	d51b      	bpl.n	800c61e <__svfscanf_r+0x102e>
 800c5e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c5ea:	f10a 0a01 	add.w	sl, sl, #1
 800c5ee:	b11b      	cbz	r3, 800c5f8 <__svfscanf_r+0x1008>
 800c5f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5f2:	3001      	adds	r0, #1
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	6338      	str	r0, [r7, #48]	; 0x30
 800c5f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5fc:	3001      	adds	r0, #1
 800c5fe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c600:	6860      	ldr	r0, [r4, #4]
 800c602:	3801      	subs	r0, #1
 800c604:	3901      	subs	r1, #1
 800c606:	2800      	cmp	r0, #0
 800c608:	6339      	str	r1, [r7, #48]	; 0x30
 800c60a:	6060      	str	r0, [r4, #4]
 800c60c:	f340 80d1 	ble.w	800c7b2 <__svfscanf_r+0x11c2>
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	3101      	adds	r1, #1
 800c614:	6021      	str	r1, [r4, #0]
 800c616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c618:	2900      	cmp	r1, #0
 800c61a:	d188      	bne.n	800c52e <__svfscanf_r+0xf3e>
 800c61c:	e054      	b.n	800c6c8 <__svfscanf_r+0x10d8>
 800c61e:	eb1b 0f08 	cmn.w	fp, r8
 800c622:	d151      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c624:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800c628:	f809 0b01 	strb.w	r0, [r9], #1
 800c62c:	e7e4      	b.n	800c5f8 <__svfscanf_r+0x1008>
 800c62e:	0529      	lsls	r1, r5, #20
 800c630:	d54a      	bpl.n	800c6c8 <__svfscanf_r+0x10d8>
 800c632:	eb1b 0c08 	adds.w	ip, fp, r8
 800c636:	d03f      	beq.n	800c6b8 <__svfscanf_r+0x10c8>
 800c638:	e046      	b.n	800c6c8 <__svfscanf_r+0x10d8>
 800c63a:	f405 6c18 	and.w	ip, r5, #2432	; 0x980
 800c63e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800c642:	d141      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c644:	f1ba 0f01 	cmp.w	sl, #1
 800c648:	d13e      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c64a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c64c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800c650:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800c654:	3901      	subs	r1, #1
 800c656:	f809 cb01 	strb.w	ip, [r9], #1
 800c65a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 800c65e:	6339      	str	r1, [r7, #48]	; 0x30
 800c660:	f04f 0a00 	mov.w	sl, #0
 800c664:	e7e0      	b.n	800c628 <__svfscanf_r+0x1038>
 800c666:	0629      	lsls	r1, r5, #24
 800c668:	d52e      	bpl.n	800c6c8 <__svfscanf_r+0x10d8>
 800c66a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800c66e:	e7db      	b.n	800c628 <__svfscanf_r+0x1038>
 800c670:	f1bb 0f00 	cmp.w	fp, #0
 800c674:	d10c      	bne.n	800c690 <__svfscanf_r+0x10a0>
 800c676:	f1ba 0f00 	cmp.w	sl, #0
 800c67a:	d10d      	bne.n	800c698 <__svfscanf_r+0x10a8>
 800c67c:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800c680:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800c684:	d108      	bne.n	800c698 <__svfscanf_r+0x10a8>
 800c686:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800c68a:	f04f 0b01 	mov.w	fp, #1
 800c68e:	e7cb      	b.n	800c628 <__svfscanf_r+0x1038>
 800c690:	f1bb 0f02 	cmp.w	fp, #2
 800c694:	f000 8087 	beq.w	800c7a6 <__svfscanf_r+0x11b6>
 800c698:	f1b8 0f01 	cmp.w	r8, #1
 800c69c:	d002      	beq.n	800c6a4 <__svfscanf_r+0x10b4>
 800c69e:	f1b8 0f04 	cmp.w	r8, #4
 800c6a2:	d111      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c6a4:	f108 0801 	add.w	r8, r8, #1
 800c6a8:	fa5f f888 	uxtb.w	r8, r8
 800c6ac:	e7bc      	b.n	800c628 <__svfscanf_r+0x1038>
 800c6ae:	0529      	lsls	r1, r5, #20
 800c6b0:	d507      	bpl.n	800c6c2 <__svfscanf_r+0x10d2>
 800c6b2:	eb1b 0c08 	adds.w	ip, fp, r8
 800c6b6:	d104      	bne.n	800c6c2 <__svfscanf_r+0x10d2>
 800c6b8:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 800c6bc:	46e0      	mov	r8, ip
 800c6be:	46e3      	mov	fp, ip
 800c6c0:	e7b2      	b.n	800c628 <__svfscanf_r+0x1038>
 800c6c2:	f1bb 0f01 	cmp.w	fp, #1
 800c6c6:	d071      	beq.n	800c7ac <__svfscanf_r+0x11bc>
 800c6c8:	f1ba 0f00 	cmp.w	sl, #0
 800c6cc:	d001      	beq.n	800c6d2 <__svfscanf_r+0x10e2>
 800c6ce:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800c6d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c6d6:	f1bb 0f01 	cmp.w	fp, #1
 800c6da:	d877      	bhi.n	800c7cc <__svfscanf_r+0x11dc>
 800c6dc:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800c6e0:	45a9      	cmp	r9, r5
 800c6e2:	f67f a889 	bls.w	800b7f8 <__svfscanf_r+0x208>
 800c6e6:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800c6ea:	ee18 0a10 	vmov	r0, s16
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	f000 fd38 	bl	800d164 <_ungetc_r>
 800c6f4:	e7f4      	b.n	800c6e0 <__svfscanf_r+0x10f0>
 800c6f6:	f1b8 0f00 	cmp.w	r8, #0
 800c6fa:	d10c      	bne.n	800c716 <__svfscanf_r+0x1126>
 800c6fc:	f1ba 0f00 	cmp.w	sl, #0
 800c700:	d1e5      	bne.n	800c6ce <__svfscanf_r+0x10de>
 800c702:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800c706:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800c70a:	d1e2      	bne.n	800c6d2 <__svfscanf_r+0x10e2>
 800c70c:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800c710:	f04f 0801 	mov.w	r8, #1
 800c714:	e788      	b.n	800c628 <__svfscanf_r+0x1038>
 800c716:	f1b8 0f03 	cmp.w	r8, #3
 800c71a:	d0c3      	beq.n	800c6a4 <__svfscanf_r+0x10b4>
 800c71c:	f1b8 0f05 	cmp.w	r8, #5
 800c720:	e7bf      	b.n	800c6a2 <__svfscanf_r+0x10b2>
 800c722:	0529      	lsls	r1, r5, #20
 800c724:	d502      	bpl.n	800c72c <__svfscanf_r+0x113c>
 800c726:	eb1b 0c08 	adds.w	ip, fp, r8
 800c72a:	d0c5      	beq.n	800c6b8 <__svfscanf_r+0x10c8>
 800c72c:	f1b8 0f02 	cmp.w	r8, #2
 800c730:	d1ca      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c732:	f04f 0803 	mov.w	r8, #3
 800c736:	e777      	b.n	800c628 <__svfscanf_r+0x1038>
 800c738:	f1b8 0f06 	cmp.w	r8, #6
 800c73c:	d1c4      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c73e:	f04f 0807 	mov.w	r8, #7
 800c742:	e771      	b.n	800c628 <__svfscanf_r+0x1038>
 800c744:	0800fd21 	.word	0x0800fd21
 800c748:	0801194e 	.word	0x0801194e
 800c74c:	f1b8 0f07 	cmp.w	r8, #7
 800c750:	d1ba      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c752:	f04f 0808 	mov.w	r8, #8
 800c756:	e767      	b.n	800c628 <__svfscanf_r+0x1038>
 800c758:	0529      	lsls	r1, r5, #20
 800c75a:	d5b5      	bpl.n	800c6c8 <__svfscanf_r+0x10d8>
 800c75c:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 800c760:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800c764:	d004      	beq.n	800c770 <__svfscanf_r+0x1180>
 800c766:	0569      	lsls	r1, r5, #21
 800c768:	d5ae      	bpl.n	800c6c8 <__svfscanf_r+0x10d8>
 800c76a:	f1ba 0f00 	cmp.w	sl, #0
 800c76e:	d0b0      	beq.n	800c6d2 <__svfscanf_r+0x10e2>
 800c770:	05a9      	lsls	r1, r5, #22
 800c772:	bf58      	it	pl
 800c774:	6a79      	ldrpl	r1, [r7, #36]	; 0x24
 800c776:	f425 6578 	bic.w	r5, r5, #3968	; 0xf80
 800c77a:	bf5c      	itt	pl
 800c77c:	ebaa 0101 	subpl.w	r1, sl, r1
 800c780:	e9c7 9103 	strdpl	r9, r1, [r7, #12]
 800c784:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 800c788:	e76a      	b.n	800c660 <__svfscanf_r+0x1070>
 800c78a:	0529      	lsls	r1, r5, #20
 800c78c:	d5e6      	bpl.n	800c75c <__svfscanf_r+0x116c>
 800c78e:	e750      	b.n	800c632 <__svfscanf_r+0x1042>
 800c790:	f892 c000 	ldrb.w	ip, [r2]
 800c794:	4584      	cmp	ip, r0
 800c796:	d197      	bne.n	800c6c8 <__svfscanf_r+0x10d8>
 800c798:	05a9      	lsls	r1, r5, #22
 800c79a:	d595      	bpl.n	800c6c8 <__svfscanf_r+0x10d8>
 800c79c:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 800c7a0:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800c7a4:	e740      	b.n	800c628 <__svfscanf_r+0x1038>
 800c7a6:	f04f 0b03 	mov.w	fp, #3
 800c7aa:	e73d      	b.n	800c628 <__svfscanf_r+0x1038>
 800c7ac:	f04f 0b02 	mov.w	fp, #2
 800c7b0:	e73a      	b.n	800c628 <__svfscanf_r+0x1038>
 800c7b2:	ee18 0a10 	vmov	r0, s16
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	e9c7 2301 	strd	r2, r3, [r7, #4]
 800c7bc:	f000 fbba 	bl	800cf34 <__srefill_r>
 800c7c0:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f43f af26 	beq.w	800c616 <__svfscanf_r+0x1026>
 800c7ca:	e77d      	b.n	800c6c8 <__svfscanf_r+0x10d8>
 800c7cc:	f108 33ff 	add.w	r3, r8, #4294967295
 800c7d0:	2b06      	cmp	r3, #6
 800c7d2:	d829      	bhi.n	800c828 <__svfscanf_r+0x1238>
 800c7d4:	f1b8 0f02 	cmp.w	r8, #2
 800c7d8:	d837      	bhi.n	800c84a <__svfscanf_r+0x125a>
 800c7da:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800c7de:	45a9      	cmp	r9, r5
 800c7e0:	f67f a80a 	bls.w	800b7f8 <__svfscanf_r+0x208>
 800c7e4:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800c7e8:	ee18 0a10 	vmov	r0, s16
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	f000 fcb9 	bl	800d164 <_ungetc_r>
 800c7f2:	e7f4      	b.n	800c7de <__svfscanf_r+0x11ee>
 800c7f4:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800c7f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c7fa:	ee18 0a10 	vmov	r0, s16
 800c7fe:	4622      	mov	r2, r4
 800c800:	f000 fcb0 	bl	800d164 <_ungetc_r>
 800c804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c806:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c80a:	fa5f fb8b 	uxtb.w	fp, fp
 800c80e:	f1bb 0f02 	cmp.w	fp, #2
 800c812:	d1ef      	bne.n	800c7f4 <__svfscanf_r+0x1204>
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c816:	f1a8 0803 	sub.w	r8, r8, #3
 800c81a:	fa5f f888 	uxtb.w	r8, r8
 800c81e:	eba3 0308 	sub.w	r3, r3, r8
 800c822:	eba9 0908 	sub.w	r9, r9, r8
 800c826:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c828:	05ea      	lsls	r2, r5, #23
 800c82a:	d530      	bpl.n	800c88e <__svfscanf_r+0x129e>
 800c82c:	056b      	lsls	r3, r5, #21
 800c82e:	d50f      	bpl.n	800c850 <__svfscanf_r+0x1260>
 800c830:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800c834:	45a9      	cmp	r9, r5
 800c836:	f67e afdf 	bls.w	800b7f8 <__svfscanf_r+0x208>
 800c83a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800c83e:	ee18 0a10 	vmov	r0, s16
 800c842:	4622      	mov	r2, r4
 800c844:	f000 fc8e 	bl	800d164 <_ungetc_r>
 800c848:	e7f4      	b.n	800c834 <__svfscanf_r+0x1244>
 800c84a:	46c3      	mov	fp, r8
 800c84c:	464b      	mov	r3, r9
 800c84e:	e7da      	b.n	800c806 <__svfscanf_r+0x1216>
 800c850:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 800c854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c856:	2965      	cmp	r1, #101	; 0x65
 800c858:	f109 38ff 	add.w	r8, r9, #4294967295
 800c85c:	f103 3bff 	add.w	fp, r3, #4294967295
 800c860:	d00d      	beq.n	800c87e <__svfscanf_r+0x128e>
 800c862:	2945      	cmp	r1, #69	; 0x45
 800c864:	d00b      	beq.n	800c87e <__svfscanf_r+0x128e>
 800c866:	ee18 0a10 	vmov	r0, s16
 800c86a:	4622      	mov	r2, r4
 800c86c:	f000 fc7a 	bl	800d164 <_ungetc_r>
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 800c876:	f1a9 0802 	sub.w	r8, r9, #2
 800c87a:	f1a3 0b02 	sub.w	fp, r3, #2
 800c87e:	ee18 0a10 	vmov	r0, s16
 800c882:	4622      	mov	r2, r4
 800c884:	f000 fc6e 	bl	800d164 <_ungetc_r>
 800c888:	46c1      	mov	r9, r8
 800c88a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800c88e:	f015 0210 	ands.w	r2, r5, #16
 800c892:	f47e aed4 	bne.w	800b63e <__svfscanf_r+0x4e>
 800c896:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 800c89a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c89e:	f889 2000 	strb.w	r2, [r9]
 800c8a2:	d11a      	bne.n	800c8da <__svfscanf_r+0x12ea>
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	4553      	cmp	r3, sl
 800c8a8:	eba3 020a 	sub.w	r2, r3, sl
 800c8ac:	d123      	bne.n	800c8f6 <__svfscanf_r+0x1306>
 800c8ae:	ee18 0a10 	vmov	r0, s16
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800c8b8:	f003 f936 	bl	800fb28 <_strtod_r>
 800c8bc:	07e8      	lsls	r0, r5, #31
 800c8be:	ec59 8b10 	vmov	r8, r9, d0
 800c8c2:	f106 0a04 	add.w	sl, r6, #4
 800c8c6:	d521      	bpl.n	800c90c <__svfscanf_r+0x131c>
 800c8c8:	6833      	ldr	r3, [r6, #0]
 800c8ca:	ed83 0b00 	vstr	d0, [r3]
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d4:	4656      	mov	r6, sl
 800c8d6:	f7fe beb2 	b.w	800b63e <__svfscanf_r+0x4e>
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d0e6      	beq.n	800c8ae <__svfscanf_r+0x12be>
 800c8e0:	68f9      	ldr	r1, [r7, #12]
 800c8e2:	230a      	movs	r3, #10
 800c8e4:	ee18 0a10 	vmov	r0, s16
 800c8e8:	3101      	adds	r1, #1
 800c8ea:	f003 f9a5 	bl	800fc38 <_strtol_r>
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800c8f4:	1ac2      	subs	r2, r0, r3
 800c8f6:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800c8fa:	4599      	cmp	r9, r3
 800c8fc:	bf28      	it	cs
 800c8fe:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 800c902:	491b      	ldr	r1, [pc, #108]	; (800c970 <__svfscanf_r+0x1380>)
 800c904:	4648      	mov	r0, r9
 800c906:	f000 fbd3 	bl	800d0b0 <sprintf>
 800c90a:	e7d0      	b.n	800c8ae <__svfscanf_r+0x12be>
 800c90c:	07a9      	lsls	r1, r5, #30
 800c90e:	6836      	ldr	r6, [r6, #0]
 800c910:	d502      	bpl.n	800c918 <__svfscanf_r+0x1328>
 800c912:	ed86 0b00 	vstr	d0, [r6]
 800c916:	e7da      	b.n	800c8ce <__svfscanf_r+0x12de>
 800c918:	ee10 2a10 	vmov	r2, s0
 800c91c:	ee10 0a10 	vmov	r0, s0
 800c920:	464b      	mov	r3, r9
 800c922:	4649      	mov	r1, r9
 800c924:	f7f4 f912 	bl	8000b4c <__aeabi_dcmpun>
 800c928:	b128      	cbz	r0, 800c936 <__svfscanf_r+0x1346>
 800c92a:	4812      	ldr	r0, [pc, #72]	; (800c974 <__svfscanf_r+0x1384>)
 800c92c:	f000 fde2 	bl	800d4f4 <nanf>
 800c930:	ed86 0a00 	vstr	s0, [r6]
 800c934:	e7cb      	b.n	800c8ce <__svfscanf_r+0x12de>
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f4 f965 	bl	8000c08 <__aeabi_d2f>
 800c93e:	6030      	str	r0, [r6, #0]
 800c940:	e7c5      	b.n	800c8ce <__svfscanf_r+0x12de>
 800c942:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	f001 fcb8 	bl	800e2bc <free>
 800c94c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c950:	3401      	adds	r4, #1
 800c952:	601e      	str	r6, [r3, #0]
 800c954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c956:	681d      	ldr	r5, [r3, #0]
 800c958:	88db      	ldrh	r3, [r3, #6]
 800c95a:	42a3      	cmp	r3, r4
 800c95c:	dcf1      	bgt.n	800c942 <__svfscanf_r+0x1352>
 800c95e:	f7fe bf5a 	b.w	800b816 <__svfscanf_r+0x226>
 800c962:	2400      	movs	r4, #0
 800c964:	4626      	mov	r6, r4
 800c966:	e7f5      	b.n	800c954 <__svfscanf_r+0x1364>
 800c968:	f001 fca8 	bl	800e2bc <free>
 800c96c:	f7fe bf58 	b.w	800b820 <__svfscanf_r+0x230>
 800c970:	08011948 	.word	0x08011948
 800c974:	08011cdc 	.word	0x08011cdc

0800c978 <_vfscanf_r>:
 800c978:	b530      	push	{r4, r5, lr}
 800c97a:	4604      	mov	r4, r0
 800c97c:	b085      	sub	sp, #20
 800c97e:	b148      	cbz	r0, 800c994 <_vfscanf_r+0x1c>
 800c980:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800c982:	b93d      	cbnz	r5, 800c994 <_vfscanf_r+0x1c>
 800c984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c988:	9101      	str	r1, [sp, #4]
 800c98a:	f7fa ffc1 	bl	8007910 <__sinit>
 800c98e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	4620      	mov	r0, r4
 800c996:	b005      	add	sp, #20
 800c998:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c99c:	f7fe be28 	b.w	800b5f0 <__svfscanf_r>

0800c9a0 <_fclose_r>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	b911      	cbnz	r1, 800c9ae <_fclose_r+0xe>
 800c9a8:	2500      	movs	r5, #0
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
 800c9ae:	b118      	cbz	r0, 800c9b8 <_fclose_r+0x18>
 800c9b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c9b2:	b90b      	cbnz	r3, 800c9b8 <_fclose_r+0x18>
 800c9b4:	f7fa ffac 	bl	8007910 <__sinit>
 800c9b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ba:	07d8      	lsls	r0, r3, #31
 800c9bc:	d405      	bmi.n	800c9ca <_fclose_r+0x2a>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	0599      	lsls	r1, r3, #22
 800c9c2:	d402      	bmi.n	800c9ca <_fclose_r+0x2a>
 800c9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9c6:	f7fb f93d 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800c9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ce:	b93b      	cbnz	r3, 800c9e0 <_fclose_r+0x40>
 800c9d0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c9d2:	f015 0501 	ands.w	r5, r5, #1
 800c9d6:	d1e7      	bne.n	800c9a8 <_fclose_r+0x8>
 800c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9da:	f7fb f934 	bl	8007c46 <__retarget_lock_release_recursive>
 800c9de:	e7e4      	b.n	800c9aa <_fclose_r+0xa>
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f000 f834 	bl	800ca50 <__sflush_r>
 800c9e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	b133      	cbz	r3, 800c9fc <_fclose_r+0x5c>
 800c9ee:	69e1      	ldr	r1, [r4, #28]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	4798      	blx	r3
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	bfb8      	it	lt
 800c9f8:	f04f 35ff 	movlt.w	r5, #4294967295
 800c9fc:	89a3      	ldrh	r3, [r4, #12]
 800c9fe:	061a      	lsls	r2, r3, #24
 800ca00:	d503      	bpl.n	800ca0a <_fclose_r+0x6a>
 800ca02:	6921      	ldr	r1, [r4, #16]
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7fb f983 	bl	8007d10 <_free_r>
 800ca0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ca0c:	b141      	cbz	r1, 800ca20 <_fclose_r+0x80>
 800ca0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ca12:	4299      	cmp	r1, r3
 800ca14:	d002      	beq.n	800ca1c <_fclose_r+0x7c>
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7fb f97a 	bl	8007d10 <_free_r>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ca20:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ca22:	b121      	cbz	r1, 800ca2e <_fclose_r+0x8e>
 800ca24:	4630      	mov	r0, r6
 800ca26:	f7fb f973 	bl	8007d10 <_free_r>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	6463      	str	r3, [r4, #68]	; 0x44
 800ca2e:	f7fa ff63 	bl	80078f8 <__sfp_lock_acquire>
 800ca32:	2300      	movs	r3, #0
 800ca34:	81a3      	strh	r3, [r4, #12]
 800ca36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca38:	07db      	lsls	r3, r3, #31
 800ca3a:	d402      	bmi.n	800ca42 <_fclose_r+0xa2>
 800ca3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca3e:	f7fb f902 	bl	8007c46 <__retarget_lock_release_recursive>
 800ca42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca44:	f7fb f8fd 	bl	8007c42 <__retarget_lock_close_recursive>
 800ca48:	f7fa ff5c 	bl	8007904 <__sfp_lock_release>
 800ca4c:	e7ad      	b.n	800c9aa <_fclose_r+0xa>
	...

0800ca50 <__sflush_r>:
 800ca50:	898b      	ldrh	r3, [r1, #12]
 800ca52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	0718      	lsls	r0, r3, #28
 800ca5e:	460c      	mov	r4, r1
 800ca60:	d45f      	bmi.n	800cb22 <__sflush_r+0xd2>
 800ca62:	684b      	ldr	r3, [r1, #4]
 800ca64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	818a      	strh	r2, [r1, #12]
 800ca6c:	dc05      	bgt.n	800ca7a <__sflush_r+0x2a>
 800ca6e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	dc02      	bgt.n	800ca7a <__sflush_r+0x2a>
 800ca74:	2000      	movs	r0, #0
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca7c:	2e00      	cmp	r6, #0
 800ca7e:	d0f9      	beq.n	800ca74 <__sflush_r+0x24>
 800ca80:	2300      	movs	r3, #0
 800ca82:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca86:	682f      	ldr	r7, [r5, #0]
 800ca88:	69e1      	ldr	r1, [r4, #28]
 800ca8a:	602b      	str	r3, [r5, #0]
 800ca8c:	d036      	beq.n	800cafc <__sflush_r+0xac>
 800ca8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	075a      	lsls	r2, r3, #29
 800ca94:	d505      	bpl.n	800caa2 <__sflush_r+0x52>
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	1ac0      	subs	r0, r0, r3
 800ca9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca9c:	b10b      	cbz	r3, 800caa2 <__sflush_r+0x52>
 800ca9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800caa0:	1ac0      	subs	r0, r0, r3
 800caa2:	2300      	movs	r3, #0
 800caa4:	4602      	mov	r2, r0
 800caa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa8:	69e1      	ldr	r1, [r4, #28]
 800caaa:	4628      	mov	r0, r5
 800caac:	47b0      	blx	r6
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	d106      	bne.n	800cac2 <__sflush_r+0x72>
 800cab4:	6829      	ldr	r1, [r5, #0]
 800cab6:	291d      	cmp	r1, #29
 800cab8:	d82f      	bhi.n	800cb1a <__sflush_r+0xca>
 800caba:	4a2b      	ldr	r2, [pc, #172]	; (800cb68 <__sflush_r+0x118>)
 800cabc:	410a      	asrs	r2, r1
 800cabe:	07d6      	lsls	r6, r2, #31
 800cac0:	d42b      	bmi.n	800cb1a <__sflush_r+0xca>
 800cac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cac6:	b21b      	sxth	r3, r3
 800cac8:	2200      	movs	r2, #0
 800caca:	6062      	str	r2, [r4, #4]
 800cacc:	04d9      	lsls	r1, r3, #19
 800cace:	6922      	ldr	r2, [r4, #16]
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	6022      	str	r2, [r4, #0]
 800cad4:	d504      	bpl.n	800cae0 <__sflush_r+0x90>
 800cad6:	1c42      	adds	r2, r0, #1
 800cad8:	d101      	bne.n	800cade <__sflush_r+0x8e>
 800cada:	682b      	ldr	r3, [r5, #0]
 800cadc:	b903      	cbnz	r3, 800cae0 <__sflush_r+0x90>
 800cade:	6520      	str	r0, [r4, #80]	; 0x50
 800cae0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cae2:	602f      	str	r7, [r5, #0]
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d0c5      	beq.n	800ca74 <__sflush_r+0x24>
 800cae8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800caec:	4299      	cmp	r1, r3
 800caee:	d002      	beq.n	800caf6 <__sflush_r+0xa6>
 800caf0:	4628      	mov	r0, r5
 800caf2:	f7fb f90d 	bl	8007d10 <_free_r>
 800caf6:	2000      	movs	r0, #0
 800caf8:	6320      	str	r0, [r4, #48]	; 0x30
 800cafa:	e7bc      	b.n	800ca76 <__sflush_r+0x26>
 800cafc:	2301      	movs	r3, #1
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b0      	blx	r6
 800cb02:	1c41      	adds	r1, r0, #1
 800cb04:	d1c4      	bne.n	800ca90 <__sflush_r+0x40>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0c1      	beq.n	800ca90 <__sflush_r+0x40>
 800cb0c:	2b1d      	cmp	r3, #29
 800cb0e:	d001      	beq.n	800cb14 <__sflush_r+0xc4>
 800cb10:	2b16      	cmp	r3, #22
 800cb12:	d101      	bne.n	800cb18 <__sflush_r+0xc8>
 800cb14:	602f      	str	r7, [r5, #0]
 800cb16:	e7ad      	b.n	800ca74 <__sflush_r+0x24>
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	e7a9      	b.n	800ca76 <__sflush_r+0x26>
 800cb22:	690f      	ldr	r7, [r1, #16]
 800cb24:	2f00      	cmp	r7, #0
 800cb26:	d0a5      	beq.n	800ca74 <__sflush_r+0x24>
 800cb28:	079b      	lsls	r3, r3, #30
 800cb2a:	680e      	ldr	r6, [r1, #0]
 800cb2c:	bf08      	it	eq
 800cb2e:	694b      	ldreq	r3, [r1, #20]
 800cb30:	600f      	str	r7, [r1, #0]
 800cb32:	bf18      	it	ne
 800cb34:	2300      	movne	r3, #0
 800cb36:	eba6 0807 	sub.w	r8, r6, r7
 800cb3a:	608b      	str	r3, [r1, #8]
 800cb3c:	f1b8 0f00 	cmp.w	r8, #0
 800cb40:	dd98      	ble.n	800ca74 <__sflush_r+0x24>
 800cb42:	69e1      	ldr	r1, [r4, #28]
 800cb44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cb46:	4643      	mov	r3, r8
 800cb48:	463a      	mov	r2, r7
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b0      	blx	r6
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	dc06      	bgt.n	800cb60 <__sflush_r+0x110>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5e:	e78a      	b.n	800ca76 <__sflush_r+0x26>
 800cb60:	4407      	add	r7, r0
 800cb62:	eba8 0800 	sub.w	r8, r8, r0
 800cb66:	e7e9      	b.n	800cb3c <__sflush_r+0xec>
 800cb68:	dfbffffe 	.word	0xdfbffffe

0800cb6c <_fflush_r>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	4605      	mov	r5, r0
 800cb72:	b118      	cbz	r0, 800cb7c <_fflush_r+0x10>
 800cb74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cb76:	b90b      	cbnz	r3, 800cb7c <_fflush_r+0x10>
 800cb78:	f7fa feca 	bl	8007910 <__sinit>
 800cb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb80:	b1bb      	cbz	r3, 800cbb2 <_fflush_r+0x46>
 800cb82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb84:	07d0      	lsls	r0, r2, #31
 800cb86:	d404      	bmi.n	800cb92 <_fflush_r+0x26>
 800cb88:	0599      	lsls	r1, r3, #22
 800cb8a:	d402      	bmi.n	800cb92 <_fflush_r+0x26>
 800cb8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb8e:	f7fb f859 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800cb92:	4628      	mov	r0, r5
 800cb94:	4621      	mov	r1, r4
 800cb96:	f7ff ff5b 	bl	800ca50 <__sflush_r>
 800cb9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb9c:	07da      	lsls	r2, r3, #31
 800cb9e:	4605      	mov	r5, r0
 800cba0:	d405      	bmi.n	800cbae <_fflush_r+0x42>
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	059b      	lsls	r3, r3, #22
 800cba6:	d402      	bmi.n	800cbae <_fflush_r+0x42>
 800cba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbaa:	f7fb f84c 	bl	8007c46 <__retarget_lock_release_recursive>
 800cbae:	4628      	mov	r0, r5
 800cbb0:	bd38      	pop	{r3, r4, r5, pc}
 800cbb2:	461d      	mov	r5, r3
 800cbb4:	e7fb      	b.n	800cbae <_fflush_r+0x42>

0800cbb6 <_fread_r>:
 800cbb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	461e      	mov	r6, r3
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	4373      	muls	r3, r6
 800cbc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cbc2:	4681      	mov	r9, r0
 800cbc4:	4688      	mov	r8, r1
 800cbc6:	4692      	mov	sl, r2
 800cbc8:	469b      	mov	fp, r3
 800cbca:	d059      	beq.n	800cc80 <_fread_r+0xca>
 800cbcc:	b118      	cbz	r0, 800cbd6 <_fread_r+0x20>
 800cbce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbd0:	b90b      	cbnz	r3, 800cbd6 <_fread_r+0x20>
 800cbd2:	f7fa fe9d 	bl	8007910 <__sinit>
 800cbd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbd8:	07db      	lsls	r3, r3, #31
 800cbda:	d405      	bmi.n	800cbe8 <_fread_r+0x32>
 800cbdc:	89a3      	ldrh	r3, [r4, #12]
 800cbde:	059f      	lsls	r7, r3, #22
 800cbe0:	d402      	bmi.n	800cbe8 <_fread_r+0x32>
 800cbe2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe4:	f7fb f82e 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800cbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbec:	049d      	lsls	r5, r3, #18
 800cbee:	d406      	bmi.n	800cbfe <_fread_r+0x48>
 800cbf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbfc:	6663      	str	r3, [r4, #100]	; 0x64
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	da01      	bge.n	800cc08 <_fread_r+0x52>
 800cc04:	2300      	movs	r3, #0
 800cc06:	6063      	str	r3, [r4, #4]
 800cc08:	465f      	mov	r7, fp
 800cc0a:	e9d4 1500 	ldrd	r1, r5, [r4]
 800cc0e:	42af      	cmp	r7, r5
 800cc10:	d813      	bhi.n	800cc3a <_fread_r+0x84>
 800cc12:	463a      	mov	r2, r7
 800cc14:	4640      	mov	r0, r8
 800cc16:	f000 fc5f 	bl	800d4d8 <memcpy>
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	1bdb      	subs	r3, r3, r7
 800cc1e:	6063      	str	r3, [r4, #4]
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	443b      	add	r3, r7
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc28:	07da      	lsls	r2, r3, #31
 800cc2a:	d423      	bmi.n	800cc74 <_fread_r+0xbe>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	059b      	lsls	r3, r3, #22
 800cc30:	d420      	bmi.n	800cc74 <_fread_r+0xbe>
 800cc32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc34:	f7fb f807 	bl	8007c46 <__retarget_lock_release_recursive>
 800cc38:	e01c      	b.n	800cc74 <_fread_r+0xbe>
 800cc3a:	462a      	mov	r2, r5
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	f000 fc4b 	bl	800d4d8 <memcpy>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	442b      	add	r3, r5
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	4621      	mov	r1, r4
 800cc4a:	1b7b      	subs	r3, r7, r5
 800cc4c:	4648      	mov	r0, r9
 800cc4e:	9301      	str	r3, [sp, #4]
 800cc50:	f000 f970 	bl	800cf34 <__srefill_r>
 800cc54:	44a8      	add	r8, r5
 800cc56:	9b01      	ldr	r3, [sp, #4]
 800cc58:	b180      	cbz	r0, 800cc7c <_fread_r+0xc6>
 800cc5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc5c:	07d8      	lsls	r0, r3, #31
 800cc5e:	d405      	bmi.n	800cc6c <_fread_r+0xb6>
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	0599      	lsls	r1, r3, #22
 800cc64:	d402      	bmi.n	800cc6c <_fread_r+0xb6>
 800cc66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc68:	f7fa ffed 	bl	8007c46 <__retarget_lock_release_recursive>
 800cc6c:	445d      	add	r5, fp
 800cc6e:	1bed      	subs	r5, r5, r7
 800cc70:	fbb5 f6fa 	udiv	r6, r5, sl
 800cc74:	4630      	mov	r0, r6
 800cc76:	b003      	add	sp, #12
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	461f      	mov	r7, r3
 800cc7e:	e7c4      	b.n	800cc0a <_fread_r+0x54>
 800cc80:	461e      	mov	r6, r3
 800cc82:	e7f7      	b.n	800cc74 <_fread_r+0xbe>

0800cc84 <__sfvwrite_r>:
 800cc84:	6893      	ldr	r3, [r2, #8]
 800cc86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	4691      	mov	r9, r2
 800cc90:	b91b      	cbnz	r3, 800cc9a <__sfvwrite_r+0x16>
 800cc92:	2000      	movs	r0, #0
 800cc94:	b003      	add	sp, #12
 800cc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9a:	898b      	ldrh	r3, [r1, #12]
 800cc9c:	0718      	lsls	r0, r3, #28
 800cc9e:	d54f      	bpl.n	800cd40 <__sfvwrite_r+0xbc>
 800cca0:	690b      	ldr	r3, [r1, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d04c      	beq.n	800cd40 <__sfvwrite_r+0xbc>
 800cca6:	89a3      	ldrh	r3, [r4, #12]
 800cca8:	f8d9 8000 	ldr.w	r8, [r9]
 800ccac:	f013 0702 	ands.w	r7, r3, #2
 800ccb0:	d16b      	bne.n	800cd8a <__sfvwrite_r+0x106>
 800ccb2:	f013 0301 	ands.w	r3, r3, #1
 800ccb6:	f000 809b 	beq.w	800cdf0 <__sfvwrite_r+0x16c>
 800ccba:	4638      	mov	r0, r7
 800ccbc:	46ba      	mov	sl, r7
 800ccbe:	46bb      	mov	fp, r7
 800ccc0:	f1bb 0f00 	cmp.w	fp, #0
 800ccc4:	f000 8102 	beq.w	800cecc <__sfvwrite_r+0x248>
 800ccc8:	b950      	cbnz	r0, 800cce0 <__sfvwrite_r+0x5c>
 800ccca:	465a      	mov	r2, fp
 800cccc:	210a      	movs	r1, #10
 800ccce:	4650      	mov	r0, sl
 800ccd0:	f7f3 fa96 	bl	8000200 <memchr>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	f000 80ff 	beq.w	800ced8 <__sfvwrite_r+0x254>
 800ccda:	3001      	adds	r0, #1
 800ccdc:	eba0 070a 	sub.w	r7, r0, sl
 800cce0:	6820      	ldr	r0, [r4, #0]
 800cce2:	6921      	ldr	r1, [r4, #16]
 800cce4:	68a5      	ldr	r5, [r4, #8]
 800cce6:	6963      	ldr	r3, [r4, #20]
 800cce8:	455f      	cmp	r7, fp
 800ccea:	463a      	mov	r2, r7
 800ccec:	bf28      	it	cs
 800ccee:	465a      	movcs	r2, fp
 800ccf0:	4288      	cmp	r0, r1
 800ccf2:	f240 80f4 	bls.w	800cede <__sfvwrite_r+0x25a>
 800ccf6:	441d      	add	r5, r3
 800ccf8:	42aa      	cmp	r2, r5
 800ccfa:	f340 80f0 	ble.w	800cede <__sfvwrite_r+0x25a>
 800ccfe:	4651      	mov	r1, sl
 800cd00:	462a      	mov	r2, r5
 800cd02:	f000 fb82 	bl	800d40a <memmove>
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	442b      	add	r3, r5
 800cd0a:	6023      	str	r3, [r4, #0]
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ff2c 	bl	800cb6c <_fflush_r>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d166      	bne.n	800cde6 <__sfvwrite_r+0x162>
 800cd18:	1b7f      	subs	r7, r7, r5
 800cd1a:	f040 80f8 	bne.w	800cf0e <__sfvwrite_r+0x28a>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4630      	mov	r0, r6
 800cd22:	f7ff ff23 	bl	800cb6c <_fflush_r>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d15d      	bne.n	800cde6 <__sfvwrite_r+0x162>
 800cd2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cd2e:	1b5b      	subs	r3, r3, r5
 800cd30:	44aa      	add	sl, r5
 800cd32:	ebab 0b05 	sub.w	fp, fp, r5
 800cd36:	f8c9 3008 	str.w	r3, [r9, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1c0      	bne.n	800ccc0 <__sfvwrite_r+0x3c>
 800cd3e:	e7a8      	b.n	800cc92 <__sfvwrite_r+0xe>
 800cd40:	4621      	mov	r1, r4
 800cd42:	4630      	mov	r0, r6
 800cd44:	f000 fa9e 	bl	800d284 <__swsetup_r>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d0ac      	beq.n	800cca6 <__sfvwrite_r+0x22>
 800cd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd50:	e7a0      	b.n	800cc94 <__sfvwrite_r+0x10>
 800cd52:	e9d8 a500 	ldrd	sl, r5, [r8]
 800cd56:	f108 0808 	add.w	r8, r8, #8
 800cd5a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800cd5e:	69e1      	ldr	r1, [r4, #28]
 800cd60:	2d00      	cmp	r5, #0
 800cd62:	d0f6      	beq.n	800cd52 <__sfvwrite_r+0xce>
 800cd64:	42bd      	cmp	r5, r7
 800cd66:	462b      	mov	r3, r5
 800cd68:	4652      	mov	r2, sl
 800cd6a:	bf28      	it	cs
 800cd6c:	463b      	movcs	r3, r7
 800cd6e:	4630      	mov	r0, r6
 800cd70:	47d8      	blx	fp
 800cd72:	2800      	cmp	r0, #0
 800cd74:	dd37      	ble.n	800cde6 <__sfvwrite_r+0x162>
 800cd76:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cd7a:	1a1b      	subs	r3, r3, r0
 800cd7c:	4482      	add	sl, r0
 800cd7e:	1a2d      	subs	r5, r5, r0
 800cd80:	f8c9 3008 	str.w	r3, [r9, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1e8      	bne.n	800cd5a <__sfvwrite_r+0xd6>
 800cd88:	e783      	b.n	800cc92 <__sfvwrite_r+0xe>
 800cd8a:	f04f 0a00 	mov.w	sl, #0
 800cd8e:	4f61      	ldr	r7, [pc, #388]	; (800cf14 <__sfvwrite_r+0x290>)
 800cd90:	4655      	mov	r5, sl
 800cd92:	e7e2      	b.n	800cd5a <__sfvwrite_r+0xd6>
 800cd94:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800cd98:	f108 0808 	add.w	r8, r8, #8
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	68a2      	ldr	r2, [r4, #8]
 800cda0:	f1ba 0f00 	cmp.w	sl, #0
 800cda4:	d0f6      	beq.n	800cd94 <__sfvwrite_r+0x110>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	0599      	lsls	r1, r3, #22
 800cdaa:	d563      	bpl.n	800ce74 <__sfvwrite_r+0x1f0>
 800cdac:	4552      	cmp	r2, sl
 800cdae:	d836      	bhi.n	800ce1e <__sfvwrite_r+0x19a>
 800cdb0:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800cdb4:	d033      	beq.n	800ce1e <__sfvwrite_r+0x19a>
 800cdb6:	6921      	ldr	r1, [r4, #16]
 800cdb8:	6965      	ldr	r5, [r4, #20]
 800cdba:	eba0 0b01 	sub.w	fp, r0, r1
 800cdbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cdc6:	f10b 0201 	add.w	r2, fp, #1
 800cdca:	106d      	asrs	r5, r5, #1
 800cdcc:	4452      	add	r2, sl
 800cdce:	4295      	cmp	r5, r2
 800cdd0:	bf38      	it	cc
 800cdd2:	4615      	movcc	r5, r2
 800cdd4:	055b      	lsls	r3, r3, #21
 800cdd6:	d53d      	bpl.n	800ce54 <__sfvwrite_r+0x1d0>
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7fb f858 	bl	8007e90 <_malloc_r>
 800cde0:	b948      	cbnz	r0, 800cdf6 <__sfvwrite_r+0x172>
 800cde2:	230c      	movs	r3, #12
 800cde4:	6033      	str	r3, [r6, #0]
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdec:	81a3      	strh	r3, [r4, #12]
 800cdee:	e7ad      	b.n	800cd4c <__sfvwrite_r+0xc8>
 800cdf0:	461f      	mov	r7, r3
 800cdf2:	469a      	mov	sl, r3
 800cdf4:	e7d2      	b.n	800cd9c <__sfvwrite_r+0x118>
 800cdf6:	465a      	mov	r2, fp
 800cdf8:	6921      	ldr	r1, [r4, #16]
 800cdfa:	9001      	str	r0, [sp, #4]
 800cdfc:	f000 fb6c 	bl	800d4d8 <memcpy>
 800ce00:	89a2      	ldrh	r2, [r4, #12]
 800ce02:	9b01      	ldr	r3, [sp, #4]
 800ce04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ce08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce0c:	81a2      	strh	r2, [r4, #12]
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	6165      	str	r5, [r4, #20]
 800ce12:	445b      	add	r3, fp
 800ce14:	eba5 050b 	sub.w	r5, r5, fp
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	4652      	mov	r2, sl
 800ce1c:	60a5      	str	r5, [r4, #8]
 800ce1e:	4552      	cmp	r2, sl
 800ce20:	bf28      	it	cs
 800ce22:	4652      	movcs	r2, sl
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	9201      	str	r2, [sp, #4]
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f000 faee 	bl	800d40a <memmove>
 800ce2e:	68a3      	ldr	r3, [r4, #8]
 800ce30:	9a01      	ldr	r2, [sp, #4]
 800ce32:	1a9b      	subs	r3, r3, r2
 800ce34:	60a3      	str	r3, [r4, #8]
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	4413      	add	r3, r2
 800ce3a:	4655      	mov	r5, sl
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800ce42:	1b5b      	subs	r3, r3, r5
 800ce44:	442f      	add	r7, r5
 800ce46:	ebaa 0a05 	sub.w	sl, sl, r5
 800ce4a:	f8c9 3008 	str.w	r3, [r9, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1a4      	bne.n	800cd9c <__sfvwrite_r+0x118>
 800ce52:	e71e      	b.n	800cc92 <__sfvwrite_r+0xe>
 800ce54:	462a      	mov	r2, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	f001 feb2 	bl	800ebc0 <_realloc_r>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d1d5      	bne.n	800ce0e <__sfvwrite_r+0x18a>
 800ce62:	6921      	ldr	r1, [r4, #16]
 800ce64:	4630      	mov	r0, r6
 800ce66:	f7fa ff53 	bl	8007d10 <_free_r>
 800ce6a:	89a3      	ldrh	r3, [r4, #12]
 800ce6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	e7b6      	b.n	800cde2 <__sfvwrite_r+0x15e>
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	4283      	cmp	r3, r0
 800ce78:	d302      	bcc.n	800ce80 <__sfvwrite_r+0x1fc>
 800ce7a:	6961      	ldr	r1, [r4, #20]
 800ce7c:	4551      	cmp	r1, sl
 800ce7e:	d915      	bls.n	800ceac <__sfvwrite_r+0x228>
 800ce80:	4552      	cmp	r2, sl
 800ce82:	bf28      	it	cs
 800ce84:	4652      	movcs	r2, sl
 800ce86:	4639      	mov	r1, r7
 800ce88:	4615      	mov	r5, r2
 800ce8a:	f000 fabe 	bl	800d40a <memmove>
 800ce8e:	68a3      	ldr	r3, [r4, #8]
 800ce90:	6822      	ldr	r2, [r4, #0]
 800ce92:	1b5b      	subs	r3, r3, r5
 800ce94:	442a      	add	r2, r5
 800ce96:	60a3      	str	r3, [r4, #8]
 800ce98:	6022      	str	r2, [r4, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1cf      	bne.n	800ce3e <__sfvwrite_r+0x1ba>
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4630      	mov	r0, r6
 800cea2:	f7ff fe63 	bl	800cb6c <_fflush_r>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d0c9      	beq.n	800ce3e <__sfvwrite_r+0x1ba>
 800ceaa:	e79c      	b.n	800cde6 <__sfvwrite_r+0x162>
 800ceac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ceb0:	459a      	cmp	sl, r3
 800ceb2:	bf38      	it	cc
 800ceb4:	4653      	movcc	r3, sl
 800ceb6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ceb8:	fb93 f3f1 	sdiv	r3, r3, r1
 800cebc:	463a      	mov	r2, r7
 800cebe:	434b      	muls	r3, r1
 800cec0:	4630      	mov	r0, r6
 800cec2:	69e1      	ldr	r1, [r4, #28]
 800cec4:	47a8      	blx	r5
 800cec6:	1e05      	subs	r5, r0, #0
 800cec8:	dcb9      	bgt.n	800ce3e <__sfvwrite_r+0x1ba>
 800ceca:	e78c      	b.n	800cde6 <__sfvwrite_r+0x162>
 800cecc:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800ced0:	2000      	movs	r0, #0
 800ced2:	f108 0808 	add.w	r8, r8, #8
 800ced6:	e6f3      	b.n	800ccc0 <__sfvwrite_r+0x3c>
 800ced8:	f10b 0701 	add.w	r7, fp, #1
 800cedc:	e700      	b.n	800cce0 <__sfvwrite_r+0x5c>
 800cede:	4293      	cmp	r3, r2
 800cee0:	dc08      	bgt.n	800cef4 <__sfvwrite_r+0x270>
 800cee2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cee4:	69e1      	ldr	r1, [r4, #28]
 800cee6:	4652      	mov	r2, sl
 800cee8:	4630      	mov	r0, r6
 800ceea:	47a8      	blx	r5
 800ceec:	1e05      	subs	r5, r0, #0
 800ceee:	f73f af13 	bgt.w	800cd18 <__sfvwrite_r+0x94>
 800cef2:	e778      	b.n	800cde6 <__sfvwrite_r+0x162>
 800cef4:	4651      	mov	r1, sl
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	f000 fa87 	bl	800d40a <memmove>
 800cefc:	9a01      	ldr	r2, [sp, #4]
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	1a9b      	subs	r3, r3, r2
 800cf02:	60a3      	str	r3, [r4, #8]
 800cf04:	6823      	ldr	r3, [r4, #0]
 800cf06:	4413      	add	r3, r2
 800cf08:	6023      	str	r3, [r4, #0]
 800cf0a:	4615      	mov	r5, r2
 800cf0c:	e704      	b.n	800cd18 <__sfvwrite_r+0x94>
 800cf0e:	2001      	movs	r0, #1
 800cf10:	e70b      	b.n	800cd2a <__sfvwrite_r+0xa6>
 800cf12:	bf00      	nop
 800cf14:	7ffffc00 	.word	0x7ffffc00

0800cf18 <lflush>:
 800cf18:	898b      	ldrh	r3, [r1, #12]
 800cf1a:	f003 0309 	and.w	r3, r3, #9
 800cf1e:	2b09      	cmp	r3, #9
 800cf20:	d103      	bne.n	800cf2a <lflush+0x12>
 800cf22:	4b03      	ldr	r3, [pc, #12]	; (800cf30 <lflush+0x18>)
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	f7ff be21 	b.w	800cb6c <_fflush_r>
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	20000148 	.word	0x20000148

0800cf34 <__srefill_r>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	460c      	mov	r4, r1
 800cf38:	4605      	mov	r5, r0
 800cf3a:	b118      	cbz	r0, 800cf44 <__srefill_r+0x10>
 800cf3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf3e:	b90b      	cbnz	r3, 800cf44 <__srefill_r+0x10>
 800cf40:	f7fa fce6 	bl	8007910 <__sinit>
 800cf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf48:	049f      	lsls	r7, r3, #18
 800cf4a:	d406      	bmi.n	800cf5a <__srefill_r+0x26>
 800cf4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cf50:	81a3      	strh	r3, [r4, #12]
 800cf52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf58:	6663      	str	r3, [r4, #100]	; 0x64
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6063      	str	r3, [r4, #4]
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf64:	069e      	lsls	r6, r3, #26
 800cf66:	d502      	bpl.n	800cf6e <__srefill_r+0x3a>
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	e05c      	b.n	800d028 <__srefill_r+0xf4>
 800cf6e:	0758      	lsls	r0, r3, #29
 800cf70:	d448      	bmi.n	800d004 <__srefill_r+0xd0>
 800cf72:	06d9      	lsls	r1, r3, #27
 800cf74:	d405      	bmi.n	800cf82 <__srefill_r+0x4e>
 800cf76:	2309      	movs	r3, #9
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf7e:	81a3      	strh	r3, [r4, #12]
 800cf80:	e7f2      	b.n	800cf68 <__srefill_r+0x34>
 800cf82:	071a      	lsls	r2, r3, #28
 800cf84:	d50b      	bpl.n	800cf9e <__srefill_r+0x6a>
 800cf86:	4621      	mov	r1, r4
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f7ff fdef 	bl	800cb6c <_fflush_r>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d1ea      	bne.n	800cf68 <__srefill_r+0x34>
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	60a0      	str	r0, [r4, #8]
 800cf96:	f023 0308 	bic.w	r3, r3, #8
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	61a0      	str	r0, [r4, #24]
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f043 0304 	orr.w	r3, r3, #4
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	b91b      	cbnz	r3, 800cfb2 <__srefill_r+0x7e>
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4628      	mov	r0, r5
 800cfae:	f003 f8d8 	bl	8010162 <__smakebuf_r>
 800cfb2:	89a6      	ldrh	r6, [r4, #12]
 800cfb4:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800cfb8:	07b3      	lsls	r3, r6, #30
 800cfba:	d00f      	beq.n	800cfdc <__srefill_r+0xa8>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	4a1c      	ldr	r2, [pc, #112]	; (800d030 <__srefill_r+0xfc>)
 800cfc0:	491c      	ldr	r1, [pc, #112]	; (800d034 <__srefill_r+0x100>)
 800cfc2:	481d      	ldr	r0, [pc, #116]	; (800d038 <__srefill_r+0x104>)
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	f006 0609 	and.w	r6, r6, #9
 800cfca:	f7fa fcb9 	bl	8007940 <_fwalk_sglue>
 800cfce:	2e09      	cmp	r6, #9
 800cfd0:	81a7      	strh	r7, [r4, #12]
 800cfd2:	d103      	bne.n	800cfdc <__srefill_r+0xa8>
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f7ff fd3a 	bl	800ca50 <__sflush_r>
 800cfdc:	6922      	ldr	r2, [r4, #16]
 800cfde:	6a26      	ldr	r6, [r4, #32]
 800cfe0:	6963      	ldr	r3, [r4, #20]
 800cfe2:	69e1      	ldr	r1, [r4, #28]
 800cfe4:	6022      	str	r2, [r4, #0]
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b0      	blx	r6
 800cfea:	2800      	cmp	r0, #0
 800cfec:	6060      	str	r0, [r4, #4]
 800cfee:	dc1c      	bgt.n	800d02a <__srefill_r+0xf6>
 800cff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff4:	bf17      	itett	ne
 800cff6:	2200      	movne	r2, #0
 800cff8:	f043 0320 	orreq.w	r3, r3, #32
 800cffc:	6062      	strne	r2, [r4, #4]
 800cffe:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800d002:	e7bc      	b.n	800cf7e <__srefill_r+0x4a>
 800d004:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d006:	2900      	cmp	r1, #0
 800d008:	d0cd      	beq.n	800cfa6 <__srefill_r+0x72>
 800d00a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d00e:	4299      	cmp	r1, r3
 800d010:	d002      	beq.n	800d018 <__srefill_r+0xe4>
 800d012:	4628      	mov	r0, r5
 800d014:	f7fa fe7c 	bl	8007d10 <_free_r>
 800d018:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d01a:	6063      	str	r3, [r4, #4]
 800d01c:	2000      	movs	r0, #0
 800d01e:	6320      	str	r0, [r4, #48]	; 0x30
 800d020:	2b00      	cmp	r3, #0
 800d022:	d0c0      	beq.n	800cfa6 <__srefill_r+0x72>
 800d024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d026:	6023      	str	r3, [r4, #0]
 800d028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02a:	2000      	movs	r0, #0
 800d02c:	e7fc      	b.n	800d028 <__srefill_r+0xf4>
 800d02e:	bf00      	nop
 800d030:	20000018 	.word	0x20000018
 800d034:	0800cf19 	.word	0x0800cf19
 800d038:	20000028 	.word	0x20000028

0800d03c <__sccl>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	780b      	ldrb	r3, [r1, #0]
 800d040:	4604      	mov	r4, r0
 800d042:	2b5e      	cmp	r3, #94	; 0x5e
 800d044:	bf0b      	itete	eq
 800d046:	784b      	ldrbeq	r3, [r1, #1]
 800d048:	1c4a      	addne	r2, r1, #1
 800d04a:	1c8a      	addeq	r2, r1, #2
 800d04c:	2100      	movne	r1, #0
 800d04e:	bf08      	it	eq
 800d050:	2101      	moveq	r1, #1
 800d052:	3801      	subs	r0, #1
 800d054:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d058:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d05c:	42a8      	cmp	r0, r5
 800d05e:	d1fb      	bne.n	800d058 <__sccl+0x1c>
 800d060:	b90b      	cbnz	r3, 800d066 <__sccl+0x2a>
 800d062:	1e50      	subs	r0, r2, #1
 800d064:	bd70      	pop	{r4, r5, r6, pc}
 800d066:	f081 0101 	eor.w	r1, r1, #1
 800d06a:	54e1      	strb	r1, [r4, r3]
 800d06c:	4610      	mov	r0, r2
 800d06e:	4602      	mov	r2, r0
 800d070:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d074:	2d2d      	cmp	r5, #45	; 0x2d
 800d076:	d005      	beq.n	800d084 <__sccl+0x48>
 800d078:	2d5d      	cmp	r5, #93	; 0x5d
 800d07a:	d016      	beq.n	800d0aa <__sccl+0x6e>
 800d07c:	2d00      	cmp	r5, #0
 800d07e:	d0f1      	beq.n	800d064 <__sccl+0x28>
 800d080:	462b      	mov	r3, r5
 800d082:	e7f2      	b.n	800d06a <__sccl+0x2e>
 800d084:	7846      	ldrb	r6, [r0, #1]
 800d086:	2e5d      	cmp	r6, #93	; 0x5d
 800d088:	d0fa      	beq.n	800d080 <__sccl+0x44>
 800d08a:	42b3      	cmp	r3, r6
 800d08c:	dcf8      	bgt.n	800d080 <__sccl+0x44>
 800d08e:	3002      	adds	r0, #2
 800d090:	461a      	mov	r2, r3
 800d092:	3201      	adds	r2, #1
 800d094:	4296      	cmp	r6, r2
 800d096:	54a1      	strb	r1, [r4, r2]
 800d098:	dcfb      	bgt.n	800d092 <__sccl+0x56>
 800d09a:	1af2      	subs	r2, r6, r3
 800d09c:	3a01      	subs	r2, #1
 800d09e:	1c5d      	adds	r5, r3, #1
 800d0a0:	42b3      	cmp	r3, r6
 800d0a2:	bfa8      	it	ge
 800d0a4:	2200      	movge	r2, #0
 800d0a6:	18ab      	adds	r3, r5, r2
 800d0a8:	e7e1      	b.n	800d06e <__sccl+0x32>
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	e7da      	b.n	800d064 <__sccl+0x28>
	...

0800d0b0 <sprintf>:
 800d0b0:	b40e      	push	{r1, r2, r3}
 800d0b2:	b500      	push	{lr}
 800d0b4:	b09c      	sub	sp, #112	; 0x70
 800d0b6:	ab1d      	add	r3, sp, #116	; 0x74
 800d0b8:	9002      	str	r0, [sp, #8]
 800d0ba:	9006      	str	r0, [sp, #24]
 800d0bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0c0:	4809      	ldr	r0, [pc, #36]	; (800d0e8 <sprintf+0x38>)
 800d0c2:	9107      	str	r1, [sp, #28]
 800d0c4:	9104      	str	r1, [sp, #16]
 800d0c6:	4909      	ldr	r1, [pc, #36]	; (800d0ec <sprintf+0x3c>)
 800d0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0cc:	9105      	str	r1, [sp, #20]
 800d0ce:	6800      	ldr	r0, [r0, #0]
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	a902      	add	r1, sp, #8
 800d0d4:	f7fb f924 	bl	8008320 <_svfprintf_r>
 800d0d8:	9b02      	ldr	r3, [sp, #8]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	b01c      	add	sp, #112	; 0x70
 800d0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e4:	b003      	add	sp, #12
 800d0e6:	4770      	bx	lr
 800d0e8:	20000148 	.word	0x20000148
 800d0ec:	ffff0208 	.word	0xffff0208

0800d0f0 <__submore>:
 800d0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d0f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d0fc:	4299      	cmp	r1, r3
 800d0fe:	d11d      	bne.n	800d13c <__submore+0x4c>
 800d100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d104:	f7fa fec4 	bl	8007e90 <_malloc_r>
 800d108:	b918      	cbnz	r0, 800d112 <__submore+0x22>
 800d10a:	f04f 30ff 	mov.w	r0, #4294967295
 800d10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d116:	6363      	str	r3, [r4, #52]	; 0x34
 800d118:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d11c:	6320      	str	r0, [r4, #48]	; 0x30
 800d11e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d122:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800d126:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d12a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d12e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d132:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d136:	6020      	str	r0, [r4, #0]
 800d138:	2000      	movs	r0, #0
 800d13a:	e7e8      	b.n	800d10e <__submore+0x1e>
 800d13c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d13e:	0077      	lsls	r7, r6, #1
 800d140:	463a      	mov	r2, r7
 800d142:	f001 fd3d 	bl	800ebc0 <_realloc_r>
 800d146:	4605      	mov	r5, r0
 800d148:	2800      	cmp	r0, #0
 800d14a:	d0de      	beq.n	800d10a <__submore+0x1a>
 800d14c:	eb00 0806 	add.w	r8, r0, r6
 800d150:	4601      	mov	r1, r0
 800d152:	4632      	mov	r2, r6
 800d154:	4640      	mov	r0, r8
 800d156:	f000 f9bf 	bl	800d4d8 <memcpy>
 800d15a:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800d15e:	f8c4 8000 	str.w	r8, [r4]
 800d162:	e7e9      	b.n	800d138 <__submore+0x48>

0800d164 <_ungetc_r>:
 800d164:	b570      	push	{r4, r5, r6, lr}
 800d166:	460d      	mov	r5, r1
 800d168:	1c69      	adds	r1, r5, #1
 800d16a:	4606      	mov	r6, r0
 800d16c:	4614      	mov	r4, r2
 800d16e:	d103      	bne.n	800d178 <_ungetc_r+0x14>
 800d170:	f04f 35ff 	mov.w	r5, #4294967295
 800d174:	4628      	mov	r0, r5
 800d176:	bd70      	pop	{r4, r5, r6, pc}
 800d178:	b118      	cbz	r0, 800d182 <_ungetc_r+0x1e>
 800d17a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d17c:	b90b      	cbnz	r3, 800d182 <_ungetc_r+0x1e>
 800d17e:	f7fa fbc7 	bl	8007910 <__sinit>
 800d182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d184:	07da      	lsls	r2, r3, #31
 800d186:	d405      	bmi.n	800d194 <_ungetc_r+0x30>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	059b      	lsls	r3, r3, #22
 800d18c:	d402      	bmi.n	800d194 <_ungetc_r+0x30>
 800d18e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d190:	f7fa fd58 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800d194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d198:	0498      	lsls	r0, r3, #18
 800d19a:	d406      	bmi.n	800d1aa <_ungetc_r+0x46>
 800d19c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1a0:	81a3      	strh	r3, [r4, #12]
 800d1a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1a8:	6663      	str	r3, [r4, #100]	; 0x64
 800d1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ae:	f023 0320 	bic.w	r3, r3, #32
 800d1b2:	0759      	lsls	r1, r3, #29
 800d1b4:	81a3      	strh	r3, [r4, #12]
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	d423      	bmi.n	800d202 <_ungetc_r+0x9e>
 800d1ba:	06d3      	lsls	r3, r2, #27
 800d1bc:	d409      	bmi.n	800d1d2 <_ungetc_r+0x6e>
 800d1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1c0:	07dd      	lsls	r5, r3, #31
 800d1c2:	d4d5      	bmi.n	800d170 <_ungetc_r+0xc>
 800d1c4:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d1c8:	d1d2      	bne.n	800d170 <_ungetc_r+0xc>
 800d1ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1cc:	f7fa fd3b 	bl	8007c46 <__retarget_lock_release_recursive>
 800d1d0:	e7ce      	b.n	800d170 <_ungetc_r+0xc>
 800d1d2:	0710      	lsls	r0, r2, #28
 800d1d4:	d511      	bpl.n	800d1fa <_ungetc_r+0x96>
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7ff fcc7 	bl	800cb6c <_fflush_r>
 800d1de:	b130      	cbz	r0, 800d1ee <_ungetc_r+0x8a>
 800d1e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e2:	07d9      	lsls	r1, r3, #31
 800d1e4:	d4c4      	bmi.n	800d170 <_ungetc_r+0xc>
 800d1e6:	89a3      	ldrh	r3, [r4, #12]
 800d1e8:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d1ec:	e7ec      	b.n	800d1c8 <_ungetc_r+0x64>
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	60a0      	str	r0, [r4, #8]
 800d1f2:	f023 0308 	bic.w	r3, r3, #8
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	61a0      	str	r0, [r4, #24]
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f043 0304 	orr.w	r3, r3, #4
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d204:	6862      	ldr	r2, [r4, #4]
 800d206:	b2ed      	uxtb	r5, r5
 800d208:	b1d3      	cbz	r3, 800d240 <_ungetc_r+0xdc>
 800d20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d20c:	4293      	cmp	r3, r2
 800d20e:	dc05      	bgt.n	800d21c <_ungetc_r+0xb8>
 800d210:	4621      	mov	r1, r4
 800d212:	4630      	mov	r0, r6
 800d214:	f7ff ff6c 	bl	800d0f0 <__submore>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d1e1      	bne.n	800d1e0 <_ungetc_r+0x7c>
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	1e5a      	subs	r2, r3, #1
 800d220:	6022      	str	r2, [r4, #0]
 800d222:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d226:	6863      	ldr	r3, [r4, #4]
 800d228:	3301      	adds	r3, #1
 800d22a:	6063      	str	r3, [r4, #4]
 800d22c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d22e:	07da      	lsls	r2, r3, #31
 800d230:	d4a0      	bmi.n	800d174 <_ungetc_r+0x10>
 800d232:	89a3      	ldrh	r3, [r4, #12]
 800d234:	059b      	lsls	r3, r3, #22
 800d236:	d49d      	bmi.n	800d174 <_ungetc_r+0x10>
 800d238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d23a:	f7fa fd04 	bl	8007c46 <__retarget_lock_release_recursive>
 800d23e:	e799      	b.n	800d174 <_ungetc_r+0x10>
 800d240:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d242:	6920      	ldr	r0, [r4, #16]
 800d244:	6823      	ldr	r3, [r4, #0]
 800d246:	f001 0101 	and.w	r1, r1, #1
 800d24a:	b160      	cbz	r0, 800d266 <_ungetc_r+0x102>
 800d24c:	4298      	cmp	r0, r3
 800d24e:	d20a      	bcs.n	800d266 <_ungetc_r+0x102>
 800d250:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800d254:	4285      	cmp	r5, r0
 800d256:	d106      	bne.n	800d266 <_ungetc_r+0x102>
 800d258:	3b01      	subs	r3, #1
 800d25a:	3201      	adds	r2, #1
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	6062      	str	r2, [r4, #4]
 800d260:	2900      	cmp	r1, #0
 800d262:	d187      	bne.n	800d174 <_ungetc_r+0x10>
 800d264:	e7e5      	b.n	800d232 <_ungetc_r+0xce>
 800d266:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800d26a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d26e:	6323      	str	r3, [r4, #48]	; 0x30
 800d270:	2303      	movs	r3, #3
 800d272:	6363      	str	r3, [r4, #52]	; 0x34
 800d274:	4623      	mov	r3, r4
 800d276:	f803 5f42 	strb.w	r5, [r3, #66]!
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	2301      	movs	r3, #1
 800d27e:	6063      	str	r3, [r4, #4]
 800d280:	e7ee      	b.n	800d260 <_ungetc_r+0xfc>
	...

0800d284 <__swsetup_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4b2a      	ldr	r3, [pc, #168]	; (800d330 <__swsetup_r+0xac>)
 800d288:	4605      	mov	r5, r0
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	460c      	mov	r4, r1
 800d28e:	b118      	cbz	r0, 800d298 <__swsetup_r+0x14>
 800d290:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d292:	b90b      	cbnz	r3, 800d298 <__swsetup_r+0x14>
 800d294:	f7fa fb3c 	bl	8007910 <__sinit>
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d29e:	0718      	lsls	r0, r3, #28
 800d2a0:	d422      	bmi.n	800d2e8 <__swsetup_r+0x64>
 800d2a2:	06d9      	lsls	r1, r3, #27
 800d2a4:	d407      	bmi.n	800d2b6 <__swsetup_r+0x32>
 800d2a6:	2309      	movs	r3, #9
 800d2a8:	602b      	str	r3, [r5, #0]
 800d2aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b4:	e034      	b.n	800d320 <__swsetup_r+0x9c>
 800d2b6:	0758      	lsls	r0, r3, #29
 800d2b8:	d512      	bpl.n	800d2e0 <__swsetup_r+0x5c>
 800d2ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d2bc:	b141      	cbz	r1, 800d2d0 <__swsetup_r+0x4c>
 800d2be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d2c2:	4299      	cmp	r1, r3
 800d2c4:	d002      	beq.n	800d2cc <__swsetup_r+0x48>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7fa fd22 	bl	8007d10 <_free_r>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2d6:	81a3      	strh	r3, [r4, #12]
 800d2d8:	2300      	movs	r3, #0
 800d2da:	6063      	str	r3, [r4, #4]
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	6023      	str	r3, [r4, #0]
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	f043 0308 	orr.w	r3, r3, #8
 800d2e6:	81a3      	strh	r3, [r4, #12]
 800d2e8:	6923      	ldr	r3, [r4, #16]
 800d2ea:	b94b      	cbnz	r3, 800d300 <__swsetup_r+0x7c>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2f6:	d003      	beq.n	800d300 <__swsetup_r+0x7c>
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	f002 ff31 	bl	8010162 <__smakebuf_r>
 800d300:	89a0      	ldrh	r0, [r4, #12]
 800d302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d306:	f010 0301 	ands.w	r3, r0, #1
 800d30a:	d00a      	beq.n	800d322 <__swsetup_r+0x9e>
 800d30c:	2300      	movs	r3, #0
 800d30e:	60a3      	str	r3, [r4, #8]
 800d310:	6963      	ldr	r3, [r4, #20]
 800d312:	425b      	negs	r3, r3
 800d314:	61a3      	str	r3, [r4, #24]
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	b943      	cbnz	r3, 800d32c <__swsetup_r+0xa8>
 800d31a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d31e:	d1c4      	bne.n	800d2aa <__swsetup_r+0x26>
 800d320:	bd38      	pop	{r3, r4, r5, pc}
 800d322:	0781      	lsls	r1, r0, #30
 800d324:	bf58      	it	pl
 800d326:	6963      	ldrpl	r3, [r4, #20]
 800d328:	60a3      	str	r3, [r4, #8]
 800d32a:	e7f4      	b.n	800d316 <__swsetup_r+0x92>
 800d32c:	2000      	movs	r0, #0
 800d32e:	e7f7      	b.n	800d320 <__swsetup_r+0x9c>
 800d330:	20000148 	.word	0x20000148

0800d334 <__fputwc>:
 800d334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d338:	4680      	mov	r8, r0
 800d33a:	460e      	mov	r6, r1
 800d33c:	4615      	mov	r5, r2
 800d33e:	f000 f891 	bl	800d464 <__locale_mb_cur_max>
 800d342:	2801      	cmp	r0, #1
 800d344:	d11c      	bne.n	800d380 <__fputwc+0x4c>
 800d346:	1e73      	subs	r3, r6, #1
 800d348:	2bfe      	cmp	r3, #254	; 0xfe
 800d34a:	d819      	bhi.n	800d380 <__fputwc+0x4c>
 800d34c:	f88d 6004 	strb.w	r6, [sp, #4]
 800d350:	4604      	mov	r4, r0
 800d352:	2700      	movs	r7, #0
 800d354:	f10d 0904 	add.w	r9, sp, #4
 800d358:	42a7      	cmp	r7, r4
 800d35a:	d020      	beq.n	800d39e <__fputwc+0x6a>
 800d35c:	68ab      	ldr	r3, [r5, #8]
 800d35e:	f817 1009 	ldrb.w	r1, [r7, r9]
 800d362:	3b01      	subs	r3, #1
 800d364:	2b00      	cmp	r3, #0
 800d366:	60ab      	str	r3, [r5, #8]
 800d368:	da04      	bge.n	800d374 <__fputwc+0x40>
 800d36a:	69aa      	ldr	r2, [r5, #24]
 800d36c:	4293      	cmp	r3, r2
 800d36e:	db1a      	blt.n	800d3a6 <__fputwc+0x72>
 800d370:	290a      	cmp	r1, #10
 800d372:	d018      	beq.n	800d3a6 <__fputwc+0x72>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	602a      	str	r2, [r5, #0]
 800d37a:	7019      	strb	r1, [r3, #0]
 800d37c:	3701      	adds	r7, #1
 800d37e:	e7eb      	b.n	800d358 <__fputwc+0x24>
 800d380:	a901      	add	r1, sp, #4
 800d382:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800d386:	4632      	mov	r2, r6
 800d388:	4640      	mov	r0, r8
 800d38a:	f002 fe21 	bl	800ffd0 <_wcrtomb_r>
 800d38e:	1c41      	adds	r1, r0, #1
 800d390:	4604      	mov	r4, r0
 800d392:	d1de      	bne.n	800d352 <__fputwc+0x1e>
 800d394:	89ab      	ldrh	r3, [r5, #12]
 800d396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d39a:	81ab      	strh	r3, [r5, #12]
 800d39c:	4606      	mov	r6, r0
 800d39e:	4630      	mov	r0, r6
 800d3a0:	b003      	add	sp, #12
 800d3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	462a      	mov	r2, r5
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	f002 ff16 	bl	80101da <__swbuf_r>
 800d3ae:	1c42      	adds	r2, r0, #1
 800d3b0:	d1e4      	bne.n	800d37c <__fputwc+0x48>
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	e7f3      	b.n	800d39e <__fputwc+0x6a>

0800d3b6 <_fputwc_r>:
 800d3b6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800d3b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3ba:	4614      	mov	r4, r2
 800d3bc:	07da      	lsls	r2, r3, #31
 800d3be:	4605      	mov	r5, r0
 800d3c0:	d407      	bmi.n	800d3d2 <_fputwc_r+0x1c>
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	059b      	lsls	r3, r3, #22
 800d3c6:	d404      	bmi.n	800d3d2 <_fputwc_r+0x1c>
 800d3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3ca:	9101      	str	r1, [sp, #4]
 800d3cc:	f7fa fc3a 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800d3d0:	9901      	ldr	r1, [sp, #4]
 800d3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d6:	0498      	lsls	r0, r3, #18
 800d3d8:	d406      	bmi.n	800d3e8 <_fputwc_r+0x32>
 800d3da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d3e6:	6663      	str	r3, [r4, #100]	; 0x64
 800d3e8:	4622      	mov	r2, r4
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f7ff ffa2 	bl	800d334 <__fputwc>
 800d3f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3f2:	07da      	lsls	r2, r3, #31
 800d3f4:	4605      	mov	r5, r0
 800d3f6:	d405      	bmi.n	800d404 <_fputwc_r+0x4e>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	059b      	lsls	r3, r3, #22
 800d3fc:	d402      	bmi.n	800d404 <_fputwc_r+0x4e>
 800d3fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d400:	f7fa fc21 	bl	8007c46 <__retarget_lock_release_recursive>
 800d404:	4628      	mov	r0, r5
 800d406:	b003      	add	sp, #12
 800d408:	bd30      	pop	{r4, r5, pc}

0800d40a <memmove>:
 800d40a:	4288      	cmp	r0, r1
 800d40c:	b510      	push	{r4, lr}
 800d40e:	eb01 0402 	add.w	r4, r1, r2
 800d412:	d902      	bls.n	800d41a <memmove+0x10>
 800d414:	4284      	cmp	r4, r0
 800d416:	4623      	mov	r3, r4
 800d418:	d807      	bhi.n	800d42a <memmove+0x20>
 800d41a:	1e43      	subs	r3, r0, #1
 800d41c:	42a1      	cmp	r1, r4
 800d41e:	d008      	beq.n	800d432 <memmove+0x28>
 800d420:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d424:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d428:	e7f8      	b.n	800d41c <memmove+0x12>
 800d42a:	4402      	add	r2, r0
 800d42c:	4601      	mov	r1, r0
 800d42e:	428a      	cmp	r2, r1
 800d430:	d100      	bne.n	800d434 <memmove+0x2a>
 800d432:	bd10      	pop	{r4, pc}
 800d434:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d438:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d43c:	e7f7      	b.n	800d42e <memmove+0x24>

0800d43e <strncpy>:
 800d43e:	b510      	push	{r4, lr}
 800d440:	3901      	subs	r1, #1
 800d442:	4603      	mov	r3, r0
 800d444:	b132      	cbz	r2, 800d454 <strncpy+0x16>
 800d446:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d44a:	f803 4b01 	strb.w	r4, [r3], #1
 800d44e:	3a01      	subs	r2, #1
 800d450:	2c00      	cmp	r4, #0
 800d452:	d1f7      	bne.n	800d444 <strncpy+0x6>
 800d454:	441a      	add	r2, r3
 800d456:	2100      	movs	r1, #0
 800d458:	4293      	cmp	r3, r2
 800d45a:	d100      	bne.n	800d45e <strncpy+0x20>
 800d45c:	bd10      	pop	{r4, pc}
 800d45e:	f803 1b01 	strb.w	r1, [r3], #1
 800d462:	e7f9      	b.n	800d458 <strncpy+0x1a>

0800d464 <__locale_mb_cur_max>:
 800d464:	4b01      	ldr	r3, [pc, #4]	; (800d46c <__locale_mb_cur_max+0x8>)
 800d466:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800d46a:	4770      	bx	lr
 800d46c:	20000560 	.word	0x20000560

0800d470 <_localeconv_r>:
 800d470:	4800      	ldr	r0, [pc, #0]	; (800d474 <_localeconv_r+0x4>)
 800d472:	4770      	bx	lr
 800d474:	20000650 	.word	0x20000650

0800d478 <_sbrk_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4d06      	ldr	r5, [pc, #24]	; (800d494 <_sbrk_r+0x1c>)
 800d47c:	2300      	movs	r3, #0
 800d47e:	4604      	mov	r4, r0
 800d480:	4608      	mov	r0, r1
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	f7f5 fc50 	bl	8002d28 <_sbrk>
 800d488:	1c43      	adds	r3, r0, #1
 800d48a:	d102      	bne.n	800d492 <_sbrk_r+0x1a>
 800d48c:	682b      	ldr	r3, [r5, #0]
 800d48e:	b103      	cbz	r3, 800d492 <_sbrk_r+0x1a>
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	20000a40 	.word	0x20000a40

0800d498 <__libc_fini_array>:
 800d498:	b538      	push	{r3, r4, r5, lr}
 800d49a:	4d07      	ldr	r5, [pc, #28]	; (800d4b8 <__libc_fini_array+0x20>)
 800d49c:	4c07      	ldr	r4, [pc, #28]	; (800d4bc <__libc_fini_array+0x24>)
 800d49e:	1b64      	subs	r4, r4, r5
 800d4a0:	10a4      	asrs	r4, r4, #2
 800d4a2:	b91c      	cbnz	r4, 800d4ac <__libc_fini_array+0x14>
 800d4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a8:	f003 bb2c 	b.w	8010b04 <_fini>
 800d4ac:	3c01      	subs	r4, #1
 800d4ae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800d4b2:	4798      	blx	r3
 800d4b4:	e7f5      	b.n	800d4a2 <__libc_fini_array+0xa>
 800d4b6:	bf00      	nop
 800d4b8:	08011d50 	.word	0x08011d50
 800d4bc:	08011d54 	.word	0x08011d54

0800d4c0 <sysconf>:
 800d4c0:	2808      	cmp	r0, #8
 800d4c2:	b508      	push	{r3, lr}
 800d4c4:	d006      	beq.n	800d4d4 <sysconf+0x14>
 800d4c6:	f7fa fb91 	bl	8007bec <__errno>
 800d4ca:	2316      	movs	r3, #22
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d2:	bd08      	pop	{r3, pc}
 800d4d4:	2080      	movs	r0, #128	; 0x80
 800d4d6:	e7fc      	b.n	800d4d2 <sysconf+0x12>

0800d4d8 <memcpy>:
 800d4d8:	440a      	add	r2, r1
 800d4da:	4291      	cmp	r1, r2
 800d4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4e0:	d100      	bne.n	800d4e4 <memcpy+0xc>
 800d4e2:	4770      	bx	lr
 800d4e4:	b510      	push	{r4, lr}
 800d4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4ee:	4291      	cmp	r1, r2
 800d4f0:	d1f9      	bne.n	800d4e6 <memcpy+0xe>
 800d4f2:	bd10      	pop	{r4, pc}

0800d4f4 <nanf>:
 800d4f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d4fc <nanf+0x8>
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	7fc00000 	.word	0x7fc00000

0800d500 <frexp>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	2100      	movs	r1, #0
 800d504:	ec55 4b10 	vmov	r4, r5, d0
 800d508:	6001      	str	r1, [r0, #0]
 800d50a:	4916      	ldr	r1, [pc, #88]	; (800d564 <frexp+0x64>)
 800d50c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800d510:	428a      	cmp	r2, r1
 800d512:	4606      	mov	r6, r0
 800d514:	462b      	mov	r3, r5
 800d516:	dc22      	bgt.n	800d55e <frexp+0x5e>
 800d518:	ee10 1a10 	vmov	r1, s0
 800d51c:	4311      	orrs	r1, r2
 800d51e:	d01e      	beq.n	800d55e <frexp+0x5e>
 800d520:	4911      	ldr	r1, [pc, #68]	; (800d568 <frexp+0x68>)
 800d522:	4029      	ands	r1, r5
 800d524:	b969      	cbnz	r1, 800d542 <frexp+0x42>
 800d526:	4b11      	ldr	r3, [pc, #68]	; (800d56c <frexp+0x6c>)
 800d528:	2200      	movs	r2, #0
 800d52a:	ee10 0a10 	vmov	r0, s0
 800d52e:	4629      	mov	r1, r5
 800d530:	f7f3 f872 	bl	8000618 <__aeabi_dmul>
 800d534:	460b      	mov	r3, r1
 800d536:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800d53a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d53e:	4604      	mov	r4, r0
 800d540:	6031      	str	r1, [r6, #0]
 800d542:	6831      	ldr	r1, [r6, #0]
 800d544:	1512      	asrs	r2, r2, #20
 800d546:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d54a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800d54e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d552:	4411      	add	r1, r2
 800d554:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800d558:	6031      	str	r1, [r6, #0]
 800d55a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800d55e:	ec45 4b10 	vmov	d0, r4, r5
 800d562:	bd70      	pop	{r4, r5, r6, pc}
 800d564:	7fefffff 	.word	0x7fefffff
 800d568:	7ff00000 	.word	0x7ff00000
 800d56c:	43500000 	.word	0x43500000

0800d570 <__register_exitproc>:
 800d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d574:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d5ec <__register_exitproc+0x7c>
 800d578:	4606      	mov	r6, r0
 800d57a:	f8da 0000 	ldr.w	r0, [sl]
 800d57e:	4698      	mov	r8, r3
 800d580:	460f      	mov	r7, r1
 800d582:	4691      	mov	r9, r2
 800d584:	f7fa fb5e 	bl	8007c44 <__retarget_lock_acquire_recursive>
 800d588:	4b16      	ldr	r3, [pc, #88]	; (800d5e4 <__register_exitproc+0x74>)
 800d58a:	681c      	ldr	r4, [r3, #0]
 800d58c:	b90c      	cbnz	r4, 800d592 <__register_exitproc+0x22>
 800d58e:	4c16      	ldr	r4, [pc, #88]	; (800d5e8 <__register_exitproc+0x78>)
 800d590:	601c      	str	r4, [r3, #0]
 800d592:	6865      	ldr	r5, [r4, #4]
 800d594:	f8da 0000 	ldr.w	r0, [sl]
 800d598:	2d1f      	cmp	r5, #31
 800d59a:	dd05      	ble.n	800d5a8 <__register_exitproc+0x38>
 800d59c:	f7fa fb53 	bl	8007c46 <__retarget_lock_release_recursive>
 800d5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a8:	b19e      	cbz	r6, 800d5d2 <__register_exitproc+0x62>
 800d5aa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800d5b4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800d5b8:	40aa      	lsls	r2, r5
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800d5c0:	2e02      	cmp	r6, #2
 800d5c2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800d5c6:	bf02      	ittt	eq
 800d5c8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800d5cc:	4313      	orreq	r3, r2
 800d5ce:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800d5d2:	1c6b      	adds	r3, r5, #1
 800d5d4:	3502      	adds	r5, #2
 800d5d6:	6063      	str	r3, [r4, #4]
 800d5d8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800d5dc:	f7fa fb33 	bl	8007c46 <__retarget_lock_release_recursive>
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	e7df      	b.n	800d5a4 <__register_exitproc+0x34>
 800d5e4:	20000a48 	.word	0x20000a48
 800d5e8:	20000a80 	.word	0x20000a80
 800d5ec:	2000014c 	.word	0x2000014c

0800d5f0 <quorem>:
 800d5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	6903      	ldr	r3, [r0, #16]
 800d5f6:	690c      	ldr	r4, [r1, #16]
 800d5f8:	42a3      	cmp	r3, r4
 800d5fa:	4607      	mov	r7, r0
 800d5fc:	db7e      	blt.n	800d6fc <quorem+0x10c>
 800d5fe:	3c01      	subs	r4, #1
 800d600:	f101 0814 	add.w	r8, r1, #20
 800d604:	f100 0514 	add.w	r5, r0, #20
 800d608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d616:	3301      	adds	r3, #1
 800d618:	429a      	cmp	r2, r3
 800d61a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d61e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d622:	fbb2 f6f3 	udiv	r6, r2, r3
 800d626:	d331      	bcc.n	800d68c <quorem+0x9c>
 800d628:	f04f 0e00 	mov.w	lr, #0
 800d62c:	4640      	mov	r0, r8
 800d62e:	46ac      	mov	ip, r5
 800d630:	46f2      	mov	sl, lr
 800d632:	f850 2b04 	ldr.w	r2, [r0], #4
 800d636:	b293      	uxth	r3, r2
 800d638:	fb06 e303 	mla	r3, r6, r3, lr
 800d63c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d640:	0c1a      	lsrs	r2, r3, #16
 800d642:	b29b      	uxth	r3, r3
 800d644:	ebaa 0303 	sub.w	r3, sl, r3
 800d648:	f8dc a000 	ldr.w	sl, [ip]
 800d64c:	fa13 f38a 	uxtah	r3, r3, sl
 800d650:	fb06 220e 	mla	r2, r6, lr, r2
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	9b00      	ldr	r3, [sp, #0]
 800d658:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d65c:	b292      	uxth	r2, r2
 800d65e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d662:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d666:	f8bd 3000 	ldrh.w	r3, [sp]
 800d66a:	4581      	cmp	r9, r0
 800d66c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d670:	f84c 3b04 	str.w	r3, [ip], #4
 800d674:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d678:	d2db      	bcs.n	800d632 <quorem+0x42>
 800d67a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d67e:	b92b      	cbnz	r3, 800d68c <quorem+0x9c>
 800d680:	9b01      	ldr	r3, [sp, #4]
 800d682:	3b04      	subs	r3, #4
 800d684:	429d      	cmp	r5, r3
 800d686:	461a      	mov	r2, r3
 800d688:	d32c      	bcc.n	800d6e4 <quorem+0xf4>
 800d68a:	613c      	str	r4, [r7, #16]
 800d68c:	4638      	mov	r0, r7
 800d68e:	f001 f8a7 	bl	800e7e0 <__mcmp>
 800d692:	2800      	cmp	r0, #0
 800d694:	db22      	blt.n	800d6dc <quorem+0xec>
 800d696:	3601      	adds	r6, #1
 800d698:	4629      	mov	r1, r5
 800d69a:	2000      	movs	r0, #0
 800d69c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6a0:	f8d1 c000 	ldr.w	ip, [r1]
 800d6a4:	b293      	uxth	r3, r2
 800d6a6:	1ac3      	subs	r3, r0, r3
 800d6a8:	0c12      	lsrs	r2, r2, #16
 800d6aa:	fa13 f38c 	uxtah	r3, r3, ip
 800d6ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d6b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6bc:	45c1      	cmp	r9, r8
 800d6be:	f841 3b04 	str.w	r3, [r1], #4
 800d6c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d6c6:	d2e9      	bcs.n	800d69c <quorem+0xac>
 800d6c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6d0:	b922      	cbnz	r2, 800d6dc <quorem+0xec>
 800d6d2:	3b04      	subs	r3, #4
 800d6d4:	429d      	cmp	r5, r3
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	d30a      	bcc.n	800d6f0 <quorem+0x100>
 800d6da:	613c      	str	r4, [r7, #16]
 800d6dc:	4630      	mov	r0, r6
 800d6de:	b003      	add	sp, #12
 800d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e4:	6812      	ldr	r2, [r2, #0]
 800d6e6:	3b04      	subs	r3, #4
 800d6e8:	2a00      	cmp	r2, #0
 800d6ea:	d1ce      	bne.n	800d68a <quorem+0x9a>
 800d6ec:	3c01      	subs	r4, #1
 800d6ee:	e7c9      	b.n	800d684 <quorem+0x94>
 800d6f0:	6812      	ldr	r2, [r2, #0]
 800d6f2:	3b04      	subs	r3, #4
 800d6f4:	2a00      	cmp	r2, #0
 800d6f6:	d1f0      	bne.n	800d6da <quorem+0xea>
 800d6f8:	3c01      	subs	r4, #1
 800d6fa:	e7eb      	b.n	800d6d4 <quorem+0xe4>
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e7ee      	b.n	800d6de <quorem+0xee>

0800d700 <_dtoa_r>:
 800d700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	ed2d 8b04 	vpush	{d8-d9}
 800d708:	b093      	sub	sp, #76	; 0x4c
 800d70a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d70e:	9107      	str	r1, [sp, #28]
 800d710:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800d712:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800d714:	920a      	str	r2, [sp, #40]	; 0x28
 800d716:	ec57 6b10 	vmov	r6, r7, d0
 800d71a:	4604      	mov	r4, r0
 800d71c:	930d      	str	r3, [sp, #52]	; 0x34
 800d71e:	b141      	cbz	r1, 800d732 <_dtoa_r+0x32>
 800d720:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d722:	604a      	str	r2, [r1, #4]
 800d724:	2301      	movs	r3, #1
 800d726:	4093      	lsls	r3, r2
 800d728:	608b      	str	r3, [r1, #8]
 800d72a:	f000 fe06 	bl	800e33a <_Bfree>
 800d72e:	2300      	movs	r3, #0
 800d730:	63a3      	str	r3, [r4, #56]	; 0x38
 800d732:	1e3b      	subs	r3, r7, #0
 800d734:	bfb9      	ittee	lt
 800d736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d73a:	9303      	strlt	r3, [sp, #12]
 800d73c:	2300      	movge	r3, #0
 800d73e:	602b      	strge	r3, [r5, #0]
 800d740:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d744:	4ba2      	ldr	r3, [pc, #648]	; (800d9d0 <_dtoa_r+0x2d0>)
 800d746:	bfbc      	itt	lt
 800d748:	2201      	movlt	r2, #1
 800d74a:	602a      	strlt	r2, [r5, #0]
 800d74c:	ea33 0308 	bics.w	r3, r3, r8
 800d750:	d11b      	bne.n	800d78a <_dtoa_r+0x8a>
 800d752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d754:	f242 730f 	movw	r3, #9999	; 0x270f
 800d758:	6013      	str	r3, [r2, #0]
 800d75a:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d75e:	4333      	orrs	r3, r6
 800d760:	f000 858f 	beq.w	800e282 <_dtoa_r+0xb82>
 800d764:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d766:	b90b      	cbnz	r3, 800d76c <_dtoa_r+0x6c>
 800d768:	4b9a      	ldr	r3, [pc, #616]	; (800d9d4 <_dtoa_r+0x2d4>)
 800d76a:	e027      	b.n	800d7bc <_dtoa_r+0xbc>
 800d76c:	4b99      	ldr	r3, [pc, #612]	; (800d9d4 <_dtoa_r+0x2d4>)
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	3303      	adds	r3, #3
 800d772:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	9800      	ldr	r0, [sp, #0]
 800d778:	b013      	add	sp, #76	; 0x4c
 800d77a:	ecbd 8b04 	vpop	{d8-d9}
 800d77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d782:	4b95      	ldr	r3, [pc, #596]	; (800d9d8 <_dtoa_r+0x2d8>)
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	3308      	adds	r3, #8
 800d788:	e7f3      	b.n	800d772 <_dtoa_r+0x72>
 800d78a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d78e:	2200      	movs	r2, #0
 800d790:	ec51 0b17 	vmov	r0, r1, d7
 800d794:	eeb0 8a47 	vmov.f32	s16, s14
 800d798:	eef0 8a67 	vmov.f32	s17, s15
 800d79c:	2300      	movs	r3, #0
 800d79e:	f7f3 f9a3 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7a2:	4681      	mov	r9, r0
 800d7a4:	b160      	cbz	r0, 800d7c0 <_dtoa_r+0xc0>
 800d7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 8564 	beq.w	800e27c <_dtoa_r+0xb7c>
 800d7b4:	4b89      	ldr	r3, [pc, #548]	; (800d9dc <_dtoa_r+0x2dc>)
 800d7b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7b8:	6013      	str	r3, [r2, #0]
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	e7da      	b.n	800d776 <_dtoa_r+0x76>
 800d7c0:	aa10      	add	r2, sp, #64	; 0x40
 800d7c2:	a911      	add	r1, sp, #68	; 0x44
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7ca:	eef0 0a68 	vmov.f32	s1, s17
 800d7ce:	f001 f91d 	bl	800ea0c <__d2b>
 800d7d2:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d7d6:	4682      	mov	sl, r0
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	d07e      	beq.n	800d8da <_dtoa_r+0x1da>
 800d7dc:	ee18 3a90 	vmov	r3, s17
 800d7e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7e4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d7e8:	ec51 0b18 	vmov	r0, r1, d8
 800d7ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d7f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7f4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	4b78      	ldr	r3, [pc, #480]	; (800d9e0 <_dtoa_r+0x2e0>)
 800d7fe:	f7f2 fd53 	bl	80002a8 <__aeabi_dsub>
 800d802:	a36d      	add	r3, pc, #436	; (adr r3, 800d9b8 <_dtoa_r+0x2b8>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	f7f2 ff06 	bl	8000618 <__aeabi_dmul>
 800d80c:	a36c      	add	r3, pc, #432	; (adr r3, 800d9c0 <_dtoa_r+0x2c0>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	f7f2 fd4b 	bl	80002ac <__adddf3>
 800d816:	4606      	mov	r6, r0
 800d818:	4628      	mov	r0, r5
 800d81a:	460f      	mov	r7, r1
 800d81c:	f7f2 fe92 	bl	8000544 <__aeabi_i2d>
 800d820:	a369      	add	r3, pc, #420	; (adr r3, 800d9c8 <_dtoa_r+0x2c8>)
 800d822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d826:	f7f2 fef7 	bl	8000618 <__aeabi_dmul>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4630      	mov	r0, r6
 800d830:	4639      	mov	r1, r7
 800d832:	f7f2 fd3b 	bl	80002ac <__adddf3>
 800d836:	4606      	mov	r6, r0
 800d838:	460f      	mov	r7, r1
 800d83a:	f7f3 f99d 	bl	8000b78 <__aeabi_d2iz>
 800d83e:	2200      	movs	r2, #0
 800d840:	4683      	mov	fp, r0
 800d842:	2300      	movs	r3, #0
 800d844:	4630      	mov	r0, r6
 800d846:	4639      	mov	r1, r7
 800d848:	f7f3 f958 	bl	8000afc <__aeabi_dcmplt>
 800d84c:	b148      	cbz	r0, 800d862 <_dtoa_r+0x162>
 800d84e:	4658      	mov	r0, fp
 800d850:	f7f2 fe78 	bl	8000544 <__aeabi_i2d>
 800d854:	4632      	mov	r2, r6
 800d856:	463b      	mov	r3, r7
 800d858:	f7f3 f946 	bl	8000ae8 <__aeabi_dcmpeq>
 800d85c:	b908      	cbnz	r0, 800d862 <_dtoa_r+0x162>
 800d85e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d862:	f1bb 0f16 	cmp.w	fp, #22
 800d866:	d856      	bhi.n	800d916 <_dtoa_r+0x216>
 800d868:	4b5e      	ldr	r3, [pc, #376]	; (800d9e4 <_dtoa_r+0x2e4>)
 800d86a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d872:	ec51 0b18 	vmov	r0, r1, d8
 800d876:	f7f3 f941 	bl	8000afc <__aeabi_dcmplt>
 800d87a:	2800      	cmp	r0, #0
 800d87c:	d04d      	beq.n	800d91a <_dtoa_r+0x21a>
 800d87e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d882:	2300      	movs	r3, #0
 800d884:	930c      	str	r3, [sp, #48]	; 0x30
 800d886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d888:	1b5b      	subs	r3, r3, r5
 800d88a:	1e5a      	subs	r2, r3, #1
 800d88c:	bf45      	ittet	mi
 800d88e:	f1c3 0301 	rsbmi	r3, r3, #1
 800d892:	9305      	strmi	r3, [sp, #20]
 800d894:	2300      	movpl	r3, #0
 800d896:	2300      	movmi	r3, #0
 800d898:	9206      	str	r2, [sp, #24]
 800d89a:	bf54      	ite	pl
 800d89c:	9305      	strpl	r3, [sp, #20]
 800d89e:	9306      	strmi	r3, [sp, #24]
 800d8a0:	f1bb 0f00 	cmp.w	fp, #0
 800d8a4:	db3b      	blt.n	800d91e <_dtoa_r+0x21e>
 800d8a6:	9b06      	ldr	r3, [sp, #24]
 800d8a8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d8ac:	445b      	add	r3, fp
 800d8ae:	9306      	str	r3, [sp, #24]
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	9308      	str	r3, [sp, #32]
 800d8b4:	9b07      	ldr	r3, [sp, #28]
 800d8b6:	2b09      	cmp	r3, #9
 800d8b8:	d868      	bhi.n	800d98c <_dtoa_r+0x28c>
 800d8ba:	2b05      	cmp	r3, #5
 800d8bc:	bfc4      	itt	gt
 800d8be:	3b04      	subgt	r3, #4
 800d8c0:	9307      	strgt	r3, [sp, #28]
 800d8c2:	9b07      	ldr	r3, [sp, #28]
 800d8c4:	f1a3 0302 	sub.w	r3, r3, #2
 800d8c8:	bfcc      	ite	gt
 800d8ca:	2500      	movgt	r5, #0
 800d8cc:	2501      	movle	r5, #1
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d867      	bhi.n	800d9a2 <_dtoa_r+0x2a2>
 800d8d2:	e8df f003 	tbb	[pc, r3]
 800d8d6:	3b2e      	.short	0x3b2e
 800d8d8:	5939      	.short	0x5939
 800d8da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d8de:	441d      	add	r5, r3
 800d8e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d8e4:	2b20      	cmp	r3, #32
 800d8e6:	bfc1      	itttt	gt
 800d8e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d8ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800d8f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d8f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d8f8:	bfd6      	itet	le
 800d8fa:	f1c3 0320 	rsble	r3, r3, #32
 800d8fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800d902:	fa06 f003 	lslle.w	r0, r6, r3
 800d906:	f7f2 fe0d 	bl	8000524 <__aeabi_ui2d>
 800d90a:	2201      	movs	r2, #1
 800d90c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d910:	3d01      	subs	r5, #1
 800d912:	920e      	str	r2, [sp, #56]	; 0x38
 800d914:	e770      	b.n	800d7f8 <_dtoa_r+0xf8>
 800d916:	2301      	movs	r3, #1
 800d918:	e7b4      	b.n	800d884 <_dtoa_r+0x184>
 800d91a:	900c      	str	r0, [sp, #48]	; 0x30
 800d91c:	e7b3      	b.n	800d886 <_dtoa_r+0x186>
 800d91e:	9b05      	ldr	r3, [sp, #20]
 800d920:	eba3 030b 	sub.w	r3, r3, fp
 800d924:	9305      	str	r3, [sp, #20]
 800d926:	f1cb 0300 	rsb	r3, fp, #0
 800d92a:	9308      	str	r3, [sp, #32]
 800d92c:	2300      	movs	r3, #0
 800d92e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d930:	e7c0      	b.n	800d8b4 <_dtoa_r+0x1b4>
 800d932:	2300      	movs	r3, #0
 800d934:	9309      	str	r3, [sp, #36]	; 0x24
 800d936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d938:	2b00      	cmp	r3, #0
 800d93a:	dc35      	bgt.n	800d9a8 <_dtoa_r+0x2a8>
 800d93c:	2301      	movs	r3, #1
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	461a      	mov	r2, r3
 800d944:	920a      	str	r2, [sp, #40]	; 0x28
 800d946:	e00b      	b.n	800d960 <_dtoa_r+0x260>
 800d948:	2301      	movs	r3, #1
 800d94a:	e7f3      	b.n	800d934 <_dtoa_r+0x234>
 800d94c:	2300      	movs	r3, #0
 800d94e:	9309      	str	r3, [sp, #36]	; 0x24
 800d950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d952:	445b      	add	r3, fp
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	3301      	adds	r3, #1
 800d958:	2b01      	cmp	r3, #1
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	bfb8      	it	lt
 800d95e:	2301      	movlt	r3, #1
 800d960:	2100      	movs	r1, #0
 800d962:	2204      	movs	r2, #4
 800d964:	f102 0014 	add.w	r0, r2, #20
 800d968:	4298      	cmp	r0, r3
 800d96a:	d921      	bls.n	800d9b0 <_dtoa_r+0x2b0>
 800d96c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800d96e:	4620      	mov	r0, r4
 800d970:	f000 fcbe 	bl	800e2f0 <_Balloc>
 800d974:	9000      	str	r0, [sp, #0]
 800d976:	2800      	cmp	r0, #0
 800d978:	d13a      	bne.n	800d9f0 <_dtoa_r+0x2f0>
 800d97a:	4b1b      	ldr	r3, [pc, #108]	; (800d9e8 <_dtoa_r+0x2e8>)
 800d97c:	4602      	mov	r2, r0
 800d97e:	f240 11af 	movw	r1, #431	; 0x1af
 800d982:	481a      	ldr	r0, [pc, #104]	; (800d9ec <_dtoa_r+0x2ec>)
 800d984:	f002 fcb0 	bl	80102e8 <__assert_func>
 800d988:	2301      	movs	r3, #1
 800d98a:	e7e0      	b.n	800d94e <_dtoa_r+0x24e>
 800d98c:	2501      	movs	r5, #1
 800d98e:	2300      	movs	r3, #0
 800d990:	9307      	str	r3, [sp, #28]
 800d992:	9509      	str	r5, [sp, #36]	; 0x24
 800d994:	f04f 33ff 	mov.w	r3, #4294967295
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	2200      	movs	r2, #0
 800d99e:	2312      	movs	r3, #18
 800d9a0:	e7d0      	b.n	800d944 <_dtoa_r+0x244>
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a6:	e7f5      	b.n	800d994 <_dtoa_r+0x294>
 800d9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9aa:	9301      	str	r3, [sp, #4]
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	e7d7      	b.n	800d960 <_dtoa_r+0x260>
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	0052      	lsls	r2, r2, #1
 800d9b4:	e7d6      	b.n	800d964 <_dtoa_r+0x264>
 800d9b6:	bf00      	nop
 800d9b8:	636f4361 	.word	0x636f4361
 800d9bc:	3fd287a7 	.word	0x3fd287a7
 800d9c0:	8b60c8b3 	.word	0x8b60c8b3
 800d9c4:	3fc68a28 	.word	0x3fc68a28
 800d9c8:	509f79fb 	.word	0x509f79fb
 800d9cc:	3fd34413 	.word	0x3fd34413
 800d9d0:	7ff00000 	.word	0x7ff00000
 800d9d4:	08011983 	.word	0x08011983
 800d9d8:	0801197a 	.word	0x0801197a
 800d9dc:	080118e7 	.word	0x080118e7
 800d9e0:	3ff80000 	.word	0x3ff80000
 800d9e4:	08011a78 	.word	0x08011a78
 800d9e8:	08011987 	.word	0x08011987
 800d9ec:	08011998 	.word	0x08011998
 800d9f0:	9b00      	ldr	r3, [sp, #0]
 800d9f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d9f4:	9b04      	ldr	r3, [sp, #16]
 800d9f6:	2b0e      	cmp	r3, #14
 800d9f8:	f200 80a8 	bhi.w	800db4c <_dtoa_r+0x44c>
 800d9fc:	2d00      	cmp	r5, #0
 800d9fe:	f000 80a5 	beq.w	800db4c <_dtoa_r+0x44c>
 800da02:	f1bb 0f00 	cmp.w	fp, #0
 800da06:	dd38      	ble.n	800da7a <_dtoa_r+0x37a>
 800da08:	4bbf      	ldr	r3, [pc, #764]	; (800dd08 <_dtoa_r+0x608>)
 800da0a:	f00b 020f 	and.w	r2, fp, #15
 800da0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800da16:	e9d3 6700 	ldrd	r6, r7, [r3]
 800da1a:	ea4f 182b 	mov.w	r8, fp, asr #4
 800da1e:	d019      	beq.n	800da54 <_dtoa_r+0x354>
 800da20:	4bba      	ldr	r3, [pc, #744]	; (800dd0c <_dtoa_r+0x60c>)
 800da22:	ec51 0b18 	vmov	r0, r1, d8
 800da26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da2a:	f7f2 ff1f 	bl	800086c <__aeabi_ddiv>
 800da2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da32:	f008 080f 	and.w	r8, r8, #15
 800da36:	2503      	movs	r5, #3
 800da38:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800dd0c <_dtoa_r+0x60c>
 800da3c:	f1b8 0f00 	cmp.w	r8, #0
 800da40:	d10a      	bne.n	800da58 <_dtoa_r+0x358>
 800da42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da46:	4632      	mov	r2, r6
 800da48:	463b      	mov	r3, r7
 800da4a:	f7f2 ff0f 	bl	800086c <__aeabi_ddiv>
 800da4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da52:	e02b      	b.n	800daac <_dtoa_r+0x3ac>
 800da54:	2502      	movs	r5, #2
 800da56:	e7ef      	b.n	800da38 <_dtoa_r+0x338>
 800da58:	f018 0f01 	tst.w	r8, #1
 800da5c:	d008      	beq.n	800da70 <_dtoa_r+0x370>
 800da5e:	4630      	mov	r0, r6
 800da60:	4639      	mov	r1, r7
 800da62:	e9d9 2300 	ldrd	r2, r3, [r9]
 800da66:	f7f2 fdd7 	bl	8000618 <__aeabi_dmul>
 800da6a:	3501      	adds	r5, #1
 800da6c:	4606      	mov	r6, r0
 800da6e:	460f      	mov	r7, r1
 800da70:	ea4f 0868 	mov.w	r8, r8, asr #1
 800da74:	f109 0908 	add.w	r9, r9, #8
 800da78:	e7e0      	b.n	800da3c <_dtoa_r+0x33c>
 800da7a:	f000 809f 	beq.w	800dbbc <_dtoa_r+0x4bc>
 800da7e:	f1cb 0600 	rsb	r6, fp, #0
 800da82:	4ba1      	ldr	r3, [pc, #644]	; (800dd08 <_dtoa_r+0x608>)
 800da84:	4fa1      	ldr	r7, [pc, #644]	; (800dd0c <_dtoa_r+0x60c>)
 800da86:	f006 020f 	and.w	r2, r6, #15
 800da8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	ec51 0b18 	vmov	r0, r1, d8
 800da96:	f7f2 fdbf 	bl	8000618 <__aeabi_dmul>
 800da9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da9e:	1136      	asrs	r6, r6, #4
 800daa0:	2300      	movs	r3, #0
 800daa2:	2502      	movs	r5, #2
 800daa4:	2e00      	cmp	r6, #0
 800daa6:	d17e      	bne.n	800dba6 <_dtoa_r+0x4a6>
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1d0      	bne.n	800da4e <_dtoa_r+0x34e>
 800daac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800daae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 8084 	beq.w	800dbc0 <_dtoa_r+0x4c0>
 800dab8:	4b95      	ldr	r3, [pc, #596]	; (800dd10 <_dtoa_r+0x610>)
 800daba:	2200      	movs	r2, #0
 800dabc:	4640      	mov	r0, r8
 800dabe:	4649      	mov	r1, r9
 800dac0:	f7f3 f81c 	bl	8000afc <__aeabi_dcmplt>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d07b      	beq.n	800dbc0 <_dtoa_r+0x4c0>
 800dac8:	9b04      	ldr	r3, [sp, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d078      	beq.n	800dbc0 <_dtoa_r+0x4c0>
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dd39      	ble.n	800db48 <_dtoa_r+0x448>
 800dad4:	4b8f      	ldr	r3, [pc, #572]	; (800dd14 <_dtoa_r+0x614>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	4640      	mov	r0, r8
 800dada:	4649      	mov	r1, r9
 800dadc:	f7f2 fd9c 	bl	8000618 <__aeabi_dmul>
 800dae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dae4:	9e01      	ldr	r6, [sp, #4]
 800dae6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800daea:	3501      	adds	r5, #1
 800daec:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800daf0:	4628      	mov	r0, r5
 800daf2:	f7f2 fd27 	bl	8000544 <__aeabi_i2d>
 800daf6:	4642      	mov	r2, r8
 800daf8:	464b      	mov	r3, r9
 800dafa:	f7f2 fd8d 	bl	8000618 <__aeabi_dmul>
 800dafe:	4b86      	ldr	r3, [pc, #536]	; (800dd18 <_dtoa_r+0x618>)
 800db00:	2200      	movs	r2, #0
 800db02:	f7f2 fbd3 	bl	80002ac <__adddf3>
 800db06:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800db0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db0e:	9303      	str	r3, [sp, #12]
 800db10:	2e00      	cmp	r6, #0
 800db12:	d158      	bne.n	800dbc6 <_dtoa_r+0x4c6>
 800db14:	4b81      	ldr	r3, [pc, #516]	; (800dd1c <_dtoa_r+0x61c>)
 800db16:	2200      	movs	r2, #0
 800db18:	4640      	mov	r0, r8
 800db1a:	4649      	mov	r1, r9
 800db1c:	f7f2 fbc4 	bl	80002a8 <__aeabi_dsub>
 800db20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db24:	4680      	mov	r8, r0
 800db26:	4689      	mov	r9, r1
 800db28:	f7f3 f806 	bl	8000b38 <__aeabi_dcmpgt>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	f040 8295 	bne.w	800e05c <_dtoa_r+0x95c>
 800db32:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800db36:	4640      	mov	r0, r8
 800db38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db3c:	4649      	mov	r1, r9
 800db3e:	f7f2 ffdd 	bl	8000afc <__aeabi_dcmplt>
 800db42:	2800      	cmp	r0, #0
 800db44:	f040 8288 	bne.w	800e058 <_dtoa_r+0x958>
 800db48:	ed8d 8b02 	vstr	d8, [sp, #8]
 800db4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f2c0 814d 	blt.w	800ddee <_dtoa_r+0x6ee>
 800db54:	f1bb 0f0e 	cmp.w	fp, #14
 800db58:	f300 8149 	bgt.w	800ddee <_dtoa_r+0x6ee>
 800db5c:	4b6a      	ldr	r3, [pc, #424]	; (800dd08 <_dtoa_r+0x608>)
 800db5e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f280 80db 	bge.w	800dd24 <_dtoa_r+0x624>
 800db6e:	9b04      	ldr	r3, [sp, #16]
 800db70:	2b00      	cmp	r3, #0
 800db72:	f300 80d7 	bgt.w	800dd24 <_dtoa_r+0x624>
 800db76:	f040 826e 	bne.w	800e056 <_dtoa_r+0x956>
 800db7a:	4b68      	ldr	r3, [pc, #416]	; (800dd1c <_dtoa_r+0x61c>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	4640      	mov	r0, r8
 800db80:	4649      	mov	r1, r9
 800db82:	f7f2 fd49 	bl	8000618 <__aeabi_dmul>
 800db86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db8a:	f7f2 ffcb 	bl	8000b24 <__aeabi_dcmpge>
 800db8e:	9e04      	ldr	r6, [sp, #16]
 800db90:	4637      	mov	r7, r6
 800db92:	2800      	cmp	r0, #0
 800db94:	f040 8244 	bne.w	800e020 <_dtoa_r+0x920>
 800db98:	9d00      	ldr	r5, [sp, #0]
 800db9a:	2331      	movs	r3, #49	; 0x31
 800db9c:	f805 3b01 	strb.w	r3, [r5], #1
 800dba0:	f10b 0b01 	add.w	fp, fp, #1
 800dba4:	e240      	b.n	800e028 <_dtoa_r+0x928>
 800dba6:	07f2      	lsls	r2, r6, #31
 800dba8:	d505      	bpl.n	800dbb6 <_dtoa_r+0x4b6>
 800dbaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbae:	f7f2 fd33 	bl	8000618 <__aeabi_dmul>
 800dbb2:	3501      	adds	r5, #1
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	1076      	asrs	r6, r6, #1
 800dbb8:	3708      	adds	r7, #8
 800dbba:	e773      	b.n	800daa4 <_dtoa_r+0x3a4>
 800dbbc:	2502      	movs	r5, #2
 800dbbe:	e775      	b.n	800daac <_dtoa_r+0x3ac>
 800dbc0:	9e04      	ldr	r6, [sp, #16]
 800dbc2:	465f      	mov	r7, fp
 800dbc4:	e792      	b.n	800daec <_dtoa_r+0x3ec>
 800dbc6:	9900      	ldr	r1, [sp, #0]
 800dbc8:	4b4f      	ldr	r3, [pc, #316]	; (800dd08 <_dtoa_r+0x608>)
 800dbca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbce:	4431      	add	r1, r6
 800dbd0:	9102      	str	r1, [sp, #8]
 800dbd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbd4:	eeb0 9a47 	vmov.f32	s18, s14
 800dbd8:	eef0 9a67 	vmov.f32	s19, s15
 800dbdc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dbe0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dbe4:	2900      	cmp	r1, #0
 800dbe6:	d044      	beq.n	800dc72 <_dtoa_r+0x572>
 800dbe8:	494d      	ldr	r1, [pc, #308]	; (800dd20 <_dtoa_r+0x620>)
 800dbea:	2000      	movs	r0, #0
 800dbec:	f7f2 fe3e 	bl	800086c <__aeabi_ddiv>
 800dbf0:	ec53 2b19 	vmov	r2, r3, d9
 800dbf4:	f7f2 fb58 	bl	80002a8 <__aeabi_dsub>
 800dbf8:	9d00      	ldr	r5, [sp, #0]
 800dbfa:	ec41 0b19 	vmov	d9, r0, r1
 800dbfe:	4649      	mov	r1, r9
 800dc00:	4640      	mov	r0, r8
 800dc02:	f7f2 ffb9 	bl	8000b78 <__aeabi_d2iz>
 800dc06:	4606      	mov	r6, r0
 800dc08:	f7f2 fc9c 	bl	8000544 <__aeabi_i2d>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	f7f2 fb48 	bl	80002a8 <__aeabi_dsub>
 800dc18:	3630      	adds	r6, #48	; 0x30
 800dc1a:	f805 6b01 	strb.w	r6, [r5], #1
 800dc1e:	ec53 2b19 	vmov	r2, r3, d9
 800dc22:	4680      	mov	r8, r0
 800dc24:	4689      	mov	r9, r1
 800dc26:	f7f2 ff69 	bl	8000afc <__aeabi_dcmplt>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d164      	bne.n	800dcf8 <_dtoa_r+0x5f8>
 800dc2e:	4642      	mov	r2, r8
 800dc30:	464b      	mov	r3, r9
 800dc32:	4937      	ldr	r1, [pc, #220]	; (800dd10 <_dtoa_r+0x610>)
 800dc34:	2000      	movs	r0, #0
 800dc36:	f7f2 fb37 	bl	80002a8 <__aeabi_dsub>
 800dc3a:	ec53 2b19 	vmov	r2, r3, d9
 800dc3e:	f7f2 ff5d 	bl	8000afc <__aeabi_dcmplt>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f040 80b5 	bne.w	800ddb2 <_dtoa_r+0x6b2>
 800dc48:	9b02      	ldr	r3, [sp, #8]
 800dc4a:	429d      	cmp	r5, r3
 800dc4c:	f43f af7c 	beq.w	800db48 <_dtoa_r+0x448>
 800dc50:	4b30      	ldr	r3, [pc, #192]	; (800dd14 <_dtoa_r+0x614>)
 800dc52:	ec51 0b19 	vmov	r0, r1, d9
 800dc56:	2200      	movs	r2, #0
 800dc58:	f7f2 fcde 	bl	8000618 <__aeabi_dmul>
 800dc5c:	4b2d      	ldr	r3, [pc, #180]	; (800dd14 <_dtoa_r+0x614>)
 800dc5e:	ec41 0b19 	vmov	d9, r0, r1
 800dc62:	2200      	movs	r2, #0
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 fcd6 	bl	8000618 <__aeabi_dmul>
 800dc6c:	4680      	mov	r8, r0
 800dc6e:	4689      	mov	r9, r1
 800dc70:	e7c5      	b.n	800dbfe <_dtoa_r+0x4fe>
 800dc72:	ec51 0b17 	vmov	r0, r1, d7
 800dc76:	f7f2 fccf 	bl	8000618 <__aeabi_dmul>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	9d00      	ldr	r5, [sp, #0]
 800dc7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc80:	ec41 0b19 	vmov	d9, r0, r1
 800dc84:	4649      	mov	r1, r9
 800dc86:	4640      	mov	r0, r8
 800dc88:	f7f2 ff76 	bl	8000b78 <__aeabi_d2iz>
 800dc8c:	4606      	mov	r6, r0
 800dc8e:	f7f2 fc59 	bl	8000544 <__aeabi_i2d>
 800dc92:	3630      	adds	r6, #48	; 0x30
 800dc94:	4602      	mov	r2, r0
 800dc96:	460b      	mov	r3, r1
 800dc98:	4640      	mov	r0, r8
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	f7f2 fb04 	bl	80002a8 <__aeabi_dsub>
 800dca0:	f805 6b01 	strb.w	r6, [r5], #1
 800dca4:	9b02      	ldr	r3, [sp, #8]
 800dca6:	429d      	cmp	r5, r3
 800dca8:	4680      	mov	r8, r0
 800dcaa:	4689      	mov	r9, r1
 800dcac:	f04f 0200 	mov.w	r2, #0
 800dcb0:	d124      	bne.n	800dcfc <_dtoa_r+0x5fc>
 800dcb2:	4b1b      	ldr	r3, [pc, #108]	; (800dd20 <_dtoa_r+0x620>)
 800dcb4:	ec51 0b19 	vmov	r0, r1, d9
 800dcb8:	f7f2 faf8 	bl	80002ac <__adddf3>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	f7f2 ff38 	bl	8000b38 <__aeabi_dcmpgt>
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d172      	bne.n	800ddb2 <_dtoa_r+0x6b2>
 800dccc:	ec53 2b19 	vmov	r2, r3, d9
 800dcd0:	4913      	ldr	r1, [pc, #76]	; (800dd20 <_dtoa_r+0x620>)
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	f7f2 fae8 	bl	80002a8 <__aeabi_dsub>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4640      	mov	r0, r8
 800dcde:	4649      	mov	r1, r9
 800dce0:	f7f2 ff0c 	bl	8000afc <__aeabi_dcmplt>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	f43f af2f 	beq.w	800db48 <_dtoa_r+0x448>
 800dcea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dcec:	1e6b      	subs	r3, r5, #1
 800dcee:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcf4:	2b30      	cmp	r3, #48	; 0x30
 800dcf6:	d0f8      	beq.n	800dcea <_dtoa_r+0x5ea>
 800dcf8:	46bb      	mov	fp, r7
 800dcfa:	e049      	b.n	800dd90 <_dtoa_r+0x690>
 800dcfc:	4b05      	ldr	r3, [pc, #20]	; (800dd14 <_dtoa_r+0x614>)
 800dcfe:	f7f2 fc8b 	bl	8000618 <__aeabi_dmul>
 800dd02:	4680      	mov	r8, r0
 800dd04:	4689      	mov	r9, r1
 800dd06:	e7bd      	b.n	800dc84 <_dtoa_r+0x584>
 800dd08:	08011a78 	.word	0x08011a78
 800dd0c:	08011a50 	.word	0x08011a50
 800dd10:	3ff00000 	.word	0x3ff00000
 800dd14:	40240000 	.word	0x40240000
 800dd18:	401c0000 	.word	0x401c0000
 800dd1c:	40140000 	.word	0x40140000
 800dd20:	3fe00000 	.word	0x3fe00000
 800dd24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd28:	9d00      	ldr	r5, [sp, #0]
 800dd2a:	4642      	mov	r2, r8
 800dd2c:	464b      	mov	r3, r9
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4639      	mov	r1, r7
 800dd32:	f7f2 fd9b 	bl	800086c <__aeabi_ddiv>
 800dd36:	f7f2 ff1f 	bl	8000b78 <__aeabi_d2iz>
 800dd3a:	9001      	str	r0, [sp, #4]
 800dd3c:	f7f2 fc02 	bl	8000544 <__aeabi_i2d>
 800dd40:	4642      	mov	r2, r8
 800dd42:	464b      	mov	r3, r9
 800dd44:	f7f2 fc68 	bl	8000618 <__aeabi_dmul>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	4639      	mov	r1, r7
 800dd50:	f7f2 faaa 	bl	80002a8 <__aeabi_dsub>
 800dd54:	9e01      	ldr	r6, [sp, #4]
 800dd56:	9f04      	ldr	r7, [sp, #16]
 800dd58:	3630      	adds	r6, #48	; 0x30
 800dd5a:	f805 6b01 	strb.w	r6, [r5], #1
 800dd5e:	9e00      	ldr	r6, [sp, #0]
 800dd60:	1bae      	subs	r6, r5, r6
 800dd62:	42b7      	cmp	r7, r6
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	d134      	bne.n	800ddd4 <_dtoa_r+0x6d4>
 800dd6a:	f7f2 fa9f 	bl	80002ac <__adddf3>
 800dd6e:	4642      	mov	r2, r8
 800dd70:	464b      	mov	r3, r9
 800dd72:	4606      	mov	r6, r0
 800dd74:	460f      	mov	r7, r1
 800dd76:	f7f2 fedf 	bl	8000b38 <__aeabi_dcmpgt>
 800dd7a:	b9c8      	cbnz	r0, 800ddb0 <_dtoa_r+0x6b0>
 800dd7c:	4642      	mov	r2, r8
 800dd7e:	464b      	mov	r3, r9
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 feb0 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd88:	b110      	cbz	r0, 800dd90 <_dtoa_r+0x690>
 800dd8a:	9b01      	ldr	r3, [sp, #4]
 800dd8c:	07db      	lsls	r3, r3, #31
 800dd8e:	d40f      	bmi.n	800ddb0 <_dtoa_r+0x6b0>
 800dd90:	4651      	mov	r1, sl
 800dd92:	4620      	mov	r0, r4
 800dd94:	f000 fad1 	bl	800e33a <_Bfree>
 800dd98:	2300      	movs	r3, #0
 800dd9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd9c:	702b      	strb	r3, [r5, #0]
 800dd9e:	f10b 0301 	add.w	r3, fp, #1
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f43f ace5 	beq.w	800d776 <_dtoa_r+0x76>
 800ddac:	601d      	str	r5, [r3, #0]
 800ddae:	e4e2      	b.n	800d776 <_dtoa_r+0x76>
 800ddb0:	465f      	mov	r7, fp
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	461d      	mov	r5, r3
 800ddb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddba:	2a39      	cmp	r2, #57	; 0x39
 800ddbc:	d106      	bne.n	800ddcc <_dtoa_r+0x6cc>
 800ddbe:	9a00      	ldr	r2, [sp, #0]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d1f7      	bne.n	800ddb4 <_dtoa_r+0x6b4>
 800ddc4:	9900      	ldr	r1, [sp, #0]
 800ddc6:	2230      	movs	r2, #48	; 0x30
 800ddc8:	3701      	adds	r7, #1
 800ddca:	700a      	strb	r2, [r1, #0]
 800ddcc:	781a      	ldrb	r2, [r3, #0]
 800ddce:	3201      	adds	r2, #1
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	e791      	b.n	800dcf8 <_dtoa_r+0x5f8>
 800ddd4:	4ba3      	ldr	r3, [pc, #652]	; (800e064 <_dtoa_r+0x964>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f7f2 fc1e 	bl	8000618 <__aeabi_dmul>
 800dddc:	2200      	movs	r2, #0
 800ddde:	2300      	movs	r3, #0
 800dde0:	4606      	mov	r6, r0
 800dde2:	460f      	mov	r7, r1
 800dde4:	f7f2 fe80 	bl	8000ae8 <__aeabi_dcmpeq>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d09e      	beq.n	800dd2a <_dtoa_r+0x62a>
 800ddec:	e7d0      	b.n	800dd90 <_dtoa_r+0x690>
 800ddee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	f000 80ca 	beq.w	800df8a <_dtoa_r+0x88a>
 800ddf6:	9a07      	ldr	r2, [sp, #28]
 800ddf8:	2a01      	cmp	r2, #1
 800ddfa:	f300 80ad 	bgt.w	800df58 <_dtoa_r+0x858>
 800ddfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de00:	2a00      	cmp	r2, #0
 800de02:	f000 80a5 	beq.w	800df50 <_dtoa_r+0x850>
 800de06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de0a:	9e08      	ldr	r6, [sp, #32]
 800de0c:	9d05      	ldr	r5, [sp, #20]
 800de0e:	9a05      	ldr	r2, [sp, #20]
 800de10:	441a      	add	r2, r3
 800de12:	9205      	str	r2, [sp, #20]
 800de14:	9a06      	ldr	r2, [sp, #24]
 800de16:	2101      	movs	r1, #1
 800de18:	441a      	add	r2, r3
 800de1a:	4620      	mov	r0, r4
 800de1c:	9206      	str	r2, [sp, #24]
 800de1e:	f000 fb73 	bl	800e508 <__i2b>
 800de22:	4607      	mov	r7, r0
 800de24:	b165      	cbz	r5, 800de40 <_dtoa_r+0x740>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	dd09      	ble.n	800de40 <_dtoa_r+0x740>
 800de2c:	42ab      	cmp	r3, r5
 800de2e:	9a05      	ldr	r2, [sp, #20]
 800de30:	bfa8      	it	ge
 800de32:	462b      	movge	r3, r5
 800de34:	1ad2      	subs	r2, r2, r3
 800de36:	9205      	str	r2, [sp, #20]
 800de38:	9a06      	ldr	r2, [sp, #24]
 800de3a:	1aed      	subs	r5, r5, r3
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	9306      	str	r3, [sp, #24]
 800de40:	9b08      	ldr	r3, [sp, #32]
 800de42:	b1f3      	cbz	r3, 800de82 <_dtoa_r+0x782>
 800de44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 80a3 	beq.w	800df92 <_dtoa_r+0x892>
 800de4c:	2e00      	cmp	r6, #0
 800de4e:	dd10      	ble.n	800de72 <_dtoa_r+0x772>
 800de50:	4639      	mov	r1, r7
 800de52:	4632      	mov	r2, r6
 800de54:	4620      	mov	r0, r4
 800de56:	f000 fc17 	bl	800e688 <__pow5mult>
 800de5a:	4652      	mov	r2, sl
 800de5c:	4601      	mov	r1, r0
 800de5e:	4607      	mov	r7, r0
 800de60:	4620      	mov	r0, r4
 800de62:	f000 fb67 	bl	800e534 <__multiply>
 800de66:	4651      	mov	r1, sl
 800de68:	4680      	mov	r8, r0
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 fa65 	bl	800e33a <_Bfree>
 800de70:	46c2      	mov	sl, r8
 800de72:	9b08      	ldr	r3, [sp, #32]
 800de74:	1b9a      	subs	r2, r3, r6
 800de76:	d004      	beq.n	800de82 <_dtoa_r+0x782>
 800de78:	4651      	mov	r1, sl
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 fc04 	bl	800e688 <__pow5mult>
 800de80:	4682      	mov	sl, r0
 800de82:	2101      	movs	r1, #1
 800de84:	4620      	mov	r0, r4
 800de86:	f000 fb3f 	bl	800e508 <__i2b>
 800de8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	4606      	mov	r6, r0
 800de90:	f340 8081 	ble.w	800df96 <_dtoa_r+0x896>
 800de94:	461a      	mov	r2, r3
 800de96:	4601      	mov	r1, r0
 800de98:	4620      	mov	r0, r4
 800de9a:	f000 fbf5 	bl	800e688 <__pow5mult>
 800de9e:	9b07      	ldr	r3, [sp, #28]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	4606      	mov	r6, r0
 800dea4:	dd7a      	ble.n	800df9c <_dtoa_r+0x89c>
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	6933      	ldr	r3, [r6, #16]
 800deac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800deb0:	6918      	ldr	r0, [r3, #16]
 800deb2:	f000 fadb 	bl	800e46c <__hi0bits>
 800deb6:	f1c0 0020 	rsb	r0, r0, #32
 800deba:	9b06      	ldr	r3, [sp, #24]
 800debc:	4418      	add	r0, r3
 800debe:	f010 001f 	ands.w	r0, r0, #31
 800dec2:	f000 8094 	beq.w	800dfee <_dtoa_r+0x8ee>
 800dec6:	f1c0 0320 	rsb	r3, r0, #32
 800deca:	2b04      	cmp	r3, #4
 800decc:	f340 8085 	ble.w	800dfda <_dtoa_r+0x8da>
 800ded0:	9b05      	ldr	r3, [sp, #20]
 800ded2:	f1c0 001c 	rsb	r0, r0, #28
 800ded6:	4403      	add	r3, r0
 800ded8:	9305      	str	r3, [sp, #20]
 800deda:	9b06      	ldr	r3, [sp, #24]
 800dedc:	4403      	add	r3, r0
 800dede:	4405      	add	r5, r0
 800dee0:	9306      	str	r3, [sp, #24]
 800dee2:	9b05      	ldr	r3, [sp, #20]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd05      	ble.n	800def4 <_dtoa_r+0x7f4>
 800dee8:	4651      	mov	r1, sl
 800deea:	461a      	mov	r2, r3
 800deec:	4620      	mov	r0, r4
 800deee:	f000 fc0b 	bl	800e708 <__lshift>
 800def2:	4682      	mov	sl, r0
 800def4:	9b06      	ldr	r3, [sp, #24]
 800def6:	2b00      	cmp	r3, #0
 800def8:	dd05      	ble.n	800df06 <_dtoa_r+0x806>
 800defa:	4631      	mov	r1, r6
 800defc:	461a      	mov	r2, r3
 800defe:	4620      	mov	r0, r4
 800df00:	f000 fc02 	bl	800e708 <__lshift>
 800df04:	4606      	mov	r6, r0
 800df06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d072      	beq.n	800dff2 <_dtoa_r+0x8f2>
 800df0c:	4631      	mov	r1, r6
 800df0e:	4650      	mov	r0, sl
 800df10:	f000 fc66 	bl	800e7e0 <__mcmp>
 800df14:	2800      	cmp	r0, #0
 800df16:	da6c      	bge.n	800dff2 <_dtoa_r+0x8f2>
 800df18:	2300      	movs	r3, #0
 800df1a:	4651      	mov	r1, sl
 800df1c:	220a      	movs	r2, #10
 800df1e:	4620      	mov	r0, r4
 800df20:	f000 fa14 	bl	800e34c <__multadd>
 800df24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df26:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df2a:	4682      	mov	sl, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f000 81af 	beq.w	800e290 <_dtoa_r+0xb90>
 800df32:	2300      	movs	r3, #0
 800df34:	4639      	mov	r1, r7
 800df36:	220a      	movs	r2, #10
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 fa07 	bl	800e34c <__multadd>
 800df3e:	9b01      	ldr	r3, [sp, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	4607      	mov	r7, r0
 800df44:	f300 8096 	bgt.w	800e074 <_dtoa_r+0x974>
 800df48:	9b07      	ldr	r3, [sp, #28]
 800df4a:	2b02      	cmp	r3, #2
 800df4c:	dc59      	bgt.n	800e002 <_dtoa_r+0x902>
 800df4e:	e091      	b.n	800e074 <_dtoa_r+0x974>
 800df50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df56:	e758      	b.n	800de0a <_dtoa_r+0x70a>
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	1e5e      	subs	r6, r3, #1
 800df5c:	9b08      	ldr	r3, [sp, #32]
 800df5e:	42b3      	cmp	r3, r6
 800df60:	bfbf      	itttt	lt
 800df62:	9b08      	ldrlt	r3, [sp, #32]
 800df64:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800df66:	9608      	strlt	r6, [sp, #32]
 800df68:	1af3      	sublt	r3, r6, r3
 800df6a:	bfb4      	ite	lt
 800df6c:	18d2      	addlt	r2, r2, r3
 800df6e:	1b9e      	subge	r6, r3, r6
 800df70:	9b04      	ldr	r3, [sp, #16]
 800df72:	bfbc      	itt	lt
 800df74:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800df76:	2600      	movlt	r6, #0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	bfb7      	itett	lt
 800df7c:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800df80:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800df84:	1a9d      	sublt	r5, r3, r2
 800df86:	2300      	movlt	r3, #0
 800df88:	e741      	b.n	800de0e <_dtoa_r+0x70e>
 800df8a:	9e08      	ldr	r6, [sp, #32]
 800df8c:	9d05      	ldr	r5, [sp, #20]
 800df8e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df90:	e748      	b.n	800de24 <_dtoa_r+0x724>
 800df92:	9a08      	ldr	r2, [sp, #32]
 800df94:	e770      	b.n	800de78 <_dtoa_r+0x778>
 800df96:	9b07      	ldr	r3, [sp, #28]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	dc19      	bgt.n	800dfd0 <_dtoa_r+0x8d0>
 800df9c:	9b02      	ldr	r3, [sp, #8]
 800df9e:	b9bb      	cbnz	r3, 800dfd0 <_dtoa_r+0x8d0>
 800dfa0:	9b03      	ldr	r3, [sp, #12]
 800dfa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfa6:	b99b      	cbnz	r3, 800dfd0 <_dtoa_r+0x8d0>
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfae:	0d1b      	lsrs	r3, r3, #20
 800dfb0:	051b      	lsls	r3, r3, #20
 800dfb2:	b183      	cbz	r3, 800dfd6 <_dtoa_r+0x8d6>
 800dfb4:	9b05      	ldr	r3, [sp, #20]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	9305      	str	r3, [sp, #20]
 800dfba:	9b06      	ldr	r3, [sp, #24]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	9306      	str	r3, [sp, #24]
 800dfc0:	f04f 0801 	mov.w	r8, #1
 800dfc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f47f af6f 	bne.w	800deaa <_dtoa_r+0x7aa>
 800dfcc:	2001      	movs	r0, #1
 800dfce:	e774      	b.n	800deba <_dtoa_r+0x7ba>
 800dfd0:	f04f 0800 	mov.w	r8, #0
 800dfd4:	e7f6      	b.n	800dfc4 <_dtoa_r+0x8c4>
 800dfd6:	4698      	mov	r8, r3
 800dfd8:	e7f4      	b.n	800dfc4 <_dtoa_r+0x8c4>
 800dfda:	d082      	beq.n	800dee2 <_dtoa_r+0x7e2>
 800dfdc:	9a05      	ldr	r2, [sp, #20]
 800dfde:	331c      	adds	r3, #28
 800dfe0:	441a      	add	r2, r3
 800dfe2:	9205      	str	r2, [sp, #20]
 800dfe4:	9a06      	ldr	r2, [sp, #24]
 800dfe6:	441a      	add	r2, r3
 800dfe8:	441d      	add	r5, r3
 800dfea:	9206      	str	r2, [sp, #24]
 800dfec:	e779      	b.n	800dee2 <_dtoa_r+0x7e2>
 800dfee:	4603      	mov	r3, r0
 800dff0:	e7f4      	b.n	800dfdc <_dtoa_r+0x8dc>
 800dff2:	9b04      	ldr	r3, [sp, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	dc37      	bgt.n	800e068 <_dtoa_r+0x968>
 800dff8:	9b07      	ldr	r3, [sp, #28]
 800dffa:	2b02      	cmp	r3, #2
 800dffc:	dd34      	ble.n	800e068 <_dtoa_r+0x968>
 800dffe:	9b04      	ldr	r3, [sp, #16]
 800e000:	9301      	str	r3, [sp, #4]
 800e002:	9b01      	ldr	r3, [sp, #4]
 800e004:	b963      	cbnz	r3, 800e020 <_dtoa_r+0x920>
 800e006:	4631      	mov	r1, r6
 800e008:	2205      	movs	r2, #5
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 f99e 	bl	800e34c <__multadd>
 800e010:	4601      	mov	r1, r0
 800e012:	4606      	mov	r6, r0
 800e014:	4650      	mov	r0, sl
 800e016:	f000 fbe3 	bl	800e7e0 <__mcmp>
 800e01a:	2800      	cmp	r0, #0
 800e01c:	f73f adbc 	bgt.w	800db98 <_dtoa_r+0x498>
 800e020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e022:	9d00      	ldr	r5, [sp, #0]
 800e024:	ea6f 0b03 	mvn.w	fp, r3
 800e028:	f04f 0800 	mov.w	r8, #0
 800e02c:	4631      	mov	r1, r6
 800e02e:	4620      	mov	r0, r4
 800e030:	f000 f983 	bl	800e33a <_Bfree>
 800e034:	2f00      	cmp	r7, #0
 800e036:	f43f aeab 	beq.w	800dd90 <_dtoa_r+0x690>
 800e03a:	f1b8 0f00 	cmp.w	r8, #0
 800e03e:	d005      	beq.n	800e04c <_dtoa_r+0x94c>
 800e040:	45b8      	cmp	r8, r7
 800e042:	d003      	beq.n	800e04c <_dtoa_r+0x94c>
 800e044:	4641      	mov	r1, r8
 800e046:	4620      	mov	r0, r4
 800e048:	f000 f977 	bl	800e33a <_Bfree>
 800e04c:	4639      	mov	r1, r7
 800e04e:	4620      	mov	r0, r4
 800e050:	f000 f973 	bl	800e33a <_Bfree>
 800e054:	e69c      	b.n	800dd90 <_dtoa_r+0x690>
 800e056:	2600      	movs	r6, #0
 800e058:	4637      	mov	r7, r6
 800e05a:	e7e1      	b.n	800e020 <_dtoa_r+0x920>
 800e05c:	46bb      	mov	fp, r7
 800e05e:	4637      	mov	r7, r6
 800e060:	e59a      	b.n	800db98 <_dtoa_r+0x498>
 800e062:	bf00      	nop
 800e064:	40240000 	.word	0x40240000
 800e068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f000 80c7 	beq.w	800e1fe <_dtoa_r+0xafe>
 800e070:	9b04      	ldr	r3, [sp, #16]
 800e072:	9301      	str	r3, [sp, #4]
 800e074:	2d00      	cmp	r5, #0
 800e076:	dd05      	ble.n	800e084 <_dtoa_r+0x984>
 800e078:	4639      	mov	r1, r7
 800e07a:	462a      	mov	r2, r5
 800e07c:	4620      	mov	r0, r4
 800e07e:	f000 fb43 	bl	800e708 <__lshift>
 800e082:	4607      	mov	r7, r0
 800e084:	f1b8 0f00 	cmp.w	r8, #0
 800e088:	d05a      	beq.n	800e140 <_dtoa_r+0xa40>
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	4620      	mov	r0, r4
 800e08e:	f000 f92f 	bl	800e2f0 <_Balloc>
 800e092:	4605      	mov	r5, r0
 800e094:	b920      	cbnz	r0, 800e0a0 <_dtoa_r+0x9a0>
 800e096:	4b82      	ldr	r3, [pc, #520]	; (800e2a0 <_dtoa_r+0xba0>)
 800e098:	4602      	mov	r2, r0
 800e09a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e09e:	e470      	b.n	800d982 <_dtoa_r+0x282>
 800e0a0:	693a      	ldr	r2, [r7, #16]
 800e0a2:	3202      	adds	r2, #2
 800e0a4:	0092      	lsls	r2, r2, #2
 800e0a6:	f107 010c 	add.w	r1, r7, #12
 800e0aa:	300c      	adds	r0, #12
 800e0ac:	f7ff fa14 	bl	800d4d8 <memcpy>
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fb27 	bl	800e708 <__lshift>
 800e0ba:	9b00      	ldr	r3, [sp, #0]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	9304      	str	r3, [sp, #16]
 800e0c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	9308      	str	r3, [sp, #32]
 800e0c8:	9b02      	ldr	r3, [sp, #8]
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	46b8      	mov	r8, r7
 800e0d0:	9306      	str	r3, [sp, #24]
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	4650      	mov	r0, sl
 800e0dc:	9301      	str	r3, [sp, #4]
 800e0de:	f7ff fa87 	bl	800d5f0 <quorem>
 800e0e2:	4641      	mov	r1, r8
 800e0e4:	9002      	str	r0, [sp, #8]
 800e0e6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	f000 fb78 	bl	800e7e0 <__mcmp>
 800e0f0:	463a      	mov	r2, r7
 800e0f2:	9005      	str	r0, [sp, #20]
 800e0f4:	4631      	mov	r1, r6
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fb8e 	bl	800e818 <__mdiff>
 800e0fc:	68c2      	ldr	r2, [r0, #12]
 800e0fe:	4605      	mov	r5, r0
 800e100:	bb02      	cbnz	r2, 800e144 <_dtoa_r+0xa44>
 800e102:	4601      	mov	r1, r0
 800e104:	4650      	mov	r0, sl
 800e106:	f000 fb6b 	bl	800e7e0 <__mcmp>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4629      	mov	r1, r5
 800e10e:	4620      	mov	r0, r4
 800e110:	9209      	str	r2, [sp, #36]	; 0x24
 800e112:	f000 f912 	bl	800e33a <_Bfree>
 800e116:	9b07      	ldr	r3, [sp, #28]
 800e118:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e11a:	9d04      	ldr	r5, [sp, #16]
 800e11c:	ea43 0102 	orr.w	r1, r3, r2
 800e120:	9b06      	ldr	r3, [sp, #24]
 800e122:	4319      	orrs	r1, r3
 800e124:	d110      	bne.n	800e148 <_dtoa_r+0xa48>
 800e126:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e12a:	d029      	beq.n	800e180 <_dtoa_r+0xa80>
 800e12c:	9b05      	ldr	r3, [sp, #20]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	dd02      	ble.n	800e138 <_dtoa_r+0xa38>
 800e132:	9b02      	ldr	r3, [sp, #8]
 800e134:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e138:	9b01      	ldr	r3, [sp, #4]
 800e13a:	f883 9000 	strb.w	r9, [r3]
 800e13e:	e775      	b.n	800e02c <_dtoa_r+0x92c>
 800e140:	4638      	mov	r0, r7
 800e142:	e7ba      	b.n	800e0ba <_dtoa_r+0x9ba>
 800e144:	2201      	movs	r2, #1
 800e146:	e7e1      	b.n	800e10c <_dtoa_r+0xa0c>
 800e148:	9b05      	ldr	r3, [sp, #20]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	db04      	blt.n	800e158 <_dtoa_r+0xa58>
 800e14e:	9907      	ldr	r1, [sp, #28]
 800e150:	430b      	orrs	r3, r1
 800e152:	9906      	ldr	r1, [sp, #24]
 800e154:	430b      	orrs	r3, r1
 800e156:	d120      	bne.n	800e19a <_dtoa_r+0xa9a>
 800e158:	2a00      	cmp	r2, #0
 800e15a:	dded      	ble.n	800e138 <_dtoa_r+0xa38>
 800e15c:	4651      	mov	r1, sl
 800e15e:	2201      	movs	r2, #1
 800e160:	4620      	mov	r0, r4
 800e162:	f000 fad1 	bl	800e708 <__lshift>
 800e166:	4631      	mov	r1, r6
 800e168:	4682      	mov	sl, r0
 800e16a:	f000 fb39 	bl	800e7e0 <__mcmp>
 800e16e:	2800      	cmp	r0, #0
 800e170:	dc03      	bgt.n	800e17a <_dtoa_r+0xa7a>
 800e172:	d1e1      	bne.n	800e138 <_dtoa_r+0xa38>
 800e174:	f019 0f01 	tst.w	r9, #1
 800e178:	d0de      	beq.n	800e138 <_dtoa_r+0xa38>
 800e17a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e17e:	d1d8      	bne.n	800e132 <_dtoa_r+0xa32>
 800e180:	9a01      	ldr	r2, [sp, #4]
 800e182:	2339      	movs	r3, #57	; 0x39
 800e184:	7013      	strb	r3, [r2, #0]
 800e186:	462b      	mov	r3, r5
 800e188:	461d      	mov	r5, r3
 800e18a:	3b01      	subs	r3, #1
 800e18c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e190:	2a39      	cmp	r2, #57	; 0x39
 800e192:	d06c      	beq.n	800e26e <_dtoa_r+0xb6e>
 800e194:	3201      	adds	r2, #1
 800e196:	701a      	strb	r2, [r3, #0]
 800e198:	e748      	b.n	800e02c <_dtoa_r+0x92c>
 800e19a:	2a00      	cmp	r2, #0
 800e19c:	dd07      	ble.n	800e1ae <_dtoa_r+0xaae>
 800e19e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e1a2:	d0ed      	beq.n	800e180 <_dtoa_r+0xa80>
 800e1a4:	9a01      	ldr	r2, [sp, #4]
 800e1a6:	f109 0301 	add.w	r3, r9, #1
 800e1aa:	7013      	strb	r3, [r2, #0]
 800e1ac:	e73e      	b.n	800e02c <_dtoa_r+0x92c>
 800e1ae:	9b04      	ldr	r3, [sp, #16]
 800e1b0:	9a08      	ldr	r2, [sp, #32]
 800e1b2:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d043      	beq.n	800e242 <_dtoa_r+0xb42>
 800e1ba:	4651      	mov	r1, sl
 800e1bc:	2300      	movs	r3, #0
 800e1be:	220a      	movs	r2, #10
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f000 f8c3 	bl	800e34c <__multadd>
 800e1c6:	45b8      	cmp	r8, r7
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	f04f 0300 	mov.w	r3, #0
 800e1ce:	f04f 020a 	mov.w	r2, #10
 800e1d2:	4641      	mov	r1, r8
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	d107      	bne.n	800e1e8 <_dtoa_r+0xae8>
 800e1d8:	f000 f8b8 	bl	800e34c <__multadd>
 800e1dc:	4680      	mov	r8, r0
 800e1de:	4607      	mov	r7, r0
 800e1e0:	9b04      	ldr	r3, [sp, #16]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	9304      	str	r3, [sp, #16]
 800e1e6:	e775      	b.n	800e0d4 <_dtoa_r+0x9d4>
 800e1e8:	f000 f8b0 	bl	800e34c <__multadd>
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	4680      	mov	r8, r0
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	220a      	movs	r2, #10
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 f8a9 	bl	800e34c <__multadd>
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	e7f0      	b.n	800e1e0 <_dtoa_r+0xae0>
 800e1fe:	9b04      	ldr	r3, [sp, #16]
 800e200:	9301      	str	r3, [sp, #4]
 800e202:	9d00      	ldr	r5, [sp, #0]
 800e204:	4631      	mov	r1, r6
 800e206:	4650      	mov	r0, sl
 800e208:	f7ff f9f2 	bl	800d5f0 <quorem>
 800e20c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e210:	9b00      	ldr	r3, [sp, #0]
 800e212:	f805 9b01 	strb.w	r9, [r5], #1
 800e216:	1aea      	subs	r2, r5, r3
 800e218:	9b01      	ldr	r3, [sp, #4]
 800e21a:	4293      	cmp	r3, r2
 800e21c:	dd07      	ble.n	800e22e <_dtoa_r+0xb2e>
 800e21e:	4651      	mov	r1, sl
 800e220:	2300      	movs	r3, #0
 800e222:	220a      	movs	r2, #10
 800e224:	4620      	mov	r0, r4
 800e226:	f000 f891 	bl	800e34c <__multadd>
 800e22a:	4682      	mov	sl, r0
 800e22c:	e7ea      	b.n	800e204 <_dtoa_r+0xb04>
 800e22e:	9b01      	ldr	r3, [sp, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfc8      	it	gt
 800e234:	461d      	movgt	r5, r3
 800e236:	9b00      	ldr	r3, [sp, #0]
 800e238:	bfd8      	it	le
 800e23a:	2501      	movle	r5, #1
 800e23c:	441d      	add	r5, r3
 800e23e:	f04f 0800 	mov.w	r8, #0
 800e242:	4651      	mov	r1, sl
 800e244:	2201      	movs	r2, #1
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fa5e 	bl	800e708 <__lshift>
 800e24c:	4631      	mov	r1, r6
 800e24e:	4682      	mov	sl, r0
 800e250:	f000 fac6 	bl	800e7e0 <__mcmp>
 800e254:	2800      	cmp	r0, #0
 800e256:	dc96      	bgt.n	800e186 <_dtoa_r+0xa86>
 800e258:	d102      	bne.n	800e260 <_dtoa_r+0xb60>
 800e25a:	f019 0f01 	tst.w	r9, #1
 800e25e:	d192      	bne.n	800e186 <_dtoa_r+0xa86>
 800e260:	462b      	mov	r3, r5
 800e262:	461d      	mov	r5, r3
 800e264:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e268:	2a30      	cmp	r2, #48	; 0x30
 800e26a:	d0fa      	beq.n	800e262 <_dtoa_r+0xb62>
 800e26c:	e6de      	b.n	800e02c <_dtoa_r+0x92c>
 800e26e:	9a00      	ldr	r2, [sp, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d189      	bne.n	800e188 <_dtoa_r+0xa88>
 800e274:	f10b 0b01 	add.w	fp, fp, #1
 800e278:	2331      	movs	r3, #49	; 0x31
 800e27a:	e796      	b.n	800e1aa <_dtoa_r+0xaaa>
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <_dtoa_r+0xba4>)
 800e27e:	f7ff ba9d 	b.w	800d7bc <_dtoa_r+0xbc>
 800e282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e284:	2b00      	cmp	r3, #0
 800e286:	f47f aa7c 	bne.w	800d782 <_dtoa_r+0x82>
 800e28a:	4b07      	ldr	r3, [pc, #28]	; (800e2a8 <_dtoa_r+0xba8>)
 800e28c:	f7ff ba96 	b.w	800d7bc <_dtoa_r+0xbc>
 800e290:	9b01      	ldr	r3, [sp, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	dcb5      	bgt.n	800e202 <_dtoa_r+0xb02>
 800e296:	9b07      	ldr	r3, [sp, #28]
 800e298:	2b02      	cmp	r3, #2
 800e29a:	f73f aeb2 	bgt.w	800e002 <_dtoa_r+0x902>
 800e29e:	e7b0      	b.n	800e202 <_dtoa_r+0xb02>
 800e2a0:	08011987 	.word	0x08011987
 800e2a4:	080118e6 	.word	0x080118e6
 800e2a8:	0801197a 	.word	0x0801197a

0800e2ac <malloc>:
 800e2ac:	4b02      	ldr	r3, [pc, #8]	; (800e2b8 <malloc+0xc>)
 800e2ae:	4601      	mov	r1, r0
 800e2b0:	6818      	ldr	r0, [r3, #0]
 800e2b2:	f7f9 bded 	b.w	8007e90 <_malloc_r>
 800e2b6:	bf00      	nop
 800e2b8:	20000148 	.word	0x20000148

0800e2bc <free>:
 800e2bc:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <free+0xc>)
 800e2be:	4601      	mov	r1, r0
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f7f9 bd25 	b.w	8007d10 <_free_r>
 800e2c6:	bf00      	nop
 800e2c8:	20000148 	.word	0x20000148

0800e2cc <__ascii_mbtowc>:
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	b901      	cbnz	r1, 800e2d2 <__ascii_mbtowc+0x6>
 800e2d0:	a901      	add	r1, sp, #4
 800e2d2:	b142      	cbz	r2, 800e2e6 <__ascii_mbtowc+0x1a>
 800e2d4:	b14b      	cbz	r3, 800e2ea <__ascii_mbtowc+0x1e>
 800e2d6:	7813      	ldrb	r3, [r2, #0]
 800e2d8:	600b      	str	r3, [r1, #0]
 800e2da:	7812      	ldrb	r2, [r2, #0]
 800e2dc:	1e10      	subs	r0, r2, #0
 800e2de:	bf18      	it	ne
 800e2e0:	2001      	movne	r0, #1
 800e2e2:	b002      	add	sp, #8
 800e2e4:	4770      	bx	lr
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	e7fb      	b.n	800e2e2 <__ascii_mbtowc+0x16>
 800e2ea:	f06f 0001 	mvn.w	r0, #1
 800e2ee:	e7f8      	b.n	800e2e2 <__ascii_mbtowc+0x16>

0800e2f0 <_Balloc>:
 800e2f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e2f2:	b570      	push	{r4, r5, r6, lr}
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	b17b      	cbz	r3, 800e31a <_Balloc+0x2a>
 800e2fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800e2fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e300:	b9a0      	cbnz	r0, 800e32c <_Balloc+0x3c>
 800e302:	2101      	movs	r1, #1
 800e304:	fa01 f604 	lsl.w	r6, r1, r4
 800e308:	1d72      	adds	r2, r6, #5
 800e30a:	0092      	lsls	r2, r2, #2
 800e30c:	4628      	mov	r0, r5
 800e30e:	f002 f809 	bl	8010324 <_calloc_r>
 800e312:	b148      	cbz	r0, 800e328 <_Balloc+0x38>
 800e314:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800e318:	e00b      	b.n	800e332 <_Balloc+0x42>
 800e31a:	2221      	movs	r2, #33	; 0x21
 800e31c:	2104      	movs	r1, #4
 800e31e:	f002 f801 	bl	8010324 <_calloc_r>
 800e322:	6468      	str	r0, [r5, #68]	; 0x44
 800e324:	2800      	cmp	r0, #0
 800e326:	d1e8      	bne.n	800e2fa <_Balloc+0xa>
 800e328:	2000      	movs	r0, #0
 800e32a:	bd70      	pop	{r4, r5, r6, pc}
 800e32c:	6802      	ldr	r2, [r0, #0]
 800e32e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800e332:	2300      	movs	r3, #0
 800e334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e338:	e7f7      	b.n	800e32a <_Balloc+0x3a>

0800e33a <_Bfree>:
 800e33a:	b131      	cbz	r1, 800e34a <_Bfree+0x10>
 800e33c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e33e:	684a      	ldr	r2, [r1, #4]
 800e340:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e344:	6008      	str	r0, [r1, #0]
 800e346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e34a:	4770      	bx	lr

0800e34c <__multadd>:
 800e34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e350:	690d      	ldr	r5, [r1, #16]
 800e352:	4607      	mov	r7, r0
 800e354:	460c      	mov	r4, r1
 800e356:	461e      	mov	r6, r3
 800e358:	f101 0c14 	add.w	ip, r1, #20
 800e35c:	2000      	movs	r0, #0
 800e35e:	f8dc 3000 	ldr.w	r3, [ip]
 800e362:	b299      	uxth	r1, r3
 800e364:	fb02 6101 	mla	r1, r2, r1, r6
 800e368:	0c1e      	lsrs	r6, r3, #16
 800e36a:	0c0b      	lsrs	r3, r1, #16
 800e36c:	fb02 3306 	mla	r3, r2, r6, r3
 800e370:	b289      	uxth	r1, r1
 800e372:	3001      	adds	r0, #1
 800e374:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e378:	4285      	cmp	r5, r0
 800e37a:	f84c 1b04 	str.w	r1, [ip], #4
 800e37e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e382:	dcec      	bgt.n	800e35e <__multadd+0x12>
 800e384:	b30e      	cbz	r6, 800e3ca <__multadd+0x7e>
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	42ab      	cmp	r3, r5
 800e38a:	dc19      	bgt.n	800e3c0 <__multadd+0x74>
 800e38c:	6861      	ldr	r1, [r4, #4]
 800e38e:	4638      	mov	r0, r7
 800e390:	3101      	adds	r1, #1
 800e392:	f7ff ffad 	bl	800e2f0 <_Balloc>
 800e396:	4680      	mov	r8, r0
 800e398:	b928      	cbnz	r0, 800e3a6 <__multadd+0x5a>
 800e39a:	4602      	mov	r2, r0
 800e39c:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <__multadd+0x84>)
 800e39e:	480d      	ldr	r0, [pc, #52]	; (800e3d4 <__multadd+0x88>)
 800e3a0:	21ba      	movs	r1, #186	; 0xba
 800e3a2:	f001 ffa1 	bl	80102e8 <__assert_func>
 800e3a6:	6922      	ldr	r2, [r4, #16]
 800e3a8:	3202      	adds	r2, #2
 800e3aa:	f104 010c 	add.w	r1, r4, #12
 800e3ae:	0092      	lsls	r2, r2, #2
 800e3b0:	300c      	adds	r0, #12
 800e3b2:	f7ff f891 	bl	800d4d8 <memcpy>
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7ff ffbe 	bl	800e33a <_Bfree>
 800e3be:	4644      	mov	r4, r8
 800e3c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3c4:	3501      	adds	r5, #1
 800e3c6:	615e      	str	r6, [r3, #20]
 800e3c8:	6125      	str	r5, [r4, #16]
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d0:	08011987 	.word	0x08011987
 800e3d4:	080119f0 	.word	0x080119f0

0800e3d8 <__s2b>:
 800e3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3dc:	460c      	mov	r4, r1
 800e3de:	4615      	mov	r5, r2
 800e3e0:	461f      	mov	r7, r3
 800e3e2:	2209      	movs	r2, #9
 800e3e4:	3308      	adds	r3, #8
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	db09      	blt.n	800e408 <__s2b+0x30>
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f7ff ff7b 	bl	800e2f0 <_Balloc>
 800e3fa:	b940      	cbnz	r0, 800e40e <__s2b+0x36>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	4b19      	ldr	r3, [pc, #100]	; (800e464 <__s2b+0x8c>)
 800e400:	4819      	ldr	r0, [pc, #100]	; (800e468 <__s2b+0x90>)
 800e402:	21d3      	movs	r1, #211	; 0xd3
 800e404:	f001 ff70 	bl	80102e8 <__assert_func>
 800e408:	0052      	lsls	r2, r2, #1
 800e40a:	3101      	adds	r1, #1
 800e40c:	e7f0      	b.n	800e3f0 <__s2b+0x18>
 800e40e:	9b08      	ldr	r3, [sp, #32]
 800e410:	6143      	str	r3, [r0, #20]
 800e412:	2d09      	cmp	r5, #9
 800e414:	f04f 0301 	mov.w	r3, #1
 800e418:	6103      	str	r3, [r0, #16]
 800e41a:	dd16      	ble.n	800e44a <__s2b+0x72>
 800e41c:	f104 0909 	add.w	r9, r4, #9
 800e420:	46c8      	mov	r8, r9
 800e422:	442c      	add	r4, r5
 800e424:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e428:	4601      	mov	r1, r0
 800e42a:	3b30      	subs	r3, #48	; 0x30
 800e42c:	220a      	movs	r2, #10
 800e42e:	4630      	mov	r0, r6
 800e430:	f7ff ff8c 	bl	800e34c <__multadd>
 800e434:	45a0      	cmp	r8, r4
 800e436:	d1f5      	bne.n	800e424 <__s2b+0x4c>
 800e438:	f1a5 0408 	sub.w	r4, r5, #8
 800e43c:	444c      	add	r4, r9
 800e43e:	1b2d      	subs	r5, r5, r4
 800e440:	1963      	adds	r3, r4, r5
 800e442:	42bb      	cmp	r3, r7
 800e444:	db04      	blt.n	800e450 <__s2b+0x78>
 800e446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e44a:	340a      	adds	r4, #10
 800e44c:	2509      	movs	r5, #9
 800e44e:	e7f6      	b.n	800e43e <__s2b+0x66>
 800e450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e454:	4601      	mov	r1, r0
 800e456:	3b30      	subs	r3, #48	; 0x30
 800e458:	220a      	movs	r2, #10
 800e45a:	4630      	mov	r0, r6
 800e45c:	f7ff ff76 	bl	800e34c <__multadd>
 800e460:	e7ee      	b.n	800e440 <__s2b+0x68>
 800e462:	bf00      	nop
 800e464:	08011987 	.word	0x08011987
 800e468:	080119f0 	.word	0x080119f0

0800e46c <__hi0bits>:
 800e46c:	0c03      	lsrs	r3, r0, #16
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	b9d3      	cbnz	r3, 800e4a8 <__hi0bits+0x3c>
 800e472:	0400      	lsls	r0, r0, #16
 800e474:	2310      	movs	r3, #16
 800e476:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e47a:	bf04      	itt	eq
 800e47c:	0200      	lsleq	r0, r0, #8
 800e47e:	3308      	addeq	r3, #8
 800e480:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e484:	bf04      	itt	eq
 800e486:	0100      	lsleq	r0, r0, #4
 800e488:	3304      	addeq	r3, #4
 800e48a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e48e:	bf04      	itt	eq
 800e490:	0080      	lsleq	r0, r0, #2
 800e492:	3302      	addeq	r3, #2
 800e494:	2800      	cmp	r0, #0
 800e496:	db05      	blt.n	800e4a4 <__hi0bits+0x38>
 800e498:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e49c:	f103 0301 	add.w	r3, r3, #1
 800e4a0:	bf08      	it	eq
 800e4a2:	2320      	moveq	r3, #32
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	4770      	bx	lr
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e7e4      	b.n	800e476 <__hi0bits+0xa>

0800e4ac <__lo0bits>:
 800e4ac:	6803      	ldr	r3, [r0, #0]
 800e4ae:	f013 0207 	ands.w	r2, r3, #7
 800e4b2:	d00c      	beq.n	800e4ce <__lo0bits+0x22>
 800e4b4:	07d9      	lsls	r1, r3, #31
 800e4b6:	d422      	bmi.n	800e4fe <__lo0bits+0x52>
 800e4b8:	079a      	lsls	r2, r3, #30
 800e4ba:	bf49      	itett	mi
 800e4bc:	085b      	lsrmi	r3, r3, #1
 800e4be:	089b      	lsrpl	r3, r3, #2
 800e4c0:	6003      	strmi	r3, [r0, #0]
 800e4c2:	2201      	movmi	r2, #1
 800e4c4:	bf5c      	itt	pl
 800e4c6:	6003      	strpl	r3, [r0, #0]
 800e4c8:	2202      	movpl	r2, #2
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	4770      	bx	lr
 800e4ce:	b299      	uxth	r1, r3
 800e4d0:	b909      	cbnz	r1, 800e4d6 <__lo0bits+0x2a>
 800e4d2:	0c1b      	lsrs	r3, r3, #16
 800e4d4:	2210      	movs	r2, #16
 800e4d6:	b2d9      	uxtb	r1, r3
 800e4d8:	b909      	cbnz	r1, 800e4de <__lo0bits+0x32>
 800e4da:	3208      	adds	r2, #8
 800e4dc:	0a1b      	lsrs	r3, r3, #8
 800e4de:	0719      	lsls	r1, r3, #28
 800e4e0:	bf04      	itt	eq
 800e4e2:	091b      	lsreq	r3, r3, #4
 800e4e4:	3204      	addeq	r2, #4
 800e4e6:	0799      	lsls	r1, r3, #30
 800e4e8:	bf04      	itt	eq
 800e4ea:	089b      	lsreq	r3, r3, #2
 800e4ec:	3202      	addeq	r2, #2
 800e4ee:	07d9      	lsls	r1, r3, #31
 800e4f0:	d403      	bmi.n	800e4fa <__lo0bits+0x4e>
 800e4f2:	085b      	lsrs	r3, r3, #1
 800e4f4:	f102 0201 	add.w	r2, r2, #1
 800e4f8:	d003      	beq.n	800e502 <__lo0bits+0x56>
 800e4fa:	6003      	str	r3, [r0, #0]
 800e4fc:	e7e5      	b.n	800e4ca <__lo0bits+0x1e>
 800e4fe:	2200      	movs	r2, #0
 800e500:	e7e3      	b.n	800e4ca <__lo0bits+0x1e>
 800e502:	2220      	movs	r2, #32
 800e504:	e7e1      	b.n	800e4ca <__lo0bits+0x1e>
	...

0800e508 <__i2b>:
 800e508:	b510      	push	{r4, lr}
 800e50a:	460c      	mov	r4, r1
 800e50c:	2101      	movs	r1, #1
 800e50e:	f7ff feef 	bl	800e2f0 <_Balloc>
 800e512:	4602      	mov	r2, r0
 800e514:	b928      	cbnz	r0, 800e522 <__i2b+0x1a>
 800e516:	4b05      	ldr	r3, [pc, #20]	; (800e52c <__i2b+0x24>)
 800e518:	4805      	ldr	r0, [pc, #20]	; (800e530 <__i2b+0x28>)
 800e51a:	f240 1145 	movw	r1, #325	; 0x145
 800e51e:	f001 fee3 	bl	80102e8 <__assert_func>
 800e522:	2301      	movs	r3, #1
 800e524:	6144      	str	r4, [r0, #20]
 800e526:	6103      	str	r3, [r0, #16]
 800e528:	bd10      	pop	{r4, pc}
 800e52a:	bf00      	nop
 800e52c:	08011987 	.word	0x08011987
 800e530:	080119f0 	.word	0x080119f0

0800e534 <__multiply>:
 800e534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e538:	4691      	mov	r9, r2
 800e53a:	690a      	ldr	r2, [r1, #16]
 800e53c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e540:	429a      	cmp	r2, r3
 800e542:	bfb8      	it	lt
 800e544:	460b      	movlt	r3, r1
 800e546:	460c      	mov	r4, r1
 800e548:	bfbc      	itt	lt
 800e54a:	464c      	movlt	r4, r9
 800e54c:	4699      	movlt	r9, r3
 800e54e:	6927      	ldr	r7, [r4, #16]
 800e550:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e554:	68a3      	ldr	r3, [r4, #8]
 800e556:	6861      	ldr	r1, [r4, #4]
 800e558:	eb07 060a 	add.w	r6, r7, sl
 800e55c:	42b3      	cmp	r3, r6
 800e55e:	b085      	sub	sp, #20
 800e560:	bfb8      	it	lt
 800e562:	3101      	addlt	r1, #1
 800e564:	f7ff fec4 	bl	800e2f0 <_Balloc>
 800e568:	b930      	cbnz	r0, 800e578 <__multiply+0x44>
 800e56a:	4602      	mov	r2, r0
 800e56c:	4b44      	ldr	r3, [pc, #272]	; (800e680 <__multiply+0x14c>)
 800e56e:	4845      	ldr	r0, [pc, #276]	; (800e684 <__multiply+0x150>)
 800e570:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e574:	f001 feb8 	bl	80102e8 <__assert_func>
 800e578:	f100 0514 	add.w	r5, r0, #20
 800e57c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e580:	462b      	mov	r3, r5
 800e582:	2200      	movs	r2, #0
 800e584:	4543      	cmp	r3, r8
 800e586:	d321      	bcc.n	800e5cc <__multiply+0x98>
 800e588:	f104 0314 	add.w	r3, r4, #20
 800e58c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e590:	f109 0314 	add.w	r3, r9, #20
 800e594:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e598:	9202      	str	r2, [sp, #8]
 800e59a:	1b3a      	subs	r2, r7, r4
 800e59c:	3a15      	subs	r2, #21
 800e59e:	f022 0203 	bic.w	r2, r2, #3
 800e5a2:	3204      	adds	r2, #4
 800e5a4:	f104 0115 	add.w	r1, r4, #21
 800e5a8:	428f      	cmp	r7, r1
 800e5aa:	bf38      	it	cc
 800e5ac:	2204      	movcc	r2, #4
 800e5ae:	9201      	str	r2, [sp, #4]
 800e5b0:	9a02      	ldr	r2, [sp, #8]
 800e5b2:	9303      	str	r3, [sp, #12]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d80c      	bhi.n	800e5d2 <__multiply+0x9e>
 800e5b8:	2e00      	cmp	r6, #0
 800e5ba:	dd03      	ble.n	800e5c4 <__multiply+0x90>
 800e5bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d05b      	beq.n	800e67c <__multiply+0x148>
 800e5c4:	6106      	str	r6, [r0, #16]
 800e5c6:	b005      	add	sp, #20
 800e5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5cc:	f843 2b04 	str.w	r2, [r3], #4
 800e5d0:	e7d8      	b.n	800e584 <__multiply+0x50>
 800e5d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5d6:	f1ba 0f00 	cmp.w	sl, #0
 800e5da:	d024      	beq.n	800e626 <__multiply+0xf2>
 800e5dc:	f104 0e14 	add.w	lr, r4, #20
 800e5e0:	46a9      	mov	r9, r5
 800e5e2:	f04f 0c00 	mov.w	ip, #0
 800e5e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5ea:	f8d9 1000 	ldr.w	r1, [r9]
 800e5ee:	fa1f fb82 	uxth.w	fp, r2
 800e5f2:	b289      	uxth	r1, r1
 800e5f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5fc:	f8d9 2000 	ldr.w	r2, [r9]
 800e600:	4461      	add	r1, ip
 800e602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e606:	fb0a c20b 	mla	r2, sl, fp, ip
 800e60a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e60e:	b289      	uxth	r1, r1
 800e610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e614:	4577      	cmp	r7, lr
 800e616:	f849 1b04 	str.w	r1, [r9], #4
 800e61a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e61e:	d8e2      	bhi.n	800e5e6 <__multiply+0xb2>
 800e620:	9a01      	ldr	r2, [sp, #4]
 800e622:	f845 c002 	str.w	ip, [r5, r2]
 800e626:	9a03      	ldr	r2, [sp, #12]
 800e628:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e62c:	3304      	adds	r3, #4
 800e62e:	f1b9 0f00 	cmp.w	r9, #0
 800e632:	d021      	beq.n	800e678 <__multiply+0x144>
 800e634:	6829      	ldr	r1, [r5, #0]
 800e636:	f104 0c14 	add.w	ip, r4, #20
 800e63a:	46ae      	mov	lr, r5
 800e63c:	f04f 0a00 	mov.w	sl, #0
 800e640:	f8bc b000 	ldrh.w	fp, [ip]
 800e644:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e648:	fb09 220b 	mla	r2, r9, fp, r2
 800e64c:	4452      	add	r2, sl
 800e64e:	b289      	uxth	r1, r1
 800e650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e654:	f84e 1b04 	str.w	r1, [lr], #4
 800e658:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e65c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e660:	f8be 1000 	ldrh.w	r1, [lr]
 800e664:	fb09 110a 	mla	r1, r9, sl, r1
 800e668:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e66c:	4567      	cmp	r7, ip
 800e66e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e672:	d8e5      	bhi.n	800e640 <__multiply+0x10c>
 800e674:	9a01      	ldr	r2, [sp, #4]
 800e676:	50a9      	str	r1, [r5, r2]
 800e678:	3504      	adds	r5, #4
 800e67a:	e799      	b.n	800e5b0 <__multiply+0x7c>
 800e67c:	3e01      	subs	r6, #1
 800e67e:	e79b      	b.n	800e5b8 <__multiply+0x84>
 800e680:	08011987 	.word	0x08011987
 800e684:	080119f0 	.word	0x080119f0

0800e688 <__pow5mult>:
 800e688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e68c:	4615      	mov	r5, r2
 800e68e:	f012 0203 	ands.w	r2, r2, #3
 800e692:	4606      	mov	r6, r0
 800e694:	460f      	mov	r7, r1
 800e696:	d007      	beq.n	800e6a8 <__pow5mult+0x20>
 800e698:	4c1a      	ldr	r4, [pc, #104]	; (800e704 <__pow5mult+0x7c>)
 800e69a:	3a01      	subs	r2, #1
 800e69c:	2300      	movs	r3, #0
 800e69e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6a2:	f7ff fe53 	bl	800e34c <__multadd>
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	10ad      	asrs	r5, r5, #2
 800e6aa:	d027      	beq.n	800e6fc <__pow5mult+0x74>
 800e6ac:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800e6ae:	b944      	cbnz	r4, 800e6c2 <__pow5mult+0x3a>
 800e6b0:	f240 2171 	movw	r1, #625	; 0x271
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f7ff ff27 	bl	800e508 <__i2b>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	6430      	str	r0, [r6, #64]	; 0x40
 800e6be:	4604      	mov	r4, r0
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 0900 	mov.w	r9, #0
 800e6c6:	07eb      	lsls	r3, r5, #31
 800e6c8:	d50a      	bpl.n	800e6e0 <__pow5mult+0x58>
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ff30 	bl	800e534 <__multiply>
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff fe2e 	bl	800e33a <_Bfree>
 800e6de:	4647      	mov	r7, r8
 800e6e0:	106d      	asrs	r5, r5, #1
 800e6e2:	d00b      	beq.n	800e6fc <__pow5mult+0x74>
 800e6e4:	6820      	ldr	r0, [r4, #0]
 800e6e6:	b938      	cbnz	r0, 800e6f8 <__pow5mult+0x70>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff ff21 	bl	800e534 <__multiply>
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	f8c0 9000 	str.w	r9, [r0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	e7e4      	b.n	800e6c6 <__pow5mult+0x3e>
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e702:	bf00      	nop
 800e704:	08011b40 	.word	0x08011b40

0800e708 <__lshift>:
 800e708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e70c:	460c      	mov	r4, r1
 800e70e:	6849      	ldr	r1, [r1, #4]
 800e710:	6923      	ldr	r3, [r4, #16]
 800e712:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e716:	68a3      	ldr	r3, [r4, #8]
 800e718:	4607      	mov	r7, r0
 800e71a:	4691      	mov	r9, r2
 800e71c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e720:	f108 0601 	add.w	r6, r8, #1
 800e724:	42b3      	cmp	r3, r6
 800e726:	db0b      	blt.n	800e740 <__lshift+0x38>
 800e728:	4638      	mov	r0, r7
 800e72a:	f7ff fde1 	bl	800e2f0 <_Balloc>
 800e72e:	4605      	mov	r5, r0
 800e730:	b948      	cbnz	r0, 800e746 <__lshift+0x3e>
 800e732:	4602      	mov	r2, r0
 800e734:	4b28      	ldr	r3, [pc, #160]	; (800e7d8 <__lshift+0xd0>)
 800e736:	4829      	ldr	r0, [pc, #164]	; (800e7dc <__lshift+0xd4>)
 800e738:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e73c:	f001 fdd4 	bl	80102e8 <__assert_func>
 800e740:	3101      	adds	r1, #1
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	e7ee      	b.n	800e724 <__lshift+0x1c>
 800e746:	2300      	movs	r3, #0
 800e748:	f100 0114 	add.w	r1, r0, #20
 800e74c:	f100 0210 	add.w	r2, r0, #16
 800e750:	4618      	mov	r0, r3
 800e752:	4553      	cmp	r3, sl
 800e754:	db33      	blt.n	800e7be <__lshift+0xb6>
 800e756:	6920      	ldr	r0, [r4, #16]
 800e758:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e75c:	f104 0314 	add.w	r3, r4, #20
 800e760:	f019 091f 	ands.w	r9, r9, #31
 800e764:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e768:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e76c:	d02b      	beq.n	800e7c6 <__lshift+0xbe>
 800e76e:	f1c9 0e20 	rsb	lr, r9, #32
 800e772:	468a      	mov	sl, r1
 800e774:	2200      	movs	r2, #0
 800e776:	6818      	ldr	r0, [r3, #0]
 800e778:	fa00 f009 	lsl.w	r0, r0, r9
 800e77c:	4310      	orrs	r0, r2
 800e77e:	f84a 0b04 	str.w	r0, [sl], #4
 800e782:	f853 2b04 	ldr.w	r2, [r3], #4
 800e786:	459c      	cmp	ip, r3
 800e788:	fa22 f20e 	lsr.w	r2, r2, lr
 800e78c:	d8f3      	bhi.n	800e776 <__lshift+0x6e>
 800e78e:	ebac 0304 	sub.w	r3, ip, r4
 800e792:	3b15      	subs	r3, #21
 800e794:	f023 0303 	bic.w	r3, r3, #3
 800e798:	3304      	adds	r3, #4
 800e79a:	f104 0015 	add.w	r0, r4, #21
 800e79e:	4584      	cmp	ip, r0
 800e7a0:	bf38      	it	cc
 800e7a2:	2304      	movcc	r3, #4
 800e7a4:	50ca      	str	r2, [r1, r3]
 800e7a6:	b10a      	cbz	r2, 800e7ac <__lshift+0xa4>
 800e7a8:	f108 0602 	add.w	r6, r8, #2
 800e7ac:	3e01      	subs	r6, #1
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	612e      	str	r6, [r5, #16]
 800e7b2:	4621      	mov	r1, r4
 800e7b4:	f7ff fdc1 	bl	800e33a <_Bfree>
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7be:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	e7c5      	b.n	800e752 <__lshift+0x4a>
 800e7c6:	3904      	subs	r1, #4
 800e7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7d0:	459c      	cmp	ip, r3
 800e7d2:	d8f9      	bhi.n	800e7c8 <__lshift+0xc0>
 800e7d4:	e7ea      	b.n	800e7ac <__lshift+0xa4>
 800e7d6:	bf00      	nop
 800e7d8:	08011987 	.word	0x08011987
 800e7dc:	080119f0 	.word	0x080119f0

0800e7e0 <__mcmp>:
 800e7e0:	b530      	push	{r4, r5, lr}
 800e7e2:	6902      	ldr	r2, [r0, #16]
 800e7e4:	690c      	ldr	r4, [r1, #16]
 800e7e6:	1b12      	subs	r2, r2, r4
 800e7e8:	d10e      	bne.n	800e808 <__mcmp+0x28>
 800e7ea:	f100 0314 	add.w	r3, r0, #20
 800e7ee:	3114      	adds	r1, #20
 800e7f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e7f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e7fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e800:	42a5      	cmp	r5, r4
 800e802:	d003      	beq.n	800e80c <__mcmp+0x2c>
 800e804:	d305      	bcc.n	800e812 <__mcmp+0x32>
 800e806:	2201      	movs	r2, #1
 800e808:	4610      	mov	r0, r2
 800e80a:	bd30      	pop	{r4, r5, pc}
 800e80c:	4283      	cmp	r3, r0
 800e80e:	d3f3      	bcc.n	800e7f8 <__mcmp+0x18>
 800e810:	e7fa      	b.n	800e808 <__mcmp+0x28>
 800e812:	f04f 32ff 	mov.w	r2, #4294967295
 800e816:	e7f7      	b.n	800e808 <__mcmp+0x28>

0800e818 <__mdiff>:
 800e818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	460c      	mov	r4, r1
 800e81e:	4606      	mov	r6, r0
 800e820:	4611      	mov	r1, r2
 800e822:	4620      	mov	r0, r4
 800e824:	4690      	mov	r8, r2
 800e826:	f7ff ffdb 	bl	800e7e0 <__mcmp>
 800e82a:	1e05      	subs	r5, r0, #0
 800e82c:	d110      	bne.n	800e850 <__mdiff+0x38>
 800e82e:	4629      	mov	r1, r5
 800e830:	4630      	mov	r0, r6
 800e832:	f7ff fd5d 	bl	800e2f0 <_Balloc>
 800e836:	b930      	cbnz	r0, 800e846 <__mdiff+0x2e>
 800e838:	4b3a      	ldr	r3, [pc, #232]	; (800e924 <__mdiff+0x10c>)
 800e83a:	4602      	mov	r2, r0
 800e83c:	f240 2137 	movw	r1, #567	; 0x237
 800e840:	4839      	ldr	r0, [pc, #228]	; (800e928 <__mdiff+0x110>)
 800e842:	f001 fd51 	bl	80102e8 <__assert_func>
 800e846:	2301      	movs	r3, #1
 800e848:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e84c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e850:	bfa4      	itt	ge
 800e852:	4643      	movge	r3, r8
 800e854:	46a0      	movge	r8, r4
 800e856:	4630      	mov	r0, r6
 800e858:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e85c:	bfa6      	itte	ge
 800e85e:	461c      	movge	r4, r3
 800e860:	2500      	movge	r5, #0
 800e862:	2501      	movlt	r5, #1
 800e864:	f7ff fd44 	bl	800e2f0 <_Balloc>
 800e868:	b920      	cbnz	r0, 800e874 <__mdiff+0x5c>
 800e86a:	4b2e      	ldr	r3, [pc, #184]	; (800e924 <__mdiff+0x10c>)
 800e86c:	4602      	mov	r2, r0
 800e86e:	f240 2145 	movw	r1, #581	; 0x245
 800e872:	e7e5      	b.n	800e840 <__mdiff+0x28>
 800e874:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e878:	6926      	ldr	r6, [r4, #16]
 800e87a:	60c5      	str	r5, [r0, #12]
 800e87c:	f104 0914 	add.w	r9, r4, #20
 800e880:	f108 0514 	add.w	r5, r8, #20
 800e884:	f100 0e14 	add.w	lr, r0, #20
 800e888:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e88c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e890:	f108 0210 	add.w	r2, r8, #16
 800e894:	46f2      	mov	sl, lr
 800e896:	2100      	movs	r1, #0
 800e898:	f859 3b04 	ldr.w	r3, [r9], #4
 800e89c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8a0:	fa11 f88b 	uxtah	r8, r1, fp
 800e8a4:	b299      	uxth	r1, r3
 800e8a6:	0c1b      	lsrs	r3, r3, #16
 800e8a8:	eba8 0801 	sub.w	r8, r8, r1
 800e8ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8b4:	fa1f f888 	uxth.w	r8, r8
 800e8b8:	1419      	asrs	r1, r3, #16
 800e8ba:	454e      	cmp	r6, r9
 800e8bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8c0:	f84a 3b04 	str.w	r3, [sl], #4
 800e8c4:	d8e8      	bhi.n	800e898 <__mdiff+0x80>
 800e8c6:	1b33      	subs	r3, r6, r4
 800e8c8:	3b15      	subs	r3, #21
 800e8ca:	f023 0303 	bic.w	r3, r3, #3
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	3415      	adds	r4, #21
 800e8d2:	42a6      	cmp	r6, r4
 800e8d4:	bf38      	it	cc
 800e8d6:	2304      	movcc	r3, #4
 800e8d8:	441d      	add	r5, r3
 800e8da:	4473      	add	r3, lr
 800e8dc:	469e      	mov	lr, r3
 800e8de:	462e      	mov	r6, r5
 800e8e0:	4566      	cmp	r6, ip
 800e8e2:	d30e      	bcc.n	800e902 <__mdiff+0xea>
 800e8e4:	f10c 0203 	add.w	r2, ip, #3
 800e8e8:	1b52      	subs	r2, r2, r5
 800e8ea:	f022 0203 	bic.w	r2, r2, #3
 800e8ee:	3d03      	subs	r5, #3
 800e8f0:	45ac      	cmp	ip, r5
 800e8f2:	bf38      	it	cc
 800e8f4:	2200      	movcc	r2, #0
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e8fc:	b17a      	cbz	r2, 800e91e <__mdiff+0x106>
 800e8fe:	6107      	str	r7, [r0, #16]
 800e900:	e7a4      	b.n	800e84c <__mdiff+0x34>
 800e902:	f856 8b04 	ldr.w	r8, [r6], #4
 800e906:	fa11 f288 	uxtah	r2, r1, r8
 800e90a:	1414      	asrs	r4, r2, #16
 800e90c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e910:	b292      	uxth	r2, r2
 800e912:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e916:	f84e 2b04 	str.w	r2, [lr], #4
 800e91a:	1421      	asrs	r1, r4, #16
 800e91c:	e7e0      	b.n	800e8e0 <__mdiff+0xc8>
 800e91e:	3f01      	subs	r7, #1
 800e920:	e7ea      	b.n	800e8f8 <__mdiff+0xe0>
 800e922:	bf00      	nop
 800e924:	08011987 	.word	0x08011987
 800e928:	080119f0 	.word	0x080119f0

0800e92c <__ulp>:
 800e92c:	b082      	sub	sp, #8
 800e92e:	ed8d 0b00 	vstr	d0, [sp]
 800e932:	9a01      	ldr	r2, [sp, #4]
 800e934:	4b0f      	ldr	r3, [pc, #60]	; (800e974 <__ulp+0x48>)
 800e936:	4013      	ands	r3, r2
 800e938:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	dc08      	bgt.n	800e952 <__ulp+0x26>
 800e940:	425b      	negs	r3, r3
 800e942:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e946:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e94a:	da04      	bge.n	800e956 <__ulp+0x2a>
 800e94c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e950:	4113      	asrs	r3, r2
 800e952:	2200      	movs	r2, #0
 800e954:	e008      	b.n	800e968 <__ulp+0x3c>
 800e956:	f1a2 0314 	sub.w	r3, r2, #20
 800e95a:	2b1e      	cmp	r3, #30
 800e95c:	bfda      	itte	le
 800e95e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e962:	40da      	lsrle	r2, r3
 800e964:	2201      	movgt	r2, #1
 800e966:	2300      	movs	r3, #0
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	ec41 0b10 	vmov	d0, r0, r1
 800e970:	b002      	add	sp, #8
 800e972:	4770      	bx	lr
 800e974:	7ff00000 	.word	0x7ff00000

0800e978 <__b2d>:
 800e978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97c:	6906      	ldr	r6, [r0, #16]
 800e97e:	f100 0814 	add.w	r8, r0, #20
 800e982:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e986:	1f37      	subs	r7, r6, #4
 800e988:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7ff fd6d 	bl	800e46c <__hi0bits>
 800e992:	f1c0 0320 	rsb	r3, r0, #32
 800e996:	280a      	cmp	r0, #10
 800e998:	600b      	str	r3, [r1, #0]
 800e99a:	491b      	ldr	r1, [pc, #108]	; (800ea08 <__b2d+0x90>)
 800e99c:	dc15      	bgt.n	800e9ca <__b2d+0x52>
 800e99e:	f1c0 0c0b 	rsb	ip, r0, #11
 800e9a2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e9a6:	45b8      	cmp	r8, r7
 800e9a8:	ea43 0501 	orr.w	r5, r3, r1
 800e9ac:	bf34      	ite	cc
 800e9ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9b2:	2300      	movcs	r3, #0
 800e9b4:	3015      	adds	r0, #21
 800e9b6:	fa02 f000 	lsl.w	r0, r2, r0
 800e9ba:	fa23 f30c 	lsr.w	r3, r3, ip
 800e9be:	4303      	orrs	r3, r0
 800e9c0:	461c      	mov	r4, r3
 800e9c2:	ec45 4b10 	vmov	d0, r4, r5
 800e9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ca:	45b8      	cmp	r8, r7
 800e9cc:	bf3a      	itte	cc
 800e9ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9d2:	f1a6 0708 	subcc.w	r7, r6, #8
 800e9d6:	2300      	movcs	r3, #0
 800e9d8:	380b      	subs	r0, #11
 800e9da:	d012      	beq.n	800ea02 <__b2d+0x8a>
 800e9dc:	f1c0 0120 	rsb	r1, r0, #32
 800e9e0:	fa23 f401 	lsr.w	r4, r3, r1
 800e9e4:	4082      	lsls	r2, r0
 800e9e6:	4322      	orrs	r2, r4
 800e9e8:	4547      	cmp	r7, r8
 800e9ea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e9ee:	bf8c      	ite	hi
 800e9f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e9f4:	2200      	movls	r2, #0
 800e9f6:	4083      	lsls	r3, r0
 800e9f8:	40ca      	lsrs	r2, r1
 800e9fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	e7de      	b.n	800e9c0 <__b2d+0x48>
 800ea02:	ea42 0501 	orr.w	r5, r2, r1
 800ea06:	e7db      	b.n	800e9c0 <__b2d+0x48>
 800ea08:	3ff00000 	.word	0x3ff00000

0800ea0c <__d2b>:
 800ea0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea10:	460f      	mov	r7, r1
 800ea12:	2101      	movs	r1, #1
 800ea14:	ec59 8b10 	vmov	r8, r9, d0
 800ea18:	4616      	mov	r6, r2
 800ea1a:	f7ff fc69 	bl	800e2f0 <_Balloc>
 800ea1e:	4604      	mov	r4, r0
 800ea20:	b930      	cbnz	r0, 800ea30 <__d2b+0x24>
 800ea22:	4602      	mov	r2, r0
 800ea24:	4b24      	ldr	r3, [pc, #144]	; (800eab8 <__d2b+0xac>)
 800ea26:	4825      	ldr	r0, [pc, #148]	; (800eabc <__d2b+0xb0>)
 800ea28:	f240 310f 	movw	r1, #783	; 0x30f
 800ea2c:	f001 fc5c 	bl	80102e8 <__assert_func>
 800ea30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea38:	bb2d      	cbnz	r5, 800ea86 <__d2b+0x7a>
 800ea3a:	9301      	str	r3, [sp, #4]
 800ea3c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea40:	d026      	beq.n	800ea90 <__d2b+0x84>
 800ea42:	4668      	mov	r0, sp
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	f7ff fd31 	bl	800e4ac <__lo0bits>
 800ea4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea4e:	b1e8      	cbz	r0, 800ea8c <__d2b+0x80>
 800ea50:	f1c0 0320 	rsb	r3, r0, #32
 800ea54:	fa02 f303 	lsl.w	r3, r2, r3
 800ea58:	430b      	orrs	r3, r1
 800ea5a:	40c2      	lsrs	r2, r0
 800ea5c:	6163      	str	r3, [r4, #20]
 800ea5e:	9201      	str	r2, [sp, #4]
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	61a3      	str	r3, [r4, #24]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bf14      	ite	ne
 800ea68:	2202      	movne	r2, #2
 800ea6a:	2201      	moveq	r2, #1
 800ea6c:	6122      	str	r2, [r4, #16]
 800ea6e:	b1bd      	cbz	r5, 800eaa0 <__d2b+0x94>
 800ea70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea74:	4405      	add	r5, r0
 800ea76:	603d      	str	r5, [r7, #0]
 800ea78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea7c:	6030      	str	r0, [r6, #0]
 800ea7e:	4620      	mov	r0, r4
 800ea80:	b003      	add	sp, #12
 800ea82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea8a:	e7d6      	b.n	800ea3a <__d2b+0x2e>
 800ea8c:	6161      	str	r1, [r4, #20]
 800ea8e:	e7e7      	b.n	800ea60 <__d2b+0x54>
 800ea90:	a801      	add	r0, sp, #4
 800ea92:	f7ff fd0b 	bl	800e4ac <__lo0bits>
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	6163      	str	r3, [r4, #20]
 800ea9a:	3020      	adds	r0, #32
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	e7e5      	b.n	800ea6c <__d2b+0x60>
 800eaa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eaa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eaa8:	6038      	str	r0, [r7, #0]
 800eaaa:	6918      	ldr	r0, [r3, #16]
 800eaac:	f7ff fcde 	bl	800e46c <__hi0bits>
 800eab0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eab4:	e7e2      	b.n	800ea7c <__d2b+0x70>
 800eab6:	bf00      	nop
 800eab8:	08011987 	.word	0x08011987
 800eabc:	080119f0 	.word	0x080119f0

0800eac0 <__ratio>:
 800eac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	4688      	mov	r8, r1
 800eac6:	4669      	mov	r1, sp
 800eac8:	4681      	mov	r9, r0
 800eaca:	f7ff ff55 	bl	800e978 <__b2d>
 800eace:	a901      	add	r1, sp, #4
 800ead0:	4640      	mov	r0, r8
 800ead2:	ec55 4b10 	vmov	r4, r5, d0
 800ead6:	f7ff ff4f 	bl	800e978 <__b2d>
 800eada:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eade:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eae2:	eba3 0c02 	sub.w	ip, r3, r2
 800eae6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eaea:	1a9b      	subs	r3, r3, r2
 800eaec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eaf0:	ec51 0b10 	vmov	r0, r1, d0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfd6      	itet	le
 800eaf8:	460a      	movle	r2, r1
 800eafa:	462a      	movgt	r2, r5
 800eafc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb00:	468b      	mov	fp, r1
 800eb02:	462f      	mov	r7, r5
 800eb04:	bfd4      	ite	le
 800eb06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb0e:	4620      	mov	r0, r4
 800eb10:	ee10 2a10 	vmov	r2, s0
 800eb14:	465b      	mov	r3, fp
 800eb16:	4639      	mov	r1, r7
 800eb18:	f7f1 fea8 	bl	800086c <__aeabi_ddiv>
 800eb1c:	ec41 0b10 	vmov	d0, r0, r1
 800eb20:	b003      	add	sp, #12
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb26 <__copybits>:
 800eb26:	3901      	subs	r1, #1
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	1149      	asrs	r1, r1, #5
 800eb2c:	6914      	ldr	r4, [r2, #16]
 800eb2e:	3101      	adds	r1, #1
 800eb30:	f102 0314 	add.w	r3, r2, #20
 800eb34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb3c:	1f05      	subs	r5, r0, #4
 800eb3e:	42a3      	cmp	r3, r4
 800eb40:	d30c      	bcc.n	800eb5c <__copybits+0x36>
 800eb42:	1aa3      	subs	r3, r4, r2
 800eb44:	3b11      	subs	r3, #17
 800eb46:	f023 0303 	bic.w	r3, r3, #3
 800eb4a:	3211      	adds	r2, #17
 800eb4c:	42a2      	cmp	r2, r4
 800eb4e:	bf88      	it	hi
 800eb50:	2300      	movhi	r3, #0
 800eb52:	4418      	add	r0, r3
 800eb54:	2300      	movs	r3, #0
 800eb56:	4288      	cmp	r0, r1
 800eb58:	d305      	bcc.n	800eb66 <__copybits+0x40>
 800eb5a:	bd70      	pop	{r4, r5, r6, pc}
 800eb5c:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb60:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb64:	e7eb      	b.n	800eb3e <__copybits+0x18>
 800eb66:	f840 3b04 	str.w	r3, [r0], #4
 800eb6a:	e7f4      	b.n	800eb56 <__copybits+0x30>

0800eb6c <__any_on>:
 800eb6c:	f100 0214 	add.w	r2, r0, #20
 800eb70:	6900      	ldr	r0, [r0, #16]
 800eb72:	114b      	asrs	r3, r1, #5
 800eb74:	4298      	cmp	r0, r3
 800eb76:	b510      	push	{r4, lr}
 800eb78:	db11      	blt.n	800eb9e <__any_on+0x32>
 800eb7a:	dd0a      	ble.n	800eb92 <__any_on+0x26>
 800eb7c:	f011 011f 	ands.w	r1, r1, #31
 800eb80:	d007      	beq.n	800eb92 <__any_on+0x26>
 800eb82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb86:	fa24 f001 	lsr.w	r0, r4, r1
 800eb8a:	fa00 f101 	lsl.w	r1, r0, r1
 800eb8e:	428c      	cmp	r4, r1
 800eb90:	d10b      	bne.n	800ebaa <__any_on+0x3e>
 800eb92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d803      	bhi.n	800eba2 <__any_on+0x36>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	4603      	mov	r3, r0
 800eba0:	e7f7      	b.n	800eb92 <__any_on+0x26>
 800eba2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eba6:	2900      	cmp	r1, #0
 800eba8:	d0f5      	beq.n	800eb96 <__any_on+0x2a>
 800ebaa:	2001      	movs	r0, #1
 800ebac:	e7f6      	b.n	800eb9c <__any_on+0x30>
	...

0800ebb0 <realloc>:
 800ebb0:	4b02      	ldr	r3, [pc, #8]	; (800ebbc <realloc+0xc>)
 800ebb2:	460a      	mov	r2, r1
 800ebb4:	4601      	mov	r1, r0
 800ebb6:	6818      	ldr	r0, [r3, #0]
 800ebb8:	f000 b802 	b.w	800ebc0 <_realloc_r>
 800ebbc:	20000148 	.word	0x20000148

0800ebc0 <_realloc_r>:
 800ebc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc4:	4682      	mov	sl, r0
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	b929      	cbnz	r1, 800ebd6 <_realloc_r+0x16>
 800ebca:	4611      	mov	r1, r2
 800ebcc:	b003      	add	sp, #12
 800ebce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd2:	f7f9 b95d 	b.w	8007e90 <_malloc_r>
 800ebd6:	9201      	str	r2, [sp, #4]
 800ebd8:	f7f9 fb94 	bl	8008304 <__malloc_lock>
 800ebdc:	9a01      	ldr	r2, [sp, #4]
 800ebde:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800ebe2:	f102 080b 	add.w	r8, r2, #11
 800ebe6:	f1b8 0f16 	cmp.w	r8, #22
 800ebea:	d90b      	bls.n	800ec04 <_realloc_r+0x44>
 800ebec:	f038 0807 	bics.w	r8, r8, #7
 800ebf0:	d50a      	bpl.n	800ec08 <_realloc_r+0x48>
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	f8ca 3000 	str.w	r3, [sl]
 800ebf8:	f04f 0b00 	mov.w	fp, #0
 800ebfc:	4658      	mov	r0, fp
 800ebfe:	b003      	add	sp, #12
 800ec00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec04:	f04f 0810 	mov.w	r8, #16
 800ec08:	4590      	cmp	r8, r2
 800ec0a:	d3f2      	bcc.n	800ebf2 <_realloc_r+0x32>
 800ec0c:	f025 0603 	bic.w	r6, r5, #3
 800ec10:	45b0      	cmp	r8, r6
 800ec12:	f1a4 0908 	sub.w	r9, r4, #8
 800ec16:	f340 8170 	ble.w	800eefa <_realloc_r+0x33a>
 800ec1a:	499c      	ldr	r1, [pc, #624]	; (800ee8c <_realloc_r+0x2cc>)
 800ec1c:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ec20:	eb09 0306 	add.w	r3, r9, r6
 800ec24:	459c      	cmp	ip, r3
 800ec26:	6859      	ldr	r1, [r3, #4]
 800ec28:	d005      	beq.n	800ec36 <_realloc_r+0x76>
 800ec2a:	f021 0001 	bic.w	r0, r1, #1
 800ec2e:	4418      	add	r0, r3
 800ec30:	6840      	ldr	r0, [r0, #4]
 800ec32:	07c7      	lsls	r7, r0, #31
 800ec34:	d447      	bmi.n	800ecc6 <_realloc_r+0x106>
 800ec36:	f021 0103 	bic.w	r1, r1, #3
 800ec3a:	459c      	cmp	ip, r3
 800ec3c:	eb06 0701 	add.w	r7, r6, r1
 800ec40:	d119      	bne.n	800ec76 <_realloc_r+0xb6>
 800ec42:	f108 0010 	add.w	r0, r8, #16
 800ec46:	42b8      	cmp	r0, r7
 800ec48:	dc3f      	bgt.n	800ecca <_realloc_r+0x10a>
 800ec4a:	eb09 0308 	add.w	r3, r9, r8
 800ec4e:	4a8f      	ldr	r2, [pc, #572]	; (800ee8c <_realloc_r+0x2cc>)
 800ec50:	eba7 0708 	sub.w	r7, r7, r8
 800ec54:	f047 0701 	orr.w	r7, r7, #1
 800ec58:	6093      	str	r3, [r2, #8]
 800ec5a:	605f      	str	r7, [r3, #4]
 800ec5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	ea43 0308 	orr.w	r3, r3, r8
 800ec68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec6c:	4650      	mov	r0, sl
 800ec6e:	f7f9 fb4f 	bl	8008310 <__malloc_unlock>
 800ec72:	46a3      	mov	fp, r4
 800ec74:	e7c2      	b.n	800ebfc <_realloc_r+0x3c>
 800ec76:	45b8      	cmp	r8, r7
 800ec78:	dc27      	bgt.n	800ecca <_realloc_r+0x10a>
 800ec7a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ec7e:	60da      	str	r2, [r3, #12]
 800ec80:	6093      	str	r3, [r2, #8]
 800ec82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ec86:	eba7 0008 	sub.w	r0, r7, r8
 800ec8a:	280f      	cmp	r0, #15
 800ec8c:	f003 0301 	and.w	r3, r3, #1
 800ec90:	eb09 0207 	add.w	r2, r9, r7
 800ec94:	f240 8133 	bls.w	800eefe <_realloc_r+0x33e>
 800ec98:	eb09 0108 	add.w	r1, r9, r8
 800ec9c:	ea48 0303 	orr.w	r3, r8, r3
 800eca0:	f040 0001 	orr.w	r0, r0, #1
 800eca4:	f8c9 3004 	str.w	r3, [r9, #4]
 800eca8:	6048      	str	r0, [r1, #4]
 800ecaa:	6853      	ldr	r3, [r2, #4]
 800ecac:	f043 0301 	orr.w	r3, r3, #1
 800ecb0:	6053      	str	r3, [r2, #4]
 800ecb2:	3108      	adds	r1, #8
 800ecb4:	4650      	mov	r0, sl
 800ecb6:	f7f9 f82b 	bl	8007d10 <_free_r>
 800ecba:	4650      	mov	r0, sl
 800ecbc:	f7f9 fb28 	bl	8008310 <__malloc_unlock>
 800ecc0:	f109 0b08 	add.w	fp, r9, #8
 800ecc4:	e79a      	b.n	800ebfc <_realloc_r+0x3c>
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	460b      	mov	r3, r1
 800ecca:	07e8      	lsls	r0, r5, #31
 800eccc:	f100 80c6 	bmi.w	800ee5c <_realloc_r+0x29c>
 800ecd0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800ecd4:	eba9 0505 	sub.w	r5, r9, r5
 800ecd8:	6868      	ldr	r0, [r5, #4]
 800ecda:	f020 0003 	bic.w	r0, r0, #3
 800ecde:	eb00 0b06 	add.w	fp, r0, r6
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 8086 	beq.w	800edf4 <_realloc_r+0x234>
 800ece8:	459c      	cmp	ip, r3
 800ecea:	eb01 070b 	add.w	r7, r1, fp
 800ecee:	d149      	bne.n	800ed84 <_realloc_r+0x1c4>
 800ecf0:	f108 0310 	add.w	r3, r8, #16
 800ecf4:	42bb      	cmp	r3, r7
 800ecf6:	dc7d      	bgt.n	800edf4 <_realloc_r+0x234>
 800ecf8:	46ab      	mov	fp, r5
 800ecfa:	68eb      	ldr	r3, [r5, #12]
 800ecfc:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800ed00:	60d3      	str	r3, [r2, #12]
 800ed02:	609a      	str	r2, [r3, #8]
 800ed04:	1f32      	subs	r2, r6, #4
 800ed06:	2a24      	cmp	r2, #36	; 0x24
 800ed08:	d837      	bhi.n	800ed7a <_realloc_r+0x1ba>
 800ed0a:	2a13      	cmp	r2, #19
 800ed0c:	d933      	bls.n	800ed76 <_realloc_r+0x1b6>
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	60ab      	str	r3, [r5, #8]
 800ed12:	6863      	ldr	r3, [r4, #4]
 800ed14:	60eb      	str	r3, [r5, #12]
 800ed16:	2a1b      	cmp	r2, #27
 800ed18:	d81b      	bhi.n	800ed52 <_realloc_r+0x192>
 800ed1a:	3408      	adds	r4, #8
 800ed1c:	f105 0310 	add.w	r3, r5, #16
 800ed20:	6822      	ldr	r2, [r4, #0]
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	6862      	ldr	r2, [r4, #4]
 800ed26:	605a      	str	r2, [r3, #4]
 800ed28:	68a2      	ldr	r2, [r4, #8]
 800ed2a:	609a      	str	r2, [r3, #8]
 800ed2c:	eb05 0308 	add.w	r3, r5, r8
 800ed30:	4a56      	ldr	r2, [pc, #344]	; (800ee8c <_realloc_r+0x2cc>)
 800ed32:	eba7 0708 	sub.w	r7, r7, r8
 800ed36:	f047 0701 	orr.w	r7, r7, #1
 800ed3a:	6093      	str	r3, [r2, #8]
 800ed3c:	605f      	str	r7, [r3, #4]
 800ed3e:	686b      	ldr	r3, [r5, #4]
 800ed40:	f003 0301 	and.w	r3, r3, #1
 800ed44:	ea43 0308 	orr.w	r3, r3, r8
 800ed48:	606b      	str	r3, [r5, #4]
 800ed4a:	4650      	mov	r0, sl
 800ed4c:	f7f9 fae0 	bl	8008310 <__malloc_unlock>
 800ed50:	e754      	b.n	800ebfc <_realloc_r+0x3c>
 800ed52:	68a3      	ldr	r3, [r4, #8]
 800ed54:	612b      	str	r3, [r5, #16]
 800ed56:	68e3      	ldr	r3, [r4, #12]
 800ed58:	616b      	str	r3, [r5, #20]
 800ed5a:	2a24      	cmp	r2, #36	; 0x24
 800ed5c:	bf01      	itttt	eq
 800ed5e:	6923      	ldreq	r3, [r4, #16]
 800ed60:	61ab      	streq	r3, [r5, #24]
 800ed62:	6962      	ldreq	r2, [r4, #20]
 800ed64:	61ea      	streq	r2, [r5, #28]
 800ed66:	bf19      	ittee	ne
 800ed68:	3410      	addne	r4, #16
 800ed6a:	f105 0318 	addne.w	r3, r5, #24
 800ed6e:	f105 0320 	addeq.w	r3, r5, #32
 800ed72:	3418      	addeq	r4, #24
 800ed74:	e7d4      	b.n	800ed20 <_realloc_r+0x160>
 800ed76:	465b      	mov	r3, fp
 800ed78:	e7d2      	b.n	800ed20 <_realloc_r+0x160>
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	4658      	mov	r0, fp
 800ed7e:	f7fe fb44 	bl	800d40a <memmove>
 800ed82:	e7d3      	b.n	800ed2c <_realloc_r+0x16c>
 800ed84:	45b8      	cmp	r8, r7
 800ed86:	dc35      	bgt.n	800edf4 <_realloc_r+0x234>
 800ed88:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	60da      	str	r2, [r3, #12]
 800ed90:	6093      	str	r3, [r2, #8]
 800ed92:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ed96:	68eb      	ldr	r3, [r5, #12]
 800ed98:	60d3      	str	r3, [r2, #12]
 800ed9a:	609a      	str	r2, [r3, #8]
 800ed9c:	1f32      	subs	r2, r6, #4
 800ed9e:	2a24      	cmp	r2, #36	; 0x24
 800eda0:	d824      	bhi.n	800edec <_realloc_r+0x22c>
 800eda2:	2a13      	cmp	r2, #19
 800eda4:	d908      	bls.n	800edb8 <_realloc_r+0x1f8>
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	60ab      	str	r3, [r5, #8]
 800edaa:	6863      	ldr	r3, [r4, #4]
 800edac:	60eb      	str	r3, [r5, #12]
 800edae:	2a1b      	cmp	r2, #27
 800edb0:	d80a      	bhi.n	800edc8 <_realloc_r+0x208>
 800edb2:	3408      	adds	r4, #8
 800edb4:	f105 0010 	add.w	r0, r5, #16
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	6003      	str	r3, [r0, #0]
 800edbc:	6863      	ldr	r3, [r4, #4]
 800edbe:	6043      	str	r3, [r0, #4]
 800edc0:	68a3      	ldr	r3, [r4, #8]
 800edc2:	6083      	str	r3, [r0, #8]
 800edc4:	46a9      	mov	r9, r5
 800edc6:	e75c      	b.n	800ec82 <_realloc_r+0xc2>
 800edc8:	68a3      	ldr	r3, [r4, #8]
 800edca:	612b      	str	r3, [r5, #16]
 800edcc:	68e3      	ldr	r3, [r4, #12]
 800edce:	616b      	str	r3, [r5, #20]
 800edd0:	2a24      	cmp	r2, #36	; 0x24
 800edd2:	bf01      	itttt	eq
 800edd4:	6923      	ldreq	r3, [r4, #16]
 800edd6:	61ab      	streq	r3, [r5, #24]
 800edd8:	6963      	ldreq	r3, [r4, #20]
 800edda:	61eb      	streq	r3, [r5, #28]
 800eddc:	bf19      	ittee	ne
 800edde:	3410      	addne	r4, #16
 800ede0:	f105 0018 	addne.w	r0, r5, #24
 800ede4:	f105 0020 	addeq.w	r0, r5, #32
 800ede8:	3418      	addeq	r4, #24
 800edea:	e7e5      	b.n	800edb8 <_realloc_r+0x1f8>
 800edec:	4621      	mov	r1, r4
 800edee:	f7fe fb0c 	bl	800d40a <memmove>
 800edf2:	e7e7      	b.n	800edc4 <_realloc_r+0x204>
 800edf4:	45d8      	cmp	r8, fp
 800edf6:	dc31      	bgt.n	800ee5c <_realloc_r+0x29c>
 800edf8:	4628      	mov	r0, r5
 800edfa:	68eb      	ldr	r3, [r5, #12]
 800edfc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ee00:	60d3      	str	r3, [r2, #12]
 800ee02:	609a      	str	r2, [r3, #8]
 800ee04:	1f32      	subs	r2, r6, #4
 800ee06:	2a24      	cmp	r2, #36	; 0x24
 800ee08:	d824      	bhi.n	800ee54 <_realloc_r+0x294>
 800ee0a:	2a13      	cmp	r2, #19
 800ee0c:	d908      	bls.n	800ee20 <_realloc_r+0x260>
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	60ab      	str	r3, [r5, #8]
 800ee12:	6863      	ldr	r3, [r4, #4]
 800ee14:	60eb      	str	r3, [r5, #12]
 800ee16:	2a1b      	cmp	r2, #27
 800ee18:	d80a      	bhi.n	800ee30 <_realloc_r+0x270>
 800ee1a:	3408      	adds	r4, #8
 800ee1c:	f105 0010 	add.w	r0, r5, #16
 800ee20:	6823      	ldr	r3, [r4, #0]
 800ee22:	6003      	str	r3, [r0, #0]
 800ee24:	6863      	ldr	r3, [r4, #4]
 800ee26:	6043      	str	r3, [r0, #4]
 800ee28:	68a3      	ldr	r3, [r4, #8]
 800ee2a:	6083      	str	r3, [r0, #8]
 800ee2c:	465f      	mov	r7, fp
 800ee2e:	e7c9      	b.n	800edc4 <_realloc_r+0x204>
 800ee30:	68a3      	ldr	r3, [r4, #8]
 800ee32:	612b      	str	r3, [r5, #16]
 800ee34:	68e3      	ldr	r3, [r4, #12]
 800ee36:	616b      	str	r3, [r5, #20]
 800ee38:	2a24      	cmp	r2, #36	; 0x24
 800ee3a:	bf01      	itttt	eq
 800ee3c:	6923      	ldreq	r3, [r4, #16]
 800ee3e:	61ab      	streq	r3, [r5, #24]
 800ee40:	6963      	ldreq	r3, [r4, #20]
 800ee42:	61eb      	streq	r3, [r5, #28]
 800ee44:	bf19      	ittee	ne
 800ee46:	3410      	addne	r4, #16
 800ee48:	f105 0018 	addne.w	r0, r5, #24
 800ee4c:	f105 0020 	addeq.w	r0, r5, #32
 800ee50:	3418      	addeq	r4, #24
 800ee52:	e7e5      	b.n	800ee20 <_realloc_r+0x260>
 800ee54:	4621      	mov	r1, r4
 800ee56:	f7fe fad8 	bl	800d40a <memmove>
 800ee5a:	e7e7      	b.n	800ee2c <_realloc_r+0x26c>
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	4650      	mov	r0, sl
 800ee60:	f7f9 f816 	bl	8007e90 <_malloc_r>
 800ee64:	4683      	mov	fp, r0
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f43f af6f 	beq.w	800ed4a <_realloc_r+0x18a>
 800ee6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ee70:	f023 0301 	bic.w	r3, r3, #1
 800ee74:	444b      	add	r3, r9
 800ee76:	f1a0 0208 	sub.w	r2, r0, #8
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d108      	bne.n	800ee90 <_realloc_r+0x2d0>
 800ee7e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ee82:	f027 0703 	bic.w	r7, r7, #3
 800ee86:	4437      	add	r7, r6
 800ee88:	e6fb      	b.n	800ec82 <_realloc_r+0xc2>
 800ee8a:	bf00      	nop
 800ee8c:	20000150 	.word	0x20000150
 800ee90:	1f32      	subs	r2, r6, #4
 800ee92:	2a24      	cmp	r2, #36	; 0x24
 800ee94:	d82d      	bhi.n	800eef2 <_realloc_r+0x332>
 800ee96:	2a13      	cmp	r2, #19
 800ee98:	d928      	bls.n	800eeec <_realloc_r+0x32c>
 800ee9a:	6823      	ldr	r3, [r4, #0]
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	6863      	ldr	r3, [r4, #4]
 800eea0:	6043      	str	r3, [r0, #4]
 800eea2:	2a1b      	cmp	r2, #27
 800eea4:	d80e      	bhi.n	800eec4 <_realloc_r+0x304>
 800eea6:	f104 0208 	add.w	r2, r4, #8
 800eeaa:	f100 0308 	add.w	r3, r0, #8
 800eeae:	6811      	ldr	r1, [r2, #0]
 800eeb0:	6019      	str	r1, [r3, #0]
 800eeb2:	6851      	ldr	r1, [r2, #4]
 800eeb4:	6059      	str	r1, [r3, #4]
 800eeb6:	6892      	ldr	r2, [r2, #8]
 800eeb8:	609a      	str	r2, [r3, #8]
 800eeba:	4621      	mov	r1, r4
 800eebc:	4650      	mov	r0, sl
 800eebe:	f7f8 ff27 	bl	8007d10 <_free_r>
 800eec2:	e742      	b.n	800ed4a <_realloc_r+0x18a>
 800eec4:	68a3      	ldr	r3, [r4, #8]
 800eec6:	6083      	str	r3, [r0, #8]
 800eec8:	68e3      	ldr	r3, [r4, #12]
 800eeca:	60c3      	str	r3, [r0, #12]
 800eecc:	2a24      	cmp	r2, #36	; 0x24
 800eece:	bf01      	itttt	eq
 800eed0:	6923      	ldreq	r3, [r4, #16]
 800eed2:	6103      	streq	r3, [r0, #16]
 800eed4:	6961      	ldreq	r1, [r4, #20]
 800eed6:	6141      	streq	r1, [r0, #20]
 800eed8:	bf19      	ittee	ne
 800eeda:	f104 0210 	addne.w	r2, r4, #16
 800eede:	f100 0310 	addne.w	r3, r0, #16
 800eee2:	f104 0218 	addeq.w	r2, r4, #24
 800eee6:	f100 0318 	addeq.w	r3, r0, #24
 800eeea:	e7e0      	b.n	800eeae <_realloc_r+0x2ee>
 800eeec:	4603      	mov	r3, r0
 800eeee:	4622      	mov	r2, r4
 800eef0:	e7dd      	b.n	800eeae <_realloc_r+0x2ee>
 800eef2:	4621      	mov	r1, r4
 800eef4:	f7fe fa89 	bl	800d40a <memmove>
 800eef8:	e7df      	b.n	800eeba <_realloc_r+0x2fa>
 800eefa:	4637      	mov	r7, r6
 800eefc:	e6c1      	b.n	800ec82 <_realloc_r+0xc2>
 800eefe:	431f      	orrs	r7, r3
 800ef00:	f8c9 7004 	str.w	r7, [r9, #4]
 800ef04:	6853      	ldr	r3, [r2, #4]
 800ef06:	f043 0301 	orr.w	r3, r3, #1
 800ef0a:	6053      	str	r3, [r2, #4]
 800ef0c:	e6d5      	b.n	800ecba <_realloc_r+0xfa>
 800ef0e:	bf00      	nop

0800ef10 <sulp>:
 800ef10:	b570      	push	{r4, r5, r6, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	ec45 4b10 	vmov	d0, r4, r5
 800ef1a:	4616      	mov	r6, r2
 800ef1c:	f7ff fd06 	bl	800e92c <__ulp>
 800ef20:	ec51 0b10 	vmov	r0, r1, d0
 800ef24:	b17e      	cbz	r6, 800ef46 <sulp+0x36>
 800ef26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	dd09      	ble.n	800ef46 <sulp+0x36>
 800ef32:	051b      	lsls	r3, r3, #20
 800ef34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ef38:	2400      	movs	r4, #0
 800ef3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ef3e:	4622      	mov	r2, r4
 800ef40:	462b      	mov	r3, r5
 800ef42:	f7f1 fb69 	bl	8000618 <__aeabi_dmul>
 800ef46:	bd70      	pop	{r4, r5, r6, pc}

0800ef48 <_strtod_l>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	ed2d 8b02 	vpush	{d8}
 800ef50:	b09b      	sub	sp, #108	; 0x6c
 800ef52:	4604      	mov	r4, r0
 800ef54:	9213      	str	r2, [sp, #76]	; 0x4c
 800ef56:	2200      	movs	r2, #0
 800ef58:	9216      	str	r2, [sp, #88]	; 0x58
 800ef5a:	460d      	mov	r5, r1
 800ef5c:	f04f 0800 	mov.w	r8, #0
 800ef60:	f04f 0900 	mov.w	r9, #0
 800ef64:	460a      	mov	r2, r1
 800ef66:	9215      	str	r2, [sp, #84]	; 0x54
 800ef68:	7811      	ldrb	r1, [r2, #0]
 800ef6a:	292b      	cmp	r1, #43	; 0x2b
 800ef6c:	d04c      	beq.n	800f008 <_strtod_l+0xc0>
 800ef6e:	d83a      	bhi.n	800efe6 <_strtod_l+0x9e>
 800ef70:	290d      	cmp	r1, #13
 800ef72:	d834      	bhi.n	800efde <_strtod_l+0x96>
 800ef74:	2908      	cmp	r1, #8
 800ef76:	d834      	bhi.n	800efe2 <_strtod_l+0x9a>
 800ef78:	2900      	cmp	r1, #0
 800ef7a:	d03d      	beq.n	800eff8 <_strtod_l+0xb0>
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	920a      	str	r2, [sp, #40]	; 0x28
 800ef80:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ef82:	7832      	ldrb	r2, [r6, #0]
 800ef84:	2a30      	cmp	r2, #48	; 0x30
 800ef86:	f040 80b4 	bne.w	800f0f2 <_strtod_l+0x1aa>
 800ef8a:	7872      	ldrb	r2, [r6, #1]
 800ef8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ef90:	2a58      	cmp	r2, #88	; 0x58
 800ef92:	d170      	bne.n	800f076 <_strtod_l+0x12e>
 800ef94:	9302      	str	r3, [sp, #8]
 800ef96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef98:	9301      	str	r3, [sp, #4]
 800ef9a:	ab16      	add	r3, sp, #88	; 0x58
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	4a8e      	ldr	r2, [pc, #568]	; (800f1d8 <_strtod_l+0x290>)
 800efa0:	ab17      	add	r3, sp, #92	; 0x5c
 800efa2:	a915      	add	r1, sp, #84	; 0x54
 800efa4:	4620      	mov	r0, r4
 800efa6:	f001 fa59 	bl	801045c <__gethex>
 800efaa:	f010 070f 	ands.w	r7, r0, #15
 800efae:	4605      	mov	r5, r0
 800efb0:	d005      	beq.n	800efbe <_strtod_l+0x76>
 800efb2:	2f06      	cmp	r7, #6
 800efb4:	d12a      	bne.n	800f00c <_strtod_l+0xc4>
 800efb6:	3601      	adds	r6, #1
 800efb8:	2300      	movs	r3, #0
 800efba:	9615      	str	r6, [sp, #84]	; 0x54
 800efbc:	930a      	str	r3, [sp, #40]	; 0x28
 800efbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f040 857f 	bne.w	800fac4 <_strtod_l+0xb7c>
 800efc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efc8:	b1db      	cbz	r3, 800f002 <_strtod_l+0xba>
 800efca:	4642      	mov	r2, r8
 800efcc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800efd0:	ec43 2b10 	vmov	d0, r2, r3
 800efd4:	b01b      	add	sp, #108	; 0x6c
 800efd6:	ecbd 8b02 	vpop	{d8}
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	2920      	cmp	r1, #32
 800efe0:	d1cc      	bne.n	800ef7c <_strtod_l+0x34>
 800efe2:	3201      	adds	r2, #1
 800efe4:	e7bf      	b.n	800ef66 <_strtod_l+0x1e>
 800efe6:	292d      	cmp	r1, #45	; 0x2d
 800efe8:	d1c8      	bne.n	800ef7c <_strtod_l+0x34>
 800efea:	2101      	movs	r1, #1
 800efec:	910a      	str	r1, [sp, #40]	; 0x28
 800efee:	1c51      	adds	r1, r2, #1
 800eff0:	9115      	str	r1, [sp, #84]	; 0x54
 800eff2:	7852      	ldrb	r2, [r2, #1]
 800eff4:	2a00      	cmp	r2, #0
 800eff6:	d1c3      	bne.n	800ef80 <_strtod_l+0x38>
 800eff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800effa:	9515      	str	r5, [sp, #84]	; 0x54
 800effc:	2b00      	cmp	r3, #0
 800effe:	f040 855f 	bne.w	800fac0 <_strtod_l+0xb78>
 800f002:	4642      	mov	r2, r8
 800f004:	464b      	mov	r3, r9
 800f006:	e7e3      	b.n	800efd0 <_strtod_l+0x88>
 800f008:	2100      	movs	r1, #0
 800f00a:	e7ef      	b.n	800efec <_strtod_l+0xa4>
 800f00c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f00e:	b13a      	cbz	r2, 800f020 <_strtod_l+0xd8>
 800f010:	2135      	movs	r1, #53	; 0x35
 800f012:	a818      	add	r0, sp, #96	; 0x60
 800f014:	f7ff fd87 	bl	800eb26 <__copybits>
 800f018:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f01a:	4620      	mov	r0, r4
 800f01c:	f7ff f98d 	bl	800e33a <_Bfree>
 800f020:	3f01      	subs	r7, #1
 800f022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f024:	2f04      	cmp	r7, #4
 800f026:	d806      	bhi.n	800f036 <_strtod_l+0xee>
 800f028:	e8df f007 	tbb	[pc, r7]
 800f02c:	201d0314 	.word	0x201d0314
 800f030:	14          	.byte	0x14
 800f031:	00          	.byte	0x00
 800f032:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f036:	05e9      	lsls	r1, r5, #23
 800f038:	bf48      	it	mi
 800f03a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f03e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f042:	0d1b      	lsrs	r3, r3, #20
 800f044:	051b      	lsls	r3, r3, #20
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1b9      	bne.n	800efbe <_strtod_l+0x76>
 800f04a:	f7f8 fdcf 	bl	8007bec <__errno>
 800f04e:	2322      	movs	r3, #34	; 0x22
 800f050:	6003      	str	r3, [r0, #0]
 800f052:	e7b4      	b.n	800efbe <_strtod_l+0x76>
 800f054:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f058:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f05c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f060:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f064:	e7e7      	b.n	800f036 <_strtod_l+0xee>
 800f066:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f1e0 <_strtod_l+0x298>
 800f06a:	e7e4      	b.n	800f036 <_strtod_l+0xee>
 800f06c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f070:	f04f 38ff 	mov.w	r8, #4294967295
 800f074:	e7df      	b.n	800f036 <_strtod_l+0xee>
 800f076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	9215      	str	r2, [sp, #84]	; 0x54
 800f07c:	785b      	ldrb	r3, [r3, #1]
 800f07e:	2b30      	cmp	r3, #48	; 0x30
 800f080:	d0f9      	beq.n	800f076 <_strtod_l+0x12e>
 800f082:	2b00      	cmp	r3, #0
 800f084:	d09b      	beq.n	800efbe <_strtod_l+0x76>
 800f086:	2301      	movs	r3, #1
 800f088:	f04f 0a00 	mov.w	sl, #0
 800f08c:	9304      	str	r3, [sp, #16]
 800f08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f090:	930b      	str	r3, [sp, #44]	; 0x2c
 800f092:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f096:	46d3      	mov	fp, sl
 800f098:	220a      	movs	r2, #10
 800f09a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f09c:	7806      	ldrb	r6, [r0, #0]
 800f09e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f0a2:	b2d9      	uxtb	r1, r3
 800f0a4:	2909      	cmp	r1, #9
 800f0a6:	d926      	bls.n	800f0f6 <_strtod_l+0x1ae>
 800f0a8:	494c      	ldr	r1, [pc, #304]	; (800f1dc <_strtod_l+0x294>)
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	f001 f8de 	bl	801026c <strncmp>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	d030      	beq.n	800f116 <_strtod_l+0x1ce>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	9005      	str	r0, [sp, #20]
 800f0ba:	465e      	mov	r6, fp
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2a65      	cmp	r2, #101	; 0x65
 800f0c0:	d001      	beq.n	800f0c6 <_strtod_l+0x17e>
 800f0c2:	2a45      	cmp	r2, #69	; 0x45
 800f0c4:	d113      	bne.n	800f0ee <_strtod_l+0x1a6>
 800f0c6:	b91e      	cbnz	r6, 800f0d0 <_strtod_l+0x188>
 800f0c8:	9a04      	ldr	r2, [sp, #16]
 800f0ca:	4302      	orrs	r2, r0
 800f0cc:	d094      	beq.n	800eff8 <_strtod_l+0xb0>
 800f0ce:	2600      	movs	r6, #0
 800f0d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f0d2:	1c6a      	adds	r2, r5, #1
 800f0d4:	9215      	str	r2, [sp, #84]	; 0x54
 800f0d6:	786a      	ldrb	r2, [r5, #1]
 800f0d8:	2a2b      	cmp	r2, #43	; 0x2b
 800f0da:	d074      	beq.n	800f1c6 <_strtod_l+0x27e>
 800f0dc:	2a2d      	cmp	r2, #45	; 0x2d
 800f0de:	d078      	beq.n	800f1d2 <_strtod_l+0x28a>
 800f0e0:	f04f 0c00 	mov.w	ip, #0
 800f0e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f0e8:	2909      	cmp	r1, #9
 800f0ea:	d97f      	bls.n	800f1ec <_strtod_l+0x2a4>
 800f0ec:	9515      	str	r5, [sp, #84]	; 0x54
 800f0ee:	2700      	movs	r7, #0
 800f0f0:	e09e      	b.n	800f230 <_strtod_l+0x2e8>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e7c8      	b.n	800f088 <_strtod_l+0x140>
 800f0f6:	f1bb 0f08 	cmp.w	fp, #8
 800f0fa:	bfd8      	it	le
 800f0fc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f0fe:	f100 0001 	add.w	r0, r0, #1
 800f102:	bfda      	itte	le
 800f104:	fb02 3301 	mlale	r3, r2, r1, r3
 800f108:	9309      	strle	r3, [sp, #36]	; 0x24
 800f10a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f10e:	f10b 0b01 	add.w	fp, fp, #1
 800f112:	9015      	str	r0, [sp, #84]	; 0x54
 800f114:	e7c1      	b.n	800f09a <_strtod_l+0x152>
 800f116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f118:	1c5a      	adds	r2, r3, #1
 800f11a:	9215      	str	r2, [sp, #84]	; 0x54
 800f11c:	785a      	ldrb	r2, [r3, #1]
 800f11e:	f1bb 0f00 	cmp.w	fp, #0
 800f122:	d037      	beq.n	800f194 <_strtod_l+0x24c>
 800f124:	9005      	str	r0, [sp, #20]
 800f126:	465e      	mov	r6, fp
 800f128:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f12c:	2b09      	cmp	r3, #9
 800f12e:	d912      	bls.n	800f156 <_strtod_l+0x20e>
 800f130:	2301      	movs	r3, #1
 800f132:	e7c4      	b.n	800f0be <_strtod_l+0x176>
 800f134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f136:	1c5a      	adds	r2, r3, #1
 800f138:	9215      	str	r2, [sp, #84]	; 0x54
 800f13a:	785a      	ldrb	r2, [r3, #1]
 800f13c:	3001      	adds	r0, #1
 800f13e:	2a30      	cmp	r2, #48	; 0x30
 800f140:	d0f8      	beq.n	800f134 <_strtod_l+0x1ec>
 800f142:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f146:	2b08      	cmp	r3, #8
 800f148:	f200 84c1 	bhi.w	800face <_strtod_l+0xb86>
 800f14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f14e:	9005      	str	r0, [sp, #20]
 800f150:	2000      	movs	r0, #0
 800f152:	930b      	str	r3, [sp, #44]	; 0x2c
 800f154:	4606      	mov	r6, r0
 800f156:	3a30      	subs	r2, #48	; 0x30
 800f158:	f100 0301 	add.w	r3, r0, #1
 800f15c:	d014      	beq.n	800f188 <_strtod_l+0x240>
 800f15e:	9905      	ldr	r1, [sp, #20]
 800f160:	4419      	add	r1, r3
 800f162:	9105      	str	r1, [sp, #20]
 800f164:	4633      	mov	r3, r6
 800f166:	eb00 0c06 	add.w	ip, r0, r6
 800f16a:	210a      	movs	r1, #10
 800f16c:	4563      	cmp	r3, ip
 800f16e:	d113      	bne.n	800f198 <_strtod_l+0x250>
 800f170:	1833      	adds	r3, r6, r0
 800f172:	2b08      	cmp	r3, #8
 800f174:	f106 0601 	add.w	r6, r6, #1
 800f178:	4406      	add	r6, r0
 800f17a:	dc1a      	bgt.n	800f1b2 <_strtod_l+0x26a>
 800f17c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f17e:	230a      	movs	r3, #10
 800f180:	fb03 2301 	mla	r3, r3, r1, r2
 800f184:	9309      	str	r3, [sp, #36]	; 0x24
 800f186:	2300      	movs	r3, #0
 800f188:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f18a:	1c51      	adds	r1, r2, #1
 800f18c:	9115      	str	r1, [sp, #84]	; 0x54
 800f18e:	7852      	ldrb	r2, [r2, #1]
 800f190:	4618      	mov	r0, r3
 800f192:	e7c9      	b.n	800f128 <_strtod_l+0x1e0>
 800f194:	4658      	mov	r0, fp
 800f196:	e7d2      	b.n	800f13e <_strtod_l+0x1f6>
 800f198:	2b08      	cmp	r3, #8
 800f19a:	f103 0301 	add.w	r3, r3, #1
 800f19e:	dc03      	bgt.n	800f1a8 <_strtod_l+0x260>
 800f1a0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f1a2:	434f      	muls	r7, r1
 800f1a4:	9709      	str	r7, [sp, #36]	; 0x24
 800f1a6:	e7e1      	b.n	800f16c <_strtod_l+0x224>
 800f1a8:	2b10      	cmp	r3, #16
 800f1aa:	bfd8      	it	le
 800f1ac:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f1b0:	e7dc      	b.n	800f16c <_strtod_l+0x224>
 800f1b2:	2e10      	cmp	r6, #16
 800f1b4:	bfdc      	itt	le
 800f1b6:	230a      	movle	r3, #10
 800f1b8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f1bc:	e7e3      	b.n	800f186 <_strtod_l+0x23e>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9305      	str	r3, [sp, #20]
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e780      	b.n	800f0c8 <_strtod_l+0x180>
 800f1c6:	f04f 0c00 	mov.w	ip, #0
 800f1ca:	1caa      	adds	r2, r5, #2
 800f1cc:	9215      	str	r2, [sp, #84]	; 0x54
 800f1ce:	78aa      	ldrb	r2, [r5, #2]
 800f1d0:	e788      	b.n	800f0e4 <_strtod_l+0x19c>
 800f1d2:	f04f 0c01 	mov.w	ip, #1
 800f1d6:	e7f8      	b.n	800f1ca <_strtod_l+0x282>
 800f1d8:	08011b4c 	.word	0x08011b4c
 800f1dc:	08011978 	.word	0x08011978
 800f1e0:	7ff00000 	.word	0x7ff00000
 800f1e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f1e6:	1c51      	adds	r1, r2, #1
 800f1e8:	9115      	str	r1, [sp, #84]	; 0x54
 800f1ea:	7852      	ldrb	r2, [r2, #1]
 800f1ec:	2a30      	cmp	r2, #48	; 0x30
 800f1ee:	d0f9      	beq.n	800f1e4 <_strtod_l+0x29c>
 800f1f0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f1f4:	2908      	cmp	r1, #8
 800f1f6:	f63f af7a 	bhi.w	800f0ee <_strtod_l+0x1a6>
 800f1fa:	3a30      	subs	r2, #48	; 0x30
 800f1fc:	9208      	str	r2, [sp, #32]
 800f1fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f200:	920c      	str	r2, [sp, #48]	; 0x30
 800f202:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f204:	1c57      	adds	r7, r2, #1
 800f206:	9715      	str	r7, [sp, #84]	; 0x54
 800f208:	7852      	ldrb	r2, [r2, #1]
 800f20a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f20e:	f1be 0f09 	cmp.w	lr, #9
 800f212:	d938      	bls.n	800f286 <_strtod_l+0x33e>
 800f214:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f216:	1a7f      	subs	r7, r7, r1
 800f218:	2f08      	cmp	r7, #8
 800f21a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f21e:	dc03      	bgt.n	800f228 <_strtod_l+0x2e0>
 800f220:	9908      	ldr	r1, [sp, #32]
 800f222:	428f      	cmp	r7, r1
 800f224:	bfa8      	it	ge
 800f226:	460f      	movge	r7, r1
 800f228:	f1bc 0f00 	cmp.w	ip, #0
 800f22c:	d000      	beq.n	800f230 <_strtod_l+0x2e8>
 800f22e:	427f      	negs	r7, r7
 800f230:	2e00      	cmp	r6, #0
 800f232:	d14f      	bne.n	800f2d4 <_strtod_l+0x38c>
 800f234:	9904      	ldr	r1, [sp, #16]
 800f236:	4301      	orrs	r1, r0
 800f238:	f47f aec1 	bne.w	800efbe <_strtod_l+0x76>
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f47f aedb 	bne.w	800eff8 <_strtod_l+0xb0>
 800f242:	2a69      	cmp	r2, #105	; 0x69
 800f244:	d029      	beq.n	800f29a <_strtod_l+0x352>
 800f246:	dc26      	bgt.n	800f296 <_strtod_l+0x34e>
 800f248:	2a49      	cmp	r2, #73	; 0x49
 800f24a:	d026      	beq.n	800f29a <_strtod_l+0x352>
 800f24c:	2a4e      	cmp	r2, #78	; 0x4e
 800f24e:	f47f aed3 	bne.w	800eff8 <_strtod_l+0xb0>
 800f252:	499b      	ldr	r1, [pc, #620]	; (800f4c0 <_strtod_l+0x578>)
 800f254:	a815      	add	r0, sp, #84	; 0x54
 800f256:	f001 fb41 	bl	80108dc <__match>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	f43f aecc 	beq.w	800eff8 <_strtod_l+0xb0>
 800f260:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b28      	cmp	r3, #40	; 0x28
 800f266:	d12f      	bne.n	800f2c8 <_strtod_l+0x380>
 800f268:	4996      	ldr	r1, [pc, #600]	; (800f4c4 <_strtod_l+0x57c>)
 800f26a:	aa18      	add	r2, sp, #96	; 0x60
 800f26c:	a815      	add	r0, sp, #84	; 0x54
 800f26e:	f001 fb49 	bl	8010904 <__hexnan>
 800f272:	2805      	cmp	r0, #5
 800f274:	d128      	bne.n	800f2c8 <_strtod_l+0x380>
 800f276:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f27c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f280:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f284:	e69b      	b.n	800efbe <_strtod_l+0x76>
 800f286:	9f08      	ldr	r7, [sp, #32]
 800f288:	210a      	movs	r1, #10
 800f28a:	fb01 2107 	mla	r1, r1, r7, r2
 800f28e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f292:	9208      	str	r2, [sp, #32]
 800f294:	e7b5      	b.n	800f202 <_strtod_l+0x2ba>
 800f296:	2a6e      	cmp	r2, #110	; 0x6e
 800f298:	e7d9      	b.n	800f24e <_strtod_l+0x306>
 800f29a:	498b      	ldr	r1, [pc, #556]	; (800f4c8 <_strtod_l+0x580>)
 800f29c:	a815      	add	r0, sp, #84	; 0x54
 800f29e:	f001 fb1d 	bl	80108dc <__match>
 800f2a2:	2800      	cmp	r0, #0
 800f2a4:	f43f aea8 	beq.w	800eff8 <_strtod_l+0xb0>
 800f2a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2aa:	4988      	ldr	r1, [pc, #544]	; (800f4cc <_strtod_l+0x584>)
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	a815      	add	r0, sp, #84	; 0x54
 800f2b0:	9315      	str	r3, [sp, #84]	; 0x54
 800f2b2:	f001 fb13 	bl	80108dc <__match>
 800f2b6:	b910      	cbnz	r0, 800f2be <_strtod_l+0x376>
 800f2b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	9315      	str	r3, [sp, #84]	; 0x54
 800f2be:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f4dc <_strtod_l+0x594>
 800f2c2:	f04f 0800 	mov.w	r8, #0
 800f2c6:	e67a      	b.n	800efbe <_strtod_l+0x76>
 800f2c8:	4881      	ldr	r0, [pc, #516]	; (800f4d0 <_strtod_l+0x588>)
 800f2ca:	f001 f805 	bl	80102d8 <nan>
 800f2ce:	ec59 8b10 	vmov	r8, r9, d0
 800f2d2:	e674      	b.n	800efbe <_strtod_l+0x76>
 800f2d4:	9b05      	ldr	r3, [sp, #20]
 800f2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2d8:	1afb      	subs	r3, r7, r3
 800f2da:	f1bb 0f00 	cmp.w	fp, #0
 800f2de:	bf08      	it	eq
 800f2e0:	46b3      	moveq	fp, r6
 800f2e2:	2e10      	cmp	r6, #16
 800f2e4:	9308      	str	r3, [sp, #32]
 800f2e6:	4635      	mov	r5, r6
 800f2e8:	bfa8      	it	ge
 800f2ea:	2510      	movge	r5, #16
 800f2ec:	f7f1 f91a 	bl	8000524 <__aeabi_ui2d>
 800f2f0:	2e09      	cmp	r6, #9
 800f2f2:	4680      	mov	r8, r0
 800f2f4:	4689      	mov	r9, r1
 800f2f6:	dd13      	ble.n	800f320 <_strtod_l+0x3d8>
 800f2f8:	4b76      	ldr	r3, [pc, #472]	; (800f4d4 <_strtod_l+0x58c>)
 800f2fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f2fe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f302:	f7f1 f989 	bl	8000618 <__aeabi_dmul>
 800f306:	4680      	mov	r8, r0
 800f308:	4650      	mov	r0, sl
 800f30a:	4689      	mov	r9, r1
 800f30c:	f7f1 f90a 	bl	8000524 <__aeabi_ui2d>
 800f310:	4602      	mov	r2, r0
 800f312:	460b      	mov	r3, r1
 800f314:	4640      	mov	r0, r8
 800f316:	4649      	mov	r1, r9
 800f318:	f7f0 ffc8 	bl	80002ac <__adddf3>
 800f31c:	4680      	mov	r8, r0
 800f31e:	4689      	mov	r9, r1
 800f320:	2e0f      	cmp	r6, #15
 800f322:	dc38      	bgt.n	800f396 <_strtod_l+0x44e>
 800f324:	9b08      	ldr	r3, [sp, #32]
 800f326:	2b00      	cmp	r3, #0
 800f328:	f43f ae49 	beq.w	800efbe <_strtod_l+0x76>
 800f32c:	dd24      	ble.n	800f378 <_strtod_l+0x430>
 800f32e:	2b16      	cmp	r3, #22
 800f330:	dc0b      	bgt.n	800f34a <_strtod_l+0x402>
 800f332:	4968      	ldr	r1, [pc, #416]	; (800f4d4 <_strtod_l+0x58c>)
 800f334:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f338:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f33c:	4642      	mov	r2, r8
 800f33e:	464b      	mov	r3, r9
 800f340:	f7f1 f96a 	bl	8000618 <__aeabi_dmul>
 800f344:	4680      	mov	r8, r0
 800f346:	4689      	mov	r9, r1
 800f348:	e639      	b.n	800efbe <_strtod_l+0x76>
 800f34a:	9a08      	ldr	r2, [sp, #32]
 800f34c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f350:	4293      	cmp	r3, r2
 800f352:	db20      	blt.n	800f396 <_strtod_l+0x44e>
 800f354:	4c5f      	ldr	r4, [pc, #380]	; (800f4d4 <_strtod_l+0x58c>)
 800f356:	f1c6 060f 	rsb	r6, r6, #15
 800f35a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f35e:	4642      	mov	r2, r8
 800f360:	464b      	mov	r3, r9
 800f362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f366:	f7f1 f957 	bl	8000618 <__aeabi_dmul>
 800f36a:	9b08      	ldr	r3, [sp, #32]
 800f36c:	1b9e      	subs	r6, r3, r6
 800f36e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f372:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f376:	e7e3      	b.n	800f340 <_strtod_l+0x3f8>
 800f378:	9b08      	ldr	r3, [sp, #32]
 800f37a:	3316      	adds	r3, #22
 800f37c:	db0b      	blt.n	800f396 <_strtod_l+0x44e>
 800f37e:	9b05      	ldr	r3, [sp, #20]
 800f380:	1bdf      	subs	r7, r3, r7
 800f382:	4b54      	ldr	r3, [pc, #336]	; (800f4d4 <_strtod_l+0x58c>)
 800f384:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f38c:	4640      	mov	r0, r8
 800f38e:	4649      	mov	r1, r9
 800f390:	f7f1 fa6c 	bl	800086c <__aeabi_ddiv>
 800f394:	e7d6      	b.n	800f344 <_strtod_l+0x3fc>
 800f396:	9b08      	ldr	r3, [sp, #32]
 800f398:	1b75      	subs	r5, r6, r5
 800f39a:	441d      	add	r5, r3
 800f39c:	2d00      	cmp	r5, #0
 800f39e:	dd70      	ble.n	800f482 <_strtod_l+0x53a>
 800f3a0:	f015 030f 	ands.w	r3, r5, #15
 800f3a4:	d00a      	beq.n	800f3bc <_strtod_l+0x474>
 800f3a6:	494b      	ldr	r1, [pc, #300]	; (800f4d4 <_strtod_l+0x58c>)
 800f3a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3ac:	4642      	mov	r2, r8
 800f3ae:	464b      	mov	r3, r9
 800f3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b4:	f7f1 f930 	bl	8000618 <__aeabi_dmul>
 800f3b8:	4680      	mov	r8, r0
 800f3ba:	4689      	mov	r9, r1
 800f3bc:	f035 050f 	bics.w	r5, r5, #15
 800f3c0:	d04d      	beq.n	800f45e <_strtod_l+0x516>
 800f3c2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f3c6:	dd22      	ble.n	800f40e <_strtod_l+0x4c6>
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	46ab      	mov	fp, r5
 800f3cc:	9509      	str	r5, [sp, #36]	; 0x24
 800f3ce:	9505      	str	r5, [sp, #20]
 800f3d0:	2322      	movs	r3, #34	; 0x22
 800f3d2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f4dc <_strtod_l+0x594>
 800f3d6:	6023      	str	r3, [r4, #0]
 800f3d8:	f04f 0800 	mov.w	r8, #0
 800f3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f43f aded 	beq.w	800efbe <_strtod_l+0x76>
 800f3e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f7fe ffa7 	bl	800e33a <_Bfree>
 800f3ec:	9905      	ldr	r1, [sp, #20]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7fe ffa3 	bl	800e33a <_Bfree>
 800f3f4:	4659      	mov	r1, fp
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f7fe ff9f 	bl	800e33a <_Bfree>
 800f3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7fe ff9b 	bl	800e33a <_Bfree>
 800f404:	4629      	mov	r1, r5
 800f406:	4620      	mov	r0, r4
 800f408:	f7fe ff97 	bl	800e33a <_Bfree>
 800f40c:	e5d7      	b.n	800efbe <_strtod_l+0x76>
 800f40e:	4b32      	ldr	r3, [pc, #200]	; (800f4d8 <_strtod_l+0x590>)
 800f410:	9304      	str	r3, [sp, #16]
 800f412:	2300      	movs	r3, #0
 800f414:	112d      	asrs	r5, r5, #4
 800f416:	4640      	mov	r0, r8
 800f418:	4649      	mov	r1, r9
 800f41a:	469a      	mov	sl, r3
 800f41c:	2d01      	cmp	r5, #1
 800f41e:	dc21      	bgt.n	800f464 <_strtod_l+0x51c>
 800f420:	b10b      	cbz	r3, 800f426 <_strtod_l+0x4de>
 800f422:	4680      	mov	r8, r0
 800f424:	4689      	mov	r9, r1
 800f426:	492c      	ldr	r1, [pc, #176]	; (800f4d8 <_strtod_l+0x590>)
 800f428:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f42c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f430:	4642      	mov	r2, r8
 800f432:	464b      	mov	r3, r9
 800f434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f438:	f7f1 f8ee 	bl	8000618 <__aeabi_dmul>
 800f43c:	4b27      	ldr	r3, [pc, #156]	; (800f4dc <_strtod_l+0x594>)
 800f43e:	460a      	mov	r2, r1
 800f440:	400b      	ands	r3, r1
 800f442:	4927      	ldr	r1, [pc, #156]	; (800f4e0 <_strtod_l+0x598>)
 800f444:	428b      	cmp	r3, r1
 800f446:	4680      	mov	r8, r0
 800f448:	d8be      	bhi.n	800f3c8 <_strtod_l+0x480>
 800f44a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f44e:	428b      	cmp	r3, r1
 800f450:	bf86      	itte	hi
 800f452:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f4e4 <_strtod_l+0x59c>
 800f456:	f04f 38ff 	movhi.w	r8, #4294967295
 800f45a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f45e:	2300      	movs	r3, #0
 800f460:	9304      	str	r3, [sp, #16]
 800f462:	e07b      	b.n	800f55c <_strtod_l+0x614>
 800f464:	07ea      	lsls	r2, r5, #31
 800f466:	d505      	bpl.n	800f474 <_strtod_l+0x52c>
 800f468:	9b04      	ldr	r3, [sp, #16]
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	f7f1 f8d3 	bl	8000618 <__aeabi_dmul>
 800f472:	2301      	movs	r3, #1
 800f474:	9a04      	ldr	r2, [sp, #16]
 800f476:	3208      	adds	r2, #8
 800f478:	f10a 0a01 	add.w	sl, sl, #1
 800f47c:	106d      	asrs	r5, r5, #1
 800f47e:	9204      	str	r2, [sp, #16]
 800f480:	e7cc      	b.n	800f41c <_strtod_l+0x4d4>
 800f482:	d0ec      	beq.n	800f45e <_strtod_l+0x516>
 800f484:	426d      	negs	r5, r5
 800f486:	f015 020f 	ands.w	r2, r5, #15
 800f48a:	d00a      	beq.n	800f4a2 <_strtod_l+0x55a>
 800f48c:	4b11      	ldr	r3, [pc, #68]	; (800f4d4 <_strtod_l+0x58c>)
 800f48e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f492:	4640      	mov	r0, r8
 800f494:	4649      	mov	r1, r9
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	f7f1 f9e7 	bl	800086c <__aeabi_ddiv>
 800f49e:	4680      	mov	r8, r0
 800f4a0:	4689      	mov	r9, r1
 800f4a2:	112d      	asrs	r5, r5, #4
 800f4a4:	d0db      	beq.n	800f45e <_strtod_l+0x516>
 800f4a6:	2d1f      	cmp	r5, #31
 800f4a8:	dd1e      	ble.n	800f4e8 <_strtod_l+0x5a0>
 800f4aa:	2500      	movs	r5, #0
 800f4ac:	46ab      	mov	fp, r5
 800f4ae:	9509      	str	r5, [sp, #36]	; 0x24
 800f4b0:	9505      	str	r5, [sp, #20]
 800f4b2:	2322      	movs	r3, #34	; 0x22
 800f4b4:	f04f 0800 	mov.w	r8, #0
 800f4b8:	f04f 0900 	mov.w	r9, #0
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	e78d      	b.n	800f3dc <_strtod_l+0x494>
 800f4c0:	080118c1 	.word	0x080118c1
 800f4c4:	08011b60 	.word	0x08011b60
 800f4c8:	080118b9 	.word	0x080118b9
 800f4cc:	0801197d 	.word	0x0801197d
 800f4d0:	08011cdc 	.word	0x08011cdc
 800f4d4:	08011a78 	.word	0x08011a78
 800f4d8:	08011a50 	.word	0x08011a50
 800f4dc:	7ff00000 	.word	0x7ff00000
 800f4e0:	7ca00000 	.word	0x7ca00000
 800f4e4:	7fefffff 	.word	0x7fefffff
 800f4e8:	f015 0310 	ands.w	r3, r5, #16
 800f4ec:	bf18      	it	ne
 800f4ee:	236a      	movne	r3, #106	; 0x6a
 800f4f0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800f894 <_strtod_l+0x94c>
 800f4f4:	9304      	str	r3, [sp, #16]
 800f4f6:	4640      	mov	r0, r8
 800f4f8:	4649      	mov	r1, r9
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	07ea      	lsls	r2, r5, #31
 800f4fe:	d504      	bpl.n	800f50a <_strtod_l+0x5c2>
 800f500:	e9da 2300 	ldrd	r2, r3, [sl]
 800f504:	f7f1 f888 	bl	8000618 <__aeabi_dmul>
 800f508:	2301      	movs	r3, #1
 800f50a:	106d      	asrs	r5, r5, #1
 800f50c:	f10a 0a08 	add.w	sl, sl, #8
 800f510:	d1f4      	bne.n	800f4fc <_strtod_l+0x5b4>
 800f512:	b10b      	cbz	r3, 800f518 <_strtod_l+0x5d0>
 800f514:	4680      	mov	r8, r0
 800f516:	4689      	mov	r9, r1
 800f518:	9b04      	ldr	r3, [sp, #16]
 800f51a:	b1bb      	cbz	r3, 800f54c <_strtod_l+0x604>
 800f51c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f520:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f524:	2b00      	cmp	r3, #0
 800f526:	4649      	mov	r1, r9
 800f528:	dd10      	ble.n	800f54c <_strtod_l+0x604>
 800f52a:	2b1f      	cmp	r3, #31
 800f52c:	f340 811e 	ble.w	800f76c <_strtod_l+0x824>
 800f530:	2b34      	cmp	r3, #52	; 0x34
 800f532:	bfde      	ittt	le
 800f534:	f04f 33ff 	movle.w	r3, #4294967295
 800f538:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f53c:	4093      	lslle	r3, r2
 800f53e:	f04f 0800 	mov.w	r8, #0
 800f542:	bfcc      	ite	gt
 800f544:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f548:	ea03 0901 	andle.w	r9, r3, r1
 800f54c:	2200      	movs	r2, #0
 800f54e:	2300      	movs	r3, #0
 800f550:	4640      	mov	r0, r8
 800f552:	4649      	mov	r1, r9
 800f554:	f7f1 fac8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d1a6      	bne.n	800f4aa <_strtod_l+0x562>
 800f55c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f55e:	9300      	str	r3, [sp, #0]
 800f560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f562:	4633      	mov	r3, r6
 800f564:	465a      	mov	r2, fp
 800f566:	4620      	mov	r0, r4
 800f568:	f7fe ff36 	bl	800e3d8 <__s2b>
 800f56c:	9009      	str	r0, [sp, #36]	; 0x24
 800f56e:	2800      	cmp	r0, #0
 800f570:	f43f af2a 	beq.w	800f3c8 <_strtod_l+0x480>
 800f574:	9a08      	ldr	r2, [sp, #32]
 800f576:	9b05      	ldr	r3, [sp, #20]
 800f578:	2a00      	cmp	r2, #0
 800f57a:	eba3 0307 	sub.w	r3, r3, r7
 800f57e:	bfa8      	it	ge
 800f580:	2300      	movge	r3, #0
 800f582:	930c      	str	r3, [sp, #48]	; 0x30
 800f584:	2500      	movs	r5, #0
 800f586:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f58a:	9312      	str	r3, [sp, #72]	; 0x48
 800f58c:	46ab      	mov	fp, r5
 800f58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f590:	4620      	mov	r0, r4
 800f592:	6859      	ldr	r1, [r3, #4]
 800f594:	f7fe feac 	bl	800e2f0 <_Balloc>
 800f598:	9005      	str	r0, [sp, #20]
 800f59a:	2800      	cmp	r0, #0
 800f59c:	f43f af18 	beq.w	800f3d0 <_strtod_l+0x488>
 800f5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5a2:	691a      	ldr	r2, [r3, #16]
 800f5a4:	3202      	adds	r2, #2
 800f5a6:	f103 010c 	add.w	r1, r3, #12
 800f5aa:	0092      	lsls	r2, r2, #2
 800f5ac:	300c      	adds	r0, #12
 800f5ae:	f7fd ff93 	bl	800d4d8 <memcpy>
 800f5b2:	ec49 8b10 	vmov	d0, r8, r9
 800f5b6:	aa18      	add	r2, sp, #96	; 0x60
 800f5b8:	a917      	add	r1, sp, #92	; 0x5c
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f7ff fa26 	bl	800ea0c <__d2b>
 800f5c0:	ec49 8b18 	vmov	d8, r8, r9
 800f5c4:	9016      	str	r0, [sp, #88]	; 0x58
 800f5c6:	2800      	cmp	r0, #0
 800f5c8:	f43f af02 	beq.w	800f3d0 <_strtod_l+0x488>
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7fe ff9a 	bl	800e508 <__i2b>
 800f5d4:	4683      	mov	fp, r0
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	f43f aefa 	beq.w	800f3d0 <_strtod_l+0x488>
 800f5dc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f5de:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	bfab      	itete	ge
 800f5e4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800f5e6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800f5e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f5ea:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800f5ee:	bfac      	ite	ge
 800f5f0:	eb06 0a03 	addge.w	sl, r6, r3
 800f5f4:	1b9f      	sublt	r7, r3, r6
 800f5f6:	9b04      	ldr	r3, [sp, #16]
 800f5f8:	1af6      	subs	r6, r6, r3
 800f5fa:	4416      	add	r6, r2
 800f5fc:	4ba0      	ldr	r3, [pc, #640]	; (800f880 <_strtod_l+0x938>)
 800f5fe:	3e01      	subs	r6, #1
 800f600:	429e      	cmp	r6, r3
 800f602:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f606:	f280 80c4 	bge.w	800f792 <_strtod_l+0x84a>
 800f60a:	1b9b      	subs	r3, r3, r6
 800f60c:	2b1f      	cmp	r3, #31
 800f60e:	eba2 0203 	sub.w	r2, r2, r3
 800f612:	f04f 0101 	mov.w	r1, #1
 800f616:	f300 80b0 	bgt.w	800f77a <_strtod_l+0x832>
 800f61a:	fa01 f303 	lsl.w	r3, r1, r3
 800f61e:	930e      	str	r3, [sp, #56]	; 0x38
 800f620:	2300      	movs	r3, #0
 800f622:	930d      	str	r3, [sp, #52]	; 0x34
 800f624:	eb0a 0602 	add.w	r6, sl, r2
 800f628:	9b04      	ldr	r3, [sp, #16]
 800f62a:	45b2      	cmp	sl, r6
 800f62c:	4417      	add	r7, r2
 800f62e:	441f      	add	r7, r3
 800f630:	4653      	mov	r3, sl
 800f632:	bfa8      	it	ge
 800f634:	4633      	movge	r3, r6
 800f636:	42bb      	cmp	r3, r7
 800f638:	bfa8      	it	ge
 800f63a:	463b      	movge	r3, r7
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	bfc2      	ittt	gt
 800f640:	1af6      	subgt	r6, r6, r3
 800f642:	1aff      	subgt	r7, r7, r3
 800f644:	ebaa 0a03 	subgt.w	sl, sl, r3
 800f648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dd17      	ble.n	800f67e <_strtod_l+0x736>
 800f64e:	4659      	mov	r1, fp
 800f650:	461a      	mov	r2, r3
 800f652:	4620      	mov	r0, r4
 800f654:	f7ff f818 	bl	800e688 <__pow5mult>
 800f658:	4683      	mov	fp, r0
 800f65a:	2800      	cmp	r0, #0
 800f65c:	f43f aeb8 	beq.w	800f3d0 <_strtod_l+0x488>
 800f660:	4601      	mov	r1, r0
 800f662:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f664:	4620      	mov	r0, r4
 800f666:	f7fe ff65 	bl	800e534 <__multiply>
 800f66a:	900b      	str	r0, [sp, #44]	; 0x2c
 800f66c:	2800      	cmp	r0, #0
 800f66e:	f43f aeaf 	beq.w	800f3d0 <_strtod_l+0x488>
 800f672:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f674:	4620      	mov	r0, r4
 800f676:	f7fe fe60 	bl	800e33a <_Bfree>
 800f67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f67c:	9316      	str	r3, [sp, #88]	; 0x58
 800f67e:	2e00      	cmp	r6, #0
 800f680:	f300 808c 	bgt.w	800f79c <_strtod_l+0x854>
 800f684:	9b08      	ldr	r3, [sp, #32]
 800f686:	2b00      	cmp	r3, #0
 800f688:	dd08      	ble.n	800f69c <_strtod_l+0x754>
 800f68a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f68c:	9905      	ldr	r1, [sp, #20]
 800f68e:	4620      	mov	r0, r4
 800f690:	f7fe fffa 	bl	800e688 <__pow5mult>
 800f694:	9005      	str	r0, [sp, #20]
 800f696:	2800      	cmp	r0, #0
 800f698:	f43f ae9a 	beq.w	800f3d0 <_strtod_l+0x488>
 800f69c:	2f00      	cmp	r7, #0
 800f69e:	dd08      	ble.n	800f6b2 <_strtod_l+0x76a>
 800f6a0:	9905      	ldr	r1, [sp, #20]
 800f6a2:	463a      	mov	r2, r7
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	f7ff f82f 	bl	800e708 <__lshift>
 800f6aa:	9005      	str	r0, [sp, #20]
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f43f ae8f 	beq.w	800f3d0 <_strtod_l+0x488>
 800f6b2:	f1ba 0f00 	cmp.w	sl, #0
 800f6b6:	dd08      	ble.n	800f6ca <_strtod_l+0x782>
 800f6b8:	4659      	mov	r1, fp
 800f6ba:	4652      	mov	r2, sl
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f7ff f823 	bl	800e708 <__lshift>
 800f6c2:	4683      	mov	fp, r0
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	f43f ae83 	beq.w	800f3d0 <_strtod_l+0x488>
 800f6ca:	9a05      	ldr	r2, [sp, #20]
 800f6cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f7ff f8a2 	bl	800e818 <__mdiff>
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	f43f ae7a 	beq.w	800f3d0 <_strtod_l+0x488>
 800f6dc:	68c3      	ldr	r3, [r0, #12]
 800f6de:	930b      	str	r3, [sp, #44]	; 0x2c
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60c3      	str	r3, [r0, #12]
 800f6e4:	4659      	mov	r1, fp
 800f6e6:	f7ff f87b 	bl	800e7e0 <__mcmp>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	da60      	bge.n	800f7b0 <_strtod_l+0x868>
 800f6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f0:	ea53 0308 	orrs.w	r3, r3, r8
 800f6f4:	f040 8084 	bne.w	800f800 <_strtod_l+0x8b8>
 800f6f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d17f      	bne.n	800f800 <_strtod_l+0x8b8>
 800f700:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f704:	0d1b      	lsrs	r3, r3, #20
 800f706:	051b      	lsls	r3, r3, #20
 800f708:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f70c:	d978      	bls.n	800f800 <_strtod_l+0x8b8>
 800f70e:	696b      	ldr	r3, [r5, #20]
 800f710:	b913      	cbnz	r3, 800f718 <_strtod_l+0x7d0>
 800f712:	692b      	ldr	r3, [r5, #16]
 800f714:	2b01      	cmp	r3, #1
 800f716:	dd73      	ble.n	800f800 <_strtod_l+0x8b8>
 800f718:	4629      	mov	r1, r5
 800f71a:	2201      	movs	r2, #1
 800f71c:	4620      	mov	r0, r4
 800f71e:	f7fe fff3 	bl	800e708 <__lshift>
 800f722:	4659      	mov	r1, fp
 800f724:	4605      	mov	r5, r0
 800f726:	f7ff f85b 	bl	800e7e0 <__mcmp>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	dd68      	ble.n	800f800 <_strtod_l+0x8b8>
 800f72e:	9904      	ldr	r1, [sp, #16]
 800f730:	4a54      	ldr	r2, [pc, #336]	; (800f884 <_strtod_l+0x93c>)
 800f732:	464b      	mov	r3, r9
 800f734:	2900      	cmp	r1, #0
 800f736:	f000 8084 	beq.w	800f842 <_strtod_l+0x8fa>
 800f73a:	ea02 0109 	and.w	r1, r2, r9
 800f73e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f742:	dc7e      	bgt.n	800f842 <_strtod_l+0x8fa>
 800f744:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f748:	f77f aeb3 	ble.w	800f4b2 <_strtod_l+0x56a>
 800f74c:	4b4e      	ldr	r3, [pc, #312]	; (800f888 <_strtod_l+0x940>)
 800f74e:	4640      	mov	r0, r8
 800f750:	4649      	mov	r1, r9
 800f752:	2200      	movs	r2, #0
 800f754:	f7f0 ff60 	bl	8000618 <__aeabi_dmul>
 800f758:	4b4a      	ldr	r3, [pc, #296]	; (800f884 <_strtod_l+0x93c>)
 800f75a:	400b      	ands	r3, r1
 800f75c:	4680      	mov	r8, r0
 800f75e:	4689      	mov	r9, r1
 800f760:	2b00      	cmp	r3, #0
 800f762:	f47f ae3f 	bne.w	800f3e4 <_strtod_l+0x49c>
 800f766:	2322      	movs	r3, #34	; 0x22
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	e63b      	b.n	800f3e4 <_strtod_l+0x49c>
 800f76c:	f04f 32ff 	mov.w	r2, #4294967295
 800f770:	fa02 f303 	lsl.w	r3, r2, r3
 800f774:	ea03 0808 	and.w	r8, r3, r8
 800f778:	e6e8      	b.n	800f54c <_strtod_l+0x604>
 800f77a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f77e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f782:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f786:	36e2      	adds	r6, #226	; 0xe2
 800f788:	fa01 f306 	lsl.w	r3, r1, r6
 800f78c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f790:	e748      	b.n	800f624 <_strtod_l+0x6dc>
 800f792:	2100      	movs	r1, #0
 800f794:	2301      	movs	r3, #1
 800f796:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800f79a:	e743      	b.n	800f624 <_strtod_l+0x6dc>
 800f79c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f79e:	4632      	mov	r2, r6
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f7fe ffb1 	bl	800e708 <__lshift>
 800f7a6:	9016      	str	r0, [sp, #88]	; 0x58
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	f47f af6b 	bne.w	800f684 <_strtod_l+0x73c>
 800f7ae:	e60f      	b.n	800f3d0 <_strtod_l+0x488>
 800f7b0:	46ca      	mov	sl, r9
 800f7b2:	d171      	bne.n	800f898 <_strtod_l+0x950>
 800f7b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f7b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f7ba:	b352      	cbz	r2, 800f812 <_strtod_l+0x8ca>
 800f7bc:	4a33      	ldr	r2, [pc, #204]	; (800f88c <_strtod_l+0x944>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d12a      	bne.n	800f818 <_strtod_l+0x8d0>
 800f7c2:	9b04      	ldr	r3, [sp, #16]
 800f7c4:	4641      	mov	r1, r8
 800f7c6:	b1fb      	cbz	r3, 800f808 <_strtod_l+0x8c0>
 800f7c8:	4b2e      	ldr	r3, [pc, #184]	; (800f884 <_strtod_l+0x93c>)
 800f7ca:	ea09 0303 	and.w	r3, r9, r3
 800f7ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d6:	d81a      	bhi.n	800f80e <_strtod_l+0x8c6>
 800f7d8:	0d1b      	lsrs	r3, r3, #20
 800f7da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7de:	fa02 f303 	lsl.w	r3, r2, r3
 800f7e2:	4299      	cmp	r1, r3
 800f7e4:	d118      	bne.n	800f818 <_strtod_l+0x8d0>
 800f7e6:	4b2a      	ldr	r3, [pc, #168]	; (800f890 <_strtod_l+0x948>)
 800f7e8:	459a      	cmp	sl, r3
 800f7ea:	d102      	bne.n	800f7f2 <_strtod_l+0x8aa>
 800f7ec:	3101      	adds	r1, #1
 800f7ee:	f43f adef 	beq.w	800f3d0 <_strtod_l+0x488>
 800f7f2:	4b24      	ldr	r3, [pc, #144]	; (800f884 <_strtod_l+0x93c>)
 800f7f4:	ea0a 0303 	and.w	r3, sl, r3
 800f7f8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800f7fc:	f04f 0800 	mov.w	r8, #0
 800f800:	9b04      	ldr	r3, [sp, #16]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d1a2      	bne.n	800f74c <_strtod_l+0x804>
 800f806:	e5ed      	b.n	800f3e4 <_strtod_l+0x49c>
 800f808:	f04f 33ff 	mov.w	r3, #4294967295
 800f80c:	e7e9      	b.n	800f7e2 <_strtod_l+0x89a>
 800f80e:	4613      	mov	r3, r2
 800f810:	e7e7      	b.n	800f7e2 <_strtod_l+0x89a>
 800f812:	ea53 0308 	orrs.w	r3, r3, r8
 800f816:	d08a      	beq.n	800f72e <_strtod_l+0x7e6>
 800f818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f81a:	b1e3      	cbz	r3, 800f856 <_strtod_l+0x90e>
 800f81c:	ea13 0f0a 	tst.w	r3, sl
 800f820:	d0ee      	beq.n	800f800 <_strtod_l+0x8b8>
 800f822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f824:	9a04      	ldr	r2, [sp, #16]
 800f826:	4640      	mov	r0, r8
 800f828:	4649      	mov	r1, r9
 800f82a:	b1c3      	cbz	r3, 800f85e <_strtod_l+0x916>
 800f82c:	f7ff fb70 	bl	800ef10 <sulp>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	ec51 0b18 	vmov	r0, r1, d8
 800f838:	f7f0 fd38 	bl	80002ac <__adddf3>
 800f83c:	4680      	mov	r8, r0
 800f83e:	4689      	mov	r9, r1
 800f840:	e7de      	b.n	800f800 <_strtod_l+0x8b8>
 800f842:	4013      	ands	r3, r2
 800f844:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f848:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800f84c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800f850:	f04f 38ff 	mov.w	r8, #4294967295
 800f854:	e7d4      	b.n	800f800 <_strtod_l+0x8b8>
 800f856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f858:	ea13 0f08 	tst.w	r3, r8
 800f85c:	e7e0      	b.n	800f820 <_strtod_l+0x8d8>
 800f85e:	f7ff fb57 	bl	800ef10 <sulp>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	ec51 0b18 	vmov	r0, r1, d8
 800f86a:	f7f0 fd1d 	bl	80002a8 <__aeabi_dsub>
 800f86e:	2200      	movs	r2, #0
 800f870:	2300      	movs	r3, #0
 800f872:	4680      	mov	r8, r0
 800f874:	4689      	mov	r9, r1
 800f876:	f7f1 f937 	bl	8000ae8 <__aeabi_dcmpeq>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d0c0      	beq.n	800f800 <_strtod_l+0x8b8>
 800f87e:	e618      	b.n	800f4b2 <_strtod_l+0x56a>
 800f880:	fffffc02 	.word	0xfffffc02
 800f884:	7ff00000 	.word	0x7ff00000
 800f888:	39500000 	.word	0x39500000
 800f88c:	000fffff 	.word	0x000fffff
 800f890:	7fefffff 	.word	0x7fefffff
 800f894:	08011b78 	.word	0x08011b78
 800f898:	4659      	mov	r1, fp
 800f89a:	4628      	mov	r0, r5
 800f89c:	f7ff f910 	bl	800eac0 <__ratio>
 800f8a0:	ec57 6b10 	vmov	r6, r7, d0
 800f8a4:	ee10 0a10 	vmov	r0, s0
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8ae:	4639      	mov	r1, r7
 800f8b0:	f7f1 f92e 	bl	8000b10 <__aeabi_dcmple>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d071      	beq.n	800f99c <_strtod_l+0xa54>
 800f8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d17c      	bne.n	800f9b8 <_strtod_l+0xa70>
 800f8be:	f1b8 0f00 	cmp.w	r8, #0
 800f8c2:	d15a      	bne.n	800f97a <_strtod_l+0xa32>
 800f8c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d15d      	bne.n	800f988 <_strtod_l+0xa40>
 800f8cc:	4b90      	ldr	r3, [pc, #576]	; (800fb10 <_strtod_l+0xbc8>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	f7f1 f912 	bl	8000afc <__aeabi_dcmplt>
 800f8d8:	2800      	cmp	r0, #0
 800f8da:	d15c      	bne.n	800f996 <_strtod_l+0xa4e>
 800f8dc:	4630      	mov	r0, r6
 800f8de:	4639      	mov	r1, r7
 800f8e0:	4b8c      	ldr	r3, [pc, #560]	; (800fb14 <_strtod_l+0xbcc>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f7f0 fe98 	bl	8000618 <__aeabi_dmul>
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	460f      	mov	r7, r1
 800f8ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f8f0:	9606      	str	r6, [sp, #24]
 800f8f2:	9307      	str	r3, [sp, #28]
 800f8f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800f8fc:	4b86      	ldr	r3, [pc, #536]	; (800fb18 <_strtod_l+0xbd0>)
 800f8fe:	ea0a 0303 	and.w	r3, sl, r3
 800f902:	930d      	str	r3, [sp, #52]	; 0x34
 800f904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f906:	4b85      	ldr	r3, [pc, #532]	; (800fb1c <_strtod_l+0xbd4>)
 800f908:	429a      	cmp	r2, r3
 800f90a:	f040 8090 	bne.w	800fa2e <_strtod_l+0xae6>
 800f90e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800f912:	ec49 8b10 	vmov	d0, r8, r9
 800f916:	f7ff f809 	bl	800e92c <__ulp>
 800f91a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f91e:	ec51 0b10 	vmov	r0, r1, d0
 800f922:	f7f0 fe79 	bl	8000618 <__aeabi_dmul>
 800f926:	4642      	mov	r2, r8
 800f928:	464b      	mov	r3, r9
 800f92a:	f7f0 fcbf 	bl	80002ac <__adddf3>
 800f92e:	460b      	mov	r3, r1
 800f930:	4979      	ldr	r1, [pc, #484]	; (800fb18 <_strtod_l+0xbd0>)
 800f932:	4a7b      	ldr	r2, [pc, #492]	; (800fb20 <_strtod_l+0xbd8>)
 800f934:	4019      	ands	r1, r3
 800f936:	4291      	cmp	r1, r2
 800f938:	4680      	mov	r8, r0
 800f93a:	d944      	bls.n	800f9c6 <_strtod_l+0xa7e>
 800f93c:	ee18 2a90 	vmov	r2, s17
 800f940:	4b78      	ldr	r3, [pc, #480]	; (800fb24 <_strtod_l+0xbdc>)
 800f942:	429a      	cmp	r2, r3
 800f944:	d104      	bne.n	800f950 <_strtod_l+0xa08>
 800f946:	ee18 3a10 	vmov	r3, s16
 800f94a:	3301      	adds	r3, #1
 800f94c:	f43f ad40 	beq.w	800f3d0 <_strtod_l+0x488>
 800f950:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800fb24 <_strtod_l+0xbdc>
 800f954:	f04f 38ff 	mov.w	r8, #4294967295
 800f958:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f95a:	4620      	mov	r0, r4
 800f95c:	f7fe fced 	bl	800e33a <_Bfree>
 800f960:	9905      	ldr	r1, [sp, #20]
 800f962:	4620      	mov	r0, r4
 800f964:	f7fe fce9 	bl	800e33a <_Bfree>
 800f968:	4659      	mov	r1, fp
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7fe fce5 	bl	800e33a <_Bfree>
 800f970:	4629      	mov	r1, r5
 800f972:	4620      	mov	r0, r4
 800f974:	f7fe fce1 	bl	800e33a <_Bfree>
 800f978:	e609      	b.n	800f58e <_strtod_l+0x646>
 800f97a:	f1b8 0f01 	cmp.w	r8, #1
 800f97e:	d103      	bne.n	800f988 <_strtod_l+0xa40>
 800f980:	f1b9 0f00 	cmp.w	r9, #0
 800f984:	f43f ad95 	beq.w	800f4b2 <_strtod_l+0x56a>
 800f988:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800fae0 <_strtod_l+0xb98>
 800f98c:	4f60      	ldr	r7, [pc, #384]	; (800fb10 <_strtod_l+0xbc8>)
 800f98e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f992:	2600      	movs	r6, #0
 800f994:	e7ae      	b.n	800f8f4 <_strtod_l+0x9ac>
 800f996:	4f5f      	ldr	r7, [pc, #380]	; (800fb14 <_strtod_l+0xbcc>)
 800f998:	2600      	movs	r6, #0
 800f99a:	e7a7      	b.n	800f8ec <_strtod_l+0x9a4>
 800f99c:	4b5d      	ldr	r3, [pc, #372]	; (800fb14 <_strtod_l+0xbcc>)
 800f99e:	4630      	mov	r0, r6
 800f9a0:	4639      	mov	r1, r7
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f7f0 fe38 	bl	8000618 <__aeabi_dmul>
 800f9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	460f      	mov	r7, r1
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d09c      	beq.n	800f8ec <_strtod_l+0x9a4>
 800f9b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f9b6:	e79d      	b.n	800f8f4 <_strtod_l+0x9ac>
 800f9b8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800fae8 <_strtod_l+0xba0>
 800f9bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9c0:	ec57 6b17 	vmov	r6, r7, d7
 800f9c4:	e796      	b.n	800f8f4 <_strtod_l+0x9ac>
 800f9c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800f9ca:	9b04      	ldr	r3, [sp, #16]
 800f9cc:	46ca      	mov	sl, r9
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1c2      	bne.n	800f958 <_strtod_l+0xa10>
 800f9d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9d8:	0d1b      	lsrs	r3, r3, #20
 800f9da:	051b      	lsls	r3, r3, #20
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d1bb      	bne.n	800f958 <_strtod_l+0xa10>
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	4639      	mov	r1, r7
 800f9e4:	f7f1 f978 	bl	8000cd8 <__aeabi_d2lz>
 800f9e8:	f7f0 fde8 	bl	80005bc <__aeabi_l2d>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	f7f0 fc58 	bl	80002a8 <__aeabi_dsub>
 800f9f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f9fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9fe:	ea43 0308 	orr.w	r3, r3, r8
 800fa02:	4313      	orrs	r3, r2
 800fa04:	4606      	mov	r6, r0
 800fa06:	460f      	mov	r7, r1
 800fa08:	d054      	beq.n	800fab4 <_strtod_l+0xb6c>
 800fa0a:	a339      	add	r3, pc, #228	; (adr r3, 800faf0 <_strtod_l+0xba8>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f1 f874 	bl	8000afc <__aeabi_dcmplt>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	f47f ace5 	bne.w	800f3e4 <_strtod_l+0x49c>
 800fa1a:	a337      	add	r3, pc, #220	; (adr r3, 800faf8 <_strtod_l+0xbb0>)
 800fa1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa20:	4630      	mov	r0, r6
 800fa22:	4639      	mov	r1, r7
 800fa24:	f7f1 f888 	bl	8000b38 <__aeabi_dcmpgt>
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d095      	beq.n	800f958 <_strtod_l+0xa10>
 800fa2c:	e4da      	b.n	800f3e4 <_strtod_l+0x49c>
 800fa2e:	9b04      	ldr	r3, [sp, #16]
 800fa30:	b333      	cbz	r3, 800fa80 <_strtod_l+0xb38>
 800fa32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa34:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fa38:	d822      	bhi.n	800fa80 <_strtod_l+0xb38>
 800fa3a:	a331      	add	r3, pc, #196	; (adr r3, 800fb00 <_strtod_l+0xbb8>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	4630      	mov	r0, r6
 800fa42:	4639      	mov	r1, r7
 800fa44:	f7f1 f864 	bl	8000b10 <__aeabi_dcmple>
 800fa48:	b1a0      	cbz	r0, 800fa74 <_strtod_l+0xb2c>
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7f1 f8bb 	bl	8000bc8 <__aeabi_d2uiz>
 800fa52:	2801      	cmp	r0, #1
 800fa54:	bf38      	it	cc
 800fa56:	2001      	movcc	r0, #1
 800fa58:	f7f0 fd64 	bl	8000524 <__aeabi_ui2d>
 800fa5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa5e:	4606      	mov	r6, r0
 800fa60:	460f      	mov	r7, r1
 800fa62:	bb23      	cbnz	r3, 800faae <_strtod_l+0xb66>
 800fa64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa68:	9010      	str	r0, [sp, #64]	; 0x40
 800fa6a:	9311      	str	r3, [sp, #68]	; 0x44
 800fa6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fa74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa78:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fa7c:	1a9b      	subs	r3, r3, r2
 800fa7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa84:	eeb0 0a48 	vmov.f32	s0, s16
 800fa88:	eef0 0a68 	vmov.f32	s1, s17
 800fa8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fa90:	f7fe ff4c 	bl	800e92c <__ulp>
 800fa94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fa98:	ec53 2b10 	vmov	r2, r3, d0
 800fa9c:	f7f0 fdbc 	bl	8000618 <__aeabi_dmul>
 800faa0:	ec53 2b18 	vmov	r2, r3, d8
 800faa4:	f7f0 fc02 	bl	80002ac <__adddf3>
 800faa8:	4680      	mov	r8, r0
 800faaa:	4689      	mov	r9, r1
 800faac:	e78d      	b.n	800f9ca <_strtod_l+0xa82>
 800faae:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fab2:	e7db      	b.n	800fa6c <_strtod_l+0xb24>
 800fab4:	a314      	add	r3, pc, #80	; (adr r3, 800fb08 <_strtod_l+0xbc0>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f1 f81f 	bl	8000afc <__aeabi_dcmplt>
 800fabe:	e7b3      	b.n	800fa28 <_strtod_l+0xae0>
 800fac0:	2300      	movs	r3, #0
 800fac2:	930a      	str	r3, [sp, #40]	; 0x28
 800fac4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fac8:	6013      	str	r3, [r2, #0]
 800faca:	f7ff ba7c 	b.w	800efc6 <_strtod_l+0x7e>
 800face:	2a65      	cmp	r2, #101	; 0x65
 800fad0:	f43f ab75 	beq.w	800f1be <_strtod_l+0x276>
 800fad4:	2a45      	cmp	r2, #69	; 0x45
 800fad6:	f43f ab72 	beq.w	800f1be <_strtod_l+0x276>
 800fada:	2301      	movs	r3, #1
 800fadc:	f7ff bbaa 	b.w	800f234 <_strtod_l+0x2ec>
 800fae0:	00000000 	.word	0x00000000
 800fae4:	bff00000 	.word	0xbff00000
 800fae8:	00000000 	.word	0x00000000
 800faec:	3ff00000 	.word	0x3ff00000
 800faf0:	94a03595 	.word	0x94a03595
 800faf4:	3fdfffff 	.word	0x3fdfffff
 800faf8:	35afe535 	.word	0x35afe535
 800fafc:	3fe00000 	.word	0x3fe00000
 800fb00:	ffc00000 	.word	0xffc00000
 800fb04:	41dfffff 	.word	0x41dfffff
 800fb08:	94a03595 	.word	0x94a03595
 800fb0c:	3fcfffff 	.word	0x3fcfffff
 800fb10:	3ff00000 	.word	0x3ff00000
 800fb14:	3fe00000 	.word	0x3fe00000
 800fb18:	7ff00000 	.word	0x7ff00000
 800fb1c:	7fe00000 	.word	0x7fe00000
 800fb20:	7c9fffff 	.word	0x7c9fffff
 800fb24:	7fefffff 	.word	0x7fefffff

0800fb28 <_strtod_r>:
 800fb28:	4b01      	ldr	r3, [pc, #4]	; (800fb30 <_strtod_r+0x8>)
 800fb2a:	f7ff ba0d 	b.w	800ef48 <_strtod_l>
 800fb2e:	bf00      	nop
 800fb30:	20000560 	.word	0x20000560

0800fb34 <_strtol_l.constprop.0>:
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb3a:	d001      	beq.n	800fb40 <_strtol_l.constprop.0+0xc>
 800fb3c:	2b24      	cmp	r3, #36	; 0x24
 800fb3e:	d906      	bls.n	800fb4e <_strtol_l.constprop.0+0x1a>
 800fb40:	f7f8 f854 	bl	8007bec <__errno>
 800fb44:	2316      	movs	r3, #22
 800fb46:	6003      	str	r3, [r0, #0]
 800fb48:	2000      	movs	r0, #0
 800fb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fc34 <_strtol_l.constprop.0+0x100>
 800fb52:	460d      	mov	r5, r1
 800fb54:	462e      	mov	r6, r5
 800fb56:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800fb5e:	f017 0708 	ands.w	r7, r7, #8
 800fb62:	d1f7      	bne.n	800fb54 <_strtol_l.constprop.0+0x20>
 800fb64:	2c2d      	cmp	r4, #45	; 0x2d
 800fb66:	d132      	bne.n	800fbce <_strtol_l.constprop.0+0x9a>
 800fb68:	782c      	ldrb	r4, [r5, #0]
 800fb6a:	2701      	movs	r7, #1
 800fb6c:	1cb5      	adds	r5, r6, #2
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d05b      	beq.n	800fc2a <_strtol_l.constprop.0+0xf6>
 800fb72:	2b10      	cmp	r3, #16
 800fb74:	d109      	bne.n	800fb8a <_strtol_l.constprop.0+0x56>
 800fb76:	2c30      	cmp	r4, #48	; 0x30
 800fb78:	d107      	bne.n	800fb8a <_strtol_l.constprop.0+0x56>
 800fb7a:	782c      	ldrb	r4, [r5, #0]
 800fb7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb80:	2c58      	cmp	r4, #88	; 0x58
 800fb82:	d14d      	bne.n	800fc20 <_strtol_l.constprop.0+0xec>
 800fb84:	786c      	ldrb	r4, [r5, #1]
 800fb86:	2310      	movs	r3, #16
 800fb88:	3502      	adds	r5, #2
 800fb8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb92:	f04f 0e00 	mov.w	lr, #0
 800fb96:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb9a:	4676      	mov	r6, lr
 800fb9c:	fb03 8a19 	mls	sl, r3, r9, r8
 800fba0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fba4:	f1bc 0f09 	cmp.w	ip, #9
 800fba8:	d816      	bhi.n	800fbd8 <_strtol_l.constprop.0+0xa4>
 800fbaa:	4664      	mov	r4, ip
 800fbac:	42a3      	cmp	r3, r4
 800fbae:	dd24      	ble.n	800fbfa <_strtol_l.constprop.0+0xc6>
 800fbb0:	f1be 3fff 	cmp.w	lr, #4294967295
 800fbb4:	d008      	beq.n	800fbc8 <_strtol_l.constprop.0+0x94>
 800fbb6:	45b1      	cmp	r9, r6
 800fbb8:	d31c      	bcc.n	800fbf4 <_strtol_l.constprop.0+0xc0>
 800fbba:	d101      	bne.n	800fbc0 <_strtol_l.constprop.0+0x8c>
 800fbbc:	45a2      	cmp	sl, r4
 800fbbe:	db19      	blt.n	800fbf4 <_strtol_l.constprop.0+0xc0>
 800fbc0:	fb06 4603 	mla	r6, r6, r3, r4
 800fbc4:	f04f 0e01 	mov.w	lr, #1
 800fbc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbcc:	e7e8      	b.n	800fba0 <_strtol_l.constprop.0+0x6c>
 800fbce:	2c2b      	cmp	r4, #43	; 0x2b
 800fbd0:	bf04      	itt	eq
 800fbd2:	782c      	ldrbeq	r4, [r5, #0]
 800fbd4:	1cb5      	addeq	r5, r6, #2
 800fbd6:	e7ca      	b.n	800fb6e <_strtol_l.constprop.0+0x3a>
 800fbd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fbdc:	f1bc 0f19 	cmp.w	ip, #25
 800fbe0:	d801      	bhi.n	800fbe6 <_strtol_l.constprop.0+0xb2>
 800fbe2:	3c37      	subs	r4, #55	; 0x37
 800fbe4:	e7e2      	b.n	800fbac <_strtol_l.constprop.0+0x78>
 800fbe6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fbea:	f1bc 0f19 	cmp.w	ip, #25
 800fbee:	d804      	bhi.n	800fbfa <_strtol_l.constprop.0+0xc6>
 800fbf0:	3c57      	subs	r4, #87	; 0x57
 800fbf2:	e7db      	b.n	800fbac <_strtol_l.constprop.0+0x78>
 800fbf4:	f04f 3eff 	mov.w	lr, #4294967295
 800fbf8:	e7e6      	b.n	800fbc8 <_strtol_l.constprop.0+0x94>
 800fbfa:	f1be 3fff 	cmp.w	lr, #4294967295
 800fbfe:	d105      	bne.n	800fc0c <_strtol_l.constprop.0+0xd8>
 800fc00:	2322      	movs	r3, #34	; 0x22
 800fc02:	6003      	str	r3, [r0, #0]
 800fc04:	4646      	mov	r6, r8
 800fc06:	b942      	cbnz	r2, 800fc1a <_strtol_l.constprop.0+0xe6>
 800fc08:	4630      	mov	r0, r6
 800fc0a:	e79e      	b.n	800fb4a <_strtol_l.constprop.0+0x16>
 800fc0c:	b107      	cbz	r7, 800fc10 <_strtol_l.constprop.0+0xdc>
 800fc0e:	4276      	negs	r6, r6
 800fc10:	2a00      	cmp	r2, #0
 800fc12:	d0f9      	beq.n	800fc08 <_strtol_l.constprop.0+0xd4>
 800fc14:	f1be 0f00 	cmp.w	lr, #0
 800fc18:	d000      	beq.n	800fc1c <_strtol_l.constprop.0+0xe8>
 800fc1a:	1e69      	subs	r1, r5, #1
 800fc1c:	6011      	str	r1, [r2, #0]
 800fc1e:	e7f3      	b.n	800fc08 <_strtol_l.constprop.0+0xd4>
 800fc20:	2430      	movs	r4, #48	; 0x30
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d1b1      	bne.n	800fb8a <_strtol_l.constprop.0+0x56>
 800fc26:	2308      	movs	r3, #8
 800fc28:	e7af      	b.n	800fb8a <_strtol_l.constprop.0+0x56>
 800fc2a:	2c30      	cmp	r4, #48	; 0x30
 800fc2c:	d0a5      	beq.n	800fb7a <_strtol_l.constprop.0+0x46>
 800fc2e:	230a      	movs	r3, #10
 800fc30:	e7ab      	b.n	800fb8a <_strtol_l.constprop.0+0x56>
 800fc32:	bf00      	nop
 800fc34:	08011ba1 	.word	0x08011ba1

0800fc38 <_strtol_r>:
 800fc38:	f7ff bf7c 	b.w	800fb34 <_strtol_l.constprop.0>

0800fc3c <_strtoul_l.constprop.0>:
 800fc3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc40:	4f36      	ldr	r7, [pc, #216]	; (800fd1c <_strtoul_l.constprop.0+0xe0>)
 800fc42:	4686      	mov	lr, r0
 800fc44:	460d      	mov	r5, r1
 800fc46:	4628      	mov	r0, r5
 800fc48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc4c:	5d3e      	ldrb	r6, [r7, r4]
 800fc4e:	f016 0608 	ands.w	r6, r6, #8
 800fc52:	d1f8      	bne.n	800fc46 <_strtoul_l.constprop.0+0xa>
 800fc54:	2c2d      	cmp	r4, #45	; 0x2d
 800fc56:	d130      	bne.n	800fcba <_strtoul_l.constprop.0+0x7e>
 800fc58:	782c      	ldrb	r4, [r5, #0]
 800fc5a:	2601      	movs	r6, #1
 800fc5c:	1c85      	adds	r5, r0, #2
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d057      	beq.n	800fd12 <_strtoul_l.constprop.0+0xd6>
 800fc62:	2b10      	cmp	r3, #16
 800fc64:	d109      	bne.n	800fc7a <_strtoul_l.constprop.0+0x3e>
 800fc66:	2c30      	cmp	r4, #48	; 0x30
 800fc68:	d107      	bne.n	800fc7a <_strtoul_l.constprop.0+0x3e>
 800fc6a:	7828      	ldrb	r0, [r5, #0]
 800fc6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800fc70:	2858      	cmp	r0, #88	; 0x58
 800fc72:	d149      	bne.n	800fd08 <_strtoul_l.constprop.0+0xcc>
 800fc74:	786c      	ldrb	r4, [r5, #1]
 800fc76:	2310      	movs	r3, #16
 800fc78:	3502      	adds	r5, #2
 800fc7a:	f04f 38ff 	mov.w	r8, #4294967295
 800fc7e:	2700      	movs	r7, #0
 800fc80:	fbb8 f8f3 	udiv	r8, r8, r3
 800fc84:	fb03 f908 	mul.w	r9, r3, r8
 800fc88:	ea6f 0909 	mvn.w	r9, r9
 800fc8c:	4638      	mov	r0, r7
 800fc8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fc92:	f1bc 0f09 	cmp.w	ip, #9
 800fc96:	d815      	bhi.n	800fcc4 <_strtoul_l.constprop.0+0x88>
 800fc98:	4664      	mov	r4, ip
 800fc9a:	42a3      	cmp	r3, r4
 800fc9c:	dd23      	ble.n	800fce6 <_strtoul_l.constprop.0+0xaa>
 800fc9e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800fca2:	d007      	beq.n	800fcb4 <_strtoul_l.constprop.0+0x78>
 800fca4:	4580      	cmp	r8, r0
 800fca6:	d31b      	bcc.n	800fce0 <_strtoul_l.constprop.0+0xa4>
 800fca8:	d101      	bne.n	800fcae <_strtoul_l.constprop.0+0x72>
 800fcaa:	45a1      	cmp	r9, r4
 800fcac:	db18      	blt.n	800fce0 <_strtoul_l.constprop.0+0xa4>
 800fcae:	fb00 4003 	mla	r0, r0, r3, r4
 800fcb2:	2701      	movs	r7, #1
 800fcb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcb8:	e7e9      	b.n	800fc8e <_strtoul_l.constprop.0+0x52>
 800fcba:	2c2b      	cmp	r4, #43	; 0x2b
 800fcbc:	bf04      	itt	eq
 800fcbe:	782c      	ldrbeq	r4, [r5, #0]
 800fcc0:	1c85      	addeq	r5, r0, #2
 800fcc2:	e7cc      	b.n	800fc5e <_strtoul_l.constprop.0+0x22>
 800fcc4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800fcc8:	f1bc 0f19 	cmp.w	ip, #25
 800fccc:	d801      	bhi.n	800fcd2 <_strtoul_l.constprop.0+0x96>
 800fcce:	3c37      	subs	r4, #55	; 0x37
 800fcd0:	e7e3      	b.n	800fc9a <_strtoul_l.constprop.0+0x5e>
 800fcd2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800fcd6:	f1bc 0f19 	cmp.w	ip, #25
 800fcda:	d804      	bhi.n	800fce6 <_strtoul_l.constprop.0+0xaa>
 800fcdc:	3c57      	subs	r4, #87	; 0x57
 800fcde:	e7dc      	b.n	800fc9a <_strtoul_l.constprop.0+0x5e>
 800fce0:	f04f 37ff 	mov.w	r7, #4294967295
 800fce4:	e7e6      	b.n	800fcb4 <_strtoul_l.constprop.0+0x78>
 800fce6:	1c7b      	adds	r3, r7, #1
 800fce8:	d106      	bne.n	800fcf8 <_strtoul_l.constprop.0+0xbc>
 800fcea:	2322      	movs	r3, #34	; 0x22
 800fcec:	f8ce 3000 	str.w	r3, [lr]
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	b932      	cbnz	r2, 800fd02 <_strtoul_l.constprop.0+0xc6>
 800fcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf8:	b106      	cbz	r6, 800fcfc <_strtoul_l.constprop.0+0xc0>
 800fcfa:	4240      	negs	r0, r0
 800fcfc:	2a00      	cmp	r2, #0
 800fcfe:	d0f9      	beq.n	800fcf4 <_strtoul_l.constprop.0+0xb8>
 800fd00:	b107      	cbz	r7, 800fd04 <_strtoul_l.constprop.0+0xc8>
 800fd02:	1e69      	subs	r1, r5, #1
 800fd04:	6011      	str	r1, [r2, #0]
 800fd06:	e7f5      	b.n	800fcf4 <_strtoul_l.constprop.0+0xb8>
 800fd08:	2430      	movs	r4, #48	; 0x30
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1b5      	bne.n	800fc7a <_strtoul_l.constprop.0+0x3e>
 800fd0e:	2308      	movs	r3, #8
 800fd10:	e7b3      	b.n	800fc7a <_strtoul_l.constprop.0+0x3e>
 800fd12:	2c30      	cmp	r4, #48	; 0x30
 800fd14:	d0a9      	beq.n	800fc6a <_strtoul_l.constprop.0+0x2e>
 800fd16:	230a      	movs	r3, #10
 800fd18:	e7af      	b.n	800fc7a <_strtoul_l.constprop.0+0x3e>
 800fd1a:	bf00      	nop
 800fd1c:	08011ba1 	.word	0x08011ba1

0800fd20 <_strtoul_r>:
 800fd20:	f7ff bf8c 	b.w	800fc3c <_strtoul_l.constprop.0>

0800fd24 <__ascii_wctomb>:
 800fd24:	b149      	cbz	r1, 800fd3a <__ascii_wctomb+0x16>
 800fd26:	2aff      	cmp	r2, #255	; 0xff
 800fd28:	bf85      	ittet	hi
 800fd2a:	238a      	movhi	r3, #138	; 0x8a
 800fd2c:	6003      	strhi	r3, [r0, #0]
 800fd2e:	700a      	strbls	r2, [r1, #0]
 800fd30:	f04f 30ff 	movhi.w	r0, #4294967295
 800fd34:	bf98      	it	ls
 800fd36:	2001      	movls	r0, #1
 800fd38:	4770      	bx	lr
 800fd3a:	4608      	mov	r0, r1
 800fd3c:	4770      	bx	lr
	...

0800fd40 <_strtoll_l.constprop.0>:
 800fd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd44:	b085      	sub	sp, #20
 800fd46:	4688      	mov	r8, r1
 800fd48:	9201      	str	r2, [sp, #4]
 800fd4a:	4a45      	ldr	r2, [pc, #276]	; (800fe60 <_strtoll_l.constprop.0+0x120>)
 800fd4c:	9003      	str	r0, [sp, #12]
 800fd4e:	461e      	mov	r6, r3
 800fd50:	460d      	mov	r5, r1
 800fd52:	462b      	mov	r3, r5
 800fd54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd58:	5d17      	ldrb	r7, [r2, r4]
 800fd5a:	f017 0708 	ands.w	r7, r7, #8
 800fd5e:	d1f8      	bne.n	800fd52 <_strtoll_l.constprop.0+0x12>
 800fd60:	2c2d      	cmp	r4, #45	; 0x2d
 800fd62:	d14a      	bne.n	800fdfa <_strtoll_l.constprop.0+0xba>
 800fd64:	782c      	ldrb	r4, [r5, #0]
 800fd66:	2701      	movs	r7, #1
 800fd68:	1c9d      	adds	r5, r3, #2
 800fd6a:	2e00      	cmp	r6, #0
 800fd6c:	d073      	beq.n	800fe56 <_strtoll_l.constprop.0+0x116>
 800fd6e:	2e10      	cmp	r6, #16
 800fd70:	d109      	bne.n	800fd86 <_strtoll_l.constprop.0+0x46>
 800fd72:	2c30      	cmp	r4, #48	; 0x30
 800fd74:	d107      	bne.n	800fd86 <_strtoll_l.constprop.0+0x46>
 800fd76:	782b      	ldrb	r3, [r5, #0]
 800fd78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd7c:	2b58      	cmp	r3, #88	; 0x58
 800fd7e:	d165      	bne.n	800fe4c <_strtoll_l.constprop.0+0x10c>
 800fd80:	786c      	ldrb	r4, [r5, #1]
 800fd82:	2610      	movs	r6, #16
 800fd84:	3502      	adds	r5, #2
 800fd86:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800fd8a:	f107 3bff 	add.w	fp, r7, #4294967295
 800fd8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd92:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800fd96:	4632      	mov	r2, r6
 800fd98:	464b      	mov	r3, r9
 800fd9a:	4658      	mov	r0, fp
 800fd9c:	4651      	mov	r1, sl
 800fd9e:	f7f0 ff83 	bl	8000ca8 <__aeabi_uldivmod>
 800fda2:	9202      	str	r2, [sp, #8]
 800fda4:	2200      	movs	r2, #0
 800fda6:	4684      	mov	ip, r0
 800fda8:	468e      	mov	lr, r1
 800fdaa:	4610      	mov	r0, r2
 800fdac:	4611      	mov	r1, r2
 800fdae:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fdb2:	2b09      	cmp	r3, #9
 800fdb4:	d905      	bls.n	800fdc2 <_strtoll_l.constprop.0+0x82>
 800fdb6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800fdba:	2b19      	cmp	r3, #25
 800fdbc:	d822      	bhi.n	800fe04 <_strtoll_l.constprop.0+0xc4>
 800fdbe:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 800fdc2:	429e      	cmp	r6, r3
 800fdc4:	dd28      	ble.n	800fe18 <_strtoll_l.constprop.0+0xd8>
 800fdc6:	1c54      	adds	r4, r2, #1
 800fdc8:	d014      	beq.n	800fdf4 <_strtoll_l.constprop.0+0xb4>
 800fdca:	4584      	cmp	ip, r0
 800fdcc:	eb7e 0201 	sbcs.w	r2, lr, r1
 800fdd0:	d31f      	bcc.n	800fe12 <_strtoll_l.constprop.0+0xd2>
 800fdd2:	458e      	cmp	lr, r1
 800fdd4:	bf08      	it	eq
 800fdd6:	4584      	cmpeq	ip, r0
 800fdd8:	d102      	bne.n	800fde0 <_strtoll_l.constprop.0+0xa0>
 800fdda:	9a02      	ldr	r2, [sp, #8]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	db18      	blt.n	800fe12 <_strtoll_l.constprop.0+0xd2>
 800fde0:	4371      	muls	r1, r6
 800fde2:	fb00 1109 	mla	r1, r0, r9, r1
 800fde6:	fba6 0200 	umull	r0, r2, r6, r0
 800fdea:	440a      	add	r2, r1
 800fdec:	1818      	adds	r0, r3, r0
 800fdee:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdf8:	e7d9      	b.n	800fdae <_strtoll_l.constprop.0+0x6e>
 800fdfa:	2c2b      	cmp	r4, #43	; 0x2b
 800fdfc:	bf04      	itt	eq
 800fdfe:	782c      	ldrbeq	r4, [r5, #0]
 800fe00:	1c9d      	addeq	r5, r3, #2
 800fe02:	e7b2      	b.n	800fd6a <_strtoll_l.constprop.0+0x2a>
 800fe04:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800fe08:	2b19      	cmp	r3, #25
 800fe0a:	d805      	bhi.n	800fe18 <_strtoll_l.constprop.0+0xd8>
 800fe0c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 800fe10:	e7d7      	b.n	800fdc2 <_strtoll_l.constprop.0+0x82>
 800fe12:	f04f 32ff 	mov.w	r2, #4294967295
 800fe16:	e7ed      	b.n	800fdf4 <_strtoll_l.constprop.0+0xb4>
 800fe18:	1c53      	adds	r3, r2, #1
 800fe1a:	d109      	bne.n	800fe30 <_strtoll_l.constprop.0+0xf0>
 800fe1c:	9a03      	ldr	r2, [sp, #12]
 800fe1e:	2322      	movs	r3, #34	; 0x22
 800fe20:	6013      	str	r3, [r2, #0]
 800fe22:	9b01      	ldr	r3, [sp, #4]
 800fe24:	4658      	mov	r0, fp
 800fe26:	4651      	mov	r1, sl
 800fe28:	b953      	cbnz	r3, 800fe40 <_strtoll_l.constprop.0+0x100>
 800fe2a:	b005      	add	sp, #20
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	b117      	cbz	r7, 800fe38 <_strtoll_l.constprop.0+0xf8>
 800fe32:	4240      	negs	r0, r0
 800fe34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800fe38:	9b01      	ldr	r3, [sp, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d0f5      	beq.n	800fe2a <_strtoll_l.constprop.0+0xea>
 800fe3e:	b10a      	cbz	r2, 800fe44 <_strtoll_l.constprop.0+0x104>
 800fe40:	f105 38ff 	add.w	r8, r5, #4294967295
 800fe44:	9b01      	ldr	r3, [sp, #4]
 800fe46:	f8c3 8000 	str.w	r8, [r3]
 800fe4a:	e7ee      	b.n	800fe2a <_strtoll_l.constprop.0+0xea>
 800fe4c:	2430      	movs	r4, #48	; 0x30
 800fe4e:	2e00      	cmp	r6, #0
 800fe50:	d199      	bne.n	800fd86 <_strtoll_l.constprop.0+0x46>
 800fe52:	2608      	movs	r6, #8
 800fe54:	e797      	b.n	800fd86 <_strtoll_l.constprop.0+0x46>
 800fe56:	2c30      	cmp	r4, #48	; 0x30
 800fe58:	d08d      	beq.n	800fd76 <_strtoll_l.constprop.0+0x36>
 800fe5a:	260a      	movs	r6, #10
 800fe5c:	e793      	b.n	800fd86 <_strtoll_l.constprop.0+0x46>
 800fe5e:	bf00      	nop
 800fe60:	08011ba1 	.word	0x08011ba1

0800fe64 <_strtoll_r>:
 800fe64:	f7ff bf6c 	b.w	800fd40 <_strtoll_l.constprop.0>

0800fe68 <_strtoull_l.constprop.0>:
 800fe68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	4692      	mov	sl, r2
 800fe6e:	4a49      	ldr	r2, [pc, #292]	; (800ff94 <_strtoull_l.constprop.0+0x12c>)
 800fe70:	9001      	str	r0, [sp, #4]
 800fe72:	4689      	mov	r9, r1
 800fe74:	461d      	mov	r5, r3
 800fe76:	460e      	mov	r6, r1
 800fe78:	4633      	mov	r3, r6
 800fe7a:	f816 4b01 	ldrb.w	r4, [r6], #1
 800fe7e:	5d17      	ldrb	r7, [r2, r4]
 800fe80:	f017 0708 	ands.w	r7, r7, #8
 800fe84:	d1f8      	bne.n	800fe78 <_strtoull_l.constprop.0+0x10>
 800fe86:	2c2d      	cmp	r4, #45	; 0x2d
 800fe88:	d14b      	bne.n	800ff22 <_strtoull_l.constprop.0+0xba>
 800fe8a:	7834      	ldrb	r4, [r6, #0]
 800fe8c:	2701      	movs	r7, #1
 800fe8e:	1c9e      	adds	r6, r3, #2
 800fe90:	2d00      	cmp	r5, #0
 800fe92:	d07b      	beq.n	800ff8c <_strtoull_l.constprop.0+0x124>
 800fe94:	2d10      	cmp	r5, #16
 800fe96:	d109      	bne.n	800feac <_strtoull_l.constprop.0+0x44>
 800fe98:	2c30      	cmp	r4, #48	; 0x30
 800fe9a:	d107      	bne.n	800feac <_strtoull_l.constprop.0+0x44>
 800fe9c:	7833      	ldrb	r3, [r6, #0]
 800fe9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fea2:	2b58      	cmp	r3, #88	; 0x58
 800fea4:	d16d      	bne.n	800ff82 <_strtoull_l.constprop.0+0x11a>
 800fea6:	7874      	ldrb	r4, [r6, #1]
 800fea8:	2510      	movs	r5, #16
 800feaa:	3602      	adds	r6, #2
 800feac:	ea4f 7be5 	mov.w	fp, r5, asr #31
 800feb0:	462a      	mov	r2, r5
 800feb2:	465b      	mov	r3, fp
 800feb4:	f04f 30ff 	mov.w	r0, #4294967295
 800feb8:	f04f 31ff 	mov.w	r1, #4294967295
 800febc:	f7f0 fef4 	bl	8000ca8 <__aeabi_uldivmod>
 800fec0:	462a      	mov	r2, r5
 800fec2:	9000      	str	r0, [sp, #0]
 800fec4:	4688      	mov	r8, r1
 800fec6:	465b      	mov	r3, fp
 800fec8:	f04f 30ff 	mov.w	r0, #4294967295
 800fecc:	f04f 31ff 	mov.w	r1, #4294967295
 800fed0:	f7f0 feea 	bl	8000ca8 <__aeabi_uldivmod>
 800fed4:	2300      	movs	r3, #0
 800fed6:	4618      	mov	r0, r3
 800fed8:	4619      	mov	r1, r3
 800feda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fede:	f1bc 0f09 	cmp.w	ip, #9
 800fee2:	d823      	bhi.n	800ff2c <_strtoull_l.constprop.0+0xc4>
 800fee4:	4664      	mov	r4, ip
 800fee6:	42a5      	cmp	r5, r4
 800fee8:	dd31      	ble.n	800ff4e <_strtoull_l.constprop.0+0xe6>
 800feea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feee:	d015      	beq.n	800ff1c <_strtoull_l.constprop.0+0xb4>
 800fef0:	9b00      	ldr	r3, [sp, #0]
 800fef2:	4283      	cmp	r3, r0
 800fef4:	eb78 0301 	sbcs.w	r3, r8, r1
 800fef8:	d326      	bcc.n	800ff48 <_strtoull_l.constprop.0+0xe0>
 800fefa:	9b00      	ldr	r3, [sp, #0]
 800fefc:	4588      	cmp	r8, r1
 800fefe:	bf08      	it	eq
 800ff00:	4283      	cmpeq	r3, r0
 800ff02:	d101      	bne.n	800ff08 <_strtoull_l.constprop.0+0xa0>
 800ff04:	42a2      	cmp	r2, r4
 800ff06:	db1f      	blt.n	800ff48 <_strtoull_l.constprop.0+0xe0>
 800ff08:	4369      	muls	r1, r5
 800ff0a:	fb00 110b 	mla	r1, r0, fp, r1
 800ff0e:	fba5 0300 	umull	r0, r3, r5, r0
 800ff12:	4419      	add	r1, r3
 800ff14:	1820      	adds	r0, r4, r0
 800ff16:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	f816 4b01 	ldrb.w	r4, [r6], #1
 800ff20:	e7db      	b.n	800feda <_strtoull_l.constprop.0+0x72>
 800ff22:	2c2b      	cmp	r4, #43	; 0x2b
 800ff24:	bf04      	itt	eq
 800ff26:	7834      	ldrbeq	r4, [r6, #0]
 800ff28:	1c9e      	addeq	r6, r3, #2
 800ff2a:	e7b1      	b.n	800fe90 <_strtoull_l.constprop.0+0x28>
 800ff2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ff30:	f1bc 0f19 	cmp.w	ip, #25
 800ff34:	d801      	bhi.n	800ff3a <_strtoull_l.constprop.0+0xd2>
 800ff36:	3c37      	subs	r4, #55	; 0x37
 800ff38:	e7d5      	b.n	800fee6 <_strtoull_l.constprop.0+0x7e>
 800ff3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ff3e:	f1bc 0f19 	cmp.w	ip, #25
 800ff42:	d804      	bhi.n	800ff4e <_strtoull_l.constprop.0+0xe6>
 800ff44:	3c57      	subs	r4, #87	; 0x57
 800ff46:	e7ce      	b.n	800fee6 <_strtoull_l.constprop.0+0x7e>
 800ff48:	f04f 33ff 	mov.w	r3, #4294967295
 800ff4c:	e7e6      	b.n	800ff1c <_strtoull_l.constprop.0+0xb4>
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	d10a      	bne.n	800ff68 <_strtoull_l.constprop.0+0x100>
 800ff52:	9901      	ldr	r1, [sp, #4]
 800ff54:	2222      	movs	r2, #34	; 0x22
 800ff56:	600a      	str	r2, [r1, #0]
 800ff58:	4618      	mov	r0, r3
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	f1ba 0f00 	cmp.w	sl, #0
 800ff60:	d10a      	bne.n	800ff78 <_strtoull_l.constprop.0+0x110>
 800ff62:	b003      	add	sp, #12
 800ff64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff68:	b117      	cbz	r7, 800ff70 <_strtoull_l.constprop.0+0x108>
 800ff6a:	4240      	negs	r0, r0
 800ff6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ff70:	f1ba 0f00 	cmp.w	sl, #0
 800ff74:	d0f5      	beq.n	800ff62 <_strtoull_l.constprop.0+0xfa>
 800ff76:	b10b      	cbz	r3, 800ff7c <_strtoull_l.constprop.0+0x114>
 800ff78:	f106 39ff 	add.w	r9, r6, #4294967295
 800ff7c:	f8ca 9000 	str.w	r9, [sl]
 800ff80:	e7ef      	b.n	800ff62 <_strtoull_l.constprop.0+0xfa>
 800ff82:	2430      	movs	r4, #48	; 0x30
 800ff84:	2d00      	cmp	r5, #0
 800ff86:	d191      	bne.n	800feac <_strtoull_l.constprop.0+0x44>
 800ff88:	2508      	movs	r5, #8
 800ff8a:	e78f      	b.n	800feac <_strtoull_l.constprop.0+0x44>
 800ff8c:	2c30      	cmp	r4, #48	; 0x30
 800ff8e:	d085      	beq.n	800fe9c <_strtoull_l.constprop.0+0x34>
 800ff90:	250a      	movs	r5, #10
 800ff92:	e78b      	b.n	800feac <_strtoull_l.constprop.0+0x44>
 800ff94:	08011ba1 	.word	0x08011ba1

0800ff98 <_strtoull_r>:
 800ff98:	f7ff bf66 	b.w	800fe68 <_strtoull_l.constprop.0>

0800ff9c <_mbrtowc_r>:
 800ff9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff9e:	4c0a      	ldr	r4, [pc, #40]	; (800ffc8 <_mbrtowc_r+0x2c>)
 800ffa0:	9e08      	ldr	r6, [sp, #32]
 800ffa2:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800ffa6:	9600      	str	r6, [sp, #0]
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	4614      	mov	r4, r2
 800ffac:	b912      	cbnz	r2, 800ffb4 <_mbrtowc_r+0x18>
 800ffae:	4a07      	ldr	r2, [pc, #28]	; (800ffcc <_mbrtowc_r+0x30>)
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	4621      	mov	r1, r4
 800ffb4:	47b8      	blx	r7
 800ffb6:	1c43      	adds	r3, r0, #1
 800ffb8:	bf01      	itttt	eq
 800ffba:	2300      	moveq	r3, #0
 800ffbc:	6033      	streq	r3, [r6, #0]
 800ffbe:	238a      	moveq	r3, #138	; 0x8a
 800ffc0:	602b      	streq	r3, [r5, #0]
 800ffc2:	b003      	add	sp, #12
 800ffc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	20000560 	.word	0x20000560
 800ffcc:	08011cdc 	.word	0x08011cdc

0800ffd0 <_wcrtomb_r>:
 800ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd2:	4c09      	ldr	r4, [pc, #36]	; (800fff8 <_wcrtomb_r+0x28>)
 800ffd4:	b085      	sub	sp, #20
 800ffd6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800ffda:	4605      	mov	r5, r0
 800ffdc:	461e      	mov	r6, r3
 800ffde:	b909      	cbnz	r1, 800ffe4 <_wcrtomb_r+0x14>
 800ffe0:	460a      	mov	r2, r1
 800ffe2:	a901      	add	r1, sp, #4
 800ffe4:	47b8      	blx	r7
 800ffe6:	1c43      	adds	r3, r0, #1
 800ffe8:	bf01      	itttt	eq
 800ffea:	2300      	moveq	r3, #0
 800ffec:	6033      	streq	r3, [r6, #0]
 800ffee:	238a      	moveq	r3, #138	; 0x8a
 800fff0:	602b      	streq	r3, [r5, #0]
 800fff2:	b005      	add	sp, #20
 800fff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff6:	bf00      	nop
 800fff8:	20000560 	.word	0x20000560

0800fffc <iswspace>:
 800fffc:	2100      	movs	r1, #0
 800fffe:	f000 b801 	b.w	8010004 <iswspace_l>
	...

08010004 <iswspace_l>:
 8010004:	28ff      	cmp	r0, #255	; 0xff
 8010006:	bf9d      	ittte	ls
 8010008:	4b02      	ldrls	r3, [pc, #8]	; (8010014 <iswspace_l+0x10>)
 801000a:	5c18      	ldrbls	r0, [r3, r0]
 801000c:	f000 0008 	andls.w	r0, r0, #8
 8010010:	2000      	movhi	r0, #0
 8010012:	4770      	bx	lr
 8010014:	08011ba1 	.word	0x08011ba1

08010018 <__ssprint_r>:
 8010018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001c:	6813      	ldr	r3, [r2, #0]
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	6893      	ldr	r3, [r2, #8]
 8010022:	4680      	mov	r8, r0
 8010024:	460c      	mov	r4, r1
 8010026:	4617      	mov	r7, r2
 8010028:	2b00      	cmp	r3, #0
 801002a:	d157      	bne.n	80100dc <__ssprint_r+0xc4>
 801002c:	2000      	movs	r0, #0
 801002e:	2300      	movs	r3, #0
 8010030:	607b      	str	r3, [r7, #4]
 8010032:	b003      	add	sp, #12
 8010034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010038:	9b01      	ldr	r3, [sp, #4]
 801003a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 801003e:	3308      	adds	r3, #8
 8010040:	9301      	str	r3, [sp, #4]
 8010042:	68a6      	ldr	r6, [r4, #8]
 8010044:	6820      	ldr	r0, [r4, #0]
 8010046:	f1bb 0f00 	cmp.w	fp, #0
 801004a:	d0f5      	beq.n	8010038 <__ssprint_r+0x20>
 801004c:	45b3      	cmp	fp, r6
 801004e:	d32d      	bcc.n	80100ac <__ssprint_r+0x94>
 8010050:	89a2      	ldrh	r2, [r4, #12]
 8010052:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010056:	d029      	beq.n	80100ac <__ssprint_r+0x94>
 8010058:	6921      	ldr	r1, [r4, #16]
 801005a:	6965      	ldr	r5, [r4, #20]
 801005c:	eba0 0901 	sub.w	r9, r0, r1
 8010060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010068:	f109 0001 	add.w	r0, r9, #1
 801006c:	106d      	asrs	r5, r5, #1
 801006e:	4458      	add	r0, fp
 8010070:	4285      	cmp	r5, r0
 8010072:	bf38      	it	cc
 8010074:	4605      	movcc	r5, r0
 8010076:	0553      	lsls	r3, r2, #21
 8010078:	d534      	bpl.n	80100e4 <__ssprint_r+0xcc>
 801007a:	4629      	mov	r1, r5
 801007c:	4640      	mov	r0, r8
 801007e:	f7f7 ff07 	bl	8007e90 <_malloc_r>
 8010082:	4606      	mov	r6, r0
 8010084:	2800      	cmp	r0, #0
 8010086:	d038      	beq.n	80100fa <__ssprint_r+0xe2>
 8010088:	464a      	mov	r2, r9
 801008a:	6921      	ldr	r1, [r4, #16]
 801008c:	f7fd fa24 	bl	800d4d8 <memcpy>
 8010090:	89a2      	ldrh	r2, [r4, #12]
 8010092:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8010096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801009a:	81a2      	strh	r2, [r4, #12]
 801009c:	6126      	str	r6, [r4, #16]
 801009e:	6165      	str	r5, [r4, #20]
 80100a0:	444e      	add	r6, r9
 80100a2:	eba5 0509 	sub.w	r5, r5, r9
 80100a6:	6026      	str	r6, [r4, #0]
 80100a8:	60a5      	str	r5, [r4, #8]
 80100aa:	465e      	mov	r6, fp
 80100ac:	455e      	cmp	r6, fp
 80100ae:	bf28      	it	cs
 80100b0:	465e      	movcs	r6, fp
 80100b2:	4632      	mov	r2, r6
 80100b4:	4651      	mov	r1, sl
 80100b6:	6820      	ldr	r0, [r4, #0]
 80100b8:	f7fd f9a7 	bl	800d40a <memmove>
 80100bc:	68a2      	ldr	r2, [r4, #8]
 80100be:	1b92      	subs	r2, r2, r6
 80100c0:	60a2      	str	r2, [r4, #8]
 80100c2:	6822      	ldr	r2, [r4, #0]
 80100c4:	4432      	add	r2, r6
 80100c6:	6022      	str	r2, [r4, #0]
 80100c8:	68ba      	ldr	r2, [r7, #8]
 80100ca:	eba2 030b 	sub.w	r3, r2, fp
 80100ce:	44da      	add	sl, fp
 80100d0:	60bb      	str	r3, [r7, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d0aa      	beq.n	801002c <__ssprint_r+0x14>
 80100d6:	f04f 0b00 	mov.w	fp, #0
 80100da:	e7b2      	b.n	8010042 <__ssprint_r+0x2a>
 80100dc:	f04f 0a00 	mov.w	sl, #0
 80100e0:	46d3      	mov	fp, sl
 80100e2:	e7ae      	b.n	8010042 <__ssprint_r+0x2a>
 80100e4:	462a      	mov	r2, r5
 80100e6:	4640      	mov	r0, r8
 80100e8:	f7fe fd6a 	bl	800ebc0 <_realloc_r>
 80100ec:	4606      	mov	r6, r0
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d1d4      	bne.n	801009c <__ssprint_r+0x84>
 80100f2:	6921      	ldr	r1, [r4, #16]
 80100f4:	4640      	mov	r0, r8
 80100f6:	f7f7 fe0b 	bl	8007d10 <_free_r>
 80100fa:	230c      	movs	r3, #12
 80100fc:	f8c8 3000 	str.w	r3, [r8]
 8010100:	89a3      	ldrh	r3, [r4, #12]
 8010102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010106:	81a3      	strh	r3, [r4, #12]
 8010108:	2300      	movs	r3, #0
 801010a:	60bb      	str	r3, [r7, #8]
 801010c:	f04f 30ff 	mov.w	r0, #4294967295
 8010110:	e78d      	b.n	801002e <__ssprint_r+0x16>

08010112 <__swhatbuf_r>:
 8010112:	b570      	push	{r4, r5, r6, lr}
 8010114:	460c      	mov	r4, r1
 8010116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801011a:	2900      	cmp	r1, #0
 801011c:	b096      	sub	sp, #88	; 0x58
 801011e:	4615      	mov	r5, r2
 8010120:	461e      	mov	r6, r3
 8010122:	da07      	bge.n	8010134 <__swhatbuf_r+0x22>
 8010124:	89a1      	ldrh	r1, [r4, #12]
 8010126:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801012a:	d017      	beq.n	801015c <__swhatbuf_r+0x4a>
 801012c:	2100      	movs	r1, #0
 801012e:	2340      	movs	r3, #64	; 0x40
 8010130:	4608      	mov	r0, r1
 8010132:	e00f      	b.n	8010154 <__swhatbuf_r+0x42>
 8010134:	466a      	mov	r2, sp
 8010136:	f000 f8ab 	bl	8010290 <_fstat_r>
 801013a:	2800      	cmp	r0, #0
 801013c:	dbf2      	blt.n	8010124 <__swhatbuf_r+0x12>
 801013e:	9901      	ldr	r1, [sp, #4]
 8010140:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010144:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010148:	4259      	negs	r1, r3
 801014a:	4159      	adcs	r1, r3
 801014c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010154:	6031      	str	r1, [r6, #0]
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	b016      	add	sp, #88	; 0x58
 801015a:	bd70      	pop	{r4, r5, r6, pc}
 801015c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010160:	e7e6      	b.n	8010130 <__swhatbuf_r+0x1e>

08010162 <__smakebuf_r>:
 8010162:	898b      	ldrh	r3, [r1, #12]
 8010164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010166:	079d      	lsls	r5, r3, #30
 8010168:	4606      	mov	r6, r0
 801016a:	460c      	mov	r4, r1
 801016c:	d507      	bpl.n	801017e <__smakebuf_r+0x1c>
 801016e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8010172:	6023      	str	r3, [r4, #0]
 8010174:	6123      	str	r3, [r4, #16]
 8010176:	2301      	movs	r3, #1
 8010178:	6163      	str	r3, [r4, #20]
 801017a:	b002      	add	sp, #8
 801017c:	bd70      	pop	{r4, r5, r6, pc}
 801017e:	ab01      	add	r3, sp, #4
 8010180:	466a      	mov	r2, sp
 8010182:	f7ff ffc6 	bl	8010112 <__swhatbuf_r>
 8010186:	9900      	ldr	r1, [sp, #0]
 8010188:	4605      	mov	r5, r0
 801018a:	4630      	mov	r0, r6
 801018c:	f7f7 fe80 	bl	8007e90 <_malloc_r>
 8010190:	b948      	cbnz	r0, 80101a6 <__smakebuf_r+0x44>
 8010192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010196:	059a      	lsls	r2, r3, #22
 8010198:	d4ef      	bmi.n	801017a <__smakebuf_r+0x18>
 801019a:	f023 0303 	bic.w	r3, r3, #3
 801019e:	f043 0302 	orr.w	r3, r3, #2
 80101a2:	81a3      	strh	r3, [r4, #12]
 80101a4:	e7e3      	b.n	801016e <__smakebuf_r+0xc>
 80101a6:	89a3      	ldrh	r3, [r4, #12]
 80101a8:	6020      	str	r0, [r4, #0]
 80101aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ae:	81a3      	strh	r3, [r4, #12]
 80101b0:	9b00      	ldr	r3, [sp, #0]
 80101b2:	6163      	str	r3, [r4, #20]
 80101b4:	9b01      	ldr	r3, [sp, #4]
 80101b6:	6120      	str	r0, [r4, #16]
 80101b8:	b15b      	cbz	r3, 80101d2 <__smakebuf_r+0x70>
 80101ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101be:	4630      	mov	r0, r6
 80101c0:	f000 f878 	bl	80102b4 <_isatty_r>
 80101c4:	b128      	cbz	r0, 80101d2 <__smakebuf_r+0x70>
 80101c6:	89a3      	ldrh	r3, [r4, #12]
 80101c8:	f023 0303 	bic.w	r3, r3, #3
 80101cc:	f043 0301 	orr.w	r3, r3, #1
 80101d0:	81a3      	strh	r3, [r4, #12]
 80101d2:	89a3      	ldrh	r3, [r4, #12]
 80101d4:	431d      	orrs	r5, r3
 80101d6:	81a5      	strh	r5, [r4, #12]
 80101d8:	e7cf      	b.n	801017a <__smakebuf_r+0x18>

080101da <__swbuf_r>:
 80101da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101dc:	460e      	mov	r6, r1
 80101de:	4614      	mov	r4, r2
 80101e0:	4605      	mov	r5, r0
 80101e2:	b118      	cbz	r0, 80101ec <__swbuf_r+0x12>
 80101e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80101e6:	b90b      	cbnz	r3, 80101ec <__swbuf_r+0x12>
 80101e8:	f7f7 fb92 	bl	8007910 <__sinit>
 80101ec:	69a3      	ldr	r3, [r4, #24]
 80101ee:	60a3      	str	r3, [r4, #8]
 80101f0:	89a3      	ldrh	r3, [r4, #12]
 80101f2:	0719      	lsls	r1, r3, #28
 80101f4:	d529      	bpl.n	801024a <__swbuf_r+0x70>
 80101f6:	6923      	ldr	r3, [r4, #16]
 80101f8:	b33b      	cbz	r3, 801024a <__swbuf_r+0x70>
 80101fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101fe:	b2f6      	uxtb	r6, r6
 8010200:	049a      	lsls	r2, r3, #18
 8010202:	4637      	mov	r7, r6
 8010204:	d52a      	bpl.n	801025c <__swbuf_r+0x82>
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	6922      	ldr	r2, [r4, #16]
 801020a:	1a98      	subs	r0, r3, r2
 801020c:	6963      	ldr	r3, [r4, #20]
 801020e:	4283      	cmp	r3, r0
 8010210:	dc04      	bgt.n	801021c <__swbuf_r+0x42>
 8010212:	4621      	mov	r1, r4
 8010214:	4628      	mov	r0, r5
 8010216:	f7fc fca9 	bl	800cb6c <_fflush_r>
 801021a:	b9e0      	cbnz	r0, 8010256 <__swbuf_r+0x7c>
 801021c:	68a3      	ldr	r3, [r4, #8]
 801021e:	3b01      	subs	r3, #1
 8010220:	60a3      	str	r3, [r4, #8]
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	6022      	str	r2, [r4, #0]
 8010228:	701e      	strb	r6, [r3, #0]
 801022a:	6962      	ldr	r2, [r4, #20]
 801022c:	1c43      	adds	r3, r0, #1
 801022e:	429a      	cmp	r2, r3
 8010230:	d004      	beq.n	801023c <__swbuf_r+0x62>
 8010232:	89a3      	ldrh	r3, [r4, #12]
 8010234:	07db      	lsls	r3, r3, #31
 8010236:	d506      	bpl.n	8010246 <__swbuf_r+0x6c>
 8010238:	2e0a      	cmp	r6, #10
 801023a:	d104      	bne.n	8010246 <__swbuf_r+0x6c>
 801023c:	4621      	mov	r1, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f7fc fc94 	bl	800cb6c <_fflush_r>
 8010244:	b938      	cbnz	r0, 8010256 <__swbuf_r+0x7c>
 8010246:	4638      	mov	r0, r7
 8010248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801024a:	4621      	mov	r1, r4
 801024c:	4628      	mov	r0, r5
 801024e:	f7fd f819 	bl	800d284 <__swsetup_r>
 8010252:	2800      	cmp	r0, #0
 8010254:	d0d1      	beq.n	80101fa <__swbuf_r+0x20>
 8010256:	f04f 37ff 	mov.w	r7, #4294967295
 801025a:	e7f4      	b.n	8010246 <__swbuf_r+0x6c>
 801025c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010260:	81a3      	strh	r3, [r4, #12]
 8010262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010268:	6663      	str	r3, [r4, #100]	; 0x64
 801026a:	e7cc      	b.n	8010206 <__swbuf_r+0x2c>

0801026c <strncmp>:
 801026c:	b510      	push	{r4, lr}
 801026e:	b16a      	cbz	r2, 801028c <strncmp+0x20>
 8010270:	3901      	subs	r1, #1
 8010272:	1884      	adds	r4, r0, r2
 8010274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010278:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801027c:	429a      	cmp	r2, r3
 801027e:	d103      	bne.n	8010288 <strncmp+0x1c>
 8010280:	42a0      	cmp	r0, r4
 8010282:	d001      	beq.n	8010288 <strncmp+0x1c>
 8010284:	2a00      	cmp	r2, #0
 8010286:	d1f5      	bne.n	8010274 <strncmp+0x8>
 8010288:	1ad0      	subs	r0, r2, r3
 801028a:	bd10      	pop	{r4, pc}
 801028c:	4610      	mov	r0, r2
 801028e:	e7fc      	b.n	801028a <strncmp+0x1e>

08010290 <_fstat_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d07      	ldr	r5, [pc, #28]	; (80102b0 <_fstat_r+0x20>)
 8010294:	2300      	movs	r3, #0
 8010296:	4604      	mov	r4, r0
 8010298:	4608      	mov	r0, r1
 801029a:	4611      	mov	r1, r2
 801029c:	602b      	str	r3, [r5, #0]
 801029e:	f7f2 fd1b 	bl	8002cd8 <_fstat>
 80102a2:	1c43      	adds	r3, r0, #1
 80102a4:	d102      	bne.n	80102ac <_fstat_r+0x1c>
 80102a6:	682b      	ldr	r3, [r5, #0]
 80102a8:	b103      	cbz	r3, 80102ac <_fstat_r+0x1c>
 80102aa:	6023      	str	r3, [r4, #0]
 80102ac:	bd38      	pop	{r3, r4, r5, pc}
 80102ae:	bf00      	nop
 80102b0:	20000a40 	.word	0x20000a40

080102b4 <_isatty_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d06      	ldr	r5, [pc, #24]	; (80102d0 <_isatty_r+0x1c>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	602b      	str	r3, [r5, #0]
 80102c0:	f7f2 fd1a 	bl	8002cf8 <_isatty>
 80102c4:	1c43      	adds	r3, r0, #1
 80102c6:	d102      	bne.n	80102ce <_isatty_r+0x1a>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	b103      	cbz	r3, 80102ce <_isatty_r+0x1a>
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	20000a40 	.word	0x20000a40
 80102d4:	00000000 	.word	0x00000000

080102d8 <nan>:
 80102d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80102e0 <nan+0x8>
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	00000000 	.word	0x00000000
 80102e4:	7ff80000 	.word	0x7ff80000

080102e8 <__assert_func>:
 80102e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102ea:	4614      	mov	r4, r2
 80102ec:	461a      	mov	r2, r3
 80102ee:	4b09      	ldr	r3, [pc, #36]	; (8010314 <__assert_func+0x2c>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4605      	mov	r5, r0
 80102f4:	68d8      	ldr	r0, [r3, #12]
 80102f6:	b14c      	cbz	r4, 801030c <__assert_func+0x24>
 80102f8:	4b07      	ldr	r3, [pc, #28]	; (8010318 <__assert_func+0x30>)
 80102fa:	9100      	str	r1, [sp, #0]
 80102fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010300:	4906      	ldr	r1, [pc, #24]	; (801031c <__assert_func+0x34>)
 8010302:	462b      	mov	r3, r5
 8010304:	f000 fb9a 	bl	8010a3c <fiprintf>
 8010308:	f000 fbaa 	bl	8010a60 <abort>
 801030c:	4b04      	ldr	r3, [pc, #16]	; (8010320 <__assert_func+0x38>)
 801030e:	461c      	mov	r4, r3
 8010310:	e7f3      	b.n	80102fa <__assert_func+0x12>
 8010312:	bf00      	nop
 8010314:	20000148 	.word	0x20000148
 8010318:	08011ca1 	.word	0x08011ca1
 801031c:	08011cae 	.word	0x08011cae
 8010320:	08011cdc 	.word	0x08011cdc

08010324 <_calloc_r>:
 8010324:	b538      	push	{r3, r4, r5, lr}
 8010326:	fba1 1502 	umull	r1, r5, r1, r2
 801032a:	b92d      	cbnz	r5, 8010338 <_calloc_r+0x14>
 801032c:	f7f7 fdb0 	bl	8007e90 <_malloc_r>
 8010330:	4604      	mov	r4, r0
 8010332:	b938      	cbnz	r0, 8010344 <_calloc_r+0x20>
 8010334:	4620      	mov	r0, r4
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	f7f7 fc58 	bl	8007bec <__errno>
 801033c:	230c      	movs	r3, #12
 801033e:	6003      	str	r3, [r0, #0]
 8010340:	2400      	movs	r4, #0
 8010342:	e7f7      	b.n	8010334 <_calloc_r+0x10>
 8010344:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010348:	f022 0203 	bic.w	r2, r2, #3
 801034c:	3a04      	subs	r2, #4
 801034e:	2a24      	cmp	r2, #36	; 0x24
 8010350:	d819      	bhi.n	8010386 <_calloc_r+0x62>
 8010352:	2a13      	cmp	r2, #19
 8010354:	d915      	bls.n	8010382 <_calloc_r+0x5e>
 8010356:	2a1b      	cmp	r2, #27
 8010358:	e9c0 5500 	strd	r5, r5, [r0]
 801035c:	d806      	bhi.n	801036c <_calloc_r+0x48>
 801035e:	f100 0308 	add.w	r3, r0, #8
 8010362:	2200      	movs	r2, #0
 8010364:	e9c3 2200 	strd	r2, r2, [r3]
 8010368:	609a      	str	r2, [r3, #8]
 801036a:	e7e3      	b.n	8010334 <_calloc_r+0x10>
 801036c:	2a24      	cmp	r2, #36	; 0x24
 801036e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8010372:	bf11      	iteee	ne
 8010374:	f100 0310 	addne.w	r3, r0, #16
 8010378:	6105      	streq	r5, [r0, #16]
 801037a:	f100 0318 	addeq.w	r3, r0, #24
 801037e:	6145      	streq	r5, [r0, #20]
 8010380:	e7ef      	b.n	8010362 <_calloc_r+0x3e>
 8010382:	4603      	mov	r3, r0
 8010384:	e7ed      	b.n	8010362 <_calloc_r+0x3e>
 8010386:	4629      	mov	r1, r5
 8010388:	f7f7 fbe1 	bl	8007b4e <memset>
 801038c:	e7d2      	b.n	8010334 <_calloc_r+0x10>

0801038e <rshift>:
 801038e:	6903      	ldr	r3, [r0, #16]
 8010390:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010398:	ea4f 1261 	mov.w	r2, r1, asr #5
 801039c:	f100 0414 	add.w	r4, r0, #20
 80103a0:	dd45      	ble.n	801042e <rshift+0xa0>
 80103a2:	f011 011f 	ands.w	r1, r1, #31
 80103a6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103aa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103ae:	d10c      	bne.n	80103ca <rshift+0x3c>
 80103b0:	f100 0710 	add.w	r7, r0, #16
 80103b4:	4629      	mov	r1, r5
 80103b6:	42b1      	cmp	r1, r6
 80103b8:	d334      	bcc.n	8010424 <rshift+0x96>
 80103ba:	1a9b      	subs	r3, r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	1eea      	subs	r2, r5, #3
 80103c0:	4296      	cmp	r6, r2
 80103c2:	bf38      	it	cc
 80103c4:	2300      	movcc	r3, #0
 80103c6:	4423      	add	r3, r4
 80103c8:	e015      	b.n	80103f6 <rshift+0x68>
 80103ca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103ce:	f1c1 0820 	rsb	r8, r1, #32
 80103d2:	40cf      	lsrs	r7, r1
 80103d4:	f105 0e04 	add.w	lr, r5, #4
 80103d8:	46a1      	mov	r9, r4
 80103da:	4576      	cmp	r6, lr
 80103dc:	46f4      	mov	ip, lr
 80103de:	d815      	bhi.n	801040c <rshift+0x7e>
 80103e0:	1a9a      	subs	r2, r3, r2
 80103e2:	0092      	lsls	r2, r2, #2
 80103e4:	3a04      	subs	r2, #4
 80103e6:	3501      	adds	r5, #1
 80103e8:	42ae      	cmp	r6, r5
 80103ea:	bf38      	it	cc
 80103ec:	2200      	movcc	r2, #0
 80103ee:	18a3      	adds	r3, r4, r2
 80103f0:	50a7      	str	r7, [r4, r2]
 80103f2:	b107      	cbz	r7, 80103f6 <rshift+0x68>
 80103f4:	3304      	adds	r3, #4
 80103f6:	1b1a      	subs	r2, r3, r4
 80103f8:	42a3      	cmp	r3, r4
 80103fa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80103fe:	bf08      	it	eq
 8010400:	2300      	moveq	r3, #0
 8010402:	6102      	str	r2, [r0, #16]
 8010404:	bf08      	it	eq
 8010406:	6143      	streq	r3, [r0, #20]
 8010408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801040c:	f8dc c000 	ldr.w	ip, [ip]
 8010410:	fa0c fc08 	lsl.w	ip, ip, r8
 8010414:	ea4c 0707 	orr.w	r7, ip, r7
 8010418:	f849 7b04 	str.w	r7, [r9], #4
 801041c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010420:	40cf      	lsrs	r7, r1
 8010422:	e7da      	b.n	80103da <rshift+0x4c>
 8010424:	f851 cb04 	ldr.w	ip, [r1], #4
 8010428:	f847 cf04 	str.w	ip, [r7, #4]!
 801042c:	e7c3      	b.n	80103b6 <rshift+0x28>
 801042e:	4623      	mov	r3, r4
 8010430:	e7e1      	b.n	80103f6 <rshift+0x68>

08010432 <__hexdig_fun>:
 8010432:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010436:	2b09      	cmp	r3, #9
 8010438:	d802      	bhi.n	8010440 <__hexdig_fun+0xe>
 801043a:	3820      	subs	r0, #32
 801043c:	b2c0      	uxtb	r0, r0
 801043e:	4770      	bx	lr
 8010440:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010444:	2b05      	cmp	r3, #5
 8010446:	d801      	bhi.n	801044c <__hexdig_fun+0x1a>
 8010448:	3847      	subs	r0, #71	; 0x47
 801044a:	e7f7      	b.n	801043c <__hexdig_fun+0xa>
 801044c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010450:	2b05      	cmp	r3, #5
 8010452:	d801      	bhi.n	8010458 <__hexdig_fun+0x26>
 8010454:	3827      	subs	r0, #39	; 0x27
 8010456:	e7f1      	b.n	801043c <__hexdig_fun+0xa>
 8010458:	2000      	movs	r0, #0
 801045a:	4770      	bx	lr

0801045c <__gethex>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	4617      	mov	r7, r2
 8010462:	680a      	ldr	r2, [r1, #0]
 8010464:	b085      	sub	sp, #20
 8010466:	f102 0b02 	add.w	fp, r2, #2
 801046a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801046e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010472:	4681      	mov	r9, r0
 8010474:	468a      	mov	sl, r1
 8010476:	9302      	str	r3, [sp, #8]
 8010478:	32fe      	adds	r2, #254	; 0xfe
 801047a:	eb02 030b 	add.w	r3, r2, fp
 801047e:	46d8      	mov	r8, fp
 8010480:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010484:	9301      	str	r3, [sp, #4]
 8010486:	2830      	cmp	r0, #48	; 0x30
 8010488:	d0f7      	beq.n	801047a <__gethex+0x1e>
 801048a:	f7ff ffd2 	bl	8010432 <__hexdig_fun>
 801048e:	4604      	mov	r4, r0
 8010490:	2800      	cmp	r0, #0
 8010492:	d138      	bne.n	8010506 <__gethex+0xaa>
 8010494:	49a7      	ldr	r1, [pc, #668]	; (8010734 <__gethex+0x2d8>)
 8010496:	2201      	movs	r2, #1
 8010498:	4640      	mov	r0, r8
 801049a:	f7ff fee7 	bl	801026c <strncmp>
 801049e:	4606      	mov	r6, r0
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d169      	bne.n	8010578 <__gethex+0x11c>
 80104a4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80104a8:	465d      	mov	r5, fp
 80104aa:	f7ff ffc2 	bl	8010432 <__hexdig_fun>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	d064      	beq.n	801057c <__gethex+0x120>
 80104b2:	465a      	mov	r2, fp
 80104b4:	7810      	ldrb	r0, [r2, #0]
 80104b6:	2830      	cmp	r0, #48	; 0x30
 80104b8:	4690      	mov	r8, r2
 80104ba:	f102 0201 	add.w	r2, r2, #1
 80104be:	d0f9      	beq.n	80104b4 <__gethex+0x58>
 80104c0:	f7ff ffb7 	bl	8010432 <__hexdig_fun>
 80104c4:	2301      	movs	r3, #1
 80104c6:	fab0 f480 	clz	r4, r0
 80104ca:	0964      	lsrs	r4, r4, #5
 80104cc:	465e      	mov	r6, fp
 80104ce:	9301      	str	r3, [sp, #4]
 80104d0:	4642      	mov	r2, r8
 80104d2:	4615      	mov	r5, r2
 80104d4:	3201      	adds	r2, #1
 80104d6:	7828      	ldrb	r0, [r5, #0]
 80104d8:	f7ff ffab 	bl	8010432 <__hexdig_fun>
 80104dc:	2800      	cmp	r0, #0
 80104de:	d1f8      	bne.n	80104d2 <__gethex+0x76>
 80104e0:	4994      	ldr	r1, [pc, #592]	; (8010734 <__gethex+0x2d8>)
 80104e2:	2201      	movs	r2, #1
 80104e4:	4628      	mov	r0, r5
 80104e6:	f7ff fec1 	bl	801026c <strncmp>
 80104ea:	b978      	cbnz	r0, 801050c <__gethex+0xb0>
 80104ec:	b946      	cbnz	r6, 8010500 <__gethex+0xa4>
 80104ee:	1c6e      	adds	r6, r5, #1
 80104f0:	4632      	mov	r2, r6
 80104f2:	4615      	mov	r5, r2
 80104f4:	3201      	adds	r2, #1
 80104f6:	7828      	ldrb	r0, [r5, #0]
 80104f8:	f7ff ff9b 	bl	8010432 <__hexdig_fun>
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d1f8      	bne.n	80104f2 <__gethex+0x96>
 8010500:	1b73      	subs	r3, r6, r5
 8010502:	009e      	lsls	r6, r3, #2
 8010504:	e004      	b.n	8010510 <__gethex+0xb4>
 8010506:	2400      	movs	r4, #0
 8010508:	4626      	mov	r6, r4
 801050a:	e7e1      	b.n	80104d0 <__gethex+0x74>
 801050c:	2e00      	cmp	r6, #0
 801050e:	d1f7      	bne.n	8010500 <__gethex+0xa4>
 8010510:	782b      	ldrb	r3, [r5, #0]
 8010512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010516:	2b50      	cmp	r3, #80	; 0x50
 8010518:	d13d      	bne.n	8010596 <__gethex+0x13a>
 801051a:	786b      	ldrb	r3, [r5, #1]
 801051c:	2b2b      	cmp	r3, #43	; 0x2b
 801051e:	d02f      	beq.n	8010580 <__gethex+0x124>
 8010520:	2b2d      	cmp	r3, #45	; 0x2d
 8010522:	d031      	beq.n	8010588 <__gethex+0x12c>
 8010524:	1c69      	adds	r1, r5, #1
 8010526:	f04f 0b00 	mov.w	fp, #0
 801052a:	7808      	ldrb	r0, [r1, #0]
 801052c:	f7ff ff81 	bl	8010432 <__hexdig_fun>
 8010530:	1e42      	subs	r2, r0, #1
 8010532:	b2d2      	uxtb	r2, r2
 8010534:	2a18      	cmp	r2, #24
 8010536:	d82e      	bhi.n	8010596 <__gethex+0x13a>
 8010538:	f1a0 0210 	sub.w	r2, r0, #16
 801053c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010540:	f7ff ff77 	bl	8010432 <__hexdig_fun>
 8010544:	f100 3cff 	add.w	ip, r0, #4294967295
 8010548:	fa5f fc8c 	uxtb.w	ip, ip
 801054c:	f1bc 0f18 	cmp.w	ip, #24
 8010550:	d91d      	bls.n	801058e <__gethex+0x132>
 8010552:	f1bb 0f00 	cmp.w	fp, #0
 8010556:	d000      	beq.n	801055a <__gethex+0xfe>
 8010558:	4252      	negs	r2, r2
 801055a:	4416      	add	r6, r2
 801055c:	f8ca 1000 	str.w	r1, [sl]
 8010560:	b1dc      	cbz	r4, 801059a <__gethex+0x13e>
 8010562:	9b01      	ldr	r3, [sp, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	bf14      	ite	ne
 8010568:	f04f 0800 	movne.w	r8, #0
 801056c:	f04f 0806 	moveq.w	r8, #6
 8010570:	4640      	mov	r0, r8
 8010572:	b005      	add	sp, #20
 8010574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010578:	4645      	mov	r5, r8
 801057a:	4626      	mov	r6, r4
 801057c:	2401      	movs	r4, #1
 801057e:	e7c7      	b.n	8010510 <__gethex+0xb4>
 8010580:	f04f 0b00 	mov.w	fp, #0
 8010584:	1ca9      	adds	r1, r5, #2
 8010586:	e7d0      	b.n	801052a <__gethex+0xce>
 8010588:	f04f 0b01 	mov.w	fp, #1
 801058c:	e7fa      	b.n	8010584 <__gethex+0x128>
 801058e:	230a      	movs	r3, #10
 8010590:	fb03 0002 	mla	r0, r3, r2, r0
 8010594:	e7d0      	b.n	8010538 <__gethex+0xdc>
 8010596:	4629      	mov	r1, r5
 8010598:	e7e0      	b.n	801055c <__gethex+0x100>
 801059a:	eba5 0308 	sub.w	r3, r5, r8
 801059e:	3b01      	subs	r3, #1
 80105a0:	4621      	mov	r1, r4
 80105a2:	2b07      	cmp	r3, #7
 80105a4:	dc0a      	bgt.n	80105bc <__gethex+0x160>
 80105a6:	4648      	mov	r0, r9
 80105a8:	f7fd fea2 	bl	800e2f0 <_Balloc>
 80105ac:	4604      	mov	r4, r0
 80105ae:	b940      	cbnz	r0, 80105c2 <__gethex+0x166>
 80105b0:	4b61      	ldr	r3, [pc, #388]	; (8010738 <__gethex+0x2dc>)
 80105b2:	4602      	mov	r2, r0
 80105b4:	21e4      	movs	r1, #228	; 0xe4
 80105b6:	4861      	ldr	r0, [pc, #388]	; (801073c <__gethex+0x2e0>)
 80105b8:	f7ff fe96 	bl	80102e8 <__assert_func>
 80105bc:	3101      	adds	r1, #1
 80105be:	105b      	asrs	r3, r3, #1
 80105c0:	e7ef      	b.n	80105a2 <__gethex+0x146>
 80105c2:	f100 0a14 	add.w	sl, r0, #20
 80105c6:	2300      	movs	r3, #0
 80105c8:	495a      	ldr	r1, [pc, #360]	; (8010734 <__gethex+0x2d8>)
 80105ca:	f8cd a004 	str.w	sl, [sp, #4]
 80105ce:	469b      	mov	fp, r3
 80105d0:	45a8      	cmp	r8, r5
 80105d2:	d342      	bcc.n	801065a <__gethex+0x1fe>
 80105d4:	9801      	ldr	r0, [sp, #4]
 80105d6:	f840 bb04 	str.w	fp, [r0], #4
 80105da:	eba0 000a 	sub.w	r0, r0, sl
 80105de:	1080      	asrs	r0, r0, #2
 80105e0:	6120      	str	r0, [r4, #16]
 80105e2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80105e6:	4658      	mov	r0, fp
 80105e8:	f7fd ff40 	bl	800e46c <__hi0bits>
 80105ec:	683d      	ldr	r5, [r7, #0]
 80105ee:	eba8 0000 	sub.w	r0, r8, r0
 80105f2:	42a8      	cmp	r0, r5
 80105f4:	dd59      	ble.n	80106aa <__gethex+0x24e>
 80105f6:	eba0 0805 	sub.w	r8, r0, r5
 80105fa:	4641      	mov	r1, r8
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7fe fab5 	bl	800eb6c <__any_on>
 8010602:	4683      	mov	fp, r0
 8010604:	b1b8      	cbz	r0, 8010636 <__gethex+0x1da>
 8010606:	f108 33ff 	add.w	r3, r8, #4294967295
 801060a:	1159      	asrs	r1, r3, #5
 801060c:	f003 021f 	and.w	r2, r3, #31
 8010610:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010614:	f04f 0b01 	mov.w	fp, #1
 8010618:	fa0b f202 	lsl.w	r2, fp, r2
 801061c:	420a      	tst	r2, r1
 801061e:	d00a      	beq.n	8010636 <__gethex+0x1da>
 8010620:	455b      	cmp	r3, fp
 8010622:	dd06      	ble.n	8010632 <__gethex+0x1d6>
 8010624:	f1a8 0102 	sub.w	r1, r8, #2
 8010628:	4620      	mov	r0, r4
 801062a:	f7fe fa9f 	bl	800eb6c <__any_on>
 801062e:	2800      	cmp	r0, #0
 8010630:	d138      	bne.n	80106a4 <__gethex+0x248>
 8010632:	f04f 0b02 	mov.w	fp, #2
 8010636:	4641      	mov	r1, r8
 8010638:	4620      	mov	r0, r4
 801063a:	f7ff fea8 	bl	801038e <rshift>
 801063e:	4446      	add	r6, r8
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	42b3      	cmp	r3, r6
 8010644:	da41      	bge.n	80106ca <__gethex+0x26e>
 8010646:	4621      	mov	r1, r4
 8010648:	4648      	mov	r0, r9
 801064a:	f7fd fe76 	bl	800e33a <_Bfree>
 801064e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010650:	2300      	movs	r3, #0
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010658:	e78a      	b.n	8010570 <__gethex+0x114>
 801065a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801065e:	2a2e      	cmp	r2, #46	; 0x2e
 8010660:	d014      	beq.n	801068c <__gethex+0x230>
 8010662:	2b20      	cmp	r3, #32
 8010664:	d106      	bne.n	8010674 <__gethex+0x218>
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	f843 bb04 	str.w	fp, [r3], #4
 801066c:	f04f 0b00 	mov.w	fp, #0
 8010670:	9301      	str	r3, [sp, #4]
 8010672:	465b      	mov	r3, fp
 8010674:	7828      	ldrb	r0, [r5, #0]
 8010676:	9303      	str	r3, [sp, #12]
 8010678:	f7ff fedb 	bl	8010432 <__hexdig_fun>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	f000 000f 	and.w	r0, r0, #15
 8010682:	4098      	lsls	r0, r3
 8010684:	ea4b 0b00 	orr.w	fp, fp, r0
 8010688:	3304      	adds	r3, #4
 801068a:	e7a1      	b.n	80105d0 <__gethex+0x174>
 801068c:	45a8      	cmp	r8, r5
 801068e:	d8e8      	bhi.n	8010662 <__gethex+0x206>
 8010690:	2201      	movs	r2, #1
 8010692:	4628      	mov	r0, r5
 8010694:	9303      	str	r3, [sp, #12]
 8010696:	f7ff fde9 	bl	801026c <strncmp>
 801069a:	4926      	ldr	r1, [pc, #152]	; (8010734 <__gethex+0x2d8>)
 801069c:	9b03      	ldr	r3, [sp, #12]
 801069e:	2800      	cmp	r0, #0
 80106a0:	d1df      	bne.n	8010662 <__gethex+0x206>
 80106a2:	e795      	b.n	80105d0 <__gethex+0x174>
 80106a4:	f04f 0b03 	mov.w	fp, #3
 80106a8:	e7c5      	b.n	8010636 <__gethex+0x1da>
 80106aa:	da0b      	bge.n	80106c4 <__gethex+0x268>
 80106ac:	eba5 0800 	sub.w	r8, r5, r0
 80106b0:	4621      	mov	r1, r4
 80106b2:	4642      	mov	r2, r8
 80106b4:	4648      	mov	r0, r9
 80106b6:	f7fe f827 	bl	800e708 <__lshift>
 80106ba:	eba6 0608 	sub.w	r6, r6, r8
 80106be:	4604      	mov	r4, r0
 80106c0:	f100 0a14 	add.w	sl, r0, #20
 80106c4:	f04f 0b00 	mov.w	fp, #0
 80106c8:	e7ba      	b.n	8010640 <__gethex+0x1e4>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	42b3      	cmp	r3, r6
 80106ce:	dd73      	ble.n	80107b8 <__gethex+0x35c>
 80106d0:	1b9e      	subs	r6, r3, r6
 80106d2:	42b5      	cmp	r5, r6
 80106d4:	dc34      	bgt.n	8010740 <__gethex+0x2e4>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b02      	cmp	r3, #2
 80106da:	d023      	beq.n	8010724 <__gethex+0x2c8>
 80106dc:	2b03      	cmp	r3, #3
 80106de:	d025      	beq.n	801072c <__gethex+0x2d0>
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d115      	bne.n	8010710 <__gethex+0x2b4>
 80106e4:	42b5      	cmp	r5, r6
 80106e6:	d113      	bne.n	8010710 <__gethex+0x2b4>
 80106e8:	2d01      	cmp	r5, #1
 80106ea:	d10b      	bne.n	8010704 <__gethex+0x2a8>
 80106ec:	9a02      	ldr	r2, [sp, #8]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6013      	str	r3, [r2, #0]
 80106f2:	2301      	movs	r3, #1
 80106f4:	6123      	str	r3, [r4, #16]
 80106f6:	f8ca 3000 	str.w	r3, [sl]
 80106fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106fc:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010700:	601c      	str	r4, [r3, #0]
 8010702:	e735      	b.n	8010570 <__gethex+0x114>
 8010704:	1e69      	subs	r1, r5, #1
 8010706:	4620      	mov	r0, r4
 8010708:	f7fe fa30 	bl	800eb6c <__any_on>
 801070c:	2800      	cmp	r0, #0
 801070e:	d1ed      	bne.n	80106ec <__gethex+0x290>
 8010710:	4621      	mov	r1, r4
 8010712:	4648      	mov	r0, r9
 8010714:	f7fd fe11 	bl	800e33a <_Bfree>
 8010718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801071a:	2300      	movs	r3, #0
 801071c:	6013      	str	r3, [r2, #0]
 801071e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010722:	e725      	b.n	8010570 <__gethex+0x114>
 8010724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1f2      	bne.n	8010710 <__gethex+0x2b4>
 801072a:	e7df      	b.n	80106ec <__gethex+0x290>
 801072c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801072e:	2b00      	cmp	r3, #0
 8010730:	d1dc      	bne.n	80106ec <__gethex+0x290>
 8010732:	e7ed      	b.n	8010710 <__gethex+0x2b4>
 8010734:	08011978 	.word	0x08011978
 8010738:	08011987 	.word	0x08011987
 801073c:	08011cdd 	.word	0x08011cdd
 8010740:	f106 38ff 	add.w	r8, r6, #4294967295
 8010744:	f1bb 0f00 	cmp.w	fp, #0
 8010748:	d133      	bne.n	80107b2 <__gethex+0x356>
 801074a:	f1b8 0f00 	cmp.w	r8, #0
 801074e:	d004      	beq.n	801075a <__gethex+0x2fe>
 8010750:	4641      	mov	r1, r8
 8010752:	4620      	mov	r0, r4
 8010754:	f7fe fa0a 	bl	800eb6c <__any_on>
 8010758:	4683      	mov	fp, r0
 801075a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801075e:	2301      	movs	r3, #1
 8010760:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010764:	f008 081f 	and.w	r8, r8, #31
 8010768:	fa03 f308 	lsl.w	r3, r3, r8
 801076c:	4213      	tst	r3, r2
 801076e:	4631      	mov	r1, r6
 8010770:	4620      	mov	r0, r4
 8010772:	bf18      	it	ne
 8010774:	f04b 0b02 	orrne.w	fp, fp, #2
 8010778:	1bad      	subs	r5, r5, r6
 801077a:	f7ff fe08 	bl	801038e <rshift>
 801077e:	687e      	ldr	r6, [r7, #4]
 8010780:	f04f 0802 	mov.w	r8, #2
 8010784:	f1bb 0f00 	cmp.w	fp, #0
 8010788:	d04a      	beq.n	8010820 <__gethex+0x3c4>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2b02      	cmp	r3, #2
 801078e:	d016      	beq.n	80107be <__gethex+0x362>
 8010790:	2b03      	cmp	r3, #3
 8010792:	d018      	beq.n	80107c6 <__gethex+0x36a>
 8010794:	2b01      	cmp	r3, #1
 8010796:	d109      	bne.n	80107ac <__gethex+0x350>
 8010798:	f01b 0f02 	tst.w	fp, #2
 801079c:	d006      	beq.n	80107ac <__gethex+0x350>
 801079e:	f8da 3000 	ldr.w	r3, [sl]
 80107a2:	ea4b 0b03 	orr.w	fp, fp, r3
 80107a6:	f01b 0f01 	tst.w	fp, #1
 80107aa:	d10f      	bne.n	80107cc <__gethex+0x370>
 80107ac:	f048 0810 	orr.w	r8, r8, #16
 80107b0:	e036      	b.n	8010820 <__gethex+0x3c4>
 80107b2:	f04f 0b01 	mov.w	fp, #1
 80107b6:	e7d0      	b.n	801075a <__gethex+0x2fe>
 80107b8:	f04f 0801 	mov.w	r8, #1
 80107bc:	e7e2      	b.n	8010784 <__gethex+0x328>
 80107be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107c0:	f1c3 0301 	rsb	r3, r3, #1
 80107c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80107c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d0ef      	beq.n	80107ac <__gethex+0x350>
 80107cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80107d0:	f104 0214 	add.w	r2, r4, #20
 80107d4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80107d8:	9301      	str	r3, [sp, #4]
 80107da:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80107de:	2300      	movs	r3, #0
 80107e0:	4694      	mov	ip, r2
 80107e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80107e6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80107ea:	d01e      	beq.n	801082a <__gethex+0x3ce>
 80107ec:	3101      	adds	r1, #1
 80107ee:	f8cc 1000 	str.w	r1, [ip]
 80107f2:	f1b8 0f02 	cmp.w	r8, #2
 80107f6:	f104 0214 	add.w	r2, r4, #20
 80107fa:	d13d      	bne.n	8010878 <__gethex+0x41c>
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	3b01      	subs	r3, #1
 8010800:	42ab      	cmp	r3, r5
 8010802:	d10b      	bne.n	801081c <__gethex+0x3c0>
 8010804:	1169      	asrs	r1, r5, #5
 8010806:	2301      	movs	r3, #1
 8010808:	f005 051f 	and.w	r5, r5, #31
 801080c:	fa03 f505 	lsl.w	r5, r3, r5
 8010810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010814:	421d      	tst	r5, r3
 8010816:	bf18      	it	ne
 8010818:	f04f 0801 	movne.w	r8, #1
 801081c:	f048 0820 	orr.w	r8, r8, #32
 8010820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010822:	601c      	str	r4, [r3, #0]
 8010824:	9b02      	ldr	r3, [sp, #8]
 8010826:	601e      	str	r6, [r3, #0]
 8010828:	e6a2      	b.n	8010570 <__gethex+0x114>
 801082a:	4290      	cmp	r0, r2
 801082c:	f842 3c04 	str.w	r3, [r2, #-4]
 8010830:	d8d6      	bhi.n	80107e0 <__gethex+0x384>
 8010832:	68a2      	ldr	r2, [r4, #8]
 8010834:	4593      	cmp	fp, r2
 8010836:	db17      	blt.n	8010868 <__gethex+0x40c>
 8010838:	6861      	ldr	r1, [r4, #4]
 801083a:	4648      	mov	r0, r9
 801083c:	3101      	adds	r1, #1
 801083e:	f7fd fd57 	bl	800e2f0 <_Balloc>
 8010842:	4682      	mov	sl, r0
 8010844:	b918      	cbnz	r0, 801084e <__gethex+0x3f2>
 8010846:	4b1b      	ldr	r3, [pc, #108]	; (80108b4 <__gethex+0x458>)
 8010848:	4602      	mov	r2, r0
 801084a:	2184      	movs	r1, #132	; 0x84
 801084c:	e6b3      	b.n	80105b6 <__gethex+0x15a>
 801084e:	6922      	ldr	r2, [r4, #16]
 8010850:	3202      	adds	r2, #2
 8010852:	f104 010c 	add.w	r1, r4, #12
 8010856:	0092      	lsls	r2, r2, #2
 8010858:	300c      	adds	r0, #12
 801085a:	f7fc fe3d 	bl	800d4d8 <memcpy>
 801085e:	4621      	mov	r1, r4
 8010860:	4648      	mov	r0, r9
 8010862:	f7fd fd6a 	bl	800e33a <_Bfree>
 8010866:	4654      	mov	r4, sl
 8010868:	6922      	ldr	r2, [r4, #16]
 801086a:	1c51      	adds	r1, r2, #1
 801086c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010870:	6121      	str	r1, [r4, #16]
 8010872:	2101      	movs	r1, #1
 8010874:	6151      	str	r1, [r2, #20]
 8010876:	e7bc      	b.n	80107f2 <__gethex+0x396>
 8010878:	6921      	ldr	r1, [r4, #16]
 801087a:	4559      	cmp	r1, fp
 801087c:	dd0b      	ble.n	8010896 <__gethex+0x43a>
 801087e:	2101      	movs	r1, #1
 8010880:	4620      	mov	r0, r4
 8010882:	f7ff fd84 	bl	801038e <rshift>
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	3601      	adds	r6, #1
 801088a:	42b3      	cmp	r3, r6
 801088c:	f6ff aedb 	blt.w	8010646 <__gethex+0x1ea>
 8010890:	f04f 0801 	mov.w	r8, #1
 8010894:	e7c2      	b.n	801081c <__gethex+0x3c0>
 8010896:	f015 051f 	ands.w	r5, r5, #31
 801089a:	d0f9      	beq.n	8010890 <__gethex+0x434>
 801089c:	9b01      	ldr	r3, [sp, #4]
 801089e:	441a      	add	r2, r3
 80108a0:	f1c5 0520 	rsb	r5, r5, #32
 80108a4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80108a8:	f7fd fde0 	bl	800e46c <__hi0bits>
 80108ac:	42a8      	cmp	r0, r5
 80108ae:	dbe6      	blt.n	801087e <__gethex+0x422>
 80108b0:	e7ee      	b.n	8010890 <__gethex+0x434>
 80108b2:	bf00      	nop
 80108b4:	08011987 	.word	0x08011987

080108b8 <L_shift>:
 80108b8:	f1c2 0208 	rsb	r2, r2, #8
 80108bc:	0092      	lsls	r2, r2, #2
 80108be:	b570      	push	{r4, r5, r6, lr}
 80108c0:	f1c2 0620 	rsb	r6, r2, #32
 80108c4:	6843      	ldr	r3, [r0, #4]
 80108c6:	6804      	ldr	r4, [r0, #0]
 80108c8:	fa03 f506 	lsl.w	r5, r3, r6
 80108cc:	432c      	orrs	r4, r5
 80108ce:	40d3      	lsrs	r3, r2
 80108d0:	6004      	str	r4, [r0, #0]
 80108d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80108d6:	4288      	cmp	r0, r1
 80108d8:	d3f4      	bcc.n	80108c4 <L_shift+0xc>
 80108da:	bd70      	pop	{r4, r5, r6, pc}

080108dc <__match>:
 80108dc:	b530      	push	{r4, r5, lr}
 80108de:	6803      	ldr	r3, [r0, #0]
 80108e0:	3301      	adds	r3, #1
 80108e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108e6:	b914      	cbnz	r4, 80108ee <__match+0x12>
 80108e8:	6003      	str	r3, [r0, #0]
 80108ea:	2001      	movs	r0, #1
 80108ec:	bd30      	pop	{r4, r5, pc}
 80108ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80108f6:	2d19      	cmp	r5, #25
 80108f8:	bf98      	it	ls
 80108fa:	3220      	addls	r2, #32
 80108fc:	42a2      	cmp	r2, r4
 80108fe:	d0f0      	beq.n	80108e2 <__match+0x6>
 8010900:	2000      	movs	r0, #0
 8010902:	e7f3      	b.n	80108ec <__match+0x10>

08010904 <__hexnan>:
 8010904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010908:	680b      	ldr	r3, [r1, #0]
 801090a:	6801      	ldr	r1, [r0, #0]
 801090c:	115e      	asrs	r6, r3, #5
 801090e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010912:	f013 031f 	ands.w	r3, r3, #31
 8010916:	b087      	sub	sp, #28
 8010918:	bf18      	it	ne
 801091a:	3604      	addne	r6, #4
 801091c:	2500      	movs	r5, #0
 801091e:	1f37      	subs	r7, r6, #4
 8010920:	4682      	mov	sl, r0
 8010922:	4690      	mov	r8, r2
 8010924:	9301      	str	r3, [sp, #4]
 8010926:	f846 5c04 	str.w	r5, [r6, #-4]
 801092a:	46b9      	mov	r9, r7
 801092c:	463c      	mov	r4, r7
 801092e:	9502      	str	r5, [sp, #8]
 8010930:	46ab      	mov	fp, r5
 8010932:	784a      	ldrb	r2, [r1, #1]
 8010934:	1c4b      	adds	r3, r1, #1
 8010936:	9303      	str	r3, [sp, #12]
 8010938:	b342      	cbz	r2, 801098c <__hexnan+0x88>
 801093a:	4610      	mov	r0, r2
 801093c:	9105      	str	r1, [sp, #20]
 801093e:	9204      	str	r2, [sp, #16]
 8010940:	f7ff fd77 	bl	8010432 <__hexdig_fun>
 8010944:	2800      	cmp	r0, #0
 8010946:	d14f      	bne.n	80109e8 <__hexnan+0xe4>
 8010948:	9a04      	ldr	r2, [sp, #16]
 801094a:	9905      	ldr	r1, [sp, #20]
 801094c:	2a20      	cmp	r2, #32
 801094e:	d818      	bhi.n	8010982 <__hexnan+0x7e>
 8010950:	9b02      	ldr	r3, [sp, #8]
 8010952:	459b      	cmp	fp, r3
 8010954:	dd13      	ble.n	801097e <__hexnan+0x7a>
 8010956:	454c      	cmp	r4, r9
 8010958:	d206      	bcs.n	8010968 <__hexnan+0x64>
 801095a:	2d07      	cmp	r5, #7
 801095c:	dc04      	bgt.n	8010968 <__hexnan+0x64>
 801095e:	462a      	mov	r2, r5
 8010960:	4649      	mov	r1, r9
 8010962:	4620      	mov	r0, r4
 8010964:	f7ff ffa8 	bl	80108b8 <L_shift>
 8010968:	4544      	cmp	r4, r8
 801096a:	d950      	bls.n	8010a0e <__hexnan+0x10a>
 801096c:	2300      	movs	r3, #0
 801096e:	f1a4 0904 	sub.w	r9, r4, #4
 8010972:	f844 3c04 	str.w	r3, [r4, #-4]
 8010976:	f8cd b008 	str.w	fp, [sp, #8]
 801097a:	464c      	mov	r4, r9
 801097c:	461d      	mov	r5, r3
 801097e:	9903      	ldr	r1, [sp, #12]
 8010980:	e7d7      	b.n	8010932 <__hexnan+0x2e>
 8010982:	2a29      	cmp	r2, #41	; 0x29
 8010984:	d155      	bne.n	8010a32 <__hexnan+0x12e>
 8010986:	3102      	adds	r1, #2
 8010988:	f8ca 1000 	str.w	r1, [sl]
 801098c:	f1bb 0f00 	cmp.w	fp, #0
 8010990:	d04f      	beq.n	8010a32 <__hexnan+0x12e>
 8010992:	454c      	cmp	r4, r9
 8010994:	d206      	bcs.n	80109a4 <__hexnan+0xa0>
 8010996:	2d07      	cmp	r5, #7
 8010998:	dc04      	bgt.n	80109a4 <__hexnan+0xa0>
 801099a:	462a      	mov	r2, r5
 801099c:	4649      	mov	r1, r9
 801099e:	4620      	mov	r0, r4
 80109a0:	f7ff ff8a 	bl	80108b8 <L_shift>
 80109a4:	4544      	cmp	r4, r8
 80109a6:	d934      	bls.n	8010a12 <__hexnan+0x10e>
 80109a8:	f1a8 0204 	sub.w	r2, r8, #4
 80109ac:	4623      	mov	r3, r4
 80109ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80109b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80109b6:	429f      	cmp	r7, r3
 80109b8:	d2f9      	bcs.n	80109ae <__hexnan+0xaa>
 80109ba:	1b3b      	subs	r3, r7, r4
 80109bc:	f023 0303 	bic.w	r3, r3, #3
 80109c0:	3304      	adds	r3, #4
 80109c2:	3e03      	subs	r6, #3
 80109c4:	3401      	adds	r4, #1
 80109c6:	42a6      	cmp	r6, r4
 80109c8:	bf38      	it	cc
 80109ca:	2304      	movcc	r3, #4
 80109cc:	4443      	add	r3, r8
 80109ce:	2200      	movs	r2, #0
 80109d0:	f843 2b04 	str.w	r2, [r3], #4
 80109d4:	429f      	cmp	r7, r3
 80109d6:	d2fb      	bcs.n	80109d0 <__hexnan+0xcc>
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	b91b      	cbnz	r3, 80109e4 <__hexnan+0xe0>
 80109dc:	4547      	cmp	r7, r8
 80109de:	d126      	bne.n	8010a2e <__hexnan+0x12a>
 80109e0:	2301      	movs	r3, #1
 80109e2:	603b      	str	r3, [r7, #0]
 80109e4:	2005      	movs	r0, #5
 80109e6:	e025      	b.n	8010a34 <__hexnan+0x130>
 80109e8:	3501      	adds	r5, #1
 80109ea:	2d08      	cmp	r5, #8
 80109ec:	f10b 0b01 	add.w	fp, fp, #1
 80109f0:	dd06      	ble.n	8010a00 <__hexnan+0xfc>
 80109f2:	4544      	cmp	r4, r8
 80109f4:	d9c3      	bls.n	801097e <__hexnan+0x7a>
 80109f6:	2300      	movs	r3, #0
 80109f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80109fc:	2501      	movs	r5, #1
 80109fe:	3c04      	subs	r4, #4
 8010a00:	6822      	ldr	r2, [r4, #0]
 8010a02:	f000 000f 	and.w	r0, r0, #15
 8010a06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010a0a:	6020      	str	r0, [r4, #0]
 8010a0c:	e7b7      	b.n	801097e <__hexnan+0x7a>
 8010a0e:	2508      	movs	r5, #8
 8010a10:	e7b5      	b.n	801097e <__hexnan+0x7a>
 8010a12:	9b01      	ldr	r3, [sp, #4]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d0df      	beq.n	80109d8 <__hexnan+0xd4>
 8010a18:	f1c3 0320 	rsb	r3, r3, #32
 8010a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a20:	40da      	lsrs	r2, r3
 8010a22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010a26:	4013      	ands	r3, r2
 8010a28:	f846 3c04 	str.w	r3, [r6, #-4]
 8010a2c:	e7d4      	b.n	80109d8 <__hexnan+0xd4>
 8010a2e:	3f04      	subs	r7, #4
 8010a30:	e7d2      	b.n	80109d8 <__hexnan+0xd4>
 8010a32:	2004      	movs	r0, #4
 8010a34:	b007      	add	sp, #28
 8010a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010a3c <fiprintf>:
 8010a3c:	b40e      	push	{r1, r2, r3}
 8010a3e:	b503      	push	{r0, r1, lr}
 8010a40:	4601      	mov	r1, r0
 8010a42:	ab03      	add	r3, sp, #12
 8010a44:	4805      	ldr	r0, [pc, #20]	; (8010a5c <fiprintf+0x20>)
 8010a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a4a:	6800      	ldr	r0, [r0, #0]
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	f7fa f8fd 	bl	800ac4c <_vfiprintf_r>
 8010a52:	b002      	add	sp, #8
 8010a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a58:	b003      	add	sp, #12
 8010a5a:	4770      	bx	lr
 8010a5c:	20000148 	.word	0x20000148

08010a60 <abort>:
 8010a60:	b508      	push	{r3, lr}
 8010a62:	2006      	movs	r0, #6
 8010a64:	f000 f82c 	bl	8010ac0 <raise>
 8010a68:	2001      	movs	r0, #1
 8010a6a:	f7f2 f8d7 	bl	8002c1c <_exit>

08010a6e <_raise_r>:
 8010a6e:	291f      	cmp	r1, #31
 8010a70:	b538      	push	{r3, r4, r5, lr}
 8010a72:	4604      	mov	r4, r0
 8010a74:	460d      	mov	r5, r1
 8010a76:	d904      	bls.n	8010a82 <_raise_r+0x14>
 8010a78:	2316      	movs	r3, #22
 8010a7a:	6003      	str	r3, [r0, #0]
 8010a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a80:	bd38      	pop	{r3, r4, r5, pc}
 8010a82:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 8010a86:	b112      	cbz	r2, 8010a8e <_raise_r+0x20>
 8010a88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010a8c:	b94b      	cbnz	r3, 8010aa2 <_raise_r+0x34>
 8010a8e:	4620      	mov	r0, r4
 8010a90:	f000 f830 	bl	8010af4 <_getpid_r>
 8010a94:	462a      	mov	r2, r5
 8010a96:	4601      	mov	r1, r0
 8010a98:	4620      	mov	r0, r4
 8010a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a9e:	f000 b817 	b.w	8010ad0 <_kill_r>
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d00a      	beq.n	8010abc <_raise_r+0x4e>
 8010aa6:	1c59      	adds	r1, r3, #1
 8010aa8:	d103      	bne.n	8010ab2 <_raise_r+0x44>
 8010aaa:	2316      	movs	r3, #22
 8010aac:	6003      	str	r3, [r0, #0]
 8010aae:	2001      	movs	r0, #1
 8010ab0:	e7e6      	b.n	8010a80 <_raise_r+0x12>
 8010ab2:	2400      	movs	r4, #0
 8010ab4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ab8:	4628      	mov	r0, r5
 8010aba:	4798      	blx	r3
 8010abc:	2000      	movs	r0, #0
 8010abe:	e7df      	b.n	8010a80 <_raise_r+0x12>

08010ac0 <raise>:
 8010ac0:	4b02      	ldr	r3, [pc, #8]	; (8010acc <raise+0xc>)
 8010ac2:	4601      	mov	r1, r0
 8010ac4:	6818      	ldr	r0, [r3, #0]
 8010ac6:	f7ff bfd2 	b.w	8010a6e <_raise_r>
 8010aca:	bf00      	nop
 8010acc:	20000148 	.word	0x20000148

08010ad0 <_kill_r>:
 8010ad0:	b538      	push	{r3, r4, r5, lr}
 8010ad2:	4d07      	ldr	r5, [pc, #28]	; (8010af0 <_kill_r+0x20>)
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	4608      	mov	r0, r1
 8010ada:	4611      	mov	r1, r2
 8010adc:	602b      	str	r3, [r5, #0]
 8010ade:	f7f2 f88d 	bl	8002bfc <_kill>
 8010ae2:	1c43      	adds	r3, r0, #1
 8010ae4:	d102      	bne.n	8010aec <_kill_r+0x1c>
 8010ae6:	682b      	ldr	r3, [r5, #0]
 8010ae8:	b103      	cbz	r3, 8010aec <_kill_r+0x1c>
 8010aea:	6023      	str	r3, [r4, #0]
 8010aec:	bd38      	pop	{r3, r4, r5, pc}
 8010aee:	bf00      	nop
 8010af0:	20000a40 	.word	0x20000a40

08010af4 <_getpid_r>:
 8010af4:	f7f2 b87a 	b.w	8002bec <_getpid>

08010af8 <_init>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	bf00      	nop
 8010afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010afe:	bc08      	pop	{r3}
 8010b00:	469e      	mov	lr, r3
 8010b02:	4770      	bx	lr

08010b04 <_fini>:
 8010b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b06:	bf00      	nop
 8010b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b0a:	bc08      	pop	{r3}
 8010b0c:	469e      	mov	lr, r3
 8010b0e:	4770      	bx	lr
