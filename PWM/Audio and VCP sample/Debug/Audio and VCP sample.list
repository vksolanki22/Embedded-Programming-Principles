
Audio and VCP sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006280  08006280  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006280  08006280  00016280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000090  08006318  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006318  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dad7  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212e  00000000  00000000  0002dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  0002fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc7  00000000  00000000  00030c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d4f  00000000  00000000  0003181f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107a2  00000000  00000000  0005356e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc6b3  00000000  00000000  00063d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b28  00000000  00000000  001303c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00134eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ec0 	.word	0x08005ec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005ec0 	.word	0x08005ec0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <changeSpeakerFrequency>:
  * DESCRIPTION   : Control the frequency on TIM1 PWM output on PA7
  *
  * ******************************************************************************
  */
static void changeSpeakerFrequency(TIM_HandleTypeDef *htim,
		uint32_t newFrequency) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b09c      	sub	sp, #112	; 0x70
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]

	//HAL_TIMEx_PWMN_Stop(htim, TIM_CHANNEL_1);

	// calculate the new period based off of frequency input
	uint32_t newPeriod = 1000000000 / (newFrequency * 250);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	22fa      	movs	r2, #250	; 0xfa
 800057a:	fb02 f303 	mul.w	r3, r2, r3
 800057e:	4a58      	ldr	r2, [pc, #352]	; (80006e0 <changeSpeakerFrequency+0x174>)
 8000580:	fbb2 f3f3 	udiv	r3, r2, r3
 8000584:	66fb      	str	r3, [r7, #108]	; 0x6c

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000586:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000594:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	222c      	movs	r2, #44	; 0x2c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f8a0 	bl	8004702 <memset>

	htim->Instance = TIM1;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a47      	ldr	r2, [pc, #284]	; (80006e4 <changeSpeakerFrequency+0x178>)
 80005c6:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = 0;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
	htim->Init.Period = newPeriod;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80005d8:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
	htim->Init.RepetitionCounter = 0;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	615a      	str	r2, [r3, #20]
	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htim) != HAL_OK) {
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f002 fa17 	bl	8002a20 <HAL_TIM_Base_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <changeSpeakerFrequency+0x90>
		Error_Handler();
 80005f8:	f000 fb72 	bl	8000ce0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig) != HAL_OK) {
 8000602:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000606:	4619      	mov	r1, r3
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f002 fbd1 	bl	8002db0 <HAL_TIM_ConfigClockSource>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <changeSpeakerFrequency+0xac>
		Error_Handler();
 8000614:	f000 fb64 	bl	8000ce0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(htim) != HAL_OK) {
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f002 fa58 	bl	8002ace <HAL_TIM_PWM_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <changeSpeakerFrequency+0xbc>
		Error_Handler();
 8000624:	f000 fb5c 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)
 8000634:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f003 f8f6 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <changeSpeakerFrequency+0xde>
			!= HAL_OK) {
		Error_Handler();
 8000646:	f000 fb4b 	bl	8000ce0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064a:	2360      	movs	r3, #96	; 0x60
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.Pulse = htim1.Init.Period/2;
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <changeSpeakerFrequency+0x17c>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	085b      	lsrs	r3, r3, #1
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000656:	2300      	movs	r3, #0
 8000658:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800065a:	2300      	movs	r3, #0
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800066a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <changeSpeakerFrequency+0x17c>)
 8000674:	f002 fa8c 	bl	8002b90 <HAL_TIM_PWM_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <changeSpeakerFrequency+0x116>
			!= HAL_OK) {
		Error_Handler();
 800067e:	f000 fb2f 	bl	8000ce0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.DeadTime = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig)
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f003 f91d 	bl	80038f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <changeSpeakerFrequency+0x15c>
			!= HAL_OK) {
		Error_Handler();
 80006c4:	f000 fb0c 	bl	8000ce0 <Error_Handler>
	}
	HAL_TIM_MspPostInit(htim);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 fb55 	bl	8000d78 <HAL_TIM_MspPostInit>

	// must restart the timer once changes are complete
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 80006ce:	2100      	movs	r1, #0
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f002 ffaf 	bl	8003634 <HAL_TIMEx_PWMN_Start>
}
 80006d6:	bf00      	nop
 80006d8:	3770      	adds	r7, #112	; 0x70
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	3b9aca00 	.word	0x3b9aca00
 80006e4:	40012c00 	.word	0x40012c00
 80006e8:	200000ac 	.word	0x200000ac

080006ec <isPasswordMatched>:
  * RETURNS       : True if matched else False
  * DESCRIPTION   : Validates the user entered password is valid or not
  * ******************************************************************************
  */
bool isPasswordMatched(uint32_t iUserEnteredPasswd)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	for(uint8_t traverseIndex = 0; traverseIndex < MAX_PASSWORD_STORAGE; traverseIndex++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
 80006f8:	e00b      	b.n	8000712 <isPasswordMatched+0x26>
	{
		if(iUserEnteredPasswd == UserConfiguredPasswd[traverseIndex])
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <isPasswordMatched+0x3c>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	429a      	cmp	r2, r3
 8000706:	d101      	bne.n	800070c <isPasswordMatched+0x20>
			return true;
 8000708:	2301      	movs	r3, #1
 800070a:	e006      	b.n	800071a <isPasswordMatched+0x2e>
	for(uint8_t traverseIndex = 0; traverseIndex < MAX_PASSWORD_STORAGE; traverseIndex++)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	3301      	adds	r3, #1
 8000710:	73fb      	strb	r3, [r7, #15]
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b09      	cmp	r3, #9
 8000716:	d9f0      	bls.n	80006fa <isPasswordMatched+0xe>
	}
	return false;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000732:	f000 fce2 	bl	80010fa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000736:	f000 f929 	bl	800098c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800073a:	f000 fa87 	bl	8000c4c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800073e:	f000 fa55 	bl	8000bec <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000742:	f000 f9a5 	bl	8000a90 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000746:	2100      	movs	r1, #0
 8000748:	4835      	ldr	r0, [pc, #212]	; (8000820 <main+0xf4>)
 800074a:	f002 ff73 	bl	8003634 <HAL_TIMEx_PWMN_Start>
	printf("\033[0H\033[0J");
 800074e:	4835      	ldr	r0, [pc, #212]	; (8000824 <main+0xf8>)
 8000750:	f003 ff70 	bl	8004634 <iprintf>
	/* USER CODE BEGIN WHILE */
	uint8_t choice;

	while (1)
	{
		changeSpeakerFrequency(&htim1, 0);	// set new frequency
 8000754:	2100      	movs	r1, #0
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <main+0xf4>)
 8000758:	f7ff ff08 	bl	800056c <changeSpeakerFrequency>
		printf(" 1)Enter Master Mode to Configure Password\n\r 2)Want to access system\n\r 3)Show all password\n\r");
 800075c:	4832      	ldr	r0, [pc, #200]	; (8000828 <main+0xfc>)
 800075e:	f003 ff69 	bl	8004634 <iprintf>
		scanf("%hhu",&choice);
 8000762:	1dbb      	adds	r3, r7, #6
 8000764:	4619      	mov	r1, r3
 8000766:	4831      	ldr	r0, [pc, #196]	; (800082c <main+0x100>)
 8000768:	f003 ff76 	bl	8004658 <iscanf>
		switch(choice)
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d027      	beq.n	80007c2 <main+0x96>
 8000772:	2b03      	cmp	r3, #3
 8000774:	dc4d      	bgt.n	8000812 <main+0xe6>
 8000776:	2b01      	cmp	r3, #1
 8000778:	d002      	beq.n	8000780 <main+0x54>
 800077a:	2b02      	cmp	r3, #2
 800077c:	d003      	beq.n	8000786 <main+0x5a>
				break;
			}

			default:
			{
				break;
 800077e:	e048      	b.n	8000812 <main+0xe6>
				configurePassword();
 8000780:	f000 f8be 	bl	8000900 <configurePassword>
				break;
 8000784:	e046      	b.n	8000814 <main+0xe8>
				printf("Enter password to validate your Identity\n\r");
 8000786:	482a      	ldr	r0, [pc, #168]	; (8000830 <main+0x104>)
 8000788:	f003 ff54 	bl	8004634 <iprintf>
				scanf("%lu",&UserEnteredPasswd);
 800078c:	4929      	ldr	r1, [pc, #164]	; (8000834 <main+0x108>)
 800078e:	482a      	ldr	r0, [pc, #168]	; (8000838 <main+0x10c>)
 8000790:	f003 ff62 	bl	8004658 <iscanf>
				if(!isPasswordMatched(UserEnteredPasswd))
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <main+0x108>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffa7 	bl	80006ec <isPasswordMatched>
 800079e:	4603      	mov	r3, r0
 80007a0:	f083 0301 	eor.w	r3, r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <main+0x8a>
					ErrorSound();
 80007aa:	f000 f857 	bl	800085c <ErrorSound>
					printf("Opps.. Sorry we cant grant you access\n\r");
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <main+0x110>)
 80007b0:	f003 ff40 	bl	8004634 <iprintf>
				break;
 80007b4:	e02e      	b.n	8000814 <main+0xe8>
					SuccessSound();
 80007b6:	f000 f87b 	bl	80008b0 <SuccessSound>
					printf("Identity Validated.... Here you go....\n\r");
 80007ba:	4821      	ldr	r0, [pc, #132]	; (8000840 <main+0x114>)
 80007bc:	f003 ff3a 	bl	8004634 <iprintf>
				break;
 80007c0:	e028      	b.n	8000814 <main+0xe8>
				uint16_t tMasterPassword = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	80bb      	strh	r3, [r7, #4]
				printf("Enter master password to see all password\n\r");
 80007c6:	481f      	ldr	r0, [pc, #124]	; (8000844 <main+0x118>)
 80007c8:	f003 ff34 	bl	8004634 <iprintf>
				scanf("%hu",&tMasterPassword);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <main+0x11c>)
 80007d2:	f003 ff41 	bl	8004658 <iscanf>
				if(tMasterPassword != MASTER_PASSWORD)
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 80007dc:	d001      	beq.n	80007e2 <main+0xb6>
					return 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	e019      	b.n	8000816 <main+0xea>
				printf("Stored passwords are [");
 80007e2:	481a      	ldr	r0, [pc, #104]	; (800084c <main+0x120>)
 80007e4:	f003 ff26 	bl	8004634 <iprintf>
				for(uint8_t index = 0; index < MAX_PASSWORD_STORAGE; index++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	e00a      	b.n	8000804 <main+0xd8>
					printf(" %lu",UserConfiguredPasswd[index]);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <main+0x124>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4816      	ldr	r0, [pc, #88]	; (8000854 <main+0x128>)
 80007fa:	f003 ff1b 	bl	8004634 <iprintf>
				for(uint8_t index = 0; index < MAX_PASSWORD_STORAGE; index++)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3301      	adds	r3, #1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b09      	cmp	r3, #9
 8000808:	d9f1      	bls.n	80007ee <main+0xc2>
				printf("]\n\r");
 800080a:	4813      	ldr	r0, [pc, #76]	; (8000858 <main+0x12c>)
 800080c:	f003 ff12 	bl	8004634 <iprintf>
 8000810:	e7a0      	b.n	8000754 <main+0x28>
				break;
 8000812:	bf00      	nop
		changeSpeakerFrequency(&htim1, 0);	// set new frequency
 8000814:	e79e      	b.n	8000754 <main+0x28>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000ac 	.word	0x200000ac
 8000824:	08005ed8 	.word	0x08005ed8
 8000828:	08005ee4 	.word	0x08005ee4
 800082c:	08005f44 	.word	0x08005f44
 8000830:	08005f4c 	.word	0x08005f4c
 8000834:	20000178 	.word	0x20000178
 8000838:	08005f78 	.word	0x08005f78
 800083c:	08005f7c 	.word	0x08005f7c
 8000840:	08005fa4 	.word	0x08005fa4
 8000844:	08005fd0 	.word	0x08005fd0
 8000848:	08005ffc 	.word	0x08005ffc
 800084c:	08006000 	.word	0x08006000
 8000850:	20000000 	.word	0x20000000
 8000854:	08006018 	.word	0x08006018
 8000858:	08006020 	.word	0x08006020

0800085c <ErrorSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the error sound on speaker connected on PA7
  * ******************************************************************************
  */
void ErrorSound()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
//	printf("Playing error sound\n\r");
	for(uint8_t count = 0; count < 10; count++)
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e016      	b.n	8000896 <ErrorSound+0x3a>
	{
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 8000868:	2300      	movs	r3, #0
 800086a:	80bb      	strh	r3, [r7, #4]
 800086c:	e00b      	b.n	8000886 <ErrorSound+0x2a>
		{
//			printf("Error freq=%u\r\n", freq);			// print out the new frequency
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 800086e:	88bb      	ldrh	r3, [r7, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <ErrorSound+0x50>)
 8000874:	f7ff fe7a 	bl	800056c <changeSpeakerFrequency>
			HAL_Delay(10);						// delay for 1 second
 8000878:	200a      	movs	r0, #10
 800087a:	f000 fcb3 	bl	80011e4 <HAL_Delay>
		for(uint16_t freq = 0; freq < 5000; freq+=500)
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000884:	80bb      	strh	r3, [r7, #4]
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	f241 3287 	movw	r2, #4999	; 0x1387
 800088c:	4293      	cmp	r3, r2
 800088e:	d9ee      	bls.n	800086e <ErrorSound+0x12>
	for(uint8_t count = 0; count < 10; count++)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	3301      	adds	r3, #1
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b09      	cmp	r3, #9
 800089a:	d9e5      	bls.n	8000868 <ErrorSound+0xc>
		}
	}

	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <ErrorSound+0x50>)
 80008a0:	f002 ff66 	bl	8003770 <HAL_TIMEx_PWMN_Stop>

//	changeSpeakerFrequency(&htim1, 0);	// set new frequency
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000ac 	.word	0x200000ac

080008b0 <SuccessSound>:
  * RETURNS       : none
  * DESCRIPTION   : Play the success sound on speaker connected on PA7
  * ******************************************************************************
  */
void SuccessSound()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint8_t count = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	717b      	strb	r3, [r7, #5]

	if(count < 1)
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d114      	bne.n	80008ea <SuccessSound+0x3a>
	{
		for(uint16_t freq = 3000; freq > 0; freq -= 200)
 80008c0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008c4:	80fb      	strh	r3, [r7, #6]
 80008c6:	e00a      	b.n	80008de <SuccessSound+0x2e>
		{
//			printf("Success freq=%u\r\n", freq);			// print out the new frequency
			changeSpeakerFrequency(&htim1, freq);	// set new frequency
 80008c8:	88fb      	ldrh	r3, [r7, #6]
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	; (80008fc <SuccessSound+0x4c>)
 80008ce:	f7ff fe4d 	bl	800056c <changeSpeakerFrequency>
			HAL_Delay(45);						// delay for 1 second
 80008d2:	202d      	movs	r0, #45	; 0x2d
 80008d4:	f000 fc86 	bl	80011e4 <HAL_Delay>
		for(uint16_t freq = 3000; freq > 0; freq -= 200)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	3bc8      	subs	r3, #200	; 0xc8
 80008dc:	80fb      	strh	r3, [r7, #6]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1f1      	bne.n	80008c8 <SuccessSound+0x18>
		}
		count++;
 80008e4:	797b      	ldrb	r3, [r7, #5]
 80008e6:	3301      	adds	r3, #1
 80008e8:	717b      	strb	r3, [r7, #5]
	}
	HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <SuccessSound+0x4c>)
 80008ee:	f002 ff3f 	bl	8003770 <HAL_TIMEx_PWMN_Stop>
//	changeSpeakerFrequency(&htim1, 0);	// set new frequency
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000ac 	.word	0x200000ac

08000900 <configurePassword>:
  * DESCRIPTION   : Asks master password and allows to overright new password at desired index to master
  *
  *******************************************************************************
  */
void configurePassword()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	uint16_t tMasterPassword = 0,index = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	2300      	movs	r3, #0
 800090c:	80bb      	strh	r3, [r7, #4]
	printf("Enter master password to configure password\n\r");
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <configurePassword+0x74>)
 8000910:	f003 fe90 	bl	8004634 <iprintf>
	scanf("%hu",&tMasterPassword);
 8000914:	1dbb      	adds	r3, r7, #6
 8000916:	4619      	mov	r1, r3
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <configurePassword+0x78>)
 800091a:	f003 fe9d 	bl	8004658 <iscanf>

	if(tMasterPassword != MASTER_PASSWORD)
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f5b3 6f0a 	cmp.w	r3, #2208	; 0x8a0
 8000924:	d122      	bne.n	800096c <configurePassword+0x6c>
		return;

	printf("Enter new password\n\r");
 8000926:	4815      	ldr	r0, [pc, #84]	; (800097c <configurePassword+0x7c>)
 8000928:	f003 fe84 	bl	8004634 <iprintf>
	scanf("%hu",&tMasterPassword);
 800092c:	1dbb      	adds	r3, r7, #6
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <configurePassword+0x78>)
 8000932:	f003 fe91 	bl	8004658 <iscanf>

	printf("Enter which password you want to replace from total 10 passwords\n\r");
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <configurePassword+0x80>)
 8000938:	f003 fe7c 	bl	8004634 <iprintf>
	scanf("%hu",&index);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <configurePassword+0x78>)
 8000942:	f003 fe89 	bl	8004658 <iscanf>

	if(index > 10)
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	2b0a      	cmp	r3, #10
 800094a:	d904      	bls.n	8000956 <configurePassword+0x56>
	{
		UserConfiguredPasswd[MAX_PASSWORD_STORAGE-1] = tMasterPassword;
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	461a      	mov	r2, r3
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <configurePassword+0x84>)
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
 8000954:	e006      	b.n	8000964 <configurePassword+0x64>
	}
	else
	{
		UserConfiguredPasswd[index-1] = tMasterPassword;
 8000956:	88fa      	ldrh	r2, [r7, #6]
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	4611      	mov	r1, r2
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <configurePassword+0x84>)
 8000960:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	printf("New Password Added Successfully\n\r");
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <configurePassword+0x88>)
 8000966:	f003 fe65 	bl	8004634 <iprintf>
 800096a:	e000      	b.n	800096e <configurePassword+0x6e>
		return;
 800096c:	bf00      	nop

}
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	08006024 	.word	0x08006024
 8000978:	08005ffc 	.word	0x08005ffc
 800097c:	08006054 	.word	0x08006054
 8000980:	0800606c 	.word	0x0800606c
 8000984:	20000000 	.word	0x20000000
 8000988:	080060b0 	.word	0x080060b0

0800098c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b0ac      	sub	sp, #176	; 0xb0
 8000990:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000992:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000996:	2244      	movs	r2, #68	; 0x44
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 feb1 	bl	8004702 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2254      	movs	r2, #84	; 0x54
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fea3 	bl	8004702 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80009bc:	f000 fe9e 	bl	80016fc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009c0:	4b32      	ldr	r3, [pc, #200]	; (8000a8c <SystemClock_Config+0x100>)
 80009c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009c6:	4a31      	ldr	r2, [pc, #196]	; (8000a8c <SystemClock_Config+0x100>)
 80009c8:	f023 0318 	bic.w	r3, r3, #24
 80009cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80009d0:	2314      	movs	r3, #20
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e4:	2360      	movs	r3, #96	; 0x60
 80009e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLM = 1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLN = 16;
 80009fc:	2310      	movs	r3, #16
 80009fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a02:	2307      	movs	r3, #7
 8000a04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 fee3 	bl	80017e4 <HAL_RCC_OscConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0x9c>
		Error_Handler();
 8000a24:	f000 f95c 	bl	8000ce0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	65bb      	str	r3, [r7, #88]	; 0x58
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000a38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a3c:	66bb      	str	r3, [r7, #104]	; 0x68

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000a3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a42:	2101      	movs	r1, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 faed 	bl	8002024 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xc8>
		Error_Handler();
 8000a50:	f000 f946 	bl	8000ce0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fce6 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0xe2>
		Error_Handler();
 8000a6a:	f000 f939 	bl	8000ce0 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a72:	f000 fe61 	bl	8001738 <HAL_PWREx_ControlVoltageScaling>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xf4>
			!= HAL_OK) {
		Error_Handler();
 8000a7c:	f000 f930 	bl	8000ce0 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8000a80:	f001 fecc 	bl	800281c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a84:	bf00      	nop
 8000a86:	37b0      	adds	r7, #176	; 0xb0
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09a      	sub	sp, #104	; 0x68
 8000a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	222c      	movs	r2, #44	; 0x2c
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fe19 	bl	8004702 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ad0:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000ad2:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <MX_TIM1_Init+0x158>)
 8000ad4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000ad6:	4b43      	ldr	r3, [pc, #268]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000ae2:	4b40      	ldr	r3, [pc, #256]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000af0:	4b3c      	ldr	r3, [pc, #240]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000afc:	4839      	ldr	r0, [pc, #228]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000afe:	f001 ff8f 	bl	8002a20 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000b08:	f000 f8ea 	bl	8000ce0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b16:	4619      	mov	r1, r3
 8000b18:	4832      	ldr	r0, [pc, #200]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000b1a:	f002 f949 	bl	8002db0 <HAL_TIM_ConfigClockSource>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000b24:	f000 f8dc 	bl	8000ce0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b28:	482e      	ldr	r0, [pc, #184]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000b2a:	f001 ffd0 	bl	8002ace <HAL_TIM_PWM_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000b34:	f000 f8d4 	bl	8000ce0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000b44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4826      	ldr	r0, [pc, #152]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000b4c:	f002 fe6e 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000b56:	f000 f8c3 	bl	8000ce0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = htim1.Init.Period/2;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b66:	2300      	movs	r3, #0
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000b7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000b84:	f002 f804 	bl	8002b90 <HAL_TIM_PWM_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 8000b8e:	f000 f8a7 	bl	8000ce0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000bc8:	f002 fe96 	bl	80038f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x146>
			!= HAL_OK) {
		Error_Handler();
 8000bd2:	f000 f885 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <MX_TIM1_Init+0x154>)
 8000bd8:	f000 f8ce 	bl	8000d78 <HAL_TIM_MspPostInit>
}
 8000bdc:	bf00      	nop
 8000bde:	3768      	adds	r7, #104	; 0x68
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	40012c00 	.word	0x40012c00

08000bec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000bf2:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_USART2_UART_Init+0x5c>)
 8000bf4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x58>)
 8000c30:	f002 feff 	bl	8003a32 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000c3a:	f000 f851 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000f8 	.word	0x200000f8
 8000c48:	40004400 	.word	0x40004400

08000c4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_GPIO_Init+0x8c>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2108      	movs	r1, #8
 8000cae:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0x90>)
 8000cb0:	f000 fd0c 	bl	80016cc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x90>)
 8000ccc:	f000 fb94 	bl	80013f8 <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <HAL_MspInit+0x44>)
 8000cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_MspInit+0x44>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6613      	str	r3, [r2, #96]	; 0x60
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x44>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x44>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x44>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_TIM_Base_MspInit+0x38>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10b      	bne.n	8000d62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_TIM_Base_MspInit+0x3c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40012c00 	.word	0x40012c00
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <HAL_TIM_MspPostInit+0x64>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d11c      	bne.n	8000dd4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f000 fb12 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3720      	adds	r7, #32
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a20      	ldr	r2, [pc, #128]	; (8000e84 <HAL_UART_MspInit+0xa0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d13a      	bne.n	8000e7c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xa4>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e36:	2304      	movs	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e46:	2307      	movs	r3, #7
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f000 fad0 	bl	80013f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f000 fabe 	bl	80013f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f960 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <_read+0x38>)
 8000f04:	f002 fe76 	bl	8003bf4 <HAL_UART_Receive>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	607b      	str	r3, [r7, #4]

	return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000f8 	.word	0x200000f8

08000f24 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <_write+0x40>)
 8000f40:	f002 fdc5 	bl	8003ace <HAL_UART_Transmit>
 8000f44:	4603      	mov	r3, r0
 8000f46:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d002      	beq.n	8000f54 <_write+0x30>
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d101      	bne.n	8000f58 <_write+0x34>
	{
		Error_Handler();
 8000f54:	f7ff fec4 	bl	8000ce0 <Error_Handler>
	}

	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000f8 	.word	0x200000f8

08000f68 <_close>:



int _close(int file)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	605a      	str	r2, [r3, #4]
	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_isatty>:

int _isatty(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	return 1;
 8000fa8:	2301      	movs	r3, #1
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
	return 0;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f003 fbce 	bl	80047a0 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20010000 	.word	0x20010000
 8001030:	00000400 	.word	0x00000400
 8001034:	2000017c 	.word	0x2000017c
 8001038:	200002d0 	.word	0x200002d0

0800103c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <SystemInit+0x64>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <SystemInit+0x64>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <SystemInit+0x68>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <SystemInit+0x68>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <SystemInit+0x68>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <SystemInit+0x68>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <SystemInit+0x68>)
 8001068:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800106c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001070:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <SystemInit+0x68>)
 8001074:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001078:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <SystemInit+0x68>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <SystemInit+0x68>)
 8001080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001084:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <SystemInit+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SystemInit+0x64>)
 800108e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001092:	609a      	str	r2, [r3, #8]
#endif
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	40021000 	.word	0x40021000

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff ffc6 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010b2:	e003      	b.n	80010bc <LoopCopyDataInit>

080010b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010ba:	3104      	adds	r1, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80010c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010c4:	d3f6      	bcc.n	80010b4 <CopyDataInit>
	ldr	r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010c8:	e002      	b.n	80010d0 <LoopFillZerobss>

080010ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010cc:	f842 3b04 	str.w	r3, [r2], #4

080010d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <LoopForever+0x16>)
	cmp	r2, r3
 80010d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010d4:	d3f9      	bcc.n	80010ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f003 fb69 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f7ff fb27 	bl	800072c <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010e4:	08006288 	.word	0x08006288
	ldr	r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010ec:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80010f0:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 80010f4:	200002d0 	.word	0x200002d0

080010f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_IRQHandler>

080010fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f943 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f80e 	bl	800112c <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e001      	b.n	8001120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111c:	f7ff fde8 	bl	8000cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001120:	79fb      	ldrb	r3, [r7, #7]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d023      	beq.n	8001188 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_InitTick+0x70>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_InitTick+0x6c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f941 	bl	80013de <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10f      	bne.n	8001182 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d809      	bhi.n	800117c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f919 	bl	80013a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_InitTick+0x74>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e007      	b.n	800118c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e004      	b.n	800118c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e001      	b.n	800118c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000030 	.word	0x20000030
 800119c:	20000028 	.word	0x20000028
 80011a0:	2000002c 	.word	0x2000002c

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000030 	.word	0x20000030
 80011c8:	20000180 	.word	0x20000180

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000180 	.word	0x20000180

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000030 	.word	0x20000030

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff47 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff5c 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffb0 	bl	800134c <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e148      	b.n	800169a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 813a 	beq.w	8001694 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d00b      	beq.n	8001440 <HAL_GPIO_Init+0x48>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	2b11      	cmp	r3, #17
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b12      	cmp	r3, #18
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0201 	and.w	r2, r3, #1
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0xea>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d123      	bne.n	800152a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691a      	ldr	r2, [r3, #16]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	6939      	ldr	r1, [r7, #16]
 8001526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0203 	and.w	r2, r3, #3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8094 	beq.w	8001694 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156c:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <HAL_GPIO_Init+0x2c0>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x2c0>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6613      	str	r3, [r2, #96]	; 0x60
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x2c0>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001584:	4a4d      	ldr	r2, [pc, #308]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1d4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a43      	ldr	r2, [pc, #268]	; (80016c0 <HAL_GPIO_Init+0x2c8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1d0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a42      	ldr	r2, [pc, #264]	; (80016c4 <HAL_GPIO_Init+0x2cc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1cc>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015c4:	2307      	movs	r3, #7
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x1d6>
 80015cc:	2300      	movs	r3, #0
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015de:	4937      	ldr	r1, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x2c4>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001610:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001664:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168e:	4a0e      	ldr	r2, [pc, #56]	; (80016c8 <HAL_GPIO_Init+0x2d0>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f aeaf 	bne.w	8001408 <HAL_GPIO_Init+0x10>
  }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	48000400 	.word	0x48000400
 80016c4:	48000800 	.word	0x48000800
 80016c8:	40010400 	.word	0x40010400

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40007000 	.word	0x40007000

0800171c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_PWREx_GetVoltageRange+0x18>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40007000 	.word	0x40007000

08001738 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001746:	d130      	bne.n	80017aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001754:	d038      	beq.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175e:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2232      	movs	r2, #50	; 0x32
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	0c9b      	lsrs	r3, r3, #18
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177c:	e002      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3b01      	subs	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001790:	d102      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f2      	bne.n	800177e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a4:	d110      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e00f      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b6:	d007      	beq.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40007000 	.word	0x40007000
 80017dc:	20000028 	.word	0x20000028
 80017e0:	431bde83 	.word	0x431bde83

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f000 bc10 	b.w	8002018 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f8:	4b96      	ldr	r3, [pc, #600]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001802:	4b94      	ldr	r3, [pc, #592]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0310 	and.w	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80e4 	beq.w	80019e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d007      	beq.n	8001830 <HAL_RCC_OscConfig+0x4c>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b0c      	cmp	r3, #12
 8001824:	f040 808b 	bne.w	800193e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2b01      	cmp	r3, #1
 800182c:	f040 8087 	bne.w	800193e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001830:	4b88      	ldr	r3, [pc, #544]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x64>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e3e7      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d004      	beq.n	8001862 <HAL_RCC_OscConfig+0x7e>
 8001858:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001860:	e005      	b.n	800186e <HAL_RCC_OscConfig+0x8a>
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800186e:	4293      	cmp	r3, r2
 8001870:	d223      	bcs.n	80018ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fd7a 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e3c8      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a72      	ldr	r2, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b70      	ldr	r3, [pc, #448]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	496d      	ldr	r1, [pc, #436]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a4:	4b6b      	ldr	r3, [pc, #428]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	4968      	ldr	r1, [pc, #416]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e025      	b.n	8001906 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ba:	4b66      	ldr	r3, [pc, #408]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a65      	ldr	r2, [pc, #404]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018c0:	f043 0308 	orr.w	r3, r3, #8
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4960      	ldr	r1, [pc, #384]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d8:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	495b      	ldr	r1, [pc, #364]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fd3a 	bl	8002370 <RCC_SetFlashLatencyFromMSIRange>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e388      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001906:	f000 fc6f 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	4950      	ldr	r1, [pc, #320]	; (8001a58 <HAL_RCC_OscConfig+0x274>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	f003 031f 	and.w	r3, r3, #31
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a4e      	ldr	r2, [pc, #312]	; (8001a5c <HAL_RCC_OscConfig+0x278>)
 8001924:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001926:	4b4e      	ldr	r3, [pc, #312]	; (8001a60 <HAL_RCC_OscConfig+0x27c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fbfe 	bl	800112c <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d052      	beq.n	80019e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	e36c      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d032      	beq.n	80019ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001952:	f7ff fc3b 	bl	80011cc <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800195a:	f7ff fc37 	bl	80011cc <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e355      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196c:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001978:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a35      	ldr	r2, [pc, #212]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4930      	ldr	r1, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	492b      	ldr	r1, [pc, #172]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
 80019aa:	e01a      	b.n	80019e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ac:	4b29      	ldr	r3, [pc, #164]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fc08 	bl	80011cc <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c0:	f7ff fc04 	bl	80011cc <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e322      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d2:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1dc>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d073      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x21c>
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d10e      	bne.n	8001a18 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d10b      	bne.n	8001a18 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d063      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x2f0>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d15f      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e2ff      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x24c>
 8001a22:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e025      	b.n	8001a7c <HAL_RCC_OscConfig+0x298>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d114      	bne.n	8001a64 <HAL_RCC_OscConfig+0x280>
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a02      	ldr	r2, [pc, #8]	; (8001a54 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e013      	b.n	8001a7c <HAL_RCC_OscConfig+0x298>
 8001a54:	40021000 	.word	0x40021000
 8001a58:	080060e0 	.word	0x080060e0
 8001a5c:	20000028 	.word	0x20000028
 8001a60:	2000002c 	.word	0x2000002c
 8001a64:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a9f      	ldr	r2, [pc, #636]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b9d      	ldr	r3, [pc, #628]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a9c      	ldr	r2, [pc, #624]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fba2 	bl	80011cc <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fb9e 	bl	80011cc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e2bc      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x2a8>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fb8e 	bl	80011cc <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fb8a 	bl	80011cc <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e2a8      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x2d0>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d060      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_OscConfig+0x310>
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d119      	bne.n	8001b22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d116      	bne.n	8001b22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af4:	4b7c      	ldr	r3, [pc, #496]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x328>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e285      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0c:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	4973      	ldr	r1, [pc, #460]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b20:	e040      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d023      	beq.n	8001b72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6e      	ldr	r2, [pc, #440]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fb49 	bl	80011cc <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fb45 	bl	80011cc <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e263      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b50:	4b65      	ldr	r3, [pc, #404]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b62      	ldr	r3, [pc, #392]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	495f      	ldr	r1, [pc, #380]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e018      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b5d      	ldr	r3, [pc, #372]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5c      	ldr	r2, [pc, #368]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fb25 	bl	80011cc <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff fb21 	bl	80011cc <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e23f      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d03c      	beq.n	8001c2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d01c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fb00 	bl	80011cc <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fafc 	bl	80011cc <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e21a      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3ec>
 8001bf0:	e01b      	b.n	8001c2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf8:	4a3b      	ldr	r2, [pc, #236]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff fae3 	bl	80011cc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fadf 	bl	80011cc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1fd      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80a6 	beq.w	8001d84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10d      	bne.n	8001c64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a26      	ldr	r2, [pc, #152]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x508>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d118      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x508>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x508>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff faa6 	bl	80011cc <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7ff faa2 	bl	80011cc <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e1c0      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_RCC_OscConfig+0x508>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d108      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4d8>
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cba:	e029      	b.n	8001d10 <HAL_RCC_OscConfig+0x52c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d115      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x50c>
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cda:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x52c>
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	4b9a      	ldr	r3, [pc, #616]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a99      	ldr	r2, [pc, #612]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	4b96      	ldr	r3, [pc, #600]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	4a95      	ldr	r2, [pc, #596]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d016      	beq.n	8001d46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d18:	f7ff fa58 	bl	80011cc <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fa54 	bl	80011cc <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e170      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d36:	4b89      	ldr	r3, [pc, #548]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ed      	beq.n	8001d20 <HAL_RCC_OscConfig+0x53c>
 8001d44:	e015      	b.n	8001d72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d46:	f7ff fa41 	bl	80011cc <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fa3d 	bl	80011cc <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e159      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d64:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1ed      	bne.n	8001d4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d72:	7ffb      	ldrb	r3, [r7, #31]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b78      	ldr	r3, [pc, #480]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a77      	ldr	r2, [pc, #476]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d98:	4b70      	ldr	r3, [pc, #448]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d9e:	4a6f      	ldr	r2, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa10 	bl	80011cc <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db0:	f7ff fa0c 	bl	80011cc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e12a      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc2:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001dc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x5cc>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd2:	4b62      	ldr	r3, [pc, #392]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff f9f3 	bl	80011cc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dea:	f7ff f9ef 	bl	80011cc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e10d      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8101 	beq.w	8002016 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	f040 80c9 	bne.w	8001fb0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e1e:	4b4f      	ldr	r3, [pc, #316]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0203 	and.w	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d12c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d123      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d11b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d113      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	3b01      	subs	r3, #1
 8001e72:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d06b      	beq.n	8001f64 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d062      	beq.n	8001f58 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0ba      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b2e      	ldr	r3, [pc, #184]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2d      	ldr	r2, [pc, #180]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001eae:	f7ff f98d 	bl	80011cc <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f989 	bl	80011cc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0a7      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_RCC_OscConfig+0x77c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001eee:	0212      	lsls	r2, r2, #8
 8001ef0:	4311      	orrs	r1, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ef6:	0852      	lsrs	r2, r2, #1
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	0552      	lsls	r2, r2, #21
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f02:	0852      	lsrs	r2, r2, #1
 8001f04:	3a01      	subs	r2, #1
 8001f06:	0652      	lsls	r2, r2, #25
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f0e:	06d2      	lsls	r2, r2, #27
 8001f10:	430a      	orrs	r2, r1
 8001f12:	4912      	ldr	r1, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a0c      	ldr	r2, [pc, #48]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f30:	f7ff f94c 	bl	80011cc <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f948 	bl	80011cc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e066      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCC_OscConfig+0x778>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f56:	e05e      	b.n	8002016 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e05d      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d152      	bne.n	8002016 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f88:	f7ff f920 	bl	80011cc <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7ff f91c 	bl	80011cc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e03a      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x7ac>
 8001fae:	e032      	b.n	8002016 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d02d      	beq.n	8002012 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fd4:	f023 0303 	bic.w	r3, r3, #3
 8001fd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8001fe0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff f8ef 	bl	80011cc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f8eb 	bl	80011cc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e009      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x83c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x80e>
 8002010:	e001      	b.n	8002016 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0c8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b66      	ldr	r3, [pc, #408]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4961      	ldr	r1, [pc, #388]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b5f      	ldr	r3, [pc, #380]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b0      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04c      	beq.n	800210e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d121      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e09e      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e092      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e086      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e07e      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020cc:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 0203 	bic.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	493f      	ldr	r1, [pc, #252]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020de:	f7ff f875 	bl	80011cc <HAL_GetTick>
 80020e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7ff f871 	bl	80011cc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e066      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 020c 	and.w	r2, r3, #12
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	429a      	cmp	r2, r3
 800210c:	d1eb      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	492c      	ldr	r1, [pc, #176]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d210      	bcs.n	800215c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4924      	ldr	r1, [pc, #144]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1b0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e036      	b.n	80021ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4918      	ldr	r1, [pc, #96]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4910      	ldr	r1, [pc, #64]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800219a:	f000 f825 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_ClockConfig+0x1b4>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490c      	ldr	r1, [pc, #48]	; (80021dc <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ffb4 	bl	800112c <HAL_InitTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	080060e0 	.word	0x080060e0
 80021e0:	20000028 	.word	0x20000028
 80021e4:	2000002c 	.word	0x2000002c

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b3e      	ldr	r3, [pc, #248]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002200:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d121      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d11e      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800221c:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002228:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e005      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002244:	4a2b      	ldr	r2, [pc, #172]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d102      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e004      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d101      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_RCC_GetSysClockFreq+0x114>)
 800226e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d134      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002276:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0xa6>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d003      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0xac>
 800228c:	e005      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002290:	617b      	str	r3, [r7, #20]
      break;
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002296:	617b      	str	r3, [r7, #20]
      break;
 8002298:	e002      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	617b      	str	r3, [r7, #20]
      break;
 800229e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	3301      	adds	r3, #1
 80022ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	fb03 f202 	mul.w	r2, r3, r2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	0e5b      	lsrs	r3, r3, #25
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022e0:	69bb      	ldr	r3, [r7, #24]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	080060f8 	.word	0x080060f8
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000028 	.word	0x20000028

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	080060f0 	.word	0x080060f0

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002348:	f7ff ffda 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0adb      	lsrs	r3, r3, #11
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4904      	ldr	r1, [pc, #16]	; (800236c <HAL_RCC_GetPCLK2Freq+0x28>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000
 800236c:	080060f0 	.word	0x080060f0

08002370 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002388:	f7ff f9c8 	bl	800171c <HAL_PWREx_GetVoltageRange>
 800238c:	6178      	str	r0, [r7, #20]
 800238e:	e014      	b.n	80023ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	4a24      	ldr	r2, [pc, #144]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239a:	6593      	str	r3, [r2, #88]	; 0x58
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a8:	f7ff f9b8 	bl	800171c <HAL_PWREx_GetVoltageRange>
 80023ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d10b      	bne.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d919      	bls.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2ba0      	cmp	r3, #160	; 0xa0
 80023cc:	d902      	bls.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ce:	2302      	movs	r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e013      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e010      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d902      	bls.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023e0:	2303      	movs	r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e00a      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d102      	bne.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	e004      	b.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b70      	cmp	r3, #112	; 0x70
 80023f6:	d101      	bne.n	80023fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f8:	2301      	movs	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 0207 	bic.w	r2, r3, #7
 8002404:	4909      	ldr	r1, [pc, #36]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	40022000 	.word	0x40022000

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002438:	2300      	movs	r3, #0
 800243a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800243c:	2300      	movs	r3, #0
 800243e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002448:	2b00      	cmp	r3, #0
 800244a:	d031      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002454:	d01a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002456:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800245a:	d814      	bhi.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002464:	d10f      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002466:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a5c      	ldr	r2, [pc, #368]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002472:	e00c      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9de 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002484:	e003      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	74fb      	strb	r3, [r7, #19]
      break;
 800248a:	e000      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800248c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248e:	7cfb      	ldrb	r3, [r7, #19]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002494:	4b51      	ldr	r3, [pc, #324]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	494e      	ldr	r1, [pc, #312]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024aa:	e001      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 809e 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	2300      	movs	r3, #0
 80024c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024c2:	4b46      	ldr	r3, [pc, #280]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d8:	4b40      	ldr	r3, [pc, #256]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	4a3f      	ldr	r2, [pc, #252]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e2:	6593      	str	r3, [r2, #88]	; 0x58
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002500:	f7fe fe64 	bl	80011cc <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002506:	e009      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7fe fe60 	bl	80011cc <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d902      	bls.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	74fb      	strb	r3, [r7, #19]
        break;
 800251a:	e005      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800251c:	4b30      	ldr	r3, [pc, #192]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ef      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002528:	7cfb      	ldrb	r3, [r7, #19]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d15a      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002538:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01e      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	429a      	cmp	r2, r3
 8002548:	d019      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002554:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002556:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002576:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d016      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fe20 	bl	80011cc <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	e00b      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fe1c 	bl	80011cc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d902      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	74fb      	strb	r3, [r7, #19]
            break;
 80025a6:	e006      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ec      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ca:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d2:	e009      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e8:	7c7b      	ldrb	r3, [r7, #17]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b8a      	ldr	r3, [pc, #552]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a89      	ldr	r2, [pc, #548]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002606:	4b84      	ldr	r3, [pc, #528]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4980      	ldr	r1, [pc, #512]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002628:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 020c 	bic.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	4978      	ldr	r1, [pc, #480]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	496f      	ldr	r1, [pc, #444]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	4967      	ldr	r1, [pc, #412]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	495e      	ldr	r1, [pc, #376]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	4956      	ldr	r1, [pc, #344]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026d2:	4b51      	ldr	r3, [pc, #324]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d028      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4945      	ldr	r1, [pc, #276]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002712:	d106      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
 8002720:	e011      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800272a:	d10c      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f882 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d028      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	492d      	ldr	r1, [pc, #180]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002770:	d106      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277c:	60d3      	str	r3, [r2, #12]
 800277e:	e011      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	2101      	movs	r1, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f853 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01c      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f830 	bl	800283c <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800280c:	7cbb      	ldrb	r3, [r7, #18]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800286e:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
       ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d047      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e044      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d018      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x86>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d825      	bhi.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d002      	beq.n	800289e <RCCEx_PLLSAI1_Config+0x62>
 8002898:	2b02      	cmp	r3, #2
 800289a:	d009      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x74>
 800289c:	e020      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ae:	e01a      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e013      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028de:	e006      	b.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e004      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	430b      	orrs	r3, r1
 800290c:	4943      	ldr	r1, [pc, #268]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d17c      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002924:	f7fe fc52 	bl	80011cc <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800292a:	e009      	b.n	8002940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800292c:	f7fe fc4e 	bl	80011cc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	73fb      	strb	r3, [r7, #15]
        break;
 800293e:	e005      	b.n	800294c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d15f      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d110      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	0211      	lsls	r1, r2, #8
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	06d2      	lsls	r2, r2, #27
 8002970:	430a      	orrs	r2, r1
 8002972:	492a      	ldr	r1, [pc, #168]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	610b      	str	r3, [r1, #16]
 8002978:	e027      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d112      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6912      	ldr	r2, [r2, #16]
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0552      	lsls	r2, r2, #21
 800299c:	430a      	orrs	r2, r1
 800299e:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
 80029a4:	e011      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	0211      	lsls	r1, r2, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6952      	ldr	r2, [r2, #20]
 80029bc:	0852      	lsrs	r2, r2, #1
 80029be:	3a01      	subs	r2, #1
 80029c0:	0652      	lsls	r2, r2, #25
 80029c2:	430a      	orrs	r2, r1
 80029c4:	4915      	ldr	r1, [pc, #84]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fe fbf9 	bl	80011cc <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029dc:	e009      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029de:	f7fe fbf5 	bl	80011cc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d902      	bls.n	80029f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	73fb      	strb	r3, [r7, #15]
          break;
 80029f0:	e005      	b.n	80029fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ef      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e049      	b.n	8002ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f976 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fa6c 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e049      	b.n	8002b74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d106      	bne.n	8002afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f841 	bl	8002b7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2202      	movs	r2, #2
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f000 fa15 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0fd      	b.n	8002da6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b14      	cmp	r3, #20
 8002bb6:	f200 80f0 	bhi.w	8002d9a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002c15 	.word	0x08002c15
 8002bc4:	08002d9b 	.word	0x08002d9b
 8002bc8:	08002d9b 	.word	0x08002d9b
 8002bcc:	08002d9b 	.word	0x08002d9b
 8002bd0:	08002c55 	.word	0x08002c55
 8002bd4:	08002d9b 	.word	0x08002d9b
 8002bd8:	08002d9b 	.word	0x08002d9b
 8002bdc:	08002d9b 	.word	0x08002d9b
 8002be0:	08002c97 	.word	0x08002c97
 8002be4:	08002d9b 	.word	0x08002d9b
 8002be8:	08002d9b 	.word	0x08002d9b
 8002bec:	08002d9b 	.word	0x08002d9b
 8002bf0:	08002cd7 	.word	0x08002cd7
 8002bf4:	08002d9b 	.word	0x08002d9b
 8002bf8:	08002d9b 	.word	0x08002d9b
 8002bfc:	08002d9b 	.word	0x08002d9b
 8002c00:	08002d19 	.word	0x08002d19
 8002c04:	08002d9b 	.word	0x08002d9b
 8002c08:	08002d9b 	.word	0x08002d9b
 8002c0c:	08002d9b 	.word	0x08002d9b
 8002c10:	08002d59 	.word	0x08002d59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9f2 	bl	8003004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0208 	orr.w	r2, r2, #8
 8002c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6999      	ldr	r1, [r3, #24]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	619a      	str	r2, [r3, #24]
      break;
 8002c52:	e0a3      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fa4e 	bl	80030fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	619a      	str	r2, [r3, #24]
      break;
 8002c94:	e082      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 faa7 	bl	80031f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69da      	ldr	r2, [r3, #28]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0208 	orr.w	r2, r2, #8
 8002cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0204 	bic.w	r2, r2, #4
 8002cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	61da      	str	r2, [r3, #28]
      break;
 8002cd4:	e062      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 faff 	bl	80032e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69d9      	ldr	r1, [r3, #28]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	021a      	lsls	r2, r3, #8
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	61da      	str	r2, [r3, #28]
      break;
 8002d16:	e041      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fb3c 	bl	800339c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d56:	e021      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fb74 	bl	800344c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	021a      	lsls	r2, r3, #8
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d98:	e000      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002d9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop

08002db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIM_ConfigClockSource+0x18>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e0b5      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x184>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d03e      	beq.n	8002e84 <HAL_TIM_ConfigClockSource+0xd4>
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0a:	f200 8087 	bhi.w	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	f000 8085 	beq.w	8002f20 <HAL_TIM_ConfigClockSource+0x170>
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	d87f      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b70      	cmp	r3, #112	; 0x70
 8002e1e:	d01a      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xa6>
 8002e20:	2b70      	cmp	r3, #112	; 0x70
 8002e22:	d87b      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d050      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x11a>
 8002e28:	2b60      	cmp	r3, #96	; 0x60
 8002e2a:	d877      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d03c      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xfa>
 8002e30:	2b50      	cmp	r3, #80	; 0x50
 8002e32:	d873      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d058      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x13a>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d86f      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d064      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	2b30      	cmp	r3, #48	; 0x30
 8002e42:	d86b      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d060      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d867      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05c      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d05a      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e54:	e062      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f000 fbc5 	bl	80035f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e78:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	609a      	str	r2, [r3, #8]
      break;
 8002e82:	e04e      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f000 fbae 	bl	80035f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea6:	609a      	str	r2, [r3, #8]
      break;
 8002ea8:	e03b      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 fb22 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2150      	movs	r1, #80	; 0x50
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fb7b 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e02b      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 fb41 	bl	800355e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2160      	movs	r1, #96	; 0x60
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fb6b 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e01b      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 fb02 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fb5b 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002f08:	e00b      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f000 fb52 	bl	80035be <TIM_ITRx_SetConfig>
        break;
 8002f1a:	e002      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e000      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d003      	beq.n	8002f5c <TIM_Base_SetConfig+0x20>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d108      	bne.n	8002f6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a21      	ldr	r2, [pc, #132]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x52>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x52>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x52>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <TIM_Base_SetConfig+0xc4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0xa0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0xa0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <TIM_Base_SetConfig+0xc4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40012c00 	.word	0x40012c00
 8002ffc:	40014000 	.word	0x40014000
 8003000:	40014400 	.word	0x40014400

08003004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a24      	ldr	r2, [pc, #144]	; (80030f0 <TIM_OC1_SetConfig+0xec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_OC1_SetConfig+0x70>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <TIM_OC1_SetConfig+0xf0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC1_SetConfig+0x70>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <TIM_OC1_SetConfig+0xf4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d10c      	bne.n	800308e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f023 0308 	bic.w	r3, r3, #8
 800307a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <TIM_OC1_SetConfig+0xec>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <TIM_OC1_SetConfig+0xa2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <TIM_OC1_SetConfig+0xf0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <TIM_OC1_SetConfig+0xa2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <TIM_OC1_SetConfig+0xf4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d111      	bne.n	80030ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40014000 	.word	0x40014000
 80030f8:	40014400 	.word	0x40014400

080030fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0210 	bic.w	r2, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f023 0320 	bic.w	r3, r3, #32
 800314a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a22      	ldr	r2, [pc, #136]	; (80031e4 <TIM_OC2_SetConfig+0xe8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d10d      	bne.n	800317c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <TIM_OC2_SetConfig+0xe8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <TIM_OC2_SetConfig+0x98>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <TIM_OC2_SetConfig+0xec>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_OC2_SetConfig+0x98>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <TIM_OC2_SetConfig+0xf0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d113      	bne.n	80031bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800319a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400

080031f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0303 	bic.w	r3, r3, #3
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800323c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <TIM_OC3_SetConfig+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10d      	bne.n	800326e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800326c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <TIM_OC3_SetConfig+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <TIM_OC3_SetConfig+0x96>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <TIM_OC3_SetConfig+0xe8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_OC3_SetConfig+0x96>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <TIM_OC3_SetConfig+0xec>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40012c00 	.word	0x40012c00
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400

080032e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800330e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800331a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800332e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	031b      	lsls	r3, r3, #12
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a14      	ldr	r2, [pc, #80]	; (8003390 <TIM_OC4_SetConfig+0xb0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_OC4_SetConfig+0x74>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <TIM_OC4_SetConfig+0xb4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC4_SetConfig+0x74>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <TIM_OC4_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d109      	bne.n	8003368 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800335a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	019b      	lsls	r3, r3, #6
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400

0800339c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a13      	ldr	r2, [pc, #76]	; (8003440 <TIM_OC5_SetConfig+0xa4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_OC5_SetConfig+0x6a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a12      	ldr	r2, [pc, #72]	; (8003444 <TIM_OC5_SetConfig+0xa8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_OC5_SetConfig+0x6a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a11      	ldr	r2, [pc, #68]	; (8003448 <TIM_OC5_SetConfig+0xac>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d109      	bne.n	800341a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400

0800344c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	021b      	lsls	r3, r3, #8
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	051b      	lsls	r3, r3, #20
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <TIM_OC6_SetConfig+0xa8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <TIM_OC6_SetConfig+0x6c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <TIM_OC6_SetConfig+0xac>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d003      	beq.n	80034b8 <TIM_OC6_SetConfig+0x6c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a12      	ldr	r2, [pc, #72]	; (80034fc <TIM_OC6_SetConfig+0xb0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d109      	bne.n	80034cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	029b      	lsls	r3, r3, #10
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 030a 	bic.w	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0210 	bic.w	r2, r3, #16
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800359a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	f043 0307 	orr.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	431a      	orrs	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d109      	bne.n	8003658 <HAL_TIMEx_PWMN_Start+0x24>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b01      	cmp	r3, #1
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e022      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b04      	cmp	r3, #4
 800365c:	d109      	bne.n	8003672 <HAL_TIMEx_PWMN_Start+0x3e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	bf14      	ite	ne
 800366a:	2301      	movne	r3, #1
 800366c:	2300      	moveq	r3, #0
 800366e:	b2db      	uxtb	r3, r3
 8003670:	e015      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d109      	bne.n	800368c <HAL_TIMEx_PWMN_Start+0x58>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	bf14      	ite	ne
 8003684:	2301      	movne	r3, #1
 8003686:	2300      	moveq	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e008      	b.n	800369e <HAL_TIMEx_PWMN_Start+0x6a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e05a      	b.n	800375c <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <HAL_TIMEx_PWMN_Start+0x82>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b4:	e013      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d104      	bne.n	80036c6 <HAL_TIMEx_PWMN_Start+0x92>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036c4:	e00b      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d104      	bne.n	80036d6 <HAL_TIMEx_PWMN_Start+0xa2>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036d4:	e003      	b.n	80036de <HAL_TIMEx_PWMN_Start+0xaa>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f97e 	bl	80039e8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIMEx_PWMN_Start+0x130>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d009      	beq.n	800371a <HAL_TIMEx_PWMN_Start+0xe6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d004      	beq.n	800371a <HAL_TIMEx_PWMN_Start+0xe6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_TIMEx_PWMN_Start+0x134>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d115      	bne.n	8003746 <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <HAL_TIMEx_PWMN_Start+0x138>)
 8003722:	4013      	ands	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b06      	cmp	r3, #6
 800372a:	d015      	beq.n	8003758 <HAL_TIMEx_PWMN_Start+0x124>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d011      	beq.n	8003758 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003744:	e008      	b.n	8003758 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e000      	b.n	800375a <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003758:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40014000 	.word	0x40014000
 800376c:	00010007 	.word	0x00010007

08003770 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f930 	bl	80039e8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6a1a      	ldr	r2, [r3, #32]
 800378e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10f      	bne.n	80037b8 <HAL_TIMEx_PWMN_Stop+0x48>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	f240 4344 	movw	r3, #1092	; 0x444
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d107      	bne.n	80037b8 <HAL_TIMEx_PWMN_Stop+0x48>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	f241 1311 	movw	r3, #4369	; 0x1111
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10f      	bne.n	80037e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	f240 4344 	movw	r3, #1092	; 0x444
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d107      	bne.n	80037e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_TIMEx_PWMN_Stop+0x88>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f6:	e013      	b.n	8003820 <HAL_TIMEx_PWMN_Stop+0xb0>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d104      	bne.n	8003808 <HAL_TIMEx_PWMN_Stop+0x98>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003806:	e00b      	b.n	8003820 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d104      	bne.n	8003818 <HAL_TIMEx_PWMN_Stop+0xa8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003816:	e003      	b.n	8003820 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e04f      	b.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a21      	ldr	r2, [pc, #132]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003874:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ac:	d004      	beq.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10c      	bne.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	40014000 	.word	0x40014000

080038f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e060      	b.n	80039d6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d115      	bne.n	80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00

080039e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2204      	movs	r2, #4
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e040      	b.n	8003ac6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd f9c5 	bl	8000de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2224      	movs	r2, #36	; 0x24
 8003a5e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f98d 	bl	8003d90 <UART_SetConfig>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e022      	b.n	8003ac6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fbaf 	bl	80041ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fc36 	bl	8004330 <UART_CheckIdleState>
 8003ac4:	4603      	mov	r3, r0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af02      	add	r7, sp, #8
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 8081 	bne.w	8003bea <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Transmit+0x26>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e079      	b.n	8003bec <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x38>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e072      	b.n	8003bec <HAL_UART_Transmit+0x11e>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2221      	movs	r2, #33	; 0x21
 8003b18:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b1a:	f7fd fb57 	bl	80011cc <HAL_GetTick>
 8003b1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b38:	d108      	bne.n	8003b4c <HAL_UART_Transmit+0x7e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d104      	bne.n	8003b4c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	e003      	b.n	8003b54 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003b5c:	e02d      	b.n	8003bba <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fc26 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e039      	b.n	8003bec <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3302      	adds	r3, #2
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e008      	b.n	8003ba8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1cb      	bne.n	8003b5e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2140      	movs	r1, #64	; 0x40
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fbf2 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e005      	b.n	8003bec <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003bea:	2302      	movs	r3, #2
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	f040 80bb 	bne.w	8003d84 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_Receive+0x26>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0b3      	b.n	8003d86 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Receive+0x38>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0ac      	b.n	8003d86 <HAL_UART_Receive+0x192>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c40:	f7fd fac4 	bl	80011cc <HAL_GetTick>
 8003c44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d10e      	bne.n	8003c7e <HAL_UART_Receive+0x8a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_UART_Receive+0x80>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c72:	e02d      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c7c:	e028      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <HAL_UART_Receive+0xae>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d104      	bne.n	8003c98 <HAL_UART_Receive+0xa4>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	22ff      	movs	r2, #255	; 0xff
 8003c92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c96:	e01b      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	227f      	movs	r2, #127	; 0x7f
 8003c9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ca0:	e016      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003caa:	d10d      	bne.n	8003cc8 <HAL_UART_Receive+0xd4>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d104      	bne.n	8003cbe <HAL_UART_Receive+0xca>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	227f      	movs	r2, #127	; 0x7f
 8003cb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cbc:	e008      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	223f      	movs	r2, #63	; 0x3f
 8003cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cc6:	e003      	b.n	8003cd0 <HAL_UART_Receive+0xdc>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_UART_Receive+0x100>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	e003      	b.n	8003cfc <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003d04:	e033      	b.n	8003d6e <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2120      	movs	r1, #32
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fb52 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e032      	b.n	8003d86 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10c      	bne.n	8003d40 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	8a7b      	ldrh	r3, [r7, #18]
 8003d30:	4013      	ands	r3, r2
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	3302      	adds	r3, #2
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e00d      	b.n	8003d5c <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	8a7b      	ldrh	r3, [r7, #18]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1c5      	bne.n	8003d06 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	e000      	b.n	8003d86 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003d84:	2302      	movs	r3, #2
  }
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b08a      	sub	sp, #40	; 0x28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4bb4      	ldr	r3, [pc, #720]	; (8004090 <UART_SetConfig+0x300>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4aa9      	ldr	r2, [pc, #676]	; (8004094 <UART_SetConfig+0x304>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4aa0      	ldr	r2, [pc, #640]	; (8004098 <UART_SetConfig+0x308>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d126      	bne.n	8003e68 <UART_SetConfig+0xd8>
 8003e1a:	4ba0      	ldr	r3, [pc, #640]	; (800409c <UART_SetConfig+0x30c>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d81b      	bhi.n	8003e60 <UART_SetConfig+0xd0>
 8003e28:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0xa0>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e51 	.word	0x08003e51
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e080      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4e:	e07c      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003e50:	2304      	movs	r3, #4
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e56:	e078      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003e58:	2308      	movs	r3, #8
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e074      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e070      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a8c      	ldr	r2, [pc, #560]	; (80040a0 <UART_SetConfig+0x310>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d138      	bne.n	8003ee4 <UART_SetConfig+0x154>
 8003e72:	4b8a      	ldr	r3, [pc, #552]	; (800409c <UART_SetConfig+0x30c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e78:	f003 030c 	and.w	r3, r3, #12
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d82d      	bhi.n	8003edc <UART_SetConfig+0x14c>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0xf8>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003edd 	.word	0x08003edd
 8003e94:	08003edd 	.word	0x08003edd
 8003e98:	08003ecd 	.word	0x08003ecd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003ec5 	.word	0x08003ec5
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e042      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e03e      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e03a      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e036      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e032      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <UART_SetConfig+0x304>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d12a      	bne.n	8003f44 <UART_SetConfig+0x1b4>
 8003eee:	4b6b      	ldr	r3, [pc, #428]	; (800409c <UART_SetConfig+0x30c>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003efc:	d01a      	beq.n	8003f34 <UART_SetConfig+0x1a4>
 8003efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f02:	d81b      	bhi.n	8003f3c <UART_SetConfig+0x1ac>
 8003f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f08:	d00c      	beq.n	8003f24 <UART_SetConfig+0x194>
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d815      	bhi.n	8003f3c <UART_SetConfig+0x1ac>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <UART_SetConfig+0x18c>
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f18:	d008      	beq.n	8003f2c <UART_SetConfig+0x19c>
 8003f1a:	e00f      	b.n	8003f3c <UART_SetConfig+0x1ac>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e012      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003f24:	2302      	movs	r3, #2
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e00e      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f32:	e00a      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003f34:	2308      	movs	r3, #8
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f3a:	e006      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003f3c:	2310      	movs	r3, #16
 8003f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f42:	e002      	b.n	8003f4a <UART_SetConfig+0x1ba>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a51      	ldr	r2, [pc, #324]	; (8004094 <UART_SetConfig+0x304>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d17a      	bne.n	800404a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d824      	bhi.n	8003fa6 <UART_SetConfig+0x216>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <UART_SetConfig+0x1d4>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f89 	.word	0x08003f89
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f91 	.word	0x08003f91
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003f97 	.word	0x08003f97
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003fa7 	.word	0x08003fa7
 8003f80:	08003fa7 	.word	0x08003fa7
 8003f84:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f88:	f7fe f9c6 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003f8c:	61f8      	str	r0, [r7, #28]
        break;
 8003f8e:	e010      	b.n	8003fb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b44      	ldr	r3, [pc, #272]	; (80040a4 <UART_SetConfig+0x314>)
 8003f92:	61fb      	str	r3, [r7, #28]
        break;
 8003f94:	e00d      	b.n	8003fb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe f927 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 8003f9a:	61f8      	str	r0, [r7, #28]
        break;
 8003f9c:	e009      	b.n	8003fb2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	61fb      	str	r3, [r7, #28]
        break;
 8003fa4:	e005      	b.n	8003fb2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8109 	beq.w	80041cc <UART_SetConfig+0x43c>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d305      	bcc.n	8003fd6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fdc:	e0f6      	b.n	80041cc <UART_SetConfig+0x43c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	022b      	lsls	r3, r5, #8
 8003ff0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ff4:	0222      	lsls	r2, r4, #8
 8003ff6:	68f9      	ldr	r1, [r7, #12]
 8003ff8:	6849      	ldr	r1, [r1, #4]
 8003ffa:	0849      	lsrs	r1, r1, #1
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	4688      	mov	r8, r1
 8004000:	4681      	mov	r9, r0
 8004002:	eb12 0a08 	adds.w	sl, r2, r8
 8004006:	eb43 0b09 	adc.w	fp, r3, r9
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004018:	4650      	mov	r0, sl
 800401a:	4659      	mov	r1, fp
 800401c:	f7fc f928 	bl	8000270 <__aeabi_uldivmod>
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	4613      	mov	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d308      	bcc.n	8004042 <UART_SetConfig+0x2b2>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004036:	d204      	bcs.n	8004042 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	60da      	str	r2, [r3, #12]
 8004040:	e0c4      	b.n	80041cc <UART_SetConfig+0x43c>
        }
        else
        {
          ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004048:	e0c0      	b.n	80041cc <UART_SetConfig+0x43c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d16b      	bne.n	800412c <UART_SetConfig+0x39c>
  {
    switch (clocksource)
 8004054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004058:	2b08      	cmp	r3, #8
 800405a:	d834      	bhi.n	80040c6 <UART_SetConfig+0x336>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <UART_SetConfig+0x2d4>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004089 	.word	0x08004089
 8004068:	080040a9 	.word	0x080040a9
 800406c:	080040b1 	.word	0x080040b1
 8004070:	080040c7 	.word	0x080040c7
 8004074:	080040b7 	.word	0x080040b7
 8004078:	080040c7 	.word	0x080040c7
 800407c:	080040c7 	.word	0x080040c7
 8004080:	080040c7 	.word	0x080040c7
 8004084:	080040bf 	.word	0x080040bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004088:	f7fe f946 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 800408c:	61f8      	str	r0, [r7, #28]
        break;
 800408e:	e020      	b.n	80040d2 <UART_SetConfig+0x342>
 8004090:	efff69f3 	.word	0xefff69f3
 8004094:	40008000 	.word	0x40008000
 8004098:	40013800 	.word	0x40013800
 800409c:	40021000 	.word	0x40021000
 80040a0:	40004400 	.word	0x40004400
 80040a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fe f94c 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80040ac:	61f8      	str	r0, [r7, #28]
        break;
 80040ae:	e010      	b.n	80040d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b4d      	ldr	r3, [pc, #308]	; (80041e8 <UART_SetConfig+0x458>)
 80040b2:	61fb      	str	r3, [r7, #28]
        break;
 80040b4:	e00d      	b.n	80040d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7fe f897 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80040ba:	61f8      	str	r0, [r7, #28]
        break;
 80040bc:	e009      	b.n	80040d2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	61fb      	str	r3, [r7, #28]
        break;
 80040c4:	e005      	b.n	80040d2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d079      	beq.n	80041cc <UART_SetConfig+0x43c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005a      	lsls	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d916      	bls.n	8004124 <UART_SetConfig+0x394>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d212      	bcs.n	8004124 <UART_SetConfig+0x394>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f023 030f 	bic.w	r3, r3, #15
 8004106:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	b29b      	uxth	r3, r3
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	b29a      	uxth	r2, r3
 8004114:	8afb      	ldrh	r3, [r7, #22]
 8004116:	4313      	orrs	r3, r2
 8004118:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	8afa      	ldrh	r2, [r7, #22]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	e053      	b.n	80041cc <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800412a:	e04f      	b.n	80041cc <UART_SetConfig+0x43c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800412c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004130:	2b08      	cmp	r3, #8
 8004132:	d828      	bhi.n	8004186 <UART_SetConfig+0x3f6>
 8004134:	a201      	add	r2, pc, #4	; (adr r2, 800413c <UART_SetConfig+0x3ac>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	08004187 	.word	0x08004187
 800414c:	08004177 	.word	0x08004177
 8004150:	08004187 	.word	0x08004187
 8004154:	08004187 	.word	0x08004187
 8004158:	08004187 	.word	0x08004187
 800415c:	0800417f 	.word	0x0800417f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7fe f8da 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8004164:	61f8      	str	r0, [r7, #28]
        break;
 8004166:	e014      	b.n	8004192 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7fe f8ec 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 800416c:	61f8      	str	r0, [r7, #28]
        break;
 800416e:	e010      	b.n	8004192 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <UART_SetConfig+0x458>)
 8004172:	61fb      	str	r3, [r7, #28]
        break;
 8004174:	e00d      	b.n	8004192 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004176:	f7fe f837 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 800417a:	61f8      	str	r0, [r7, #28]
        break;
 800417c:	e009      	b.n	8004192 <UART_SetConfig+0x402>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800417e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004182:	61fb      	str	r3, [r7, #28]
        break;
 8004184:	e005      	b.n	8004192 <UART_SetConfig+0x402>
      default:
        pclk = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004190:	bf00      	nop
    }

    if (pclk != 0U)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d019      	beq.n	80041cc <UART_SetConfig+0x43c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	085a      	lsrs	r2, r3, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	2b0f      	cmp	r3, #15
 80041b2:	d908      	bls.n	80041c6 <UART_SetConfig+0x436>
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ba:	d204      	bcs.n	80041c6 <UART_SetConfig+0x436>
      {
        huart->Instance->BRR = usartdiv;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e002      	b.n	80041cc <UART_SetConfig+0x43c>
      }
      else
      {
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80041d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3728      	adds	r7, #40	; 0x28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e6:	bf00      	nop
 80041e8:	00f42400 	.word	0x00f42400

080041ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01a      	beq.n	8004302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ea:	d10a      	bne.n	8004302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800433e:	f7fc ff45 	bl	80011cc <HAL_GetTick>
 8004342:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d10e      	bne.n	8004370 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004352:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f82a 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e020      	b.n	80043b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d10e      	bne.n	800439c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800437e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f814 	bl	80043ba <UART_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e00a      	b.n	80043b2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	60f8      	str	r0, [r7, #12]
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ca:	e05d      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d2:	d059      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d4:	f7fc fefa 	bl	80011cc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d302      	bcc.n	80043ea <UART_WaitOnFlagUntilTimeout+0x30>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d11b      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e042      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02b      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443e:	d123      	bne.n	8004488 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004448:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004458:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0201 	bic.w	r2, r2, #1
 8004468:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2220      	movs	r2, #32
 800446e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e00f      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d092      	beq.n	80043cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <std>:
 80044b0:	2300      	movs	r3, #0
 80044b2:	b510      	push	{r4, lr}
 80044b4:	4604      	mov	r4, r0
 80044b6:	e9c0 3300 	strd	r3, r3, [r0]
 80044ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044be:	6083      	str	r3, [r0, #8]
 80044c0:	8181      	strh	r1, [r0, #12]
 80044c2:	6643      	str	r3, [r0, #100]	; 0x64
 80044c4:	81c2      	strh	r2, [r0, #14]
 80044c6:	6183      	str	r3, [r0, #24]
 80044c8:	4619      	mov	r1, r3
 80044ca:	2208      	movs	r2, #8
 80044cc:	305c      	adds	r0, #92	; 0x5c
 80044ce:	f000 f918 	bl	8004702 <memset>
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <std+0x58>)
 80044d4:	6263      	str	r3, [r4, #36]	; 0x24
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <std+0x5c>)
 80044d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <std+0x60>)
 80044dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044de:	4b0d      	ldr	r3, [pc, #52]	; (8004514 <std+0x64>)
 80044e0:	6323      	str	r3, [r4, #48]	; 0x30
 80044e2:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <std+0x68>)
 80044e4:	6224      	str	r4, [r4, #32]
 80044e6:	429c      	cmp	r4, r3
 80044e8:	d006      	beq.n	80044f8 <std+0x48>
 80044ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044ee:	4294      	cmp	r4, r2
 80044f0:	d002      	beq.n	80044f8 <std+0x48>
 80044f2:	33d0      	adds	r3, #208	; 0xd0
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d105      	bne.n	8004504 <std+0x54>
 80044f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	f000 b978 	b.w	80047f4 <__retarget_lock_init_recursive>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	0800467d 	.word	0x0800467d
 800450c:	0800469f 	.word	0x0800469f
 8004510:	080046d7 	.word	0x080046d7
 8004514:	080046fb 	.word	0x080046fb
 8004518:	20000184 	.word	0x20000184

0800451c <stdio_exit_handler>:
 800451c:	4a02      	ldr	r2, [pc, #8]	; (8004528 <stdio_exit_handler+0xc>)
 800451e:	4903      	ldr	r1, [pc, #12]	; (800452c <stdio_exit_handler+0x10>)
 8004520:	4803      	ldr	r0, [pc, #12]	; (8004530 <stdio_exit_handler+0x14>)
 8004522:	f000 b869 	b.w	80045f8 <_fwalk_sglue>
 8004526:	bf00      	nop
 8004528:	20000034 	.word	0x20000034
 800452c:	080056a9 	.word	0x080056a9
 8004530:	20000040 	.word	0x20000040

08004534 <cleanup_stdio>:
 8004534:	6841      	ldr	r1, [r0, #4]
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <cleanup_stdio+0x34>)
 8004538:	4299      	cmp	r1, r3
 800453a:	b510      	push	{r4, lr}
 800453c:	4604      	mov	r4, r0
 800453e:	d001      	beq.n	8004544 <cleanup_stdio+0x10>
 8004540:	f001 f8b2 	bl	80056a8 <_fflush_r>
 8004544:	68a1      	ldr	r1, [r4, #8]
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <cleanup_stdio+0x38>)
 8004548:	4299      	cmp	r1, r3
 800454a:	d002      	beq.n	8004552 <cleanup_stdio+0x1e>
 800454c:	4620      	mov	r0, r4
 800454e:	f001 f8ab 	bl	80056a8 <_fflush_r>
 8004552:	68e1      	ldr	r1, [r4, #12]
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <cleanup_stdio+0x3c>)
 8004556:	4299      	cmp	r1, r3
 8004558:	d004      	beq.n	8004564 <cleanup_stdio+0x30>
 800455a:	4620      	mov	r0, r4
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004560:	f001 b8a2 	b.w	80056a8 <_fflush_r>
 8004564:	bd10      	pop	{r4, pc}
 8004566:	bf00      	nop
 8004568:	20000184 	.word	0x20000184
 800456c:	200001ec 	.word	0x200001ec
 8004570:	20000254 	.word	0x20000254

08004574 <global_stdio_init.part.0>:
 8004574:	b510      	push	{r4, lr}
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <global_stdio_init.part.0+0x30>)
 8004578:	4c0b      	ldr	r4, [pc, #44]	; (80045a8 <global_stdio_init.part.0+0x34>)
 800457a:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <global_stdio_init.part.0+0x38>)
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4620      	mov	r0, r4
 8004580:	2200      	movs	r2, #0
 8004582:	2104      	movs	r1, #4
 8004584:	f7ff ff94 	bl	80044b0 <std>
 8004588:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800458c:	2201      	movs	r2, #1
 800458e:	2109      	movs	r1, #9
 8004590:	f7ff ff8e 	bl	80044b0 <std>
 8004594:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004598:	2202      	movs	r2, #2
 800459a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800459e:	2112      	movs	r1, #18
 80045a0:	f7ff bf86 	b.w	80044b0 <std>
 80045a4:	200002bc 	.word	0x200002bc
 80045a8:	20000184 	.word	0x20000184
 80045ac:	0800451d 	.word	0x0800451d

080045b0 <__sfp_lock_acquire>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__sfp_lock_acquire+0x8>)
 80045b2:	f000 b920 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 80045b6:	bf00      	nop
 80045b8:	200002c5 	.word	0x200002c5

080045bc <__sfp_lock_release>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__sfp_lock_release+0x8>)
 80045be:	f000 b91b 	b.w	80047f8 <__retarget_lock_release_recursive>
 80045c2:	bf00      	nop
 80045c4:	200002c5 	.word	0x200002c5

080045c8 <__sinit>:
 80045c8:	b510      	push	{r4, lr}
 80045ca:	4604      	mov	r4, r0
 80045cc:	f7ff fff0 	bl	80045b0 <__sfp_lock_acquire>
 80045d0:	6a23      	ldr	r3, [r4, #32]
 80045d2:	b11b      	cbz	r3, 80045dc <__sinit+0x14>
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f7ff bff0 	b.w	80045bc <__sfp_lock_release>
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <__sinit+0x28>)
 80045de:	6223      	str	r3, [r4, #32]
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__sinit+0x2c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f5      	bne.n	80045d4 <__sinit+0xc>
 80045e8:	f7ff ffc4 	bl	8004574 <global_stdio_init.part.0>
 80045ec:	e7f2      	b.n	80045d4 <__sinit+0xc>
 80045ee:	bf00      	nop
 80045f0:	08004535 	.word	0x08004535
 80045f4:	200002bc 	.word	0x200002bc

080045f8 <_fwalk_sglue>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4607      	mov	r7, r0
 80045fe:	4688      	mov	r8, r1
 8004600:	4614      	mov	r4, r2
 8004602:	2600      	movs	r6, #0
 8004604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004608:	f1b9 0901 	subs.w	r9, r9, #1
 800460c:	d505      	bpl.n	800461a <_fwalk_sglue+0x22>
 800460e:	6824      	ldr	r4, [r4, #0]
 8004610:	2c00      	cmp	r4, #0
 8004612:	d1f7      	bne.n	8004604 <_fwalk_sglue+0xc>
 8004614:	4630      	mov	r0, r6
 8004616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d907      	bls.n	8004630 <_fwalk_sglue+0x38>
 8004620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	d003      	beq.n	8004630 <_fwalk_sglue+0x38>
 8004628:	4629      	mov	r1, r5
 800462a:	4638      	mov	r0, r7
 800462c:	47c0      	blx	r8
 800462e:	4306      	orrs	r6, r0
 8004630:	3568      	adds	r5, #104	; 0x68
 8004632:	e7e9      	b.n	8004608 <_fwalk_sglue+0x10>

08004634 <iprintf>:
 8004634:	b40f      	push	{r0, r1, r2, r3}
 8004636:	b507      	push	{r0, r1, r2, lr}
 8004638:	4906      	ldr	r1, [pc, #24]	; (8004654 <iprintf+0x20>)
 800463a:	ab04      	add	r3, sp, #16
 800463c:	6808      	ldr	r0, [r1, #0]
 800463e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004642:	6881      	ldr	r1, [r0, #8]
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	f000 f9fb 	bl	8004a40 <_vfiprintf_r>
 800464a:	b003      	add	sp, #12
 800464c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004650:	b004      	add	sp, #16
 8004652:	4770      	bx	lr
 8004654:	2000008c 	.word	0x2000008c

08004658 <iscanf>:
 8004658:	b40f      	push	{r0, r1, r2, r3}
 800465a:	b507      	push	{r0, r1, r2, lr}
 800465c:	4906      	ldr	r1, [pc, #24]	; (8004678 <iscanf+0x20>)
 800465e:	ab04      	add	r3, sp, #16
 8004660:	6808      	ldr	r0, [r1, #0]
 8004662:	f853 2b04 	ldr.w	r2, [r3], #4
 8004666:	6841      	ldr	r1, [r0, #4]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	f000 fe35 	bl	80052d8 <_vfiscanf_r>
 800466e:	b003      	add	sp, #12
 8004670:	f85d eb04 	ldr.w	lr, [sp], #4
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr
 8004678:	2000008c 	.word	0x2000008c

0800467c <__sread>:
 800467c:	b510      	push	{r4, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	f000 f868 	bl	8004758 <_read_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	bfab      	itete	ge
 800468c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800468e:	89a3      	ldrhlt	r3, [r4, #12]
 8004690:	181b      	addge	r3, r3, r0
 8004692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004696:	bfac      	ite	ge
 8004698:	6563      	strge	r3, [r4, #84]	; 0x54
 800469a:	81a3      	strhlt	r3, [r4, #12]
 800469c:	bd10      	pop	{r4, pc}

0800469e <__swrite>:
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	461f      	mov	r7, r3
 80046a4:	898b      	ldrh	r3, [r1, #12]
 80046a6:	05db      	lsls	r3, r3, #23
 80046a8:	4605      	mov	r5, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4616      	mov	r6, r2
 80046ae:	d505      	bpl.n	80046bc <__swrite+0x1e>
 80046b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b4:	2302      	movs	r3, #2
 80046b6:	2200      	movs	r2, #0
 80046b8:	f000 f83c 	bl	8004734 <_lseek_r>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	4632      	mov	r2, r6
 80046ca:	463b      	mov	r3, r7
 80046cc:	4628      	mov	r0, r5
 80046ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	f000 b853 	b.w	800477c <_write_r>

080046d6 <__sseek>:
 80046d6:	b510      	push	{r4, lr}
 80046d8:	460c      	mov	r4, r1
 80046da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046de:	f000 f829 	bl	8004734 <_lseek_r>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	bf15      	itete	ne
 80046e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80046ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046f2:	81a3      	strheq	r3, [r4, #12]
 80046f4:	bf18      	it	ne
 80046f6:	81a3      	strhne	r3, [r4, #12]
 80046f8:	bd10      	pop	{r4, pc}

080046fa <__sclose>:
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 b809 	b.w	8004714 <_close_r>

08004702 <memset>:
 8004702:	4402      	add	r2, r0
 8004704:	4603      	mov	r3, r0
 8004706:	4293      	cmp	r3, r2
 8004708:	d100      	bne.n	800470c <memset+0xa>
 800470a:	4770      	bx	lr
 800470c:	f803 1b01 	strb.w	r1, [r3], #1
 8004710:	e7f9      	b.n	8004706 <memset+0x4>
	...

08004714 <_close_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	4d06      	ldr	r5, [pc, #24]	; (8004730 <_close_r+0x1c>)
 8004718:	2300      	movs	r3, #0
 800471a:	4604      	mov	r4, r0
 800471c:	4608      	mov	r0, r1
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	f7fc fc22 	bl	8000f68 <_close>
 8004724:	1c43      	adds	r3, r0, #1
 8004726:	d102      	bne.n	800472e <_close_r+0x1a>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	b103      	cbz	r3, 800472e <_close_r+0x1a>
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	bd38      	pop	{r3, r4, r5, pc}
 8004730:	200002c0 	.word	0x200002c0

08004734 <_lseek_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4d07      	ldr	r5, [pc, #28]	; (8004754 <_lseek_r+0x20>)
 8004738:	4604      	mov	r4, r0
 800473a:	4608      	mov	r0, r1
 800473c:	4611      	mov	r1, r2
 800473e:	2200      	movs	r2, #0
 8004740:	602a      	str	r2, [r5, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	f7fc fc37 	bl	8000fb6 <_lseek>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	d102      	bne.n	8004752 <_lseek_r+0x1e>
 800474c:	682b      	ldr	r3, [r5, #0]
 800474e:	b103      	cbz	r3, 8004752 <_lseek_r+0x1e>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	bd38      	pop	{r3, r4, r5, pc}
 8004754:	200002c0 	.word	0x200002c0

08004758 <_read_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4d07      	ldr	r5, [pc, #28]	; (8004778 <_read_r+0x20>)
 800475c:	4604      	mov	r4, r0
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	2200      	movs	r2, #0
 8004764:	602a      	str	r2, [r5, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f7fc fbbe 	bl	8000ee8 <_read>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_read_r+0x1e>
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	b103      	cbz	r3, 8004776 <_read_r+0x1e>
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	200002c0 	.word	0x200002c0

0800477c <_write_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4d07      	ldr	r5, [pc, #28]	; (800479c <_write_r+0x20>)
 8004780:	4604      	mov	r4, r0
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	2200      	movs	r2, #0
 8004788:	602a      	str	r2, [r5, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	f7fc fbca 	bl	8000f24 <_write>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d102      	bne.n	800479a <_write_r+0x1e>
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	b103      	cbz	r3, 800479a <_write_r+0x1e>
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	bd38      	pop	{r3, r4, r5, pc}
 800479c:	200002c0 	.word	0x200002c0

080047a0 <__errno>:
 80047a0:	4b01      	ldr	r3, [pc, #4]	; (80047a8 <__errno+0x8>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	2000008c 	.word	0x2000008c

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f001 fb7e 	bl	8005ec0 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	08006280 	.word	0x08006280
 80047e8:	08006280 	.word	0x08006280
 80047ec:	08006280 	.word	0x08006280
 80047f0:	08006284 	.word	0x08006284

080047f4 <__retarget_lock_init_recursive>:
 80047f4:	4770      	bx	lr

080047f6 <__retarget_lock_acquire_recursive>:
 80047f6:	4770      	bx	lr

080047f8 <__retarget_lock_release_recursive>:
 80047f8:	4770      	bx	lr
	...

080047fc <_free_r>:
 80047fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047fe:	2900      	cmp	r1, #0
 8004800:	d044      	beq.n	800488c <_free_r+0x90>
 8004802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004806:	9001      	str	r0, [sp, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f1a1 0404 	sub.w	r4, r1, #4
 800480e:	bfb8      	it	lt
 8004810:	18e4      	addlt	r4, r4, r3
 8004812:	f000 f8df 	bl	80049d4 <__malloc_lock>
 8004816:	4a1e      	ldr	r2, [pc, #120]	; (8004890 <_free_r+0x94>)
 8004818:	9801      	ldr	r0, [sp, #4]
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	b933      	cbnz	r3, 800482c <_free_r+0x30>
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	6014      	str	r4, [r2, #0]
 8004822:	b003      	add	sp, #12
 8004824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004828:	f000 b8da 	b.w	80049e0 <__malloc_unlock>
 800482c:	42a3      	cmp	r3, r4
 800482e:	d908      	bls.n	8004842 <_free_r+0x46>
 8004830:	6825      	ldr	r5, [r4, #0]
 8004832:	1961      	adds	r1, r4, r5
 8004834:	428b      	cmp	r3, r1
 8004836:	bf01      	itttt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	1949      	addeq	r1, r1, r5
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	e7ed      	b.n	800481e <_free_r+0x22>
 8004842:	461a      	mov	r2, r3
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	b10b      	cbz	r3, 800484c <_free_r+0x50>
 8004848:	42a3      	cmp	r3, r4
 800484a:	d9fa      	bls.n	8004842 <_free_r+0x46>
 800484c:	6811      	ldr	r1, [r2, #0]
 800484e:	1855      	adds	r5, r2, r1
 8004850:	42a5      	cmp	r5, r4
 8004852:	d10b      	bne.n	800486c <_free_r+0x70>
 8004854:	6824      	ldr	r4, [r4, #0]
 8004856:	4421      	add	r1, r4
 8004858:	1854      	adds	r4, r2, r1
 800485a:	42a3      	cmp	r3, r4
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	d1e0      	bne.n	8004822 <_free_r+0x26>
 8004860:	681c      	ldr	r4, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	6053      	str	r3, [r2, #4]
 8004866:	440c      	add	r4, r1
 8004868:	6014      	str	r4, [r2, #0]
 800486a:	e7da      	b.n	8004822 <_free_r+0x26>
 800486c:	d902      	bls.n	8004874 <_free_r+0x78>
 800486e:	230c      	movs	r3, #12
 8004870:	6003      	str	r3, [r0, #0]
 8004872:	e7d6      	b.n	8004822 <_free_r+0x26>
 8004874:	6825      	ldr	r5, [r4, #0]
 8004876:	1961      	adds	r1, r4, r5
 8004878:	428b      	cmp	r3, r1
 800487a:	bf04      	itt	eq
 800487c:	6819      	ldreq	r1, [r3, #0]
 800487e:	685b      	ldreq	r3, [r3, #4]
 8004880:	6063      	str	r3, [r4, #4]
 8004882:	bf04      	itt	eq
 8004884:	1949      	addeq	r1, r1, r5
 8004886:	6021      	streq	r1, [r4, #0]
 8004888:	6054      	str	r4, [r2, #4]
 800488a:	e7ca      	b.n	8004822 <_free_r+0x26>
 800488c:	b003      	add	sp, #12
 800488e:	bd30      	pop	{r4, r5, pc}
 8004890:	200002c8 	.word	0x200002c8

08004894 <sbrk_aligned>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	4e0e      	ldr	r6, [pc, #56]	; (80048d0 <sbrk_aligned+0x3c>)
 8004898:	460c      	mov	r4, r1
 800489a:	6831      	ldr	r1, [r6, #0]
 800489c:	4605      	mov	r5, r0
 800489e:	b911      	cbnz	r1, 80048a6 <sbrk_aligned+0x12>
 80048a0:	f001 f93c 	bl	8005b1c <_sbrk_r>
 80048a4:	6030      	str	r0, [r6, #0]
 80048a6:	4621      	mov	r1, r4
 80048a8:	4628      	mov	r0, r5
 80048aa:	f001 f937 	bl	8005b1c <_sbrk_r>
 80048ae:	1c43      	adds	r3, r0, #1
 80048b0:	d00a      	beq.n	80048c8 <sbrk_aligned+0x34>
 80048b2:	1cc4      	adds	r4, r0, #3
 80048b4:	f024 0403 	bic.w	r4, r4, #3
 80048b8:	42a0      	cmp	r0, r4
 80048ba:	d007      	beq.n	80048cc <sbrk_aligned+0x38>
 80048bc:	1a21      	subs	r1, r4, r0
 80048be:	4628      	mov	r0, r5
 80048c0:	f001 f92c 	bl	8005b1c <_sbrk_r>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d101      	bne.n	80048cc <sbrk_aligned+0x38>
 80048c8:	f04f 34ff 	mov.w	r4, #4294967295
 80048cc:	4620      	mov	r0, r4
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	200002cc 	.word	0x200002cc

080048d4 <_malloc_r>:
 80048d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048d8:	1ccd      	adds	r5, r1, #3
 80048da:	f025 0503 	bic.w	r5, r5, #3
 80048de:	3508      	adds	r5, #8
 80048e0:	2d0c      	cmp	r5, #12
 80048e2:	bf38      	it	cc
 80048e4:	250c      	movcc	r5, #12
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	4607      	mov	r7, r0
 80048ea:	db01      	blt.n	80048f0 <_malloc_r+0x1c>
 80048ec:	42a9      	cmp	r1, r5
 80048ee:	d905      	bls.n	80048fc <_malloc_r+0x28>
 80048f0:	230c      	movs	r3, #12
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	2600      	movs	r6, #0
 80048f6:	4630      	mov	r0, r6
 80048f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049d0 <_malloc_r+0xfc>
 8004900:	f000 f868 	bl	80049d4 <__malloc_lock>
 8004904:	f8d8 3000 	ldr.w	r3, [r8]
 8004908:	461c      	mov	r4, r3
 800490a:	bb5c      	cbnz	r4, 8004964 <_malloc_r+0x90>
 800490c:	4629      	mov	r1, r5
 800490e:	4638      	mov	r0, r7
 8004910:	f7ff ffc0 	bl	8004894 <sbrk_aligned>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	4604      	mov	r4, r0
 8004918:	d155      	bne.n	80049c6 <_malloc_r+0xf2>
 800491a:	f8d8 4000 	ldr.w	r4, [r8]
 800491e:	4626      	mov	r6, r4
 8004920:	2e00      	cmp	r6, #0
 8004922:	d145      	bne.n	80049b0 <_malloc_r+0xdc>
 8004924:	2c00      	cmp	r4, #0
 8004926:	d048      	beq.n	80049ba <_malloc_r+0xe6>
 8004928:	6823      	ldr	r3, [r4, #0]
 800492a:	4631      	mov	r1, r6
 800492c:	4638      	mov	r0, r7
 800492e:	eb04 0903 	add.w	r9, r4, r3
 8004932:	f001 f8f3 	bl	8005b1c <_sbrk_r>
 8004936:	4581      	cmp	r9, r0
 8004938:	d13f      	bne.n	80049ba <_malloc_r+0xe6>
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	1a6d      	subs	r5, r5, r1
 800493e:	4629      	mov	r1, r5
 8004940:	4638      	mov	r0, r7
 8004942:	f7ff ffa7 	bl	8004894 <sbrk_aligned>
 8004946:	3001      	adds	r0, #1
 8004948:	d037      	beq.n	80049ba <_malloc_r+0xe6>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	442b      	add	r3, r5
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	f8d8 3000 	ldr.w	r3, [r8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d038      	beq.n	80049ca <_malloc_r+0xf6>
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	42a2      	cmp	r2, r4
 800495c:	d12b      	bne.n	80049b6 <_malloc_r+0xe2>
 800495e:	2200      	movs	r2, #0
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	e00f      	b.n	8004984 <_malloc_r+0xb0>
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	1b52      	subs	r2, r2, r5
 8004968:	d41f      	bmi.n	80049aa <_malloc_r+0xd6>
 800496a:	2a0b      	cmp	r2, #11
 800496c:	d917      	bls.n	800499e <_malloc_r+0xca>
 800496e:	1961      	adds	r1, r4, r5
 8004970:	42a3      	cmp	r3, r4
 8004972:	6025      	str	r5, [r4, #0]
 8004974:	bf18      	it	ne
 8004976:	6059      	strne	r1, [r3, #4]
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	bf08      	it	eq
 800497c:	f8c8 1000 	streq.w	r1, [r8]
 8004980:	5162      	str	r2, [r4, r5]
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	4638      	mov	r0, r7
 8004986:	f104 060b 	add.w	r6, r4, #11
 800498a:	f000 f829 	bl	80049e0 <__malloc_unlock>
 800498e:	f026 0607 	bic.w	r6, r6, #7
 8004992:	1d23      	adds	r3, r4, #4
 8004994:	1af2      	subs	r2, r6, r3
 8004996:	d0ae      	beq.n	80048f6 <_malloc_r+0x22>
 8004998:	1b9b      	subs	r3, r3, r6
 800499a:	50a3      	str	r3, [r4, r2]
 800499c:	e7ab      	b.n	80048f6 <_malloc_r+0x22>
 800499e:	42a3      	cmp	r3, r4
 80049a0:	6862      	ldr	r2, [r4, #4]
 80049a2:	d1dd      	bne.n	8004960 <_malloc_r+0x8c>
 80049a4:	f8c8 2000 	str.w	r2, [r8]
 80049a8:	e7ec      	b.n	8004984 <_malloc_r+0xb0>
 80049aa:	4623      	mov	r3, r4
 80049ac:	6864      	ldr	r4, [r4, #4]
 80049ae:	e7ac      	b.n	800490a <_malloc_r+0x36>
 80049b0:	4634      	mov	r4, r6
 80049b2:	6876      	ldr	r6, [r6, #4]
 80049b4:	e7b4      	b.n	8004920 <_malloc_r+0x4c>
 80049b6:	4613      	mov	r3, r2
 80049b8:	e7cc      	b.n	8004954 <_malloc_r+0x80>
 80049ba:	230c      	movs	r3, #12
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4638      	mov	r0, r7
 80049c0:	f000 f80e 	bl	80049e0 <__malloc_unlock>
 80049c4:	e797      	b.n	80048f6 <_malloc_r+0x22>
 80049c6:	6025      	str	r5, [r4, #0]
 80049c8:	e7dc      	b.n	8004984 <_malloc_r+0xb0>
 80049ca:	605b      	str	r3, [r3, #4]
 80049cc:	deff      	udf	#255	; 0xff
 80049ce:	bf00      	nop
 80049d0:	200002c8 	.word	0x200002c8

080049d4 <__malloc_lock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	; (80049dc <__malloc_lock+0x8>)
 80049d6:	f7ff bf0e 	b.w	80047f6 <__retarget_lock_acquire_recursive>
 80049da:	bf00      	nop
 80049dc:	200002c4 	.word	0x200002c4

080049e0 <__malloc_unlock>:
 80049e0:	4801      	ldr	r0, [pc, #4]	; (80049e8 <__malloc_unlock+0x8>)
 80049e2:	f7ff bf09 	b.w	80047f8 <__retarget_lock_release_recursive>
 80049e6:	bf00      	nop
 80049e8:	200002c4 	.word	0x200002c4

080049ec <__sfputc_r>:
 80049ec:	6893      	ldr	r3, [r2, #8]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	b410      	push	{r4}
 80049f4:	6093      	str	r3, [r2, #8]
 80049f6:	da08      	bge.n	8004a0a <__sfputc_r+0x1e>
 80049f8:	6994      	ldr	r4, [r2, #24]
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	db01      	blt.n	8004a02 <__sfputc_r+0x16>
 80049fe:	290a      	cmp	r1, #10
 8004a00:	d103      	bne.n	8004a0a <__sfputc_r+0x1e>
 8004a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a06:	f000 bff4 	b.w	80059f2 <__swbuf_r>
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	1c58      	adds	r0, r3, #1
 8004a0e:	6010      	str	r0, [r2, #0]
 8004a10:	7019      	strb	r1, [r3, #0]
 8004a12:	4608      	mov	r0, r1
 8004a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <__sfputs_r>:
 8004a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	18d5      	adds	r5, r2, r3
 8004a24:	42ac      	cmp	r4, r5
 8004a26:	d101      	bne.n	8004a2c <__sfputs_r+0x12>
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e007      	b.n	8004a3c <__sfputs_r+0x22>
 8004a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a30:	463a      	mov	r2, r7
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7ff ffda 	bl	80049ec <__sfputc_r>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d1f3      	bne.n	8004a24 <__sfputs_r+0xa>
 8004a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a40 <_vfiprintf_r>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	460d      	mov	r5, r1
 8004a46:	b09d      	sub	sp, #116	; 0x74
 8004a48:	4614      	mov	r4, r2
 8004a4a:	4698      	mov	r8, r3
 8004a4c:	4606      	mov	r6, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <_vfiprintf_r+0x18>
 8004a50:	6a03      	ldr	r3, [r0, #32]
 8004a52:	b90b      	cbnz	r3, 8004a58 <_vfiprintf_r+0x18>
 8004a54:	f7ff fdb8 	bl	80045c8 <__sinit>
 8004a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a5a:	07d9      	lsls	r1, r3, #31
 8004a5c:	d405      	bmi.n	8004a6a <_vfiprintf_r+0x2a>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	059a      	lsls	r2, r3, #22
 8004a62:	d402      	bmi.n	8004a6a <_vfiprintf_r+0x2a>
 8004a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a66:	f7ff fec6 	bl	80047f6 <__retarget_lock_acquire_recursive>
 8004a6a:	89ab      	ldrh	r3, [r5, #12]
 8004a6c:	071b      	lsls	r3, r3, #28
 8004a6e:	d501      	bpl.n	8004a74 <_vfiprintf_r+0x34>
 8004a70:	692b      	ldr	r3, [r5, #16]
 8004a72:	b99b      	cbnz	r3, 8004a9c <_vfiprintf_r+0x5c>
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f000 fff8 	bl	8005a6c <__swsetup_r>
 8004a7c:	b170      	cbz	r0, 8004a9c <_vfiprintf_r+0x5c>
 8004a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a80:	07dc      	lsls	r4, r3, #31
 8004a82:	d504      	bpl.n	8004a8e <_vfiprintf_r+0x4e>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	b01d      	add	sp, #116	; 0x74
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	0598      	lsls	r0, r3, #22
 8004a92:	d4f7      	bmi.n	8004a84 <_vfiprintf_r+0x44>
 8004a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a96:	f7ff feaf 	bl	80047f8 <__retarget_lock_release_recursive>
 8004a9a:	e7f3      	b.n	8004a84 <_vfiprintf_r+0x44>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aaa:	2330      	movs	r3, #48	; 0x30
 8004aac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c60 <_vfiprintf_r+0x220>
 8004ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ab4:	f04f 0901 	mov.w	r9, #1
 8004ab8:	4623      	mov	r3, r4
 8004aba:	469a      	mov	sl, r3
 8004abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ac0:	b10a      	cbz	r2, 8004ac6 <_vfiprintf_r+0x86>
 8004ac2:	2a25      	cmp	r2, #37	; 0x25
 8004ac4:	d1f9      	bne.n	8004aba <_vfiprintf_r+0x7a>
 8004ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aca:	d00b      	beq.n	8004ae4 <_vfiprintf_r+0xa4>
 8004acc:	465b      	mov	r3, fp
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ffa1 	bl	8004a1a <__sfputs_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f000 80a9 	beq.w	8004c30 <_vfiprintf_r+0x1f0>
 8004ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae0:	445a      	add	r2, fp
 8004ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a1 	beq.w	8004c30 <_vfiprintf_r+0x1f0>
 8004aee:	2300      	movs	r3, #0
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af8:	f10a 0a01 	add.w	sl, sl, #1
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9307      	str	r3, [sp, #28]
 8004b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b04:	931a      	str	r3, [sp, #104]	; 0x68
 8004b06:	4654      	mov	r4, sl
 8004b08:	2205      	movs	r2, #5
 8004b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0e:	4854      	ldr	r0, [pc, #336]	; (8004c60 <_vfiprintf_r+0x220>)
 8004b10:	f7fb fb5e 	bl	80001d0 <memchr>
 8004b14:	9a04      	ldr	r2, [sp, #16]
 8004b16:	b9d8      	cbnz	r0, 8004b50 <_vfiprintf_r+0x110>
 8004b18:	06d1      	lsls	r1, r2, #27
 8004b1a:	bf44      	itt	mi
 8004b1c:	2320      	movmi	r3, #32
 8004b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b22:	0713      	lsls	r3, r2, #28
 8004b24:	bf44      	itt	mi
 8004b26:	232b      	movmi	r3, #43	; 0x2b
 8004b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d015      	beq.n	8004b60 <_vfiprintf_r+0x120>
 8004b34:	9a07      	ldr	r2, [sp, #28]
 8004b36:	4654      	mov	r4, sl
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f04f 0c0a 	mov.w	ip, #10
 8004b3e:	4621      	mov	r1, r4
 8004b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b44:	3b30      	subs	r3, #48	; 0x30
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d94d      	bls.n	8004be6 <_vfiprintf_r+0x1a6>
 8004b4a:	b1b0      	cbz	r0, 8004b7a <_vfiprintf_r+0x13a>
 8004b4c:	9207      	str	r2, [sp, #28]
 8004b4e:	e014      	b.n	8004b7a <_vfiprintf_r+0x13a>
 8004b50:	eba0 0308 	sub.w	r3, r0, r8
 8004b54:	fa09 f303 	lsl.w	r3, r9, r3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	46a2      	mov	sl, r4
 8004b5e:	e7d2      	b.n	8004b06 <_vfiprintf_r+0xc6>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	1d19      	adds	r1, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	9103      	str	r1, [sp, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bfbb      	ittet	lt
 8004b6c:	425b      	neglt	r3, r3
 8004b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b72:	9307      	strge	r3, [sp, #28]
 8004b74:	9307      	strlt	r3, [sp, #28]
 8004b76:	bfb8      	it	lt
 8004b78:	9204      	strlt	r2, [sp, #16]
 8004b7a:	7823      	ldrb	r3, [r4, #0]
 8004b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b7e:	d10c      	bne.n	8004b9a <_vfiprintf_r+0x15a>
 8004b80:	7863      	ldrb	r3, [r4, #1]
 8004b82:	2b2a      	cmp	r3, #42	; 0x2a
 8004b84:	d134      	bne.n	8004bf0 <_vfiprintf_r+0x1b0>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	9203      	str	r2, [sp, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfb8      	it	lt
 8004b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b96:	3402      	adds	r4, #2
 8004b98:	9305      	str	r3, [sp, #20]
 8004b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c70 <_vfiprintf_r+0x230>
 8004b9e:	7821      	ldrb	r1, [r4, #0]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	f7fb fb14 	bl	80001d0 <memchr>
 8004ba8:	b138      	cbz	r0, 8004bba <_vfiprintf_r+0x17a>
 8004baa:	9b04      	ldr	r3, [sp, #16]
 8004bac:	eba0 000a 	sub.w	r0, r0, sl
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	4082      	lsls	r2, r0
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	3401      	adds	r4, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbe:	4829      	ldr	r0, [pc, #164]	; (8004c64 <_vfiprintf_r+0x224>)
 8004bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc4:	2206      	movs	r2, #6
 8004bc6:	f7fb fb03 	bl	80001d0 <memchr>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d03f      	beq.n	8004c4e <_vfiprintf_r+0x20e>
 8004bce:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <_vfiprintf_r+0x228>)
 8004bd0:	bb1b      	cbnz	r3, 8004c1a <_vfiprintf_r+0x1da>
 8004bd2:	9b03      	ldr	r3, [sp, #12]
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	3308      	adds	r3, #8
 8004bdc:	9303      	str	r3, [sp, #12]
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	443b      	add	r3, r7
 8004be2:	9309      	str	r3, [sp, #36]	; 0x24
 8004be4:	e768      	b.n	8004ab8 <_vfiprintf_r+0x78>
 8004be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bea:	460c      	mov	r4, r1
 8004bec:	2001      	movs	r0, #1
 8004bee:	e7a6      	b.n	8004b3e <_vfiprintf_r+0xfe>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	3401      	adds	r4, #1
 8004bf4:	9305      	str	r3, [sp, #20]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c02:	3a30      	subs	r2, #48	; 0x30
 8004c04:	2a09      	cmp	r2, #9
 8004c06:	d903      	bls.n	8004c10 <_vfiprintf_r+0x1d0>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0c6      	beq.n	8004b9a <_vfiprintf_r+0x15a>
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	e7c4      	b.n	8004b9a <_vfiprintf_r+0x15a>
 8004c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c14:	4604      	mov	r4, r0
 8004c16:	2301      	movs	r3, #1
 8004c18:	e7f0      	b.n	8004bfc <_vfiprintf_r+0x1bc>
 8004c1a:	ab03      	add	r3, sp, #12
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <_vfiprintf_r+0x22c>)
 8004c22:	a904      	add	r1, sp, #16
 8004c24:	4630      	mov	r0, r6
 8004c26:	f3af 8000 	nop.w
 8004c2a:	4607      	mov	r7, r0
 8004c2c:	1c78      	adds	r0, r7, #1
 8004c2e:	d1d6      	bne.n	8004bde <_vfiprintf_r+0x19e>
 8004c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c32:	07d9      	lsls	r1, r3, #31
 8004c34:	d405      	bmi.n	8004c42 <_vfiprintf_r+0x202>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	059a      	lsls	r2, r3, #22
 8004c3a:	d402      	bmi.n	8004c42 <_vfiprintf_r+0x202>
 8004c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c3e:	f7ff fddb 	bl	80047f8 <__retarget_lock_release_recursive>
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	065b      	lsls	r3, r3, #25
 8004c46:	f53f af1d 	bmi.w	8004a84 <_vfiprintf_r+0x44>
 8004c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4c:	e71c      	b.n	8004a88 <_vfiprintf_r+0x48>
 8004c4e:	ab03      	add	r3, sp, #12
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	462a      	mov	r2, r5
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <_vfiprintf_r+0x22c>)
 8004c56:	a904      	add	r1, sp, #16
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f000 f879 	bl	8004d50 <_printf_i>
 8004c5e:	e7e4      	b.n	8004c2a <_vfiprintf_r+0x1ea>
 8004c60:	08006128 	.word	0x08006128
 8004c64:	08006132 	.word	0x08006132
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	08004a1b 	.word	0x08004a1b
 8004c70:	0800612e 	.word	0x0800612e

08004c74 <_printf_common>:
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	4616      	mov	r6, r2
 8004c7a:	4699      	mov	r9, r3
 8004c7c:	688a      	ldr	r2, [r1, #8]
 8004c7e:	690b      	ldr	r3, [r1, #16]
 8004c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	bfb8      	it	lt
 8004c88:	4613      	movlt	r3, r2
 8004c8a:	6033      	str	r3, [r6, #0]
 8004c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c90:	4607      	mov	r7, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	b10a      	cbz	r2, 8004c9a <_printf_common+0x26>
 8004c96:	3301      	adds	r3, #1
 8004c98:	6033      	str	r3, [r6, #0]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	0699      	lsls	r1, r3, #26
 8004c9e:	bf42      	ittt	mi
 8004ca0:	6833      	ldrmi	r3, [r6, #0]
 8004ca2:	3302      	addmi	r3, #2
 8004ca4:	6033      	strmi	r3, [r6, #0]
 8004ca6:	6825      	ldr	r5, [r4, #0]
 8004ca8:	f015 0506 	ands.w	r5, r5, #6
 8004cac:	d106      	bne.n	8004cbc <_printf_common+0x48>
 8004cae:	f104 0a19 	add.w	sl, r4, #25
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	6832      	ldr	r2, [r6, #0]
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	42ab      	cmp	r3, r5
 8004cba:	dc26      	bgt.n	8004d0a <_printf_common+0x96>
 8004cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cc0:	1e13      	subs	r3, r2, #0
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	bf18      	it	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	0692      	lsls	r2, r2, #26
 8004cca:	d42b      	bmi.n	8004d24 <_printf_common+0xb0>
 8004ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d01e      	beq.n	8004d18 <_printf_common+0xa4>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	6922      	ldr	r2, [r4, #16]
 8004cde:	f003 0306 	and.w	r3, r3, #6
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	bf02      	ittt	eq
 8004ce6:	68e5      	ldreq	r5, [r4, #12]
 8004ce8:	6833      	ldreq	r3, [r6, #0]
 8004cea:	1aed      	subeq	r5, r5, r3
 8004cec:	68a3      	ldr	r3, [r4, #8]
 8004cee:	bf0c      	ite	eq
 8004cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf4:	2500      	movne	r5, #0
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	bfc4      	itt	gt
 8004cfa:	1a9b      	subgt	r3, r3, r2
 8004cfc:	18ed      	addgt	r5, r5, r3
 8004cfe:	2600      	movs	r6, #0
 8004d00:	341a      	adds	r4, #26
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	d11a      	bne.n	8004d3c <_printf_common+0xc8>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e008      	b.n	8004d1c <_printf_common+0xa8>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4638      	mov	r0, r7
 8004d12:	47c0      	blx	r8
 8004d14:	3001      	adds	r0, #1
 8004d16:	d103      	bne.n	8004d20 <_printf_common+0xac>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	3501      	adds	r5, #1
 8004d22:	e7c6      	b.n	8004cb2 <_printf_common+0x3e>
 8004d24:	18e1      	adds	r1, r4, r3
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	2030      	movs	r0, #48	; 0x30
 8004d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d2e:	4422      	add	r2, r4
 8004d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d38:	3302      	adds	r3, #2
 8004d3a:	e7c7      	b.n	8004ccc <_printf_common+0x58>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4649      	mov	r1, r9
 8004d42:	4638      	mov	r0, r7
 8004d44:	47c0      	blx	r8
 8004d46:	3001      	adds	r0, #1
 8004d48:	d0e6      	beq.n	8004d18 <_printf_common+0xa4>
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7d9      	b.n	8004d02 <_printf_common+0x8e>
	...

08004d50 <_printf_i>:
 8004d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	7e0f      	ldrb	r7, [r1, #24]
 8004d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d58:	2f78      	cmp	r7, #120	; 0x78
 8004d5a:	4691      	mov	r9, r2
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	469a      	mov	sl, r3
 8004d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d66:	d807      	bhi.n	8004d78 <_printf_i+0x28>
 8004d68:	2f62      	cmp	r7, #98	; 0x62
 8004d6a:	d80a      	bhi.n	8004d82 <_printf_i+0x32>
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	f000 80d4 	beq.w	8004f1a <_printf_i+0x1ca>
 8004d72:	2f58      	cmp	r7, #88	; 0x58
 8004d74:	f000 80c0 	beq.w	8004ef8 <_printf_i+0x1a8>
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d80:	e03a      	b.n	8004df8 <_printf_i+0xa8>
 8004d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d86:	2b15      	cmp	r3, #21
 8004d88:	d8f6      	bhi.n	8004d78 <_printf_i+0x28>
 8004d8a:	a101      	add	r1, pc, #4	; (adr r1, 8004d90 <_printf_i+0x40>)
 8004d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004d79 	.word	0x08004d79
 8004d9c:	08004d79 	.word	0x08004d79
 8004da0:	08004d79 	.word	0x08004d79
 8004da4:	08004d79 	.word	0x08004d79
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004d79 	.word	0x08004d79
 8004db0:	08004d79 	.word	0x08004d79
 8004db4:	08004d79 	.word	0x08004d79
 8004db8:	08004d79 	.word	0x08004d79
 8004dbc:	08004f01 	.word	0x08004f01
 8004dc0:	08004e29 	.word	0x08004e29
 8004dc4:	08004ebb 	.word	0x08004ebb
 8004dc8:	08004d79 	.word	0x08004d79
 8004dcc:	08004d79 	.word	0x08004d79
 8004dd0:	08004f23 	.word	0x08004f23
 8004dd4:	08004d79 	.word	0x08004d79
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004d79 	.word	0x08004d79
 8004de0:	08004d79 	.word	0x08004d79
 8004de4:	08004ec3 	.word	0x08004ec3
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e09f      	b.n	8004f3c <_printf_i+0x1ec>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	682b      	ldr	r3, [r5, #0]
 8004e00:	0607      	lsls	r7, r0, #24
 8004e02:	f103 0104 	add.w	r1, r3, #4
 8004e06:	6029      	str	r1, [r5, #0]
 8004e08:	d501      	bpl.n	8004e0e <_printf_i+0xbe>
 8004e0a:	681e      	ldr	r6, [r3, #0]
 8004e0c:	e003      	b.n	8004e16 <_printf_i+0xc6>
 8004e0e:	0646      	lsls	r6, r0, #25
 8004e10:	d5fb      	bpl.n	8004e0a <_printf_i+0xba>
 8004e12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e16:	2e00      	cmp	r6, #0
 8004e18:	da03      	bge.n	8004e22 <_printf_i+0xd2>
 8004e1a:	232d      	movs	r3, #45	; 0x2d
 8004e1c:	4276      	negs	r6, r6
 8004e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e22:	485a      	ldr	r0, [pc, #360]	; (8004f8c <_printf_i+0x23c>)
 8004e24:	230a      	movs	r3, #10
 8004e26:	e012      	b.n	8004e4e <_printf_i+0xfe>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	6820      	ldr	r0, [r4, #0]
 8004e2c:	1d19      	adds	r1, r3, #4
 8004e2e:	6029      	str	r1, [r5, #0]
 8004e30:	0605      	lsls	r5, r0, #24
 8004e32:	d501      	bpl.n	8004e38 <_printf_i+0xe8>
 8004e34:	681e      	ldr	r6, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <_printf_i+0xee>
 8004e38:	0641      	lsls	r1, r0, #25
 8004e3a:	d5fb      	bpl.n	8004e34 <_printf_i+0xe4>
 8004e3c:	881e      	ldrh	r6, [r3, #0]
 8004e3e:	4853      	ldr	r0, [pc, #332]	; (8004f8c <_printf_i+0x23c>)
 8004e40:	2f6f      	cmp	r7, #111	; 0x6f
 8004e42:	bf0c      	ite	eq
 8004e44:	2308      	moveq	r3, #8
 8004e46:	230a      	movne	r3, #10
 8004e48:	2100      	movs	r1, #0
 8004e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e4e:	6865      	ldr	r5, [r4, #4]
 8004e50:	60a5      	str	r5, [r4, #8]
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	bfa2      	ittt	ge
 8004e56:	6821      	ldrge	r1, [r4, #0]
 8004e58:	f021 0104 	bicge.w	r1, r1, #4
 8004e5c:	6021      	strge	r1, [r4, #0]
 8004e5e:	b90e      	cbnz	r6, 8004e64 <_printf_i+0x114>
 8004e60:	2d00      	cmp	r5, #0
 8004e62:	d04b      	beq.n	8004efc <_printf_i+0x1ac>
 8004e64:	4615      	mov	r5, r2
 8004e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e6e:	5dc7      	ldrb	r7, [r0, r7]
 8004e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e74:	4637      	mov	r7, r6
 8004e76:	42bb      	cmp	r3, r7
 8004e78:	460e      	mov	r6, r1
 8004e7a:	d9f4      	bls.n	8004e66 <_printf_i+0x116>
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d10b      	bne.n	8004e98 <_printf_i+0x148>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	07de      	lsls	r6, r3, #31
 8004e84:	d508      	bpl.n	8004e98 <_printf_i+0x148>
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	4299      	cmp	r1, r3
 8004e8c:	bfde      	ittt	le
 8004e8e:	2330      	movle	r3, #48	; 0x30
 8004e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e98:	1b52      	subs	r2, r2, r5
 8004e9a:	6122      	str	r2, [r4, #16]
 8004e9c:	f8cd a000 	str.w	sl, [sp]
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	aa03      	add	r2, sp, #12
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f7ff fee4 	bl	8004c74 <_printf_common>
 8004eac:	3001      	adds	r0, #1
 8004eae:	d14a      	bne.n	8004f46 <_printf_i+0x1f6>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	b004      	add	sp, #16
 8004eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f043 0320 	orr.w	r3, r3, #32
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	4833      	ldr	r0, [pc, #204]	; (8004f90 <_printf_i+0x240>)
 8004ec4:	2778      	movs	r7, #120	; 0x78
 8004ec6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	6829      	ldr	r1, [r5, #0]
 8004ece:	061f      	lsls	r7, r3, #24
 8004ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ed4:	d402      	bmi.n	8004edc <_printf_i+0x18c>
 8004ed6:	065f      	lsls	r7, r3, #25
 8004ed8:	bf48      	it	mi
 8004eda:	b2b6      	uxthmi	r6, r6
 8004edc:	07df      	lsls	r7, r3, #31
 8004ede:	bf48      	it	mi
 8004ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee4:	6029      	str	r1, [r5, #0]
 8004ee6:	bf48      	it	mi
 8004ee8:	6023      	strmi	r3, [r4, #0]
 8004eea:	b91e      	cbnz	r6, 8004ef4 <_printf_i+0x1a4>
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	f023 0320 	bic.w	r3, r3, #32
 8004ef2:	6023      	str	r3, [r4, #0]
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	e7a7      	b.n	8004e48 <_printf_i+0xf8>
 8004ef8:	4824      	ldr	r0, [pc, #144]	; (8004f8c <_printf_i+0x23c>)
 8004efa:	e7e4      	b.n	8004ec6 <_printf_i+0x176>
 8004efc:	4615      	mov	r5, r2
 8004efe:	e7bd      	b.n	8004e7c <_printf_i+0x12c>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	6826      	ldr	r6, [r4, #0]
 8004f04:	6961      	ldr	r1, [r4, #20]
 8004f06:	1d18      	adds	r0, r3, #4
 8004f08:	6028      	str	r0, [r5, #0]
 8004f0a:	0635      	lsls	r5, r6, #24
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	d501      	bpl.n	8004f14 <_printf_i+0x1c4>
 8004f10:	6019      	str	r1, [r3, #0]
 8004f12:	e002      	b.n	8004f1a <_printf_i+0x1ca>
 8004f14:	0670      	lsls	r0, r6, #25
 8004f16:	d5fb      	bpl.n	8004f10 <_printf_i+0x1c0>
 8004f18:	8019      	strh	r1, [r3, #0]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6123      	str	r3, [r4, #16]
 8004f1e:	4615      	mov	r5, r2
 8004f20:	e7bc      	b.n	8004e9c <_printf_i+0x14c>
 8004f22:	682b      	ldr	r3, [r5, #0]
 8004f24:	1d1a      	adds	r2, r3, #4
 8004f26:	602a      	str	r2, [r5, #0]
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	6862      	ldr	r2, [r4, #4]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f7fb f94e 	bl	80001d0 <memchr>
 8004f34:	b108      	cbz	r0, 8004f3a <_printf_i+0x1ea>
 8004f36:	1b40      	subs	r0, r0, r5
 8004f38:	6060      	str	r0, [r4, #4]
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f44:	e7aa      	b.n	8004e9c <_printf_i+0x14c>
 8004f46:	6923      	ldr	r3, [r4, #16]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	47d0      	blx	sl
 8004f50:	3001      	adds	r0, #1
 8004f52:	d0ad      	beq.n	8004eb0 <_printf_i+0x160>
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	079b      	lsls	r3, r3, #30
 8004f58:	d413      	bmi.n	8004f82 <_printf_i+0x232>
 8004f5a:	68e0      	ldr	r0, [r4, #12]
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	4298      	cmp	r0, r3
 8004f60:	bfb8      	it	lt
 8004f62:	4618      	movlt	r0, r3
 8004f64:	e7a6      	b.n	8004eb4 <_printf_i+0x164>
 8004f66:	2301      	movs	r3, #1
 8004f68:	4632      	mov	r2, r6
 8004f6a:	4649      	mov	r1, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	47d0      	blx	sl
 8004f70:	3001      	adds	r0, #1
 8004f72:	d09d      	beq.n	8004eb0 <_printf_i+0x160>
 8004f74:	3501      	adds	r5, #1
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	9903      	ldr	r1, [sp, #12]
 8004f7a:	1a5b      	subs	r3, r3, r1
 8004f7c:	42ab      	cmp	r3, r5
 8004f7e:	dcf2      	bgt.n	8004f66 <_printf_i+0x216>
 8004f80:	e7eb      	b.n	8004f5a <_printf_i+0x20a>
 8004f82:	2500      	movs	r5, #0
 8004f84:	f104 0619 	add.w	r6, r4, #25
 8004f88:	e7f5      	b.n	8004f76 <_printf_i+0x226>
 8004f8a:	bf00      	nop
 8004f8c:	08006139 	.word	0x08006139
 8004f90:	0800614a 	.word	0x0800614a

08004f94 <__svfiscanf_r>:
 8004f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f98:	461d      	mov	r5, r3
 8004f9a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004f9c:	07df      	lsls	r7, r3, #31
 8004f9e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	4692      	mov	sl, r2
 8004fa8:	d405      	bmi.n	8004fb6 <__svfiscanf_r+0x22>
 8004faa:	898b      	ldrh	r3, [r1, #12]
 8004fac:	0598      	lsls	r0, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <__svfiscanf_r+0x22>
 8004fb0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8004fb2:	f7ff fc20 	bl	80047f6 <__retarget_lock_acquire_recursive>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8004fbc:	4baa      	ldr	r3, [pc, #680]	; (8005268 <__svfiscanf_r+0x2d4>)
 8004fbe:	93a0      	str	r3, [sp, #640]	; 0x280
 8004fc0:	f10d 0804 	add.w	r8, sp, #4
 8004fc4:	4ba9      	ldr	r3, [pc, #676]	; (800526c <__svfiscanf_r+0x2d8>)
 8004fc6:	4faa      	ldr	r7, [pc, #680]	; (8005270 <__svfiscanf_r+0x2dc>)
 8004fc8:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8005274 <__svfiscanf_r+0x2e0>
 8004fcc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004fd0:	93a1      	str	r3, [sp, #644]	; 0x284
 8004fd2:	9500      	str	r5, [sp, #0]
 8004fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8170 	beq.w	80052be <__svfiscanf_r+0x32a>
 8004fde:	5cf9      	ldrb	r1, [r7, r3]
 8004fe0:	f011 0108 	ands.w	r1, r1, #8
 8004fe4:	f10a 0501 	add.w	r5, sl, #1
 8004fe8:	d019      	beq.n	800501e <__svfiscanf_r+0x8a>
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dd0f      	ble.n	8005010 <__svfiscanf_r+0x7c>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	5cba      	ldrb	r2, [r7, r2]
 8004ff6:	0711      	lsls	r1, r2, #28
 8004ff8:	d401      	bmi.n	8004ffe <__svfiscanf_r+0x6a>
 8004ffa:	46aa      	mov	sl, r5
 8004ffc:	e7ea      	b.n	8004fd4 <__svfiscanf_r+0x40>
 8004ffe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005000:	3201      	adds	r2, #1
 8005002:	9245      	str	r2, [sp, #276]	; 0x114
 8005004:	6862      	ldr	r2, [r4, #4]
 8005006:	3301      	adds	r3, #1
 8005008:	3a01      	subs	r2, #1
 800500a:	6062      	str	r2, [r4, #4]
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	e7ec      	b.n	8004fea <__svfiscanf_r+0x56>
 8005010:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005012:	4621      	mov	r1, r4
 8005014:	4630      	mov	r0, r6
 8005016:	4798      	blx	r3
 8005018:	2800      	cmp	r0, #0
 800501a:	d0e9      	beq.n	8004ff0 <__svfiscanf_r+0x5c>
 800501c:	e7ed      	b.n	8004ffa <__svfiscanf_r+0x66>
 800501e:	2b25      	cmp	r3, #37	; 0x25
 8005020:	d012      	beq.n	8005048 <__svfiscanf_r+0xb4>
 8005022:	469a      	mov	sl, r3
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	f340 8093 	ble.w	8005152 <__svfiscanf_r+0x1be>
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	7813      	ldrb	r3, [r2, #0]
 8005030:	4553      	cmp	r3, sl
 8005032:	f040 8144 	bne.w	80052be <__svfiscanf_r+0x32a>
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	3b01      	subs	r3, #1
 800503a:	6063      	str	r3, [r4, #4]
 800503c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800503e:	3201      	adds	r2, #1
 8005040:	3301      	adds	r3, #1
 8005042:	6022      	str	r2, [r4, #0]
 8005044:	9345      	str	r3, [sp, #276]	; 0x114
 8005046:	e7d8      	b.n	8004ffa <__svfiscanf_r+0x66>
 8005048:	9141      	str	r1, [sp, #260]	; 0x104
 800504a:	9143      	str	r1, [sp, #268]	; 0x10c
 800504c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005050:	2b2a      	cmp	r3, #42	; 0x2a
 8005052:	bf02      	ittt	eq
 8005054:	2310      	moveq	r3, #16
 8005056:	9341      	streq	r3, [sp, #260]	; 0x104
 8005058:	f10a 0502 	addeq.w	r5, sl, #2
 800505c:	220a      	movs	r2, #10
 800505e:	46aa      	mov	sl, r5
 8005060:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005064:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005068:	2b09      	cmp	r3, #9
 800506a:	d91d      	bls.n	80050a8 <__svfiscanf_r+0x114>
 800506c:	4881      	ldr	r0, [pc, #516]	; (8005274 <__svfiscanf_r+0x2e0>)
 800506e:	2203      	movs	r2, #3
 8005070:	f7fb f8ae 	bl	80001d0 <memchr>
 8005074:	b138      	cbz	r0, 8005086 <__svfiscanf_r+0xf2>
 8005076:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005078:	eba0 0009 	sub.w	r0, r0, r9
 800507c:	2301      	movs	r3, #1
 800507e:	4083      	lsls	r3, r0
 8005080:	4313      	orrs	r3, r2
 8005082:	9341      	str	r3, [sp, #260]	; 0x104
 8005084:	4655      	mov	r5, sl
 8005086:	f815 3b01 	ldrb.w	r3, [r5], #1
 800508a:	2b78      	cmp	r3, #120	; 0x78
 800508c:	d807      	bhi.n	800509e <__svfiscanf_r+0x10a>
 800508e:	2b57      	cmp	r3, #87	; 0x57
 8005090:	d811      	bhi.n	80050b6 <__svfiscanf_r+0x122>
 8005092:	2b25      	cmp	r3, #37	; 0x25
 8005094:	d0c5      	beq.n	8005022 <__svfiscanf_r+0x8e>
 8005096:	d857      	bhi.n	8005148 <__svfiscanf_r+0x1b4>
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80c6 	beq.w	800522a <__svfiscanf_r+0x296>
 800509e:	2303      	movs	r3, #3
 80050a0:	9347      	str	r3, [sp, #284]	; 0x11c
 80050a2:	230a      	movs	r3, #10
 80050a4:	9342      	str	r3, [sp, #264]	; 0x108
 80050a6:	e07f      	b.n	80051a8 <__svfiscanf_r+0x214>
 80050a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80050aa:	fb02 1103 	mla	r1, r2, r3, r1
 80050ae:	3930      	subs	r1, #48	; 0x30
 80050b0:	9143      	str	r1, [sp, #268]	; 0x10c
 80050b2:	4655      	mov	r5, sl
 80050b4:	e7d3      	b.n	800505e <__svfiscanf_r+0xca>
 80050b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80050ba:	2a20      	cmp	r2, #32
 80050bc:	d8ef      	bhi.n	800509e <__svfiscanf_r+0x10a>
 80050be:	a101      	add	r1, pc, #4	; (adr r1, 80050c4 <__svfiscanf_r+0x130>)
 80050c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050c4:	0800518b 	.word	0x0800518b
 80050c8:	0800509f 	.word	0x0800509f
 80050cc:	0800509f 	.word	0x0800509f
 80050d0:	080051e9 	.word	0x080051e9
 80050d4:	0800509f 	.word	0x0800509f
 80050d8:	0800509f 	.word	0x0800509f
 80050dc:	0800509f 	.word	0x0800509f
 80050e0:	0800509f 	.word	0x0800509f
 80050e4:	0800509f 	.word	0x0800509f
 80050e8:	0800509f 	.word	0x0800509f
 80050ec:	0800509f 	.word	0x0800509f
 80050f0:	080051ff 	.word	0x080051ff
 80050f4:	080051e5 	.word	0x080051e5
 80050f8:	0800514f 	.word	0x0800514f
 80050fc:	0800514f 	.word	0x0800514f
 8005100:	0800514f 	.word	0x0800514f
 8005104:	0800509f 	.word	0x0800509f
 8005108:	080051a1 	.word	0x080051a1
 800510c:	0800509f 	.word	0x0800509f
 8005110:	0800509f 	.word	0x0800509f
 8005114:	0800509f 	.word	0x0800509f
 8005118:	0800509f 	.word	0x0800509f
 800511c:	0800520f 	.word	0x0800520f
 8005120:	080051dd 	.word	0x080051dd
 8005124:	08005183 	.word	0x08005183
 8005128:	0800509f 	.word	0x0800509f
 800512c:	0800509f 	.word	0x0800509f
 8005130:	0800520b 	.word	0x0800520b
 8005134:	0800509f 	.word	0x0800509f
 8005138:	080051e5 	.word	0x080051e5
 800513c:	0800509f 	.word	0x0800509f
 8005140:	0800509f 	.word	0x0800509f
 8005144:	0800518b 	.word	0x0800518b
 8005148:	3b45      	subs	r3, #69	; 0x45
 800514a:	2b02      	cmp	r3, #2
 800514c:	d8a7      	bhi.n	800509e <__svfiscanf_r+0x10a>
 800514e:	2305      	movs	r3, #5
 8005150:	e029      	b.n	80051a6 <__svfiscanf_r+0x212>
 8005152:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005154:	4621      	mov	r1, r4
 8005156:	4630      	mov	r0, r6
 8005158:	4798      	blx	r3
 800515a:	2800      	cmp	r0, #0
 800515c:	f43f af66 	beq.w	800502c <__svfiscanf_r+0x98>
 8005160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005162:	07da      	lsls	r2, r3, #31
 8005164:	f140 80a3 	bpl.w	80052ae <__svfiscanf_r+0x31a>
 8005168:	9844      	ldr	r0, [sp, #272]	; 0x110
 800516a:	2800      	cmp	r0, #0
 800516c:	d066      	beq.n	800523c <__svfiscanf_r+0x2a8>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005174:	bf18      	it	ne
 8005176:	f04f 30ff 	movne.w	r0, #4294967295
 800517a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005182:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005184:	f042 0220 	orr.w	r2, r2, #32
 8005188:	9241      	str	r2, [sp, #260]	; 0x104
 800518a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800518c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005190:	9241      	str	r2, [sp, #260]	; 0x104
 8005192:	2210      	movs	r2, #16
 8005194:	2b6f      	cmp	r3, #111	; 0x6f
 8005196:	9242      	str	r2, [sp, #264]	; 0x108
 8005198:	bf34      	ite	cc
 800519a:	2303      	movcc	r3, #3
 800519c:	2304      	movcs	r3, #4
 800519e:	e002      	b.n	80051a6 <__svfiscanf_r+0x212>
 80051a0:	2300      	movs	r3, #0
 80051a2:	9342      	str	r3, [sp, #264]	; 0x108
 80051a4:	2303      	movs	r3, #3
 80051a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	dd49      	ble.n	8005242 <__svfiscanf_r+0x2ae>
 80051ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051b0:	065b      	lsls	r3, r3, #25
 80051b2:	d404      	bmi.n	80051be <__svfiscanf_r+0x22a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	5cba      	ldrb	r2, [r7, r2]
 80051ba:	0710      	lsls	r0, r2, #28
 80051bc:	d448      	bmi.n	8005250 <__svfiscanf_r+0x2bc>
 80051be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	dc60      	bgt.n	8005286 <__svfiscanf_r+0x2f2>
 80051c4:	466b      	mov	r3, sp
 80051c6:	4622      	mov	r2, r4
 80051c8:	a941      	add	r1, sp, #260	; 0x104
 80051ca:	4630      	mov	r0, r6
 80051cc:	f000 f898 	bl	8005300 <_scanf_chars>
 80051d0:	2801      	cmp	r0, #1
 80051d2:	d074      	beq.n	80052be <__svfiscanf_r+0x32a>
 80051d4:	2802      	cmp	r0, #2
 80051d6:	f47f af10 	bne.w	8004ffa <__svfiscanf_r+0x66>
 80051da:	e7c1      	b.n	8005160 <__svfiscanf_r+0x1cc>
 80051dc:	2308      	movs	r3, #8
 80051de:	9342      	str	r3, [sp, #264]	; 0x108
 80051e0:	2304      	movs	r3, #4
 80051e2:	e7e0      	b.n	80051a6 <__svfiscanf_r+0x212>
 80051e4:	220a      	movs	r2, #10
 80051e6:	e7d5      	b.n	8005194 <__svfiscanf_r+0x200>
 80051e8:	4629      	mov	r1, r5
 80051ea:	4640      	mov	r0, r8
 80051ec:	f000 fb0a 	bl	8005804 <__sccl>
 80051f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80051f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051f6:	9341      	str	r3, [sp, #260]	; 0x104
 80051f8:	4605      	mov	r5, r0
 80051fa:	2301      	movs	r3, #1
 80051fc:	e7d3      	b.n	80051a6 <__svfiscanf_r+0x212>
 80051fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005204:	9341      	str	r3, [sp, #260]	; 0x104
 8005206:	2300      	movs	r3, #0
 8005208:	e7cd      	b.n	80051a6 <__svfiscanf_r+0x212>
 800520a:	2302      	movs	r3, #2
 800520c:	e7cb      	b.n	80051a6 <__svfiscanf_r+0x212>
 800520e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005210:	06c3      	lsls	r3, r0, #27
 8005212:	f53f aef2 	bmi.w	8004ffa <__svfiscanf_r+0x66>
 8005216:	9b00      	ldr	r3, [sp, #0]
 8005218:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800521a:	1d19      	adds	r1, r3, #4
 800521c:	9100      	str	r1, [sp, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	07c0      	lsls	r0, r0, #31
 8005222:	bf4c      	ite	mi
 8005224:	801a      	strhmi	r2, [r3, #0]
 8005226:	601a      	strpl	r2, [r3, #0]
 8005228:	e6e7      	b.n	8004ffa <__svfiscanf_r+0x66>
 800522a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800522c:	07d8      	lsls	r0, r3, #31
 800522e:	d405      	bmi.n	800523c <__svfiscanf_r+0x2a8>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	0599      	lsls	r1, r3, #22
 8005234:	d402      	bmi.n	800523c <__svfiscanf_r+0x2a8>
 8005236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005238:	f7ff fade 	bl	80047f8 <__retarget_lock_release_recursive>
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e79b      	b.n	800517a <__svfiscanf_r+0x1e6>
 8005242:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005244:	4621      	mov	r1, r4
 8005246:	4630      	mov	r0, r6
 8005248:	4798      	blx	r3
 800524a:	2800      	cmp	r0, #0
 800524c:	d0af      	beq.n	80051ae <__svfiscanf_r+0x21a>
 800524e:	e787      	b.n	8005160 <__svfiscanf_r+0x1cc>
 8005250:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005252:	3201      	adds	r2, #1
 8005254:	9245      	str	r2, [sp, #276]	; 0x114
 8005256:	6862      	ldr	r2, [r4, #4]
 8005258:	3a01      	subs	r2, #1
 800525a:	2a00      	cmp	r2, #0
 800525c:	6062      	str	r2, [r4, #4]
 800525e:	dd0b      	ble.n	8005278 <__svfiscanf_r+0x2e4>
 8005260:	3301      	adds	r3, #1
 8005262:	6023      	str	r3, [r4, #0]
 8005264:	e7a6      	b.n	80051b4 <__svfiscanf_r+0x220>
 8005266:	bf00      	nop
 8005268:	080058eb 	.word	0x080058eb
 800526c:	08005715 	.word	0x08005715
 8005270:	08006177 	.word	0x08006177
 8005274:	0800612e 	.word	0x0800612e
 8005278:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800527a:	4621      	mov	r1, r4
 800527c:	4630      	mov	r0, r6
 800527e:	4798      	blx	r3
 8005280:	2800      	cmp	r0, #0
 8005282:	d097      	beq.n	80051b4 <__svfiscanf_r+0x220>
 8005284:	e76c      	b.n	8005160 <__svfiscanf_r+0x1cc>
 8005286:	2b04      	cmp	r3, #4
 8005288:	dc06      	bgt.n	8005298 <__svfiscanf_r+0x304>
 800528a:	466b      	mov	r3, sp
 800528c:	4622      	mov	r2, r4
 800528e:	a941      	add	r1, sp, #260	; 0x104
 8005290:	4630      	mov	r0, r6
 8005292:	f000 f88f 	bl	80053b4 <_scanf_i>
 8005296:	e79b      	b.n	80051d0 <__svfiscanf_r+0x23c>
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <__svfiscanf_r+0x340>)
 800529a:	2b00      	cmp	r3, #0
 800529c:	f43f aead 	beq.w	8004ffa <__svfiscanf_r+0x66>
 80052a0:	466b      	mov	r3, sp
 80052a2:	4622      	mov	r2, r4
 80052a4:	a941      	add	r1, sp, #260	; 0x104
 80052a6:	4630      	mov	r0, r6
 80052a8:	f3af 8000 	nop.w
 80052ac:	e790      	b.n	80051d0 <__svfiscanf_r+0x23c>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	0599      	lsls	r1, r3, #22
 80052b2:	f53f af59 	bmi.w	8005168 <__svfiscanf_r+0x1d4>
 80052b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b8:	f7ff fa9e 	bl	80047f8 <__retarget_lock_release_recursive>
 80052bc:	e754      	b.n	8005168 <__svfiscanf_r+0x1d4>
 80052be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c0:	07da      	lsls	r2, r3, #31
 80052c2:	d405      	bmi.n	80052d0 <__svfiscanf_r+0x33c>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	059b      	lsls	r3, r3, #22
 80052c8:	d402      	bmi.n	80052d0 <__svfiscanf_r+0x33c>
 80052ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052cc:	f7ff fa94 	bl	80047f8 <__retarget_lock_release_recursive>
 80052d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80052d2:	e752      	b.n	800517a <__svfiscanf_r+0x1e6>
 80052d4:	00000000 	.word	0x00000000

080052d8 <_vfiscanf_r>:
 80052d8:	b530      	push	{r4, r5, lr}
 80052da:	4604      	mov	r4, r0
 80052dc:	b085      	sub	sp, #20
 80052de:	b148      	cbz	r0, 80052f4 <_vfiscanf_r+0x1c>
 80052e0:	6a05      	ldr	r5, [r0, #32]
 80052e2:	b93d      	cbnz	r5, 80052f4 <_vfiscanf_r+0x1c>
 80052e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052e8:	9101      	str	r1, [sp, #4]
 80052ea:	f7ff f96d 	bl	80045c8 <__sinit>
 80052ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052f2:	9901      	ldr	r1, [sp, #4]
 80052f4:	4620      	mov	r0, r4
 80052f6:	b005      	add	sp, #20
 80052f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052fc:	f7ff be4a 	b.w	8004f94 <__svfiscanf_r>

08005300 <_scanf_chars>:
 8005300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005304:	4615      	mov	r5, r2
 8005306:	688a      	ldr	r2, [r1, #8]
 8005308:	4680      	mov	r8, r0
 800530a:	460c      	mov	r4, r1
 800530c:	b932      	cbnz	r2, 800531c <_scanf_chars+0x1c>
 800530e:	698a      	ldr	r2, [r1, #24]
 8005310:	2a00      	cmp	r2, #0
 8005312:	bf0c      	ite	eq
 8005314:	2201      	moveq	r2, #1
 8005316:	f04f 32ff 	movne.w	r2, #4294967295
 800531a:	608a      	str	r2, [r1, #8]
 800531c:	6822      	ldr	r2, [r4, #0]
 800531e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80053b0 <_scanf_chars+0xb0>
 8005322:	06d1      	lsls	r1, r2, #27
 8005324:	bf5f      	itttt	pl
 8005326:	681a      	ldrpl	r2, [r3, #0]
 8005328:	1d11      	addpl	r1, r2, #4
 800532a:	6019      	strpl	r1, [r3, #0]
 800532c:	6816      	ldrpl	r6, [r2, #0]
 800532e:	2700      	movs	r7, #0
 8005330:	69a0      	ldr	r0, [r4, #24]
 8005332:	b188      	cbz	r0, 8005358 <_scanf_chars+0x58>
 8005334:	2801      	cmp	r0, #1
 8005336:	d107      	bne.n	8005348 <_scanf_chars+0x48>
 8005338:	682a      	ldr	r2, [r5, #0]
 800533a:	7811      	ldrb	r1, [r2, #0]
 800533c:	6962      	ldr	r2, [r4, #20]
 800533e:	5c52      	ldrb	r2, [r2, r1]
 8005340:	b952      	cbnz	r2, 8005358 <_scanf_chars+0x58>
 8005342:	2f00      	cmp	r7, #0
 8005344:	d031      	beq.n	80053aa <_scanf_chars+0xaa>
 8005346:	e022      	b.n	800538e <_scanf_chars+0x8e>
 8005348:	2802      	cmp	r0, #2
 800534a:	d120      	bne.n	800538e <_scanf_chars+0x8e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005354:	071b      	lsls	r3, r3, #28
 8005356:	d41a      	bmi.n	800538e <_scanf_chars+0x8e>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	06da      	lsls	r2, r3, #27
 800535c:	bf5e      	ittt	pl
 800535e:	682b      	ldrpl	r3, [r5, #0]
 8005360:	781b      	ldrbpl	r3, [r3, #0]
 8005362:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005366:	682a      	ldr	r2, [r5, #0]
 8005368:	686b      	ldr	r3, [r5, #4]
 800536a:	3201      	adds	r2, #1
 800536c:	602a      	str	r2, [r5, #0]
 800536e:	68a2      	ldr	r2, [r4, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	3a01      	subs	r2, #1
 8005374:	606b      	str	r3, [r5, #4]
 8005376:	3701      	adds	r7, #1
 8005378:	60a2      	str	r2, [r4, #8]
 800537a:	b142      	cbz	r2, 800538e <_scanf_chars+0x8e>
 800537c:	2b00      	cmp	r3, #0
 800537e:	dcd7      	bgt.n	8005330 <_scanf_chars+0x30>
 8005380:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005384:	4629      	mov	r1, r5
 8005386:	4640      	mov	r0, r8
 8005388:	4798      	blx	r3
 800538a:	2800      	cmp	r0, #0
 800538c:	d0d0      	beq.n	8005330 <_scanf_chars+0x30>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f013 0310 	ands.w	r3, r3, #16
 8005394:	d105      	bne.n	80053a2 <_scanf_chars+0xa2>
 8005396:	68e2      	ldr	r2, [r4, #12]
 8005398:	3201      	adds	r2, #1
 800539a:	60e2      	str	r2, [r4, #12]
 800539c:	69a2      	ldr	r2, [r4, #24]
 800539e:	b102      	cbz	r2, 80053a2 <_scanf_chars+0xa2>
 80053a0:	7033      	strb	r3, [r6, #0]
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	443b      	add	r3, r7
 80053a6:	6123      	str	r3, [r4, #16]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ae:	bf00      	nop
 80053b0:	08006177 	.word	0x08006177

080053b4 <_scanf_i>:
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	4698      	mov	r8, r3
 80053ba:	4b74      	ldr	r3, [pc, #464]	; (800558c <_scanf_i+0x1d8>)
 80053bc:	460c      	mov	r4, r1
 80053be:	4682      	mov	sl, r0
 80053c0:	4616      	mov	r6, r2
 80053c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053c6:	b087      	sub	sp, #28
 80053c8:	ab03      	add	r3, sp, #12
 80053ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80053ce:	4b70      	ldr	r3, [pc, #448]	; (8005590 <_scanf_i+0x1dc>)
 80053d0:	69a1      	ldr	r1, [r4, #24]
 80053d2:	4a70      	ldr	r2, [pc, #448]	; (8005594 <_scanf_i+0x1e0>)
 80053d4:	2903      	cmp	r1, #3
 80053d6:	bf18      	it	ne
 80053d8:	461a      	movne	r2, r3
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	9201      	str	r2, [sp, #4]
 80053de:	1e5a      	subs	r2, r3, #1
 80053e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80053e4:	bf88      	it	hi
 80053e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80053ea:	4627      	mov	r7, r4
 80053ec:	bf82      	ittt	hi
 80053ee:	eb03 0905 	addhi.w	r9, r3, r5
 80053f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80053f6:	60a3      	strhi	r3, [r4, #8]
 80053f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80053fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005400:	bf98      	it	ls
 8005402:	f04f 0900 	movls.w	r9, #0
 8005406:	6023      	str	r3, [r4, #0]
 8005408:	463d      	mov	r5, r7
 800540a:	f04f 0b00 	mov.w	fp, #0
 800540e:	6831      	ldr	r1, [r6, #0]
 8005410:	ab03      	add	r3, sp, #12
 8005412:	7809      	ldrb	r1, [r1, #0]
 8005414:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005418:	2202      	movs	r2, #2
 800541a:	f7fa fed9 	bl	80001d0 <memchr>
 800541e:	b328      	cbz	r0, 800546c <_scanf_i+0xb8>
 8005420:	f1bb 0f01 	cmp.w	fp, #1
 8005424:	d159      	bne.n	80054da <_scanf_i+0x126>
 8005426:	6862      	ldr	r2, [r4, #4]
 8005428:	b92a      	cbnz	r2, 8005436 <_scanf_i+0x82>
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	2308      	movs	r3, #8
 800542e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005432:	6063      	str	r3, [r4, #4]
 8005434:	6022      	str	r2, [r4, #0]
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800543c:	6022      	str	r2, [r4, #0]
 800543e:	68a2      	ldr	r2, [r4, #8]
 8005440:	1e51      	subs	r1, r2, #1
 8005442:	60a1      	str	r1, [r4, #8]
 8005444:	b192      	cbz	r2, 800546c <_scanf_i+0xb8>
 8005446:	6832      	ldr	r2, [r6, #0]
 8005448:	1c51      	adds	r1, r2, #1
 800544a:	6031      	str	r1, [r6, #0]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	f805 2b01 	strb.w	r2, [r5], #1
 8005452:	6872      	ldr	r2, [r6, #4]
 8005454:	3a01      	subs	r2, #1
 8005456:	2a00      	cmp	r2, #0
 8005458:	6072      	str	r2, [r6, #4]
 800545a:	dc07      	bgt.n	800546c <_scanf_i+0xb8>
 800545c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005460:	4631      	mov	r1, r6
 8005462:	4650      	mov	r0, sl
 8005464:	4790      	blx	r2
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 8085 	bne.w	8005576 <_scanf_i+0x1c2>
 800546c:	f10b 0b01 	add.w	fp, fp, #1
 8005470:	f1bb 0f03 	cmp.w	fp, #3
 8005474:	d1cb      	bne.n	800540e <_scanf_i+0x5a>
 8005476:	6863      	ldr	r3, [r4, #4]
 8005478:	b90b      	cbnz	r3, 800547e <_scanf_i+0xca>
 800547a:	230a      	movs	r3, #10
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	4945      	ldr	r1, [pc, #276]	; (8005598 <_scanf_i+0x1e4>)
 8005482:	6960      	ldr	r0, [r4, #20]
 8005484:	1ac9      	subs	r1, r1, r3
 8005486:	f000 f9bd 	bl	8005804 <__sccl>
 800548a:	f04f 0b00 	mov.w	fp, #0
 800548e:	68a3      	ldr	r3, [r4, #8]
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d03d      	beq.n	8005512 <_scanf_i+0x15e>
 8005496:	6831      	ldr	r1, [r6, #0]
 8005498:	6960      	ldr	r0, [r4, #20]
 800549a:	f891 c000 	ldrb.w	ip, [r1]
 800549e:	f810 000c 	ldrb.w	r0, [r0, ip]
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d035      	beq.n	8005512 <_scanf_i+0x15e>
 80054a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80054aa:	d124      	bne.n	80054f6 <_scanf_i+0x142>
 80054ac:	0510      	lsls	r0, r2, #20
 80054ae:	d522      	bpl.n	80054f6 <_scanf_i+0x142>
 80054b0:	f10b 0b01 	add.w	fp, fp, #1
 80054b4:	f1b9 0f00 	cmp.w	r9, #0
 80054b8:	d003      	beq.n	80054c2 <_scanf_i+0x10e>
 80054ba:	3301      	adds	r3, #1
 80054bc:	f109 39ff 	add.w	r9, r9, #4294967295
 80054c0:	60a3      	str	r3, [r4, #8]
 80054c2:	6873      	ldr	r3, [r6, #4]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	6073      	str	r3, [r6, #4]
 80054ca:	dd1b      	ble.n	8005504 <_scanf_i+0x150>
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	6033      	str	r3, [r6, #0]
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	60a3      	str	r3, [r4, #8]
 80054d8:	e7d9      	b.n	800548e <_scanf_i+0xda>
 80054da:	f1bb 0f02 	cmp.w	fp, #2
 80054de:	d1ae      	bne.n	800543e <_scanf_i+0x8a>
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80054e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80054ea:	d1bf      	bne.n	800546c <_scanf_i+0xb8>
 80054ec:	2310      	movs	r3, #16
 80054ee:	6063      	str	r3, [r4, #4]
 80054f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054f4:	e7a2      	b.n	800543c <_scanf_i+0x88>
 80054f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80054fa:	6022      	str	r2, [r4, #0]
 80054fc:	780b      	ldrb	r3, [r1, #0]
 80054fe:	f805 3b01 	strb.w	r3, [r5], #1
 8005502:	e7de      	b.n	80054c2 <_scanf_i+0x10e>
 8005504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005508:	4631      	mov	r1, r6
 800550a:	4650      	mov	r0, sl
 800550c:	4798      	blx	r3
 800550e:	2800      	cmp	r0, #0
 8005510:	d0df      	beq.n	80054d2 <_scanf_i+0x11e>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	05d9      	lsls	r1, r3, #23
 8005516:	d50d      	bpl.n	8005534 <_scanf_i+0x180>
 8005518:	42bd      	cmp	r5, r7
 800551a:	d909      	bls.n	8005530 <_scanf_i+0x17c>
 800551c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005520:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005524:	4632      	mov	r2, r6
 8005526:	4650      	mov	r0, sl
 8005528:	4798      	blx	r3
 800552a:	f105 39ff 	add.w	r9, r5, #4294967295
 800552e:	464d      	mov	r5, r9
 8005530:	42bd      	cmp	r5, r7
 8005532:	d028      	beq.n	8005586 <_scanf_i+0x1d2>
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	f012 0210 	ands.w	r2, r2, #16
 800553a:	d113      	bne.n	8005564 <_scanf_i+0x1b0>
 800553c:	702a      	strb	r2, [r5, #0]
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	9e01      	ldr	r6, [sp, #4]
 8005542:	4639      	mov	r1, r7
 8005544:	4650      	mov	r0, sl
 8005546:	47b0      	blx	r6
 8005548:	f8d8 3000 	ldr.w	r3, [r8]
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	f8c8 2000 	str.w	r2, [r8]
 8005554:	f011 0f20 	tst.w	r1, #32
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	d00f      	beq.n	800557c <_scanf_i+0x1c8>
 800555c:	6018      	str	r0, [r3, #0]
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60e3      	str	r3, [r4, #12]
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	1bed      	subs	r5, r5, r7
 8005568:	445d      	add	r5, fp
 800556a:	442b      	add	r3, r5
 800556c:	6123      	str	r3, [r4, #16]
 800556e:	2000      	movs	r0, #0
 8005570:	b007      	add	sp, #28
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	f04f 0b00 	mov.w	fp, #0
 800557a:	e7ca      	b.n	8005512 <_scanf_i+0x15e>
 800557c:	07ca      	lsls	r2, r1, #31
 800557e:	bf4c      	ite	mi
 8005580:	8018      	strhmi	r0, [r3, #0]
 8005582:	6018      	strpl	r0, [r3, #0]
 8005584:	e7eb      	b.n	800555e <_scanf_i+0x1aa>
 8005586:	2001      	movs	r0, #1
 8005588:	e7f2      	b.n	8005570 <_scanf_i+0x1bc>
 800558a:	bf00      	nop
 800558c:	080060d4 	.word	0x080060d4
 8005590:	08005da5 	.word	0x08005da5
 8005594:	08005cbd 	.word	0x08005cbd
 8005598:	0800616b 	.word	0x0800616b

0800559c <__sflush_r>:
 800559c:	898a      	ldrh	r2, [r1, #12]
 800559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a2:	4605      	mov	r5, r0
 80055a4:	0710      	lsls	r0, r2, #28
 80055a6:	460c      	mov	r4, r1
 80055a8:	d458      	bmi.n	800565c <__sflush_r+0xc0>
 80055aa:	684b      	ldr	r3, [r1, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc05      	bgt.n	80055bc <__sflush_r+0x20>
 80055b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dc02      	bgt.n	80055bc <__sflush_r+0x20>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055be:	2e00      	cmp	r6, #0
 80055c0:	d0f9      	beq.n	80055b6 <__sflush_r+0x1a>
 80055c2:	2300      	movs	r3, #0
 80055c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055c8:	682f      	ldr	r7, [r5, #0]
 80055ca:	6a21      	ldr	r1, [r4, #32]
 80055cc:	602b      	str	r3, [r5, #0]
 80055ce:	d032      	beq.n	8005636 <__sflush_r+0x9a>
 80055d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	075a      	lsls	r2, r3, #29
 80055d6:	d505      	bpl.n	80055e4 <__sflush_r+0x48>
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	1ac0      	subs	r0, r0, r3
 80055dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055de:	b10b      	cbz	r3, 80055e4 <__sflush_r+0x48>
 80055e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055e2:	1ac0      	subs	r0, r0, r3
 80055e4:	2300      	movs	r3, #0
 80055e6:	4602      	mov	r2, r0
 80055e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ea:	6a21      	ldr	r1, [r4, #32]
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b0      	blx	r6
 80055f0:	1c43      	adds	r3, r0, #1
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	d106      	bne.n	8005604 <__sflush_r+0x68>
 80055f6:	6829      	ldr	r1, [r5, #0]
 80055f8:	291d      	cmp	r1, #29
 80055fa:	d82b      	bhi.n	8005654 <__sflush_r+0xb8>
 80055fc:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <__sflush_r+0x108>)
 80055fe:	410a      	asrs	r2, r1
 8005600:	07d6      	lsls	r6, r2, #31
 8005602:	d427      	bmi.n	8005654 <__sflush_r+0xb8>
 8005604:	2200      	movs	r2, #0
 8005606:	6062      	str	r2, [r4, #4]
 8005608:	04d9      	lsls	r1, r3, #19
 800560a:	6922      	ldr	r2, [r4, #16]
 800560c:	6022      	str	r2, [r4, #0]
 800560e:	d504      	bpl.n	800561a <__sflush_r+0x7e>
 8005610:	1c42      	adds	r2, r0, #1
 8005612:	d101      	bne.n	8005618 <__sflush_r+0x7c>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b903      	cbnz	r3, 800561a <__sflush_r+0x7e>
 8005618:	6560      	str	r0, [r4, #84]	; 0x54
 800561a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800561c:	602f      	str	r7, [r5, #0]
 800561e:	2900      	cmp	r1, #0
 8005620:	d0c9      	beq.n	80055b6 <__sflush_r+0x1a>
 8005622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005626:	4299      	cmp	r1, r3
 8005628:	d002      	beq.n	8005630 <__sflush_r+0x94>
 800562a:	4628      	mov	r0, r5
 800562c:	f7ff f8e6 	bl	80047fc <_free_r>
 8005630:	2000      	movs	r0, #0
 8005632:	6360      	str	r0, [r4, #52]	; 0x34
 8005634:	e7c0      	b.n	80055b8 <__sflush_r+0x1c>
 8005636:	2301      	movs	r3, #1
 8005638:	4628      	mov	r0, r5
 800563a:	47b0      	blx	r6
 800563c:	1c41      	adds	r1, r0, #1
 800563e:	d1c8      	bne.n	80055d2 <__sflush_r+0x36>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0c5      	beq.n	80055d2 <__sflush_r+0x36>
 8005646:	2b1d      	cmp	r3, #29
 8005648:	d001      	beq.n	800564e <__sflush_r+0xb2>
 800564a:	2b16      	cmp	r3, #22
 800564c:	d101      	bne.n	8005652 <__sflush_r+0xb6>
 800564e:	602f      	str	r7, [r5, #0]
 8005650:	e7b1      	b.n	80055b6 <__sflush_r+0x1a>
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005658:	81a3      	strh	r3, [r4, #12]
 800565a:	e7ad      	b.n	80055b8 <__sflush_r+0x1c>
 800565c:	690f      	ldr	r7, [r1, #16]
 800565e:	2f00      	cmp	r7, #0
 8005660:	d0a9      	beq.n	80055b6 <__sflush_r+0x1a>
 8005662:	0793      	lsls	r3, r2, #30
 8005664:	680e      	ldr	r6, [r1, #0]
 8005666:	bf08      	it	eq
 8005668:	694b      	ldreq	r3, [r1, #20]
 800566a:	600f      	str	r7, [r1, #0]
 800566c:	bf18      	it	ne
 800566e:	2300      	movne	r3, #0
 8005670:	eba6 0807 	sub.w	r8, r6, r7
 8005674:	608b      	str	r3, [r1, #8]
 8005676:	f1b8 0f00 	cmp.w	r8, #0
 800567a:	dd9c      	ble.n	80055b6 <__sflush_r+0x1a>
 800567c:	6a21      	ldr	r1, [r4, #32]
 800567e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005680:	4643      	mov	r3, r8
 8005682:	463a      	mov	r2, r7
 8005684:	4628      	mov	r0, r5
 8005686:	47b0      	blx	r6
 8005688:	2800      	cmp	r0, #0
 800568a:	dc06      	bgt.n	800569a <__sflush_r+0xfe>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005692:	81a3      	strh	r3, [r4, #12]
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	e78e      	b.n	80055b8 <__sflush_r+0x1c>
 800569a:	4407      	add	r7, r0
 800569c:	eba8 0800 	sub.w	r8, r8, r0
 80056a0:	e7e9      	b.n	8005676 <__sflush_r+0xda>
 80056a2:	bf00      	nop
 80056a4:	dfbffffe 	.word	0xdfbffffe

080056a8 <_fflush_r>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	690b      	ldr	r3, [r1, #16]
 80056ac:	4605      	mov	r5, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b913      	cbnz	r3, 80056b8 <_fflush_r+0x10>
 80056b2:	2500      	movs	r5, #0
 80056b4:	4628      	mov	r0, r5
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	b118      	cbz	r0, 80056c2 <_fflush_r+0x1a>
 80056ba:	6a03      	ldr	r3, [r0, #32]
 80056bc:	b90b      	cbnz	r3, 80056c2 <_fflush_r+0x1a>
 80056be:	f7fe ff83 	bl	80045c8 <__sinit>
 80056c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f3      	beq.n	80056b2 <_fflush_r+0xa>
 80056ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056cc:	07d0      	lsls	r0, r2, #31
 80056ce:	d404      	bmi.n	80056da <_fflush_r+0x32>
 80056d0:	0599      	lsls	r1, r3, #22
 80056d2:	d402      	bmi.n	80056da <_fflush_r+0x32>
 80056d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056d6:	f7ff f88e 	bl	80047f6 <__retarget_lock_acquire_recursive>
 80056da:	4628      	mov	r0, r5
 80056dc:	4621      	mov	r1, r4
 80056de:	f7ff ff5d 	bl	800559c <__sflush_r>
 80056e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056e4:	07da      	lsls	r2, r3, #31
 80056e6:	4605      	mov	r5, r0
 80056e8:	d4e4      	bmi.n	80056b4 <_fflush_r+0xc>
 80056ea:	89a3      	ldrh	r3, [r4, #12]
 80056ec:	059b      	lsls	r3, r3, #22
 80056ee:	d4e1      	bmi.n	80056b4 <_fflush_r+0xc>
 80056f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056f2:	f7ff f881 	bl	80047f8 <__retarget_lock_release_recursive>
 80056f6:	e7dd      	b.n	80056b4 <_fflush_r+0xc>

080056f8 <lflush>:
 80056f8:	898b      	ldrh	r3, [r1, #12]
 80056fa:	f003 0309 	and.w	r3, r3, #9
 80056fe:	2b09      	cmp	r3, #9
 8005700:	d103      	bne.n	800570a <lflush+0x12>
 8005702:	4b03      	ldr	r3, [pc, #12]	; (8005710 <lflush+0x18>)
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	f7ff bfcf 	b.w	80056a8 <_fflush_r>
 800570a:	2000      	movs	r0, #0
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	2000008c 	.word	0x2000008c

08005714 <__srefill_r>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	460c      	mov	r4, r1
 8005718:	4605      	mov	r5, r0
 800571a:	b118      	cbz	r0, 8005724 <__srefill_r+0x10>
 800571c:	6a03      	ldr	r3, [r0, #32]
 800571e:	b90b      	cbnz	r3, 8005724 <__srefill_r+0x10>
 8005720:	f7fe ff52 	bl	80045c8 <__sinit>
 8005724:	2300      	movs	r3, #0
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800572e:	069e      	lsls	r6, r3, #26
 8005730:	d502      	bpl.n	8005738 <__srefill_r+0x24>
 8005732:	f04f 30ff 	mov.w	r0, #4294967295
 8005736:	e05c      	b.n	80057f2 <__srefill_r+0xde>
 8005738:	0758      	lsls	r0, r3, #29
 800573a:	d448      	bmi.n	80057ce <__srefill_r+0xba>
 800573c:	06d9      	lsls	r1, r3, #27
 800573e:	d405      	bmi.n	800574c <__srefill_r+0x38>
 8005740:	2309      	movs	r3, #9
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	e7f2      	b.n	8005732 <__srefill_r+0x1e>
 800574c:	071a      	lsls	r2, r3, #28
 800574e:	d50b      	bpl.n	8005768 <__srefill_r+0x54>
 8005750:	4621      	mov	r1, r4
 8005752:	4628      	mov	r0, r5
 8005754:	f7ff ffa8 	bl	80056a8 <_fflush_r>
 8005758:	2800      	cmp	r0, #0
 800575a:	d1ea      	bne.n	8005732 <__srefill_r+0x1e>
 800575c:	89a3      	ldrh	r3, [r4, #12]
 800575e:	60a0      	str	r0, [r4, #8]
 8005760:	f023 0308 	bic.w	r3, r3, #8
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	61a0      	str	r0, [r4, #24]
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	f043 0304 	orr.w	r3, r3, #4
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	b91b      	cbnz	r3, 800577c <__srefill_r+0x68>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fb3c 	bl	8005df4 <__smakebuf_r>
 800577c:	89a6      	ldrh	r6, [r4, #12]
 800577e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005782:	07b3      	lsls	r3, r6, #30
 8005784:	d00f      	beq.n	80057a6 <__srefill_r+0x92>
 8005786:	2301      	movs	r3, #1
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <__srefill_r+0xe4>)
 800578a:	491c      	ldr	r1, [pc, #112]	; (80057fc <__srefill_r+0xe8>)
 800578c:	481c      	ldr	r0, [pc, #112]	; (8005800 <__srefill_r+0xec>)
 800578e:	81a3      	strh	r3, [r4, #12]
 8005790:	f006 0609 	and.w	r6, r6, #9
 8005794:	f7fe ff30 	bl	80045f8 <_fwalk_sglue>
 8005798:	2e09      	cmp	r6, #9
 800579a:	81a7      	strh	r7, [r4, #12]
 800579c:	d103      	bne.n	80057a6 <__srefill_r+0x92>
 800579e:	4621      	mov	r1, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	f7ff fefb 	bl	800559c <__sflush_r>
 80057a6:	6922      	ldr	r2, [r4, #16]
 80057a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057aa:	6963      	ldr	r3, [r4, #20]
 80057ac:	6a21      	ldr	r1, [r4, #32]
 80057ae:	6022      	str	r2, [r4, #0]
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b0      	blx	r6
 80057b4:	2800      	cmp	r0, #0
 80057b6:	6060      	str	r0, [r4, #4]
 80057b8:	dc1c      	bgt.n	80057f4 <__srefill_r+0xe0>
 80057ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057be:	bf17      	itett	ne
 80057c0:	2200      	movne	r2, #0
 80057c2:	f043 0320 	orreq.w	r3, r3, #32
 80057c6:	6062      	strne	r2, [r4, #4]
 80057c8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80057cc:	e7bc      	b.n	8005748 <__srefill_r+0x34>
 80057ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057d0:	2900      	cmp	r1, #0
 80057d2:	d0cd      	beq.n	8005770 <__srefill_r+0x5c>
 80057d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057d8:	4299      	cmp	r1, r3
 80057da:	d002      	beq.n	80057e2 <__srefill_r+0xce>
 80057dc:	4628      	mov	r0, r5
 80057de:	f7ff f80d 	bl	80047fc <_free_r>
 80057e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	2000      	movs	r0, #0
 80057e8:	6360      	str	r0, [r4, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0c0      	beq.n	8005770 <__srefill_r+0x5c>
 80057ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	2000      	movs	r0, #0
 80057f6:	e7fc      	b.n	80057f2 <__srefill_r+0xde>
 80057f8:	20000034 	.word	0x20000034
 80057fc:	080056f9 	.word	0x080056f9
 8005800:	20000040 	.word	0x20000040

08005804 <__sccl>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	780b      	ldrb	r3, [r1, #0]
 8005808:	4604      	mov	r4, r0
 800580a:	2b5e      	cmp	r3, #94	; 0x5e
 800580c:	bf0b      	itete	eq
 800580e:	784b      	ldrbeq	r3, [r1, #1]
 8005810:	1c4a      	addne	r2, r1, #1
 8005812:	1c8a      	addeq	r2, r1, #2
 8005814:	2100      	movne	r1, #0
 8005816:	bf08      	it	eq
 8005818:	2101      	moveq	r1, #1
 800581a:	3801      	subs	r0, #1
 800581c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005820:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005824:	42a8      	cmp	r0, r5
 8005826:	d1fb      	bne.n	8005820 <__sccl+0x1c>
 8005828:	b90b      	cbnz	r3, 800582e <__sccl+0x2a>
 800582a:	1e50      	subs	r0, r2, #1
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	f081 0101 	eor.w	r1, r1, #1
 8005832:	54e1      	strb	r1, [r4, r3]
 8005834:	4610      	mov	r0, r2
 8005836:	4602      	mov	r2, r0
 8005838:	f812 5b01 	ldrb.w	r5, [r2], #1
 800583c:	2d2d      	cmp	r5, #45	; 0x2d
 800583e:	d005      	beq.n	800584c <__sccl+0x48>
 8005840:	2d5d      	cmp	r5, #93	; 0x5d
 8005842:	d016      	beq.n	8005872 <__sccl+0x6e>
 8005844:	2d00      	cmp	r5, #0
 8005846:	d0f1      	beq.n	800582c <__sccl+0x28>
 8005848:	462b      	mov	r3, r5
 800584a:	e7f2      	b.n	8005832 <__sccl+0x2e>
 800584c:	7846      	ldrb	r6, [r0, #1]
 800584e:	2e5d      	cmp	r6, #93	; 0x5d
 8005850:	d0fa      	beq.n	8005848 <__sccl+0x44>
 8005852:	42b3      	cmp	r3, r6
 8005854:	dcf8      	bgt.n	8005848 <__sccl+0x44>
 8005856:	3002      	adds	r0, #2
 8005858:	461a      	mov	r2, r3
 800585a:	3201      	adds	r2, #1
 800585c:	4296      	cmp	r6, r2
 800585e:	54a1      	strb	r1, [r4, r2]
 8005860:	dcfb      	bgt.n	800585a <__sccl+0x56>
 8005862:	1af2      	subs	r2, r6, r3
 8005864:	3a01      	subs	r2, #1
 8005866:	1c5d      	adds	r5, r3, #1
 8005868:	42b3      	cmp	r3, r6
 800586a:	bfa8      	it	ge
 800586c:	2200      	movge	r2, #0
 800586e:	18ab      	adds	r3, r5, r2
 8005870:	e7e1      	b.n	8005836 <__sccl+0x32>
 8005872:	4610      	mov	r0, r2
 8005874:	e7da      	b.n	800582c <__sccl+0x28>

08005876 <__submore>:
 8005876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	460c      	mov	r4, r1
 800587c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800587e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005882:	4299      	cmp	r1, r3
 8005884:	d11d      	bne.n	80058c2 <__submore+0x4c>
 8005886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800588a:	f7ff f823 	bl	80048d4 <_malloc_r>
 800588e:	b918      	cbnz	r0, 8005898 <__submore+0x22>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800589c:	63a3      	str	r3, [r4, #56]	; 0x38
 800589e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80058a2:	6360      	str	r0, [r4, #52]	; 0x34
 80058a4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80058a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80058ac:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80058b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80058b4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80058b8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80058bc:	6020      	str	r0, [r4, #0]
 80058be:	2000      	movs	r0, #0
 80058c0:	e7e8      	b.n	8005894 <__submore+0x1e>
 80058c2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80058c4:	0077      	lsls	r7, r6, #1
 80058c6:	463a      	mov	r2, r7
 80058c8:	f000 f946 	bl	8005b58 <_realloc_r>
 80058cc:	4605      	mov	r5, r0
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d0de      	beq.n	8005890 <__submore+0x1a>
 80058d2:	eb00 0806 	add.w	r8, r0, r6
 80058d6:	4601      	mov	r1, r0
 80058d8:	4632      	mov	r2, r6
 80058da:	4640      	mov	r0, r8
 80058dc:	f000 f92e 	bl	8005b3c <memcpy>
 80058e0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80058e4:	f8c4 8000 	str.w	r8, [r4]
 80058e8:	e7e9      	b.n	80058be <__submore+0x48>

080058ea <_ungetc_r>:
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	4614      	mov	r4, r2
 80058ee:	1c4a      	adds	r2, r1, #1
 80058f0:	4606      	mov	r6, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	d103      	bne.n	80058fe <_ungetc_r+0x14>
 80058f6:	f04f 35ff 	mov.w	r5, #4294967295
 80058fa:	4628      	mov	r0, r5
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	b118      	cbz	r0, 8005908 <_ungetc_r+0x1e>
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	b90b      	cbnz	r3, 8005908 <_ungetc_r+0x1e>
 8005904:	f7fe fe60 	bl	80045c8 <__sinit>
 8005908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800590a:	07db      	lsls	r3, r3, #31
 800590c:	d405      	bmi.n	800591a <_ungetc_r+0x30>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	0598      	lsls	r0, r3, #22
 8005912:	d402      	bmi.n	800591a <_ungetc_r+0x30>
 8005914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005916:	f7fe ff6e 	bl	80047f6 <__retarget_lock_acquire_recursive>
 800591a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800591e:	f023 0320 	bic.w	r3, r3, #32
 8005922:	0759      	lsls	r1, r3, #29
 8005924:	81a3      	strh	r3, [r4, #12]
 8005926:	b29a      	uxth	r2, r3
 8005928:	d423      	bmi.n	8005972 <_ungetc_r+0x88>
 800592a:	06d3      	lsls	r3, r2, #27
 800592c:	d409      	bmi.n	8005942 <_ungetc_r+0x58>
 800592e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005930:	07dd      	lsls	r5, r3, #31
 8005932:	d4e0      	bmi.n	80058f6 <_ungetc_r+0xc>
 8005934:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005938:	d1dd      	bne.n	80058f6 <_ungetc_r+0xc>
 800593a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800593c:	f7fe ff5c 	bl	80047f8 <__retarget_lock_release_recursive>
 8005940:	e7d9      	b.n	80058f6 <_ungetc_r+0xc>
 8005942:	0710      	lsls	r0, r2, #28
 8005944:	d511      	bpl.n	800596a <_ungetc_r+0x80>
 8005946:	4621      	mov	r1, r4
 8005948:	4630      	mov	r0, r6
 800594a:	f7ff fead 	bl	80056a8 <_fflush_r>
 800594e:	b130      	cbz	r0, 800595e <_ungetc_r+0x74>
 8005950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005952:	07d9      	lsls	r1, r3, #31
 8005954:	d4cf      	bmi.n	80058f6 <_ungetc_r+0xc>
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f413 7f00 	tst.w	r3, #512	; 0x200
 800595c:	e7ec      	b.n	8005938 <_ungetc_r+0x4e>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	60a0      	str	r0, [r4, #8]
 8005962:	f023 0308 	bic.w	r3, r3, #8
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	61a0      	str	r0, [r4, #24]
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f043 0304 	orr.w	r3, r3, #4
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	b2ed      	uxtb	r5, r5
 8005978:	b1d3      	cbz	r3, 80059b0 <_ungetc_r+0xc6>
 800597a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800597c:	4293      	cmp	r3, r2
 800597e:	dc05      	bgt.n	800598c <_ungetc_r+0xa2>
 8005980:	4621      	mov	r1, r4
 8005982:	4630      	mov	r0, r6
 8005984:	f7ff ff77 	bl	8005876 <__submore>
 8005988:	2800      	cmp	r0, #0
 800598a:	d1e1      	bne.n	8005950 <_ungetc_r+0x66>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	1e5a      	subs	r2, r3, #1
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	3301      	adds	r3, #1
 800599a:	6063      	str	r3, [r4, #4]
 800599c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800599e:	07da      	lsls	r2, r3, #31
 80059a0:	d4ab      	bmi.n	80058fa <_ungetc_r+0x10>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	059b      	lsls	r3, r3, #22
 80059a6:	d4a8      	bmi.n	80058fa <_ungetc_r+0x10>
 80059a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059aa:	f7fe ff25 	bl	80047f8 <__retarget_lock_release_recursive>
 80059ae:	e7a4      	b.n	80058fa <_ungetc_r+0x10>
 80059b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80059b2:	6920      	ldr	r0, [r4, #16]
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	f001 0101 	and.w	r1, r1, #1
 80059ba:	b160      	cbz	r0, 80059d6 <_ungetc_r+0xec>
 80059bc:	4298      	cmp	r0, r3
 80059be:	d20a      	bcs.n	80059d6 <_ungetc_r+0xec>
 80059c0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80059c4:	42a8      	cmp	r0, r5
 80059c6:	d106      	bne.n	80059d6 <_ungetc_r+0xec>
 80059c8:	3b01      	subs	r3, #1
 80059ca:	3201      	adds	r2, #1
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	6062      	str	r2, [r4, #4]
 80059d0:	2900      	cmp	r1, #0
 80059d2:	d192      	bne.n	80058fa <_ungetc_r+0x10>
 80059d4:	e7e5      	b.n	80059a2 <_ungetc_r+0xb8>
 80059d6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80059da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059de:	6363      	str	r3, [r4, #52]	; 0x34
 80059e0:	2303      	movs	r3, #3
 80059e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80059e4:	4623      	mov	r3, r4
 80059e6:	f803 5f46 	strb.w	r5, [r3, #70]!
 80059ea:	6023      	str	r3, [r4, #0]
 80059ec:	2301      	movs	r3, #1
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	e7ee      	b.n	80059d0 <_ungetc_r+0xe6>

080059f2 <__swbuf_r>:
 80059f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f4:	460e      	mov	r6, r1
 80059f6:	4614      	mov	r4, r2
 80059f8:	4605      	mov	r5, r0
 80059fa:	b118      	cbz	r0, 8005a04 <__swbuf_r+0x12>
 80059fc:	6a03      	ldr	r3, [r0, #32]
 80059fe:	b90b      	cbnz	r3, 8005a04 <__swbuf_r+0x12>
 8005a00:	f7fe fde2 	bl	80045c8 <__sinit>
 8005a04:	69a3      	ldr	r3, [r4, #24]
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	071a      	lsls	r2, r3, #28
 8005a0c:	d525      	bpl.n	8005a5a <__swbuf_r+0x68>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	b31b      	cbz	r3, 8005a5a <__swbuf_r+0x68>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	1a98      	subs	r0, r3, r2
 8005a18:	6963      	ldr	r3, [r4, #20]
 8005a1a:	b2f6      	uxtb	r6, r6
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	4637      	mov	r7, r6
 8005a20:	dc04      	bgt.n	8005a2c <__swbuf_r+0x3a>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff fe3f 	bl	80056a8 <_fflush_r>
 8005a2a:	b9e0      	cbnz	r0, 8005a66 <__swbuf_r+0x74>
 8005a2c:	68a3      	ldr	r3, [r4, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	701e      	strb	r6, [r3, #0]
 8005a3a:	6962      	ldr	r2, [r4, #20]
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d004      	beq.n	8005a4c <__swbuf_r+0x5a>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	07db      	lsls	r3, r3, #31
 8005a46:	d506      	bpl.n	8005a56 <__swbuf_r+0x64>
 8005a48:	2e0a      	cmp	r6, #10
 8005a4a:	d104      	bne.n	8005a56 <__swbuf_r+0x64>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f7ff fe2a 	bl	80056a8 <_fflush_r>
 8005a54:	b938      	cbnz	r0, 8005a66 <__swbuf_r+0x74>
 8005a56:	4638      	mov	r0, r7
 8005a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	f000 f805 	bl	8005a6c <__swsetup_r>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d0d5      	beq.n	8005a12 <__swbuf_r+0x20>
 8005a66:	f04f 37ff 	mov.w	r7, #4294967295
 8005a6a:	e7f4      	b.n	8005a56 <__swbuf_r+0x64>

08005a6c <__swsetup_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <__swsetup_r+0xac>)
 8005a70:	4605      	mov	r5, r0
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	460c      	mov	r4, r1
 8005a76:	b118      	cbz	r0, 8005a80 <__swsetup_r+0x14>
 8005a78:	6a03      	ldr	r3, [r0, #32]
 8005a7a:	b90b      	cbnz	r3, 8005a80 <__swsetup_r+0x14>
 8005a7c:	f7fe fda4 	bl	80045c8 <__sinit>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a86:	0718      	lsls	r0, r3, #28
 8005a88:	d422      	bmi.n	8005ad0 <__swsetup_r+0x64>
 8005a8a:	06d9      	lsls	r1, r3, #27
 8005a8c:	d407      	bmi.n	8005a9e <__swsetup_r+0x32>
 8005a8e:	2309      	movs	r3, #9
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e034      	b.n	8005b08 <__swsetup_r+0x9c>
 8005a9e:	0758      	lsls	r0, r3, #29
 8005aa0:	d512      	bpl.n	8005ac8 <__swsetup_r+0x5c>
 8005aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aa4:	b141      	cbz	r1, 8005ab8 <__swsetup_r+0x4c>
 8005aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	d002      	beq.n	8005ab4 <__swsetup_r+0x48>
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7fe fea4 	bl	80047fc <_free_r>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005abe:	81a3      	strh	r3, [r4, #12]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	6923      	ldr	r3, [r4, #16]
 8005ac6:	6023      	str	r3, [r4, #0]
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f043 0308 	orr.w	r3, r3, #8
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	6923      	ldr	r3, [r4, #16]
 8005ad2:	b94b      	cbnz	r3, 8005ae8 <__swsetup_r+0x7c>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ade:	d003      	beq.n	8005ae8 <__swsetup_r+0x7c>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f000 f986 	bl	8005df4 <__smakebuf_r>
 8005ae8:	89a0      	ldrh	r0, [r4, #12]
 8005aea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005aee:	f010 0301 	ands.w	r3, r0, #1
 8005af2:	d00a      	beq.n	8005b0a <__swsetup_r+0x9e>
 8005af4:	2300      	movs	r3, #0
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	6963      	ldr	r3, [r4, #20]
 8005afa:	425b      	negs	r3, r3
 8005afc:	61a3      	str	r3, [r4, #24]
 8005afe:	6923      	ldr	r3, [r4, #16]
 8005b00:	b943      	cbnz	r3, 8005b14 <__swsetup_r+0xa8>
 8005b02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b06:	d1c4      	bne.n	8005a92 <__swsetup_r+0x26>
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
 8005b0a:	0781      	lsls	r1, r0, #30
 8005b0c:	bf58      	it	pl
 8005b0e:	6963      	ldrpl	r3, [r4, #20]
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	e7f4      	b.n	8005afe <__swsetup_r+0x92>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e7f7      	b.n	8005b08 <__swsetup_r+0x9c>
 8005b18:	2000008c 	.word	0x2000008c

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	4d06      	ldr	r5, [pc, #24]	; (8005b38 <_sbrk_r+0x1c>)
 8005b20:	2300      	movs	r3, #0
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fb fa52 	bl	8000fd0 <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	200002c0 	.word	0x200002c0

08005b3c <memcpy>:
 8005b3c:	440a      	add	r2, r1
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b44:	d100      	bne.n	8005b48 <memcpy+0xc>
 8005b46:	4770      	bx	lr
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b52:	4291      	cmp	r1, r2
 8005b54:	d1f9      	bne.n	8005b4a <memcpy+0xe>
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <_realloc_r>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4614      	mov	r4, r2
 8005b60:	460e      	mov	r6, r1
 8005b62:	b921      	cbnz	r1, 8005b6e <_realloc_r+0x16>
 8005b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b68:	4611      	mov	r1, r2
 8005b6a:	f7fe beb3 	b.w	80048d4 <_malloc_r>
 8005b6e:	b92a      	cbnz	r2, 8005b7c <_realloc_r+0x24>
 8005b70:	f7fe fe44 	bl	80047fc <_free_r>
 8005b74:	4625      	mov	r5, r4
 8005b76:	4628      	mov	r0, r5
 8005b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7c:	f000 f998 	bl	8005eb0 <_malloc_usable_size_r>
 8005b80:	4284      	cmp	r4, r0
 8005b82:	4607      	mov	r7, r0
 8005b84:	d802      	bhi.n	8005b8c <_realloc_r+0x34>
 8005b86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b8a:	d812      	bhi.n	8005bb2 <_realloc_r+0x5a>
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4640      	mov	r0, r8
 8005b90:	f7fe fea0 	bl	80048d4 <_malloc_r>
 8005b94:	4605      	mov	r5, r0
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d0ed      	beq.n	8005b76 <_realloc_r+0x1e>
 8005b9a:	42bc      	cmp	r4, r7
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	4631      	mov	r1, r6
 8005ba0:	bf28      	it	cs
 8005ba2:	463a      	movcs	r2, r7
 8005ba4:	f7ff ffca 	bl	8005b3c <memcpy>
 8005ba8:	4631      	mov	r1, r6
 8005baa:	4640      	mov	r0, r8
 8005bac:	f7fe fe26 	bl	80047fc <_free_r>
 8005bb0:	e7e1      	b.n	8005b76 <_realloc_r+0x1e>
 8005bb2:	4635      	mov	r5, r6
 8005bb4:	e7df      	b.n	8005b76 <_realloc_r+0x1e>
	...

08005bb8 <_strtol_l.constprop.0>:
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bbe:	d001      	beq.n	8005bc4 <_strtol_l.constprop.0+0xc>
 8005bc0:	2b24      	cmp	r3, #36	; 0x24
 8005bc2:	d906      	bls.n	8005bd2 <_strtol_l.constprop.0+0x1a>
 8005bc4:	f7fe fdec 	bl	80047a0 <__errno>
 8005bc8:	2316      	movs	r3, #22
 8005bca:	6003      	str	r3, [r0, #0]
 8005bcc:	2000      	movs	r0, #0
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cb8 <_strtol_l.constprop.0+0x100>
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	462e      	mov	r6, r5
 8005bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bde:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005be2:	f017 0708 	ands.w	r7, r7, #8
 8005be6:	d1f7      	bne.n	8005bd8 <_strtol_l.constprop.0+0x20>
 8005be8:	2c2d      	cmp	r4, #45	; 0x2d
 8005bea:	d132      	bne.n	8005c52 <_strtol_l.constprop.0+0x9a>
 8005bec:	782c      	ldrb	r4, [r5, #0]
 8005bee:	2701      	movs	r7, #1
 8005bf0:	1cb5      	adds	r5, r6, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d05b      	beq.n	8005cae <_strtol_l.constprop.0+0xf6>
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d109      	bne.n	8005c0e <_strtol_l.constprop.0+0x56>
 8005bfa:	2c30      	cmp	r4, #48	; 0x30
 8005bfc:	d107      	bne.n	8005c0e <_strtol_l.constprop.0+0x56>
 8005bfe:	782c      	ldrb	r4, [r5, #0]
 8005c00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c04:	2c58      	cmp	r4, #88	; 0x58
 8005c06:	d14d      	bne.n	8005ca4 <_strtol_l.constprop.0+0xec>
 8005c08:	786c      	ldrb	r4, [r5, #1]
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	3502      	adds	r5, #2
 8005c0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c12:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c16:	f04f 0e00 	mov.w	lr, #0
 8005c1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c1e:	4676      	mov	r6, lr
 8005c20:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c24:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c28:	f1bc 0f09 	cmp.w	ip, #9
 8005c2c:	d816      	bhi.n	8005c5c <_strtol_l.constprop.0+0xa4>
 8005c2e:	4664      	mov	r4, ip
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	dd24      	ble.n	8005c7e <_strtol_l.constprop.0+0xc6>
 8005c34:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c38:	d008      	beq.n	8005c4c <_strtol_l.constprop.0+0x94>
 8005c3a:	45b1      	cmp	r9, r6
 8005c3c:	d31c      	bcc.n	8005c78 <_strtol_l.constprop.0+0xc0>
 8005c3e:	d101      	bne.n	8005c44 <_strtol_l.constprop.0+0x8c>
 8005c40:	45a2      	cmp	sl, r4
 8005c42:	db19      	blt.n	8005c78 <_strtol_l.constprop.0+0xc0>
 8005c44:	fb06 4603 	mla	r6, r6, r3, r4
 8005c48:	f04f 0e01 	mov.w	lr, #1
 8005c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c50:	e7e8      	b.n	8005c24 <_strtol_l.constprop.0+0x6c>
 8005c52:	2c2b      	cmp	r4, #43	; 0x2b
 8005c54:	bf04      	itt	eq
 8005c56:	782c      	ldrbeq	r4, [r5, #0]
 8005c58:	1cb5      	addeq	r5, r6, #2
 8005c5a:	e7ca      	b.n	8005bf2 <_strtol_l.constprop.0+0x3a>
 8005c5c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c60:	f1bc 0f19 	cmp.w	ip, #25
 8005c64:	d801      	bhi.n	8005c6a <_strtol_l.constprop.0+0xb2>
 8005c66:	3c37      	subs	r4, #55	; 0x37
 8005c68:	e7e2      	b.n	8005c30 <_strtol_l.constprop.0+0x78>
 8005c6a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c6e:	f1bc 0f19 	cmp.w	ip, #25
 8005c72:	d804      	bhi.n	8005c7e <_strtol_l.constprop.0+0xc6>
 8005c74:	3c57      	subs	r4, #87	; 0x57
 8005c76:	e7db      	b.n	8005c30 <_strtol_l.constprop.0+0x78>
 8005c78:	f04f 3eff 	mov.w	lr, #4294967295
 8005c7c:	e7e6      	b.n	8005c4c <_strtol_l.constprop.0+0x94>
 8005c7e:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c82:	d105      	bne.n	8005c90 <_strtol_l.constprop.0+0xd8>
 8005c84:	2322      	movs	r3, #34	; 0x22
 8005c86:	6003      	str	r3, [r0, #0]
 8005c88:	4646      	mov	r6, r8
 8005c8a:	b942      	cbnz	r2, 8005c9e <_strtol_l.constprop.0+0xe6>
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e79e      	b.n	8005bce <_strtol_l.constprop.0+0x16>
 8005c90:	b107      	cbz	r7, 8005c94 <_strtol_l.constprop.0+0xdc>
 8005c92:	4276      	negs	r6, r6
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	d0f9      	beq.n	8005c8c <_strtol_l.constprop.0+0xd4>
 8005c98:	f1be 0f00 	cmp.w	lr, #0
 8005c9c:	d000      	beq.n	8005ca0 <_strtol_l.constprop.0+0xe8>
 8005c9e:	1e69      	subs	r1, r5, #1
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	e7f3      	b.n	8005c8c <_strtol_l.constprop.0+0xd4>
 8005ca4:	2430      	movs	r4, #48	; 0x30
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1b1      	bne.n	8005c0e <_strtol_l.constprop.0+0x56>
 8005caa:	2308      	movs	r3, #8
 8005cac:	e7af      	b.n	8005c0e <_strtol_l.constprop.0+0x56>
 8005cae:	2c30      	cmp	r4, #48	; 0x30
 8005cb0:	d0a5      	beq.n	8005bfe <_strtol_l.constprop.0+0x46>
 8005cb2:	230a      	movs	r3, #10
 8005cb4:	e7ab      	b.n	8005c0e <_strtol_l.constprop.0+0x56>
 8005cb6:	bf00      	nop
 8005cb8:	08006177 	.word	0x08006177

08005cbc <_strtol_r>:
 8005cbc:	f7ff bf7c 	b.w	8005bb8 <_strtol_l.constprop.0>

08005cc0 <_strtoul_l.constprop.0>:
 8005cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	4f36      	ldr	r7, [pc, #216]	; (8005da0 <_strtoul_l.constprop.0+0xe0>)
 8005cc6:	4686      	mov	lr, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cd0:	5d3e      	ldrb	r6, [r7, r4]
 8005cd2:	f016 0608 	ands.w	r6, r6, #8
 8005cd6:	d1f8      	bne.n	8005cca <_strtoul_l.constprop.0+0xa>
 8005cd8:	2c2d      	cmp	r4, #45	; 0x2d
 8005cda:	d130      	bne.n	8005d3e <_strtoul_l.constprop.0+0x7e>
 8005cdc:	782c      	ldrb	r4, [r5, #0]
 8005cde:	2601      	movs	r6, #1
 8005ce0:	1c85      	adds	r5, r0, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d057      	beq.n	8005d96 <_strtoul_l.constprop.0+0xd6>
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d109      	bne.n	8005cfe <_strtoul_l.constprop.0+0x3e>
 8005cea:	2c30      	cmp	r4, #48	; 0x30
 8005cec:	d107      	bne.n	8005cfe <_strtoul_l.constprop.0+0x3e>
 8005cee:	7828      	ldrb	r0, [r5, #0]
 8005cf0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005cf4:	2858      	cmp	r0, #88	; 0x58
 8005cf6:	d149      	bne.n	8005d8c <_strtoul_l.constprop.0+0xcc>
 8005cf8:	786c      	ldrb	r4, [r5, #1]
 8005cfa:	2310      	movs	r3, #16
 8005cfc:	3502      	adds	r5, #2
 8005cfe:	f04f 38ff 	mov.w	r8, #4294967295
 8005d02:	2700      	movs	r7, #0
 8005d04:	fbb8 f8f3 	udiv	r8, r8, r3
 8005d08:	fb03 f908 	mul.w	r9, r3, r8
 8005d0c:	ea6f 0909 	mvn.w	r9, r9
 8005d10:	4638      	mov	r0, r7
 8005d12:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d16:	f1bc 0f09 	cmp.w	ip, #9
 8005d1a:	d815      	bhi.n	8005d48 <_strtoul_l.constprop.0+0x88>
 8005d1c:	4664      	mov	r4, ip
 8005d1e:	42a3      	cmp	r3, r4
 8005d20:	dd23      	ble.n	8005d6a <_strtoul_l.constprop.0+0xaa>
 8005d22:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005d26:	d007      	beq.n	8005d38 <_strtoul_l.constprop.0+0x78>
 8005d28:	4580      	cmp	r8, r0
 8005d2a:	d31b      	bcc.n	8005d64 <_strtoul_l.constprop.0+0xa4>
 8005d2c:	d101      	bne.n	8005d32 <_strtoul_l.constprop.0+0x72>
 8005d2e:	45a1      	cmp	r9, r4
 8005d30:	db18      	blt.n	8005d64 <_strtoul_l.constprop.0+0xa4>
 8005d32:	fb00 4003 	mla	r0, r0, r3, r4
 8005d36:	2701      	movs	r7, #1
 8005d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d3c:	e7e9      	b.n	8005d12 <_strtoul_l.constprop.0+0x52>
 8005d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8005d40:	bf04      	itt	eq
 8005d42:	782c      	ldrbeq	r4, [r5, #0]
 8005d44:	1c85      	addeq	r5, r0, #2
 8005d46:	e7cc      	b.n	8005ce2 <_strtoul_l.constprop.0+0x22>
 8005d48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d4c:	f1bc 0f19 	cmp.w	ip, #25
 8005d50:	d801      	bhi.n	8005d56 <_strtoul_l.constprop.0+0x96>
 8005d52:	3c37      	subs	r4, #55	; 0x37
 8005d54:	e7e3      	b.n	8005d1e <_strtoul_l.constprop.0+0x5e>
 8005d56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005d5a:	f1bc 0f19 	cmp.w	ip, #25
 8005d5e:	d804      	bhi.n	8005d6a <_strtoul_l.constprop.0+0xaa>
 8005d60:	3c57      	subs	r4, #87	; 0x57
 8005d62:	e7dc      	b.n	8005d1e <_strtoul_l.constprop.0+0x5e>
 8005d64:	f04f 37ff 	mov.w	r7, #4294967295
 8005d68:	e7e6      	b.n	8005d38 <_strtoul_l.constprop.0+0x78>
 8005d6a:	1c7b      	adds	r3, r7, #1
 8005d6c:	d106      	bne.n	8005d7c <_strtoul_l.constprop.0+0xbc>
 8005d6e:	2322      	movs	r3, #34	; 0x22
 8005d70:	f8ce 3000 	str.w	r3, [lr]
 8005d74:	4638      	mov	r0, r7
 8005d76:	b932      	cbnz	r2, 8005d86 <_strtoul_l.constprop.0+0xc6>
 8005d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	b106      	cbz	r6, 8005d80 <_strtoul_l.constprop.0+0xc0>
 8005d7e:	4240      	negs	r0, r0
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d0f9      	beq.n	8005d78 <_strtoul_l.constprop.0+0xb8>
 8005d84:	b107      	cbz	r7, 8005d88 <_strtoul_l.constprop.0+0xc8>
 8005d86:	1e69      	subs	r1, r5, #1
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	e7f5      	b.n	8005d78 <_strtoul_l.constprop.0+0xb8>
 8005d8c:	2430      	movs	r4, #48	; 0x30
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1b5      	bne.n	8005cfe <_strtoul_l.constprop.0+0x3e>
 8005d92:	2308      	movs	r3, #8
 8005d94:	e7b3      	b.n	8005cfe <_strtoul_l.constprop.0+0x3e>
 8005d96:	2c30      	cmp	r4, #48	; 0x30
 8005d98:	d0a9      	beq.n	8005cee <_strtoul_l.constprop.0+0x2e>
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e7af      	b.n	8005cfe <_strtoul_l.constprop.0+0x3e>
 8005d9e:	bf00      	nop
 8005da0:	08006177 	.word	0x08006177

08005da4 <_strtoul_r>:
 8005da4:	f7ff bf8c 	b.w	8005cc0 <_strtoul_l.constprop.0>

08005da8 <__swhatbuf_r>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	460c      	mov	r4, r1
 8005dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db0:	2900      	cmp	r1, #0
 8005db2:	b096      	sub	sp, #88	; 0x58
 8005db4:	4615      	mov	r5, r2
 8005db6:	461e      	mov	r6, r3
 8005db8:	da0d      	bge.n	8005dd6 <__swhatbuf_r+0x2e>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	bf0c      	ite	eq
 8005dc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dca:	2340      	movne	r3, #64	; 0x40
 8005dcc:	2000      	movs	r0, #0
 8005dce:	6031      	str	r1, [r6, #0]
 8005dd0:	602b      	str	r3, [r5, #0]
 8005dd2:	b016      	add	sp, #88	; 0x58
 8005dd4:	bd70      	pop	{r4, r5, r6, pc}
 8005dd6:	466a      	mov	r2, sp
 8005dd8:	f000 f848 	bl	8005e6c <_fstat_r>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	dbec      	blt.n	8005dba <__swhatbuf_r+0x12>
 8005de0:	9901      	ldr	r1, [sp, #4]
 8005de2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005de6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005dea:	4259      	negs	r1, r3
 8005dec:	4159      	adcs	r1, r3
 8005dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df2:	e7eb      	b.n	8005dcc <__swhatbuf_r+0x24>

08005df4 <__smakebuf_r>:
 8005df4:	898b      	ldrh	r3, [r1, #12]
 8005df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005df8:	079d      	lsls	r5, r3, #30
 8005dfa:	4606      	mov	r6, r0
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	d507      	bpl.n	8005e10 <__smakebuf_r+0x1c>
 8005e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	6163      	str	r3, [r4, #20]
 8005e0c:	b002      	add	sp, #8
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	ab01      	add	r3, sp, #4
 8005e12:	466a      	mov	r2, sp
 8005e14:	f7ff ffc8 	bl	8005da8 <__swhatbuf_r>
 8005e18:	9900      	ldr	r1, [sp, #0]
 8005e1a:	4605      	mov	r5, r0
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7fe fd59 	bl	80048d4 <_malloc_r>
 8005e22:	b948      	cbnz	r0, 8005e38 <__smakebuf_r+0x44>
 8005e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e28:	059a      	lsls	r2, r3, #22
 8005e2a:	d4ef      	bmi.n	8005e0c <__smakebuf_r+0x18>
 8005e2c:	f023 0303 	bic.w	r3, r3, #3
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	e7e3      	b.n	8005e00 <__smakebuf_r+0xc>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	6020      	str	r0, [r4, #0]
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	6163      	str	r3, [r4, #20]
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	6120      	str	r0, [r4, #16]
 8005e4a:	b15b      	cbz	r3, 8005e64 <__smakebuf_r+0x70>
 8005e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 f81d 	bl	8005e90 <_isatty_r>
 8005e56:	b128      	cbz	r0, 8005e64 <__smakebuf_r+0x70>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	431d      	orrs	r5, r3
 8005e68:	81a5      	strh	r5, [r4, #12]
 8005e6a:	e7cf      	b.n	8005e0c <__smakebuf_r+0x18>

08005e6c <_fstat_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	; (8005e8c <_fstat_r+0x20>)
 8005e70:	2300      	movs	r3, #0
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	f7fb f881 	bl	8000f80 <_fstat>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d102      	bne.n	8005e88 <_fstat_r+0x1c>
 8005e82:	682b      	ldr	r3, [r5, #0]
 8005e84:	b103      	cbz	r3, 8005e88 <_fstat_r+0x1c>
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	bd38      	pop	{r3, r4, r5, pc}
 8005e8a:	bf00      	nop
 8005e8c:	200002c0 	.word	0x200002c0

08005e90 <_isatty_r>:
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4d06      	ldr	r5, [pc, #24]	; (8005eac <_isatty_r+0x1c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	4604      	mov	r4, r0
 8005e98:	4608      	mov	r0, r1
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	f7fb f880 	bl	8000fa0 <_isatty>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_isatty_r+0x1a>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_isatty_r+0x1a>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	200002c0 	.word	0x200002c0

08005eb0 <_malloc_usable_size_r>:
 8005eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb4:	1f18      	subs	r0, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bfbc      	itt	lt
 8005eba:	580b      	ldrlt	r3, [r1, r0]
 8005ebc:	18c0      	addlt	r0, r0, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
