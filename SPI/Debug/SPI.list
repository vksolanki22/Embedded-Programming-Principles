
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f4c  08009b98  08009b98  00019b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aae4  0800aae4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aae4  0800aae4  0001aae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaec  0800aaec  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaec  0800aaec  0001aaec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaf0  0800aaf0  0001aaf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aaf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001d4  0800acc8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  0800acc8  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4d6  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002212  00000000  00000000  0002e71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021973  00000000  00000000  000315d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f42b  00000000  00000000  00052f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49ad  00000000  00000000  0006236e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000999  00000000  00000000  00126d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b34  00000000  00000000  001276b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0012c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b80 	.word	0x08009b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009b80 	.word	0x08009b80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <startUpOLEDSplashScreen>:
 * DESCRIPTION   : displays Welcom for 2s
 * 				   on line 1 of the display and Disappears
 *******************************************************************************
 */
void startUpOLEDSplashScreen(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
	char stringBuffer[16] = { 0 };
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen (BLACK);
 8001004:	2000      	movs	r0, #0
 8001006:	f000 fbc8 	bl	800179a <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "   Welcome");
 800100a:	463b      	mov	r3, r7
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <startUpOLEDSplashScreen+0x48>)
 800100e:	2110      	movs	r1, #16
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fbed 	bl	80057f0 <sniprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1608, GOLDEN);
 8001016:	463a      	mov	r2, r7
 8001018:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2310      	movs	r3, #16
 8001020:	2100      	movs	r1, #0
 8001022:	2000      	movs	r0, #0
 8001024:	f000 fb70 	bl	8001708 <ssd1331_display_string>
	HAL_Delay (2000);
 8001028:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800102c:	f000 ff06 	bl	8001e3c <HAL_Delay>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	08009b98 	.word	0x08009b98

0800103c <getName>:
 * RETURNS       : returns false if user name starts with 0 else 1
 * DESCRIPTION   : displays Enter Name and reads name from serial
 *******************************************************************************
 */
bool getName(userInfo_t *iuserInfo)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
	ssd1331_clear_screen (BLACK);
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fba8 	bl	800179a <ssd1331_clear_screen>

	char stringBuffer[16] = { 0 };
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
	snprintf (stringBuffer, sizeof(stringBuffer), "Enter Name");
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4a0f      	ldr	r2, [pc, #60]	; (800109c <getName+0x60>)
 8001060:	2110      	movs	r1, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f004 fbc4 	bl	80057f0 <sniprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1206, WHITE);
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	230c      	movs	r3, #12
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f000 fb46 	bl	8001708 <ssd1331_display_string>

	scanf ("%s", iuserInfo->name);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <getName+0x64>)
 8001082:	f004 fba3 	bl	80057cc <iscanf>

	if (iuserInfo->name[0] == '0')
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b30      	cmp	r3, #48	; 0x30
 800108c:	d101      	bne.n	8001092 <getName+0x56>
		return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <getName+0x58>
	return true;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08009ba4 	.word	0x08009ba4
 80010a0:	08009bb0 	.word	0x08009bb0

080010a4 <getHeight>:
 * DESCRIPTION   : displays Enter Height and reads Height from serial
 *
 *******************************************************************************
 */
bool getHeight(userInfo_t *iuserInfo)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	6078      	str	r0, [r7, #4]
	char stringBuffer[16] = { 0 };
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen (BLACK);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 fb6c 	bl	800179a <ssd1331_clear_screen>
	snprintf (stringBuffer, sizeof(stringBuffer), "Enter Height");
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <getHeight+0x6c>)
 80010c8:	2110      	movs	r1, #16
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 fb90 	bl	80057f0 <sniprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1206, WHITE);
 80010d0:	f107 0208 	add.w	r2, r7, #8
 80010d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	230c      	movs	r3, #12
 80010dc:	2100      	movs	r1, #0
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 fb12 	bl	8001708 <ssd1331_display_string>

	scanf ("%f", &iuserInfo->height);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3318      	adds	r3, #24
 80010e8:	4619      	mov	r1, r3
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <getHeight+0x70>)
 80010ec:	f004 fb6e 	bl	80057cc <iscanf>

	if (iuserInfo->height == 0.0)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	d101      	bne.n	8001104 <getHeight+0x60>
	{
		return false;
 8001100:	2300      	movs	r3, #0
 8001102:	e000      	b.n	8001106 <getHeight+0x62>
	}
	return true;
 8001104:	2301      	movs	r3, #1
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	08009bb4 	.word	0x08009bb4
 8001114:	08009bc4 	.word	0x08009bc4

08001118 <getWeight>:
 * DESCRIPTION   : displays Enter Weight and reads Weight from serial
 *
 *******************************************************************************
 */
bool getWeight(userInfo_t *iuserInfo)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
	char stringBuffer[16] = { 0 };
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
	ssd1331_clear_screen (BLACK);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 fb32 	bl	800179a <ssd1331_clear_screen>

	snprintf (stringBuffer, sizeof(stringBuffer), "Enter Weight");
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <getWeight+0x6c>)
 800113c:	2110      	movs	r1, #16
 800113e:	4618      	mov	r0, r3
 8001140:	f004 fb56 	bl	80057f0 <sniprintf>
	ssd1331_display_string (0, 0, stringBuffer, FONT_1206, WHITE);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	230c      	movs	r3, #12
 8001150:	2100      	movs	r1, #0
 8001152:	2000      	movs	r0, #0
 8001154:	f000 fad8 	bl	8001708 <ssd1331_display_string>

	scanf ("%f", &iuserInfo->weight);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	331c      	adds	r3, #28
 800115c:	4619      	mov	r1, r3
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <getWeight+0x70>)
 8001160:	f004 fb34 	bl	80057cc <iscanf>

	if (iuserInfo->weight == 0.0)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a07 	vldr	s15, [r3, #28]
 800116a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001172:	d101      	bne.n	8001178 <getWeight+0x60>
	{
		return false;
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <getWeight+0x62>
	}
	return true;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	08009bc8 	.word	0x08009bc8
 8001188:	08009bc4 	.word	0x08009bc4

0800118c <calculateAndDisplayBMI>:
 * DESCRIPTION   : calculates and display BMI on OLED
 *
 *******************************************************************************
 */
void calculateAndDisplayBMI(userInfo_t *iuserInfo)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b093      	sub	sp, #76	; 0x4c
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	char stringBuffer[50] = { 0 };
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	222e      	movs	r2, #46	; 0x2e
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fbbc 	bl	800591e <memset>
	ssd1331_clear_screen (BLACK);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 faf7 	bl	800179a <ssd1331_clear_screen>

	iuserInfo->userBMI = iuserInfo->weight / (iuserInfo->height * iuserInfo->height);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 6a07 	vldr	s13, [r3, #28]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed93 7a06 	vldr	s14, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edc3 7a08 	vstr	s15, [r3, #32]

	snprintf (stringBuffer, sizeof(stringBuffer), "%s : %0.1f", iuserInfo->name,
 80011cc:	687c      	ldr	r4, [r7, #4]
	          iuserInfo->userBMI);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
	snprintf (stringBuffer, sizeof(stringBuffer), "%s : %0.1f", iuserInfo->name,
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	f107 000c 	add.w	r0, r7, #12
 80011e0:	e9cd 2300 	strd	r2, r3, [sp]
 80011e4:	4623      	mov	r3, r4
 80011e6:	4a09      	ldr	r2, [pc, #36]	; (800120c <calculateAndDisplayBMI+0x80>)
 80011e8:	2132      	movs	r1, #50	; 0x32
 80011ea:	f004 fb01 	bl	80057f0 <sniprintf>

	ssd1331_display_string (0, 0, stringBuffer, FONT_1608, GOLDEN);
 80011ee:	f107 020c 	add.w	r2, r7, #12
 80011f2:	f64f 63a0 	movw	r3, #65184	; 0xfea0
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2310      	movs	r3, #16
 80011fa:	2100      	movs	r1, #0
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 fa83 	bl	8001708 <ssd1331_display_string>
}
 8001202:	bf00      	nop
 8001204:	3744      	adds	r7, #68	; 0x44
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	bf00      	nop
 800120c:	08009bd8 	.word	0x08009bd8

08001210 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init ();
 8001216:	f000 fd9c 	bl	8001d52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config ();
 800121a:	f000 f86f 	bl	80012fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init ();
 800121e:	f000 f93d 	bl	800149c <MX_GPIO_Init>
	MX_USART2_UART_Init ();
 8001222:	f000 f90b 	bl	800143c <MX_USART2_UART_Init>
	MX_SPI1_Init ();
 8001226:	f000 f8cb 	bl	80013c0 <MX_SPI1_Init>
	ssd1331_init ();
 800122a:	f000 fadb 	bl	80017e4 <ssd1331_init>
	ssd1331_clear_screen (BLACK);
 800122e:	2000      	movs	r0, #0
 8001230:	f000 fab3 	bl	800179a <ssd1331_clear_screen>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (userInfoState)
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <main+0xe8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d858      	bhi.n	80012ee <main+0xde>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <main+0x34>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001259 	.word	0x08001259
 8001248:	0800126b 	.word	0x0800126b
 800124c:	0800128f 	.word	0x0800128f
 8001250:	080012b3 	.word	0x080012b3
 8001254:	080012d7 	.word	0x080012d7
		{
			case USER_INFO_STATE_WELCOME:
			{
				startUpOLEDSplashScreen ();
 8001258:	f7ff feca 	bl	8000ff0 <startUpOLEDSplashScreen>
				userInfoState++;
 800125c:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <main+0xe8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <main+0xe8>)
 8001266:	701a      	strb	r2, [r3, #0]
				break;
 8001268:	e045      	b.n	80012f6 <main+0xe6>
			}

			case USER_INFO_STATE_NAME:
			{
				if (getName (&userInformation))
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fee5 	bl	800103c <getName>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <main+0x76>
				{
					userInfoState++;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <main+0xe8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <main+0xe8>)
 8001282:	701a      	strb	r2, [r3, #0]
					break;
 8001284:	e037      	b.n	80012f6 <main+0xe6>
				}
				userInfoState = USER_INFO_STATE_WELCOME;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <main+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
				break;
 800128c:	e033      	b.n	80012f6 <main+0xe6>
			}

			case USER_INFO_STATE_HEIGHT:
			{
				if (getHeight (&userInformation))
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff07 	bl	80010a4 <getHeight>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <main+0x9a>
				{
					userInfoState++;
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <main+0xe8>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <main+0xe8>)
 80012a6:	701a      	strb	r2, [r3, #0]
					break;
 80012a8:	e025      	b.n	80012f6 <main+0xe6>
				}
				userInfoState = USER_INFO_STATE_WELCOME;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <main+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
				break;
 80012b0:	e021      	b.n	80012f6 <main+0xe6>
			}

			case USER_INFO_STATE_WEIGHT:
			{
				if (getWeight (&userInformation))
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff2f 	bl	8001118 <getWeight>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d006      	beq.n	80012ce <main+0xbe>
				{
					userInfoState++;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <main+0xe8>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <main+0xe8>)
 80012ca:	701a      	strb	r2, [r3, #0]
					break;
 80012cc:	e013      	b.n	80012f6 <main+0xe6>
				}
				userInfoState = USER_INFO_STATE_WELCOME;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <main+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
				break;
 80012d4:	e00f      	b.n	80012f6 <main+0xe6>
			}

			case USER_INFO_STATE_BMI:
			{
				calculateAndDisplayBMI (&userInformation);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff57 	bl	800118c <calculateAndDisplayBMI>
				HAL_Delay (1000);
 80012de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e2:	f000 fdab 	bl	8001e3c <HAL_Delay>
				userInfoState = USER_INFO_STATE_WELCOME;
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <main+0xe8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
				break;
 80012ec:	e003      	b.n	80012f6 <main+0xe6>
			}

			default:
			{
				userInfoState = USER_INFO_STATE_WELCOME;
 80012ee:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <main+0xe8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
				break;
 80012f4:	bf00      	nop
		switch (userInfoState)
 80012f6:	e79d      	b.n	8001234 <main+0x24>
 80012f8:	200002dc 	.word	0x200002dc

080012fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2244      	movs	r2, #68	; 0x44
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fb07 	bl	800591e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling (PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001322:	f001 f835 	bl	8002390 <HAL_PWREx_ControlVoltageScaling>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x34>
	{
		Error_Handler ();
 800132c:	f000 f900 	bl	8001530 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess ();
 8001330:	f001 f810 	bl	8002354 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <SystemClock_Config+0xc0>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800133a:	4a20      	ldr	r2, [pc, #128]	; (80013bc <SystemClock_Config+0xc0>)
 800133c:	f023 0318 	bic.w	r3, r3, #24
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType =
 8001344:	2314      	movs	r3, #20
 8001346:	617b      	str	r3, [r7, #20]
	RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001354:	2360      	movs	r3, #96	; 0x60
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001358:	2302      	movs	r3, #2
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800135c:	2301      	movs	r3, #1
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001364:	2310      	movs	r3, #16
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001368:	2307      	movs	r3, #7
 800136a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800136c:	2302      	movs	r3, #2
 800136e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001370:	2302      	movs	r3, #2
 8001372:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4618      	mov	r0, r3
 800137a:	f001 f85f 	bl	800243c <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x8c>
	{
		Error_Handler ();
 8001384:	f000 f8d4 	bl	8001530 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001388:	230f      	movs	r3, #15
 800138a:	603b      	str	r3, [r7, #0]
	                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	2303      	movs	r3, #3
 800138e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2101      	movs	r1, #1
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fc5f 	bl	8002c64 <HAL_RCC_ClockConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xb4>
	{
		Error_Handler ();
 80013ac:	f000 f8c0 	bl	8001530 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode ();
 80013b0:	f002 f872 	bl	8003498 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013b4:	bf00      	nop
 80013b6:	3758      	adds	r7, #88	; 0x58
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40021000 	.word	0x40021000

080013c0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_SPI1_Init+0x74>)
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <MX_SPI1_Init+0x78>)
 80013c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_SPI1_Init+0x74>)
 80013cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_SPI1_Init+0x74>)
 80013da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013de:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_SPI1_Init+0x74>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <MX_SPI1_Init+0x74>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI1_Init+0x74>)
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_SPI1_Init+0x74>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_SPI1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_SPI1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_SPI1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_SPI1_Init+0x74>)
 800140e:	2207      	movs	r2, #7
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_SPI1_Init+0x74>)
 800141a:	2208      	movs	r2, #8
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_SPI1_Init+0x74>)
 8001420:	f002 f93c 	bl	800369c <HAL_SPI_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_SPI1_Init+0x6e>
	{
		Error_Handler ();
 800142a:	f000 f881 	bl	8001530 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200001f0 	.word	0x200001f0
 8001438:	40013000 	.word	0x40013000

0800143c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART2_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART2_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init (&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART2_UART_Init+0x58>)
 8001480:	f002 fc88 	bl	8003d94 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler ();
 800148a:	f000 f851 	bl	8001530 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000254 	.word	0x20000254
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_GPIO_Init+0x8c>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin (GPIOB,
 80014fa:	2200      	movs	r2, #0
 80014fc:	2178      	movs	r1, #120	; 0x78
 80014fe:	480b      	ldr	r0, [pc, #44]	; (800152c <MX_GPIO_Init+0x90>)
 8001500:	f000 ff10 	bl	8002324 <HAL_GPIO_WritePin>
	LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin,
	                   GPIO_PIN_RESET);

	/*Configure GPIO pins : LD3_Pin SSD1331_CS_Pin SSD1331_DC_Pin SSD1331_RES_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | SSD1331_CS_Pin | SSD1331_DC_Pin | SSD1331_RES_Pin;
 8001504:	2378      	movs	r3, #120	; 0x78
 8001506:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_GPIO_Init+0x90>)
 800151c:	f000 fd98 	bl	8002050 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001520:	bf00      	nop
 8001522:	3720      	adds	r7, #32
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40021000 	.word	0x40021000
 800152c:	48000400 	.word	0x48000400

08001530 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq ();
	while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <ssd1331_write_byte>:
   *						   0: Writes to the command register
   *						   1: Writes to the display data ram
   * @retval None
 **/
static void ssd1331_write_byte(uint8_t chData, uint8_t chCmd) 
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	460a      	mov	r2, r1
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	4613      	mov	r3, r2
 800154a:	71bb      	strb	r3, [r7, #6]
	if (chCmd) {
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <ssd1331_write_byte+0x22>
	 	__SSD1331_DC_SET();
 8001552:	2201      	movs	r2, #1
 8001554:	2120      	movs	r1, #32
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <ssd1331_write_byte+0x60>)
 8001558:	f000 fee4 	bl	8002324 <HAL_GPIO_WritePin>
 800155c:	e004      	b.n	8001568 <ssd1331_write_byte+0x2c>
	} else {
	 	__SSD1331_DC_CLR();
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <ssd1331_write_byte+0x60>)
 8001564:	f000 fede 	bl	8002324 <HAL_GPIO_WritePin>
	}
	
	__SSD1331_CS_CLR();
 8001568:	2200      	movs	r2, #0
 800156a:	2110      	movs	r1, #16
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <ssd1331_write_byte+0x60>)
 800156e:	f000 fed9 	bl	8002324 <HAL_GPIO_WritePin>
	__SSD1331_WRITE_BYTE(chData);
 8001572:	1df9      	adds	r1, r7, #7
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	2201      	movs	r2, #1
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <ssd1331_write_byte+0x64>)
 800157a:	f002 f932 	bl	80037e2 <HAL_SPI_Transmit>
	
	__SSD1331_CS_SET();
 800157e:	2201      	movs	r2, #1
 8001580:	2110      	movs	r1, #16
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <ssd1331_write_byte+0x60>)
 8001584:	f000 fece 	bl	8002324 <HAL_GPIO_WritePin>
	__SSD1331_DC_SET();
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <ssd1331_write_byte+0x60>)
 800158e:	f000 fec9 	bl	8002324 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	48000400 	.word	0x48000400
 80015a0:	200001f0 	.word	0x200001f0

080015a4 <ssd1331_draw_point>:

void ssd1331_draw_point(uint8_t chXpos, uint8_t chYpos, uint16_t hwColor) 
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
 80015ae:	460b      	mov	r3, r1
 80015b0:	71bb      	strb	r3, [r7, #6]
 80015b2:	4613      	mov	r3, r2
 80015b4:	80bb      	strh	r3, [r7, #4]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b5f      	cmp	r3, #95	; 0x5f
 80015ba:	d82b      	bhi.n	8001614 <ssd1331_draw_point+0x70>
 80015bc:	79bb      	ldrb	r3, [r7, #6]
 80015be:	2b3f      	cmp	r3, #63	; 0x3f
 80015c0:	d828      	bhi.n	8001614 <ssd1331_draw_point+0x70>
		return;
	}

    //set column point
    ssd1331_write_byte(SET_COLUMN_ADDRESS, SSD1331_CMD);
 80015c2:	2100      	movs	r1, #0
 80015c4:	2015      	movs	r0, #21
 80015c6:	f7ff ffb9 	bl	800153c <ssd1331_write_byte>
    ssd1331_write_byte(chXpos, SSD1331_CMD);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ffb4 	bl	800153c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_WIDTH - 1, SSD1331_CMD);
 80015d4:	2100      	movs	r1, #0
 80015d6:	205f      	movs	r0, #95	; 0x5f
 80015d8:	f7ff ffb0 	bl	800153c <ssd1331_write_byte>
    //set row point
    ssd1331_write_byte(SET_ROW_ADDRESS, SSD1331_CMD);
 80015dc:	2100      	movs	r1, #0
 80015de:	2075      	movs	r0, #117	; 0x75
 80015e0:	f7ff ffac 	bl	800153c <ssd1331_write_byte>
    ssd1331_write_byte(chYpos, SSD1331_CMD);
 80015e4:	79bb      	ldrb	r3, [r7, #6]
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ffa7 	bl	800153c <ssd1331_write_byte>
    ssd1331_write_byte(OLED_HEIGHT - 1, SSD1331_CMD);
 80015ee:	2100      	movs	r1, #0
 80015f0:	203f      	movs	r0, #63	; 0x3f
 80015f2:	f7ff ffa3 	bl	800153c <ssd1331_write_byte>
    
    //fill 16bit colour
	ssd1331_write_byte(hwColor >> 8, SSD1331_DATA);
 80015f6:	88bb      	ldrh	r3, [r7, #4]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff9b 	bl	800153c <ssd1331_write_byte>
	ssd1331_write_byte(hwColor, SSD1331_DATA);   
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff95 	bl	800153c <ssd1331_write_byte>
 8001612:	e000      	b.n	8001616 <ssd1331_draw_point+0x72>
		return;
 8001614:	bf00      	nop
}
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <ssd1331_display_char>:
  * @param  chSize: 
  * @param  chMode
  * @retval 
**/
void ssd1331_display_char(uint8_t chXpos, uint8_t chYpos, uint8_t chChr, uint8_t chSize, uint16_t hwColor)
{      	
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	4603      	mov	r3, r0
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	460b      	mov	r3, r1
 8001634:	717b      	strb	r3, [r7, #5]
 8001636:	4613      	mov	r3, r2
 8001638:	713b      	strb	r3, [r7, #4]
	uint8_t i, j, chTemp;
	uint8_t chYpos0 = chYpos;
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	733b      	strb	r3, [r7, #12]

	chTemp = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	737b      	strb	r3, [r7, #13]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b5f      	cmp	r3, #95	; 0x5f
 8001646:	d857      	bhi.n	80016f8 <ssd1331_display_char+0xdc>
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b3f      	cmp	r3, #63	; 0x3f
 800164c:	d854      	bhi.n	80016f8 <ssd1331_display_char+0xdc>
		return;
	}
					   
    for (i = 0; i < chSize; i ++) {   
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e04c      	b.n	80016ee <ssd1331_display_char+0xd2>
		if (FONT_1206 == chSize) {
 8001654:	793b      	ldrb	r3, [r7, #4]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d10d      	bne.n	8001676 <ssd1331_display_char+0x5a>
			chTemp = c_chFont1206[chChr - 0x20][i];  
 800165a:	797b      	ldrb	r3, [r7, #5]
 800165c:	f1a3 0220 	sub.w	r2, r3, #32
 8001660:	7bf9      	ldrb	r1, [r7, #15]
 8001662:	4827      	ldr	r0, [pc, #156]	; (8001700 <ssd1331_display_char+0xe4>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4403      	add	r3, r0
 800166e:	440b      	add	r3, r1
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	737b      	strb	r3, [r7, #13]
 8001674:	e00c      	b.n	8001690 <ssd1331_display_char+0x74>
		} else if (FONT_1608 == chSize) { 
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d109      	bne.n	8001690 <ssd1331_display_char+0x74>
			chTemp = c_chFont1608[chChr - 0x20][i];
 800167c:	797b      	ldrb	r3, [r7, #5]
 800167e:	f1a3 0220 	sub.w	r2, r3, #32
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	491f      	ldr	r1, [pc, #124]	; (8001704 <ssd1331_display_char+0xe8>)
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	440a      	add	r2, r1
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	737b      	strb	r3, [r7, #13]
		}
		
        for (j = 0; j < 8; j ++) {
 8001690:	2300      	movs	r3, #0
 8001692:	73bb      	strb	r3, [r7, #14]
 8001694:	e025      	b.n	80016e2 <ssd1331_display_char+0xc6>
    		if (chTemp & 0x80) {
 8001696:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800169a:	2b00      	cmp	r3, #0
 800169c:	da06      	bge.n	80016ac <ssd1331_display_char+0x90>
		  ssd1331_draw_point(chXpos, chYpos, hwColor);
 800169e:	8c3a      	ldrh	r2, [r7, #32]
 80016a0:	79b9      	ldrb	r1, [r7, #6]
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff7d 	bl	80015a4 <ssd1331_draw_point>
 80016aa:	e005      	b.n	80016b8 <ssd1331_display_char+0x9c>
    		} else {
		  ssd1331_draw_point(chXpos, chYpos, 0);
 80016ac:	79b9      	ldrb	r1, [r7, #6]
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2200      	movs	r2, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff76 	bl	80015a4 <ssd1331_draw_point>
		}		  
			chTemp <<= 1;
 80016b8:	7b7b      	ldrb	r3, [r7, #13]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	737b      	strb	r3, [r7, #13]
			chYpos ++;
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	3301      	adds	r3, #1
 80016c2:	71bb      	strb	r3, [r7, #6]
			if ((chYpos - chYpos0) == chSize) {
 80016c4:	79ba      	ldrb	r2, [r7, #6]
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	1ad2      	subs	r2, r2, r3
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d105      	bne.n	80016dc <ssd1331_display_char+0xc0>
				chYpos = chYpos0;
 80016d0:	7b3b      	ldrb	r3, [r7, #12]
 80016d2:	71bb      	strb	r3, [r7, #6]
				chXpos ++;
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3301      	adds	r3, #1
 80016d8:	71fb      	strb	r3, [r7, #7]
				break;
 80016da:	e005      	b.n	80016e8 <ssd1331_display_char+0xcc>
        for (j = 0; j < 8; j ++) {
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	3301      	adds	r3, #1
 80016e0:	73bb      	strb	r3, [r7, #14]
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	d9d6      	bls.n	8001696 <ssd1331_display_char+0x7a>
    for (i = 0; i < chSize; i ++) {   
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	793b      	ldrb	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d3ae      	bcc.n	8001654 <ssd1331_display_char+0x38>
 80016f6:	e000      	b.n	80016fa <ssd1331_display_char+0xde>
		return;
 80016f8:	bf00      	nop
			}
		}  	 
    } 
}
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	08009bf0 	.word	0x08009bf0
 8001704:	0800a064 	.word	0x0800a064

08001708 <ssd1331_display_string>:
  * @param  pchString: Pointer to a string to display on the screen 
  *         
  * @retval  None
**/
void ssd1331_display_string(uint8_t chXpos, uint8_t chYpos, const char *pchString, uint8_t chSize, uint16_t hwColor)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af02      	add	r7, sp, #8
 800170e:	603a      	str	r2, [r7, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	460b      	mov	r3, r1
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	4613      	mov	r3, r2
 800171c:	717b      	strb	r3, [r7, #5]
	if (chXpos >= OLED_WIDTH || chYpos >= OLED_HEIGHT) {
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b5f      	cmp	r3, #95	; 0x5f
 8001722:	d836      	bhi.n	8001792 <ssd1331_display_string+0x8a>
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b3f      	cmp	r3, #63	; 0x3f
 8001728:	d833      	bhi.n	8001792 <ssd1331_display_string+0x8a>
		return;
	}
	
    while (*pchString != '\0') {       
 800172a:	e02d      	b.n	8001788 <ssd1331_display_string+0x80>
        if (chXpos > (OLED_WIDTH - chSize / 2)) {
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8001738:	429a      	cmp	r2, r3
 800173a:	dd12      	ble.n	8001762 <ssd1331_display_string+0x5a>
			chXpos = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	71fb      	strb	r3, [r7, #7]
			chYpos += chSize;
 8001740:	79ba      	ldrb	r2, [r7, #6]
 8001742:	797b      	ldrb	r3, [r7, #5]
 8001744:	4413      	add	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
			if (chYpos > (OLED_HEIGHT - chSize)) {
 8001748:	79ba      	ldrb	r2, [r7, #6]
 800174a:	797b      	ldrb	r3, [r7, #5]
 800174c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001750:	429a      	cmp	r2, r3
 8001752:	dd06      	ble.n	8001762 <ssd1331_display_string+0x5a>
				chYpos = chXpos = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	71bb      	strb	r3, [r7, #6]
				ssd1331_clear_screen(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f000 f81c 	bl	800179a <ssd1331_clear_screen>
			}
		}
		
        ssd1331_display_char(chXpos, chYpos, *pchString, chSize, hwColor);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	797c      	ldrb	r4, [r7, #5]
 8001768:	79b9      	ldrb	r1, [r7, #6]
 800176a:	79f8      	ldrb	r0, [r7, #7]
 800176c:	8b3b      	ldrh	r3, [r7, #24]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4623      	mov	r3, r4
 8001772:	f7ff ff53 	bl	800161c <ssd1331_display_char>
        chXpos += chSize / 2;
 8001776:	797b      	ldrb	r3, [r7, #5]
 8001778:	085b      	lsrs	r3, r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4413      	add	r3, r2
 8001780:	71fb      	strb	r3, [r7, #7]
        pchString ++;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	603b      	str	r3, [r7, #0]
    while (*pchString != '\0') {       
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1cd      	bne.n	800172c <ssd1331_display_string+0x24>
 8001790:	e000      	b.n	8001794 <ssd1331_display_string+0x8c>
		return;
 8001792:	bf00      	nop
    } 
}
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}

0800179a <ssd1331_clear_screen>:
        }
    }
}

void ssd1331_clear_screen(uint16_t hwColor)  
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	
	for(i = 0; i < OLED_HEIGHT; i ++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	81fb      	strh	r3, [r7, #14]
 80017a8:	e013      	b.n	80017d2 <ssd1331_clear_screen+0x38>
		for(j = 0; j < OLED_WIDTH; j ++){
 80017aa:	2300      	movs	r3, #0
 80017ac:	81bb      	strh	r3, [r7, #12]
 80017ae:	e00a      	b.n	80017c6 <ssd1331_clear_screen+0x2c>
			ssd1331_draw_point(j, i, hwColor);
 80017b0:	89bb      	ldrh	r3, [r7, #12]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	89fa      	ldrh	r2, [r7, #14]
 80017b6:	b2d1      	uxtb	r1, r2
 80017b8:	88fa      	ldrh	r2, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fef2 	bl	80015a4 <ssd1331_draw_point>
		for(j = 0; j < OLED_WIDTH; j ++){
 80017c0:	89bb      	ldrh	r3, [r7, #12]
 80017c2:	3301      	adds	r3, #1
 80017c4:	81bb      	strh	r3, [r7, #12]
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	2b5f      	cmp	r3, #95	; 0x5f
 80017ca:	d9f1      	bls.n	80017b0 <ssd1331_clear_screen+0x16>
	for(i = 0; i < OLED_HEIGHT; i ++){
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	3301      	adds	r3, #1
 80017d0:	81fb      	strh	r3, [r7, #14]
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	2b3f      	cmp	r3, #63	; 0x3f
 80017d6:	d9e8      	bls.n	80017aa <ssd1331_clear_screen+0x10>
		}
	}
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <ssd1331_init>:


void ssd1331_init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  __SSD1331_RES_SET();  //RES set
 80017e8:	2201      	movs	r2, #1
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	4852      	ldr	r0, [pc, #328]	; (8001938 <ssd1331_init+0x154>)
 80017ee:	f000 fd99 	bl	8002324 <HAL_GPIO_WritePin>
  __SSD1331_CS_SET();
 80017f2:	2201      	movs	r2, #1
 80017f4:	2110      	movs	r1, #16
 80017f6:	4850      	ldr	r0, [pc, #320]	; (8001938 <ssd1331_init+0x154>)
 80017f8:	f000 fd94 	bl	8002324 <HAL_GPIO_WritePin>
	
  ssd1331_write_byte(DISPLAY_OFF, SSD1331_CMD);          //Display Off
 80017fc:	2100      	movs	r1, #0
 80017fe:	20ae      	movs	r0, #174	; 0xae
 8001800:	f7ff fe9c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_A, SSD1331_CMD);       //Set contrast for color A
 8001804:	2100      	movs	r1, #0
 8001806:	2081      	movs	r0, #129	; 0x81
 8001808:	f7ff fe98 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //145 0x91
 800180c:	2100      	movs	r1, #0
 800180e:	20ff      	movs	r0, #255	; 0xff
 8001810:	f7ff fe94 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_B, SSD1331_CMD);       //Set contrast for color B
 8001814:	2100      	movs	r1, #0
 8001816:	2082      	movs	r0, #130	; 0x82
 8001818:	f7ff fe90 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //80 0x50
 800181c:	2100      	movs	r1, #0
 800181e:	20ff      	movs	r0, #255	; 0xff
 8001820:	f7ff fe8c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_CONTRAST_C, SSD1331_CMD);       //Set contrast for color C
 8001824:	2100      	movs	r1, #0
 8001826:	2083      	movs	r0, #131	; 0x83
 8001828:	f7ff fe88 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0xFF, SSD1331_CMD);                     //125 0x7D
 800182c:	2100      	movs	r1, #0
 800182e:	20ff      	movs	r0, #255	; 0xff
 8001830:	f7ff fe84 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(MASTER_CURRENT_CONTROL, SSD1331_CMD);//master current control
 8001834:	2100      	movs	r1, #0
 8001836:	2087      	movs	r0, #135	; 0x87
 8001838:	f7ff fe80 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x06, SSD1331_CMD);                     //6
 800183c:	2100      	movs	r1, #0
 800183e:	2006      	movs	r0, #6
 8001840:	f7ff fe7c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_A, SSD1331_CMD);//Set Second Pre-change Speed For ColorA
 8001844:	2100      	movs	r1, #0
 8001846:	208a      	movs	r0, #138	; 0x8a
 8001848:	f7ff fe78 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800184c:	2100      	movs	r1, #0
 800184e:	2064      	movs	r0, #100	; 0x64
 8001850:	f7ff fe74 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_B, SSD1331_CMD);//Set Second Pre-change Speed For ColorB
 8001854:	2100      	movs	r1, #0
 8001856:	208b      	movs	r0, #139	; 0x8b
 8001858:	f7ff fe70 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x78, SSD1331_CMD);                     //120
 800185c:	2100      	movs	r1, #0
 800185e:	2078      	movs	r0, #120	; 0x78
 8001860:	f7ff fe6c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_SPEED_C, SSD1331_CMD);//Set Second Pre-change Speed For ColorC
 8001864:	2100      	movs	r1, #0
 8001866:	208c      	movs	r0, #140	; 0x8c
 8001868:	f7ff fe68 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x64, SSD1331_CMD);                     //100
 800186c:	2100      	movs	r1, #0
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f7ff fe64 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_REMAP, SSD1331_CMD);            //set remap & data format
 8001874:	2100      	movs	r1, #0
 8001876:	20a0      	movs	r0, #160	; 0xa0
 8001878:	f7ff fe60 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x72, SSD1331_CMD);                     //0x72              
 800187c:	2100      	movs	r1, #0
 800187e:	2072      	movs	r0, #114	; 0x72
 8001880:	f7ff fe5c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_START_LINE, SSD1331_CMD);//Set display Start Line
 8001884:	2100      	movs	r1, #0
 8001886:	20a1      	movs	r0, #161	; 0xa1
 8001888:	f7ff fe58 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 800188c:	2100      	movs	r1, #0
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fe54 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_DISPLAY_OFFSET, SSD1331_CMD);   //Set display offset
 8001894:	2100      	movs	r1, #0
 8001896:	20a2      	movs	r0, #162	; 0xa2
 8001898:	f7ff fe50 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x0, SSD1331_CMD);
 800189c:	2100      	movs	r1, #0
 800189e:	2000      	movs	r0, #0
 80018a0:	f7ff fe4c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_DISPLAY, SSD1331_CMD);       //Set display mode
 80018a4:	2100      	movs	r1, #0
 80018a6:	20a4      	movs	r0, #164	; 0xa4
 80018a8:	f7ff fe48 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MULTIPLEX_RATIO, SSD1331_CMD);  //Set multiplex ratio
 80018ac:	2100      	movs	r1, #0
 80018ae:	20a8      	movs	r0, #168	; 0xa8
 80018b0:	f7ff fe44 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x3F, SSD1331_CMD);
 80018b4:	2100      	movs	r1, #0
 80018b6:	203f      	movs	r0, #63	; 0x3f
 80018b8:	f7ff fe40 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_MASTER_CONFIGURE, SSD1331_CMD); //Set master configuration
 80018bc:	2100      	movs	r1, #0
 80018be:	20ad      	movs	r0, #173	; 0xad
 80018c0:	f7ff fe3c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x8E, SSD1331_CMD);
 80018c4:	2100      	movs	r1, #0
 80018c6:	208e      	movs	r0, #142	; 0x8e
 80018c8:	f7ff fe38 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(POWER_SAVE_MODE, SSD1331_CMD);      //Set Power Save Mode
 80018cc:	2100      	movs	r1, #0
 80018ce:	20b0      	movs	r0, #176	; 0xb0
 80018d0:	f7ff fe34 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x00, SSD1331_CMD);                     //0x00
 80018d4:	2100      	movs	r1, #0
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff fe30 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(PHASE_PERIOD_ADJUSTMENT, SSD1331_CMD);//phase 1 and 2 period adjustment
 80018dc:	2100      	movs	r1, #0
 80018de:	20b1      	movs	r0, #177	; 0xb1
 80018e0:	f7ff fe2c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x31, SSD1331_CMD);                     //0x31
 80018e4:	2100      	movs	r1, #0
 80018e6:	2031      	movs	r0, #49	; 0x31
 80018e8:	f7ff fe28 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(DISPLAY_CLOCK_DIV, SSD1331_CMD);    //display clock divider/oscillator frequency
 80018ec:	2100      	movs	r1, #0
 80018ee:	20b3      	movs	r0, #179	; 0xb3
 80018f0:	f7ff fe24 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0xF0, SSD1331_CMD);
 80018f4:	2100      	movs	r1, #0
 80018f6:	20f0      	movs	r0, #240	; 0xf0
 80018f8:	f7ff fe20 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_PRECHARGE_VOLTAGE, SSD1331_CMD);//Set Pre-Change Level
 80018fc:	2100      	movs	r1, #0
 80018fe:	20bb      	movs	r0, #187	; 0xbb
 8001900:	f7ff fe1c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x3A, SSD1331_CMD);
 8001904:	2100      	movs	r1, #0
 8001906:	203a      	movs	r0, #58	; 0x3a
 8001908:	f7ff fe18 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(SET_V_VOLTAGE, SSD1331_CMD);        //Set vcomH
 800190c:	2100      	movs	r1, #0
 800190e:	20be      	movs	r0, #190	; 0xbe
 8001910:	f7ff fe14 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(0x3E, SSD1331_CMD);
 8001914:	2100      	movs	r1, #0
 8001916:	203e      	movs	r0, #62	; 0x3e
 8001918:	f7ff fe10 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(DEACTIVE_SCROLLING, SSD1331_CMD);   //disable scrolling
 800191c:	2100      	movs	r1, #0
 800191e:	202e      	movs	r0, #46	; 0x2e
 8001920:	f7ff fe0c 	bl	800153c <ssd1331_write_byte>
  ssd1331_write_byte(NORMAL_BRIGHTNESS_DISPLAY_ON, SSD1331_CMD);//set display on
 8001924:	2100      	movs	r1, #0
 8001926:	20af      	movs	r0, #175	; 0xaf
 8001928:	f7ff fe08 	bl	800153c <ssd1331_write_byte>
  
  //ssd1331_fill_rect(0, 0, 96, 64, 0x0000);
  ssd1331_clear_screen(0x0000);
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff ff34 	bl	800179a <ssd1331_clear_screen>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	48000400 	.word	0x48000400

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x44>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_MspInit+0x44>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6613      	str	r3, [r2, #96]	; 0x60
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_MspInit+0x44>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x44>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x44>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6593      	str	r3, [r2, #88]	; 0x58
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x44>)
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_SPI_MspInit+0x80>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d129      	bne.n	80019fa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b0:	6613      	str	r3, [r2, #96]	; 0x60
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_SPI_MspInit+0x84>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80019d6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e8:	2305      	movs	r3, #5
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f000 fb2b 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	; 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b09e      	sub	sp, #120	; 0x78
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2254      	movs	r2, #84	; 0x54
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 ff76 	bl	800591e <memset>
  if(huart->Instance==USART2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_UART_MspInit+0xcc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d148      	bne.n	8001ace <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fb2f 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a54:	f7ff fd6c 	bl	8001530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a58:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a62:	6593      	str	r3, [r2, #88]	; 0x58
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_UART_MspInit+0xd0>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a88:	2304      	movs	r3, #4
 8001a8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa6:	f000 fad3 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001abc:	2303      	movs	r3, #3
 8001abe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aca:	f000 fac1 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3778      	adds	r7, #120	; 0x78
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40021000 	.word	0x40021000

08001ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x4>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 f966 	bl	8001dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	f003 ff39 	bl	80059c4 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
	return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

int _read (int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	int returnVal= 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
	len = 1;						// over ride the read and only get 1 char
 8001b88:	2301      	movs	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]

	returnVal = HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, 0xffffffff);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <_read+0x48>)
 8001b98:	f002 f9d4 	bl	8003f44 <HAL_UART_Receive>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	617b      	str	r3, [r7, #20]
	if( returnVal == HAL_OK )
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <_read+0x32>
		return len;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	e006      	b.n	8001bb8 <_read+0x40>
	else if( returnVal == HAL_TIMEOUT )
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d101      	bne.n	8001bb4 <_read+0x3c>
		return 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e001      	b.n	8001bb8 <_read+0x40>
	else
		return EOF;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000254 	.word	0x20000254

08001bc4 <_write>:

int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	4809      	ldr	r0, [pc, #36]	; (8001c04 <_write+0x40>)
 8001be0:	f002 f926 	bl	8003e30 <HAL_UART_Transmit>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d002      	beq.n	8001bf4 <_write+0x30>
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d101      	bne.n	8001bf8 <_write+0x34>
	{
		Error_Handler();
 8001bf4:	f7ff fc9c 	bl	8001530 <Error_Handler>
	}

	return len;
 8001bf8:	687b      	ldr	r3, [r7, #4]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000254 	.word	0x20000254

08001c08 <_close>:



int _close(int file)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c30:	605a      	str	r2, [r3, #4]
	return 0;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_isatty>:

int _isatty(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
	return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f003 fe90 	bl	80059c4 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20010000 	.word	0x20010000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	200002e0 	.word	0x200002e0
 8001cd8:	20000438 	.word	0x20000438

08001cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff ffea 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d0a:	490d      	ldr	r1, [pc, #52]	; (8001d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <LoopForever+0xe>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <LoopForever+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f003 fe4f 	bl	80059d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d32:	f7ff fa6d 	bl	8001210 <main>

08001d36 <LoopForever>:

LoopForever:
    b LoopForever
 8001d36:	e7fe      	b.n	8001d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d44:	0800aaf4 	.word	0x0800aaf4
  ldr r2, =_sbss
 8001d48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d4c:	20000434 	.word	0x20000434

08001d50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_IRQHandler>

08001d52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 f943 	bl	8001fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 f80e 	bl	8001d84 <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	e001      	b.n	8001d78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d74:	f7ff fde2 	bl	800193c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d78:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d023      	beq.n	8001de0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_InitTick+0x70>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_InitTick+0x6c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f941 	bl	8002036 <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b0f      	cmp	r3, #15
 8001dbe:	d809      	bhi.n	8001dd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f000 f919 	bl	8001ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_InitTick+0x74>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e007      	b.n	8001de4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e004      	b.n	8001de4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e001      	b.n	8001de4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000008 	.word	0x20000008
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	200002e4 	.word	0x200002e4

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	200002e4 	.word	0x200002e4

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000008 	.word	0x20000008

08001e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	60d3      	str	r3, [r2, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0a1b      	lsrs	r3, r3, #8
 8001ed6:	f003 0307 	and.w	r3, r3, #7
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fb4:	d301      	bcc.n	8001fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00f      	b.n	8001fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <SysTick_Config+0x40>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f7ff ff8e 	bl	8001ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <SysTick_Config+0x40>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd2:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <SysTick_Config+0x40>)
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	e000e010 	.word	0xe000e010

08001fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff47 	bl	8001e84 <__NVIC_SetPriorityGrouping>
}
 8001ff6:	bf00      	nop
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002010:	f7ff ff5c 	bl	8001ecc <__NVIC_GetPriorityGrouping>
 8002014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	6978      	ldr	r0, [r7, #20]
 800201c:	f7ff ff8e 	bl	8001f3c <NVIC_EncodePriority>
 8002020:	4602      	mov	r2, r0
 8002022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff5d 	bl	8001ee8 <__NVIC_SetPriority>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffb0 	bl	8001fa4 <SysTick_Config>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	e148      	b.n	80022f2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 813a 	beq.w	80022ec <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b01      	cmp	r3, #1
 8002082:	d005      	beq.n	8002090 <HAL_GPIO_Init+0x40>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d130      	bne.n	80020f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020c6:	2201      	movs	r2, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	091b      	lsrs	r3, r3, #4
 80020dc:	f003 0201 	and.w	r2, r3, #1
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d017      	beq.n	800212e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	2203      	movs	r2, #3
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d123      	bne.n	8002182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	08da      	lsrs	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3208      	adds	r2, #8
 8002142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4313      	orrs	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	6939      	ldr	r1, [r7, #16]
 800217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0203 	and.w	r2, r3, #3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8094 	beq.w	80022ec <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c4:	4b52      	ldr	r3, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	4a51      	ldr	r2, [pc, #324]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6613      	str	r3, [r2, #96]	; 0x60
 80021d0:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_GPIO_Init+0x2c0>)
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002206:	d00d      	beq.n	8002224 <HAL_GPIO_Init+0x1d4>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a43      	ldr	r2, [pc, #268]	; (8002318 <HAL_GPIO_Init+0x2c8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <HAL_GPIO_Init+0x1d0>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a42      	ldr	r2, [pc, #264]	; (800231c <HAL_GPIO_Init+0x2cc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_GPIO_Init+0x1cc>
 8002218:	2302      	movs	r3, #2
 800221a:	e004      	b.n	8002226 <HAL_GPIO_Init+0x1d6>
 800221c:	2307      	movs	r3, #7
 800221e:	e002      	b.n	8002226 <HAL_GPIO_Init+0x1d6>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_GPIO_Init+0x1d6>
 8002224:	2300      	movs	r3, #0
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002236:	4937      	ldr	r1, [pc, #220]	; (8002314 <HAL_GPIO_Init+0x2c4>)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4013      	ands	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022bc:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_GPIO_Init+0x2d0>)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	3301      	adds	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f47f aeaf 	bne.w	8002060 <HAL_GPIO_Init+0x10>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40021000 	.word	0x40021000
 8002314:	40010000 	.word	0x40010000
 8002318:	48000400 	.word	0x48000400
 800231c:	48000800 	.word	0x48000800
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002340:	e002      	b.n	8002348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <HAL_PWREx_GetVoltageRange+0x18>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40007000 	.word	0x40007000

08002390 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239e:	d130      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a0:	4b23      	ldr	r3, [pc, #140]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d038      	beq.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023b6:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2232      	movs	r2, #50	; 0x32
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	0c9b      	lsrs	r3, r3, #18
 80023d0:	3301      	adds	r3, #1
 80023d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d4:	e002      	b.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3b01      	subs	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023dc:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e8:	d102      	bne.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f2      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fc:	d110      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e00f      	b.n	8002422 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800240a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800240e:	d007      	beq.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002418:	4a05      	ldr	r2, [pc, #20]	; (8002430 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800241e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40007000 	.word	0x40007000
 8002434:	20000000 	.word	0x20000000
 8002438:	431bde83 	.word	0x431bde83

0800243c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f000 bc02 	b.w	8002c54 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002450:	4b96      	ldr	r3, [pc, #600]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 030c 	and.w	r3, r3, #12
 8002458:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245a:	4b94      	ldr	r3, [pc, #592]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80e4 	beq.w	800263a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d007      	beq.n	8002488 <HAL_RCC_OscConfig+0x4c>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	f040 808b 	bne.w	8002596 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b01      	cmp	r3, #1
 8002484:	f040 8087 	bne.w	8002596 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002488:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x64>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e3d9      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <HAL_RCC_OscConfig+0x7e>
 80024b0:	4b7e      	ldr	r3, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b8:	e005      	b.n	80024c6 <HAL_RCC_OscConfig+0x8a>
 80024ba:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d223      	bcs.n	8002512 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fd8c 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3ba      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024de:	4b73      	ldr	r3, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a72      	ldr	r2, [pc, #456]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024e4:	f043 0308 	orr.w	r3, r3, #8
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	496d      	ldr	r1, [pc, #436]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024fc:	4b6b      	ldr	r3, [pc, #428]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	4968      	ldr	r1, [pc, #416]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e025      	b.n	800255e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002512:	4b66      	ldr	r3, [pc, #408]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a65      	ldr	r2, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002518:	f043 0308 	orr.w	r3, r3, #8
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b63      	ldr	r3, [pc, #396]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4960      	ldr	r1, [pc, #384]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002530:	4b5e      	ldr	r3, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	495b      	ldr	r1, [pc, #364]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fd4c 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e37a      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800255e:	f000 fc81 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b51      	ldr	r3, [pc, #324]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4950      	ldr	r1, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x274>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <HAL_RCC_OscConfig+0x278>)
 800257c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCC_OscConfig+0x27c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fbfe 	bl	8001d84 <HAL_InitTick>
 8002588:	4603      	mov	r3, r0
 800258a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d052      	beq.n	8002638 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	e35e      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d032      	beq.n	8002604 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800259e:	4b43      	ldr	r3, [pc, #268]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fc3b 	bl	8001e24 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b2:	f7ff fc37 	bl	8001e24 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e347      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c4:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d0:	4b36      	ldr	r3, [pc, #216]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a35      	ldr	r2, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025d6:	f043 0308 	orr.w	r3, r3, #8
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b33      	ldr	r3, [pc, #204]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4930      	ldr	r1, [pc, #192]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ee:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	492b      	ldr	r1, [pc, #172]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	e01a      	b.n	800263a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002604:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a28      	ldr	r2, [pc, #160]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002610:	f7ff fc08 	bl	8001e24 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002618:	f7ff fc04 	bl	8001e24 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e314      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1dc>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d073      	beq.n	800272e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d005      	beq.n	8002658 <HAL_RCC_OscConfig+0x21c>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d10e      	bne.n	8002670 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d063      	beq.n	800272c <HAL_RCC_OscConfig+0x2f0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d15f      	bne.n	800272c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e2f1      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x24c>
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0b      	ldr	r2, [pc, #44]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e025      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002690:	d114      	bne.n	80026bc <HAL_RCC_OscConfig+0x280>
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 8002698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a02      	ldr	r2, [pc, #8]	; (80026ac <HAL_RCC_OscConfig+0x270>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0x298>
 80026ac:	40021000 	.word	0x40021000
 80026b0:	0800a654 	.word	0x0800a654
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004
 80026bc:	4ba0      	ldr	r3, [pc, #640]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a9f      	ldr	r2, [pc, #636]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b9d      	ldr	r3, [pc, #628]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a9c      	ldr	r2, [pc, #624]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7ff fba2 	bl	8001e24 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff fb9e 	bl	8001e24 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e2ae      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x2a8>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7ff fb8e 	bl	8001e24 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800270c:	f7ff fb8a 	bl	8001e24 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e29a      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	4b88      	ldr	r3, [pc, #544]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x2d0>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d060      	beq.n	80027fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x310>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d119      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d116      	bne.n	800277a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274c:	4b7c      	ldr	r3, [pc, #496]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_OscConfig+0x328>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e277      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b76      	ldr	r3, [pc, #472]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	4973      	ldr	r1, [pc, #460]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	e040      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002782:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7ff fb49 	bl	8001e24 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7ff fb45 	bl	8001e24 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e255      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	4b65      	ldr	r3, [pc, #404]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b62      	ldr	r3, [pc, #392]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	495f      	ldr	r1, [pc, #380]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e018      	b.n	80027fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7ff fb25 	bl	8001e24 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7ff fb21 	bl	8001e24 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e231      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d03c      	beq.n	8002882 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01c      	beq.n	800284a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	4a4a      	ldr	r2, [pc, #296]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7ff fb00 	bl	8001e24 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff fafc 	bl	8001e24 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e20c      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800283c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ef      	beq.n	8002828 <HAL_RCC_OscConfig+0x3ec>
 8002848:	e01b      	b.n	8002882 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800284c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002850:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7ff fae3 	bl	8001e24 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002862:	f7ff fadf 	bl	8001e24 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1ef      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80a6 	beq.w	80029dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10d      	bne.n	80028bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d118      	bne.n	80028fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d4:	f7ff faa6 	bl	8001e24 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7ff faa2 	bl	8001e24 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1b2      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_RCC_OscConfig+0x508>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d108      	bne.n	8002914 <HAL_RCC_OscConfig+0x4d8>
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002912:	e029      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d115      	bne.n	8002948 <HAL_RCC_OscConfig+0x50c>
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002924:	f043 0304 	orr.w	r3, r3, #4
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292c:	4b04      	ldr	r3, [pc, #16]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002932:	4a03      	ldr	r2, [pc, #12]	; (8002940 <HAL_RCC_OscConfig+0x504>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x52c>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	40007000 	.word	0x40007000
 8002948:	4b9a      	ldr	r3, [pc, #616]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a99      	ldr	r2, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002958:	4b96      	ldr	r3, [pc, #600]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a95      	ldr	r2, [pc, #596]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002960:	f023 0304 	bic.w	r3, r3, #4
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002970:	f7ff fa58 	bl	8001e24 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002976:	e00a      	b.n	800298e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7ff fa54 	bl	8001e24 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	f241 3288 	movw	r2, #5000	; 0x1388
 8002986:	4293      	cmp	r3, r2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e162      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ed      	beq.n	8002978 <HAL_RCC_OscConfig+0x53c>
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7ff fa41 	bl	8001e24 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7ff fa3d 	bl	8001e24 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e14b      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029bc:	4b7d      	ldr	r3, [pc, #500]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ed      	bne.n	80029a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ca:	7ffb      	ldrb	r3, [r7, #31]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d03c      	beq.n	8002a62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f0:	4b70      	ldr	r3, [pc, #448]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 80029f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f6:	4a6f      	ldr	r2, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff fa10 	bl	8001e24 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a08:	f7ff fa0c 	bl	8001e24 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e11c      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002a1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ef      	beq.n	8002a08 <HAL_RCC_OscConfig+0x5cc>
 8002a28:	e01b      	b.n	8002a62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2a:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a30:	4a60      	ldr	r2, [pc, #384]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7ff f9f3 	bl	8001e24 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a42:	f7ff f9ef 	bl	8001e24 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0ff      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a54:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ef      	bne.n	8002a42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80f3 	beq.w	8002c52 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 80c9 	bne.w	8002c08 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a76:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f003 0203 	and.w	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d12c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	3b01      	subs	r3, #1
 8002a96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d123      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d113      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	3b01      	subs	r3, #1
 8002ade:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d06b      	beq.n	8002bbc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d062      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0ac      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2d      	ldr	r2, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b06:	f7ff f98d 	bl	8001e24 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0e:	f7ff f989 	bl	8001e24 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e099      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_RCC_OscConfig+0x77c>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b3c:	3a01      	subs	r2, #1
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	4311      	orrs	r1, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b46:	0212      	lsls	r2, r2, #8
 8002b48:	4311      	orrs	r1, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b4e:	0852      	lsrs	r2, r2, #1
 8002b50:	3a01      	subs	r2, #1
 8002b52:	0552      	lsls	r2, r2, #21
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b5a:	0852      	lsrs	r2, r2, #1
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0652      	lsls	r2, r2, #25
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b66:	06d2      	lsls	r2, r2, #27
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4912      	ldr	r1, [pc, #72]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b88:	f7ff f94c 	bl	8001e24 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7ff f948 	bl	8001e24 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e058      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCC_OscConfig+0x778>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bae:	e050      	b.n	8002c52 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e04f      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d144      	bne.n	8002c52 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bd4:	4b21      	ldr	r3, [pc, #132]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be0:	f7ff f920 	bl	8001e24 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be8:	f7ff f91c 	bl	8001e24 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e02c      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x7ac>
 8002c06:	e024      	b.n	8002c52 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d01f      	beq.n	8002c4e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a12      	ldr	r2, [pc, #72]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7ff f903 	bl	8001e24 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff f8ff 	bl	8001e24 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e00f      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4905      	ldr	r1, [pc, #20]	; (8002c5c <HAL_RCC_OscConfig+0x820>)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x824>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
 8002c4c:	e001      	b.n	8002c52 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	feeefffc 	.word	0xfeeefffc

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0e7      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4970      	ldr	r1, [pc, #448]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b6e      	ldr	r3, [pc, #440]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cf      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4960      	ldr	r1, [pc, #384]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04c      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d121      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0a6      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e09a      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e08e      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e086      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4943      	ldr	r1, [pc, #268]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7ff f86a 	bl	8001e24 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7ff f866 	bl	8001e24 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e06e      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d208      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	492b      	ldr	r1, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d210      	bcs.n	8002dda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 0207 	bic.w	r2, r3, #7
 8002dc0:	4923      	ldr	r1, [pc, #140]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e036      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4918      	ldr	r1, [pc, #96]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4910      	ldr	r1, [pc, #64]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e18:	f000 f824 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	490b      	ldr	r1, [pc, #44]	; (8002e58 <HAL_RCC_ClockConfig+0x1f4>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1f8>)
 8002e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1fc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ffa1 	bl	8001d84 <HAL_InitTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	0800a654 	.word	0x0800a654
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d121      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d11e      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e004      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d134      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d003      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0xac>
 8002f08:	e005      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f0c:	617b      	str	r3, [r7, #20]
      break;
 8002f0e:	e005      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f12:	617b      	str	r3, [r7, #20]
      break;
 8002f14:	e002      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	617b      	str	r3, [r7, #20]
      break;
 8002f1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	fb03 f202 	mul.w	r2, r3, r2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	0e5b      	lsrs	r3, r3, #25
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	0800a66c 	.word	0x0800a66c
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	0800a664 	.word	0x0800a664

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc4:	f7ff ffda 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0adb      	lsrs	r3, r3, #11
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	0800a664 	.word	0x0800a664

08002fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003004:	f7ff f9b6 	bl	8002374 <HAL_PWREx_GetVoltageRange>
 8003008:	6178      	str	r0, [r7, #20]
 800300a:	e014      	b.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003024:	f7ff f9a6 	bl	8002374 <HAL_PWREx_GetVoltageRange>
 8003028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d10b      	bne.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d919      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2ba0      	cmp	r3, #160	; 0xa0
 8003048:	d902      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304a:	2302      	movs	r3, #2
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e013      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e010      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d902      	bls.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800305c:	2303      	movs	r3, #3
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e00a      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d102      	bne.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e004      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d101      	bne.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40022000 	.word	0x40022000

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d031      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d0:	d01a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d6:	d814      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e0:	d10f      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80030e2:	4b5d      	ldr	r3, [pc, #372]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	4a5c      	ldr	r2, [pc, #368]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ee:	e00c      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f9de 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	74fb      	strb	r3, [r7, #19]
      break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003110:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	494e      	ldr	r1, [pc, #312]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003126:	e001      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 809e 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800314e:	2300      	movs	r3, #0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	4a3f      	ldr	r2, [pc, #252]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800315a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315e:	6593      	str	r3, [r2, #88]	; 0x58
 8003160:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316c:	2301      	movs	r3, #1
 800316e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003170:	4b3a      	ldr	r3, [pc, #232]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a39      	ldr	r2, [pc, #228]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317c:	f7fe fe52 	bl	8001e24 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003184:	f7fe fe4e 	bl	8001e24 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d902      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	74fb      	strb	r3, [r7, #19]
        break;
 8003196:	e005      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0ef      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80031a4:	7cfb      	ldrb	r3, [r7, #19]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d15a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01e      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d019      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031c6:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e2:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f2:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d016      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fe0e 	bl	8001e24 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	e00b      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe fe0a 	bl	8001e24 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d902      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	74fb      	strb	r3, [r7, #19]
            break;
 8003222:	e006      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ec      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003238:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	4904      	ldr	r1, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800324e:	e009      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
 8003254:	e006      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003264:	7c7b      	ldrb	r3, [r7, #17]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d105      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326a:	4b8a      	ldr	r3, [pc, #552]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	4a89      	ldr	r2, [pc, #548]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003282:	4b84      	ldr	r3, [pc, #528]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	f023 0203 	bic.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	4980      	ldr	r1, [pc, #512]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f023 020c 	bic.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	4978      	ldr	r1, [pc, #480]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c6:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	496f      	ldr	r1, [pc, #444]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	4967      	ldr	r1, [pc, #412]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330a:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	495e      	ldr	r1, [pc, #376]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4956      	ldr	r1, [pc, #344]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d028      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003370:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4945      	ldr	r1, [pc, #276]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800338e:	d106      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003390:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a3f      	ldr	r2, [pc, #252]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339a:	60d3      	str	r3, [r2, #12]
 800339c:	e011      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2101      	movs	r1, #1
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f882 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d028      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	492d      	ldr	r1, [pc, #180]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ec:	d106      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	4a28      	ldr	r2, [pc, #160]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033f8:	60d3      	str	r3, [r2, #12]
 80033fa:	e011      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f853 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800344a:	d10c      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f830 	bl	80034b8 <RCCEx_PLLSAI1_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003480:	4904      	ldr	r1, [pc, #16]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003488:	7cbb      	ldrb	r3, [r7, #18]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6013      	str	r3, [r2, #0]
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000

080034b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034c6:	4b74      	ldr	r3, [pc, #464]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034d2:	4b71      	ldr	r3, [pc, #452]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0203 	and.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d10d      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
       ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034ea:	4b6b      	ldr	r3, [pc, #428]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
       ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d047      	beq.n	800358e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e044      	b.n	800358e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d018      	beq.n	800353e <RCCEx_PLLSAI1_Config+0x86>
 800350c:	2b03      	cmp	r3, #3
 800350e:	d825      	bhi.n	800355c <RCCEx_PLLSAI1_Config+0xa4>
 8003510:	2b01      	cmp	r3, #1
 8003512:	d002      	beq.n	800351a <RCCEx_PLLSAI1_Config+0x62>
 8003514:	2b02      	cmp	r3, #2
 8003516:	d009      	beq.n	800352c <RCCEx_PLLSAI1_Config+0x74>
 8003518:	e020      	b.n	800355c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11d      	bne.n	8003562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352a:	e01a      	b.n	8003562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800352c:	4b5a      	ldr	r3, [pc, #360]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003534:	2b00      	cmp	r3, #0
 8003536:	d116      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800353c:	e013      	b.n	8003566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800353e:	4b56      	ldr	r3, [pc, #344]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10f      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800355a:	e006      	b.n	800356a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e004      	b.n	800356c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800356a:	bf00      	nop
    }

    if(status == HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	430b      	orrs	r3, r1
 8003588:	4943      	ldr	r1, [pc, #268]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d17c      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003594:	4b40      	ldr	r3, [pc, #256]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a3f      	ldr	r2, [pc, #252]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a0:	f7fe fc40 	bl	8001e24 <HAL_GetTick>
 80035a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a6:	e009      	b.n	80035bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a8:	f7fe fc3c 	bl	8001e24 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d902      	bls.n	80035bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	73fb      	strb	r3, [r7, #15]
        break;
 80035ba:	e005      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035bc:	4b36      	ldr	r3, [pc, #216]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1ef      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d15f      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d110      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d4:	4b30      	ldr	r3, [pc, #192]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6892      	ldr	r2, [r2, #8]
 80035e4:	0211      	lsls	r1, r2, #8
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	06d2      	lsls	r2, r2, #27
 80035ec:	430a      	orrs	r2, r1
 80035ee:	492a      	ldr	r1, [pc, #168]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	610b      	str	r3, [r1, #16]
 80035f4:	e027      	b.n	8003646 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d112      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	0211      	lsls	r1, r2, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6912      	ldr	r2, [r2, #16]
 8003612:	0852      	lsrs	r2, r2, #1
 8003614:	3a01      	subs	r2, #1
 8003616:	0552      	lsls	r2, r2, #21
 8003618:	430a      	orrs	r2, r1
 800361a:	491f      	ldr	r1, [pc, #124]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	610b      	str	r3, [r1, #16]
 8003620:	e011      	b.n	8003646 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003622:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800362a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	0211      	lsls	r1, r2, #8
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6952      	ldr	r2, [r2, #20]
 8003638:	0852      	lsrs	r2, r2, #1
 800363a:	3a01      	subs	r2, #1
 800363c:	0652      	lsls	r2, r2, #25
 800363e:	430a      	orrs	r2, r1
 8003640:	4915      	ldr	r1, [pc, #84]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a13      	ldr	r2, [pc, #76]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003650:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fbe7 	bl	8001e24 <HAL_GetTick>
 8003656:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003658:	e009      	b.n	800366e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800365a:	f7fe fbe3 	bl	8001e24 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	73fb      	strb	r3, [r7, #15]
          break;
 800366c:	e005      	b.n	800367a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e095      	b.n	80037da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d108      	bne.n	80036c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d009      	beq.n	80036d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	61da      	str	r2, [r3, #28]
 80036c6:	e005      	b.n	80036d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe f948 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003714:	d902      	bls.n	800371c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003716:	2300      	movs	r3, #0
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e002      	b.n	8003722 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800371c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003720:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800372a:	d007      	beq.n	800373c <HAL_SPI_Init+0xa0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003734:	d002      	beq.n	800373c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	ea42 0103 	orr.w	r1, r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	0c1b      	lsrs	r3, r3, #16
 8003798:	f003 0204 	and.w	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037b8:	ea42 0103 	orr.w	r1, r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_SPI_Transmit+0x22>
 8003800:	2302      	movs	r3, #2
 8003802:	e15f      	b.n	8003ac4 <HAL_SPI_Transmit+0x2e2>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800380c:	f7fe fb0a 	bl	8001e24 <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003826:	e148      	b.n	8003aba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SPI_Transmit+0x52>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003838:	e13f      	b.n	8003aba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003884:	d10f      	bne.n	80038a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003894:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d007      	beq.n	80038c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038cc:	d94f      	bls.n	800396e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Transmit+0xfa>
 80038d6:	8afb      	ldrh	r3, [r7, #22]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d142      	bne.n	8003962 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	881a      	ldrh	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003900:	e02f      	b.n	8003962 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b02      	cmp	r3, #2
 800390e:	d112      	bne.n	8003936 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003934:	e015      	b.n	8003962 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003936:	f7fe fa75 	bl	8001e24 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_Transmit+0x16c>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Transmit+0x172>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003960:	e0ab      	b.n	8003aba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ca      	bne.n	8003902 <HAL_SPI_Transmit+0x120>
 800396c:	e080      	b.n	8003a70 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0x19a>
 8003976:	8afb      	ldrh	r3, [r7, #22]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d174      	bne.n	8003a66 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d912      	bls.n	80039ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	1c9a      	adds	r2, r3, #2
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b02      	subs	r3, #2
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039aa:	e05c      	b.n	8003a66 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039d2:	e048      	b.n	8003a66 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d12b      	bne.n	8003a3a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d912      	bls.n	8003a12 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	1c9a      	adds	r2, r3, #2
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a10:	e029      	b.n	8003a66 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	7812      	ldrb	r2, [r2, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a38:	e015      	b.n	8003a66 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3a:	f7fe f9f3 	bl	8001e24 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d803      	bhi.n	8003a52 <HAL_SPI_Transmit+0x270>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d102      	bne.n	8003a58 <HAL_SPI_Transmit+0x276>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003a64:	e029      	b.n	8003aba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1b1      	bne.n	80039d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f947 	bl	8003d08 <SPI_EndRxTxTransaction>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e003      	b.n	8003aba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003adc:	f7fe f9a2 	bl	8001e24 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aec:	f7fe f99a 	bl	8001e24 <HAL_GetTick>
 8003af0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	015b      	lsls	r3, r3, #5
 8003af8:	0d1b      	lsrs	r3, r3, #20
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b02:	e054      	b.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d050      	beq.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b0c:	f7fe f98a 	bl	8001e24 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d902      	bls.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13d      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d111      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b44:	d004      	beq.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4e:	d107      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b68:	d10f      	bne.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e017      	b.n	8003bce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	bf0c      	ite	eq
 8003bbe:	2301      	moveq	r3, #1
 8003bc0:	2300      	movne	r3, #0
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d19b      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bee:	f7fe f919 	bl	8001e24 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bfe:	f7fe f911 	bl	8001e24 <HAL_GetTick>
 8003c02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c0c:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	00da      	lsls	r2, r3, #3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	0d1b      	lsrs	r3, r3, #20
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c24:	e060      	b.n	8003ce8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c2c:	d107      	bne.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d050      	beq.n	8003ce8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c46:	f7fe f8ed 	bl	8001e24 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d902      	bls.n	8003c5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d13d      	bne.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c74:	d111      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7e:	d004      	beq.n	8003c8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d107      	bne.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca2:	d10f      	bne.n	8003cc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e010      	b.n	8003cfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d196      	bne.n	8003c26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000000 	.word	0x20000000

08003d08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f7ff ff5b 	bl	8003bdc <SPI_WaitFifoStateUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e027      	b.n	8003d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fec0 	bl	8003acc <SPI_WaitFlagStateUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d56:	f043 0220 	orr.w	r2, r3, #32
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e014      	b.n	8003d8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff ff34 	bl	8003bdc <SPI_WaitFifoStateUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e000      	b.n	8003d8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e040      	b.n	8003e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fd fe28 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fba8 	bl	8004530 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f979 	bl	80040d8 <UART_SetConfig>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e01b      	b.n	8003e28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fc27 	bl	8004674 <UART_CheckIdleState>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d178      	bne.n	8003f3a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <HAL_UART_Transmit+0x24>
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e071      	b.n	8003f3c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2221      	movs	r2, #33	; 0x21
 8003e64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e66:	f7fd ffdd 	bl	8001e24 <HAL_GetTick>
 8003e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e84:	d108      	bne.n	8003e98 <HAL_UART_Transmit+0x68>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e003      	b.n	8003ea0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ea0:	e030      	b.n	8003f04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fc89 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e03c      	b.n	8003f3c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10b      	bne.n	8003ee0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	881a      	ldrh	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed4:	b292      	uxth	r2, r2
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3302      	adds	r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e008      	b.n	8003ef2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1c8      	bne.n	8003ea2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2200      	movs	r2, #0
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fc52 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d004      	beq.n	8003f30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e005      	b.n	8003f3c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	f040 80b6 	bne.w	80040cc <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Receive+0x28>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0ae      	b.n	80040ce <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2222      	movs	r2, #34	; 0x22
 8003f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f86:	f7fd ff4d 	bl	8001e24 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_UART_Receive+0x80>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_UART_Receive+0x76>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb8:	e02d      	b.n	8004016 <HAL_UART_Receive+0xd2>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fc2:	e028      	b.n	8004016 <HAL_UART_Receive+0xd2>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10d      	bne.n	8003fe8 <HAL_UART_Receive+0xa4>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_UART_Receive+0x9a>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	22ff      	movs	r2, #255	; 0xff
 8003fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fdc:	e01b      	b.n	8004016 <HAL_UART_Receive+0xd2>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	227f      	movs	r2, #127	; 0x7f
 8003fe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fe6:	e016      	b.n	8004016 <HAL_UART_Receive+0xd2>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ff0:	d10d      	bne.n	800400e <HAL_UART_Receive+0xca>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Receive+0xc0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	227f      	movs	r2, #127	; 0x7f
 8003ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004002:	e008      	b.n	8004016 <HAL_UART_Receive+0xd2>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	223f      	movs	r2, #63	; 0x3f
 8004008:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800400c:	e003      	b.n	8004016 <HAL_UART_Receive+0xd2>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800401c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d108      	bne.n	800403a <HAL_UART_Receive+0xf6>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	e003      	b.n	8004042 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004042:	e037      	b.n	80040b4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	2200      	movs	r2, #0
 800404c:	2120      	movs	r1, #32
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fbb8 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e033      	b.n	80040ce <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10c      	bne.n	8004086 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004072:	b29a      	uxth	r2, r3
 8004074:	8a7b      	ldrh	r3, [r7, #18]
 8004076:	4013      	ands	r3, r2
 8004078:	b29a      	uxth	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3302      	adds	r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	e00d      	b.n	80040a2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800408c:	b29b      	uxth	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	8a7b      	ldrh	r3, [r7, #18]
 8004092:	b2db      	uxtb	r3, r3
 8004094:	4013      	ands	r3, r2
 8004096:	b2da      	uxtb	r2, r3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1c1      	bne.n	8004044 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4bb4      	ldr	r3, [pc, #720]	; (80043d8 <UART_SetConfig+0x300>)
 8004108:	4013      	ands	r3, r2
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004110:	430b      	orrs	r3, r1
 8004112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4aa9      	ldr	r2, [pc, #676]	; (80043dc <UART_SetConfig+0x304>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	4313      	orrs	r3, r2
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4aa0      	ldr	r2, [pc, #640]	; (80043e0 <UART_SetConfig+0x308>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d126      	bne.n	80041b0 <UART_SetConfig+0xd8>
 8004162:	4ba0      	ldr	r3, [pc, #640]	; (80043e4 <UART_SetConfig+0x30c>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	2b03      	cmp	r3, #3
 800416e:	d81b      	bhi.n	80041a8 <UART_SetConfig+0xd0>
 8004170:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0xa0>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004189 	.word	0x08004189
 800417c:	08004199 	.word	0x08004199
 8004180:	08004191 	.word	0x08004191
 8004184:	080041a1 	.word	0x080041a1
 8004188:	2301      	movs	r3, #1
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e080      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004190:	2302      	movs	r3, #2
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e07c      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004198:	2304      	movs	r3, #4
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e078      	b.n	8004292 <UART_SetConfig+0x1ba>
 80041a0:	2308      	movs	r3, #8
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e074      	b.n	8004292 <UART_SetConfig+0x1ba>
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e070      	b.n	8004292 <UART_SetConfig+0x1ba>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a8c      	ldr	r2, [pc, #560]	; (80043e8 <UART_SetConfig+0x310>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d138      	bne.n	800422c <UART_SetConfig+0x154>
 80041ba:	4b8a      	ldr	r3, [pc, #552]	; (80043e4 <UART_SetConfig+0x30c>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b0c      	cmp	r3, #12
 80041c6:	d82d      	bhi.n	8004224 <UART_SetConfig+0x14c>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <UART_SetConfig+0xf8>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	08004205 	.word	0x08004205
 80041d4:	08004225 	.word	0x08004225
 80041d8:	08004225 	.word	0x08004225
 80041dc:	08004225 	.word	0x08004225
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004225 	.word	0x08004225
 80041e8:	08004225 	.word	0x08004225
 80041ec:	08004225 	.word	0x08004225
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004225 	.word	0x08004225
 80041f8:	08004225 	.word	0x08004225
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800421d 	.word	0x0800421d
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e042      	b.n	8004292 <UART_SetConfig+0x1ba>
 800420c:	2302      	movs	r3, #2
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e03e      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004214:	2304      	movs	r3, #4
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e03a      	b.n	8004292 <UART_SetConfig+0x1ba>
 800421c:	2308      	movs	r3, #8
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e036      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004224:	2310      	movs	r3, #16
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e032      	b.n	8004292 <UART_SetConfig+0x1ba>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6a      	ldr	r2, [pc, #424]	; (80043dc <UART_SetConfig+0x304>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d12a      	bne.n	800428c <UART_SetConfig+0x1b4>
 8004236:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <UART_SetConfig+0x30c>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004244:	d01a      	beq.n	800427c <UART_SetConfig+0x1a4>
 8004246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800424a:	d81b      	bhi.n	8004284 <UART_SetConfig+0x1ac>
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004250:	d00c      	beq.n	800426c <UART_SetConfig+0x194>
 8004252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004256:	d815      	bhi.n	8004284 <UART_SetConfig+0x1ac>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <UART_SetConfig+0x18c>
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d008      	beq.n	8004274 <UART_SetConfig+0x19c>
 8004262:	e00f      	b.n	8004284 <UART_SetConfig+0x1ac>
 8004264:	2300      	movs	r3, #0
 8004266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426a:	e012      	b.n	8004292 <UART_SetConfig+0x1ba>
 800426c:	2302      	movs	r3, #2
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004272:	e00e      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004274:	2304      	movs	r3, #4
 8004276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427a:	e00a      	b.n	8004292 <UART_SetConfig+0x1ba>
 800427c:	2308      	movs	r3, #8
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e006      	b.n	8004292 <UART_SetConfig+0x1ba>
 8004284:	2310      	movs	r3, #16
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e002      	b.n	8004292 <UART_SetConfig+0x1ba>
 800428c:	2310      	movs	r3, #16
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a51      	ldr	r2, [pc, #324]	; (80043dc <UART_SetConfig+0x304>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d17a      	bne.n	8004392 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800429c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d824      	bhi.n	80042ee <UART_SetConfig+0x216>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x1d4>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042ef 	.word	0x080042ef
 80042b4:	080042d9 	.word	0x080042d9
 80042b8:	080042ef 	.word	0x080042ef
 80042bc:	080042df 	.word	0x080042df
 80042c0:	080042ef 	.word	0x080042ef
 80042c4:	080042ef 	.word	0x080042ef
 80042c8:	080042ef 	.word	0x080042ef
 80042cc:	080042e7 	.word	0x080042e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7fe fe60 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80042d4:	61f8      	str	r0, [r7, #28]
        break;
 80042d6:	e010      	b.n	80042fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <UART_SetConfig+0x314>)
 80042da:	61fb      	str	r3, [r7, #28]
        break;
 80042dc:	e00d      	b.n	80042fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042de:	f7fe fdc1 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80042e2:	61f8      	str	r0, [r7, #28]
        break;
 80042e4:	e009      	b.n	80042fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ea:	61fb      	str	r3, [r7, #28]
        break;
 80042ec:	e005      	b.n	80042fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8107 	beq.w	8004510 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	429a      	cmp	r2, r3
 8004310:	d305      	bcc.n	800431e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	429a      	cmp	r2, r3
 800431c:	d903      	bls.n	8004326 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004324:	e0f4      	b.n	8004510 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2200      	movs	r2, #0
 800432a:	461c      	mov	r4, r3
 800432c:	4615      	mov	r5, r2
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	022b      	lsls	r3, r5, #8
 8004338:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800433c:	0222      	lsls	r2, r4, #8
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	6849      	ldr	r1, [r1, #4]
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	2000      	movs	r0, #0
 8004346:	4688      	mov	r8, r1
 8004348:	4681      	mov	r9, r0
 800434a:	eb12 0a08 	adds.w	sl, r2, r8
 800434e:	eb43 0b09 	adc.w	fp, r3, r9
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	603b      	str	r3, [r7, #0]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004360:	4650      	mov	r0, sl
 8004362:	4659      	mov	r1, fp
 8004364:	f7fc fc90 	bl	8000c88 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004376:	d308      	bcc.n	800438a <UART_SetConfig+0x2b2>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800437e:	d204      	bcs.n	800438a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	60da      	str	r2, [r3, #12]
 8004388:	e0c2      	b.n	8004510 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004390:	e0be      	b.n	8004510 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d16a      	bne.n	8004472 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800439c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d834      	bhi.n	800440e <UART_SetConfig+0x336>
 80043a4:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x2d4>)
 80043a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043aa:	bf00      	nop
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043f9 	.word	0x080043f9
 80043b8:	0800440f 	.word	0x0800440f
 80043bc:	080043ff 	.word	0x080043ff
 80043c0:	0800440f 	.word	0x0800440f
 80043c4:	0800440f 	.word	0x0800440f
 80043c8:	0800440f 	.word	0x0800440f
 80043cc:	08004407 	.word	0x08004407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe fde0 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80043d4:	61f8      	str	r0, [r7, #28]
        break;
 80043d6:	e020      	b.n	800441a <UART_SetConfig+0x342>
 80043d8:	efff69f3 	.word	0xefff69f3
 80043dc:	40008000 	.word	0x40008000
 80043e0:	40013800 	.word	0x40013800
 80043e4:	40021000 	.word	0x40021000
 80043e8:	40004400 	.word	0x40004400
 80043ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f0:	f7fe fde6 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 80043f4:	61f8      	str	r0, [r7, #28]
        break;
 80043f6:	e010      	b.n	800441a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <UART_SetConfig+0x454>)
 80043fa:	61fb      	str	r3, [r7, #28]
        break;
 80043fc:	e00d      	b.n	800441a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fe:	f7fe fd31 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8004402:	61f8      	str	r0, [r7, #28]
        break;
 8004404:	e009      	b.n	800441a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440a:	61fb      	str	r3, [r7, #28]
        break;
 800440c:	e005      	b.n	800441a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d077      	beq.n	8004510 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005a      	lsls	r2, r3, #1
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d916      	bls.n	800446a <UART_SetConfig+0x392>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004442:	d212      	bcs.n	800446a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	b29b      	uxth	r3, r3
 8004448:	f023 030f 	bic.w	r3, r3, #15
 800444c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	b29b      	uxth	r3, r3
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	b29a      	uxth	r2, r3
 800445a:	8afb      	ldrh	r3, [r7, #22]
 800445c:	4313      	orrs	r3, r2
 800445e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	8afa      	ldrh	r2, [r7, #22]
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	e052      	b.n	8004510 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004470:	e04e      	b.n	8004510 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004472:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004476:	2b08      	cmp	r3, #8
 8004478:	d827      	bhi.n	80044ca <UART_SetConfig+0x3f2>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <UART_SetConfig+0x3a8>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044cb 	.word	0x080044cb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe fd76 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80044a8:	61f8      	str	r0, [r7, #28]
        break;
 80044aa:	e014      	b.n	80044d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7fe fd88 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 80044b0:	61f8      	str	r0, [r7, #28]
        break;
 80044b2:	e010      	b.n	80044d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <UART_SetConfig+0x454>)
 80044b6:	61fb      	str	r3, [r7, #28]
        break;
 80044b8:	e00d      	b.n	80044d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fcd3 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80044be:	61f8      	str	r0, [r7, #28]
        break;
 80044c0:	e009      	b.n	80044d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c6:	61fb      	str	r3, [r7, #28]
        break;
 80044c8:	e005      	b.n	80044d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044d4:	bf00      	nop
    }

    if (pclk != 0U)
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d019      	beq.n	8004510 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	085a      	lsrs	r2, r3, #1
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	441a      	add	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0f      	cmp	r3, #15
 80044f4:	d909      	bls.n	800450a <UART_SetConfig+0x432>
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fc:	d205      	bcs.n	800450a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e002      	b.n	8004510 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800451c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004520:	4618      	mov	r0, r3
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452a:	bf00      	nop
 800452c:	00f42400 	.word	0x00f42400

08004530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462e:	d10a      	bne.n	8004646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b098      	sub	sp, #96	; 0x60
 8004678:	af02      	add	r7, sp, #8
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004684:	f7fd fbce 	bl	8001e24 <HAL_GetTick>
 8004688:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d12e      	bne.n	80046f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f88c 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d021      	beq.n	80046f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c6:	653b      	str	r3, [r7, #80]	; 0x50
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44
 80046d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e062      	b.n	80047bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d149      	bne.n	8004798 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470c:	2200      	movs	r2, #0
 800470e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f856 	bl	80047c4 <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d03c      	beq.n	8004798 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	623b      	str	r3, [r7, #32]
   return(result);
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	633b      	str	r3, [r7, #48]	; 0x30
 800473e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	64bb      	str	r3, [r7, #72]	; 0x48
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004770:	61fa      	str	r2, [r7, #28]
 8004772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	617b      	str	r3, [r7, #20]
   return(result);
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e011      	b.n	80047bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3758      	adds	r7, #88	; 0x58
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d4:	e049      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d045      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fd fb21 	bl	8001e24 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e048      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d031      	beq.n	800486a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b08      	cmp	r3, #8
 8004812:	d110      	bne.n	8004836 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f838 	bl	8004892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2208      	movs	r2, #8
 8004826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e029      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004844:	d111      	bne.n	800486a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800484e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 f81e 	bl	8004892 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e00f      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4013      	ands	r3, r2
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	429a      	cmp	r2, r3
 8004886:	d0a6      	beq.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004892:	b480      	push	{r7}
 8004894:	b095      	sub	sp, #84	; 0x54
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	643b      	str	r3, [r7, #64]	; 0x40
 80048ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e6      	bne.n	800489a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3308      	adds	r3, #8
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	2b01      	cmp	r3, #1
 8004906:	d118      	bne.n	800493a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	60bb      	str	r3, [r7, #8]
   return(result);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0310 	bic.w	r3, r3, #16
 800491c:	647b      	str	r3, [r7, #68]	; 0x44
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004926:	61bb      	str	r3, [r7, #24]
 8004928:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6979      	ldr	r1, [r7, #20]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	613b      	str	r3, [r7, #16]
   return(result);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e6      	bne.n	8004908 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800494e:	bf00      	nop
 8004950:	3754      	adds	r7, #84	; 0x54
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <__cvt>:
 800495a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800495e:	ec55 4b10 	vmov	r4, r5, d0
 8004962:	2d00      	cmp	r5, #0
 8004964:	460e      	mov	r6, r1
 8004966:	4619      	mov	r1, r3
 8004968:	462b      	mov	r3, r5
 800496a:	bfbb      	ittet	lt
 800496c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004970:	461d      	movlt	r5, r3
 8004972:	2300      	movge	r3, #0
 8004974:	232d      	movlt	r3, #45	; 0x2d
 8004976:	700b      	strb	r3, [r1, #0]
 8004978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800497a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800497e:	4691      	mov	r9, r2
 8004980:	f023 0820 	bic.w	r8, r3, #32
 8004984:	bfbc      	itt	lt
 8004986:	4622      	movlt	r2, r4
 8004988:	4614      	movlt	r4, r2
 800498a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800498e:	d005      	beq.n	800499c <__cvt+0x42>
 8004990:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004994:	d100      	bne.n	8004998 <__cvt+0x3e>
 8004996:	3601      	adds	r6, #1
 8004998:	2102      	movs	r1, #2
 800499a:	e000      	b.n	800499e <__cvt+0x44>
 800499c:	2103      	movs	r1, #3
 800499e:	ab03      	add	r3, sp, #12
 80049a0:	9301      	str	r3, [sp, #4]
 80049a2:	ab02      	add	r3, sp, #8
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	ec45 4b10 	vmov	d0, r4, r5
 80049aa:	4653      	mov	r3, sl
 80049ac:	4632      	mov	r2, r6
 80049ae:	f001 f8c7 	bl	8005b40 <_dtoa_r>
 80049b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049b6:	4607      	mov	r7, r0
 80049b8:	d102      	bne.n	80049c0 <__cvt+0x66>
 80049ba:	f019 0f01 	tst.w	r9, #1
 80049be:	d022      	beq.n	8004a06 <__cvt+0xac>
 80049c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049c4:	eb07 0906 	add.w	r9, r7, r6
 80049c8:	d110      	bne.n	80049ec <__cvt+0x92>
 80049ca:	783b      	ldrb	r3, [r7, #0]
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d10a      	bne.n	80049e6 <__cvt+0x8c>
 80049d0:	2200      	movs	r2, #0
 80049d2:	2300      	movs	r3, #0
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	f7fc f876 	bl	8000ac8 <__aeabi_dcmpeq>
 80049dc:	b918      	cbnz	r0, 80049e6 <__cvt+0x8c>
 80049de:	f1c6 0601 	rsb	r6, r6, #1
 80049e2:	f8ca 6000 	str.w	r6, [sl]
 80049e6:	f8da 3000 	ldr.w	r3, [sl]
 80049ea:	4499      	add	r9, r3
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fc f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80049f8:	b108      	cbz	r0, 80049fe <__cvt+0xa4>
 80049fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80049fe:	2230      	movs	r2, #48	; 0x30
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	454b      	cmp	r3, r9
 8004a04:	d307      	bcc.n	8004a16 <__cvt+0xbc>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a0a:	1bdb      	subs	r3, r3, r7
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	b004      	add	sp, #16
 8004a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a16:	1c59      	adds	r1, r3, #1
 8004a18:	9103      	str	r1, [sp, #12]
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e7f0      	b.n	8004a00 <__cvt+0xa6>

08004a1e <__exponent>:
 8004a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a20:	4603      	mov	r3, r0
 8004a22:	2900      	cmp	r1, #0
 8004a24:	bfb8      	it	lt
 8004a26:	4249      	neglt	r1, r1
 8004a28:	f803 2b02 	strb.w	r2, [r3], #2
 8004a2c:	bfb4      	ite	lt
 8004a2e:	222d      	movlt	r2, #45	; 0x2d
 8004a30:	222b      	movge	r2, #43	; 0x2b
 8004a32:	2909      	cmp	r1, #9
 8004a34:	7042      	strb	r2, [r0, #1]
 8004a36:	dd2a      	ble.n	8004a8e <__exponent+0x70>
 8004a38:	f10d 0207 	add.w	r2, sp, #7
 8004a3c:	4617      	mov	r7, r2
 8004a3e:	260a      	movs	r6, #10
 8004a40:	4694      	mov	ip, r2
 8004a42:	fb91 f5f6 	sdiv	r5, r1, r6
 8004a46:	fb06 1415 	mls	r4, r6, r5, r1
 8004a4a:	3430      	adds	r4, #48	; 0x30
 8004a4c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004a50:	460c      	mov	r4, r1
 8004a52:	2c63      	cmp	r4, #99	; 0x63
 8004a54:	f102 32ff 	add.w	r2, r2, #4294967295
 8004a58:	4629      	mov	r1, r5
 8004a5a:	dcf1      	bgt.n	8004a40 <__exponent+0x22>
 8004a5c:	3130      	adds	r1, #48	; 0x30
 8004a5e:	f1ac 0402 	sub.w	r4, ip, #2
 8004a62:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004a66:	1c41      	adds	r1, r0, #1
 8004a68:	4622      	mov	r2, r4
 8004a6a:	42ba      	cmp	r2, r7
 8004a6c:	d30a      	bcc.n	8004a84 <__exponent+0x66>
 8004a6e:	f10d 0209 	add.w	r2, sp, #9
 8004a72:	eba2 020c 	sub.w	r2, r2, ip
 8004a76:	42bc      	cmp	r4, r7
 8004a78:	bf88      	it	hi
 8004a7a:	2200      	movhi	r2, #0
 8004a7c:	4413      	add	r3, r2
 8004a7e:	1a18      	subs	r0, r3, r0
 8004a80:	b003      	add	sp, #12
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a84:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a88:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a8c:	e7ed      	b.n	8004a6a <__exponent+0x4c>
 8004a8e:	2330      	movs	r3, #48	; 0x30
 8004a90:	3130      	adds	r1, #48	; 0x30
 8004a92:	7083      	strb	r3, [r0, #2]
 8004a94:	70c1      	strb	r1, [r0, #3]
 8004a96:	1d03      	adds	r3, r0, #4
 8004a98:	e7f1      	b.n	8004a7e <__exponent+0x60>
	...

08004a9c <_printf_float>:
 8004a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa0:	ed2d 8b02 	vpush	{d8}
 8004aa4:	b08d      	sub	sp, #52	; 0x34
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004aac:	4616      	mov	r6, r2
 8004aae:	461f      	mov	r7, r3
 8004ab0:	4605      	mov	r5, r0
 8004ab2:	f000 ff3d 	bl	8005930 <_localeconv_r>
 8004ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8004aba:	4650      	mov	r0, sl
 8004abc:	f7fb fbd8 	bl	8000270 <strlen>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8004acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ad0:	3307      	adds	r3, #7
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	f103 0208 	add.w	r2, r3, #8
 8004ada:	f8c8 2000 	str.w	r2, [r8]
 8004ade:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ae6:	9307      	str	r3, [sp, #28]
 8004ae8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004aec:	ee08 0a10 	vmov	s16, r0
 8004af0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004af4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004af8:	4b9e      	ldr	r3, [pc, #632]	; (8004d74 <_printf_float+0x2d8>)
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	f7fc f815 	bl	8000b2c <__aeabi_dcmpun>
 8004b02:	bb88      	cbnz	r0, 8004b68 <_printf_float+0xcc>
 8004b04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b08:	4b9a      	ldr	r3, [pc, #616]	; (8004d74 <_printf_float+0x2d8>)
 8004b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0e:	f7fb ffef 	bl	8000af0 <__aeabi_dcmple>
 8004b12:	bb48      	cbnz	r0, 8004b68 <_printf_float+0xcc>
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fb ffde 	bl	8000adc <__aeabi_dcmplt>
 8004b20:	b110      	cbz	r0, 8004b28 <_printf_float+0x8c>
 8004b22:	232d      	movs	r3, #45	; 0x2d
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	4a93      	ldr	r2, [pc, #588]	; (8004d78 <_printf_float+0x2dc>)
 8004b2a:	4b94      	ldr	r3, [pc, #592]	; (8004d7c <_printf_float+0x2e0>)
 8004b2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b30:	bf94      	ite	ls
 8004b32:	4690      	movls	r8, r2
 8004b34:	4698      	movhi	r8, r3
 8004b36:	2303      	movs	r3, #3
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	9b05      	ldr	r3, [sp, #20]
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	f04f 0900 	mov.w	r9, #0
 8004b46:	9700      	str	r7, [sp, #0]
 8004b48:	4633      	mov	r3, r6
 8004b4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 f9da 	bl	8004f08 <_printf_common>
 8004b54:	3001      	adds	r0, #1
 8004b56:	f040 8090 	bne.w	8004c7a <_printf_float+0x1de>
 8004b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5e:	b00d      	add	sp, #52	; 0x34
 8004b60:	ecbd 8b02 	vpop	{d8}
 8004b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4649      	mov	r1, r9
 8004b70:	f7fb ffdc 	bl	8000b2c <__aeabi_dcmpun>
 8004b74:	b140      	cbz	r0, 8004b88 <_printf_float+0xec>
 8004b76:	464b      	mov	r3, r9
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfbc      	itt	lt
 8004b7c:	232d      	movlt	r3, #45	; 0x2d
 8004b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b82:	4a7f      	ldr	r2, [pc, #508]	; (8004d80 <_printf_float+0x2e4>)
 8004b84:	4b7f      	ldr	r3, [pc, #508]	; (8004d84 <_printf_float+0x2e8>)
 8004b86:	e7d1      	b.n	8004b2c <_printf_float+0x90>
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b8e:	9206      	str	r2, [sp, #24]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	d13f      	bne.n	8004c14 <_printf_float+0x178>
 8004b94:	2306      	movs	r3, #6
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	9b05      	ldr	r3, [sp, #20]
 8004b9a:	6861      	ldr	r1, [r4, #4]
 8004b9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	9303      	str	r3, [sp, #12]
 8004ba4:	ab0a      	add	r3, sp, #40	; 0x28
 8004ba6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004baa:	ab09      	add	r3, sp, #36	; 0x24
 8004bac:	ec49 8b10 	vmov	d0, r8, r9
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f7ff fece 	bl	800495a <__cvt>
 8004bbe:	9b06      	ldr	r3, [sp, #24]
 8004bc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bc2:	2b47      	cmp	r3, #71	; 0x47
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	d108      	bne.n	8004bda <_printf_float+0x13e>
 8004bc8:	1cc8      	adds	r0, r1, #3
 8004bca:	db02      	blt.n	8004bd2 <_printf_float+0x136>
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	dd41      	ble.n	8004c56 <_printf_float+0x1ba>
 8004bd2:	f1ab 0302 	sub.w	r3, fp, #2
 8004bd6:	fa5f fb83 	uxtb.w	fp, r3
 8004bda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bde:	d820      	bhi.n	8004c22 <_printf_float+0x186>
 8004be0:	3901      	subs	r1, #1
 8004be2:	465a      	mov	r2, fp
 8004be4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004be8:	9109      	str	r1, [sp, #36]	; 0x24
 8004bea:	f7ff ff18 	bl	8004a1e <__exponent>
 8004bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bf0:	1813      	adds	r3, r2, r0
 8004bf2:	2a01      	cmp	r2, #1
 8004bf4:	4681      	mov	r9, r0
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	dc02      	bgt.n	8004c00 <_printf_float+0x164>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	07d2      	lsls	r2, r2, #31
 8004bfe:	d501      	bpl.n	8004c04 <_printf_float+0x168>
 8004c00:	3301      	adds	r3, #1
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d09c      	beq.n	8004b46 <_printf_float+0xaa>
 8004c0c:	232d      	movs	r3, #45	; 0x2d
 8004c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c12:	e798      	b.n	8004b46 <_printf_float+0xaa>
 8004c14:	9a06      	ldr	r2, [sp, #24]
 8004c16:	2a47      	cmp	r2, #71	; 0x47
 8004c18:	d1be      	bne.n	8004b98 <_printf_float+0xfc>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1bc      	bne.n	8004b98 <_printf_float+0xfc>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e7b9      	b.n	8004b96 <_printf_float+0xfa>
 8004c22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c26:	d118      	bne.n	8004c5a <_printf_float+0x1be>
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	dd0b      	ble.n	8004c46 <_printf_float+0x1aa>
 8004c2e:	6121      	str	r1, [r4, #16]
 8004c30:	b913      	cbnz	r3, 8004c38 <_printf_float+0x19c>
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	07d0      	lsls	r0, r2, #31
 8004c36:	d502      	bpl.n	8004c3e <_printf_float+0x1a2>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c40:	f04f 0900 	mov.w	r9, #0
 8004c44:	e7de      	b.n	8004c04 <_printf_float+0x168>
 8004c46:	b913      	cbnz	r3, 8004c4e <_printf_float+0x1b2>
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	07d2      	lsls	r2, r2, #31
 8004c4c:	d501      	bpl.n	8004c52 <_printf_float+0x1b6>
 8004c4e:	3302      	adds	r3, #2
 8004c50:	e7f4      	b.n	8004c3c <_printf_float+0x1a0>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e7f2      	b.n	8004c3c <_printf_float+0x1a0>
 8004c56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	db05      	blt.n	8004c6c <_printf_float+0x1d0>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	6121      	str	r1, [r4, #16]
 8004c64:	07d8      	lsls	r0, r3, #31
 8004c66:	d5ea      	bpl.n	8004c3e <_printf_float+0x1a2>
 8004c68:	1c4b      	adds	r3, r1, #1
 8004c6a:	e7e7      	b.n	8004c3c <_printf_float+0x1a0>
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	bfd4      	ite	le
 8004c70:	f1c1 0202 	rsble	r2, r1, #2
 8004c74:	2201      	movgt	r2, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	e7e0      	b.n	8004c3c <_printf_float+0x1a0>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	055a      	lsls	r2, r3, #21
 8004c7e:	d407      	bmi.n	8004c90 <_printf_float+0x1f4>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	4642      	mov	r2, r8
 8004c84:	4631      	mov	r1, r6
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d12c      	bne.n	8004ce8 <_printf_float+0x24c>
 8004c8e:	e764      	b.n	8004b5a <_printf_float+0xbe>
 8004c90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c94:	f240 80e0 	bls.w	8004e58 <_printf_float+0x3bc>
 8004c98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f7fb ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d034      	beq.n	8004d12 <_printf_float+0x276>
 8004ca8:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <_printf_float+0x2ec>)
 8004caa:	2301      	movs	r3, #1
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af51 	beq.w	8004b5a <_printf_float+0xbe>
 8004cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	db02      	blt.n	8004cc6 <_printf_float+0x22a>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	07d8      	lsls	r0, r3, #31
 8004cc4:	d510      	bpl.n	8004ce8 <_printf_float+0x24c>
 8004cc6:	ee18 3a10 	vmov	r3, s16
 8004cca:	4652      	mov	r2, sl
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4628      	mov	r0, r5
 8004cd0:	47b8      	blx	r7
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	f43f af41 	beq.w	8004b5a <_printf_float+0xbe>
 8004cd8:	f04f 0800 	mov.w	r8, #0
 8004cdc:	f104 091a 	add.w	r9, r4, #26
 8004ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	4543      	cmp	r3, r8
 8004ce6:	dc09      	bgt.n	8004cfc <_printf_float+0x260>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	079b      	lsls	r3, r3, #30
 8004cec:	f100 8107 	bmi.w	8004efe <_printf_float+0x462>
 8004cf0:	68e0      	ldr	r0, [r4, #12]
 8004cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cf4:	4298      	cmp	r0, r3
 8004cf6:	bfb8      	it	lt
 8004cf8:	4618      	movlt	r0, r3
 8004cfa:	e730      	b.n	8004b5e <_printf_float+0xc2>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	464a      	mov	r2, r9
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f af27 	beq.w	8004b5a <_printf_float+0xbe>
 8004d0c:	f108 0801 	add.w	r8, r8, #1
 8004d10:	e7e6      	b.n	8004ce0 <_printf_float+0x244>
 8004d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dc39      	bgt.n	8004d8c <_printf_float+0x2f0>
 8004d18:	4a1b      	ldr	r2, [pc, #108]	; (8004d88 <_printf_float+0x2ec>)
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f af19 	beq.w	8004b5a <_printf_float+0xbe>
 8004d28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d102      	bne.n	8004d36 <_printf_float+0x29a>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	07d9      	lsls	r1, r3, #31
 8004d34:	d5d8      	bpl.n	8004ce8 <_printf_float+0x24c>
 8004d36:	ee18 3a10 	vmov	r3, s16
 8004d3a:	4652      	mov	r2, sl
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f af09 	beq.w	8004b5a <_printf_float+0xbe>
 8004d48:	f04f 0900 	mov.w	r9, #0
 8004d4c:	f104 0a1a 	add.w	sl, r4, #26
 8004d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d52:	425b      	negs	r3, r3
 8004d54:	454b      	cmp	r3, r9
 8004d56:	dc01      	bgt.n	8004d5c <_printf_float+0x2c0>
 8004d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5a:	e792      	b.n	8004c82 <_printf_float+0x1e6>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4652      	mov	r2, sl
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f aef7 	beq.w	8004b5a <_printf_float+0xbe>
 8004d6c:	f109 0901 	add.w	r9, r9, #1
 8004d70:	e7ee      	b.n	8004d50 <_printf_float+0x2b4>
 8004d72:	bf00      	nop
 8004d74:	7fefffff 	.word	0x7fefffff
 8004d78:	0800a69c 	.word	0x0800a69c
 8004d7c:	0800a6a0 	.word	0x0800a6a0
 8004d80:	0800a6a4 	.word	0x0800a6a4
 8004d84:	0800a6a8 	.word	0x0800a6a8
 8004d88:	0800aa38 	.word	0x0800aa38
 8004d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d90:	429a      	cmp	r2, r3
 8004d92:	bfa8      	it	ge
 8004d94:	461a      	movge	r2, r3
 8004d96:	2a00      	cmp	r2, #0
 8004d98:	4691      	mov	r9, r2
 8004d9a:	dc37      	bgt.n	8004e0c <_printf_float+0x370>
 8004d9c:	f04f 0b00 	mov.w	fp, #0
 8004da0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004da4:	f104 021a 	add.w	r2, r4, #26
 8004da8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	eba3 0309 	sub.w	r3, r3, r9
 8004db0:	455b      	cmp	r3, fp
 8004db2:	dc33      	bgt.n	8004e1c <_printf_float+0x380>
 8004db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004db8:	429a      	cmp	r2, r3
 8004dba:	db3b      	blt.n	8004e34 <_printf_float+0x398>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	07da      	lsls	r2, r3, #31
 8004dc0:	d438      	bmi.n	8004e34 <_printf_float+0x398>
 8004dc2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004dc6:	eba2 0903 	sub.w	r9, r2, r3
 8004dca:	9b05      	ldr	r3, [sp, #20]
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	4591      	cmp	r9, r2
 8004dd0:	bfa8      	it	ge
 8004dd2:	4691      	movge	r9, r2
 8004dd4:	f1b9 0f00 	cmp.w	r9, #0
 8004dd8:	dc35      	bgt.n	8004e46 <_printf_float+0x3aa>
 8004dda:	f04f 0800 	mov.w	r8, #0
 8004dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de2:	f104 0a1a 	add.w	sl, r4, #26
 8004de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dea:	1a9b      	subs	r3, r3, r2
 8004dec:	eba3 0309 	sub.w	r3, r3, r9
 8004df0:	4543      	cmp	r3, r8
 8004df2:	f77f af79 	ble.w	8004ce8 <_printf_float+0x24c>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f aeaa 	beq.w	8004b5a <_printf_float+0xbe>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	e7ec      	b.n	8004de6 <_printf_float+0x34a>
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4642      	mov	r2, r8
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	d1c0      	bne.n	8004d9c <_printf_float+0x300>
 8004e1a:	e69e      	b.n	8004b5a <_printf_float+0xbe>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	9205      	str	r2, [sp, #20]
 8004e24:	47b8      	blx	r7
 8004e26:	3001      	adds	r0, #1
 8004e28:	f43f ae97 	beq.w	8004b5a <_printf_float+0xbe>
 8004e2c:	9a05      	ldr	r2, [sp, #20]
 8004e2e:	f10b 0b01 	add.w	fp, fp, #1
 8004e32:	e7b9      	b.n	8004da8 <_printf_float+0x30c>
 8004e34:	ee18 3a10 	vmov	r3, s16
 8004e38:	4652      	mov	r2, sl
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	d1be      	bne.n	8004dc2 <_printf_float+0x326>
 8004e44:	e689      	b.n	8004b5a <_printf_float+0xbe>
 8004e46:	9a05      	ldr	r2, [sp, #20]
 8004e48:	464b      	mov	r3, r9
 8004e4a:	4442      	add	r2, r8
 8004e4c:	4631      	mov	r1, r6
 8004e4e:	4628      	mov	r0, r5
 8004e50:	47b8      	blx	r7
 8004e52:	3001      	adds	r0, #1
 8004e54:	d1c1      	bne.n	8004dda <_printf_float+0x33e>
 8004e56:	e680      	b.n	8004b5a <_printf_float+0xbe>
 8004e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e5a:	2a01      	cmp	r2, #1
 8004e5c:	dc01      	bgt.n	8004e62 <_printf_float+0x3c6>
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d53a      	bpl.n	8004ed8 <_printf_float+0x43c>
 8004e62:	2301      	movs	r3, #1
 8004e64:	4642      	mov	r2, r8
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f43f ae74 	beq.w	8004b5a <_printf_float+0xbe>
 8004e72:	ee18 3a10 	vmov	r3, s16
 8004e76:	4652      	mov	r2, sl
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b8      	blx	r7
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f43f ae6b 	beq.w	8004b5a <_printf_float+0xbe>
 8004e84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004e90:	f7fb fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e94:	b9d8      	cbnz	r0, 8004ece <_printf_float+0x432>
 8004e96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e9a:	f108 0201 	add.w	r2, r8, #1
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b8      	blx	r7
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d10e      	bne.n	8004ec6 <_printf_float+0x42a>
 8004ea8:	e657      	b.n	8004b5a <_printf_float+0xbe>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4652      	mov	r2, sl
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	f43f ae50 	beq.w	8004b5a <_printf_float+0xbe>
 8004eba:	f108 0801 	add.w	r8, r8, #1
 8004ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4543      	cmp	r3, r8
 8004ec4:	dcf1      	bgt.n	8004eaa <_printf_float+0x40e>
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ecc:	e6da      	b.n	8004c84 <_printf_float+0x1e8>
 8004ece:	f04f 0800 	mov.w	r8, #0
 8004ed2:	f104 0a1a 	add.w	sl, r4, #26
 8004ed6:	e7f2      	b.n	8004ebe <_printf_float+0x422>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	4642      	mov	r2, r8
 8004edc:	e7df      	b.n	8004e9e <_printf_float+0x402>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	464a      	mov	r2, r9
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f ae36 	beq.w	8004b5a <_printf_float+0xbe>
 8004eee:	f108 0801 	add.w	r8, r8, #1
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ef6:	1a5b      	subs	r3, r3, r1
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	dcf0      	bgt.n	8004ede <_printf_float+0x442>
 8004efc:	e6f8      	b.n	8004cf0 <_printf_float+0x254>
 8004efe:	f04f 0800 	mov.w	r8, #0
 8004f02:	f104 0919 	add.w	r9, r4, #25
 8004f06:	e7f4      	b.n	8004ef2 <_printf_float+0x456>

08004f08 <_printf_common>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	4616      	mov	r6, r2
 8004f0e:	4699      	mov	r9, r3
 8004f10:	688a      	ldr	r2, [r1, #8]
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bfb8      	it	lt
 8004f1c:	4613      	movlt	r3, r2
 8004f1e:	6033      	str	r3, [r6, #0]
 8004f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f24:	4607      	mov	r7, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	b10a      	cbz	r2, 8004f2e <_printf_common+0x26>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	6823      	ldr	r3, [r4, #0]
 8004f30:	0699      	lsls	r1, r3, #26
 8004f32:	bf42      	ittt	mi
 8004f34:	6833      	ldrmi	r3, [r6, #0]
 8004f36:	3302      	addmi	r3, #2
 8004f38:	6033      	strmi	r3, [r6, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	f015 0506 	ands.w	r5, r5, #6
 8004f40:	d106      	bne.n	8004f50 <_printf_common+0x48>
 8004f42:	f104 0a19 	add.w	sl, r4, #25
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	6832      	ldr	r2, [r6, #0]
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	42ab      	cmp	r3, r5
 8004f4e:	dc26      	bgt.n	8004f9e <_printf_common+0x96>
 8004f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f54:	1e13      	subs	r3, r2, #0
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	bf18      	it	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	0692      	lsls	r2, r2, #26
 8004f5e:	d42b      	bmi.n	8004fb8 <_printf_common+0xb0>
 8004f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f64:	4649      	mov	r1, r9
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c0      	blx	r8
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d01e      	beq.n	8004fac <_printf_common+0xa4>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	f003 0306 	and.w	r3, r3, #6
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	bf02      	ittt	eq
 8004f7a:	68e5      	ldreq	r5, [r4, #12]
 8004f7c:	6833      	ldreq	r3, [r6, #0]
 8004f7e:	1aed      	subeq	r5, r5, r3
 8004f80:	68a3      	ldr	r3, [r4, #8]
 8004f82:	bf0c      	ite	eq
 8004f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f88:	2500      	movne	r5, #0
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bfc4      	itt	gt
 8004f8e:	1a9b      	subgt	r3, r3, r2
 8004f90:	18ed      	addgt	r5, r5, r3
 8004f92:	2600      	movs	r6, #0
 8004f94:	341a      	adds	r4, #26
 8004f96:	42b5      	cmp	r5, r6
 8004f98:	d11a      	bne.n	8004fd0 <_printf_common+0xc8>
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	e008      	b.n	8004fb0 <_printf_common+0xa8>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	4652      	mov	r2, sl
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	47c0      	blx	r8
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d103      	bne.n	8004fb4 <_printf_common+0xac>
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	e7c6      	b.n	8004f46 <_printf_common+0x3e>
 8004fb8:	18e1      	adds	r1, r4, r3
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	2030      	movs	r0, #48	; 0x30
 8004fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fc2:	4422      	add	r2, r4
 8004fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fcc:	3302      	adds	r3, #2
 8004fce:	e7c7      	b.n	8004f60 <_printf_common+0x58>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c0      	blx	r8
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d0e6      	beq.n	8004fac <_printf_common+0xa4>
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7d9      	b.n	8004f96 <_printf_common+0x8e>
	...

08004fe4 <_printf_i>:
 8004fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	7e0f      	ldrb	r7, [r1, #24]
 8004fea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fec:	2f78      	cmp	r7, #120	; 0x78
 8004fee:	4691      	mov	r9, r2
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	469a      	mov	sl, r3
 8004ff6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ffa:	d807      	bhi.n	800500c <_printf_i+0x28>
 8004ffc:	2f62      	cmp	r7, #98	; 0x62
 8004ffe:	d80a      	bhi.n	8005016 <_printf_i+0x32>
 8005000:	2f00      	cmp	r7, #0
 8005002:	f000 80d4 	beq.w	80051ae <_printf_i+0x1ca>
 8005006:	2f58      	cmp	r7, #88	; 0x58
 8005008:	f000 80c0 	beq.w	800518c <_printf_i+0x1a8>
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005014:	e03a      	b.n	800508c <_printf_i+0xa8>
 8005016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800501a:	2b15      	cmp	r3, #21
 800501c:	d8f6      	bhi.n	800500c <_printf_i+0x28>
 800501e:	a101      	add	r1, pc, #4	; (adr r1, 8005024 <_printf_i+0x40>)
 8005020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005091 	.word	0x08005091
 800502c:	0800500d 	.word	0x0800500d
 8005030:	0800500d 	.word	0x0800500d
 8005034:	0800500d 	.word	0x0800500d
 8005038:	0800500d 	.word	0x0800500d
 800503c:	08005091 	.word	0x08005091
 8005040:	0800500d 	.word	0x0800500d
 8005044:	0800500d 	.word	0x0800500d
 8005048:	0800500d 	.word	0x0800500d
 800504c:	0800500d 	.word	0x0800500d
 8005050:	08005195 	.word	0x08005195
 8005054:	080050bd 	.word	0x080050bd
 8005058:	0800514f 	.word	0x0800514f
 800505c:	0800500d 	.word	0x0800500d
 8005060:	0800500d 	.word	0x0800500d
 8005064:	080051b7 	.word	0x080051b7
 8005068:	0800500d 	.word	0x0800500d
 800506c:	080050bd 	.word	0x080050bd
 8005070:	0800500d 	.word	0x0800500d
 8005074:	0800500d 	.word	0x0800500d
 8005078:	08005157 	.word	0x08005157
 800507c:	682b      	ldr	r3, [r5, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	602a      	str	r2, [r5, #0]
 8005084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800508c:	2301      	movs	r3, #1
 800508e:	e09f      	b.n	80051d0 <_printf_i+0x1ec>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	682b      	ldr	r3, [r5, #0]
 8005094:	0607      	lsls	r7, r0, #24
 8005096:	f103 0104 	add.w	r1, r3, #4
 800509a:	6029      	str	r1, [r5, #0]
 800509c:	d501      	bpl.n	80050a2 <_printf_i+0xbe>
 800509e:	681e      	ldr	r6, [r3, #0]
 80050a0:	e003      	b.n	80050aa <_printf_i+0xc6>
 80050a2:	0646      	lsls	r6, r0, #25
 80050a4:	d5fb      	bpl.n	800509e <_printf_i+0xba>
 80050a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80050aa:	2e00      	cmp	r6, #0
 80050ac:	da03      	bge.n	80050b6 <_printf_i+0xd2>
 80050ae:	232d      	movs	r3, #45	; 0x2d
 80050b0:	4276      	negs	r6, r6
 80050b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b6:	485a      	ldr	r0, [pc, #360]	; (8005220 <_printf_i+0x23c>)
 80050b8:	230a      	movs	r3, #10
 80050ba:	e012      	b.n	80050e2 <_printf_i+0xfe>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	6029      	str	r1, [r5, #0]
 80050c4:	0605      	lsls	r5, r0, #24
 80050c6:	d501      	bpl.n	80050cc <_printf_i+0xe8>
 80050c8:	681e      	ldr	r6, [r3, #0]
 80050ca:	e002      	b.n	80050d2 <_printf_i+0xee>
 80050cc:	0641      	lsls	r1, r0, #25
 80050ce:	d5fb      	bpl.n	80050c8 <_printf_i+0xe4>
 80050d0:	881e      	ldrh	r6, [r3, #0]
 80050d2:	4853      	ldr	r0, [pc, #332]	; (8005220 <_printf_i+0x23c>)
 80050d4:	2f6f      	cmp	r7, #111	; 0x6f
 80050d6:	bf0c      	ite	eq
 80050d8:	2308      	moveq	r3, #8
 80050da:	230a      	movne	r3, #10
 80050dc:	2100      	movs	r1, #0
 80050de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050e2:	6865      	ldr	r5, [r4, #4]
 80050e4:	60a5      	str	r5, [r4, #8]
 80050e6:	2d00      	cmp	r5, #0
 80050e8:	bfa2      	ittt	ge
 80050ea:	6821      	ldrge	r1, [r4, #0]
 80050ec:	f021 0104 	bicge.w	r1, r1, #4
 80050f0:	6021      	strge	r1, [r4, #0]
 80050f2:	b90e      	cbnz	r6, 80050f8 <_printf_i+0x114>
 80050f4:	2d00      	cmp	r5, #0
 80050f6:	d04b      	beq.n	8005190 <_printf_i+0x1ac>
 80050f8:	4615      	mov	r5, r2
 80050fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80050fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005102:	5dc7      	ldrb	r7, [r0, r7]
 8005104:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005108:	4637      	mov	r7, r6
 800510a:	42bb      	cmp	r3, r7
 800510c:	460e      	mov	r6, r1
 800510e:	d9f4      	bls.n	80050fa <_printf_i+0x116>
 8005110:	2b08      	cmp	r3, #8
 8005112:	d10b      	bne.n	800512c <_printf_i+0x148>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	07de      	lsls	r6, r3, #31
 8005118:	d508      	bpl.n	800512c <_printf_i+0x148>
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	6861      	ldr	r1, [r4, #4]
 800511e:	4299      	cmp	r1, r3
 8005120:	bfde      	ittt	le
 8005122:	2330      	movle	r3, #48	; 0x30
 8005124:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005128:	f105 35ff 	addle.w	r5, r5, #4294967295
 800512c:	1b52      	subs	r2, r2, r5
 800512e:	6122      	str	r2, [r4, #16]
 8005130:	f8cd a000 	str.w	sl, [sp]
 8005134:	464b      	mov	r3, r9
 8005136:	aa03      	add	r2, sp, #12
 8005138:	4621      	mov	r1, r4
 800513a:	4640      	mov	r0, r8
 800513c:	f7ff fee4 	bl	8004f08 <_printf_common>
 8005140:	3001      	adds	r0, #1
 8005142:	d14a      	bne.n	80051da <_printf_i+0x1f6>
 8005144:	f04f 30ff 	mov.w	r0, #4294967295
 8005148:	b004      	add	sp, #16
 800514a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	f043 0320 	orr.w	r3, r3, #32
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	4833      	ldr	r0, [pc, #204]	; (8005224 <_printf_i+0x240>)
 8005158:	2778      	movs	r7, #120	; 0x78
 800515a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	6829      	ldr	r1, [r5, #0]
 8005162:	061f      	lsls	r7, r3, #24
 8005164:	f851 6b04 	ldr.w	r6, [r1], #4
 8005168:	d402      	bmi.n	8005170 <_printf_i+0x18c>
 800516a:	065f      	lsls	r7, r3, #25
 800516c:	bf48      	it	mi
 800516e:	b2b6      	uxthmi	r6, r6
 8005170:	07df      	lsls	r7, r3, #31
 8005172:	bf48      	it	mi
 8005174:	f043 0320 	orrmi.w	r3, r3, #32
 8005178:	6029      	str	r1, [r5, #0]
 800517a:	bf48      	it	mi
 800517c:	6023      	strmi	r3, [r4, #0]
 800517e:	b91e      	cbnz	r6, 8005188 <_printf_i+0x1a4>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	f023 0320 	bic.w	r3, r3, #32
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	2310      	movs	r3, #16
 800518a:	e7a7      	b.n	80050dc <_printf_i+0xf8>
 800518c:	4824      	ldr	r0, [pc, #144]	; (8005220 <_printf_i+0x23c>)
 800518e:	e7e4      	b.n	800515a <_printf_i+0x176>
 8005190:	4615      	mov	r5, r2
 8005192:	e7bd      	b.n	8005110 <_printf_i+0x12c>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	6826      	ldr	r6, [r4, #0]
 8005198:	6961      	ldr	r1, [r4, #20]
 800519a:	1d18      	adds	r0, r3, #4
 800519c:	6028      	str	r0, [r5, #0]
 800519e:	0635      	lsls	r5, r6, #24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	d501      	bpl.n	80051a8 <_printf_i+0x1c4>
 80051a4:	6019      	str	r1, [r3, #0]
 80051a6:	e002      	b.n	80051ae <_printf_i+0x1ca>
 80051a8:	0670      	lsls	r0, r6, #25
 80051aa:	d5fb      	bpl.n	80051a4 <_printf_i+0x1c0>
 80051ac:	8019      	strh	r1, [r3, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	4615      	mov	r5, r2
 80051b4:	e7bc      	b.n	8005130 <_printf_i+0x14c>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	602a      	str	r2, [r5, #0]
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	2100      	movs	r1, #0
 80051c2:	4628      	mov	r0, r5
 80051c4:	f7fb f804 	bl	80001d0 <memchr>
 80051c8:	b108      	cbz	r0, 80051ce <_printf_i+0x1ea>
 80051ca:	1b40      	subs	r0, r0, r5
 80051cc:	6060      	str	r0, [r4, #4]
 80051ce:	6863      	ldr	r3, [r4, #4]
 80051d0:	6123      	str	r3, [r4, #16]
 80051d2:	2300      	movs	r3, #0
 80051d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d8:	e7aa      	b.n	8005130 <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	462a      	mov	r2, r5
 80051de:	4649      	mov	r1, r9
 80051e0:	4640      	mov	r0, r8
 80051e2:	47d0      	blx	sl
 80051e4:	3001      	adds	r0, #1
 80051e6:	d0ad      	beq.n	8005144 <_printf_i+0x160>
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	079b      	lsls	r3, r3, #30
 80051ec:	d413      	bmi.n	8005216 <_printf_i+0x232>
 80051ee:	68e0      	ldr	r0, [r4, #12]
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	4298      	cmp	r0, r3
 80051f4:	bfb8      	it	lt
 80051f6:	4618      	movlt	r0, r3
 80051f8:	e7a6      	b.n	8005148 <_printf_i+0x164>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4632      	mov	r2, r6
 80051fe:	4649      	mov	r1, r9
 8005200:	4640      	mov	r0, r8
 8005202:	47d0      	blx	sl
 8005204:	3001      	adds	r0, #1
 8005206:	d09d      	beq.n	8005144 <_printf_i+0x160>
 8005208:	3501      	adds	r5, #1
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	9903      	ldr	r1, [sp, #12]
 800520e:	1a5b      	subs	r3, r3, r1
 8005210:	42ab      	cmp	r3, r5
 8005212:	dcf2      	bgt.n	80051fa <_printf_i+0x216>
 8005214:	e7eb      	b.n	80051ee <_printf_i+0x20a>
 8005216:	2500      	movs	r5, #0
 8005218:	f104 0619 	add.w	r6, r4, #25
 800521c:	e7f5      	b.n	800520a <_printf_i+0x226>
 800521e:	bf00      	nop
 8005220:	0800a6ac 	.word	0x0800a6ac
 8005224:	0800a6bd 	.word	0x0800a6bd

08005228 <_scanf_float>:
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	b087      	sub	sp, #28
 800522e:	4617      	mov	r7, r2
 8005230:	9303      	str	r3, [sp, #12]
 8005232:	688b      	ldr	r3, [r1, #8]
 8005234:	1e5a      	subs	r2, r3, #1
 8005236:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800523a:	bf83      	ittte	hi
 800523c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005240:	195b      	addhi	r3, r3, r5
 8005242:	9302      	strhi	r3, [sp, #8]
 8005244:	2300      	movls	r3, #0
 8005246:	bf86      	itte	hi
 8005248:	f240 135d 	movwhi	r3, #349	; 0x15d
 800524c:	608b      	strhi	r3, [r1, #8]
 800524e:	9302      	strls	r3, [sp, #8]
 8005250:	680b      	ldr	r3, [r1, #0]
 8005252:	468b      	mov	fp, r1
 8005254:	2500      	movs	r5, #0
 8005256:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800525a:	f84b 3b1c 	str.w	r3, [fp], #28
 800525e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005262:	4680      	mov	r8, r0
 8005264:	460c      	mov	r4, r1
 8005266:	465e      	mov	r6, fp
 8005268:	46aa      	mov	sl, r5
 800526a:	46a9      	mov	r9, r5
 800526c:	9501      	str	r5, [sp, #4]
 800526e:	68a2      	ldr	r2, [r4, #8]
 8005270:	b152      	cbz	r2, 8005288 <_scanf_float+0x60>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b4e      	cmp	r3, #78	; 0x4e
 8005278:	d864      	bhi.n	8005344 <_scanf_float+0x11c>
 800527a:	2b40      	cmp	r3, #64	; 0x40
 800527c:	d83c      	bhi.n	80052f8 <_scanf_float+0xd0>
 800527e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005282:	b2c8      	uxtb	r0, r1
 8005284:	280e      	cmp	r0, #14
 8005286:	d93a      	bls.n	80052fe <_scanf_float+0xd6>
 8005288:	f1b9 0f00 	cmp.w	r9, #0
 800528c:	d003      	beq.n	8005296 <_scanf_float+0x6e>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800529a:	f1ba 0f01 	cmp.w	sl, #1
 800529e:	f200 8113 	bhi.w	80054c8 <_scanf_float+0x2a0>
 80052a2:	455e      	cmp	r6, fp
 80052a4:	f200 8105 	bhi.w	80054b2 <_scanf_float+0x28a>
 80052a8:	2501      	movs	r5, #1
 80052aa:	4628      	mov	r0, r5
 80052ac:	b007      	add	sp, #28
 80052ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80052b6:	2a0d      	cmp	r2, #13
 80052b8:	d8e6      	bhi.n	8005288 <_scanf_float+0x60>
 80052ba:	a101      	add	r1, pc, #4	; (adr r1, 80052c0 <_scanf_float+0x98>)
 80052bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052c0:	080053ff 	.word	0x080053ff
 80052c4:	08005289 	.word	0x08005289
 80052c8:	08005289 	.word	0x08005289
 80052cc:	08005289 	.word	0x08005289
 80052d0:	0800545f 	.word	0x0800545f
 80052d4:	08005437 	.word	0x08005437
 80052d8:	08005289 	.word	0x08005289
 80052dc:	08005289 	.word	0x08005289
 80052e0:	0800540d 	.word	0x0800540d
 80052e4:	08005289 	.word	0x08005289
 80052e8:	08005289 	.word	0x08005289
 80052ec:	08005289 	.word	0x08005289
 80052f0:	08005289 	.word	0x08005289
 80052f4:	080053c5 	.word	0x080053c5
 80052f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80052fc:	e7db      	b.n	80052b6 <_scanf_float+0x8e>
 80052fe:	290e      	cmp	r1, #14
 8005300:	d8c2      	bhi.n	8005288 <_scanf_float+0x60>
 8005302:	a001      	add	r0, pc, #4	; (adr r0, 8005308 <_scanf_float+0xe0>)
 8005304:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005308:	080053b7 	.word	0x080053b7
 800530c:	08005289 	.word	0x08005289
 8005310:	080053b7 	.word	0x080053b7
 8005314:	0800544b 	.word	0x0800544b
 8005318:	08005289 	.word	0x08005289
 800531c:	08005365 	.word	0x08005365
 8005320:	080053a1 	.word	0x080053a1
 8005324:	080053a1 	.word	0x080053a1
 8005328:	080053a1 	.word	0x080053a1
 800532c:	080053a1 	.word	0x080053a1
 8005330:	080053a1 	.word	0x080053a1
 8005334:	080053a1 	.word	0x080053a1
 8005338:	080053a1 	.word	0x080053a1
 800533c:	080053a1 	.word	0x080053a1
 8005340:	080053a1 	.word	0x080053a1
 8005344:	2b6e      	cmp	r3, #110	; 0x6e
 8005346:	d809      	bhi.n	800535c <_scanf_float+0x134>
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d8b2      	bhi.n	80052b2 <_scanf_float+0x8a>
 800534c:	2b54      	cmp	r3, #84	; 0x54
 800534e:	d077      	beq.n	8005440 <_scanf_float+0x218>
 8005350:	2b59      	cmp	r3, #89	; 0x59
 8005352:	d199      	bne.n	8005288 <_scanf_float+0x60>
 8005354:	2d07      	cmp	r5, #7
 8005356:	d197      	bne.n	8005288 <_scanf_float+0x60>
 8005358:	2508      	movs	r5, #8
 800535a:	e029      	b.n	80053b0 <_scanf_float+0x188>
 800535c:	2b74      	cmp	r3, #116	; 0x74
 800535e:	d06f      	beq.n	8005440 <_scanf_float+0x218>
 8005360:	2b79      	cmp	r3, #121	; 0x79
 8005362:	e7f6      	b.n	8005352 <_scanf_float+0x12a>
 8005364:	6821      	ldr	r1, [r4, #0]
 8005366:	05c8      	lsls	r0, r1, #23
 8005368:	d51a      	bpl.n	80053a0 <_scanf_float+0x178>
 800536a:	9b02      	ldr	r3, [sp, #8]
 800536c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005370:	6021      	str	r1, [r4, #0]
 8005372:	f109 0901 	add.w	r9, r9, #1
 8005376:	b11b      	cbz	r3, 8005380 <_scanf_float+0x158>
 8005378:	3b01      	subs	r3, #1
 800537a:	3201      	adds	r2, #1
 800537c:	9302      	str	r3, [sp, #8]
 800537e:	60a2      	str	r2, [r4, #8]
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	3b01      	subs	r3, #1
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	6923      	ldr	r3, [r4, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	f340 8084 	ble.w	80054a0 <_scanf_float+0x278>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	e766      	b.n	800526e <_scanf_float+0x46>
 80053a0:	eb1a 0f05 	cmn.w	sl, r5
 80053a4:	f47f af70 	bne.w	8005288 <_scanf_float+0x60>
 80053a8:	6822      	ldr	r2, [r4, #0]
 80053aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	f806 3b01 	strb.w	r3, [r6], #1
 80053b4:	e7e4      	b.n	8005380 <_scanf_float+0x158>
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	0610      	lsls	r0, r2, #24
 80053ba:	f57f af65 	bpl.w	8005288 <_scanf_float+0x60>
 80053be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c2:	e7f4      	b.n	80053ae <_scanf_float+0x186>
 80053c4:	f1ba 0f00 	cmp.w	sl, #0
 80053c8:	d10e      	bne.n	80053e8 <_scanf_float+0x1c0>
 80053ca:	f1b9 0f00 	cmp.w	r9, #0
 80053ce:	d10e      	bne.n	80053ee <_scanf_float+0x1c6>
 80053d0:	6822      	ldr	r2, [r4, #0]
 80053d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053da:	d108      	bne.n	80053ee <_scanf_float+0x1c6>
 80053dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053e0:	6022      	str	r2, [r4, #0]
 80053e2:	f04f 0a01 	mov.w	sl, #1
 80053e6:	e7e3      	b.n	80053b0 <_scanf_float+0x188>
 80053e8:	f1ba 0f02 	cmp.w	sl, #2
 80053ec:	d055      	beq.n	800549a <_scanf_float+0x272>
 80053ee:	2d01      	cmp	r5, #1
 80053f0:	d002      	beq.n	80053f8 <_scanf_float+0x1d0>
 80053f2:	2d04      	cmp	r5, #4
 80053f4:	f47f af48 	bne.w	8005288 <_scanf_float+0x60>
 80053f8:	3501      	adds	r5, #1
 80053fa:	b2ed      	uxtb	r5, r5
 80053fc:	e7d8      	b.n	80053b0 <_scanf_float+0x188>
 80053fe:	f1ba 0f01 	cmp.w	sl, #1
 8005402:	f47f af41 	bne.w	8005288 <_scanf_float+0x60>
 8005406:	f04f 0a02 	mov.w	sl, #2
 800540a:	e7d1      	b.n	80053b0 <_scanf_float+0x188>
 800540c:	b97d      	cbnz	r5, 800542e <_scanf_float+0x206>
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	f47f af3c 	bne.w	800528e <_scanf_float+0x66>
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800541c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005420:	f47f af39 	bne.w	8005296 <_scanf_float+0x6e>
 8005424:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005428:	6022      	str	r2, [r4, #0]
 800542a:	2501      	movs	r5, #1
 800542c:	e7c0      	b.n	80053b0 <_scanf_float+0x188>
 800542e:	2d03      	cmp	r5, #3
 8005430:	d0e2      	beq.n	80053f8 <_scanf_float+0x1d0>
 8005432:	2d05      	cmp	r5, #5
 8005434:	e7de      	b.n	80053f4 <_scanf_float+0x1cc>
 8005436:	2d02      	cmp	r5, #2
 8005438:	f47f af26 	bne.w	8005288 <_scanf_float+0x60>
 800543c:	2503      	movs	r5, #3
 800543e:	e7b7      	b.n	80053b0 <_scanf_float+0x188>
 8005440:	2d06      	cmp	r5, #6
 8005442:	f47f af21 	bne.w	8005288 <_scanf_float+0x60>
 8005446:	2507      	movs	r5, #7
 8005448:	e7b2      	b.n	80053b0 <_scanf_float+0x188>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	0591      	lsls	r1, r2, #22
 800544e:	f57f af1b 	bpl.w	8005288 <_scanf_float+0x60>
 8005452:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005456:	6022      	str	r2, [r4, #0]
 8005458:	f8cd 9004 	str.w	r9, [sp, #4]
 800545c:	e7a8      	b.n	80053b0 <_scanf_float+0x188>
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005464:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005468:	d006      	beq.n	8005478 <_scanf_float+0x250>
 800546a:	0550      	lsls	r0, r2, #21
 800546c:	f57f af0c 	bpl.w	8005288 <_scanf_float+0x60>
 8005470:	f1b9 0f00 	cmp.w	r9, #0
 8005474:	f43f af0f 	beq.w	8005296 <_scanf_float+0x6e>
 8005478:	0591      	lsls	r1, r2, #22
 800547a:	bf58      	it	pl
 800547c:	9901      	ldrpl	r1, [sp, #4]
 800547e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005482:	bf58      	it	pl
 8005484:	eba9 0101 	subpl.w	r1, r9, r1
 8005488:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800548c:	bf58      	it	pl
 800548e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	f04f 0900 	mov.w	r9, #0
 8005498:	e78a      	b.n	80053b0 <_scanf_float+0x188>
 800549a:	f04f 0a03 	mov.w	sl, #3
 800549e:	e787      	b.n	80053b0 <_scanf_float+0x188>
 80054a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054a4:	4639      	mov	r1, r7
 80054a6:	4640      	mov	r0, r8
 80054a8:	4798      	blx	r3
 80054aa:	2800      	cmp	r0, #0
 80054ac:	f43f aedf 	beq.w	800526e <_scanf_float+0x46>
 80054b0:	e6ea      	b.n	8005288 <_scanf_float+0x60>
 80054b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ba:	463a      	mov	r2, r7
 80054bc:	4640      	mov	r0, r8
 80054be:	4798      	blx	r3
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	e6ec      	b.n	80052a2 <_scanf_float+0x7a>
 80054c8:	1e6b      	subs	r3, r5, #1
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d825      	bhi.n	800551a <_scanf_float+0x2f2>
 80054ce:	2d02      	cmp	r5, #2
 80054d0:	d836      	bhi.n	8005540 <_scanf_float+0x318>
 80054d2:	455e      	cmp	r6, fp
 80054d4:	f67f aee8 	bls.w	80052a8 <_scanf_float+0x80>
 80054d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054e0:	463a      	mov	r2, r7
 80054e2:	4640      	mov	r0, r8
 80054e4:	4798      	blx	r3
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	e7f1      	b.n	80054d2 <_scanf_float+0x2aa>
 80054ee:	9802      	ldr	r0, [sp, #8]
 80054f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	463a      	mov	r2, r7
 80054fc:	4640      	mov	r0, r8
 80054fe:	4798      	blx	r3
 8005500:	6923      	ldr	r3, [r4, #16]
 8005502:	3b01      	subs	r3, #1
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800550a:	fa5f fa8a 	uxtb.w	sl, sl
 800550e:	f1ba 0f02 	cmp.w	sl, #2
 8005512:	d1ec      	bne.n	80054ee <_scanf_float+0x2c6>
 8005514:	3d03      	subs	r5, #3
 8005516:	b2ed      	uxtb	r5, r5
 8005518:	1b76      	subs	r6, r6, r5
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	05da      	lsls	r2, r3, #23
 800551e:	d52f      	bpl.n	8005580 <_scanf_float+0x358>
 8005520:	055b      	lsls	r3, r3, #21
 8005522:	d510      	bpl.n	8005546 <_scanf_float+0x31e>
 8005524:	455e      	cmp	r6, fp
 8005526:	f67f aebf 	bls.w	80052a8 <_scanf_float+0x80>
 800552a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800552e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005532:	463a      	mov	r2, r7
 8005534:	4640      	mov	r0, r8
 8005536:	4798      	blx	r3
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	3b01      	subs	r3, #1
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	e7f1      	b.n	8005524 <_scanf_float+0x2fc>
 8005540:	46aa      	mov	sl, r5
 8005542:	9602      	str	r6, [sp, #8]
 8005544:	e7df      	b.n	8005506 <_scanf_float+0x2de>
 8005546:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	2965      	cmp	r1, #101	; 0x65
 800554e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005552:	f106 35ff 	add.w	r5, r6, #4294967295
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	d00c      	beq.n	8005574 <_scanf_float+0x34c>
 800555a:	2945      	cmp	r1, #69	; 0x45
 800555c:	d00a      	beq.n	8005574 <_scanf_float+0x34c>
 800555e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005562:	463a      	mov	r2, r7
 8005564:	4640      	mov	r0, r8
 8005566:	4798      	blx	r3
 8005568:	6923      	ldr	r3, [r4, #16]
 800556a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800556e:	3b01      	subs	r3, #1
 8005570:	1eb5      	subs	r5, r6, #2
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005578:	463a      	mov	r2, r7
 800557a:	4640      	mov	r0, r8
 800557c:	4798      	blx	r3
 800557e:	462e      	mov	r6, r5
 8005580:	6825      	ldr	r5, [r4, #0]
 8005582:	f015 0510 	ands.w	r5, r5, #16
 8005586:	d158      	bne.n	800563a <_scanf_float+0x412>
 8005588:	7035      	strb	r5, [r6, #0]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005594:	d11c      	bne.n	80055d0 <_scanf_float+0x3a8>
 8005596:	9b01      	ldr	r3, [sp, #4]
 8005598:	454b      	cmp	r3, r9
 800559a:	eba3 0209 	sub.w	r2, r3, r9
 800559e:	d124      	bne.n	80055ea <_scanf_float+0x3c2>
 80055a0:	2200      	movs	r2, #0
 80055a2:	4659      	mov	r1, fp
 80055a4:	4640      	mov	r0, r8
 80055a6:	f002 fc77 	bl	8007e98 <_strtod_r>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	6821      	ldr	r1, [r4, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f011 0f02 	tst.w	r1, #2
 80055b4:	ec57 6b10 	vmov	r6, r7, d0
 80055b8:	f103 0204 	add.w	r2, r3, #4
 80055bc:	d020      	beq.n	8005600 <_scanf_float+0x3d8>
 80055be:	9903      	ldr	r1, [sp, #12]
 80055c0:	600a      	str	r2, [r1, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	e9c3 6700 	strd	r6, r7, [r3]
 80055c8:	68e3      	ldr	r3, [r4, #12]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60e3      	str	r3, [r4, #12]
 80055ce:	e66c      	b.n	80052aa <_scanf_float+0x82>
 80055d0:	9b04      	ldr	r3, [sp, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0e4      	beq.n	80055a0 <_scanf_float+0x378>
 80055d6:	9905      	ldr	r1, [sp, #20]
 80055d8:	230a      	movs	r3, #10
 80055da:	462a      	mov	r2, r5
 80055dc:	3101      	adds	r1, #1
 80055de:	4640      	mov	r0, r8
 80055e0:	f002 fce2 	bl	8007fa8 <_strtol_r>
 80055e4:	9b04      	ldr	r3, [sp, #16]
 80055e6:	9e05      	ldr	r6, [sp, #20]
 80055e8:	1ac2      	subs	r2, r0, r3
 80055ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80055ee:	429e      	cmp	r6, r3
 80055f0:	bf28      	it	cs
 80055f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80055f6:	4912      	ldr	r1, [pc, #72]	; (8005640 <_scanf_float+0x418>)
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f92d 	bl	8005858 <siprintf>
 80055fe:	e7cf      	b.n	80055a0 <_scanf_float+0x378>
 8005600:	f011 0f04 	tst.w	r1, #4
 8005604:	9903      	ldr	r1, [sp, #12]
 8005606:	600a      	str	r2, [r1, #0]
 8005608:	d1db      	bne.n	80055c2 <_scanf_float+0x39a>
 800560a:	f8d3 8000 	ldr.w	r8, [r3]
 800560e:	ee10 2a10 	vmov	r2, s0
 8005612:	ee10 0a10 	vmov	r0, s0
 8005616:	463b      	mov	r3, r7
 8005618:	4639      	mov	r1, r7
 800561a:	f7fb fa87 	bl	8000b2c <__aeabi_dcmpun>
 800561e:	b128      	cbz	r0, 800562c <_scanf_float+0x404>
 8005620:	4808      	ldr	r0, [pc, #32]	; (8005644 <_scanf_float+0x41c>)
 8005622:	f000 f9fd 	bl	8005a20 <nanf>
 8005626:	ed88 0a00 	vstr	s0, [r8]
 800562a:	e7cd      	b.n	80055c8 <_scanf_float+0x3a0>
 800562c:	4630      	mov	r0, r6
 800562e:	4639      	mov	r1, r7
 8005630:	f7fb fada 	bl	8000be8 <__aeabi_d2f>
 8005634:	f8c8 0000 	str.w	r0, [r8]
 8005638:	e7c6      	b.n	80055c8 <_scanf_float+0x3a0>
 800563a:	2500      	movs	r5, #0
 800563c:	e635      	b.n	80052aa <_scanf_float+0x82>
 800563e:	bf00      	nop
 8005640:	0800a6ce 	.word	0x0800a6ce
 8005644:	0800aa80 	.word	0x0800aa80

08005648 <std>:
 8005648:	2300      	movs	r3, #0
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	e9c0 3300 	strd	r3, r3, [r0]
 8005652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005656:	6083      	str	r3, [r0, #8]
 8005658:	8181      	strh	r1, [r0, #12]
 800565a:	6643      	str	r3, [r0, #100]	; 0x64
 800565c:	81c2      	strh	r2, [r0, #14]
 800565e:	6183      	str	r3, [r0, #24]
 8005660:	4619      	mov	r1, r3
 8005662:	2208      	movs	r2, #8
 8005664:	305c      	adds	r0, #92	; 0x5c
 8005666:	f000 f95a 	bl	800591e <memset>
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <std+0x58>)
 800566c:	6263      	str	r3, [r4, #36]	; 0x24
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <std+0x5c>)
 8005670:	62a3      	str	r3, [r4, #40]	; 0x28
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <std+0x60>)
 8005674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <std+0x64>)
 8005678:	6323      	str	r3, [r4, #48]	; 0x30
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <std+0x68>)
 800567c:	6224      	str	r4, [r4, #32]
 800567e:	429c      	cmp	r4, r3
 8005680:	d006      	beq.n	8005690 <std+0x48>
 8005682:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005686:	4294      	cmp	r4, r2
 8005688:	d002      	beq.n	8005690 <std+0x48>
 800568a:	33d0      	adds	r3, #208	; 0xd0
 800568c:	429c      	cmp	r4, r3
 800568e:	d105      	bne.n	800569c <std+0x54>
 8005690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005698:	f000 b9be 	b.w	8005a18 <__retarget_lock_init_recursive>
 800569c:	bd10      	pop	{r4, pc}
 800569e:	bf00      	nop
 80056a0:	08005899 	.word	0x08005899
 80056a4:	080058bb 	.word	0x080058bb
 80056a8:	080058f3 	.word	0x080058f3
 80056ac:	08005917 	.word	0x08005917
 80056b0:	200002e8 	.word	0x200002e8

080056b4 <stdio_exit_handler>:
 80056b4:	4a02      	ldr	r2, [pc, #8]	; (80056c0 <stdio_exit_handler+0xc>)
 80056b6:	4903      	ldr	r1, [pc, #12]	; (80056c4 <stdio_exit_handler+0x10>)
 80056b8:	4803      	ldr	r0, [pc, #12]	; (80056c8 <stdio_exit_handler+0x14>)
 80056ba:	f000 b869 	b.w	8005790 <_fwalk_sglue>
 80056be:	bf00      	nop
 80056c0:	2000000c 	.word	0x2000000c
 80056c4:	08008971 	.word	0x08008971
 80056c8:	20000018 	.word	0x20000018

080056cc <cleanup_stdio>:
 80056cc:	6841      	ldr	r1, [r0, #4]
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <cleanup_stdio+0x34>)
 80056d0:	4299      	cmp	r1, r3
 80056d2:	b510      	push	{r4, lr}
 80056d4:	4604      	mov	r4, r0
 80056d6:	d001      	beq.n	80056dc <cleanup_stdio+0x10>
 80056d8:	f003 f94a 	bl	8008970 <_fflush_r>
 80056dc:	68a1      	ldr	r1, [r4, #8]
 80056de:	4b09      	ldr	r3, [pc, #36]	; (8005704 <cleanup_stdio+0x38>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	d002      	beq.n	80056ea <cleanup_stdio+0x1e>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f003 f943 	bl	8008970 <_fflush_r>
 80056ea:	68e1      	ldr	r1, [r4, #12]
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <cleanup_stdio+0x3c>)
 80056ee:	4299      	cmp	r1, r3
 80056f0:	d004      	beq.n	80056fc <cleanup_stdio+0x30>
 80056f2:	4620      	mov	r0, r4
 80056f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f8:	f003 b93a 	b.w	8008970 <_fflush_r>
 80056fc:	bd10      	pop	{r4, pc}
 80056fe:	bf00      	nop
 8005700:	200002e8 	.word	0x200002e8
 8005704:	20000350 	.word	0x20000350
 8005708:	200003b8 	.word	0x200003b8

0800570c <global_stdio_init.part.0>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <global_stdio_init.part.0+0x30>)
 8005710:	4c0b      	ldr	r4, [pc, #44]	; (8005740 <global_stdio_init.part.0+0x34>)
 8005712:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <global_stdio_init.part.0+0x38>)
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	4620      	mov	r0, r4
 8005718:	2200      	movs	r2, #0
 800571a:	2104      	movs	r1, #4
 800571c:	f7ff ff94 	bl	8005648 <std>
 8005720:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005724:	2201      	movs	r2, #1
 8005726:	2109      	movs	r1, #9
 8005728:	f7ff ff8e 	bl	8005648 <std>
 800572c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005730:	2202      	movs	r2, #2
 8005732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005736:	2112      	movs	r1, #18
 8005738:	f7ff bf86 	b.w	8005648 <std>
 800573c:	20000420 	.word	0x20000420
 8005740:	200002e8 	.word	0x200002e8
 8005744:	080056b5 	.word	0x080056b5

08005748 <__sfp_lock_acquire>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__sfp_lock_acquire+0x8>)
 800574a:	f000 b966 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000429 	.word	0x20000429

08005754 <__sfp_lock_release>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__sfp_lock_release+0x8>)
 8005756:	f000 b961 	b.w	8005a1c <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000429 	.word	0x20000429

08005760 <__sinit>:
 8005760:	b510      	push	{r4, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	f7ff fff0 	bl	8005748 <__sfp_lock_acquire>
 8005768:	6a23      	ldr	r3, [r4, #32]
 800576a:	b11b      	cbz	r3, 8005774 <__sinit+0x14>
 800576c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005770:	f7ff bff0 	b.w	8005754 <__sfp_lock_release>
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <__sinit+0x28>)
 8005776:	6223      	str	r3, [r4, #32]
 8005778:	4b04      	ldr	r3, [pc, #16]	; (800578c <__sinit+0x2c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f5      	bne.n	800576c <__sinit+0xc>
 8005780:	f7ff ffc4 	bl	800570c <global_stdio_init.part.0>
 8005784:	e7f2      	b.n	800576c <__sinit+0xc>
 8005786:	bf00      	nop
 8005788:	080056cd 	.word	0x080056cd
 800578c:	20000420 	.word	0x20000420

08005790 <_fwalk_sglue>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	4607      	mov	r7, r0
 8005796:	4688      	mov	r8, r1
 8005798:	4614      	mov	r4, r2
 800579a:	2600      	movs	r6, #0
 800579c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a0:	f1b9 0901 	subs.w	r9, r9, #1
 80057a4:	d505      	bpl.n	80057b2 <_fwalk_sglue+0x22>
 80057a6:	6824      	ldr	r4, [r4, #0]
 80057a8:	2c00      	cmp	r4, #0
 80057aa:	d1f7      	bne.n	800579c <_fwalk_sglue+0xc>
 80057ac:	4630      	mov	r0, r6
 80057ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b2:	89ab      	ldrh	r3, [r5, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d907      	bls.n	80057c8 <_fwalk_sglue+0x38>
 80057b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057bc:	3301      	adds	r3, #1
 80057be:	d003      	beq.n	80057c8 <_fwalk_sglue+0x38>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	47c0      	blx	r8
 80057c6:	4306      	orrs	r6, r0
 80057c8:	3568      	adds	r5, #104	; 0x68
 80057ca:	e7e9      	b.n	80057a0 <_fwalk_sglue+0x10>

080057cc <iscanf>:
 80057cc:	b40f      	push	{r0, r1, r2, r3}
 80057ce:	b507      	push	{r0, r1, r2, lr}
 80057d0:	4906      	ldr	r1, [pc, #24]	; (80057ec <iscanf+0x20>)
 80057d2:	ab04      	add	r3, sp, #16
 80057d4:	6808      	ldr	r0, [r1, #0]
 80057d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057da:	6841      	ldr	r1, [r0, #4]
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	f002 fedf 	bl	80085a0 <_vfiscanf_r>
 80057e2:	b003      	add	sp, #12
 80057e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e8:	b004      	add	sp, #16
 80057ea:	4770      	bx	lr
 80057ec:	20000064 	.word	0x20000064

080057f0 <sniprintf>:
 80057f0:	b40c      	push	{r2, r3}
 80057f2:	b530      	push	{r4, r5, lr}
 80057f4:	4b17      	ldr	r3, [pc, #92]	; (8005854 <sniprintf+0x64>)
 80057f6:	1e0c      	subs	r4, r1, #0
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	b09d      	sub	sp, #116	; 0x74
 80057fc:	da08      	bge.n	8005810 <sniprintf+0x20>
 80057fe:	238b      	movs	r3, #139	; 0x8b
 8005800:	602b      	str	r3, [r5, #0]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295
 8005806:	b01d      	add	sp, #116	; 0x74
 8005808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580c:	b002      	add	sp, #8
 800580e:	4770      	bx	lr
 8005810:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005814:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005818:	bf14      	ite	ne
 800581a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800581e:	4623      	moveq	r3, r4
 8005820:	9304      	str	r3, [sp, #16]
 8005822:	9307      	str	r3, [sp, #28]
 8005824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005828:	9002      	str	r0, [sp, #8]
 800582a:	9006      	str	r0, [sp, #24]
 800582c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005832:	ab21      	add	r3, sp, #132	; 0x84
 8005834:	a902      	add	r1, sp, #8
 8005836:	4628      	mov	r0, r5
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f002 fc11 	bl	8008060 <_svfiprintf_r>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	bfbc      	itt	lt
 8005842:	238b      	movlt	r3, #139	; 0x8b
 8005844:	602b      	strlt	r3, [r5, #0]
 8005846:	2c00      	cmp	r4, #0
 8005848:	d0dd      	beq.n	8005806 <sniprintf+0x16>
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	e7d9      	b.n	8005806 <sniprintf+0x16>
 8005852:	bf00      	nop
 8005854:	20000064 	.word	0x20000064

08005858 <siprintf>:
 8005858:	b40e      	push	{r1, r2, r3}
 800585a:	b500      	push	{lr}
 800585c:	b09c      	sub	sp, #112	; 0x70
 800585e:	ab1d      	add	r3, sp, #116	; 0x74
 8005860:	9002      	str	r0, [sp, #8]
 8005862:	9006      	str	r0, [sp, #24]
 8005864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005868:	4809      	ldr	r0, [pc, #36]	; (8005890 <siprintf+0x38>)
 800586a:	9107      	str	r1, [sp, #28]
 800586c:	9104      	str	r1, [sp, #16]
 800586e:	4909      	ldr	r1, [pc, #36]	; (8005894 <siprintf+0x3c>)
 8005870:	f853 2b04 	ldr.w	r2, [r3], #4
 8005874:	9105      	str	r1, [sp, #20]
 8005876:	6800      	ldr	r0, [r0, #0]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	a902      	add	r1, sp, #8
 800587c:	f002 fbf0 	bl	8008060 <_svfiprintf_r>
 8005880:	9b02      	ldr	r3, [sp, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	b01c      	add	sp, #112	; 0x70
 8005888:	f85d eb04 	ldr.w	lr, [sp], #4
 800588c:	b003      	add	sp, #12
 800588e:	4770      	bx	lr
 8005890:	20000064 	.word	0x20000064
 8005894:	ffff0208 	.word	0xffff0208

08005898 <__sread>:
 8005898:	b510      	push	{r4, lr}
 800589a:	460c      	mov	r4, r1
 800589c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a0:	f000 f86c 	bl	800597c <_read_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	bfab      	itete	ge
 80058a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058aa:	89a3      	ldrhlt	r3, [r4, #12]
 80058ac:	181b      	addge	r3, r3, r0
 80058ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058b2:	bfac      	ite	ge
 80058b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058b6:	81a3      	strhlt	r3, [r4, #12]
 80058b8:	bd10      	pop	{r4, pc}

080058ba <__swrite>:
 80058ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058be:	461f      	mov	r7, r3
 80058c0:	898b      	ldrh	r3, [r1, #12]
 80058c2:	05db      	lsls	r3, r3, #23
 80058c4:	4605      	mov	r5, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	4616      	mov	r6, r2
 80058ca:	d505      	bpl.n	80058d8 <__swrite+0x1e>
 80058cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d0:	2302      	movs	r3, #2
 80058d2:	2200      	movs	r2, #0
 80058d4:	f000 f840 	bl	8005958 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	4632      	mov	r2, r6
 80058e6:	463b      	mov	r3, r7
 80058e8:	4628      	mov	r0, r5
 80058ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ee:	f000 b857 	b.w	80059a0 <_write_r>

080058f2 <__sseek>:
 80058f2:	b510      	push	{r4, lr}
 80058f4:	460c      	mov	r4, r1
 80058f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fa:	f000 f82d 	bl	8005958 <_lseek_r>
 80058fe:	1c43      	adds	r3, r0, #1
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	bf15      	itete	ne
 8005904:	6560      	strne	r0, [r4, #84]	; 0x54
 8005906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800590a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800590e:	81a3      	strheq	r3, [r4, #12]
 8005910:	bf18      	it	ne
 8005912:	81a3      	strhne	r3, [r4, #12]
 8005914:	bd10      	pop	{r4, pc}

08005916 <__sclose>:
 8005916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591a:	f000 b80d 	b.w	8005938 <_close_r>

0800591e <memset>:
 800591e:	4402      	add	r2, r0
 8005920:	4603      	mov	r3, r0
 8005922:	4293      	cmp	r3, r2
 8005924:	d100      	bne.n	8005928 <memset+0xa>
 8005926:	4770      	bx	lr
 8005928:	f803 1b01 	strb.w	r1, [r3], #1
 800592c:	e7f9      	b.n	8005922 <memset+0x4>
	...

08005930 <_localeconv_r>:
 8005930:	4800      	ldr	r0, [pc, #0]	; (8005934 <_localeconv_r+0x4>)
 8005932:	4770      	bx	lr
 8005934:	20000158 	.word	0x20000158

08005938 <_close_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4d06      	ldr	r5, [pc, #24]	; (8005954 <_close_r+0x1c>)
 800593c:	2300      	movs	r3, #0
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	f7fc f960 	bl	8001c08 <_close>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_close_r+0x1a>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_close_r+0x1a>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000424 	.word	0x20000424

08005958 <_lseek_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	; (8005978 <_lseek_r+0x20>)
 800595c:	4604      	mov	r4, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fc f975 	bl	8001c56 <_lseek>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_lseek_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_lseek_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000424 	.word	0x20000424

0800597c <_read_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d07      	ldr	r5, [pc, #28]	; (800599c <_read_r+0x20>)
 8005980:	4604      	mov	r4, r0
 8005982:	4608      	mov	r0, r1
 8005984:	4611      	mov	r1, r2
 8005986:	2200      	movs	r2, #0
 8005988:	602a      	str	r2, [r5, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f7fc f8f4 	bl	8001b78 <_read>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_read_r+0x1e>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_read_r+0x1e>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20000424 	.word	0x20000424

080059a0 <_write_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	; (80059c0 <_write_r+0x20>)
 80059a4:	4604      	mov	r4, r0
 80059a6:	4608      	mov	r0, r1
 80059a8:	4611      	mov	r1, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	602a      	str	r2, [r5, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	f7fc f908 	bl	8001bc4 <_write>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_write_r+0x1e>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_write_r+0x1e>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000424 	.word	0x20000424

080059c4 <__errno>:
 80059c4:	4b01      	ldr	r3, [pc, #4]	; (80059cc <__errno+0x8>)
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	20000064 	.word	0x20000064

080059d0 <__libc_init_array>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	4d0d      	ldr	r5, [pc, #52]	; (8005a08 <__libc_init_array+0x38>)
 80059d4:	4c0d      	ldr	r4, [pc, #52]	; (8005a0c <__libc_init_array+0x3c>)
 80059d6:	1b64      	subs	r4, r4, r5
 80059d8:	10a4      	asrs	r4, r4, #2
 80059da:	2600      	movs	r6, #0
 80059dc:	42a6      	cmp	r6, r4
 80059de:	d109      	bne.n	80059f4 <__libc_init_array+0x24>
 80059e0:	4d0b      	ldr	r5, [pc, #44]	; (8005a10 <__libc_init_array+0x40>)
 80059e2:	4c0c      	ldr	r4, [pc, #48]	; (8005a14 <__libc_init_array+0x44>)
 80059e4:	f004 f8cc 	bl	8009b80 <_init>
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	2600      	movs	r6, #0
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	d105      	bne.n	80059fe <__libc_init_array+0x2e>
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f8:	4798      	blx	r3
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7ee      	b.n	80059dc <__libc_init_array+0xc>
 80059fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a02:	4798      	blx	r3
 8005a04:	3601      	adds	r6, #1
 8005a06:	e7f2      	b.n	80059ee <__libc_init_array+0x1e>
 8005a08:	0800aaec 	.word	0x0800aaec
 8005a0c:	0800aaec 	.word	0x0800aaec
 8005a10:	0800aaec 	.word	0x0800aaec
 8005a14:	0800aaf0 	.word	0x0800aaf0

08005a18 <__retarget_lock_init_recursive>:
 8005a18:	4770      	bx	lr

08005a1a <__retarget_lock_acquire_recursive>:
 8005a1a:	4770      	bx	lr

08005a1c <__retarget_lock_release_recursive>:
 8005a1c:	4770      	bx	lr
	...

08005a20 <nanf>:
 8005a20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005a28 <nanf+0x8>
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	7fc00000 	.word	0x7fc00000

08005a2c <quorem>:
 8005a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	6903      	ldr	r3, [r0, #16]
 8005a32:	690c      	ldr	r4, [r1, #16]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	4607      	mov	r7, r0
 8005a38:	db7e      	blt.n	8005b38 <quorem+0x10c>
 8005a3a:	3c01      	subs	r4, #1
 8005a3c:	f101 0814 	add.w	r8, r1, #20
 8005a40:	f100 0514 	add.w	r5, r0, #20
 8005a44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a52:	3301      	adds	r3, #1
 8005a54:	429a      	cmp	r2, r3
 8005a56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a62:	d331      	bcc.n	8005ac8 <quorem+0x9c>
 8005a64:	f04f 0e00 	mov.w	lr, #0
 8005a68:	4640      	mov	r0, r8
 8005a6a:	46ac      	mov	ip, r5
 8005a6c:	46f2      	mov	sl, lr
 8005a6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a72:	b293      	uxth	r3, r2
 8005a74:	fb06 e303 	mla	r3, r6, r3, lr
 8005a78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a7c:	0c1a      	lsrs	r2, r3, #16
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ebaa 0303 	sub.w	r3, sl, r3
 8005a84:	f8dc a000 	ldr.w	sl, [ip]
 8005a88:	fa13 f38a 	uxtah	r3, r3, sl
 8005a8c:	fb06 220e 	mla	r2, r6, lr, r2
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	9b00      	ldr	r3, [sp, #0]
 8005a94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005aa2:	f8bd 3000 	ldrh.w	r3, [sp]
 8005aa6:	4581      	cmp	r9, r0
 8005aa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aac:	f84c 3b04 	str.w	r3, [ip], #4
 8005ab0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ab4:	d2db      	bcs.n	8005a6e <quorem+0x42>
 8005ab6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005aba:	b92b      	cbnz	r3, 8005ac8 <quorem+0x9c>
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	3b04      	subs	r3, #4
 8005ac0:	429d      	cmp	r5, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	d32c      	bcc.n	8005b20 <quorem+0xf4>
 8005ac6:	613c      	str	r4, [r7, #16]
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f001 f9f1 	bl	8006eb0 <__mcmp>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	db22      	blt.n	8005b18 <quorem+0xec>
 8005ad2:	3601      	adds	r6, #1
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005adc:	f8d1 c000 	ldr.w	ip, [r1]
 8005ae0:	b293      	uxth	r3, r2
 8005ae2:	1ac3      	subs	r3, r0, r3
 8005ae4:	0c12      	lsrs	r2, r2, #16
 8005ae6:	fa13 f38c 	uxtah	r3, r3, ip
 8005aea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005aee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005af8:	45c1      	cmp	r9, r8
 8005afa:	f841 3b04 	str.w	r3, [r1], #4
 8005afe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b02:	d2e9      	bcs.n	8005ad8 <quorem+0xac>
 8005b04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b0c:	b922      	cbnz	r2, 8005b18 <quorem+0xec>
 8005b0e:	3b04      	subs	r3, #4
 8005b10:	429d      	cmp	r5, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	d30a      	bcc.n	8005b2c <quorem+0x100>
 8005b16:	613c      	str	r4, [r7, #16]
 8005b18:	4630      	mov	r0, r6
 8005b1a:	b003      	add	sp, #12
 8005b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	3b04      	subs	r3, #4
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	d1ce      	bne.n	8005ac6 <quorem+0x9a>
 8005b28:	3c01      	subs	r4, #1
 8005b2a:	e7c9      	b.n	8005ac0 <quorem+0x94>
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	3b04      	subs	r3, #4
 8005b30:	2a00      	cmp	r2, #0
 8005b32:	d1f0      	bne.n	8005b16 <quorem+0xea>
 8005b34:	3c01      	subs	r4, #1
 8005b36:	e7eb      	b.n	8005b10 <quorem+0xe4>
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e7ee      	b.n	8005b1a <quorem+0xee>
 8005b3c:	0000      	movs	r0, r0
	...

08005b40 <_dtoa_r>:
 8005b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b44:	ed2d 8b04 	vpush	{d8-d9}
 8005b48:	69c5      	ldr	r5, [r0, #28]
 8005b4a:	b093      	sub	sp, #76	; 0x4c
 8005b4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b50:	ec57 6b10 	vmov	r6, r7, d0
 8005b54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b58:	9107      	str	r1, [sp, #28]
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b60:	b975      	cbnz	r5, 8005b80 <_dtoa_r+0x40>
 8005b62:	2010      	movs	r0, #16
 8005b64:	f000 fe2a 	bl	80067bc <malloc>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	61e0      	str	r0, [r4, #28]
 8005b6c:	b920      	cbnz	r0, 8005b78 <_dtoa_r+0x38>
 8005b6e:	4bae      	ldr	r3, [pc, #696]	; (8005e28 <_dtoa_r+0x2e8>)
 8005b70:	21ef      	movs	r1, #239	; 0xef
 8005b72:	48ae      	ldr	r0, [pc, #696]	; (8005e2c <_dtoa_r+0x2ec>)
 8005b74:	f003 f8f4 	bl	8008d60 <__assert_func>
 8005b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b7c:	6005      	str	r5, [r0, #0]
 8005b7e:	60c5      	str	r5, [r0, #12]
 8005b80:	69e3      	ldr	r3, [r4, #28]
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	b151      	cbz	r1, 8005b9c <_dtoa_r+0x5c>
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	604a      	str	r2, [r1, #4]
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4093      	lsls	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 ff07 	bl	80069a4 <_Bfree>
 8005b96:	69e3      	ldr	r3, [r4, #28]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	1e3b      	subs	r3, r7, #0
 8005b9e:	bfbb      	ittet	lt
 8005ba0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	9303      	strlt	r3, [sp, #12]
 8005ba6:	2300      	movge	r3, #0
 8005ba8:	2201      	movlt	r2, #1
 8005baa:	bfac      	ite	ge
 8005bac:	f8c8 3000 	strge.w	r3, [r8]
 8005bb0:	f8c8 2000 	strlt.w	r2, [r8]
 8005bb4:	4b9e      	ldr	r3, [pc, #632]	; (8005e30 <_dtoa_r+0x2f0>)
 8005bb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bba:	ea33 0308 	bics.w	r3, r3, r8
 8005bbe:	d11b      	bne.n	8005bf8 <_dtoa_r+0xb8>
 8005bc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005bcc:	4333      	orrs	r3, r6
 8005bce:	f000 8593 	beq.w	80066f8 <_dtoa_r+0xbb8>
 8005bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd4:	b963      	cbnz	r3, 8005bf0 <_dtoa_r+0xb0>
 8005bd6:	4b97      	ldr	r3, [pc, #604]	; (8005e34 <_dtoa_r+0x2f4>)
 8005bd8:	e027      	b.n	8005c2a <_dtoa_r+0xea>
 8005bda:	4b97      	ldr	r3, [pc, #604]	; (8005e38 <_dtoa_r+0x2f8>)
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	9800      	ldr	r0, [sp, #0]
 8005be6:	b013      	add	sp, #76	; 0x4c
 8005be8:	ecbd 8b04 	vpop	{d8-d9}
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	4b90      	ldr	r3, [pc, #576]	; (8005e34 <_dtoa_r+0x2f4>)
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	3303      	adds	r3, #3
 8005bf6:	e7f3      	b.n	8005be0 <_dtoa_r+0xa0>
 8005bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	ec51 0b17 	vmov	r0, r1, d7
 8005c02:	eeb0 8a47 	vmov.f32	s16, s14
 8005c06:	eef0 8a67 	vmov.f32	s17, s15
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f7fa ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c10:	4681      	mov	r9, r0
 8005c12:	b160      	cbz	r0, 8005c2e <_dtoa_r+0xee>
 8005c14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c16:	2301      	movs	r3, #1
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8568 	beq.w	80066f2 <_dtoa_r+0xbb2>
 8005c22:	4b86      	ldr	r3, [pc, #536]	; (8005e3c <_dtoa_r+0x2fc>)
 8005c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	e7da      	b.n	8005be4 <_dtoa_r+0xa4>
 8005c2e:	aa10      	add	r2, sp, #64	; 0x40
 8005c30:	a911      	add	r1, sp, #68	; 0x44
 8005c32:	4620      	mov	r0, r4
 8005c34:	eeb0 0a48 	vmov.f32	s0, s16
 8005c38:	eef0 0a68 	vmov.f32	s1, s17
 8005c3c:	f001 fa4e 	bl	80070dc <__d2b>
 8005c40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c44:	4682      	mov	sl, r0
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	d07f      	beq.n	8005d4a <_dtoa_r+0x20a>
 8005c4a:	ee18 3a90 	vmov	r3, s17
 8005c4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c56:	ec51 0b18 	vmov	r0, r1, d8
 8005c5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c66:	4619      	mov	r1, r3
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4b75      	ldr	r3, [pc, #468]	; (8005e40 <_dtoa_r+0x300>)
 8005c6c:	f7fa fb0c 	bl	8000288 <__aeabi_dsub>
 8005c70:	a367      	add	r3, pc, #412	; (adr r3, 8005e10 <_dtoa_r+0x2d0>)
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f7fa fcbf 	bl	80005f8 <__aeabi_dmul>
 8005c7a:	a367      	add	r3, pc, #412	; (adr r3, 8005e18 <_dtoa_r+0x2d8>)
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa fb04 	bl	800028c <__adddf3>
 8005c84:	4606      	mov	r6, r0
 8005c86:	4628      	mov	r0, r5
 8005c88:	460f      	mov	r7, r1
 8005c8a:	f7fa fc4b 	bl	8000524 <__aeabi_i2d>
 8005c8e:	a364      	add	r3, pc, #400	; (adr r3, 8005e20 <_dtoa_r+0x2e0>)
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	f7fa fcb0 	bl	80005f8 <__aeabi_dmul>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa faf4 	bl	800028c <__adddf3>
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	f7fa ff56 	bl	8000b58 <__aeabi_d2iz>
 8005cac:	2200      	movs	r2, #0
 8005cae:	4683      	mov	fp, r0
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	f7fa ff11 	bl	8000adc <__aeabi_dcmplt>
 8005cba:	b148      	cbz	r0, 8005cd0 <_dtoa_r+0x190>
 8005cbc:	4658      	mov	r0, fp
 8005cbe:	f7fa fc31 	bl	8000524 <__aeabi_i2d>
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	f7fa feff 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cca:	b908      	cbnz	r0, 8005cd0 <_dtoa_r+0x190>
 8005ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cd0:	f1bb 0f16 	cmp.w	fp, #22
 8005cd4:	d857      	bhi.n	8005d86 <_dtoa_r+0x246>
 8005cd6:	4b5b      	ldr	r3, [pc, #364]	; (8005e44 <_dtoa_r+0x304>)
 8005cd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	ec51 0b18 	vmov	r0, r1, d8
 8005ce4:	f7fa fefa 	bl	8000adc <__aeabi_dcmplt>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d04e      	beq.n	8005d8a <_dtoa_r+0x24a>
 8005cec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	1b5b      	subs	r3, r3, r5
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	bf45      	ittet	mi
 8005cfc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d00:	9305      	strmi	r3, [sp, #20]
 8005d02:	2300      	movpl	r3, #0
 8005d04:	2300      	movmi	r3, #0
 8005d06:	9206      	str	r2, [sp, #24]
 8005d08:	bf54      	ite	pl
 8005d0a:	9305      	strpl	r3, [sp, #20]
 8005d0c:	9306      	strmi	r3, [sp, #24]
 8005d0e:	f1bb 0f00 	cmp.w	fp, #0
 8005d12:	db3c      	blt.n	8005d8e <_dtoa_r+0x24e>
 8005d14:	9b06      	ldr	r3, [sp, #24]
 8005d16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d1a:	445b      	add	r3, fp
 8005d1c:	9306      	str	r3, [sp, #24]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9308      	str	r3, [sp, #32]
 8005d22:	9b07      	ldr	r3, [sp, #28]
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	d868      	bhi.n	8005dfa <_dtoa_r+0x2ba>
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	bfc4      	itt	gt
 8005d2c:	3b04      	subgt	r3, #4
 8005d2e:	9307      	strgt	r3, [sp, #28]
 8005d30:	9b07      	ldr	r3, [sp, #28]
 8005d32:	f1a3 0302 	sub.w	r3, r3, #2
 8005d36:	bfcc      	ite	gt
 8005d38:	2500      	movgt	r5, #0
 8005d3a:	2501      	movle	r5, #1
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	f200 8085 	bhi.w	8005e4c <_dtoa_r+0x30c>
 8005d42:	e8df f003 	tbb	[pc, r3]
 8005d46:	3b2e      	.short	0x3b2e
 8005d48:	5839      	.short	0x5839
 8005d4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d4e:	441d      	add	r5, r3
 8005d50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	bfc1      	itttt	gt
 8005d58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d68:	bfd6      	itet	le
 8005d6a:	f1c3 0320 	rsble	r3, r3, #32
 8005d6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d72:	fa06 f003 	lslle.w	r0, r6, r3
 8005d76:	f7fa fbc5 	bl	8000504 <__aeabi_ui2d>
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d80:	3d01      	subs	r5, #1
 8005d82:	920e      	str	r2, [sp, #56]	; 0x38
 8005d84:	e76f      	b.n	8005c66 <_dtoa_r+0x126>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e7b3      	b.n	8005cf2 <_dtoa_r+0x1b2>
 8005d8a:	900c      	str	r0, [sp, #48]	; 0x30
 8005d8c:	e7b2      	b.n	8005cf4 <_dtoa_r+0x1b4>
 8005d8e:	9b05      	ldr	r3, [sp, #20]
 8005d90:	eba3 030b 	sub.w	r3, r3, fp
 8005d94:	9305      	str	r3, [sp, #20]
 8005d96:	f1cb 0300 	rsb	r3, fp, #0
 8005d9a:	9308      	str	r3, [sp, #32]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da0:	e7bf      	b.n	8005d22 <_dtoa_r+0x1e2>
 8005da2:	2300      	movs	r3, #0
 8005da4:	9309      	str	r3, [sp, #36]	; 0x24
 8005da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dc52      	bgt.n	8005e52 <_dtoa_r+0x312>
 8005dac:	2301      	movs	r3, #1
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	461a      	mov	r2, r3
 8005db4:	920a      	str	r2, [sp, #40]	; 0x28
 8005db6:	e00b      	b.n	8005dd0 <_dtoa_r+0x290>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e7f3      	b.n	8005da4 <_dtoa_r+0x264>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc2:	445b      	add	r3, fp
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	bfb8      	it	lt
 8005dce:	2301      	movlt	r3, #1
 8005dd0:	69e0      	ldr	r0, [r4, #28]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	f102 0614 	add.w	r6, r2, #20
 8005dda:	429e      	cmp	r6, r3
 8005ddc:	d93d      	bls.n	8005e5a <_dtoa_r+0x31a>
 8005dde:	6041      	str	r1, [r0, #4]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fd9f 	bl	8006924 <_Balloc>
 8005de6:	9000      	str	r0, [sp, #0]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d139      	bne.n	8005e60 <_dtoa_r+0x320>
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <_dtoa_r+0x308>)
 8005dee:	4602      	mov	r2, r0
 8005df0:	f240 11af 	movw	r1, #431	; 0x1af
 8005df4:	e6bd      	b.n	8005b72 <_dtoa_r+0x32>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e7e1      	b.n	8005dbe <_dtoa_r+0x27e>
 8005dfa:	2501      	movs	r5, #1
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	9509      	str	r5, [sp, #36]	; 0x24
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2312      	movs	r3, #18
 8005e0e:	e7d1      	b.n	8005db4 <_dtoa_r+0x274>
 8005e10:	636f4361 	.word	0x636f4361
 8005e14:	3fd287a7 	.word	0x3fd287a7
 8005e18:	8b60c8b3 	.word	0x8b60c8b3
 8005e1c:	3fc68a28 	.word	0x3fc68a28
 8005e20:	509f79fb 	.word	0x509f79fb
 8005e24:	3fd34413 	.word	0x3fd34413
 8005e28:	0800a6e0 	.word	0x0800a6e0
 8005e2c:	0800a6f7 	.word	0x0800a6f7
 8005e30:	7ff00000 	.word	0x7ff00000
 8005e34:	0800a6dc 	.word	0x0800a6dc
 8005e38:	0800a6d3 	.word	0x0800a6d3
 8005e3c:	0800aa39 	.word	0x0800aa39
 8005e40:	3ff80000 	.word	0x3ff80000
 8005e44:	0800a7e8 	.word	0x0800a7e8
 8005e48:	0800a74f 	.word	0x0800a74f
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e50:	e7d7      	b.n	8005e02 <_dtoa_r+0x2c2>
 8005e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	e7ba      	b.n	8005dd0 <_dtoa_r+0x290>
 8005e5a:	3101      	adds	r1, #1
 8005e5c:	0052      	lsls	r2, r2, #1
 8005e5e:	e7ba      	b.n	8005dd6 <_dtoa_r+0x296>
 8005e60:	69e3      	ldr	r3, [r4, #28]
 8005e62:	9a00      	ldr	r2, [sp, #0]
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	2b0e      	cmp	r3, #14
 8005e6a:	f200 80a8 	bhi.w	8005fbe <_dtoa_r+0x47e>
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	f000 80a5 	beq.w	8005fbe <_dtoa_r+0x47e>
 8005e74:	f1bb 0f00 	cmp.w	fp, #0
 8005e78:	dd38      	ble.n	8005eec <_dtoa_r+0x3ac>
 8005e7a:	4bc0      	ldr	r3, [pc, #768]	; (800617c <_dtoa_r+0x63c>)
 8005e7c:	f00b 020f 	and.w	r2, fp, #15
 8005e80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005e90:	d019      	beq.n	8005ec6 <_dtoa_r+0x386>
 8005e92:	4bbb      	ldr	r3, [pc, #748]	; (8006180 <_dtoa_r+0x640>)
 8005e94:	ec51 0b18 	vmov	r0, r1, d8
 8005e98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e9c:	f7fa fcd6 	bl	800084c <__aeabi_ddiv>
 8005ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea4:	f008 080f 	and.w	r8, r8, #15
 8005ea8:	2503      	movs	r5, #3
 8005eaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006180 <_dtoa_r+0x640>
 8005eae:	f1b8 0f00 	cmp.w	r8, #0
 8005eb2:	d10a      	bne.n	8005eca <_dtoa_r+0x38a>
 8005eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eb8:	4632      	mov	r2, r6
 8005eba:	463b      	mov	r3, r7
 8005ebc:	f7fa fcc6 	bl	800084c <__aeabi_ddiv>
 8005ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ec4:	e02b      	b.n	8005f1e <_dtoa_r+0x3de>
 8005ec6:	2502      	movs	r5, #2
 8005ec8:	e7ef      	b.n	8005eaa <_dtoa_r+0x36a>
 8005eca:	f018 0f01 	tst.w	r8, #1
 8005ece:	d008      	beq.n	8005ee2 <_dtoa_r+0x3a2>
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	4639      	mov	r1, r7
 8005ed4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ed8:	f7fa fb8e 	bl	80005f8 <__aeabi_dmul>
 8005edc:	3501      	adds	r5, #1
 8005ede:	4606      	mov	r6, r0
 8005ee0:	460f      	mov	r7, r1
 8005ee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ee6:	f109 0908 	add.w	r9, r9, #8
 8005eea:	e7e0      	b.n	8005eae <_dtoa_r+0x36e>
 8005eec:	f000 809f 	beq.w	800602e <_dtoa_r+0x4ee>
 8005ef0:	f1cb 0600 	rsb	r6, fp, #0
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	; (800617c <_dtoa_r+0x63c>)
 8005ef6:	4fa2      	ldr	r7, [pc, #648]	; (8006180 <_dtoa_r+0x640>)
 8005ef8:	f006 020f 	and.w	r2, r6, #15
 8005efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	ec51 0b18 	vmov	r0, r1, d8
 8005f08:	f7fa fb76 	bl	80005f8 <__aeabi_dmul>
 8005f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f10:	1136      	asrs	r6, r6, #4
 8005f12:	2300      	movs	r3, #0
 8005f14:	2502      	movs	r5, #2
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d17e      	bne.n	8006018 <_dtoa_r+0x4d8>
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1d0      	bne.n	8005ec0 <_dtoa_r+0x380>
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8084 	beq.w	8006032 <_dtoa_r+0x4f2>
 8005f2a:	4b96      	ldr	r3, [pc, #600]	; (8006184 <_dtoa_r+0x644>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4640      	mov	r0, r8
 8005f30:	4649      	mov	r1, r9
 8005f32:	f7fa fdd3 	bl	8000adc <__aeabi_dcmplt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	d07b      	beq.n	8006032 <_dtoa_r+0x4f2>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d078      	beq.n	8006032 <_dtoa_r+0x4f2>
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	dd39      	ble.n	8005fba <_dtoa_r+0x47a>
 8005f46:	4b90      	ldr	r3, [pc, #576]	; (8006188 <_dtoa_r+0x648>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	f7fa fb53 	bl	80005f8 <__aeabi_dmul>
 8005f52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f56:	9e01      	ldr	r6, [sp, #4]
 8005f58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f62:	4628      	mov	r0, r5
 8005f64:	f7fa fade 	bl	8000524 <__aeabi_i2d>
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	f7fa fb44 	bl	80005f8 <__aeabi_dmul>
 8005f70:	4b86      	ldr	r3, [pc, #536]	; (800618c <_dtoa_r+0x64c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	f7fa f98a 	bl	800028c <__adddf3>
 8005f78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d158      	bne.n	8006038 <_dtoa_r+0x4f8>
 8005f86:	4b82      	ldr	r3, [pc, #520]	; (8006190 <_dtoa_r+0x650>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	f7fa f97b 	bl	8000288 <__aeabi_dsub>
 8005f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f96:	4680      	mov	r8, r0
 8005f98:	4689      	mov	r9, r1
 8005f9a:	f7fa fdbd 	bl	8000b18 <__aeabi_dcmpgt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f040 8296 	bne.w	80064d0 <_dtoa_r+0x990>
 8005fa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fae:	4649      	mov	r1, r9
 8005fb0:	f7fa fd94 	bl	8000adc <__aeabi_dcmplt>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	f040 8289 	bne.w	80064cc <_dtoa_r+0x98c>
 8005fba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f2c0 814e 	blt.w	8006262 <_dtoa_r+0x722>
 8005fc6:	f1bb 0f0e 	cmp.w	fp, #14
 8005fca:	f300 814a 	bgt.w	8006262 <_dtoa_r+0x722>
 8005fce:	4b6b      	ldr	r3, [pc, #428]	; (800617c <_dtoa_r+0x63c>)
 8005fd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f280 80dc 	bge.w	8006198 <_dtoa_r+0x658>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f300 80d8 	bgt.w	8006198 <_dtoa_r+0x658>
 8005fe8:	f040 826f 	bne.w	80064ca <_dtoa_r+0x98a>
 8005fec:	4b68      	ldr	r3, [pc, #416]	; (8006190 <_dtoa_r+0x650>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ffc:	f7fa fd82 	bl	8000b04 <__aeabi_dcmpge>
 8006000:	9e04      	ldr	r6, [sp, #16]
 8006002:	4637      	mov	r7, r6
 8006004:	2800      	cmp	r0, #0
 8006006:	f040 8245 	bne.w	8006494 <_dtoa_r+0x954>
 800600a:	9d00      	ldr	r5, [sp, #0]
 800600c:	2331      	movs	r3, #49	; 0x31
 800600e:	f805 3b01 	strb.w	r3, [r5], #1
 8006012:	f10b 0b01 	add.w	fp, fp, #1
 8006016:	e241      	b.n	800649c <_dtoa_r+0x95c>
 8006018:	07f2      	lsls	r2, r6, #31
 800601a:	d505      	bpl.n	8006028 <_dtoa_r+0x4e8>
 800601c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006020:	f7fa faea 	bl	80005f8 <__aeabi_dmul>
 8006024:	3501      	adds	r5, #1
 8006026:	2301      	movs	r3, #1
 8006028:	1076      	asrs	r6, r6, #1
 800602a:	3708      	adds	r7, #8
 800602c:	e773      	b.n	8005f16 <_dtoa_r+0x3d6>
 800602e:	2502      	movs	r5, #2
 8006030:	e775      	b.n	8005f1e <_dtoa_r+0x3de>
 8006032:	9e04      	ldr	r6, [sp, #16]
 8006034:	465f      	mov	r7, fp
 8006036:	e792      	b.n	8005f5e <_dtoa_r+0x41e>
 8006038:	9900      	ldr	r1, [sp, #0]
 800603a:	4b50      	ldr	r3, [pc, #320]	; (800617c <_dtoa_r+0x63c>)
 800603c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006040:	4431      	add	r1, r6
 8006042:	9102      	str	r1, [sp, #8]
 8006044:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006046:	eeb0 9a47 	vmov.f32	s18, s14
 800604a:	eef0 9a67 	vmov.f32	s19, s15
 800604e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006052:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006056:	2900      	cmp	r1, #0
 8006058:	d044      	beq.n	80060e4 <_dtoa_r+0x5a4>
 800605a:	494e      	ldr	r1, [pc, #312]	; (8006194 <_dtoa_r+0x654>)
 800605c:	2000      	movs	r0, #0
 800605e:	f7fa fbf5 	bl	800084c <__aeabi_ddiv>
 8006062:	ec53 2b19 	vmov	r2, r3, d9
 8006066:	f7fa f90f 	bl	8000288 <__aeabi_dsub>
 800606a:	9d00      	ldr	r5, [sp, #0]
 800606c:	ec41 0b19 	vmov	d9, r0, r1
 8006070:	4649      	mov	r1, r9
 8006072:	4640      	mov	r0, r8
 8006074:	f7fa fd70 	bl	8000b58 <__aeabi_d2iz>
 8006078:	4606      	mov	r6, r0
 800607a:	f7fa fa53 	bl	8000524 <__aeabi_i2d>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa f8ff 	bl	8000288 <__aeabi_dsub>
 800608a:	3630      	adds	r6, #48	; 0x30
 800608c:	f805 6b01 	strb.w	r6, [r5], #1
 8006090:	ec53 2b19 	vmov	r2, r3, d9
 8006094:	4680      	mov	r8, r0
 8006096:	4689      	mov	r9, r1
 8006098:	f7fa fd20 	bl	8000adc <__aeabi_dcmplt>
 800609c:	2800      	cmp	r0, #0
 800609e:	d164      	bne.n	800616a <_dtoa_r+0x62a>
 80060a0:	4642      	mov	r2, r8
 80060a2:	464b      	mov	r3, r9
 80060a4:	4937      	ldr	r1, [pc, #220]	; (8006184 <_dtoa_r+0x644>)
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fa f8ee 	bl	8000288 <__aeabi_dsub>
 80060ac:	ec53 2b19 	vmov	r2, r3, d9
 80060b0:	f7fa fd14 	bl	8000adc <__aeabi_dcmplt>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	f040 80b6 	bne.w	8006226 <_dtoa_r+0x6e6>
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	429d      	cmp	r5, r3
 80060be:	f43f af7c 	beq.w	8005fba <_dtoa_r+0x47a>
 80060c2:	4b31      	ldr	r3, [pc, #196]	; (8006188 <_dtoa_r+0x648>)
 80060c4:	ec51 0b19 	vmov	r0, r1, d9
 80060c8:	2200      	movs	r2, #0
 80060ca:	f7fa fa95 	bl	80005f8 <__aeabi_dmul>
 80060ce:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <_dtoa_r+0x648>)
 80060d0:	ec41 0b19 	vmov	d9, r0, r1
 80060d4:	2200      	movs	r2, #0
 80060d6:	4640      	mov	r0, r8
 80060d8:	4649      	mov	r1, r9
 80060da:	f7fa fa8d 	bl	80005f8 <__aeabi_dmul>
 80060de:	4680      	mov	r8, r0
 80060e0:	4689      	mov	r9, r1
 80060e2:	e7c5      	b.n	8006070 <_dtoa_r+0x530>
 80060e4:	ec51 0b17 	vmov	r0, r1, d7
 80060e8:	f7fa fa86 	bl	80005f8 <__aeabi_dmul>
 80060ec:	9b02      	ldr	r3, [sp, #8]
 80060ee:	9d00      	ldr	r5, [sp, #0]
 80060f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060f2:	ec41 0b19 	vmov	d9, r0, r1
 80060f6:	4649      	mov	r1, r9
 80060f8:	4640      	mov	r0, r8
 80060fa:	f7fa fd2d 	bl	8000b58 <__aeabi_d2iz>
 80060fe:	4606      	mov	r6, r0
 8006100:	f7fa fa10 	bl	8000524 <__aeabi_i2d>
 8006104:	3630      	adds	r6, #48	; 0x30
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa f8bb 	bl	8000288 <__aeabi_dsub>
 8006112:	f805 6b01 	strb.w	r6, [r5], #1
 8006116:	9b02      	ldr	r3, [sp, #8]
 8006118:	429d      	cmp	r5, r3
 800611a:	4680      	mov	r8, r0
 800611c:	4689      	mov	r9, r1
 800611e:	f04f 0200 	mov.w	r2, #0
 8006122:	d124      	bne.n	800616e <_dtoa_r+0x62e>
 8006124:	4b1b      	ldr	r3, [pc, #108]	; (8006194 <_dtoa_r+0x654>)
 8006126:	ec51 0b19 	vmov	r0, r1, d9
 800612a:	f7fa f8af 	bl	800028c <__adddf3>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fcef 	bl	8000b18 <__aeabi_dcmpgt>
 800613a:	2800      	cmp	r0, #0
 800613c:	d173      	bne.n	8006226 <_dtoa_r+0x6e6>
 800613e:	ec53 2b19 	vmov	r2, r3, d9
 8006142:	4914      	ldr	r1, [pc, #80]	; (8006194 <_dtoa_r+0x654>)
 8006144:	2000      	movs	r0, #0
 8006146:	f7fa f89f 	bl	8000288 <__aeabi_dsub>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fcc3 	bl	8000adc <__aeabi_dcmplt>
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f af2f 	beq.w	8005fba <_dtoa_r+0x47a>
 800615c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800615e:	1e6b      	subs	r3, r5, #1
 8006160:	930f      	str	r3, [sp, #60]	; 0x3c
 8006162:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006166:	2b30      	cmp	r3, #48	; 0x30
 8006168:	d0f8      	beq.n	800615c <_dtoa_r+0x61c>
 800616a:	46bb      	mov	fp, r7
 800616c:	e04a      	b.n	8006204 <_dtoa_r+0x6c4>
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <_dtoa_r+0x648>)
 8006170:	f7fa fa42 	bl	80005f8 <__aeabi_dmul>
 8006174:	4680      	mov	r8, r0
 8006176:	4689      	mov	r9, r1
 8006178:	e7bd      	b.n	80060f6 <_dtoa_r+0x5b6>
 800617a:	bf00      	nop
 800617c:	0800a7e8 	.word	0x0800a7e8
 8006180:	0800a7c0 	.word	0x0800a7c0
 8006184:	3ff00000 	.word	0x3ff00000
 8006188:	40240000 	.word	0x40240000
 800618c:	401c0000 	.word	0x401c0000
 8006190:	40140000 	.word	0x40140000
 8006194:	3fe00000 	.word	0x3fe00000
 8006198:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800619c:	9d00      	ldr	r5, [sp, #0]
 800619e:	4642      	mov	r2, r8
 80061a0:	464b      	mov	r3, r9
 80061a2:	4630      	mov	r0, r6
 80061a4:	4639      	mov	r1, r7
 80061a6:	f7fa fb51 	bl	800084c <__aeabi_ddiv>
 80061aa:	f7fa fcd5 	bl	8000b58 <__aeabi_d2iz>
 80061ae:	9001      	str	r0, [sp, #4]
 80061b0:	f7fa f9b8 	bl	8000524 <__aeabi_i2d>
 80061b4:	4642      	mov	r2, r8
 80061b6:	464b      	mov	r3, r9
 80061b8:	f7fa fa1e 	bl	80005f8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f860 	bl	8000288 <__aeabi_dsub>
 80061c8:	9e01      	ldr	r6, [sp, #4]
 80061ca:	9f04      	ldr	r7, [sp, #16]
 80061cc:	3630      	adds	r6, #48	; 0x30
 80061ce:	f805 6b01 	strb.w	r6, [r5], #1
 80061d2:	9e00      	ldr	r6, [sp, #0]
 80061d4:	1bae      	subs	r6, r5, r6
 80061d6:	42b7      	cmp	r7, r6
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	d134      	bne.n	8006248 <_dtoa_r+0x708>
 80061de:	f7fa f855 	bl	800028c <__adddf3>
 80061e2:	4642      	mov	r2, r8
 80061e4:	464b      	mov	r3, r9
 80061e6:	4606      	mov	r6, r0
 80061e8:	460f      	mov	r7, r1
 80061ea:	f7fa fc95 	bl	8000b18 <__aeabi_dcmpgt>
 80061ee:	b9c8      	cbnz	r0, 8006224 <_dtoa_r+0x6e4>
 80061f0:	4642      	mov	r2, r8
 80061f2:	464b      	mov	r3, r9
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	f7fa fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 80061fc:	b110      	cbz	r0, 8006204 <_dtoa_r+0x6c4>
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d40f      	bmi.n	8006224 <_dtoa_r+0x6e4>
 8006204:	4651      	mov	r1, sl
 8006206:	4620      	mov	r0, r4
 8006208:	f000 fbcc 	bl	80069a4 <_Bfree>
 800620c:	2300      	movs	r3, #0
 800620e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006210:	702b      	strb	r3, [r5, #0]
 8006212:	f10b 0301 	add.w	r3, fp, #1
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800621a:	2b00      	cmp	r3, #0
 800621c:	f43f ace2 	beq.w	8005be4 <_dtoa_r+0xa4>
 8006220:	601d      	str	r5, [r3, #0]
 8006222:	e4df      	b.n	8005be4 <_dtoa_r+0xa4>
 8006224:	465f      	mov	r7, fp
 8006226:	462b      	mov	r3, r5
 8006228:	461d      	mov	r5, r3
 800622a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800622e:	2a39      	cmp	r2, #57	; 0x39
 8006230:	d106      	bne.n	8006240 <_dtoa_r+0x700>
 8006232:	9a00      	ldr	r2, [sp, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d1f7      	bne.n	8006228 <_dtoa_r+0x6e8>
 8006238:	9900      	ldr	r1, [sp, #0]
 800623a:	2230      	movs	r2, #48	; 0x30
 800623c:	3701      	adds	r7, #1
 800623e:	700a      	strb	r2, [r1, #0]
 8006240:	781a      	ldrb	r2, [r3, #0]
 8006242:	3201      	adds	r2, #1
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e790      	b.n	800616a <_dtoa_r+0x62a>
 8006248:	4ba3      	ldr	r3, [pc, #652]	; (80064d8 <_dtoa_r+0x998>)
 800624a:	2200      	movs	r2, #0
 800624c:	f7fa f9d4 	bl	80005f8 <__aeabi_dmul>
 8006250:	2200      	movs	r2, #0
 8006252:	2300      	movs	r3, #0
 8006254:	4606      	mov	r6, r0
 8006256:	460f      	mov	r7, r1
 8006258:	f7fa fc36 	bl	8000ac8 <__aeabi_dcmpeq>
 800625c:	2800      	cmp	r0, #0
 800625e:	d09e      	beq.n	800619e <_dtoa_r+0x65e>
 8006260:	e7d0      	b.n	8006204 <_dtoa_r+0x6c4>
 8006262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006264:	2a00      	cmp	r2, #0
 8006266:	f000 80ca 	beq.w	80063fe <_dtoa_r+0x8be>
 800626a:	9a07      	ldr	r2, [sp, #28]
 800626c:	2a01      	cmp	r2, #1
 800626e:	f300 80ad 	bgt.w	80063cc <_dtoa_r+0x88c>
 8006272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006274:	2a00      	cmp	r2, #0
 8006276:	f000 80a5 	beq.w	80063c4 <_dtoa_r+0x884>
 800627a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800627e:	9e08      	ldr	r6, [sp, #32]
 8006280:	9d05      	ldr	r5, [sp, #20]
 8006282:	9a05      	ldr	r2, [sp, #20]
 8006284:	441a      	add	r2, r3
 8006286:	9205      	str	r2, [sp, #20]
 8006288:	9a06      	ldr	r2, [sp, #24]
 800628a:	2101      	movs	r1, #1
 800628c:	441a      	add	r2, r3
 800628e:	4620      	mov	r0, r4
 8006290:	9206      	str	r2, [sp, #24]
 8006292:	f000 fc87 	bl	8006ba4 <__i2b>
 8006296:	4607      	mov	r7, r0
 8006298:	b165      	cbz	r5, 80062b4 <_dtoa_r+0x774>
 800629a:	9b06      	ldr	r3, [sp, #24]
 800629c:	2b00      	cmp	r3, #0
 800629e:	dd09      	ble.n	80062b4 <_dtoa_r+0x774>
 80062a0:	42ab      	cmp	r3, r5
 80062a2:	9a05      	ldr	r2, [sp, #20]
 80062a4:	bfa8      	it	ge
 80062a6:	462b      	movge	r3, r5
 80062a8:	1ad2      	subs	r2, r2, r3
 80062aa:	9205      	str	r2, [sp, #20]
 80062ac:	9a06      	ldr	r2, [sp, #24]
 80062ae:	1aed      	subs	r5, r5, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	9306      	str	r3, [sp, #24]
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	b1f3      	cbz	r3, 80062f6 <_dtoa_r+0x7b6>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 80a3 	beq.w	8006406 <_dtoa_r+0x8c6>
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	dd10      	ble.n	80062e6 <_dtoa_r+0x7a6>
 80062c4:	4639      	mov	r1, r7
 80062c6:	4632      	mov	r2, r6
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fd2b 	bl	8006d24 <__pow5mult>
 80062ce:	4652      	mov	r2, sl
 80062d0:	4601      	mov	r1, r0
 80062d2:	4607      	mov	r7, r0
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fc7b 	bl	8006bd0 <__multiply>
 80062da:	4651      	mov	r1, sl
 80062dc:	4680      	mov	r8, r0
 80062de:	4620      	mov	r0, r4
 80062e0:	f000 fb60 	bl	80069a4 <_Bfree>
 80062e4:	46c2      	mov	sl, r8
 80062e6:	9b08      	ldr	r3, [sp, #32]
 80062e8:	1b9a      	subs	r2, r3, r6
 80062ea:	d004      	beq.n	80062f6 <_dtoa_r+0x7b6>
 80062ec:	4651      	mov	r1, sl
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fd18 	bl	8006d24 <__pow5mult>
 80062f4:	4682      	mov	sl, r0
 80062f6:	2101      	movs	r1, #1
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fc53 	bl	8006ba4 <__i2b>
 80062fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	4606      	mov	r6, r0
 8006304:	f340 8081 	ble.w	800640a <_dtoa_r+0x8ca>
 8006308:	461a      	mov	r2, r3
 800630a:	4601      	mov	r1, r0
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fd09 	bl	8006d24 <__pow5mult>
 8006312:	9b07      	ldr	r3, [sp, #28]
 8006314:	2b01      	cmp	r3, #1
 8006316:	4606      	mov	r6, r0
 8006318:	dd7a      	ble.n	8006410 <_dtoa_r+0x8d0>
 800631a:	f04f 0800 	mov.w	r8, #0
 800631e:	6933      	ldr	r3, [r6, #16]
 8006320:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006324:	6918      	ldr	r0, [r3, #16]
 8006326:	f000 fbef 	bl	8006b08 <__hi0bits>
 800632a:	f1c0 0020 	rsb	r0, r0, #32
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	4418      	add	r0, r3
 8006332:	f010 001f 	ands.w	r0, r0, #31
 8006336:	f000 8094 	beq.w	8006462 <_dtoa_r+0x922>
 800633a:	f1c0 0320 	rsb	r3, r0, #32
 800633e:	2b04      	cmp	r3, #4
 8006340:	f340 8085 	ble.w	800644e <_dtoa_r+0x90e>
 8006344:	9b05      	ldr	r3, [sp, #20]
 8006346:	f1c0 001c 	rsb	r0, r0, #28
 800634a:	4403      	add	r3, r0
 800634c:	9305      	str	r3, [sp, #20]
 800634e:	9b06      	ldr	r3, [sp, #24]
 8006350:	4403      	add	r3, r0
 8006352:	4405      	add	r5, r0
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dd05      	ble.n	8006368 <_dtoa_r+0x828>
 800635c:	4651      	mov	r1, sl
 800635e:	461a      	mov	r2, r3
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fd39 	bl	8006dd8 <__lshift>
 8006366:	4682      	mov	sl, r0
 8006368:	9b06      	ldr	r3, [sp, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd05      	ble.n	800637a <_dtoa_r+0x83a>
 800636e:	4631      	mov	r1, r6
 8006370:	461a      	mov	r2, r3
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fd30 	bl	8006dd8 <__lshift>
 8006378:	4606      	mov	r6, r0
 800637a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d072      	beq.n	8006466 <_dtoa_r+0x926>
 8006380:	4631      	mov	r1, r6
 8006382:	4650      	mov	r0, sl
 8006384:	f000 fd94 	bl	8006eb0 <__mcmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	da6c      	bge.n	8006466 <_dtoa_r+0x926>
 800638c:	2300      	movs	r3, #0
 800638e:	4651      	mov	r1, sl
 8006390:	220a      	movs	r2, #10
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fb28 	bl	80069e8 <__multadd>
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800639e:	4682      	mov	sl, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 81b0 	beq.w	8006706 <_dtoa_r+0xbc6>
 80063a6:	2300      	movs	r3, #0
 80063a8:	4639      	mov	r1, r7
 80063aa:	220a      	movs	r2, #10
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fb1b 	bl	80069e8 <__multadd>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	4607      	mov	r7, r0
 80063b8:	f300 8096 	bgt.w	80064e8 <_dtoa_r+0x9a8>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	dc59      	bgt.n	8006476 <_dtoa_r+0x936>
 80063c2:	e091      	b.n	80064e8 <_dtoa_r+0x9a8>
 80063c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ca:	e758      	b.n	800627e <_dtoa_r+0x73e>
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	1e5e      	subs	r6, r3, #1
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	42b3      	cmp	r3, r6
 80063d4:	bfbf      	itttt	lt
 80063d6:	9b08      	ldrlt	r3, [sp, #32]
 80063d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80063da:	9608      	strlt	r6, [sp, #32]
 80063dc:	1af3      	sublt	r3, r6, r3
 80063de:	bfb4      	ite	lt
 80063e0:	18d2      	addlt	r2, r2, r3
 80063e2:	1b9e      	subge	r6, r3, r6
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	bfbc      	itt	lt
 80063e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80063ea:	2600      	movlt	r6, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfb7      	itett	lt
 80063f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80063f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80063f8:	1a9d      	sublt	r5, r3, r2
 80063fa:	2300      	movlt	r3, #0
 80063fc:	e741      	b.n	8006282 <_dtoa_r+0x742>
 80063fe:	9e08      	ldr	r6, [sp, #32]
 8006400:	9d05      	ldr	r5, [sp, #20]
 8006402:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006404:	e748      	b.n	8006298 <_dtoa_r+0x758>
 8006406:	9a08      	ldr	r2, [sp, #32]
 8006408:	e770      	b.n	80062ec <_dtoa_r+0x7ac>
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	2b01      	cmp	r3, #1
 800640e:	dc19      	bgt.n	8006444 <_dtoa_r+0x904>
 8006410:	9b02      	ldr	r3, [sp, #8]
 8006412:	b9bb      	cbnz	r3, 8006444 <_dtoa_r+0x904>
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800641a:	b99b      	cbnz	r3, 8006444 <_dtoa_r+0x904>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006422:	0d1b      	lsrs	r3, r3, #20
 8006424:	051b      	lsls	r3, r3, #20
 8006426:	b183      	cbz	r3, 800644a <_dtoa_r+0x90a>
 8006428:	9b05      	ldr	r3, [sp, #20]
 800642a:	3301      	adds	r3, #1
 800642c:	9305      	str	r3, [sp, #20]
 800642e:	9b06      	ldr	r3, [sp, #24]
 8006430:	3301      	adds	r3, #1
 8006432:	9306      	str	r3, [sp, #24]
 8006434:	f04f 0801 	mov.w	r8, #1
 8006438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	f47f af6f 	bne.w	800631e <_dtoa_r+0x7de>
 8006440:	2001      	movs	r0, #1
 8006442:	e774      	b.n	800632e <_dtoa_r+0x7ee>
 8006444:	f04f 0800 	mov.w	r8, #0
 8006448:	e7f6      	b.n	8006438 <_dtoa_r+0x8f8>
 800644a:	4698      	mov	r8, r3
 800644c:	e7f4      	b.n	8006438 <_dtoa_r+0x8f8>
 800644e:	d082      	beq.n	8006356 <_dtoa_r+0x816>
 8006450:	9a05      	ldr	r2, [sp, #20]
 8006452:	331c      	adds	r3, #28
 8006454:	441a      	add	r2, r3
 8006456:	9205      	str	r2, [sp, #20]
 8006458:	9a06      	ldr	r2, [sp, #24]
 800645a:	441a      	add	r2, r3
 800645c:	441d      	add	r5, r3
 800645e:	9206      	str	r2, [sp, #24]
 8006460:	e779      	b.n	8006356 <_dtoa_r+0x816>
 8006462:	4603      	mov	r3, r0
 8006464:	e7f4      	b.n	8006450 <_dtoa_r+0x910>
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	dc37      	bgt.n	80064dc <_dtoa_r+0x99c>
 800646c:	9b07      	ldr	r3, [sp, #28]
 800646e:	2b02      	cmp	r3, #2
 8006470:	dd34      	ble.n	80064dc <_dtoa_r+0x99c>
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	b963      	cbnz	r3, 8006494 <_dtoa_r+0x954>
 800647a:	4631      	mov	r1, r6
 800647c:	2205      	movs	r2, #5
 800647e:	4620      	mov	r0, r4
 8006480:	f000 fab2 	bl	80069e8 <__multadd>
 8006484:	4601      	mov	r1, r0
 8006486:	4606      	mov	r6, r0
 8006488:	4650      	mov	r0, sl
 800648a:	f000 fd11 	bl	8006eb0 <__mcmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	f73f adbb 	bgt.w	800600a <_dtoa_r+0x4ca>
 8006494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006496:	9d00      	ldr	r5, [sp, #0]
 8006498:	ea6f 0b03 	mvn.w	fp, r3
 800649c:	f04f 0800 	mov.w	r8, #0
 80064a0:	4631      	mov	r1, r6
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fa7e 	bl	80069a4 <_Bfree>
 80064a8:	2f00      	cmp	r7, #0
 80064aa:	f43f aeab 	beq.w	8006204 <_dtoa_r+0x6c4>
 80064ae:	f1b8 0f00 	cmp.w	r8, #0
 80064b2:	d005      	beq.n	80064c0 <_dtoa_r+0x980>
 80064b4:	45b8      	cmp	r8, r7
 80064b6:	d003      	beq.n	80064c0 <_dtoa_r+0x980>
 80064b8:	4641      	mov	r1, r8
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 fa72 	bl	80069a4 <_Bfree>
 80064c0:	4639      	mov	r1, r7
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fa6e 	bl	80069a4 <_Bfree>
 80064c8:	e69c      	b.n	8006204 <_dtoa_r+0x6c4>
 80064ca:	2600      	movs	r6, #0
 80064cc:	4637      	mov	r7, r6
 80064ce:	e7e1      	b.n	8006494 <_dtoa_r+0x954>
 80064d0:	46bb      	mov	fp, r7
 80064d2:	4637      	mov	r7, r6
 80064d4:	e599      	b.n	800600a <_dtoa_r+0x4ca>
 80064d6:	bf00      	nop
 80064d8:	40240000 	.word	0x40240000
 80064dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80c8 	beq.w	8006674 <_dtoa_r+0xb34>
 80064e4:	9b04      	ldr	r3, [sp, #16]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	dd05      	ble.n	80064f8 <_dtoa_r+0x9b8>
 80064ec:	4639      	mov	r1, r7
 80064ee:	462a      	mov	r2, r5
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fc71 	bl	8006dd8 <__lshift>
 80064f6:	4607      	mov	r7, r0
 80064f8:	f1b8 0f00 	cmp.w	r8, #0
 80064fc:	d05b      	beq.n	80065b6 <_dtoa_r+0xa76>
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4620      	mov	r0, r4
 8006502:	f000 fa0f 	bl	8006924 <_Balloc>
 8006506:	4605      	mov	r5, r0
 8006508:	b928      	cbnz	r0, 8006516 <_dtoa_r+0x9d6>
 800650a:	4b83      	ldr	r3, [pc, #524]	; (8006718 <_dtoa_r+0xbd8>)
 800650c:	4602      	mov	r2, r0
 800650e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006512:	f7ff bb2e 	b.w	8005b72 <_dtoa_r+0x32>
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	3202      	adds	r2, #2
 800651a:	0092      	lsls	r2, r2, #2
 800651c:	f107 010c 	add.w	r1, r7, #12
 8006520:	300c      	adds	r0, #12
 8006522:	f002 fc07 	bl	8008d34 <memcpy>
 8006526:	2201      	movs	r2, #1
 8006528:	4629      	mov	r1, r5
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fc54 	bl	8006dd8 <__lshift>
 8006530:	9b00      	ldr	r3, [sp, #0]
 8006532:	3301      	adds	r3, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	e9dd 2300 	ldrd	r2, r3, [sp]
 800653a:	4413      	add	r3, r2
 800653c:	9308      	str	r3, [sp, #32]
 800653e:	9b02      	ldr	r3, [sp, #8]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	46b8      	mov	r8, r7
 8006546:	9306      	str	r3, [sp, #24]
 8006548:	4607      	mov	r7, r0
 800654a:	9b04      	ldr	r3, [sp, #16]
 800654c:	4631      	mov	r1, r6
 800654e:	3b01      	subs	r3, #1
 8006550:	4650      	mov	r0, sl
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	f7ff fa6a 	bl	8005a2c <quorem>
 8006558:	4641      	mov	r1, r8
 800655a:	9002      	str	r0, [sp, #8]
 800655c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006560:	4650      	mov	r0, sl
 8006562:	f000 fca5 	bl	8006eb0 <__mcmp>
 8006566:	463a      	mov	r2, r7
 8006568:	9005      	str	r0, [sp, #20]
 800656a:	4631      	mov	r1, r6
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fcbb 	bl	8006ee8 <__mdiff>
 8006572:	68c2      	ldr	r2, [r0, #12]
 8006574:	4605      	mov	r5, r0
 8006576:	bb02      	cbnz	r2, 80065ba <_dtoa_r+0xa7a>
 8006578:	4601      	mov	r1, r0
 800657a:	4650      	mov	r0, sl
 800657c:	f000 fc98 	bl	8006eb0 <__mcmp>
 8006580:	4602      	mov	r2, r0
 8006582:	4629      	mov	r1, r5
 8006584:	4620      	mov	r0, r4
 8006586:	9209      	str	r2, [sp, #36]	; 0x24
 8006588:	f000 fa0c 	bl	80069a4 <_Bfree>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006590:	9d04      	ldr	r5, [sp, #16]
 8006592:	ea43 0102 	orr.w	r1, r3, r2
 8006596:	9b06      	ldr	r3, [sp, #24]
 8006598:	4319      	orrs	r1, r3
 800659a:	d110      	bne.n	80065be <_dtoa_r+0xa7e>
 800659c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065a0:	d029      	beq.n	80065f6 <_dtoa_r+0xab6>
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd02      	ble.n	80065ae <_dtoa_r+0xa6e>
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80065ae:	9b01      	ldr	r3, [sp, #4]
 80065b0:	f883 9000 	strb.w	r9, [r3]
 80065b4:	e774      	b.n	80064a0 <_dtoa_r+0x960>
 80065b6:	4638      	mov	r0, r7
 80065b8:	e7ba      	b.n	8006530 <_dtoa_r+0x9f0>
 80065ba:	2201      	movs	r2, #1
 80065bc:	e7e1      	b.n	8006582 <_dtoa_r+0xa42>
 80065be:	9b05      	ldr	r3, [sp, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	db04      	blt.n	80065ce <_dtoa_r+0xa8e>
 80065c4:	9907      	ldr	r1, [sp, #28]
 80065c6:	430b      	orrs	r3, r1
 80065c8:	9906      	ldr	r1, [sp, #24]
 80065ca:	430b      	orrs	r3, r1
 80065cc:	d120      	bne.n	8006610 <_dtoa_r+0xad0>
 80065ce:	2a00      	cmp	r2, #0
 80065d0:	dded      	ble.n	80065ae <_dtoa_r+0xa6e>
 80065d2:	4651      	mov	r1, sl
 80065d4:	2201      	movs	r2, #1
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 fbfe 	bl	8006dd8 <__lshift>
 80065dc:	4631      	mov	r1, r6
 80065de:	4682      	mov	sl, r0
 80065e0:	f000 fc66 	bl	8006eb0 <__mcmp>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dc03      	bgt.n	80065f0 <_dtoa_r+0xab0>
 80065e8:	d1e1      	bne.n	80065ae <_dtoa_r+0xa6e>
 80065ea:	f019 0f01 	tst.w	r9, #1
 80065ee:	d0de      	beq.n	80065ae <_dtoa_r+0xa6e>
 80065f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065f4:	d1d8      	bne.n	80065a8 <_dtoa_r+0xa68>
 80065f6:	9a01      	ldr	r2, [sp, #4]
 80065f8:	2339      	movs	r3, #57	; 0x39
 80065fa:	7013      	strb	r3, [r2, #0]
 80065fc:	462b      	mov	r3, r5
 80065fe:	461d      	mov	r5, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006606:	2a39      	cmp	r2, #57	; 0x39
 8006608:	d06c      	beq.n	80066e4 <_dtoa_r+0xba4>
 800660a:	3201      	adds	r2, #1
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	e747      	b.n	80064a0 <_dtoa_r+0x960>
 8006610:	2a00      	cmp	r2, #0
 8006612:	dd07      	ble.n	8006624 <_dtoa_r+0xae4>
 8006614:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006618:	d0ed      	beq.n	80065f6 <_dtoa_r+0xab6>
 800661a:	9a01      	ldr	r2, [sp, #4]
 800661c:	f109 0301 	add.w	r3, r9, #1
 8006620:	7013      	strb	r3, [r2, #0]
 8006622:	e73d      	b.n	80064a0 <_dtoa_r+0x960>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	9a08      	ldr	r2, [sp, #32]
 8006628:	f803 9c01 	strb.w	r9, [r3, #-1]
 800662c:	4293      	cmp	r3, r2
 800662e:	d043      	beq.n	80066b8 <_dtoa_r+0xb78>
 8006630:	4651      	mov	r1, sl
 8006632:	2300      	movs	r3, #0
 8006634:	220a      	movs	r2, #10
 8006636:	4620      	mov	r0, r4
 8006638:	f000 f9d6 	bl	80069e8 <__multadd>
 800663c:	45b8      	cmp	r8, r7
 800663e:	4682      	mov	sl, r0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	f04f 020a 	mov.w	r2, #10
 8006648:	4641      	mov	r1, r8
 800664a:	4620      	mov	r0, r4
 800664c:	d107      	bne.n	800665e <_dtoa_r+0xb1e>
 800664e:	f000 f9cb 	bl	80069e8 <__multadd>
 8006652:	4680      	mov	r8, r0
 8006654:	4607      	mov	r7, r0
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	3301      	adds	r3, #1
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	e775      	b.n	800654a <_dtoa_r+0xa0a>
 800665e:	f000 f9c3 	bl	80069e8 <__multadd>
 8006662:	4639      	mov	r1, r7
 8006664:	4680      	mov	r8, r0
 8006666:	2300      	movs	r3, #0
 8006668:	220a      	movs	r2, #10
 800666a:	4620      	mov	r0, r4
 800666c:	f000 f9bc 	bl	80069e8 <__multadd>
 8006670:	4607      	mov	r7, r0
 8006672:	e7f0      	b.n	8006656 <_dtoa_r+0xb16>
 8006674:	9b04      	ldr	r3, [sp, #16]
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	9d00      	ldr	r5, [sp, #0]
 800667a:	4631      	mov	r1, r6
 800667c:	4650      	mov	r0, sl
 800667e:	f7ff f9d5 	bl	8005a2c <quorem>
 8006682:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	f805 9b01 	strb.w	r9, [r5], #1
 800668c:	1aea      	subs	r2, r5, r3
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	4293      	cmp	r3, r2
 8006692:	dd07      	ble.n	80066a4 <_dtoa_r+0xb64>
 8006694:	4651      	mov	r1, sl
 8006696:	2300      	movs	r3, #0
 8006698:	220a      	movs	r2, #10
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f9a4 	bl	80069e8 <__multadd>
 80066a0:	4682      	mov	sl, r0
 80066a2:	e7ea      	b.n	800667a <_dtoa_r+0xb3a>
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfc8      	it	gt
 80066aa:	461d      	movgt	r5, r3
 80066ac:	9b00      	ldr	r3, [sp, #0]
 80066ae:	bfd8      	it	le
 80066b0:	2501      	movle	r5, #1
 80066b2:	441d      	add	r5, r3
 80066b4:	f04f 0800 	mov.w	r8, #0
 80066b8:	4651      	mov	r1, sl
 80066ba:	2201      	movs	r2, #1
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fb8b 	bl	8006dd8 <__lshift>
 80066c2:	4631      	mov	r1, r6
 80066c4:	4682      	mov	sl, r0
 80066c6:	f000 fbf3 	bl	8006eb0 <__mcmp>
 80066ca:	2800      	cmp	r0, #0
 80066cc:	dc96      	bgt.n	80065fc <_dtoa_r+0xabc>
 80066ce:	d102      	bne.n	80066d6 <_dtoa_r+0xb96>
 80066d0:	f019 0f01 	tst.w	r9, #1
 80066d4:	d192      	bne.n	80065fc <_dtoa_r+0xabc>
 80066d6:	462b      	mov	r3, r5
 80066d8:	461d      	mov	r5, r3
 80066da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066de:	2a30      	cmp	r2, #48	; 0x30
 80066e0:	d0fa      	beq.n	80066d8 <_dtoa_r+0xb98>
 80066e2:	e6dd      	b.n	80064a0 <_dtoa_r+0x960>
 80066e4:	9a00      	ldr	r2, [sp, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d189      	bne.n	80065fe <_dtoa_r+0xabe>
 80066ea:	f10b 0b01 	add.w	fp, fp, #1
 80066ee:	2331      	movs	r3, #49	; 0x31
 80066f0:	e796      	b.n	8006620 <_dtoa_r+0xae0>
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <_dtoa_r+0xbdc>)
 80066f4:	f7ff ba99 	b.w	8005c2a <_dtoa_r+0xea>
 80066f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f47f aa6d 	bne.w	8005bda <_dtoa_r+0x9a>
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <_dtoa_r+0xbe0>)
 8006702:	f7ff ba92 	b.w	8005c2a <_dtoa_r+0xea>
 8006706:	9b01      	ldr	r3, [sp, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	dcb5      	bgt.n	8006678 <_dtoa_r+0xb38>
 800670c:	9b07      	ldr	r3, [sp, #28]
 800670e:	2b02      	cmp	r3, #2
 8006710:	f73f aeb1 	bgt.w	8006476 <_dtoa_r+0x936>
 8006714:	e7b0      	b.n	8006678 <_dtoa_r+0xb38>
 8006716:	bf00      	nop
 8006718:	0800a74f 	.word	0x0800a74f
 800671c:	0800aa38 	.word	0x0800aa38
 8006720:	0800a6d3 	.word	0x0800a6d3

08006724 <_free_r>:
 8006724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006726:	2900      	cmp	r1, #0
 8006728:	d044      	beq.n	80067b4 <_free_r+0x90>
 800672a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672e:	9001      	str	r0, [sp, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	f1a1 0404 	sub.w	r4, r1, #4
 8006736:	bfb8      	it	lt
 8006738:	18e4      	addlt	r4, r4, r3
 800673a:	f000 f8e7 	bl	800690c <__malloc_lock>
 800673e:	4a1e      	ldr	r2, [pc, #120]	; (80067b8 <_free_r+0x94>)
 8006740:	9801      	ldr	r0, [sp, #4]
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	b933      	cbnz	r3, 8006754 <_free_r+0x30>
 8006746:	6063      	str	r3, [r4, #4]
 8006748:	6014      	str	r4, [r2, #0]
 800674a:	b003      	add	sp, #12
 800674c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006750:	f000 b8e2 	b.w	8006918 <__malloc_unlock>
 8006754:	42a3      	cmp	r3, r4
 8006756:	d908      	bls.n	800676a <_free_r+0x46>
 8006758:	6825      	ldr	r5, [r4, #0]
 800675a:	1961      	adds	r1, r4, r5
 800675c:	428b      	cmp	r3, r1
 800675e:	bf01      	itttt	eq
 8006760:	6819      	ldreq	r1, [r3, #0]
 8006762:	685b      	ldreq	r3, [r3, #4]
 8006764:	1949      	addeq	r1, r1, r5
 8006766:	6021      	streq	r1, [r4, #0]
 8006768:	e7ed      	b.n	8006746 <_free_r+0x22>
 800676a:	461a      	mov	r2, r3
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	b10b      	cbz	r3, 8006774 <_free_r+0x50>
 8006770:	42a3      	cmp	r3, r4
 8006772:	d9fa      	bls.n	800676a <_free_r+0x46>
 8006774:	6811      	ldr	r1, [r2, #0]
 8006776:	1855      	adds	r5, r2, r1
 8006778:	42a5      	cmp	r5, r4
 800677a:	d10b      	bne.n	8006794 <_free_r+0x70>
 800677c:	6824      	ldr	r4, [r4, #0]
 800677e:	4421      	add	r1, r4
 8006780:	1854      	adds	r4, r2, r1
 8006782:	42a3      	cmp	r3, r4
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	d1e0      	bne.n	800674a <_free_r+0x26>
 8006788:	681c      	ldr	r4, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	6053      	str	r3, [r2, #4]
 800678e:	440c      	add	r4, r1
 8006790:	6014      	str	r4, [r2, #0]
 8006792:	e7da      	b.n	800674a <_free_r+0x26>
 8006794:	d902      	bls.n	800679c <_free_r+0x78>
 8006796:	230c      	movs	r3, #12
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	e7d6      	b.n	800674a <_free_r+0x26>
 800679c:	6825      	ldr	r5, [r4, #0]
 800679e:	1961      	adds	r1, r4, r5
 80067a0:	428b      	cmp	r3, r1
 80067a2:	bf04      	itt	eq
 80067a4:	6819      	ldreq	r1, [r3, #0]
 80067a6:	685b      	ldreq	r3, [r3, #4]
 80067a8:	6063      	str	r3, [r4, #4]
 80067aa:	bf04      	itt	eq
 80067ac:	1949      	addeq	r1, r1, r5
 80067ae:	6021      	streq	r1, [r4, #0]
 80067b0:	6054      	str	r4, [r2, #4]
 80067b2:	e7ca      	b.n	800674a <_free_r+0x26>
 80067b4:	b003      	add	sp, #12
 80067b6:	bd30      	pop	{r4, r5, pc}
 80067b8:	2000042c 	.word	0x2000042c

080067bc <malloc>:
 80067bc:	4b02      	ldr	r3, [pc, #8]	; (80067c8 <malloc+0xc>)
 80067be:	4601      	mov	r1, r0
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f000 b823 	b.w	800680c <_malloc_r>
 80067c6:	bf00      	nop
 80067c8:	20000064 	.word	0x20000064

080067cc <sbrk_aligned>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	4e0e      	ldr	r6, [pc, #56]	; (8006808 <sbrk_aligned+0x3c>)
 80067d0:	460c      	mov	r4, r1
 80067d2:	6831      	ldr	r1, [r6, #0]
 80067d4:	4605      	mov	r5, r0
 80067d6:	b911      	cbnz	r1, 80067de <sbrk_aligned+0x12>
 80067d8:	f002 fa9c 	bl	8008d14 <_sbrk_r>
 80067dc:	6030      	str	r0, [r6, #0]
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f002 fa97 	bl	8008d14 <_sbrk_r>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d00a      	beq.n	8006800 <sbrk_aligned+0x34>
 80067ea:	1cc4      	adds	r4, r0, #3
 80067ec:	f024 0403 	bic.w	r4, r4, #3
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d007      	beq.n	8006804 <sbrk_aligned+0x38>
 80067f4:	1a21      	subs	r1, r4, r0
 80067f6:	4628      	mov	r0, r5
 80067f8:	f002 fa8c 	bl	8008d14 <_sbrk_r>
 80067fc:	3001      	adds	r0, #1
 80067fe:	d101      	bne.n	8006804 <sbrk_aligned+0x38>
 8006800:	f04f 34ff 	mov.w	r4, #4294967295
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	20000430 	.word	0x20000430

0800680c <_malloc_r>:
 800680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006810:	1ccd      	adds	r5, r1, #3
 8006812:	f025 0503 	bic.w	r5, r5, #3
 8006816:	3508      	adds	r5, #8
 8006818:	2d0c      	cmp	r5, #12
 800681a:	bf38      	it	cc
 800681c:	250c      	movcc	r5, #12
 800681e:	2d00      	cmp	r5, #0
 8006820:	4607      	mov	r7, r0
 8006822:	db01      	blt.n	8006828 <_malloc_r+0x1c>
 8006824:	42a9      	cmp	r1, r5
 8006826:	d905      	bls.n	8006834 <_malloc_r+0x28>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	2600      	movs	r6, #0
 800682e:	4630      	mov	r0, r6
 8006830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006834:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006908 <_malloc_r+0xfc>
 8006838:	f000 f868 	bl	800690c <__malloc_lock>
 800683c:	f8d8 3000 	ldr.w	r3, [r8]
 8006840:	461c      	mov	r4, r3
 8006842:	bb5c      	cbnz	r4, 800689c <_malloc_r+0x90>
 8006844:	4629      	mov	r1, r5
 8006846:	4638      	mov	r0, r7
 8006848:	f7ff ffc0 	bl	80067cc <sbrk_aligned>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	4604      	mov	r4, r0
 8006850:	d155      	bne.n	80068fe <_malloc_r+0xf2>
 8006852:	f8d8 4000 	ldr.w	r4, [r8]
 8006856:	4626      	mov	r6, r4
 8006858:	2e00      	cmp	r6, #0
 800685a:	d145      	bne.n	80068e8 <_malloc_r+0xdc>
 800685c:	2c00      	cmp	r4, #0
 800685e:	d048      	beq.n	80068f2 <_malloc_r+0xe6>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	eb04 0903 	add.w	r9, r4, r3
 800686a:	f002 fa53 	bl	8008d14 <_sbrk_r>
 800686e:	4581      	cmp	r9, r0
 8006870:	d13f      	bne.n	80068f2 <_malloc_r+0xe6>
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	1a6d      	subs	r5, r5, r1
 8006876:	4629      	mov	r1, r5
 8006878:	4638      	mov	r0, r7
 800687a:	f7ff ffa7 	bl	80067cc <sbrk_aligned>
 800687e:	3001      	adds	r0, #1
 8006880:	d037      	beq.n	80068f2 <_malloc_r+0xe6>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	442b      	add	r3, r5
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	f8d8 3000 	ldr.w	r3, [r8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d038      	beq.n	8006902 <_malloc_r+0xf6>
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	42a2      	cmp	r2, r4
 8006894:	d12b      	bne.n	80068ee <_malloc_r+0xe2>
 8006896:	2200      	movs	r2, #0
 8006898:	605a      	str	r2, [r3, #4]
 800689a:	e00f      	b.n	80068bc <_malloc_r+0xb0>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	1b52      	subs	r2, r2, r5
 80068a0:	d41f      	bmi.n	80068e2 <_malloc_r+0xd6>
 80068a2:	2a0b      	cmp	r2, #11
 80068a4:	d917      	bls.n	80068d6 <_malloc_r+0xca>
 80068a6:	1961      	adds	r1, r4, r5
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	6025      	str	r5, [r4, #0]
 80068ac:	bf18      	it	ne
 80068ae:	6059      	strne	r1, [r3, #4]
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	bf08      	it	eq
 80068b4:	f8c8 1000 	streq.w	r1, [r8]
 80068b8:	5162      	str	r2, [r4, r5]
 80068ba:	604b      	str	r3, [r1, #4]
 80068bc:	4638      	mov	r0, r7
 80068be:	f104 060b 	add.w	r6, r4, #11
 80068c2:	f000 f829 	bl	8006918 <__malloc_unlock>
 80068c6:	f026 0607 	bic.w	r6, r6, #7
 80068ca:	1d23      	adds	r3, r4, #4
 80068cc:	1af2      	subs	r2, r6, r3
 80068ce:	d0ae      	beq.n	800682e <_malloc_r+0x22>
 80068d0:	1b9b      	subs	r3, r3, r6
 80068d2:	50a3      	str	r3, [r4, r2]
 80068d4:	e7ab      	b.n	800682e <_malloc_r+0x22>
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	6862      	ldr	r2, [r4, #4]
 80068da:	d1dd      	bne.n	8006898 <_malloc_r+0x8c>
 80068dc:	f8c8 2000 	str.w	r2, [r8]
 80068e0:	e7ec      	b.n	80068bc <_malloc_r+0xb0>
 80068e2:	4623      	mov	r3, r4
 80068e4:	6864      	ldr	r4, [r4, #4]
 80068e6:	e7ac      	b.n	8006842 <_malloc_r+0x36>
 80068e8:	4634      	mov	r4, r6
 80068ea:	6876      	ldr	r6, [r6, #4]
 80068ec:	e7b4      	b.n	8006858 <_malloc_r+0x4c>
 80068ee:	4613      	mov	r3, r2
 80068f0:	e7cc      	b.n	800688c <_malloc_r+0x80>
 80068f2:	230c      	movs	r3, #12
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4638      	mov	r0, r7
 80068f8:	f000 f80e 	bl	8006918 <__malloc_unlock>
 80068fc:	e797      	b.n	800682e <_malloc_r+0x22>
 80068fe:	6025      	str	r5, [r4, #0]
 8006900:	e7dc      	b.n	80068bc <_malloc_r+0xb0>
 8006902:	605b      	str	r3, [r3, #4]
 8006904:	deff      	udf	#255	; 0xff
 8006906:	bf00      	nop
 8006908:	2000042c 	.word	0x2000042c

0800690c <__malloc_lock>:
 800690c:	4801      	ldr	r0, [pc, #4]	; (8006914 <__malloc_lock+0x8>)
 800690e:	f7ff b884 	b.w	8005a1a <__retarget_lock_acquire_recursive>
 8006912:	bf00      	nop
 8006914:	20000428 	.word	0x20000428

08006918 <__malloc_unlock>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__malloc_unlock+0x8>)
 800691a:	f7ff b87f 	b.w	8005a1c <__retarget_lock_release_recursive>
 800691e:	bf00      	nop
 8006920:	20000428 	.word	0x20000428

08006924 <_Balloc>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	69c6      	ldr	r6, [r0, #28]
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
 800692c:	b976      	cbnz	r6, 800694c <_Balloc+0x28>
 800692e:	2010      	movs	r0, #16
 8006930:	f7ff ff44 	bl	80067bc <malloc>
 8006934:	4602      	mov	r2, r0
 8006936:	61e0      	str	r0, [r4, #28]
 8006938:	b920      	cbnz	r0, 8006944 <_Balloc+0x20>
 800693a:	4b18      	ldr	r3, [pc, #96]	; (800699c <_Balloc+0x78>)
 800693c:	4818      	ldr	r0, [pc, #96]	; (80069a0 <_Balloc+0x7c>)
 800693e:	216b      	movs	r1, #107	; 0x6b
 8006940:	f002 fa0e 	bl	8008d60 <__assert_func>
 8006944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006948:	6006      	str	r6, [r0, #0]
 800694a:	60c6      	str	r6, [r0, #12]
 800694c:	69e6      	ldr	r6, [r4, #28]
 800694e:	68f3      	ldr	r3, [r6, #12]
 8006950:	b183      	cbz	r3, 8006974 <_Balloc+0x50>
 8006952:	69e3      	ldr	r3, [r4, #28]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800695a:	b9b8      	cbnz	r0, 800698c <_Balloc+0x68>
 800695c:	2101      	movs	r1, #1
 800695e:	fa01 f605 	lsl.w	r6, r1, r5
 8006962:	1d72      	adds	r2, r6, #5
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4620      	mov	r0, r4
 8006968:	f002 fa18 	bl	8008d9c <_calloc_r>
 800696c:	b160      	cbz	r0, 8006988 <_Balloc+0x64>
 800696e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006972:	e00e      	b.n	8006992 <_Balloc+0x6e>
 8006974:	2221      	movs	r2, #33	; 0x21
 8006976:	2104      	movs	r1, #4
 8006978:	4620      	mov	r0, r4
 800697a:	f002 fa0f 	bl	8008d9c <_calloc_r>
 800697e:	69e3      	ldr	r3, [r4, #28]
 8006980:	60f0      	str	r0, [r6, #12]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e4      	bne.n	8006952 <_Balloc+0x2e>
 8006988:	2000      	movs	r0, #0
 800698a:	bd70      	pop	{r4, r5, r6, pc}
 800698c:	6802      	ldr	r2, [r0, #0]
 800698e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006992:	2300      	movs	r3, #0
 8006994:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006998:	e7f7      	b.n	800698a <_Balloc+0x66>
 800699a:	bf00      	nop
 800699c:	0800a6e0 	.word	0x0800a6e0
 80069a0:	0800a760 	.word	0x0800a760

080069a4 <_Bfree>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	69c6      	ldr	r6, [r0, #28]
 80069a8:	4605      	mov	r5, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b976      	cbnz	r6, 80069cc <_Bfree+0x28>
 80069ae:	2010      	movs	r0, #16
 80069b0:	f7ff ff04 	bl	80067bc <malloc>
 80069b4:	4602      	mov	r2, r0
 80069b6:	61e8      	str	r0, [r5, #28]
 80069b8:	b920      	cbnz	r0, 80069c4 <_Bfree+0x20>
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <_Bfree+0x3c>)
 80069bc:	4809      	ldr	r0, [pc, #36]	; (80069e4 <_Bfree+0x40>)
 80069be:	218f      	movs	r1, #143	; 0x8f
 80069c0:	f002 f9ce 	bl	8008d60 <__assert_func>
 80069c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069c8:	6006      	str	r6, [r0, #0]
 80069ca:	60c6      	str	r6, [r0, #12]
 80069cc:	b13c      	cbz	r4, 80069de <_Bfree+0x3a>
 80069ce:	69eb      	ldr	r3, [r5, #28]
 80069d0:	6862      	ldr	r2, [r4, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069d8:	6021      	str	r1, [r4, #0]
 80069da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069de:	bd70      	pop	{r4, r5, r6, pc}
 80069e0:	0800a6e0 	.word	0x0800a6e0
 80069e4:	0800a760 	.word	0x0800a760

080069e8 <__multadd>:
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	690d      	ldr	r5, [r1, #16]
 80069ee:	4607      	mov	r7, r0
 80069f0:	460c      	mov	r4, r1
 80069f2:	461e      	mov	r6, r3
 80069f4:	f101 0c14 	add.w	ip, r1, #20
 80069f8:	2000      	movs	r0, #0
 80069fa:	f8dc 3000 	ldr.w	r3, [ip]
 80069fe:	b299      	uxth	r1, r3
 8006a00:	fb02 6101 	mla	r1, r2, r1, r6
 8006a04:	0c1e      	lsrs	r6, r3, #16
 8006a06:	0c0b      	lsrs	r3, r1, #16
 8006a08:	fb02 3306 	mla	r3, r2, r6, r3
 8006a0c:	b289      	uxth	r1, r1
 8006a0e:	3001      	adds	r0, #1
 8006a10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006a14:	4285      	cmp	r5, r0
 8006a16:	f84c 1b04 	str.w	r1, [ip], #4
 8006a1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a1e:	dcec      	bgt.n	80069fa <__multadd+0x12>
 8006a20:	b30e      	cbz	r6, 8006a66 <__multadd+0x7e>
 8006a22:	68a3      	ldr	r3, [r4, #8]
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dc19      	bgt.n	8006a5c <__multadd+0x74>
 8006a28:	6861      	ldr	r1, [r4, #4]
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	3101      	adds	r1, #1
 8006a2e:	f7ff ff79 	bl	8006924 <_Balloc>
 8006a32:	4680      	mov	r8, r0
 8006a34:	b928      	cbnz	r0, 8006a42 <__multadd+0x5a>
 8006a36:	4602      	mov	r2, r0
 8006a38:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <__multadd+0x84>)
 8006a3a:	480d      	ldr	r0, [pc, #52]	; (8006a70 <__multadd+0x88>)
 8006a3c:	21ba      	movs	r1, #186	; 0xba
 8006a3e:	f002 f98f 	bl	8008d60 <__assert_func>
 8006a42:	6922      	ldr	r2, [r4, #16]
 8006a44:	3202      	adds	r2, #2
 8006a46:	f104 010c 	add.w	r1, r4, #12
 8006a4a:	0092      	lsls	r2, r2, #2
 8006a4c:	300c      	adds	r0, #12
 8006a4e:	f002 f971 	bl	8008d34 <memcpy>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4638      	mov	r0, r7
 8006a56:	f7ff ffa5 	bl	80069a4 <_Bfree>
 8006a5a:	4644      	mov	r4, r8
 8006a5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a60:	3501      	adds	r5, #1
 8006a62:	615e      	str	r6, [r3, #20]
 8006a64:	6125      	str	r5, [r4, #16]
 8006a66:	4620      	mov	r0, r4
 8006a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6c:	0800a74f 	.word	0x0800a74f
 8006a70:	0800a760 	.word	0x0800a760

08006a74 <__s2b>:
 8006a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	4615      	mov	r5, r2
 8006a7c:	461f      	mov	r7, r3
 8006a7e:	2209      	movs	r2, #9
 8006a80:	3308      	adds	r3, #8
 8006a82:	4606      	mov	r6, r0
 8006a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a88:	2100      	movs	r1, #0
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	db09      	blt.n	8006aa4 <__s2b+0x30>
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7ff ff47 	bl	8006924 <_Balloc>
 8006a96:	b940      	cbnz	r0, 8006aaa <__s2b+0x36>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <__s2b+0x8c>)
 8006a9c:	4819      	ldr	r0, [pc, #100]	; (8006b04 <__s2b+0x90>)
 8006a9e:	21d3      	movs	r1, #211	; 0xd3
 8006aa0:	f002 f95e 	bl	8008d60 <__assert_func>
 8006aa4:	0052      	lsls	r2, r2, #1
 8006aa6:	3101      	adds	r1, #1
 8006aa8:	e7f0      	b.n	8006a8c <__s2b+0x18>
 8006aaa:	9b08      	ldr	r3, [sp, #32]
 8006aac:	6143      	str	r3, [r0, #20]
 8006aae:	2d09      	cmp	r5, #9
 8006ab0:	f04f 0301 	mov.w	r3, #1
 8006ab4:	6103      	str	r3, [r0, #16]
 8006ab6:	dd16      	ble.n	8006ae6 <__s2b+0x72>
 8006ab8:	f104 0909 	add.w	r9, r4, #9
 8006abc:	46c8      	mov	r8, r9
 8006abe:	442c      	add	r4, r5
 8006ac0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006ac4:	4601      	mov	r1, r0
 8006ac6:	3b30      	subs	r3, #48	; 0x30
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ff8c 	bl	80069e8 <__multadd>
 8006ad0:	45a0      	cmp	r8, r4
 8006ad2:	d1f5      	bne.n	8006ac0 <__s2b+0x4c>
 8006ad4:	f1a5 0408 	sub.w	r4, r5, #8
 8006ad8:	444c      	add	r4, r9
 8006ada:	1b2d      	subs	r5, r5, r4
 8006adc:	1963      	adds	r3, r4, r5
 8006ade:	42bb      	cmp	r3, r7
 8006ae0:	db04      	blt.n	8006aec <__s2b+0x78>
 8006ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae6:	340a      	adds	r4, #10
 8006ae8:	2509      	movs	r5, #9
 8006aea:	e7f6      	b.n	8006ada <__s2b+0x66>
 8006aec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006af0:	4601      	mov	r1, r0
 8006af2:	3b30      	subs	r3, #48	; 0x30
 8006af4:	220a      	movs	r2, #10
 8006af6:	4630      	mov	r0, r6
 8006af8:	f7ff ff76 	bl	80069e8 <__multadd>
 8006afc:	e7ee      	b.n	8006adc <__s2b+0x68>
 8006afe:	bf00      	nop
 8006b00:	0800a74f 	.word	0x0800a74f
 8006b04:	0800a760 	.word	0x0800a760

08006b08 <__hi0bits>:
 8006b08:	0c03      	lsrs	r3, r0, #16
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	b9d3      	cbnz	r3, 8006b44 <__hi0bits+0x3c>
 8006b0e:	0400      	lsls	r0, r0, #16
 8006b10:	2310      	movs	r3, #16
 8006b12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b16:	bf04      	itt	eq
 8006b18:	0200      	lsleq	r0, r0, #8
 8006b1a:	3308      	addeq	r3, #8
 8006b1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b20:	bf04      	itt	eq
 8006b22:	0100      	lsleq	r0, r0, #4
 8006b24:	3304      	addeq	r3, #4
 8006b26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b2a:	bf04      	itt	eq
 8006b2c:	0080      	lsleq	r0, r0, #2
 8006b2e:	3302      	addeq	r3, #2
 8006b30:	2800      	cmp	r0, #0
 8006b32:	db05      	blt.n	8006b40 <__hi0bits+0x38>
 8006b34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b38:	f103 0301 	add.w	r3, r3, #1
 8006b3c:	bf08      	it	eq
 8006b3e:	2320      	moveq	r3, #32
 8006b40:	4618      	mov	r0, r3
 8006b42:	4770      	bx	lr
 8006b44:	2300      	movs	r3, #0
 8006b46:	e7e4      	b.n	8006b12 <__hi0bits+0xa>

08006b48 <__lo0bits>:
 8006b48:	6803      	ldr	r3, [r0, #0]
 8006b4a:	f013 0207 	ands.w	r2, r3, #7
 8006b4e:	d00c      	beq.n	8006b6a <__lo0bits+0x22>
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d422      	bmi.n	8006b9a <__lo0bits+0x52>
 8006b54:	079a      	lsls	r2, r3, #30
 8006b56:	bf49      	itett	mi
 8006b58:	085b      	lsrmi	r3, r3, #1
 8006b5a:	089b      	lsrpl	r3, r3, #2
 8006b5c:	6003      	strmi	r3, [r0, #0]
 8006b5e:	2201      	movmi	r2, #1
 8006b60:	bf5c      	itt	pl
 8006b62:	6003      	strpl	r3, [r0, #0]
 8006b64:	2202      	movpl	r2, #2
 8006b66:	4610      	mov	r0, r2
 8006b68:	4770      	bx	lr
 8006b6a:	b299      	uxth	r1, r3
 8006b6c:	b909      	cbnz	r1, 8006b72 <__lo0bits+0x2a>
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	2210      	movs	r2, #16
 8006b72:	b2d9      	uxtb	r1, r3
 8006b74:	b909      	cbnz	r1, 8006b7a <__lo0bits+0x32>
 8006b76:	3208      	adds	r2, #8
 8006b78:	0a1b      	lsrs	r3, r3, #8
 8006b7a:	0719      	lsls	r1, r3, #28
 8006b7c:	bf04      	itt	eq
 8006b7e:	091b      	lsreq	r3, r3, #4
 8006b80:	3204      	addeq	r2, #4
 8006b82:	0799      	lsls	r1, r3, #30
 8006b84:	bf04      	itt	eq
 8006b86:	089b      	lsreq	r3, r3, #2
 8006b88:	3202      	addeq	r2, #2
 8006b8a:	07d9      	lsls	r1, r3, #31
 8006b8c:	d403      	bmi.n	8006b96 <__lo0bits+0x4e>
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	f102 0201 	add.w	r2, r2, #1
 8006b94:	d003      	beq.n	8006b9e <__lo0bits+0x56>
 8006b96:	6003      	str	r3, [r0, #0]
 8006b98:	e7e5      	b.n	8006b66 <__lo0bits+0x1e>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	e7e3      	b.n	8006b66 <__lo0bits+0x1e>
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	e7e1      	b.n	8006b66 <__lo0bits+0x1e>
	...

08006ba4 <__i2b>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2101      	movs	r1, #1
 8006baa:	f7ff febb 	bl	8006924 <_Balloc>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <__i2b+0x1a>
 8006bb2:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <__i2b+0x24>)
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <__i2b+0x28>)
 8006bb6:	f240 1145 	movw	r1, #325	; 0x145
 8006bba:	f002 f8d1 	bl	8008d60 <__assert_func>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6144      	str	r4, [r0, #20]
 8006bc2:	6103      	str	r3, [r0, #16]
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	0800a74f 	.word	0x0800a74f
 8006bcc:	0800a760 	.word	0x0800a760

08006bd0 <__multiply>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4691      	mov	r9, r2
 8006bd6:	690a      	ldr	r2, [r1, #16]
 8006bd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	bfb8      	it	lt
 8006be0:	460b      	movlt	r3, r1
 8006be2:	460c      	mov	r4, r1
 8006be4:	bfbc      	itt	lt
 8006be6:	464c      	movlt	r4, r9
 8006be8:	4699      	movlt	r9, r3
 8006bea:	6927      	ldr	r7, [r4, #16]
 8006bec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bf0:	68a3      	ldr	r3, [r4, #8]
 8006bf2:	6861      	ldr	r1, [r4, #4]
 8006bf4:	eb07 060a 	add.w	r6, r7, sl
 8006bf8:	42b3      	cmp	r3, r6
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	bfb8      	it	lt
 8006bfe:	3101      	addlt	r1, #1
 8006c00:	f7ff fe90 	bl	8006924 <_Balloc>
 8006c04:	b930      	cbnz	r0, 8006c14 <__multiply+0x44>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b44      	ldr	r3, [pc, #272]	; (8006d1c <__multiply+0x14c>)
 8006c0a:	4845      	ldr	r0, [pc, #276]	; (8006d20 <__multiply+0x150>)
 8006c0c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006c10:	f002 f8a6 	bl	8008d60 <__assert_func>
 8006c14:	f100 0514 	add.w	r5, r0, #20
 8006c18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4543      	cmp	r3, r8
 8006c22:	d321      	bcc.n	8006c68 <__multiply+0x98>
 8006c24:	f104 0314 	add.w	r3, r4, #20
 8006c28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c2c:	f109 0314 	add.w	r3, r9, #20
 8006c30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c34:	9202      	str	r2, [sp, #8]
 8006c36:	1b3a      	subs	r2, r7, r4
 8006c38:	3a15      	subs	r2, #21
 8006c3a:	f022 0203 	bic.w	r2, r2, #3
 8006c3e:	3204      	adds	r2, #4
 8006c40:	f104 0115 	add.w	r1, r4, #21
 8006c44:	428f      	cmp	r7, r1
 8006c46:	bf38      	it	cc
 8006c48:	2204      	movcc	r2, #4
 8006c4a:	9201      	str	r2, [sp, #4]
 8006c4c:	9a02      	ldr	r2, [sp, #8]
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d80c      	bhi.n	8006c6e <__multiply+0x9e>
 8006c54:	2e00      	cmp	r6, #0
 8006c56:	dd03      	ble.n	8006c60 <__multiply+0x90>
 8006c58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d05b      	beq.n	8006d18 <__multiply+0x148>
 8006c60:	6106      	str	r6, [r0, #16]
 8006c62:	b005      	add	sp, #20
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	f843 2b04 	str.w	r2, [r3], #4
 8006c6c:	e7d8      	b.n	8006c20 <__multiply+0x50>
 8006c6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c72:	f1ba 0f00 	cmp.w	sl, #0
 8006c76:	d024      	beq.n	8006cc2 <__multiply+0xf2>
 8006c78:	f104 0e14 	add.w	lr, r4, #20
 8006c7c:	46a9      	mov	r9, r5
 8006c7e:	f04f 0c00 	mov.w	ip, #0
 8006c82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c86:	f8d9 1000 	ldr.w	r1, [r9]
 8006c8a:	fa1f fb82 	uxth.w	fp, r2
 8006c8e:	b289      	uxth	r1, r1
 8006c90:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006c98:	f8d9 2000 	ldr.w	r2, [r9]
 8006c9c:	4461      	add	r1, ip
 8006c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ca2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ca6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006caa:	b289      	uxth	r1, r1
 8006cac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cb0:	4577      	cmp	r7, lr
 8006cb2:	f849 1b04 	str.w	r1, [r9], #4
 8006cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cba:	d8e2      	bhi.n	8006c82 <__multiply+0xb2>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	f845 c002 	str.w	ip, [r5, r2]
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	f1b9 0f00 	cmp.w	r9, #0
 8006cce:	d021      	beq.n	8006d14 <__multiply+0x144>
 8006cd0:	6829      	ldr	r1, [r5, #0]
 8006cd2:	f104 0c14 	add.w	ip, r4, #20
 8006cd6:	46ae      	mov	lr, r5
 8006cd8:	f04f 0a00 	mov.w	sl, #0
 8006cdc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ce0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ce4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ce8:	4452      	add	r2, sl
 8006cea:	b289      	uxth	r1, r1
 8006cec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cf0:	f84e 1b04 	str.w	r1, [lr], #4
 8006cf4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006cf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8006d00:	fb09 110a 	mla	r1, r9, sl, r1
 8006d04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006d08:	4567      	cmp	r7, ip
 8006d0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d0e:	d8e5      	bhi.n	8006cdc <__multiply+0x10c>
 8006d10:	9a01      	ldr	r2, [sp, #4]
 8006d12:	50a9      	str	r1, [r5, r2]
 8006d14:	3504      	adds	r5, #4
 8006d16:	e799      	b.n	8006c4c <__multiply+0x7c>
 8006d18:	3e01      	subs	r6, #1
 8006d1a:	e79b      	b.n	8006c54 <__multiply+0x84>
 8006d1c:	0800a74f 	.word	0x0800a74f
 8006d20:	0800a760 	.word	0x0800a760

08006d24 <__pow5mult>:
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4615      	mov	r5, r2
 8006d2a:	f012 0203 	ands.w	r2, r2, #3
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460f      	mov	r7, r1
 8006d32:	d007      	beq.n	8006d44 <__pow5mult+0x20>
 8006d34:	4c25      	ldr	r4, [pc, #148]	; (8006dcc <__pow5mult+0xa8>)
 8006d36:	3a01      	subs	r2, #1
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3e:	f7ff fe53 	bl	80069e8 <__multadd>
 8006d42:	4607      	mov	r7, r0
 8006d44:	10ad      	asrs	r5, r5, #2
 8006d46:	d03d      	beq.n	8006dc4 <__pow5mult+0xa0>
 8006d48:	69f4      	ldr	r4, [r6, #28]
 8006d4a:	b97c      	cbnz	r4, 8006d6c <__pow5mult+0x48>
 8006d4c:	2010      	movs	r0, #16
 8006d4e:	f7ff fd35 	bl	80067bc <malloc>
 8006d52:	4602      	mov	r2, r0
 8006d54:	61f0      	str	r0, [r6, #28]
 8006d56:	b928      	cbnz	r0, 8006d64 <__pow5mult+0x40>
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <__pow5mult+0xac>)
 8006d5a:	481e      	ldr	r0, [pc, #120]	; (8006dd4 <__pow5mult+0xb0>)
 8006d5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006d60:	f001 fffe 	bl	8008d60 <__assert_func>
 8006d64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d68:	6004      	str	r4, [r0, #0]
 8006d6a:	60c4      	str	r4, [r0, #12]
 8006d6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006d70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d74:	b94c      	cbnz	r4, 8006d8a <__pow5mult+0x66>
 8006d76:	f240 2171 	movw	r1, #625	; 0x271
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f7ff ff12 	bl	8006ba4 <__i2b>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d86:	4604      	mov	r4, r0
 8006d88:	6003      	str	r3, [r0, #0]
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	07eb      	lsls	r3, r5, #31
 8006d90:	d50a      	bpl.n	8006da8 <__pow5mult+0x84>
 8006d92:	4639      	mov	r1, r7
 8006d94:	4622      	mov	r2, r4
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff ff1a 	bl	8006bd0 <__multiply>
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4680      	mov	r8, r0
 8006da0:	4630      	mov	r0, r6
 8006da2:	f7ff fdff 	bl	80069a4 <_Bfree>
 8006da6:	4647      	mov	r7, r8
 8006da8:	106d      	asrs	r5, r5, #1
 8006daa:	d00b      	beq.n	8006dc4 <__pow5mult+0xa0>
 8006dac:	6820      	ldr	r0, [r4, #0]
 8006dae:	b938      	cbnz	r0, 8006dc0 <__pow5mult+0x9c>
 8006db0:	4622      	mov	r2, r4
 8006db2:	4621      	mov	r1, r4
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff ff0b 	bl	8006bd0 <__multiply>
 8006dba:	6020      	str	r0, [r4, #0]
 8006dbc:	f8c0 9000 	str.w	r9, [r0]
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	e7e4      	b.n	8006d8e <__pow5mult+0x6a>
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dca:	bf00      	nop
 8006dcc:	0800a8b0 	.word	0x0800a8b0
 8006dd0:	0800a6e0 	.word	0x0800a6e0
 8006dd4:	0800a760 	.word	0x0800a760

08006dd8 <__lshift>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	6849      	ldr	r1, [r1, #4]
 8006de0:	6923      	ldr	r3, [r4, #16]
 8006de2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	4607      	mov	r7, r0
 8006dea:	4691      	mov	r9, r2
 8006dec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df0:	f108 0601 	add.w	r6, r8, #1
 8006df4:	42b3      	cmp	r3, r6
 8006df6:	db0b      	blt.n	8006e10 <__lshift+0x38>
 8006df8:	4638      	mov	r0, r7
 8006dfa:	f7ff fd93 	bl	8006924 <_Balloc>
 8006dfe:	4605      	mov	r5, r0
 8006e00:	b948      	cbnz	r0, 8006e16 <__lshift+0x3e>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <__lshift+0xd0>)
 8006e06:	4829      	ldr	r0, [pc, #164]	; (8006eac <__lshift+0xd4>)
 8006e08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006e0c:	f001 ffa8 	bl	8008d60 <__assert_func>
 8006e10:	3101      	adds	r1, #1
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	e7ee      	b.n	8006df4 <__lshift+0x1c>
 8006e16:	2300      	movs	r3, #0
 8006e18:	f100 0114 	add.w	r1, r0, #20
 8006e1c:	f100 0210 	add.w	r2, r0, #16
 8006e20:	4618      	mov	r0, r3
 8006e22:	4553      	cmp	r3, sl
 8006e24:	db33      	blt.n	8006e8e <__lshift+0xb6>
 8006e26:	6920      	ldr	r0, [r4, #16]
 8006e28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e2c:	f104 0314 	add.w	r3, r4, #20
 8006e30:	f019 091f 	ands.w	r9, r9, #31
 8006e34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e3c:	d02b      	beq.n	8006e96 <__lshift+0xbe>
 8006e3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006e42:	468a      	mov	sl, r1
 8006e44:	2200      	movs	r2, #0
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	fa00 f009 	lsl.w	r0, r0, r9
 8006e4c:	4310      	orrs	r0, r2
 8006e4e:	f84a 0b04 	str.w	r0, [sl], #4
 8006e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e56:	459c      	cmp	ip, r3
 8006e58:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e5c:	d8f3      	bhi.n	8006e46 <__lshift+0x6e>
 8006e5e:	ebac 0304 	sub.w	r3, ip, r4
 8006e62:	3b15      	subs	r3, #21
 8006e64:	f023 0303 	bic.w	r3, r3, #3
 8006e68:	3304      	adds	r3, #4
 8006e6a:	f104 0015 	add.w	r0, r4, #21
 8006e6e:	4584      	cmp	ip, r0
 8006e70:	bf38      	it	cc
 8006e72:	2304      	movcc	r3, #4
 8006e74:	50ca      	str	r2, [r1, r3]
 8006e76:	b10a      	cbz	r2, 8006e7c <__lshift+0xa4>
 8006e78:	f108 0602 	add.w	r6, r8, #2
 8006e7c:	3e01      	subs	r6, #1
 8006e7e:	4638      	mov	r0, r7
 8006e80:	612e      	str	r6, [r5, #16]
 8006e82:	4621      	mov	r1, r4
 8006e84:	f7ff fd8e 	bl	80069a4 <_Bfree>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e92:	3301      	adds	r3, #1
 8006e94:	e7c5      	b.n	8006e22 <__lshift+0x4a>
 8006e96:	3904      	subs	r1, #4
 8006e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ea0:	459c      	cmp	ip, r3
 8006ea2:	d8f9      	bhi.n	8006e98 <__lshift+0xc0>
 8006ea4:	e7ea      	b.n	8006e7c <__lshift+0xa4>
 8006ea6:	bf00      	nop
 8006ea8:	0800a74f 	.word	0x0800a74f
 8006eac:	0800a760 	.word	0x0800a760

08006eb0 <__mcmp>:
 8006eb0:	b530      	push	{r4, r5, lr}
 8006eb2:	6902      	ldr	r2, [r0, #16]
 8006eb4:	690c      	ldr	r4, [r1, #16]
 8006eb6:	1b12      	subs	r2, r2, r4
 8006eb8:	d10e      	bne.n	8006ed8 <__mcmp+0x28>
 8006eba:	f100 0314 	add.w	r3, r0, #20
 8006ebe:	3114      	adds	r1, #20
 8006ec0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ec4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ec8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ecc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ed0:	42a5      	cmp	r5, r4
 8006ed2:	d003      	beq.n	8006edc <__mcmp+0x2c>
 8006ed4:	d305      	bcc.n	8006ee2 <__mcmp+0x32>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4610      	mov	r0, r2
 8006eda:	bd30      	pop	{r4, r5, pc}
 8006edc:	4283      	cmp	r3, r0
 8006ede:	d3f3      	bcc.n	8006ec8 <__mcmp+0x18>
 8006ee0:	e7fa      	b.n	8006ed8 <__mcmp+0x28>
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	e7f7      	b.n	8006ed8 <__mcmp+0x28>

08006ee8 <__mdiff>:
 8006ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	460c      	mov	r4, r1
 8006eee:	4606      	mov	r6, r0
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4690      	mov	r8, r2
 8006ef6:	f7ff ffdb 	bl	8006eb0 <__mcmp>
 8006efa:	1e05      	subs	r5, r0, #0
 8006efc:	d110      	bne.n	8006f20 <__mdiff+0x38>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff fd0f 	bl	8006924 <_Balloc>
 8006f06:	b930      	cbnz	r0, 8006f16 <__mdiff+0x2e>
 8006f08:	4b3a      	ldr	r3, [pc, #232]	; (8006ff4 <__mdiff+0x10c>)
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	f240 2137 	movw	r1, #567	; 0x237
 8006f10:	4839      	ldr	r0, [pc, #228]	; (8006ff8 <__mdiff+0x110>)
 8006f12:	f001 ff25 	bl	8008d60 <__assert_func>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	bfa4      	itt	ge
 8006f22:	4643      	movge	r3, r8
 8006f24:	46a0      	movge	r8, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f2c:	bfa6      	itte	ge
 8006f2e:	461c      	movge	r4, r3
 8006f30:	2500      	movge	r5, #0
 8006f32:	2501      	movlt	r5, #1
 8006f34:	f7ff fcf6 	bl	8006924 <_Balloc>
 8006f38:	b920      	cbnz	r0, 8006f44 <__mdiff+0x5c>
 8006f3a:	4b2e      	ldr	r3, [pc, #184]	; (8006ff4 <__mdiff+0x10c>)
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	f240 2145 	movw	r1, #581	; 0x245
 8006f42:	e7e5      	b.n	8006f10 <__mdiff+0x28>
 8006f44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f48:	6926      	ldr	r6, [r4, #16]
 8006f4a:	60c5      	str	r5, [r0, #12]
 8006f4c:	f104 0914 	add.w	r9, r4, #20
 8006f50:	f108 0514 	add.w	r5, r8, #20
 8006f54:	f100 0e14 	add.w	lr, r0, #20
 8006f58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f60:	f108 0210 	add.w	r2, r8, #16
 8006f64:	46f2      	mov	sl, lr
 8006f66:	2100      	movs	r1, #0
 8006f68:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f70:	fa11 f88b 	uxtah	r8, r1, fp
 8006f74:	b299      	uxth	r1, r3
 8006f76:	0c1b      	lsrs	r3, r3, #16
 8006f78:	eba8 0801 	sub.w	r8, r8, r1
 8006f7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f84:	fa1f f888 	uxth.w	r8, r8
 8006f88:	1419      	asrs	r1, r3, #16
 8006f8a:	454e      	cmp	r6, r9
 8006f8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f90:	f84a 3b04 	str.w	r3, [sl], #4
 8006f94:	d8e8      	bhi.n	8006f68 <__mdiff+0x80>
 8006f96:	1b33      	subs	r3, r6, r4
 8006f98:	3b15      	subs	r3, #21
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	3415      	adds	r4, #21
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	bf38      	it	cc
 8006fa6:	2304      	movcc	r3, #4
 8006fa8:	441d      	add	r5, r3
 8006faa:	4473      	add	r3, lr
 8006fac:	469e      	mov	lr, r3
 8006fae:	462e      	mov	r6, r5
 8006fb0:	4566      	cmp	r6, ip
 8006fb2:	d30e      	bcc.n	8006fd2 <__mdiff+0xea>
 8006fb4:	f10c 0203 	add.w	r2, ip, #3
 8006fb8:	1b52      	subs	r2, r2, r5
 8006fba:	f022 0203 	bic.w	r2, r2, #3
 8006fbe:	3d03      	subs	r5, #3
 8006fc0:	45ac      	cmp	ip, r5
 8006fc2:	bf38      	it	cc
 8006fc4:	2200      	movcc	r2, #0
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fcc:	b17a      	cbz	r2, 8006fee <__mdiff+0x106>
 8006fce:	6107      	str	r7, [r0, #16]
 8006fd0:	e7a4      	b.n	8006f1c <__mdiff+0x34>
 8006fd2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fd6:	fa11 f288 	uxtah	r2, r1, r8
 8006fda:	1414      	asrs	r4, r2, #16
 8006fdc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006fe6:	f84e 2b04 	str.w	r2, [lr], #4
 8006fea:	1421      	asrs	r1, r4, #16
 8006fec:	e7e0      	b.n	8006fb0 <__mdiff+0xc8>
 8006fee:	3f01      	subs	r7, #1
 8006ff0:	e7ea      	b.n	8006fc8 <__mdiff+0xe0>
 8006ff2:	bf00      	nop
 8006ff4:	0800a74f 	.word	0x0800a74f
 8006ff8:	0800a760 	.word	0x0800a760

08006ffc <__ulp>:
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	ed8d 0b00 	vstr	d0, [sp]
 8007002:	9a01      	ldr	r2, [sp, #4]
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <__ulp+0x48>)
 8007006:	4013      	ands	r3, r2
 8007008:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800700c:	2b00      	cmp	r3, #0
 800700e:	dc08      	bgt.n	8007022 <__ulp+0x26>
 8007010:	425b      	negs	r3, r3
 8007012:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007016:	ea4f 5223 	mov.w	r2, r3, asr #20
 800701a:	da04      	bge.n	8007026 <__ulp+0x2a>
 800701c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007020:	4113      	asrs	r3, r2
 8007022:	2200      	movs	r2, #0
 8007024:	e008      	b.n	8007038 <__ulp+0x3c>
 8007026:	f1a2 0314 	sub.w	r3, r2, #20
 800702a:	2b1e      	cmp	r3, #30
 800702c:	bfda      	itte	le
 800702e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007032:	40da      	lsrle	r2, r3
 8007034:	2201      	movgt	r2, #1
 8007036:	2300      	movs	r3, #0
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	ec41 0b10 	vmov	d0, r0, r1
 8007040:	b002      	add	sp, #8
 8007042:	4770      	bx	lr
 8007044:	7ff00000 	.word	0x7ff00000

08007048 <__b2d>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	6906      	ldr	r6, [r0, #16]
 800704e:	f100 0814 	add.w	r8, r0, #20
 8007052:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007056:	1f37      	subs	r7, r6, #4
 8007058:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800705c:	4610      	mov	r0, r2
 800705e:	f7ff fd53 	bl	8006b08 <__hi0bits>
 8007062:	f1c0 0320 	rsb	r3, r0, #32
 8007066:	280a      	cmp	r0, #10
 8007068:	600b      	str	r3, [r1, #0]
 800706a:	491b      	ldr	r1, [pc, #108]	; (80070d8 <__b2d+0x90>)
 800706c:	dc15      	bgt.n	800709a <__b2d+0x52>
 800706e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007072:	fa22 f30c 	lsr.w	r3, r2, ip
 8007076:	45b8      	cmp	r8, r7
 8007078:	ea43 0501 	orr.w	r5, r3, r1
 800707c:	bf34      	ite	cc
 800707e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007082:	2300      	movcs	r3, #0
 8007084:	3015      	adds	r0, #21
 8007086:	fa02 f000 	lsl.w	r0, r2, r0
 800708a:	fa23 f30c 	lsr.w	r3, r3, ip
 800708e:	4303      	orrs	r3, r0
 8007090:	461c      	mov	r4, r3
 8007092:	ec45 4b10 	vmov	d0, r4, r5
 8007096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709a:	45b8      	cmp	r8, r7
 800709c:	bf3a      	itte	cc
 800709e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80070a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80070a6:	2300      	movcs	r3, #0
 80070a8:	380b      	subs	r0, #11
 80070aa:	d012      	beq.n	80070d2 <__b2d+0x8a>
 80070ac:	f1c0 0120 	rsb	r1, r0, #32
 80070b0:	fa23 f401 	lsr.w	r4, r3, r1
 80070b4:	4082      	lsls	r2, r0
 80070b6:	4322      	orrs	r2, r4
 80070b8:	4547      	cmp	r7, r8
 80070ba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80070be:	bf8c      	ite	hi
 80070c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80070c4:	2200      	movls	r2, #0
 80070c6:	4083      	lsls	r3, r0
 80070c8:	40ca      	lsrs	r2, r1
 80070ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070ce:	4313      	orrs	r3, r2
 80070d0:	e7de      	b.n	8007090 <__b2d+0x48>
 80070d2:	ea42 0501 	orr.w	r5, r2, r1
 80070d6:	e7db      	b.n	8007090 <__b2d+0x48>
 80070d8:	3ff00000 	.word	0x3ff00000

080070dc <__d2b>:
 80070dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070e0:	460f      	mov	r7, r1
 80070e2:	2101      	movs	r1, #1
 80070e4:	ec59 8b10 	vmov	r8, r9, d0
 80070e8:	4616      	mov	r6, r2
 80070ea:	f7ff fc1b 	bl	8006924 <_Balloc>
 80070ee:	4604      	mov	r4, r0
 80070f0:	b930      	cbnz	r0, 8007100 <__d2b+0x24>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b24      	ldr	r3, [pc, #144]	; (8007188 <__d2b+0xac>)
 80070f6:	4825      	ldr	r0, [pc, #148]	; (800718c <__d2b+0xb0>)
 80070f8:	f240 310f 	movw	r1, #783	; 0x30f
 80070fc:	f001 fe30 	bl	8008d60 <__assert_func>
 8007100:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007108:	bb2d      	cbnz	r5, 8007156 <__d2b+0x7a>
 800710a:	9301      	str	r3, [sp, #4]
 800710c:	f1b8 0300 	subs.w	r3, r8, #0
 8007110:	d026      	beq.n	8007160 <__d2b+0x84>
 8007112:	4668      	mov	r0, sp
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	f7ff fd17 	bl	8006b48 <__lo0bits>
 800711a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800711e:	b1e8      	cbz	r0, 800715c <__d2b+0x80>
 8007120:	f1c0 0320 	rsb	r3, r0, #32
 8007124:	fa02 f303 	lsl.w	r3, r2, r3
 8007128:	430b      	orrs	r3, r1
 800712a:	40c2      	lsrs	r2, r0
 800712c:	6163      	str	r3, [r4, #20]
 800712e:	9201      	str	r2, [sp, #4]
 8007130:	9b01      	ldr	r3, [sp, #4]
 8007132:	61a3      	str	r3, [r4, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	bf14      	ite	ne
 8007138:	2202      	movne	r2, #2
 800713a:	2201      	moveq	r2, #1
 800713c:	6122      	str	r2, [r4, #16]
 800713e:	b1bd      	cbz	r5, 8007170 <__d2b+0x94>
 8007140:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007144:	4405      	add	r5, r0
 8007146:	603d      	str	r5, [r7, #0]
 8007148:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	4620      	mov	r0, r4
 8007150:	b003      	add	sp, #12
 8007152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800715a:	e7d6      	b.n	800710a <__d2b+0x2e>
 800715c:	6161      	str	r1, [r4, #20]
 800715e:	e7e7      	b.n	8007130 <__d2b+0x54>
 8007160:	a801      	add	r0, sp, #4
 8007162:	f7ff fcf1 	bl	8006b48 <__lo0bits>
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	6163      	str	r3, [r4, #20]
 800716a:	3020      	adds	r0, #32
 800716c:	2201      	movs	r2, #1
 800716e:	e7e5      	b.n	800713c <__d2b+0x60>
 8007170:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007178:	6038      	str	r0, [r7, #0]
 800717a:	6918      	ldr	r0, [r3, #16]
 800717c:	f7ff fcc4 	bl	8006b08 <__hi0bits>
 8007180:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007184:	e7e2      	b.n	800714c <__d2b+0x70>
 8007186:	bf00      	nop
 8007188:	0800a74f 	.word	0x0800a74f
 800718c:	0800a760 	.word	0x0800a760

08007190 <__ratio>:
 8007190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	4688      	mov	r8, r1
 8007196:	4669      	mov	r1, sp
 8007198:	4681      	mov	r9, r0
 800719a:	f7ff ff55 	bl	8007048 <__b2d>
 800719e:	a901      	add	r1, sp, #4
 80071a0:	4640      	mov	r0, r8
 80071a2:	ec55 4b10 	vmov	r4, r5, d0
 80071a6:	f7ff ff4f 	bl	8007048 <__b2d>
 80071aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80071b2:	eba3 0c02 	sub.w	ip, r3, r2
 80071b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80071c0:	ec51 0b10 	vmov	r0, r1, d0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	bfd6      	itet	le
 80071c8:	460a      	movle	r2, r1
 80071ca:	462a      	movgt	r2, r5
 80071cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80071d0:	468b      	mov	fp, r1
 80071d2:	462f      	mov	r7, r5
 80071d4:	bfd4      	ite	le
 80071d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80071da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80071de:	4620      	mov	r0, r4
 80071e0:	ee10 2a10 	vmov	r2, s0
 80071e4:	465b      	mov	r3, fp
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fb30 	bl	800084c <__aeabi_ddiv>
 80071ec:	ec41 0b10 	vmov	d0, r0, r1
 80071f0:	b003      	add	sp, #12
 80071f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071f6 <__copybits>:
 80071f6:	3901      	subs	r1, #1
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	1149      	asrs	r1, r1, #5
 80071fc:	6914      	ldr	r4, [r2, #16]
 80071fe:	3101      	adds	r1, #1
 8007200:	f102 0314 	add.w	r3, r2, #20
 8007204:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007208:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800720c:	1f05      	subs	r5, r0, #4
 800720e:	42a3      	cmp	r3, r4
 8007210:	d30c      	bcc.n	800722c <__copybits+0x36>
 8007212:	1aa3      	subs	r3, r4, r2
 8007214:	3b11      	subs	r3, #17
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	3211      	adds	r2, #17
 800721c:	42a2      	cmp	r2, r4
 800721e:	bf88      	it	hi
 8007220:	2300      	movhi	r3, #0
 8007222:	4418      	add	r0, r3
 8007224:	2300      	movs	r3, #0
 8007226:	4288      	cmp	r0, r1
 8007228:	d305      	bcc.n	8007236 <__copybits+0x40>
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007230:	f845 6f04 	str.w	r6, [r5, #4]!
 8007234:	e7eb      	b.n	800720e <__copybits+0x18>
 8007236:	f840 3b04 	str.w	r3, [r0], #4
 800723a:	e7f4      	b.n	8007226 <__copybits+0x30>

0800723c <__any_on>:
 800723c:	f100 0214 	add.w	r2, r0, #20
 8007240:	6900      	ldr	r0, [r0, #16]
 8007242:	114b      	asrs	r3, r1, #5
 8007244:	4298      	cmp	r0, r3
 8007246:	b510      	push	{r4, lr}
 8007248:	db11      	blt.n	800726e <__any_on+0x32>
 800724a:	dd0a      	ble.n	8007262 <__any_on+0x26>
 800724c:	f011 011f 	ands.w	r1, r1, #31
 8007250:	d007      	beq.n	8007262 <__any_on+0x26>
 8007252:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007256:	fa24 f001 	lsr.w	r0, r4, r1
 800725a:	fa00 f101 	lsl.w	r1, r0, r1
 800725e:	428c      	cmp	r4, r1
 8007260:	d10b      	bne.n	800727a <__any_on+0x3e>
 8007262:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007266:	4293      	cmp	r3, r2
 8007268:	d803      	bhi.n	8007272 <__any_on+0x36>
 800726a:	2000      	movs	r0, #0
 800726c:	bd10      	pop	{r4, pc}
 800726e:	4603      	mov	r3, r0
 8007270:	e7f7      	b.n	8007262 <__any_on+0x26>
 8007272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007276:	2900      	cmp	r1, #0
 8007278:	d0f5      	beq.n	8007266 <__any_on+0x2a>
 800727a:	2001      	movs	r0, #1
 800727c:	e7f6      	b.n	800726c <__any_on+0x30>

0800727e <sulp>:
 800727e:	b570      	push	{r4, r5, r6, lr}
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	ec45 4b10 	vmov	d0, r4, r5
 8007288:	4616      	mov	r6, r2
 800728a:	f7ff feb7 	bl	8006ffc <__ulp>
 800728e:	ec51 0b10 	vmov	r0, r1, d0
 8007292:	b17e      	cbz	r6, 80072b4 <sulp+0x36>
 8007294:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007298:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800729c:	2b00      	cmp	r3, #0
 800729e:	dd09      	ble.n	80072b4 <sulp+0x36>
 80072a0:	051b      	lsls	r3, r3, #20
 80072a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072a6:	2400      	movs	r4, #0
 80072a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072ac:	4622      	mov	r2, r4
 80072ae:	462b      	mov	r3, r5
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072b8 <_strtod_l>:
 80072b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072bc:	ed2d 8b02 	vpush	{d8}
 80072c0:	b09b      	sub	sp, #108	; 0x6c
 80072c2:	4604      	mov	r4, r0
 80072c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80072c6:	2200      	movs	r2, #0
 80072c8:	9216      	str	r2, [sp, #88]	; 0x58
 80072ca:	460d      	mov	r5, r1
 80072cc:	f04f 0800 	mov.w	r8, #0
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	460a      	mov	r2, r1
 80072d6:	9215      	str	r2, [sp, #84]	; 0x54
 80072d8:	7811      	ldrb	r1, [r2, #0]
 80072da:	292b      	cmp	r1, #43	; 0x2b
 80072dc:	d04c      	beq.n	8007378 <_strtod_l+0xc0>
 80072de:	d83a      	bhi.n	8007356 <_strtod_l+0x9e>
 80072e0:	290d      	cmp	r1, #13
 80072e2:	d834      	bhi.n	800734e <_strtod_l+0x96>
 80072e4:	2908      	cmp	r1, #8
 80072e6:	d834      	bhi.n	8007352 <_strtod_l+0x9a>
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d03d      	beq.n	8007368 <_strtod_l+0xb0>
 80072ec:	2200      	movs	r2, #0
 80072ee:	920a      	str	r2, [sp, #40]	; 0x28
 80072f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80072f2:	7832      	ldrb	r2, [r6, #0]
 80072f4:	2a30      	cmp	r2, #48	; 0x30
 80072f6:	f040 80b4 	bne.w	8007462 <_strtod_l+0x1aa>
 80072fa:	7872      	ldrb	r2, [r6, #1]
 80072fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007300:	2a58      	cmp	r2, #88	; 0x58
 8007302:	d170      	bne.n	80073e6 <_strtod_l+0x12e>
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	ab16      	add	r3, sp, #88	; 0x58
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4a8e      	ldr	r2, [pc, #568]	; (8007548 <_strtod_l+0x290>)
 8007310:	ab17      	add	r3, sp, #92	; 0x5c
 8007312:	a915      	add	r1, sp, #84	; 0x54
 8007314:	4620      	mov	r0, r4
 8007316:	f001 fdbf 	bl	8008e98 <__gethex>
 800731a:	f010 070f 	ands.w	r7, r0, #15
 800731e:	4605      	mov	r5, r0
 8007320:	d005      	beq.n	800732e <_strtod_l+0x76>
 8007322:	2f06      	cmp	r7, #6
 8007324:	d12a      	bne.n	800737c <_strtod_l+0xc4>
 8007326:	3601      	adds	r6, #1
 8007328:	2300      	movs	r3, #0
 800732a:	9615      	str	r6, [sp, #84]	; 0x54
 800732c:	930a      	str	r3, [sp, #40]	; 0x28
 800732e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 857f 	bne.w	8007e34 <_strtod_l+0xb7c>
 8007336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007338:	b1db      	cbz	r3, 8007372 <_strtod_l+0xba>
 800733a:	4642      	mov	r2, r8
 800733c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007340:	ec43 2b10 	vmov	d0, r2, r3
 8007344:	b01b      	add	sp, #108	; 0x6c
 8007346:	ecbd 8b02 	vpop	{d8}
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	2920      	cmp	r1, #32
 8007350:	d1cc      	bne.n	80072ec <_strtod_l+0x34>
 8007352:	3201      	adds	r2, #1
 8007354:	e7bf      	b.n	80072d6 <_strtod_l+0x1e>
 8007356:	292d      	cmp	r1, #45	; 0x2d
 8007358:	d1c8      	bne.n	80072ec <_strtod_l+0x34>
 800735a:	2101      	movs	r1, #1
 800735c:	910a      	str	r1, [sp, #40]	; 0x28
 800735e:	1c51      	adds	r1, r2, #1
 8007360:	9115      	str	r1, [sp, #84]	; 0x54
 8007362:	7852      	ldrb	r2, [r2, #1]
 8007364:	2a00      	cmp	r2, #0
 8007366:	d1c3      	bne.n	80072f0 <_strtod_l+0x38>
 8007368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800736a:	9515      	str	r5, [sp, #84]	; 0x54
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 855f 	bne.w	8007e30 <_strtod_l+0xb78>
 8007372:	4642      	mov	r2, r8
 8007374:	464b      	mov	r3, r9
 8007376:	e7e3      	b.n	8007340 <_strtod_l+0x88>
 8007378:	2100      	movs	r1, #0
 800737a:	e7ef      	b.n	800735c <_strtod_l+0xa4>
 800737c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800737e:	b13a      	cbz	r2, 8007390 <_strtod_l+0xd8>
 8007380:	2135      	movs	r1, #53	; 0x35
 8007382:	a818      	add	r0, sp, #96	; 0x60
 8007384:	f7ff ff37 	bl	80071f6 <__copybits>
 8007388:	9916      	ldr	r1, [sp, #88]	; 0x58
 800738a:	4620      	mov	r0, r4
 800738c:	f7ff fb0a 	bl	80069a4 <_Bfree>
 8007390:	3f01      	subs	r7, #1
 8007392:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007394:	2f04      	cmp	r7, #4
 8007396:	d806      	bhi.n	80073a6 <_strtod_l+0xee>
 8007398:	e8df f007 	tbb	[pc, r7]
 800739c:	201d0314 	.word	0x201d0314
 80073a0:	14          	.byte	0x14
 80073a1:	00          	.byte	0x00
 80073a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80073a6:	05e9      	lsls	r1, r5, #23
 80073a8:	bf48      	it	mi
 80073aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80073ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073b2:	0d1b      	lsrs	r3, r3, #20
 80073b4:	051b      	lsls	r3, r3, #20
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1b9      	bne.n	800732e <_strtod_l+0x76>
 80073ba:	f7fe fb03 	bl	80059c4 <__errno>
 80073be:	2322      	movs	r3, #34	; 0x22
 80073c0:	6003      	str	r3, [r0, #0]
 80073c2:	e7b4      	b.n	800732e <_strtod_l+0x76>
 80073c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80073c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80073d4:	e7e7      	b.n	80073a6 <_strtod_l+0xee>
 80073d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007550 <_strtod_l+0x298>
 80073da:	e7e4      	b.n	80073a6 <_strtod_l+0xee>
 80073dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80073e0:	f04f 38ff 	mov.w	r8, #4294967295
 80073e4:	e7df      	b.n	80073a6 <_strtod_l+0xee>
 80073e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	9215      	str	r2, [sp, #84]	; 0x54
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b30      	cmp	r3, #48	; 0x30
 80073f0:	d0f9      	beq.n	80073e6 <_strtod_l+0x12e>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d09b      	beq.n	800732e <_strtod_l+0x76>
 80073f6:	2301      	movs	r3, #1
 80073f8:	f04f 0a00 	mov.w	sl, #0
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007400:	930b      	str	r3, [sp, #44]	; 0x2c
 8007402:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007406:	46d3      	mov	fp, sl
 8007408:	220a      	movs	r2, #10
 800740a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800740c:	7806      	ldrb	r6, [r0, #0]
 800740e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007412:	b2d9      	uxtb	r1, r3
 8007414:	2909      	cmp	r1, #9
 8007416:	d926      	bls.n	8007466 <_strtod_l+0x1ae>
 8007418:	494c      	ldr	r1, [pc, #304]	; (800754c <_strtod_l+0x294>)
 800741a:	2201      	movs	r2, #1
 800741c:	f001 fc67 	bl	8008cee <strncmp>
 8007420:	2800      	cmp	r0, #0
 8007422:	d030      	beq.n	8007486 <_strtod_l+0x1ce>
 8007424:	2000      	movs	r0, #0
 8007426:	4632      	mov	r2, r6
 8007428:	9005      	str	r0, [sp, #20]
 800742a:	465e      	mov	r6, fp
 800742c:	4603      	mov	r3, r0
 800742e:	2a65      	cmp	r2, #101	; 0x65
 8007430:	d001      	beq.n	8007436 <_strtod_l+0x17e>
 8007432:	2a45      	cmp	r2, #69	; 0x45
 8007434:	d113      	bne.n	800745e <_strtod_l+0x1a6>
 8007436:	b91e      	cbnz	r6, 8007440 <_strtod_l+0x188>
 8007438:	9a04      	ldr	r2, [sp, #16]
 800743a:	4302      	orrs	r2, r0
 800743c:	d094      	beq.n	8007368 <_strtod_l+0xb0>
 800743e:	2600      	movs	r6, #0
 8007440:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007442:	1c6a      	adds	r2, r5, #1
 8007444:	9215      	str	r2, [sp, #84]	; 0x54
 8007446:	786a      	ldrb	r2, [r5, #1]
 8007448:	2a2b      	cmp	r2, #43	; 0x2b
 800744a:	d074      	beq.n	8007536 <_strtod_l+0x27e>
 800744c:	2a2d      	cmp	r2, #45	; 0x2d
 800744e:	d078      	beq.n	8007542 <_strtod_l+0x28a>
 8007450:	f04f 0c00 	mov.w	ip, #0
 8007454:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007458:	2909      	cmp	r1, #9
 800745a:	d97f      	bls.n	800755c <_strtod_l+0x2a4>
 800745c:	9515      	str	r5, [sp, #84]	; 0x54
 800745e:	2700      	movs	r7, #0
 8007460:	e09e      	b.n	80075a0 <_strtod_l+0x2e8>
 8007462:	2300      	movs	r3, #0
 8007464:	e7c8      	b.n	80073f8 <_strtod_l+0x140>
 8007466:	f1bb 0f08 	cmp.w	fp, #8
 800746a:	bfd8      	it	le
 800746c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800746e:	f100 0001 	add.w	r0, r0, #1
 8007472:	bfda      	itte	le
 8007474:	fb02 3301 	mlale	r3, r2, r1, r3
 8007478:	9309      	strle	r3, [sp, #36]	; 0x24
 800747a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800747e:	f10b 0b01 	add.w	fp, fp, #1
 8007482:	9015      	str	r0, [sp, #84]	; 0x54
 8007484:	e7c1      	b.n	800740a <_strtod_l+0x152>
 8007486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	9215      	str	r2, [sp, #84]	; 0x54
 800748c:	785a      	ldrb	r2, [r3, #1]
 800748e:	f1bb 0f00 	cmp.w	fp, #0
 8007492:	d037      	beq.n	8007504 <_strtod_l+0x24c>
 8007494:	9005      	str	r0, [sp, #20]
 8007496:	465e      	mov	r6, fp
 8007498:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800749c:	2b09      	cmp	r3, #9
 800749e:	d912      	bls.n	80074c6 <_strtod_l+0x20e>
 80074a0:	2301      	movs	r3, #1
 80074a2:	e7c4      	b.n	800742e <_strtod_l+0x176>
 80074a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	9215      	str	r2, [sp, #84]	; 0x54
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	3001      	adds	r0, #1
 80074ae:	2a30      	cmp	r2, #48	; 0x30
 80074b0:	d0f8      	beq.n	80074a4 <_strtod_l+0x1ec>
 80074b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	f200 84c1 	bhi.w	8007e3e <_strtod_l+0xb86>
 80074bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074be:	9005      	str	r0, [sp, #20]
 80074c0:	2000      	movs	r0, #0
 80074c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c4:	4606      	mov	r6, r0
 80074c6:	3a30      	subs	r2, #48	; 0x30
 80074c8:	f100 0301 	add.w	r3, r0, #1
 80074cc:	d014      	beq.n	80074f8 <_strtod_l+0x240>
 80074ce:	9905      	ldr	r1, [sp, #20]
 80074d0:	4419      	add	r1, r3
 80074d2:	9105      	str	r1, [sp, #20]
 80074d4:	4633      	mov	r3, r6
 80074d6:	eb00 0c06 	add.w	ip, r0, r6
 80074da:	210a      	movs	r1, #10
 80074dc:	4563      	cmp	r3, ip
 80074de:	d113      	bne.n	8007508 <_strtod_l+0x250>
 80074e0:	1833      	adds	r3, r6, r0
 80074e2:	2b08      	cmp	r3, #8
 80074e4:	f106 0601 	add.w	r6, r6, #1
 80074e8:	4406      	add	r6, r0
 80074ea:	dc1a      	bgt.n	8007522 <_strtod_l+0x26a>
 80074ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074ee:	230a      	movs	r3, #10
 80074f0:	fb03 2301 	mla	r3, r3, r1, r2
 80074f4:	9309      	str	r3, [sp, #36]	; 0x24
 80074f6:	2300      	movs	r3, #0
 80074f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80074fa:	1c51      	adds	r1, r2, #1
 80074fc:	9115      	str	r1, [sp, #84]	; 0x54
 80074fe:	7852      	ldrb	r2, [r2, #1]
 8007500:	4618      	mov	r0, r3
 8007502:	e7c9      	b.n	8007498 <_strtod_l+0x1e0>
 8007504:	4658      	mov	r0, fp
 8007506:	e7d2      	b.n	80074ae <_strtod_l+0x1f6>
 8007508:	2b08      	cmp	r3, #8
 800750a:	f103 0301 	add.w	r3, r3, #1
 800750e:	dc03      	bgt.n	8007518 <_strtod_l+0x260>
 8007510:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007512:	434f      	muls	r7, r1
 8007514:	9709      	str	r7, [sp, #36]	; 0x24
 8007516:	e7e1      	b.n	80074dc <_strtod_l+0x224>
 8007518:	2b10      	cmp	r3, #16
 800751a:	bfd8      	it	le
 800751c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007520:	e7dc      	b.n	80074dc <_strtod_l+0x224>
 8007522:	2e10      	cmp	r6, #16
 8007524:	bfdc      	itt	le
 8007526:	230a      	movle	r3, #10
 8007528:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800752c:	e7e3      	b.n	80074f6 <_strtod_l+0x23e>
 800752e:	2300      	movs	r3, #0
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	2301      	movs	r3, #1
 8007534:	e780      	b.n	8007438 <_strtod_l+0x180>
 8007536:	f04f 0c00 	mov.w	ip, #0
 800753a:	1caa      	adds	r2, r5, #2
 800753c:	9215      	str	r2, [sp, #84]	; 0x54
 800753e:	78aa      	ldrb	r2, [r5, #2]
 8007540:	e788      	b.n	8007454 <_strtod_l+0x19c>
 8007542:	f04f 0c01 	mov.w	ip, #1
 8007546:	e7f8      	b.n	800753a <_strtod_l+0x282>
 8007548:	0800a8c0 	.word	0x0800a8c0
 800754c:	0800a8bc 	.word	0x0800a8bc
 8007550:	7ff00000 	.word	0x7ff00000
 8007554:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007556:	1c51      	adds	r1, r2, #1
 8007558:	9115      	str	r1, [sp, #84]	; 0x54
 800755a:	7852      	ldrb	r2, [r2, #1]
 800755c:	2a30      	cmp	r2, #48	; 0x30
 800755e:	d0f9      	beq.n	8007554 <_strtod_l+0x29c>
 8007560:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007564:	2908      	cmp	r1, #8
 8007566:	f63f af7a 	bhi.w	800745e <_strtod_l+0x1a6>
 800756a:	3a30      	subs	r2, #48	; 0x30
 800756c:	9208      	str	r2, [sp, #32]
 800756e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007570:	920c      	str	r2, [sp, #48]	; 0x30
 8007572:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007574:	1c57      	adds	r7, r2, #1
 8007576:	9715      	str	r7, [sp, #84]	; 0x54
 8007578:	7852      	ldrb	r2, [r2, #1]
 800757a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800757e:	f1be 0f09 	cmp.w	lr, #9
 8007582:	d938      	bls.n	80075f6 <_strtod_l+0x33e>
 8007584:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007586:	1a7f      	subs	r7, r7, r1
 8007588:	2f08      	cmp	r7, #8
 800758a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800758e:	dc03      	bgt.n	8007598 <_strtod_l+0x2e0>
 8007590:	9908      	ldr	r1, [sp, #32]
 8007592:	428f      	cmp	r7, r1
 8007594:	bfa8      	it	ge
 8007596:	460f      	movge	r7, r1
 8007598:	f1bc 0f00 	cmp.w	ip, #0
 800759c:	d000      	beq.n	80075a0 <_strtod_l+0x2e8>
 800759e:	427f      	negs	r7, r7
 80075a0:	2e00      	cmp	r6, #0
 80075a2:	d14f      	bne.n	8007644 <_strtod_l+0x38c>
 80075a4:	9904      	ldr	r1, [sp, #16]
 80075a6:	4301      	orrs	r1, r0
 80075a8:	f47f aec1 	bne.w	800732e <_strtod_l+0x76>
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f47f aedb 	bne.w	8007368 <_strtod_l+0xb0>
 80075b2:	2a69      	cmp	r2, #105	; 0x69
 80075b4:	d029      	beq.n	800760a <_strtod_l+0x352>
 80075b6:	dc26      	bgt.n	8007606 <_strtod_l+0x34e>
 80075b8:	2a49      	cmp	r2, #73	; 0x49
 80075ba:	d026      	beq.n	800760a <_strtod_l+0x352>
 80075bc:	2a4e      	cmp	r2, #78	; 0x4e
 80075be:	f47f aed3 	bne.w	8007368 <_strtod_l+0xb0>
 80075c2:	499b      	ldr	r1, [pc, #620]	; (8007830 <_strtod_l+0x578>)
 80075c4:	a815      	add	r0, sp, #84	; 0x54
 80075c6:	f001 fea7 	bl	8009318 <__match>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	f43f aecc 	beq.w	8007368 <_strtod_l+0xb0>
 80075d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b28      	cmp	r3, #40	; 0x28
 80075d6:	d12f      	bne.n	8007638 <_strtod_l+0x380>
 80075d8:	4996      	ldr	r1, [pc, #600]	; (8007834 <_strtod_l+0x57c>)
 80075da:	aa18      	add	r2, sp, #96	; 0x60
 80075dc:	a815      	add	r0, sp, #84	; 0x54
 80075de:	f001 feaf 	bl	8009340 <__hexnan>
 80075e2:	2805      	cmp	r0, #5
 80075e4:	d128      	bne.n	8007638 <_strtod_l+0x380>
 80075e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80075f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80075f4:	e69b      	b.n	800732e <_strtod_l+0x76>
 80075f6:	9f08      	ldr	r7, [sp, #32]
 80075f8:	210a      	movs	r1, #10
 80075fa:	fb01 2107 	mla	r1, r1, r7, r2
 80075fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007602:	9208      	str	r2, [sp, #32]
 8007604:	e7b5      	b.n	8007572 <_strtod_l+0x2ba>
 8007606:	2a6e      	cmp	r2, #110	; 0x6e
 8007608:	e7d9      	b.n	80075be <_strtod_l+0x306>
 800760a:	498b      	ldr	r1, [pc, #556]	; (8007838 <_strtod_l+0x580>)
 800760c:	a815      	add	r0, sp, #84	; 0x54
 800760e:	f001 fe83 	bl	8009318 <__match>
 8007612:	2800      	cmp	r0, #0
 8007614:	f43f aea8 	beq.w	8007368 <_strtod_l+0xb0>
 8007618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800761a:	4988      	ldr	r1, [pc, #544]	; (800783c <_strtod_l+0x584>)
 800761c:	3b01      	subs	r3, #1
 800761e:	a815      	add	r0, sp, #84	; 0x54
 8007620:	9315      	str	r3, [sp, #84]	; 0x54
 8007622:	f001 fe79 	bl	8009318 <__match>
 8007626:	b910      	cbnz	r0, 800762e <_strtod_l+0x376>
 8007628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800762a:	3301      	adds	r3, #1
 800762c:	9315      	str	r3, [sp, #84]	; 0x54
 800762e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800784c <_strtod_l+0x594>
 8007632:	f04f 0800 	mov.w	r8, #0
 8007636:	e67a      	b.n	800732e <_strtod_l+0x76>
 8007638:	4881      	ldr	r0, [pc, #516]	; (8007840 <_strtod_l+0x588>)
 800763a:	f001 fb89 	bl	8008d50 <nan>
 800763e:	ec59 8b10 	vmov	r8, r9, d0
 8007642:	e674      	b.n	800732e <_strtod_l+0x76>
 8007644:	9b05      	ldr	r3, [sp, #20]
 8007646:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007648:	1afb      	subs	r3, r7, r3
 800764a:	f1bb 0f00 	cmp.w	fp, #0
 800764e:	bf08      	it	eq
 8007650:	46b3      	moveq	fp, r6
 8007652:	2e10      	cmp	r6, #16
 8007654:	9308      	str	r3, [sp, #32]
 8007656:	4635      	mov	r5, r6
 8007658:	bfa8      	it	ge
 800765a:	2510      	movge	r5, #16
 800765c:	f7f8 ff52 	bl	8000504 <__aeabi_ui2d>
 8007660:	2e09      	cmp	r6, #9
 8007662:	4680      	mov	r8, r0
 8007664:	4689      	mov	r9, r1
 8007666:	dd13      	ble.n	8007690 <_strtod_l+0x3d8>
 8007668:	4b76      	ldr	r3, [pc, #472]	; (8007844 <_strtod_l+0x58c>)
 800766a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800766e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007672:	f7f8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8007676:	4680      	mov	r8, r0
 8007678:	4650      	mov	r0, sl
 800767a:	4689      	mov	r9, r1
 800767c:	f7f8 ff42 	bl	8000504 <__aeabi_ui2d>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	f7f8 fe00 	bl	800028c <__adddf3>
 800768c:	4680      	mov	r8, r0
 800768e:	4689      	mov	r9, r1
 8007690:	2e0f      	cmp	r6, #15
 8007692:	dc38      	bgt.n	8007706 <_strtod_l+0x44e>
 8007694:	9b08      	ldr	r3, [sp, #32]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f43f ae49 	beq.w	800732e <_strtod_l+0x76>
 800769c:	dd24      	ble.n	80076e8 <_strtod_l+0x430>
 800769e:	2b16      	cmp	r3, #22
 80076a0:	dc0b      	bgt.n	80076ba <_strtod_l+0x402>
 80076a2:	4968      	ldr	r1, [pc, #416]	; (8007844 <_strtod_l+0x58c>)
 80076a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80076a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ac:	4642      	mov	r2, r8
 80076ae:	464b      	mov	r3, r9
 80076b0:	f7f8 ffa2 	bl	80005f8 <__aeabi_dmul>
 80076b4:	4680      	mov	r8, r0
 80076b6:	4689      	mov	r9, r1
 80076b8:	e639      	b.n	800732e <_strtod_l+0x76>
 80076ba:	9a08      	ldr	r2, [sp, #32]
 80076bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80076c0:	4293      	cmp	r3, r2
 80076c2:	db20      	blt.n	8007706 <_strtod_l+0x44e>
 80076c4:	4c5f      	ldr	r4, [pc, #380]	; (8007844 <_strtod_l+0x58c>)
 80076c6:	f1c6 060f 	rsb	r6, r6, #15
 80076ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80076ce:	4642      	mov	r2, r8
 80076d0:	464b      	mov	r3, r9
 80076d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_dmul>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	1b9e      	subs	r6, r3, r6
 80076de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80076e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80076e6:	e7e3      	b.n	80076b0 <_strtod_l+0x3f8>
 80076e8:	9b08      	ldr	r3, [sp, #32]
 80076ea:	3316      	adds	r3, #22
 80076ec:	db0b      	blt.n	8007706 <_strtod_l+0x44e>
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	1bdf      	subs	r7, r3, r7
 80076f2:	4b54      	ldr	r3, [pc, #336]	; (8007844 <_strtod_l+0x58c>)
 80076f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80076f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f9 f8a4 	bl	800084c <__aeabi_ddiv>
 8007704:	e7d6      	b.n	80076b4 <_strtod_l+0x3fc>
 8007706:	9b08      	ldr	r3, [sp, #32]
 8007708:	1b75      	subs	r5, r6, r5
 800770a:	441d      	add	r5, r3
 800770c:	2d00      	cmp	r5, #0
 800770e:	dd70      	ble.n	80077f2 <_strtod_l+0x53a>
 8007710:	f015 030f 	ands.w	r3, r5, #15
 8007714:	d00a      	beq.n	800772c <_strtod_l+0x474>
 8007716:	494b      	ldr	r1, [pc, #300]	; (8007844 <_strtod_l+0x58c>)
 8007718:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007724:	f7f8 ff68 	bl	80005f8 <__aeabi_dmul>
 8007728:	4680      	mov	r8, r0
 800772a:	4689      	mov	r9, r1
 800772c:	f035 050f 	bics.w	r5, r5, #15
 8007730:	d04d      	beq.n	80077ce <_strtod_l+0x516>
 8007732:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007736:	dd22      	ble.n	800777e <_strtod_l+0x4c6>
 8007738:	2500      	movs	r5, #0
 800773a:	46ab      	mov	fp, r5
 800773c:	9509      	str	r5, [sp, #36]	; 0x24
 800773e:	9505      	str	r5, [sp, #20]
 8007740:	2322      	movs	r3, #34	; 0x22
 8007742:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800784c <_strtod_l+0x594>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	f04f 0800 	mov.w	r8, #0
 800774c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	f43f aded 	beq.w	800732e <_strtod_l+0x76>
 8007754:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007756:	4620      	mov	r0, r4
 8007758:	f7ff f924 	bl	80069a4 <_Bfree>
 800775c:	9905      	ldr	r1, [sp, #20]
 800775e:	4620      	mov	r0, r4
 8007760:	f7ff f920 	bl	80069a4 <_Bfree>
 8007764:	4659      	mov	r1, fp
 8007766:	4620      	mov	r0, r4
 8007768:	f7ff f91c 	bl	80069a4 <_Bfree>
 800776c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff f918 	bl	80069a4 <_Bfree>
 8007774:	4629      	mov	r1, r5
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff f914 	bl	80069a4 <_Bfree>
 800777c:	e5d7      	b.n	800732e <_strtod_l+0x76>
 800777e:	4b32      	ldr	r3, [pc, #200]	; (8007848 <_strtod_l+0x590>)
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	112d      	asrs	r5, r5, #4
 8007786:	4640      	mov	r0, r8
 8007788:	4649      	mov	r1, r9
 800778a:	469a      	mov	sl, r3
 800778c:	2d01      	cmp	r5, #1
 800778e:	dc21      	bgt.n	80077d4 <_strtod_l+0x51c>
 8007790:	b10b      	cbz	r3, 8007796 <_strtod_l+0x4de>
 8007792:	4680      	mov	r8, r0
 8007794:	4689      	mov	r9, r1
 8007796:	492c      	ldr	r1, [pc, #176]	; (8007848 <_strtod_l+0x590>)
 8007798:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800779c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a8:	f7f8 ff26 	bl	80005f8 <__aeabi_dmul>
 80077ac:	4b27      	ldr	r3, [pc, #156]	; (800784c <_strtod_l+0x594>)
 80077ae:	460a      	mov	r2, r1
 80077b0:	400b      	ands	r3, r1
 80077b2:	4927      	ldr	r1, [pc, #156]	; (8007850 <_strtod_l+0x598>)
 80077b4:	428b      	cmp	r3, r1
 80077b6:	4680      	mov	r8, r0
 80077b8:	d8be      	bhi.n	8007738 <_strtod_l+0x480>
 80077ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077be:	428b      	cmp	r3, r1
 80077c0:	bf86      	itte	hi
 80077c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007854 <_strtod_l+0x59c>
 80077c6:	f04f 38ff 	movhi.w	r8, #4294967295
 80077ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80077ce:	2300      	movs	r3, #0
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	e07b      	b.n	80078cc <_strtod_l+0x614>
 80077d4:	07ea      	lsls	r2, r5, #31
 80077d6:	d505      	bpl.n	80077e4 <_strtod_l+0x52c>
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	f7f8 ff0b 	bl	80005f8 <__aeabi_dmul>
 80077e2:	2301      	movs	r3, #1
 80077e4:	9a04      	ldr	r2, [sp, #16]
 80077e6:	3208      	adds	r2, #8
 80077e8:	f10a 0a01 	add.w	sl, sl, #1
 80077ec:	106d      	asrs	r5, r5, #1
 80077ee:	9204      	str	r2, [sp, #16]
 80077f0:	e7cc      	b.n	800778c <_strtod_l+0x4d4>
 80077f2:	d0ec      	beq.n	80077ce <_strtod_l+0x516>
 80077f4:	426d      	negs	r5, r5
 80077f6:	f015 020f 	ands.w	r2, r5, #15
 80077fa:	d00a      	beq.n	8007812 <_strtod_l+0x55a>
 80077fc:	4b11      	ldr	r3, [pc, #68]	; (8007844 <_strtod_l+0x58c>)
 80077fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007802:	4640      	mov	r0, r8
 8007804:	4649      	mov	r1, r9
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f9 f81f 	bl	800084c <__aeabi_ddiv>
 800780e:	4680      	mov	r8, r0
 8007810:	4689      	mov	r9, r1
 8007812:	112d      	asrs	r5, r5, #4
 8007814:	d0db      	beq.n	80077ce <_strtod_l+0x516>
 8007816:	2d1f      	cmp	r5, #31
 8007818:	dd1e      	ble.n	8007858 <_strtod_l+0x5a0>
 800781a:	2500      	movs	r5, #0
 800781c:	46ab      	mov	fp, r5
 800781e:	9509      	str	r5, [sp, #36]	; 0x24
 8007820:	9505      	str	r5, [sp, #20]
 8007822:	2322      	movs	r3, #34	; 0x22
 8007824:	f04f 0800 	mov.w	r8, #0
 8007828:	f04f 0900 	mov.w	r9, #0
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	e78d      	b.n	800774c <_strtod_l+0x494>
 8007830:	0800a6a9 	.word	0x0800a6a9
 8007834:	0800a8d4 	.word	0x0800a8d4
 8007838:	0800a6a1 	.word	0x0800a6a1
 800783c:	0800a6d6 	.word	0x0800a6d6
 8007840:	0800aa80 	.word	0x0800aa80
 8007844:	0800a7e8 	.word	0x0800a7e8
 8007848:	0800a7c0 	.word	0x0800a7c0
 800784c:	7ff00000 	.word	0x7ff00000
 8007850:	7ca00000 	.word	0x7ca00000
 8007854:	7fefffff 	.word	0x7fefffff
 8007858:	f015 0310 	ands.w	r3, r5, #16
 800785c:	bf18      	it	ne
 800785e:	236a      	movne	r3, #106	; 0x6a
 8007860:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007c04 <_strtod_l+0x94c>
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	2300      	movs	r3, #0
 800786c:	07ea      	lsls	r2, r5, #31
 800786e:	d504      	bpl.n	800787a <_strtod_l+0x5c2>
 8007870:	e9da 2300 	ldrd	r2, r3, [sl]
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	2301      	movs	r3, #1
 800787a:	106d      	asrs	r5, r5, #1
 800787c:	f10a 0a08 	add.w	sl, sl, #8
 8007880:	d1f4      	bne.n	800786c <_strtod_l+0x5b4>
 8007882:	b10b      	cbz	r3, 8007888 <_strtod_l+0x5d0>
 8007884:	4680      	mov	r8, r0
 8007886:	4689      	mov	r9, r1
 8007888:	9b04      	ldr	r3, [sp, #16]
 800788a:	b1bb      	cbz	r3, 80078bc <_strtod_l+0x604>
 800788c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007890:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007894:	2b00      	cmp	r3, #0
 8007896:	4649      	mov	r1, r9
 8007898:	dd10      	ble.n	80078bc <_strtod_l+0x604>
 800789a:	2b1f      	cmp	r3, #31
 800789c:	f340 811e 	ble.w	8007adc <_strtod_l+0x824>
 80078a0:	2b34      	cmp	r3, #52	; 0x34
 80078a2:	bfde      	ittt	le
 80078a4:	f04f 33ff 	movle.w	r3, #4294967295
 80078a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80078ac:	4093      	lslle	r3, r2
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	bfcc      	ite	gt
 80078b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078b8:	ea03 0901 	andle.w	r9, r3, r1
 80078bc:	2200      	movs	r2, #0
 80078be:	2300      	movs	r3, #0
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f9 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d1a6      	bne.n	800781a <_strtod_l+0x562>
 80078cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078d2:	4633      	mov	r3, r6
 80078d4:	465a      	mov	r2, fp
 80078d6:	4620      	mov	r0, r4
 80078d8:	f7ff f8cc 	bl	8006a74 <__s2b>
 80078dc:	9009      	str	r0, [sp, #36]	; 0x24
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f af2a 	beq.w	8007738 <_strtod_l+0x480>
 80078e4:	9a08      	ldr	r2, [sp, #32]
 80078e6:	9b05      	ldr	r3, [sp, #20]
 80078e8:	2a00      	cmp	r2, #0
 80078ea:	eba3 0307 	sub.w	r3, r3, r7
 80078ee:	bfa8      	it	ge
 80078f0:	2300      	movge	r3, #0
 80078f2:	930c      	str	r3, [sp, #48]	; 0x30
 80078f4:	2500      	movs	r5, #0
 80078f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078fa:	9312      	str	r3, [sp, #72]	; 0x48
 80078fc:	46ab      	mov	fp, r5
 80078fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007900:	4620      	mov	r0, r4
 8007902:	6859      	ldr	r1, [r3, #4]
 8007904:	f7ff f80e 	bl	8006924 <_Balloc>
 8007908:	9005      	str	r0, [sp, #20]
 800790a:	2800      	cmp	r0, #0
 800790c:	f43f af18 	beq.w	8007740 <_strtod_l+0x488>
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	691a      	ldr	r2, [r3, #16]
 8007914:	3202      	adds	r2, #2
 8007916:	f103 010c 	add.w	r1, r3, #12
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	300c      	adds	r0, #12
 800791e:	f001 fa09 	bl	8008d34 <memcpy>
 8007922:	ec49 8b10 	vmov	d0, r8, r9
 8007926:	aa18      	add	r2, sp, #96	; 0x60
 8007928:	a917      	add	r1, sp, #92	; 0x5c
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff fbd6 	bl	80070dc <__d2b>
 8007930:	ec49 8b18 	vmov	d8, r8, r9
 8007934:	9016      	str	r0, [sp, #88]	; 0x58
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f af02 	beq.w	8007740 <_strtod_l+0x488>
 800793c:	2101      	movs	r1, #1
 800793e:	4620      	mov	r0, r4
 8007940:	f7ff f930 	bl	8006ba4 <__i2b>
 8007944:	4683      	mov	fp, r0
 8007946:	2800      	cmp	r0, #0
 8007948:	f43f aefa 	beq.w	8007740 <_strtod_l+0x488>
 800794c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800794e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007950:	2e00      	cmp	r6, #0
 8007952:	bfab      	itete	ge
 8007954:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007956:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007958:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800795a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800795e:	bfac      	ite	ge
 8007960:	eb06 0a03 	addge.w	sl, r6, r3
 8007964:	1b9f      	sublt	r7, r3, r6
 8007966:	9b04      	ldr	r3, [sp, #16]
 8007968:	1af6      	subs	r6, r6, r3
 800796a:	4416      	add	r6, r2
 800796c:	4ba0      	ldr	r3, [pc, #640]	; (8007bf0 <_strtod_l+0x938>)
 800796e:	3e01      	subs	r6, #1
 8007970:	429e      	cmp	r6, r3
 8007972:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007976:	f280 80c4 	bge.w	8007b02 <_strtod_l+0x84a>
 800797a:	1b9b      	subs	r3, r3, r6
 800797c:	2b1f      	cmp	r3, #31
 800797e:	eba2 0203 	sub.w	r2, r2, r3
 8007982:	f04f 0101 	mov.w	r1, #1
 8007986:	f300 80b0 	bgt.w	8007aea <_strtod_l+0x832>
 800798a:	fa01 f303 	lsl.w	r3, r1, r3
 800798e:	930e      	str	r3, [sp, #56]	; 0x38
 8007990:	2300      	movs	r3, #0
 8007992:	930d      	str	r3, [sp, #52]	; 0x34
 8007994:	eb0a 0602 	add.w	r6, sl, r2
 8007998:	9b04      	ldr	r3, [sp, #16]
 800799a:	45b2      	cmp	sl, r6
 800799c:	4417      	add	r7, r2
 800799e:	441f      	add	r7, r3
 80079a0:	4653      	mov	r3, sl
 80079a2:	bfa8      	it	ge
 80079a4:	4633      	movge	r3, r6
 80079a6:	42bb      	cmp	r3, r7
 80079a8:	bfa8      	it	ge
 80079aa:	463b      	movge	r3, r7
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bfc2      	ittt	gt
 80079b0:	1af6      	subgt	r6, r6, r3
 80079b2:	1aff      	subgt	r7, r7, r3
 80079b4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80079b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd17      	ble.n	80079ee <_strtod_l+0x736>
 80079be:	4659      	mov	r1, fp
 80079c0:	461a      	mov	r2, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff f9ae 	bl	8006d24 <__pow5mult>
 80079c8:	4683      	mov	fp, r0
 80079ca:	2800      	cmp	r0, #0
 80079cc:	f43f aeb8 	beq.w	8007740 <_strtod_l+0x488>
 80079d0:	4601      	mov	r1, r0
 80079d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7ff f8fb 	bl	8006bd0 <__multiply>
 80079da:	900b      	str	r0, [sp, #44]	; 0x2c
 80079dc:	2800      	cmp	r0, #0
 80079de:	f43f aeaf 	beq.w	8007740 <_strtod_l+0x488>
 80079e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079e4:	4620      	mov	r0, r4
 80079e6:	f7fe ffdd 	bl	80069a4 <_Bfree>
 80079ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ec:	9316      	str	r3, [sp, #88]	; 0x58
 80079ee:	2e00      	cmp	r6, #0
 80079f0:	f300 808c 	bgt.w	8007b0c <_strtod_l+0x854>
 80079f4:	9b08      	ldr	r3, [sp, #32]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dd08      	ble.n	8007a0c <_strtod_l+0x754>
 80079fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079fc:	9905      	ldr	r1, [sp, #20]
 80079fe:	4620      	mov	r0, r4
 8007a00:	f7ff f990 	bl	8006d24 <__pow5mult>
 8007a04:	9005      	str	r0, [sp, #20]
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f43f ae9a 	beq.w	8007740 <_strtod_l+0x488>
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	dd08      	ble.n	8007a22 <_strtod_l+0x76a>
 8007a10:	9905      	ldr	r1, [sp, #20]
 8007a12:	463a      	mov	r2, r7
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff f9df 	bl	8006dd8 <__lshift>
 8007a1a:	9005      	str	r0, [sp, #20]
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f43f ae8f 	beq.w	8007740 <_strtod_l+0x488>
 8007a22:	f1ba 0f00 	cmp.w	sl, #0
 8007a26:	dd08      	ble.n	8007a3a <_strtod_l+0x782>
 8007a28:	4659      	mov	r1, fp
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7ff f9d3 	bl	8006dd8 <__lshift>
 8007a32:	4683      	mov	fp, r0
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f43f ae83 	beq.w	8007740 <_strtod_l+0x488>
 8007a3a:	9a05      	ldr	r2, [sp, #20]
 8007a3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7ff fa52 	bl	8006ee8 <__mdiff>
 8007a44:	4605      	mov	r5, r0
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f ae7a 	beq.w	8007740 <_strtod_l+0x488>
 8007a4c:	68c3      	ldr	r3, [r0, #12]
 8007a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a50:	2300      	movs	r3, #0
 8007a52:	60c3      	str	r3, [r0, #12]
 8007a54:	4659      	mov	r1, fp
 8007a56:	f7ff fa2b 	bl	8006eb0 <__mcmp>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	da60      	bge.n	8007b20 <_strtod_l+0x868>
 8007a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a60:	ea53 0308 	orrs.w	r3, r3, r8
 8007a64:	f040 8084 	bne.w	8007b70 <_strtod_l+0x8b8>
 8007a68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d17f      	bne.n	8007b70 <_strtod_l+0x8b8>
 8007a70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a74:	0d1b      	lsrs	r3, r3, #20
 8007a76:	051b      	lsls	r3, r3, #20
 8007a78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a7c:	d978      	bls.n	8007b70 <_strtod_l+0x8b8>
 8007a7e:	696b      	ldr	r3, [r5, #20]
 8007a80:	b913      	cbnz	r3, 8007a88 <_strtod_l+0x7d0>
 8007a82:	692b      	ldr	r3, [r5, #16]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	dd73      	ble.n	8007b70 <_strtod_l+0x8b8>
 8007a88:	4629      	mov	r1, r5
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff f9a3 	bl	8006dd8 <__lshift>
 8007a92:	4659      	mov	r1, fp
 8007a94:	4605      	mov	r5, r0
 8007a96:	f7ff fa0b 	bl	8006eb0 <__mcmp>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	dd68      	ble.n	8007b70 <_strtod_l+0x8b8>
 8007a9e:	9904      	ldr	r1, [sp, #16]
 8007aa0:	4a54      	ldr	r2, [pc, #336]	; (8007bf4 <_strtod_l+0x93c>)
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	f000 8084 	beq.w	8007bb2 <_strtod_l+0x8fa>
 8007aaa:	ea02 0109 	and.w	r1, r2, r9
 8007aae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ab2:	dc7e      	bgt.n	8007bb2 <_strtod_l+0x8fa>
 8007ab4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ab8:	f77f aeb3 	ble.w	8007822 <_strtod_l+0x56a>
 8007abc:	4b4e      	ldr	r3, [pc, #312]	; (8007bf8 <_strtod_l+0x940>)
 8007abe:	4640      	mov	r0, r8
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fd98 	bl	80005f8 <__aeabi_dmul>
 8007ac8:	4b4a      	ldr	r3, [pc, #296]	; (8007bf4 <_strtod_l+0x93c>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	4680      	mov	r8, r0
 8007ace:	4689      	mov	r9, r1
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f47f ae3f 	bne.w	8007754 <_strtod_l+0x49c>
 8007ad6:	2322      	movs	r3, #34	; 0x22
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	e63b      	b.n	8007754 <_strtod_l+0x49c>
 8007adc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	ea03 0808 	and.w	r8, r3, r8
 8007ae8:	e6e8      	b.n	80078bc <_strtod_l+0x604>
 8007aea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007aee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007af2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007af6:	36e2      	adds	r6, #226	; 0xe2
 8007af8:	fa01 f306 	lsl.w	r3, r1, r6
 8007afc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007b00:	e748      	b.n	8007994 <_strtod_l+0x6dc>
 8007b02:	2100      	movs	r1, #0
 8007b04:	2301      	movs	r3, #1
 8007b06:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007b0a:	e743      	b.n	8007994 <_strtod_l+0x6dc>
 8007b0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff f961 	bl	8006dd8 <__lshift>
 8007b16:	9016      	str	r0, [sp, #88]	; 0x58
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	f47f af6b 	bne.w	80079f4 <_strtod_l+0x73c>
 8007b1e:	e60f      	b.n	8007740 <_strtod_l+0x488>
 8007b20:	46ca      	mov	sl, r9
 8007b22:	d171      	bne.n	8007c08 <_strtod_l+0x950>
 8007b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b26:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b2a:	b352      	cbz	r2, 8007b82 <_strtod_l+0x8ca>
 8007b2c:	4a33      	ldr	r2, [pc, #204]	; (8007bfc <_strtod_l+0x944>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d12a      	bne.n	8007b88 <_strtod_l+0x8d0>
 8007b32:	9b04      	ldr	r3, [sp, #16]
 8007b34:	4641      	mov	r1, r8
 8007b36:	b1fb      	cbz	r3, 8007b78 <_strtod_l+0x8c0>
 8007b38:	4b2e      	ldr	r3, [pc, #184]	; (8007bf4 <_strtod_l+0x93c>)
 8007b3a:	ea09 0303 	and.w	r3, r9, r3
 8007b3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	d81a      	bhi.n	8007b7e <_strtod_l+0x8c6>
 8007b48:	0d1b      	lsrs	r3, r3, #20
 8007b4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	4299      	cmp	r1, r3
 8007b54:	d118      	bne.n	8007b88 <_strtod_l+0x8d0>
 8007b56:	4b2a      	ldr	r3, [pc, #168]	; (8007c00 <_strtod_l+0x948>)
 8007b58:	459a      	cmp	sl, r3
 8007b5a:	d102      	bne.n	8007b62 <_strtod_l+0x8aa>
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	f43f adef 	beq.w	8007740 <_strtod_l+0x488>
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <_strtod_l+0x93c>)
 8007b64:	ea0a 0303 	and.w	r3, sl, r3
 8007b68:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	9b04      	ldr	r3, [sp, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1a2      	bne.n	8007abc <_strtod_l+0x804>
 8007b76:	e5ed      	b.n	8007754 <_strtod_l+0x49c>
 8007b78:	f04f 33ff 	mov.w	r3, #4294967295
 8007b7c:	e7e9      	b.n	8007b52 <_strtod_l+0x89a>
 8007b7e:	4613      	mov	r3, r2
 8007b80:	e7e7      	b.n	8007b52 <_strtod_l+0x89a>
 8007b82:	ea53 0308 	orrs.w	r3, r3, r8
 8007b86:	d08a      	beq.n	8007a9e <_strtod_l+0x7e6>
 8007b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b8a:	b1e3      	cbz	r3, 8007bc6 <_strtod_l+0x90e>
 8007b8c:	ea13 0f0a 	tst.w	r3, sl
 8007b90:	d0ee      	beq.n	8007b70 <_strtod_l+0x8b8>
 8007b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b94:	9a04      	ldr	r2, [sp, #16]
 8007b96:	4640      	mov	r0, r8
 8007b98:	4649      	mov	r1, r9
 8007b9a:	b1c3      	cbz	r3, 8007bce <_strtod_l+0x916>
 8007b9c:	f7ff fb6f 	bl	800727e <sulp>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	ec51 0b18 	vmov	r0, r1, d8
 8007ba8:	f7f8 fb70 	bl	800028c <__adddf3>
 8007bac:	4680      	mov	r8, r0
 8007bae:	4689      	mov	r9, r1
 8007bb0:	e7de      	b.n	8007b70 <_strtod_l+0x8b8>
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007bb8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007bbc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007bc0:	f04f 38ff 	mov.w	r8, #4294967295
 8007bc4:	e7d4      	b.n	8007b70 <_strtod_l+0x8b8>
 8007bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc8:	ea13 0f08 	tst.w	r3, r8
 8007bcc:	e7e0      	b.n	8007b90 <_strtod_l+0x8d8>
 8007bce:	f7ff fb56 	bl	800727e <sulp>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	ec51 0b18 	vmov	r0, r1, d8
 8007bda:	f7f8 fb55 	bl	8000288 <__aeabi_dsub>
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	4680      	mov	r8, r0
 8007be4:	4689      	mov	r9, r1
 8007be6:	f7f8 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0c0      	beq.n	8007b70 <_strtod_l+0x8b8>
 8007bee:	e618      	b.n	8007822 <_strtod_l+0x56a>
 8007bf0:	fffffc02 	.word	0xfffffc02
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	39500000 	.word	0x39500000
 8007bfc:	000fffff 	.word	0x000fffff
 8007c00:	7fefffff 	.word	0x7fefffff
 8007c04:	0800a8e8 	.word	0x0800a8e8
 8007c08:	4659      	mov	r1, fp
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7ff fac0 	bl	8007190 <__ratio>
 8007c10:	ec57 6b10 	vmov	r6, r7, d0
 8007c14:	ee10 0a10 	vmov	r0, s0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff66 	bl	8000af0 <__aeabi_dcmple>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d071      	beq.n	8007d0c <_strtod_l+0xa54>
 8007c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d17c      	bne.n	8007d28 <_strtod_l+0xa70>
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	d15a      	bne.n	8007cea <_strtod_l+0xa32>
 8007c34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d15d      	bne.n	8007cf8 <_strtod_l+0xa40>
 8007c3c:	4b90      	ldr	r3, [pc, #576]	; (8007e80 <_strtod_l+0xbc8>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d15c      	bne.n	8007d06 <_strtod_l+0xa4e>
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4b8c      	ldr	r3, [pc, #560]	; (8007e84 <_strtod_l+0xbcc>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	f7f8 fcd0 	bl	80005f8 <__aeabi_dmul>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007c60:	9606      	str	r6, [sp, #24]
 8007c62:	9307      	str	r3, [sp, #28]
 8007c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c6c:	4b86      	ldr	r3, [pc, #536]	; (8007e88 <_strtod_l+0xbd0>)
 8007c6e:	ea0a 0303 	and.w	r3, sl, r3
 8007c72:	930d      	str	r3, [sp, #52]	; 0x34
 8007c74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c76:	4b85      	ldr	r3, [pc, #532]	; (8007e8c <_strtod_l+0xbd4>)
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f040 8090 	bne.w	8007d9e <_strtod_l+0xae6>
 8007c7e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007c82:	ec49 8b10 	vmov	d0, r8, r9
 8007c86:	f7ff f9b9 	bl	8006ffc <__ulp>
 8007c8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c8e:	ec51 0b10 	vmov	r0, r1, d0
 8007c92:	f7f8 fcb1 	bl	80005f8 <__aeabi_dmul>
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	f7f8 faf7 	bl	800028c <__adddf3>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4979      	ldr	r1, [pc, #484]	; (8007e88 <_strtod_l+0xbd0>)
 8007ca2:	4a7b      	ldr	r2, [pc, #492]	; (8007e90 <_strtod_l+0xbd8>)
 8007ca4:	4019      	ands	r1, r3
 8007ca6:	4291      	cmp	r1, r2
 8007ca8:	4680      	mov	r8, r0
 8007caa:	d944      	bls.n	8007d36 <_strtod_l+0xa7e>
 8007cac:	ee18 2a90 	vmov	r2, s17
 8007cb0:	4b78      	ldr	r3, [pc, #480]	; (8007e94 <_strtod_l+0xbdc>)
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d104      	bne.n	8007cc0 <_strtod_l+0xa08>
 8007cb6:	ee18 3a10 	vmov	r3, s16
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f43f ad40 	beq.w	8007740 <_strtod_l+0x488>
 8007cc0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007e94 <_strtod_l+0xbdc>
 8007cc4:	f04f 38ff 	mov.w	r8, #4294967295
 8007cc8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7fe fe6a 	bl	80069a4 <_Bfree>
 8007cd0:	9905      	ldr	r1, [sp, #20]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7fe fe66 	bl	80069a4 <_Bfree>
 8007cd8:	4659      	mov	r1, fp
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7fe fe62 	bl	80069a4 <_Bfree>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7fe fe5e 	bl	80069a4 <_Bfree>
 8007ce8:	e609      	b.n	80078fe <_strtod_l+0x646>
 8007cea:	f1b8 0f01 	cmp.w	r8, #1
 8007cee:	d103      	bne.n	8007cf8 <_strtod_l+0xa40>
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	f43f ad95 	beq.w	8007822 <_strtod_l+0x56a>
 8007cf8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007e50 <_strtod_l+0xb98>
 8007cfc:	4f60      	ldr	r7, [pc, #384]	; (8007e80 <_strtod_l+0xbc8>)
 8007cfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d02:	2600      	movs	r6, #0
 8007d04:	e7ae      	b.n	8007c64 <_strtod_l+0x9ac>
 8007d06:	4f5f      	ldr	r7, [pc, #380]	; (8007e84 <_strtod_l+0xbcc>)
 8007d08:	2600      	movs	r6, #0
 8007d0a:	e7a7      	b.n	8007c5c <_strtod_l+0x9a4>
 8007d0c:	4b5d      	ldr	r3, [pc, #372]	; (8007e84 <_strtod_l+0xbcc>)
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fc70 	bl	80005f8 <__aeabi_dmul>
 8007d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d09c      	beq.n	8007c5c <_strtod_l+0x9a4>
 8007d22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007d26:	e79d      	b.n	8007c64 <_strtod_l+0x9ac>
 8007d28:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007e58 <_strtod_l+0xba0>
 8007d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007d30:	ec57 6b17 	vmov	r6, r7, d7
 8007d34:	e796      	b.n	8007c64 <_strtod_l+0x9ac>
 8007d36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d3a:	9b04      	ldr	r3, [sp, #16]
 8007d3c:	46ca      	mov	sl, r9
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1c2      	bne.n	8007cc8 <_strtod_l+0xa10>
 8007d42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d48:	0d1b      	lsrs	r3, r3, #20
 8007d4a:	051b      	lsls	r3, r3, #20
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d1bb      	bne.n	8007cc8 <_strtod_l+0xa10>
 8007d50:	4630      	mov	r0, r6
 8007d52:	4639      	mov	r1, r7
 8007d54:	f7f8 ffb0 	bl	8000cb8 <__aeabi_d2lz>
 8007d58:	f7f8 fc20 	bl	800059c <__aeabi_l2d>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4630      	mov	r0, r6
 8007d62:	4639      	mov	r1, r7
 8007d64:	f7f8 fa90 	bl	8000288 <__aeabi_dsub>
 8007d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d6e:	ea43 0308 	orr.w	r3, r3, r8
 8007d72:	4313      	orrs	r3, r2
 8007d74:	4606      	mov	r6, r0
 8007d76:	460f      	mov	r7, r1
 8007d78:	d054      	beq.n	8007e24 <_strtod_l+0xb6c>
 8007d7a:	a339      	add	r3, pc, #228	; (adr r3, 8007e60 <_strtod_l+0xba8>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f7f8 feac 	bl	8000adc <__aeabi_dcmplt>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	f47f ace5 	bne.w	8007754 <_strtod_l+0x49c>
 8007d8a:	a337      	add	r3, pc, #220	; (adr r3, 8007e68 <_strtod_l+0xbb0>)
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d095      	beq.n	8007cc8 <_strtod_l+0xa10>
 8007d9c:	e4da      	b.n	8007754 <_strtod_l+0x49c>
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	b333      	cbz	r3, 8007df0 <_strtod_l+0xb38>
 8007da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007da8:	d822      	bhi.n	8007df0 <_strtod_l+0xb38>
 8007daa:	a331      	add	r3, pc, #196	; (adr r3, 8007e70 <_strtod_l+0xbb8>)
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 fe9c 	bl	8000af0 <__aeabi_dcmple>
 8007db8:	b1a0      	cbz	r0, 8007de4 <_strtod_l+0xb2c>
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7f8 fef3 	bl	8000ba8 <__aeabi_d2uiz>
 8007dc2:	2801      	cmp	r0, #1
 8007dc4:	bf38      	it	cc
 8007dc6:	2001      	movcc	r0, #1
 8007dc8:	f7f8 fb9c 	bl	8000504 <__aeabi_ui2d>
 8007dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	bb23      	cbnz	r3, 8007e1e <_strtod_l+0xb66>
 8007dd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dd8:	9010      	str	r0, [sp, #64]	; 0x40
 8007dda:	9311      	str	r3, [sp, #68]	; 0x44
 8007ddc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007de0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007de6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007de8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007dec:	1a9b      	subs	r3, r3, r2
 8007dee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007df0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007df4:	eeb0 0a48 	vmov.f32	s0, s16
 8007df8:	eef0 0a68 	vmov.f32	s1, s17
 8007dfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007e00:	f7ff f8fc 	bl	8006ffc <__ulp>
 8007e04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007e08:	ec53 2b10 	vmov	r2, r3, d0
 8007e0c:	f7f8 fbf4 	bl	80005f8 <__aeabi_dmul>
 8007e10:	ec53 2b18 	vmov	r2, r3, d8
 8007e14:	f7f8 fa3a 	bl	800028c <__adddf3>
 8007e18:	4680      	mov	r8, r0
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	e78d      	b.n	8007d3a <_strtod_l+0xa82>
 8007e1e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007e22:	e7db      	b.n	8007ddc <_strtod_l+0xb24>
 8007e24:	a314      	add	r3, pc, #80	; (adr r3, 8007e78 <_strtod_l+0xbc0>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fe57 	bl	8000adc <__aeabi_dcmplt>
 8007e2e:	e7b3      	b.n	8007d98 <_strtod_l+0xae0>
 8007e30:	2300      	movs	r3, #0
 8007e32:	930a      	str	r3, [sp, #40]	; 0x28
 8007e34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	f7ff ba7c 	b.w	8007336 <_strtod_l+0x7e>
 8007e3e:	2a65      	cmp	r2, #101	; 0x65
 8007e40:	f43f ab75 	beq.w	800752e <_strtod_l+0x276>
 8007e44:	2a45      	cmp	r2, #69	; 0x45
 8007e46:	f43f ab72 	beq.w	800752e <_strtod_l+0x276>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	f7ff bbaa 	b.w	80075a4 <_strtod_l+0x2ec>
 8007e50:	00000000 	.word	0x00000000
 8007e54:	bff00000 	.word	0xbff00000
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	3ff00000 	.word	0x3ff00000
 8007e60:	94a03595 	.word	0x94a03595
 8007e64:	3fdfffff 	.word	0x3fdfffff
 8007e68:	35afe535 	.word	0x35afe535
 8007e6c:	3fe00000 	.word	0x3fe00000
 8007e70:	ffc00000 	.word	0xffc00000
 8007e74:	41dfffff 	.word	0x41dfffff
 8007e78:	94a03595 	.word	0x94a03595
 8007e7c:	3fcfffff 	.word	0x3fcfffff
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	3fe00000 	.word	0x3fe00000
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	7fe00000 	.word	0x7fe00000
 8007e90:	7c9fffff 	.word	0x7c9fffff
 8007e94:	7fefffff 	.word	0x7fefffff

08007e98 <_strtod_r>:
 8007e98:	4b01      	ldr	r3, [pc, #4]	; (8007ea0 <_strtod_r+0x8>)
 8007e9a:	f7ff ba0d 	b.w	80072b8 <_strtod_l>
 8007e9e:	bf00      	nop
 8007ea0:	20000068 	.word	0x20000068

08007ea4 <_strtol_l.constprop.0>:
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eaa:	d001      	beq.n	8007eb0 <_strtol_l.constprop.0+0xc>
 8007eac:	2b24      	cmp	r3, #36	; 0x24
 8007eae:	d906      	bls.n	8007ebe <_strtol_l.constprop.0+0x1a>
 8007eb0:	f7fd fd88 	bl	80059c4 <__errno>
 8007eb4:	2316      	movs	r3, #22
 8007eb6:	6003      	str	r3, [r0, #0]
 8007eb8:	2000      	movs	r0, #0
 8007eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ebe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007fa4 <_strtol_l.constprop.0+0x100>
 8007ec2:	460d      	mov	r5, r1
 8007ec4:	462e      	mov	r6, r5
 8007ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007ece:	f017 0708 	ands.w	r7, r7, #8
 8007ed2:	d1f7      	bne.n	8007ec4 <_strtol_l.constprop.0+0x20>
 8007ed4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ed6:	d132      	bne.n	8007f3e <_strtol_l.constprop.0+0x9a>
 8007ed8:	782c      	ldrb	r4, [r5, #0]
 8007eda:	2701      	movs	r7, #1
 8007edc:	1cb5      	adds	r5, r6, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d05b      	beq.n	8007f9a <_strtol_l.constprop.0+0xf6>
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d109      	bne.n	8007efa <_strtol_l.constprop.0+0x56>
 8007ee6:	2c30      	cmp	r4, #48	; 0x30
 8007ee8:	d107      	bne.n	8007efa <_strtol_l.constprop.0+0x56>
 8007eea:	782c      	ldrb	r4, [r5, #0]
 8007eec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007ef0:	2c58      	cmp	r4, #88	; 0x58
 8007ef2:	d14d      	bne.n	8007f90 <_strtol_l.constprop.0+0xec>
 8007ef4:	786c      	ldrb	r4, [r5, #1]
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	3502      	adds	r5, #2
 8007efa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007efe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f02:	f04f 0e00 	mov.w	lr, #0
 8007f06:	fbb8 f9f3 	udiv	r9, r8, r3
 8007f0a:	4676      	mov	r6, lr
 8007f0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007f10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007f14:	f1bc 0f09 	cmp.w	ip, #9
 8007f18:	d816      	bhi.n	8007f48 <_strtol_l.constprop.0+0xa4>
 8007f1a:	4664      	mov	r4, ip
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	dd24      	ble.n	8007f6a <_strtol_l.constprop.0+0xc6>
 8007f20:	f1be 3fff 	cmp.w	lr, #4294967295
 8007f24:	d008      	beq.n	8007f38 <_strtol_l.constprop.0+0x94>
 8007f26:	45b1      	cmp	r9, r6
 8007f28:	d31c      	bcc.n	8007f64 <_strtol_l.constprop.0+0xc0>
 8007f2a:	d101      	bne.n	8007f30 <_strtol_l.constprop.0+0x8c>
 8007f2c:	45a2      	cmp	sl, r4
 8007f2e:	db19      	blt.n	8007f64 <_strtol_l.constprop.0+0xc0>
 8007f30:	fb06 4603 	mla	r6, r6, r3, r4
 8007f34:	f04f 0e01 	mov.w	lr, #1
 8007f38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f3c:	e7e8      	b.n	8007f10 <_strtol_l.constprop.0+0x6c>
 8007f3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007f40:	bf04      	itt	eq
 8007f42:	782c      	ldrbeq	r4, [r5, #0]
 8007f44:	1cb5      	addeq	r5, r6, #2
 8007f46:	e7ca      	b.n	8007ede <_strtol_l.constprop.0+0x3a>
 8007f48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007f4c:	f1bc 0f19 	cmp.w	ip, #25
 8007f50:	d801      	bhi.n	8007f56 <_strtol_l.constprop.0+0xb2>
 8007f52:	3c37      	subs	r4, #55	; 0x37
 8007f54:	e7e2      	b.n	8007f1c <_strtol_l.constprop.0+0x78>
 8007f56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007f5a:	f1bc 0f19 	cmp.w	ip, #25
 8007f5e:	d804      	bhi.n	8007f6a <_strtol_l.constprop.0+0xc6>
 8007f60:	3c57      	subs	r4, #87	; 0x57
 8007f62:	e7db      	b.n	8007f1c <_strtol_l.constprop.0+0x78>
 8007f64:	f04f 3eff 	mov.w	lr, #4294967295
 8007f68:	e7e6      	b.n	8007f38 <_strtol_l.constprop.0+0x94>
 8007f6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007f6e:	d105      	bne.n	8007f7c <_strtol_l.constprop.0+0xd8>
 8007f70:	2322      	movs	r3, #34	; 0x22
 8007f72:	6003      	str	r3, [r0, #0]
 8007f74:	4646      	mov	r6, r8
 8007f76:	b942      	cbnz	r2, 8007f8a <_strtol_l.constprop.0+0xe6>
 8007f78:	4630      	mov	r0, r6
 8007f7a:	e79e      	b.n	8007eba <_strtol_l.constprop.0+0x16>
 8007f7c:	b107      	cbz	r7, 8007f80 <_strtol_l.constprop.0+0xdc>
 8007f7e:	4276      	negs	r6, r6
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	d0f9      	beq.n	8007f78 <_strtol_l.constprop.0+0xd4>
 8007f84:	f1be 0f00 	cmp.w	lr, #0
 8007f88:	d000      	beq.n	8007f8c <_strtol_l.constprop.0+0xe8>
 8007f8a:	1e69      	subs	r1, r5, #1
 8007f8c:	6011      	str	r1, [r2, #0]
 8007f8e:	e7f3      	b.n	8007f78 <_strtol_l.constprop.0+0xd4>
 8007f90:	2430      	movs	r4, #48	; 0x30
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1b1      	bne.n	8007efa <_strtol_l.constprop.0+0x56>
 8007f96:	2308      	movs	r3, #8
 8007f98:	e7af      	b.n	8007efa <_strtol_l.constprop.0+0x56>
 8007f9a:	2c30      	cmp	r4, #48	; 0x30
 8007f9c:	d0a5      	beq.n	8007eea <_strtol_l.constprop.0+0x46>
 8007f9e:	230a      	movs	r3, #10
 8007fa0:	e7ab      	b.n	8007efa <_strtol_l.constprop.0+0x56>
 8007fa2:	bf00      	nop
 8007fa4:	0800a911 	.word	0x0800a911

08007fa8 <_strtol_r>:
 8007fa8:	f7ff bf7c 	b.w	8007ea4 <_strtol_l.constprop.0>

08007fac <__ssputs_r>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	688e      	ldr	r6, [r1, #8]
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	42be      	cmp	r6, r7
 8007fb6:	680b      	ldr	r3, [r1, #0]
 8007fb8:	4682      	mov	sl, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	4690      	mov	r8, r2
 8007fbe:	d82c      	bhi.n	800801a <__ssputs_r+0x6e>
 8007fc0:	898a      	ldrh	r2, [r1, #12]
 8007fc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fc6:	d026      	beq.n	8008016 <__ssputs_r+0x6a>
 8007fc8:	6965      	ldr	r5, [r4, #20]
 8007fca:	6909      	ldr	r1, [r1, #16]
 8007fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fd0:	eba3 0901 	sub.w	r9, r3, r1
 8007fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fd8:	1c7b      	adds	r3, r7, #1
 8007fda:	444b      	add	r3, r9
 8007fdc:	106d      	asrs	r5, r5, #1
 8007fde:	429d      	cmp	r5, r3
 8007fe0:	bf38      	it	cc
 8007fe2:	461d      	movcc	r5, r3
 8007fe4:	0553      	lsls	r3, r2, #21
 8007fe6:	d527      	bpl.n	8008038 <__ssputs_r+0x8c>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7fe fc0f 	bl	800680c <_malloc_r>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	b360      	cbz	r0, 800804c <__ssputs_r+0xa0>
 8007ff2:	6921      	ldr	r1, [r4, #16]
 8007ff4:	464a      	mov	r2, r9
 8007ff6:	f000 fe9d 	bl	8008d34 <memcpy>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	81a3      	strh	r3, [r4, #12]
 8008006:	6126      	str	r6, [r4, #16]
 8008008:	6165      	str	r5, [r4, #20]
 800800a:	444e      	add	r6, r9
 800800c:	eba5 0509 	sub.w	r5, r5, r9
 8008010:	6026      	str	r6, [r4, #0]
 8008012:	60a5      	str	r5, [r4, #8]
 8008014:	463e      	mov	r6, r7
 8008016:	42be      	cmp	r6, r7
 8008018:	d900      	bls.n	800801c <__ssputs_r+0x70>
 800801a:	463e      	mov	r6, r7
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	4632      	mov	r2, r6
 8008020:	4641      	mov	r1, r8
 8008022:	f000 fe4a 	bl	8008cba <memmove>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	1b9b      	subs	r3, r3, r6
 800802a:	60a3      	str	r3, [r4, #8]
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	4433      	add	r3, r6
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	2000      	movs	r0, #0
 8008034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008038:	462a      	mov	r2, r5
 800803a:	f001 fa2e 	bl	800949a <_realloc_r>
 800803e:	4606      	mov	r6, r0
 8008040:	2800      	cmp	r0, #0
 8008042:	d1e0      	bne.n	8008006 <__ssputs_r+0x5a>
 8008044:	6921      	ldr	r1, [r4, #16]
 8008046:	4650      	mov	r0, sl
 8008048:	f7fe fb6c 	bl	8006724 <_free_r>
 800804c:	230c      	movs	r3, #12
 800804e:	f8ca 3000 	str.w	r3, [sl]
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	f04f 30ff 	mov.w	r0, #4294967295
 800805e:	e7e9      	b.n	8008034 <__ssputs_r+0x88>

08008060 <_svfiprintf_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	4698      	mov	r8, r3
 8008066:	898b      	ldrh	r3, [r1, #12]
 8008068:	061b      	lsls	r3, r3, #24
 800806a:	b09d      	sub	sp, #116	; 0x74
 800806c:	4607      	mov	r7, r0
 800806e:	460d      	mov	r5, r1
 8008070:	4614      	mov	r4, r2
 8008072:	d50e      	bpl.n	8008092 <_svfiprintf_r+0x32>
 8008074:	690b      	ldr	r3, [r1, #16]
 8008076:	b963      	cbnz	r3, 8008092 <_svfiprintf_r+0x32>
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	f7fe fbc7 	bl	800680c <_malloc_r>
 800807e:	6028      	str	r0, [r5, #0]
 8008080:	6128      	str	r0, [r5, #16]
 8008082:	b920      	cbnz	r0, 800808e <_svfiprintf_r+0x2e>
 8008084:	230c      	movs	r3, #12
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	e0d0      	b.n	8008230 <_svfiprintf_r+0x1d0>
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	616b      	str	r3, [r5, #20]
 8008092:	2300      	movs	r3, #0
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	2320      	movs	r3, #32
 8008098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800809c:	f8cd 800c 	str.w	r8, [sp, #12]
 80080a0:	2330      	movs	r3, #48	; 0x30
 80080a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008248 <_svfiprintf_r+0x1e8>
 80080a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080aa:	f04f 0901 	mov.w	r9, #1
 80080ae:	4623      	mov	r3, r4
 80080b0:	469a      	mov	sl, r3
 80080b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080b6:	b10a      	cbz	r2, 80080bc <_svfiprintf_r+0x5c>
 80080b8:	2a25      	cmp	r2, #37	; 0x25
 80080ba:	d1f9      	bne.n	80080b0 <_svfiprintf_r+0x50>
 80080bc:	ebba 0b04 	subs.w	fp, sl, r4
 80080c0:	d00b      	beq.n	80080da <_svfiprintf_r+0x7a>
 80080c2:	465b      	mov	r3, fp
 80080c4:	4622      	mov	r2, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	4638      	mov	r0, r7
 80080ca:	f7ff ff6f 	bl	8007fac <__ssputs_r>
 80080ce:	3001      	adds	r0, #1
 80080d0:	f000 80a9 	beq.w	8008226 <_svfiprintf_r+0x1c6>
 80080d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080d6:	445a      	add	r2, fp
 80080d8:	9209      	str	r2, [sp, #36]	; 0x24
 80080da:	f89a 3000 	ldrb.w	r3, [sl]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80a1 	beq.w	8008226 <_svfiprintf_r+0x1c6>
 80080e4:	2300      	movs	r3, #0
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ee:	f10a 0a01 	add.w	sl, sl, #1
 80080f2:	9304      	str	r3, [sp, #16]
 80080f4:	9307      	str	r3, [sp, #28]
 80080f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080fa:	931a      	str	r3, [sp, #104]	; 0x68
 80080fc:	4654      	mov	r4, sl
 80080fe:	2205      	movs	r2, #5
 8008100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008104:	4850      	ldr	r0, [pc, #320]	; (8008248 <_svfiprintf_r+0x1e8>)
 8008106:	f7f8 f863 	bl	80001d0 <memchr>
 800810a:	9a04      	ldr	r2, [sp, #16]
 800810c:	b9d8      	cbnz	r0, 8008146 <_svfiprintf_r+0xe6>
 800810e:	06d0      	lsls	r0, r2, #27
 8008110:	bf44      	itt	mi
 8008112:	2320      	movmi	r3, #32
 8008114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008118:	0711      	lsls	r1, r2, #28
 800811a:	bf44      	itt	mi
 800811c:	232b      	movmi	r3, #43	; 0x2b
 800811e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008122:	f89a 3000 	ldrb.w	r3, [sl]
 8008126:	2b2a      	cmp	r3, #42	; 0x2a
 8008128:	d015      	beq.n	8008156 <_svfiprintf_r+0xf6>
 800812a:	9a07      	ldr	r2, [sp, #28]
 800812c:	4654      	mov	r4, sl
 800812e:	2000      	movs	r0, #0
 8008130:	f04f 0c0a 	mov.w	ip, #10
 8008134:	4621      	mov	r1, r4
 8008136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800813a:	3b30      	subs	r3, #48	; 0x30
 800813c:	2b09      	cmp	r3, #9
 800813e:	d94d      	bls.n	80081dc <_svfiprintf_r+0x17c>
 8008140:	b1b0      	cbz	r0, 8008170 <_svfiprintf_r+0x110>
 8008142:	9207      	str	r2, [sp, #28]
 8008144:	e014      	b.n	8008170 <_svfiprintf_r+0x110>
 8008146:	eba0 0308 	sub.w	r3, r0, r8
 800814a:	fa09 f303 	lsl.w	r3, r9, r3
 800814e:	4313      	orrs	r3, r2
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	46a2      	mov	sl, r4
 8008154:	e7d2      	b.n	80080fc <_svfiprintf_r+0x9c>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	1d19      	adds	r1, r3, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	9103      	str	r1, [sp, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfbb      	ittet	lt
 8008162:	425b      	neglt	r3, r3
 8008164:	f042 0202 	orrlt.w	r2, r2, #2
 8008168:	9307      	strge	r3, [sp, #28]
 800816a:	9307      	strlt	r3, [sp, #28]
 800816c:	bfb8      	it	lt
 800816e:	9204      	strlt	r2, [sp, #16]
 8008170:	7823      	ldrb	r3, [r4, #0]
 8008172:	2b2e      	cmp	r3, #46	; 0x2e
 8008174:	d10c      	bne.n	8008190 <_svfiprintf_r+0x130>
 8008176:	7863      	ldrb	r3, [r4, #1]
 8008178:	2b2a      	cmp	r3, #42	; 0x2a
 800817a:	d134      	bne.n	80081e6 <_svfiprintf_r+0x186>
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	1d1a      	adds	r2, r3, #4
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9203      	str	r2, [sp, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfb8      	it	lt
 8008188:	f04f 33ff 	movlt.w	r3, #4294967295
 800818c:	3402      	adds	r4, #2
 800818e:	9305      	str	r3, [sp, #20]
 8008190:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008258 <_svfiprintf_r+0x1f8>
 8008194:	7821      	ldrb	r1, [r4, #0]
 8008196:	2203      	movs	r2, #3
 8008198:	4650      	mov	r0, sl
 800819a:	f7f8 f819 	bl	80001d0 <memchr>
 800819e:	b138      	cbz	r0, 80081b0 <_svfiprintf_r+0x150>
 80081a0:	9b04      	ldr	r3, [sp, #16]
 80081a2:	eba0 000a 	sub.w	r0, r0, sl
 80081a6:	2240      	movs	r2, #64	; 0x40
 80081a8:	4082      	lsls	r2, r0
 80081aa:	4313      	orrs	r3, r2
 80081ac:	3401      	adds	r4, #1
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	4825      	ldr	r0, [pc, #148]	; (800824c <_svfiprintf_r+0x1ec>)
 80081b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ba:	2206      	movs	r2, #6
 80081bc:	f7f8 f808 	bl	80001d0 <memchr>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d038      	beq.n	8008236 <_svfiprintf_r+0x1d6>
 80081c4:	4b22      	ldr	r3, [pc, #136]	; (8008250 <_svfiprintf_r+0x1f0>)
 80081c6:	bb1b      	cbnz	r3, 8008210 <_svfiprintf_r+0x1b0>
 80081c8:	9b03      	ldr	r3, [sp, #12]
 80081ca:	3307      	adds	r3, #7
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	3308      	adds	r3, #8
 80081d2:	9303      	str	r3, [sp, #12]
 80081d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d6:	4433      	add	r3, r6
 80081d8:	9309      	str	r3, [sp, #36]	; 0x24
 80081da:	e768      	b.n	80080ae <_svfiprintf_r+0x4e>
 80081dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081e0:	460c      	mov	r4, r1
 80081e2:	2001      	movs	r0, #1
 80081e4:	e7a6      	b.n	8008134 <_svfiprintf_r+0xd4>
 80081e6:	2300      	movs	r3, #0
 80081e8:	3401      	adds	r4, #1
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f04f 0c0a 	mov.w	ip, #10
 80081f2:	4620      	mov	r0, r4
 80081f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081f8:	3a30      	subs	r2, #48	; 0x30
 80081fa:	2a09      	cmp	r2, #9
 80081fc:	d903      	bls.n	8008206 <_svfiprintf_r+0x1a6>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c6      	beq.n	8008190 <_svfiprintf_r+0x130>
 8008202:	9105      	str	r1, [sp, #20]
 8008204:	e7c4      	b.n	8008190 <_svfiprintf_r+0x130>
 8008206:	fb0c 2101 	mla	r1, ip, r1, r2
 800820a:	4604      	mov	r4, r0
 800820c:	2301      	movs	r3, #1
 800820e:	e7f0      	b.n	80081f2 <_svfiprintf_r+0x192>
 8008210:	ab03      	add	r3, sp, #12
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	462a      	mov	r2, r5
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <_svfiprintf_r+0x1f4>)
 8008218:	a904      	add	r1, sp, #16
 800821a:	4638      	mov	r0, r7
 800821c:	f7fc fc3e 	bl	8004a9c <_printf_float>
 8008220:	1c42      	adds	r2, r0, #1
 8008222:	4606      	mov	r6, r0
 8008224:	d1d6      	bne.n	80081d4 <_svfiprintf_r+0x174>
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	065b      	lsls	r3, r3, #25
 800822a:	f53f af2d 	bmi.w	8008088 <_svfiprintf_r+0x28>
 800822e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008230:	b01d      	add	sp, #116	; 0x74
 8008232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008236:	ab03      	add	r3, sp, #12
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	462a      	mov	r2, r5
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <_svfiprintf_r+0x1f4>)
 800823e:	a904      	add	r1, sp, #16
 8008240:	4638      	mov	r0, r7
 8008242:	f7fc fecf 	bl	8004fe4 <_printf_i>
 8008246:	e7eb      	b.n	8008220 <_svfiprintf_r+0x1c0>
 8008248:	0800aa11 	.word	0x0800aa11
 800824c:	0800aa1b 	.word	0x0800aa1b
 8008250:	08004a9d 	.word	0x08004a9d
 8008254:	08007fad 	.word	0x08007fad
 8008258:	0800aa17 	.word	0x0800aa17

0800825c <__svfiscanf_r>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	461d      	mov	r5, r3
 8008262:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008264:	07df      	lsls	r7, r3, #31
 8008266:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800826a:	4606      	mov	r6, r0
 800826c:	460c      	mov	r4, r1
 800826e:	4692      	mov	sl, r2
 8008270:	d405      	bmi.n	800827e <__svfiscanf_r+0x22>
 8008272:	898b      	ldrh	r3, [r1, #12]
 8008274:	0598      	lsls	r0, r3, #22
 8008276:	d402      	bmi.n	800827e <__svfiscanf_r+0x22>
 8008278:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800827a:	f7fd fbce 	bl	8005a1a <__retarget_lock_acquire_recursive>
 800827e:	2300      	movs	r3, #0
 8008280:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8008284:	4baa      	ldr	r3, [pc, #680]	; (8008530 <__svfiscanf_r+0x2d4>)
 8008286:	93a0      	str	r3, [sp, #640]	; 0x280
 8008288:	f10d 0804 	add.w	r8, sp, #4
 800828c:	4ba9      	ldr	r3, [pc, #676]	; (8008534 <__svfiscanf_r+0x2d8>)
 800828e:	4faa      	ldr	r7, [pc, #680]	; (8008538 <__svfiscanf_r+0x2dc>)
 8008290:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800853c <__svfiscanf_r+0x2e0>
 8008294:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008298:	93a1      	str	r3, [sp, #644]	; 0x284
 800829a:	9500      	str	r5, [sp, #0]
 800829c:	f89a 3000 	ldrb.w	r3, [sl]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8170 	beq.w	8008586 <__svfiscanf_r+0x32a>
 80082a6:	5cf9      	ldrb	r1, [r7, r3]
 80082a8:	f011 0108 	ands.w	r1, r1, #8
 80082ac:	f10a 0501 	add.w	r5, sl, #1
 80082b0:	d019      	beq.n	80082e6 <__svfiscanf_r+0x8a>
 80082b2:	6863      	ldr	r3, [r4, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd0f      	ble.n	80082d8 <__svfiscanf_r+0x7c>
 80082b8:	6823      	ldr	r3, [r4, #0]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	5cba      	ldrb	r2, [r7, r2]
 80082be:	0711      	lsls	r1, r2, #28
 80082c0:	d401      	bmi.n	80082c6 <__svfiscanf_r+0x6a>
 80082c2:	46aa      	mov	sl, r5
 80082c4:	e7ea      	b.n	800829c <__svfiscanf_r+0x40>
 80082c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80082c8:	3201      	adds	r2, #1
 80082ca:	9245      	str	r2, [sp, #276]	; 0x114
 80082cc:	6862      	ldr	r2, [r4, #4]
 80082ce:	3301      	adds	r3, #1
 80082d0:	3a01      	subs	r2, #1
 80082d2:	6062      	str	r2, [r4, #4]
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	e7ec      	b.n	80082b2 <__svfiscanf_r+0x56>
 80082d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082da:	4621      	mov	r1, r4
 80082dc:	4630      	mov	r0, r6
 80082de:	4798      	blx	r3
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d0e9      	beq.n	80082b8 <__svfiscanf_r+0x5c>
 80082e4:	e7ed      	b.n	80082c2 <__svfiscanf_r+0x66>
 80082e6:	2b25      	cmp	r3, #37	; 0x25
 80082e8:	d012      	beq.n	8008310 <__svfiscanf_r+0xb4>
 80082ea:	469a      	mov	sl, r3
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f340 8093 	ble.w	800841a <__svfiscanf_r+0x1be>
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	7813      	ldrb	r3, [r2, #0]
 80082f8:	4553      	cmp	r3, sl
 80082fa:	f040 8144 	bne.w	8008586 <__svfiscanf_r+0x32a>
 80082fe:	6863      	ldr	r3, [r4, #4]
 8008300:	3b01      	subs	r3, #1
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008306:	3201      	adds	r2, #1
 8008308:	3301      	adds	r3, #1
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	9345      	str	r3, [sp, #276]	; 0x114
 800830e:	e7d8      	b.n	80082c2 <__svfiscanf_r+0x66>
 8008310:	9141      	str	r1, [sp, #260]	; 0x104
 8008312:	9143      	str	r1, [sp, #268]	; 0x10c
 8008314:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008318:	2b2a      	cmp	r3, #42	; 0x2a
 800831a:	bf02      	ittt	eq
 800831c:	2310      	moveq	r3, #16
 800831e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008320:	f10a 0502 	addeq.w	r5, sl, #2
 8008324:	220a      	movs	r2, #10
 8008326:	46aa      	mov	sl, r5
 8008328:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800832c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008330:	2b09      	cmp	r3, #9
 8008332:	d91d      	bls.n	8008370 <__svfiscanf_r+0x114>
 8008334:	4881      	ldr	r0, [pc, #516]	; (800853c <__svfiscanf_r+0x2e0>)
 8008336:	2203      	movs	r2, #3
 8008338:	f7f7 ff4a 	bl	80001d0 <memchr>
 800833c:	b138      	cbz	r0, 800834e <__svfiscanf_r+0xf2>
 800833e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008340:	eba0 0009 	sub.w	r0, r0, r9
 8008344:	2301      	movs	r3, #1
 8008346:	4083      	lsls	r3, r0
 8008348:	4313      	orrs	r3, r2
 800834a:	9341      	str	r3, [sp, #260]	; 0x104
 800834c:	4655      	mov	r5, sl
 800834e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008352:	2b78      	cmp	r3, #120	; 0x78
 8008354:	d807      	bhi.n	8008366 <__svfiscanf_r+0x10a>
 8008356:	2b57      	cmp	r3, #87	; 0x57
 8008358:	d811      	bhi.n	800837e <__svfiscanf_r+0x122>
 800835a:	2b25      	cmp	r3, #37	; 0x25
 800835c:	d0c5      	beq.n	80082ea <__svfiscanf_r+0x8e>
 800835e:	d857      	bhi.n	8008410 <__svfiscanf_r+0x1b4>
 8008360:	2b00      	cmp	r3, #0
 8008362:	f000 80c6 	beq.w	80084f2 <__svfiscanf_r+0x296>
 8008366:	2303      	movs	r3, #3
 8008368:	9347      	str	r3, [sp, #284]	; 0x11c
 800836a:	230a      	movs	r3, #10
 800836c:	9342      	str	r3, [sp, #264]	; 0x108
 800836e:	e07f      	b.n	8008470 <__svfiscanf_r+0x214>
 8008370:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008372:	fb02 1103 	mla	r1, r2, r3, r1
 8008376:	3930      	subs	r1, #48	; 0x30
 8008378:	9143      	str	r1, [sp, #268]	; 0x10c
 800837a:	4655      	mov	r5, sl
 800837c:	e7d3      	b.n	8008326 <__svfiscanf_r+0xca>
 800837e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008382:	2a20      	cmp	r2, #32
 8008384:	d8ef      	bhi.n	8008366 <__svfiscanf_r+0x10a>
 8008386:	a101      	add	r1, pc, #4	; (adr r1, 800838c <__svfiscanf_r+0x130>)
 8008388:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800838c:	08008453 	.word	0x08008453
 8008390:	08008367 	.word	0x08008367
 8008394:	08008367 	.word	0x08008367
 8008398:	080084b1 	.word	0x080084b1
 800839c:	08008367 	.word	0x08008367
 80083a0:	08008367 	.word	0x08008367
 80083a4:	08008367 	.word	0x08008367
 80083a8:	08008367 	.word	0x08008367
 80083ac:	08008367 	.word	0x08008367
 80083b0:	08008367 	.word	0x08008367
 80083b4:	08008367 	.word	0x08008367
 80083b8:	080084c7 	.word	0x080084c7
 80083bc:	080084ad 	.word	0x080084ad
 80083c0:	08008417 	.word	0x08008417
 80083c4:	08008417 	.word	0x08008417
 80083c8:	08008417 	.word	0x08008417
 80083cc:	08008367 	.word	0x08008367
 80083d0:	08008469 	.word	0x08008469
 80083d4:	08008367 	.word	0x08008367
 80083d8:	08008367 	.word	0x08008367
 80083dc:	08008367 	.word	0x08008367
 80083e0:	08008367 	.word	0x08008367
 80083e4:	080084d7 	.word	0x080084d7
 80083e8:	080084a5 	.word	0x080084a5
 80083ec:	0800844b 	.word	0x0800844b
 80083f0:	08008367 	.word	0x08008367
 80083f4:	08008367 	.word	0x08008367
 80083f8:	080084d3 	.word	0x080084d3
 80083fc:	08008367 	.word	0x08008367
 8008400:	080084ad 	.word	0x080084ad
 8008404:	08008367 	.word	0x08008367
 8008408:	08008367 	.word	0x08008367
 800840c:	08008453 	.word	0x08008453
 8008410:	3b45      	subs	r3, #69	; 0x45
 8008412:	2b02      	cmp	r3, #2
 8008414:	d8a7      	bhi.n	8008366 <__svfiscanf_r+0x10a>
 8008416:	2305      	movs	r3, #5
 8008418:	e029      	b.n	800846e <__svfiscanf_r+0x212>
 800841a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800841c:	4621      	mov	r1, r4
 800841e:	4630      	mov	r0, r6
 8008420:	4798      	blx	r3
 8008422:	2800      	cmp	r0, #0
 8008424:	f43f af66 	beq.w	80082f4 <__svfiscanf_r+0x98>
 8008428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800842a:	07da      	lsls	r2, r3, #31
 800842c:	f140 80a3 	bpl.w	8008576 <__svfiscanf_r+0x31a>
 8008430:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008432:	2800      	cmp	r0, #0
 8008434:	d066      	beq.n	8008504 <__svfiscanf_r+0x2a8>
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	f013 0f40 	tst.w	r3, #64	; 0x40
 800843c:	bf18      	it	ne
 800843e:	f04f 30ff 	movne.w	r0, #4294967295
 8008442:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800844a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800844c:	f042 0220 	orr.w	r2, r2, #32
 8008450:	9241      	str	r2, [sp, #260]	; 0x104
 8008452:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008458:	9241      	str	r2, [sp, #260]	; 0x104
 800845a:	2210      	movs	r2, #16
 800845c:	2b6f      	cmp	r3, #111	; 0x6f
 800845e:	9242      	str	r2, [sp, #264]	; 0x108
 8008460:	bf34      	ite	cc
 8008462:	2303      	movcc	r3, #3
 8008464:	2304      	movcs	r3, #4
 8008466:	e002      	b.n	800846e <__svfiscanf_r+0x212>
 8008468:	2300      	movs	r3, #0
 800846a:	9342      	str	r3, [sp, #264]	; 0x108
 800846c:	2303      	movs	r3, #3
 800846e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	dd49      	ble.n	800850a <__svfiscanf_r+0x2ae>
 8008476:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008478:	065b      	lsls	r3, r3, #25
 800847a:	d404      	bmi.n	8008486 <__svfiscanf_r+0x22a>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	5cba      	ldrb	r2, [r7, r2]
 8008482:	0710      	lsls	r0, r2, #28
 8008484:	d448      	bmi.n	8008518 <__svfiscanf_r+0x2bc>
 8008486:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008488:	2b02      	cmp	r3, #2
 800848a:	dc60      	bgt.n	800854e <__svfiscanf_r+0x2f2>
 800848c:	466b      	mov	r3, sp
 800848e:	4622      	mov	r2, r4
 8008490:	a941      	add	r1, sp, #260	; 0x104
 8008492:	4630      	mov	r0, r6
 8008494:	f000 f898 	bl	80085c8 <_scanf_chars>
 8008498:	2801      	cmp	r0, #1
 800849a:	d074      	beq.n	8008586 <__svfiscanf_r+0x32a>
 800849c:	2802      	cmp	r0, #2
 800849e:	f47f af10 	bne.w	80082c2 <__svfiscanf_r+0x66>
 80084a2:	e7c1      	b.n	8008428 <__svfiscanf_r+0x1cc>
 80084a4:	2308      	movs	r3, #8
 80084a6:	9342      	str	r3, [sp, #264]	; 0x108
 80084a8:	2304      	movs	r3, #4
 80084aa:	e7e0      	b.n	800846e <__svfiscanf_r+0x212>
 80084ac:	220a      	movs	r2, #10
 80084ae:	e7d5      	b.n	800845c <__svfiscanf_r+0x200>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4640      	mov	r0, r8
 80084b4:	f000 fb0a 	bl	8008acc <__sccl>
 80084b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084be:	9341      	str	r3, [sp, #260]	; 0x104
 80084c0:	4605      	mov	r5, r0
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7d3      	b.n	800846e <__svfiscanf_r+0x212>
 80084c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084cc:	9341      	str	r3, [sp, #260]	; 0x104
 80084ce:	2300      	movs	r3, #0
 80084d0:	e7cd      	b.n	800846e <__svfiscanf_r+0x212>
 80084d2:	2302      	movs	r3, #2
 80084d4:	e7cb      	b.n	800846e <__svfiscanf_r+0x212>
 80084d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80084d8:	06c3      	lsls	r3, r0, #27
 80084da:	f53f aef2 	bmi.w	80082c2 <__svfiscanf_r+0x66>
 80084de:	9b00      	ldr	r3, [sp, #0]
 80084e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084e2:	1d19      	adds	r1, r3, #4
 80084e4:	9100      	str	r1, [sp, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	07c0      	lsls	r0, r0, #31
 80084ea:	bf4c      	ite	mi
 80084ec:	801a      	strhmi	r2, [r3, #0]
 80084ee:	601a      	strpl	r2, [r3, #0]
 80084f0:	e6e7      	b.n	80082c2 <__svfiscanf_r+0x66>
 80084f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f4:	07d8      	lsls	r0, r3, #31
 80084f6:	d405      	bmi.n	8008504 <__svfiscanf_r+0x2a8>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	0599      	lsls	r1, r3, #22
 80084fc:	d402      	bmi.n	8008504 <__svfiscanf_r+0x2a8>
 80084fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008500:	f7fd fa8c 	bl	8005a1c <__retarget_lock_release_recursive>
 8008504:	f04f 30ff 	mov.w	r0, #4294967295
 8008508:	e79b      	b.n	8008442 <__svfiscanf_r+0x1e6>
 800850a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800850c:	4621      	mov	r1, r4
 800850e:	4630      	mov	r0, r6
 8008510:	4798      	blx	r3
 8008512:	2800      	cmp	r0, #0
 8008514:	d0af      	beq.n	8008476 <__svfiscanf_r+0x21a>
 8008516:	e787      	b.n	8008428 <__svfiscanf_r+0x1cc>
 8008518:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800851a:	3201      	adds	r2, #1
 800851c:	9245      	str	r2, [sp, #276]	; 0x114
 800851e:	6862      	ldr	r2, [r4, #4]
 8008520:	3a01      	subs	r2, #1
 8008522:	2a00      	cmp	r2, #0
 8008524:	6062      	str	r2, [r4, #4]
 8008526:	dd0b      	ble.n	8008540 <__svfiscanf_r+0x2e4>
 8008528:	3301      	adds	r3, #1
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	e7a6      	b.n	800847c <__svfiscanf_r+0x220>
 800852e:	bf00      	nop
 8008530:	08008bb3 	.word	0x08008bb3
 8008534:	080089dd 	.word	0x080089dd
 8008538:	0800a911 	.word	0x0800a911
 800853c:	0800aa17 	.word	0x0800aa17
 8008540:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008542:	4621      	mov	r1, r4
 8008544:	4630      	mov	r0, r6
 8008546:	4798      	blx	r3
 8008548:	2800      	cmp	r0, #0
 800854a:	d097      	beq.n	800847c <__svfiscanf_r+0x220>
 800854c:	e76c      	b.n	8008428 <__svfiscanf_r+0x1cc>
 800854e:	2b04      	cmp	r3, #4
 8008550:	dc06      	bgt.n	8008560 <__svfiscanf_r+0x304>
 8008552:	466b      	mov	r3, sp
 8008554:	4622      	mov	r2, r4
 8008556:	a941      	add	r1, sp, #260	; 0x104
 8008558:	4630      	mov	r0, r6
 800855a:	f000 f88f 	bl	800867c <_scanf_i>
 800855e:	e79b      	b.n	8008498 <__svfiscanf_r+0x23c>
 8008560:	4b0e      	ldr	r3, [pc, #56]	; (800859c <__svfiscanf_r+0x340>)
 8008562:	2b00      	cmp	r3, #0
 8008564:	f43f aead 	beq.w	80082c2 <__svfiscanf_r+0x66>
 8008568:	466b      	mov	r3, sp
 800856a:	4622      	mov	r2, r4
 800856c:	a941      	add	r1, sp, #260	; 0x104
 800856e:	4630      	mov	r0, r6
 8008570:	f7fc fe5a 	bl	8005228 <_scanf_float>
 8008574:	e790      	b.n	8008498 <__svfiscanf_r+0x23c>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	0599      	lsls	r1, r3, #22
 800857a:	f53f af59 	bmi.w	8008430 <__svfiscanf_r+0x1d4>
 800857e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008580:	f7fd fa4c 	bl	8005a1c <__retarget_lock_release_recursive>
 8008584:	e754      	b.n	8008430 <__svfiscanf_r+0x1d4>
 8008586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008588:	07da      	lsls	r2, r3, #31
 800858a:	d405      	bmi.n	8008598 <__svfiscanf_r+0x33c>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	059b      	lsls	r3, r3, #22
 8008590:	d402      	bmi.n	8008598 <__svfiscanf_r+0x33c>
 8008592:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008594:	f7fd fa42 	bl	8005a1c <__retarget_lock_release_recursive>
 8008598:	9844      	ldr	r0, [sp, #272]	; 0x110
 800859a:	e752      	b.n	8008442 <__svfiscanf_r+0x1e6>
 800859c:	08005229 	.word	0x08005229

080085a0 <_vfiscanf_r>:
 80085a0:	b530      	push	{r4, r5, lr}
 80085a2:	4604      	mov	r4, r0
 80085a4:	b085      	sub	sp, #20
 80085a6:	b148      	cbz	r0, 80085bc <_vfiscanf_r+0x1c>
 80085a8:	6a05      	ldr	r5, [r0, #32]
 80085aa:	b93d      	cbnz	r5, 80085bc <_vfiscanf_r+0x1c>
 80085ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085b0:	9101      	str	r1, [sp, #4]
 80085b2:	f7fd f8d5 	bl	8005760 <__sinit>
 80085b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ba:	9901      	ldr	r1, [sp, #4]
 80085bc:	4620      	mov	r0, r4
 80085be:	b005      	add	sp, #20
 80085c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c4:	f7ff be4a 	b.w	800825c <__svfiscanf_r>

080085c8 <_scanf_chars>:
 80085c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085cc:	4615      	mov	r5, r2
 80085ce:	688a      	ldr	r2, [r1, #8]
 80085d0:	4680      	mov	r8, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	b932      	cbnz	r2, 80085e4 <_scanf_chars+0x1c>
 80085d6:	698a      	ldr	r2, [r1, #24]
 80085d8:	2a00      	cmp	r2, #0
 80085da:	bf0c      	ite	eq
 80085dc:	2201      	moveq	r2, #1
 80085de:	f04f 32ff 	movne.w	r2, #4294967295
 80085e2:	608a      	str	r2, [r1, #8]
 80085e4:	6822      	ldr	r2, [r4, #0]
 80085e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008678 <_scanf_chars+0xb0>
 80085ea:	06d1      	lsls	r1, r2, #27
 80085ec:	bf5f      	itttt	pl
 80085ee:	681a      	ldrpl	r2, [r3, #0]
 80085f0:	1d11      	addpl	r1, r2, #4
 80085f2:	6019      	strpl	r1, [r3, #0]
 80085f4:	6816      	ldrpl	r6, [r2, #0]
 80085f6:	2700      	movs	r7, #0
 80085f8:	69a0      	ldr	r0, [r4, #24]
 80085fa:	b188      	cbz	r0, 8008620 <_scanf_chars+0x58>
 80085fc:	2801      	cmp	r0, #1
 80085fe:	d107      	bne.n	8008610 <_scanf_chars+0x48>
 8008600:	682a      	ldr	r2, [r5, #0]
 8008602:	7811      	ldrb	r1, [r2, #0]
 8008604:	6962      	ldr	r2, [r4, #20]
 8008606:	5c52      	ldrb	r2, [r2, r1]
 8008608:	b952      	cbnz	r2, 8008620 <_scanf_chars+0x58>
 800860a:	2f00      	cmp	r7, #0
 800860c:	d031      	beq.n	8008672 <_scanf_chars+0xaa>
 800860e:	e022      	b.n	8008656 <_scanf_chars+0x8e>
 8008610:	2802      	cmp	r0, #2
 8008612:	d120      	bne.n	8008656 <_scanf_chars+0x8e>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	f819 3003 	ldrb.w	r3, [r9, r3]
 800861c:	071b      	lsls	r3, r3, #28
 800861e:	d41a      	bmi.n	8008656 <_scanf_chars+0x8e>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	06da      	lsls	r2, r3, #27
 8008624:	bf5e      	ittt	pl
 8008626:	682b      	ldrpl	r3, [r5, #0]
 8008628:	781b      	ldrbpl	r3, [r3, #0]
 800862a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800862e:	682a      	ldr	r2, [r5, #0]
 8008630:	686b      	ldr	r3, [r5, #4]
 8008632:	3201      	adds	r2, #1
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	68a2      	ldr	r2, [r4, #8]
 8008638:	3b01      	subs	r3, #1
 800863a:	3a01      	subs	r2, #1
 800863c:	606b      	str	r3, [r5, #4]
 800863e:	3701      	adds	r7, #1
 8008640:	60a2      	str	r2, [r4, #8]
 8008642:	b142      	cbz	r2, 8008656 <_scanf_chars+0x8e>
 8008644:	2b00      	cmp	r3, #0
 8008646:	dcd7      	bgt.n	80085f8 <_scanf_chars+0x30>
 8008648:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800864c:	4629      	mov	r1, r5
 800864e:	4640      	mov	r0, r8
 8008650:	4798      	blx	r3
 8008652:	2800      	cmp	r0, #0
 8008654:	d0d0      	beq.n	80085f8 <_scanf_chars+0x30>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f013 0310 	ands.w	r3, r3, #16
 800865c:	d105      	bne.n	800866a <_scanf_chars+0xa2>
 800865e:	68e2      	ldr	r2, [r4, #12]
 8008660:	3201      	adds	r2, #1
 8008662:	60e2      	str	r2, [r4, #12]
 8008664:	69a2      	ldr	r2, [r4, #24]
 8008666:	b102      	cbz	r2, 800866a <_scanf_chars+0xa2>
 8008668:	7033      	strb	r3, [r6, #0]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	443b      	add	r3, r7
 800866e:	6123      	str	r3, [r4, #16]
 8008670:	2000      	movs	r0, #0
 8008672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008676:	bf00      	nop
 8008678:	0800a911 	.word	0x0800a911

0800867c <_scanf_i>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	4698      	mov	r8, r3
 8008682:	4b74      	ldr	r3, [pc, #464]	; (8008854 <_scanf_i+0x1d8>)
 8008684:	460c      	mov	r4, r1
 8008686:	4682      	mov	sl, r0
 8008688:	4616      	mov	r6, r2
 800868a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800868e:	b087      	sub	sp, #28
 8008690:	ab03      	add	r3, sp, #12
 8008692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008696:	4b70      	ldr	r3, [pc, #448]	; (8008858 <_scanf_i+0x1dc>)
 8008698:	69a1      	ldr	r1, [r4, #24]
 800869a:	4a70      	ldr	r2, [pc, #448]	; (800885c <_scanf_i+0x1e0>)
 800869c:	2903      	cmp	r1, #3
 800869e:	bf18      	it	ne
 80086a0:	461a      	movne	r2, r3
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	9201      	str	r2, [sp, #4]
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80086ac:	bf88      	it	hi
 80086ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80086b2:	4627      	mov	r7, r4
 80086b4:	bf82      	ittt	hi
 80086b6:	eb03 0905 	addhi.w	r9, r3, r5
 80086ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 80086be:	60a3      	strhi	r3, [r4, #8]
 80086c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80086c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80086c8:	bf98      	it	ls
 80086ca:	f04f 0900 	movls.w	r9, #0
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	463d      	mov	r5, r7
 80086d2:	f04f 0b00 	mov.w	fp, #0
 80086d6:	6831      	ldr	r1, [r6, #0]
 80086d8:	ab03      	add	r3, sp, #12
 80086da:	7809      	ldrb	r1, [r1, #0]
 80086dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80086e0:	2202      	movs	r2, #2
 80086e2:	f7f7 fd75 	bl	80001d0 <memchr>
 80086e6:	b328      	cbz	r0, 8008734 <_scanf_i+0xb8>
 80086e8:	f1bb 0f01 	cmp.w	fp, #1
 80086ec:	d159      	bne.n	80087a2 <_scanf_i+0x126>
 80086ee:	6862      	ldr	r2, [r4, #4]
 80086f0:	b92a      	cbnz	r2, 80086fe <_scanf_i+0x82>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	2308      	movs	r3, #8
 80086f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086fa:	6063      	str	r3, [r4, #4]
 80086fc:	6022      	str	r2, [r4, #0]
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	68a2      	ldr	r2, [r4, #8]
 8008708:	1e51      	subs	r1, r2, #1
 800870a:	60a1      	str	r1, [r4, #8]
 800870c:	b192      	cbz	r2, 8008734 <_scanf_i+0xb8>
 800870e:	6832      	ldr	r2, [r6, #0]
 8008710:	1c51      	adds	r1, r2, #1
 8008712:	6031      	str	r1, [r6, #0]
 8008714:	7812      	ldrb	r2, [r2, #0]
 8008716:	f805 2b01 	strb.w	r2, [r5], #1
 800871a:	6872      	ldr	r2, [r6, #4]
 800871c:	3a01      	subs	r2, #1
 800871e:	2a00      	cmp	r2, #0
 8008720:	6072      	str	r2, [r6, #4]
 8008722:	dc07      	bgt.n	8008734 <_scanf_i+0xb8>
 8008724:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008728:	4631      	mov	r1, r6
 800872a:	4650      	mov	r0, sl
 800872c:	4790      	blx	r2
 800872e:	2800      	cmp	r0, #0
 8008730:	f040 8085 	bne.w	800883e <_scanf_i+0x1c2>
 8008734:	f10b 0b01 	add.w	fp, fp, #1
 8008738:	f1bb 0f03 	cmp.w	fp, #3
 800873c:	d1cb      	bne.n	80086d6 <_scanf_i+0x5a>
 800873e:	6863      	ldr	r3, [r4, #4]
 8008740:	b90b      	cbnz	r3, 8008746 <_scanf_i+0xca>
 8008742:	230a      	movs	r3, #10
 8008744:	6063      	str	r3, [r4, #4]
 8008746:	6863      	ldr	r3, [r4, #4]
 8008748:	4945      	ldr	r1, [pc, #276]	; (8008860 <_scanf_i+0x1e4>)
 800874a:	6960      	ldr	r0, [r4, #20]
 800874c:	1ac9      	subs	r1, r1, r3
 800874e:	f000 f9bd 	bl	8008acc <__sccl>
 8008752:	f04f 0b00 	mov.w	fp, #0
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	6822      	ldr	r2, [r4, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d03d      	beq.n	80087da <_scanf_i+0x15e>
 800875e:	6831      	ldr	r1, [r6, #0]
 8008760:	6960      	ldr	r0, [r4, #20]
 8008762:	f891 c000 	ldrb.w	ip, [r1]
 8008766:	f810 000c 	ldrb.w	r0, [r0, ip]
 800876a:	2800      	cmp	r0, #0
 800876c:	d035      	beq.n	80087da <_scanf_i+0x15e>
 800876e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008772:	d124      	bne.n	80087be <_scanf_i+0x142>
 8008774:	0510      	lsls	r0, r2, #20
 8008776:	d522      	bpl.n	80087be <_scanf_i+0x142>
 8008778:	f10b 0b01 	add.w	fp, fp, #1
 800877c:	f1b9 0f00 	cmp.w	r9, #0
 8008780:	d003      	beq.n	800878a <_scanf_i+0x10e>
 8008782:	3301      	adds	r3, #1
 8008784:	f109 39ff 	add.w	r9, r9, #4294967295
 8008788:	60a3      	str	r3, [r4, #8]
 800878a:	6873      	ldr	r3, [r6, #4]
 800878c:	3b01      	subs	r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	6073      	str	r3, [r6, #4]
 8008792:	dd1b      	ble.n	80087cc <_scanf_i+0x150>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	3301      	adds	r3, #1
 8008798:	6033      	str	r3, [r6, #0]
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	3b01      	subs	r3, #1
 800879e:	60a3      	str	r3, [r4, #8]
 80087a0:	e7d9      	b.n	8008756 <_scanf_i+0xda>
 80087a2:	f1bb 0f02 	cmp.w	fp, #2
 80087a6:	d1ae      	bne.n	8008706 <_scanf_i+0x8a>
 80087a8:	6822      	ldr	r2, [r4, #0]
 80087aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80087ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80087b2:	d1bf      	bne.n	8008734 <_scanf_i+0xb8>
 80087b4:	2310      	movs	r3, #16
 80087b6:	6063      	str	r3, [r4, #4]
 80087b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087bc:	e7a2      	b.n	8008704 <_scanf_i+0x88>
 80087be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	780b      	ldrb	r3, [r1, #0]
 80087c6:	f805 3b01 	strb.w	r3, [r5], #1
 80087ca:	e7de      	b.n	800878a <_scanf_i+0x10e>
 80087cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80087d0:	4631      	mov	r1, r6
 80087d2:	4650      	mov	r0, sl
 80087d4:	4798      	blx	r3
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0df      	beq.n	800879a <_scanf_i+0x11e>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	05d9      	lsls	r1, r3, #23
 80087de:	d50d      	bpl.n	80087fc <_scanf_i+0x180>
 80087e0:	42bd      	cmp	r5, r7
 80087e2:	d909      	bls.n	80087f8 <_scanf_i+0x17c>
 80087e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80087e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ec:	4632      	mov	r2, r6
 80087ee:	4650      	mov	r0, sl
 80087f0:	4798      	blx	r3
 80087f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80087f6:	464d      	mov	r5, r9
 80087f8:	42bd      	cmp	r5, r7
 80087fa:	d028      	beq.n	800884e <_scanf_i+0x1d2>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	f012 0210 	ands.w	r2, r2, #16
 8008802:	d113      	bne.n	800882c <_scanf_i+0x1b0>
 8008804:	702a      	strb	r2, [r5, #0]
 8008806:	6863      	ldr	r3, [r4, #4]
 8008808:	9e01      	ldr	r6, [sp, #4]
 800880a:	4639      	mov	r1, r7
 800880c:	4650      	mov	r0, sl
 800880e:	47b0      	blx	r6
 8008810:	f8d8 3000 	ldr.w	r3, [r8]
 8008814:	6821      	ldr	r1, [r4, #0]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	f8c8 2000 	str.w	r2, [r8]
 800881c:	f011 0f20 	tst.w	r1, #32
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	d00f      	beq.n	8008844 <_scanf_i+0x1c8>
 8008824:	6018      	str	r0, [r3, #0]
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	60e3      	str	r3, [r4, #12]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	1bed      	subs	r5, r5, r7
 8008830:	445d      	add	r5, fp
 8008832:	442b      	add	r3, r5
 8008834:	6123      	str	r3, [r4, #16]
 8008836:	2000      	movs	r0, #0
 8008838:	b007      	add	sp, #28
 800883a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883e:	f04f 0b00 	mov.w	fp, #0
 8008842:	e7ca      	b.n	80087da <_scanf_i+0x15e>
 8008844:	07ca      	lsls	r2, r1, #31
 8008846:	bf4c      	ite	mi
 8008848:	8018      	strhmi	r0, [r3, #0]
 800884a:	6018      	strpl	r0, [r3, #0]
 800884c:	e7eb      	b.n	8008826 <_scanf_i+0x1aa>
 800884e:	2001      	movs	r0, #1
 8008850:	e7f2      	b.n	8008838 <_scanf_i+0x1bc>
 8008852:	bf00      	nop
 8008854:	08009be4 	.word	0x08009be4
 8008858:	080095dd 	.word	0x080095dd
 800885c:	08007fa9 	.word	0x08007fa9
 8008860:	0800aa32 	.word	0x0800aa32

08008864 <__sflush_r>:
 8008864:	898a      	ldrh	r2, [r1, #12]
 8008866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886a:	4605      	mov	r5, r0
 800886c:	0710      	lsls	r0, r2, #28
 800886e:	460c      	mov	r4, r1
 8008870:	d458      	bmi.n	8008924 <__sflush_r+0xc0>
 8008872:	684b      	ldr	r3, [r1, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	dc05      	bgt.n	8008884 <__sflush_r+0x20>
 8008878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800887a:	2b00      	cmp	r3, #0
 800887c:	dc02      	bgt.n	8008884 <__sflush_r+0x20>
 800887e:	2000      	movs	r0, #0
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008886:	2e00      	cmp	r6, #0
 8008888:	d0f9      	beq.n	800887e <__sflush_r+0x1a>
 800888a:	2300      	movs	r3, #0
 800888c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008890:	682f      	ldr	r7, [r5, #0]
 8008892:	6a21      	ldr	r1, [r4, #32]
 8008894:	602b      	str	r3, [r5, #0]
 8008896:	d032      	beq.n	80088fe <__sflush_r+0x9a>
 8008898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	075a      	lsls	r2, r3, #29
 800889e:	d505      	bpl.n	80088ac <__sflush_r+0x48>
 80088a0:	6863      	ldr	r3, [r4, #4]
 80088a2:	1ac0      	subs	r0, r0, r3
 80088a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088a6:	b10b      	cbz	r3, 80088ac <__sflush_r+0x48>
 80088a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088aa:	1ac0      	subs	r0, r0, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	4602      	mov	r2, r0
 80088b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088b2:	6a21      	ldr	r1, [r4, #32]
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b0      	blx	r6
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	89a3      	ldrh	r3, [r4, #12]
 80088bc:	d106      	bne.n	80088cc <__sflush_r+0x68>
 80088be:	6829      	ldr	r1, [r5, #0]
 80088c0:	291d      	cmp	r1, #29
 80088c2:	d82b      	bhi.n	800891c <__sflush_r+0xb8>
 80088c4:	4a29      	ldr	r2, [pc, #164]	; (800896c <__sflush_r+0x108>)
 80088c6:	410a      	asrs	r2, r1
 80088c8:	07d6      	lsls	r6, r2, #31
 80088ca:	d427      	bmi.n	800891c <__sflush_r+0xb8>
 80088cc:	2200      	movs	r2, #0
 80088ce:	6062      	str	r2, [r4, #4]
 80088d0:	04d9      	lsls	r1, r3, #19
 80088d2:	6922      	ldr	r2, [r4, #16]
 80088d4:	6022      	str	r2, [r4, #0]
 80088d6:	d504      	bpl.n	80088e2 <__sflush_r+0x7e>
 80088d8:	1c42      	adds	r2, r0, #1
 80088da:	d101      	bne.n	80088e0 <__sflush_r+0x7c>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b903      	cbnz	r3, 80088e2 <__sflush_r+0x7e>
 80088e0:	6560      	str	r0, [r4, #84]	; 0x54
 80088e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088e4:	602f      	str	r7, [r5, #0]
 80088e6:	2900      	cmp	r1, #0
 80088e8:	d0c9      	beq.n	800887e <__sflush_r+0x1a>
 80088ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ee:	4299      	cmp	r1, r3
 80088f0:	d002      	beq.n	80088f8 <__sflush_r+0x94>
 80088f2:	4628      	mov	r0, r5
 80088f4:	f7fd ff16 	bl	8006724 <_free_r>
 80088f8:	2000      	movs	r0, #0
 80088fa:	6360      	str	r0, [r4, #52]	; 0x34
 80088fc:	e7c0      	b.n	8008880 <__sflush_r+0x1c>
 80088fe:	2301      	movs	r3, #1
 8008900:	4628      	mov	r0, r5
 8008902:	47b0      	blx	r6
 8008904:	1c41      	adds	r1, r0, #1
 8008906:	d1c8      	bne.n	800889a <__sflush_r+0x36>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0c5      	beq.n	800889a <__sflush_r+0x36>
 800890e:	2b1d      	cmp	r3, #29
 8008910:	d001      	beq.n	8008916 <__sflush_r+0xb2>
 8008912:	2b16      	cmp	r3, #22
 8008914:	d101      	bne.n	800891a <__sflush_r+0xb6>
 8008916:	602f      	str	r7, [r5, #0]
 8008918:	e7b1      	b.n	800887e <__sflush_r+0x1a>
 800891a:	89a3      	ldrh	r3, [r4, #12]
 800891c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	e7ad      	b.n	8008880 <__sflush_r+0x1c>
 8008924:	690f      	ldr	r7, [r1, #16]
 8008926:	2f00      	cmp	r7, #0
 8008928:	d0a9      	beq.n	800887e <__sflush_r+0x1a>
 800892a:	0793      	lsls	r3, r2, #30
 800892c:	680e      	ldr	r6, [r1, #0]
 800892e:	bf08      	it	eq
 8008930:	694b      	ldreq	r3, [r1, #20]
 8008932:	600f      	str	r7, [r1, #0]
 8008934:	bf18      	it	ne
 8008936:	2300      	movne	r3, #0
 8008938:	eba6 0807 	sub.w	r8, r6, r7
 800893c:	608b      	str	r3, [r1, #8]
 800893e:	f1b8 0f00 	cmp.w	r8, #0
 8008942:	dd9c      	ble.n	800887e <__sflush_r+0x1a>
 8008944:	6a21      	ldr	r1, [r4, #32]
 8008946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008948:	4643      	mov	r3, r8
 800894a:	463a      	mov	r2, r7
 800894c:	4628      	mov	r0, r5
 800894e:	47b0      	blx	r6
 8008950:	2800      	cmp	r0, #0
 8008952:	dc06      	bgt.n	8008962 <__sflush_r+0xfe>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	f04f 30ff 	mov.w	r0, #4294967295
 8008960:	e78e      	b.n	8008880 <__sflush_r+0x1c>
 8008962:	4407      	add	r7, r0
 8008964:	eba8 0800 	sub.w	r8, r8, r0
 8008968:	e7e9      	b.n	800893e <__sflush_r+0xda>
 800896a:	bf00      	nop
 800896c:	dfbffffe 	.word	0xdfbffffe

08008970 <_fflush_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b913      	cbnz	r3, 8008980 <_fflush_r+0x10>
 800897a:	2500      	movs	r5, #0
 800897c:	4628      	mov	r0, r5
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	b118      	cbz	r0, 800898a <_fflush_r+0x1a>
 8008982:	6a03      	ldr	r3, [r0, #32]
 8008984:	b90b      	cbnz	r3, 800898a <_fflush_r+0x1a>
 8008986:	f7fc feeb 	bl	8005760 <__sinit>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f3      	beq.n	800897a <_fflush_r+0xa>
 8008992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008994:	07d0      	lsls	r0, r2, #31
 8008996:	d404      	bmi.n	80089a2 <_fflush_r+0x32>
 8008998:	0599      	lsls	r1, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_fflush_r+0x32>
 800899c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800899e:	f7fd f83c 	bl	8005a1a <__retarget_lock_acquire_recursive>
 80089a2:	4628      	mov	r0, r5
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7ff ff5d 	bl	8008864 <__sflush_r>
 80089aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ac:	07da      	lsls	r2, r3, #31
 80089ae:	4605      	mov	r5, r0
 80089b0:	d4e4      	bmi.n	800897c <_fflush_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	059b      	lsls	r3, r3, #22
 80089b6:	d4e1      	bmi.n	800897c <_fflush_r+0xc>
 80089b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ba:	f7fd f82f 	bl	8005a1c <__retarget_lock_release_recursive>
 80089be:	e7dd      	b.n	800897c <_fflush_r+0xc>

080089c0 <lflush>:
 80089c0:	898b      	ldrh	r3, [r1, #12]
 80089c2:	f003 0309 	and.w	r3, r3, #9
 80089c6:	2b09      	cmp	r3, #9
 80089c8:	d103      	bne.n	80089d2 <lflush+0x12>
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <lflush+0x18>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	f7ff bfcf 	b.w	8008970 <_fflush_r>
 80089d2:	2000      	movs	r0, #0
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000064 	.word	0x20000064

080089dc <__srefill_r>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	460c      	mov	r4, r1
 80089e0:	4605      	mov	r5, r0
 80089e2:	b118      	cbz	r0, 80089ec <__srefill_r+0x10>
 80089e4:	6a03      	ldr	r3, [r0, #32]
 80089e6:	b90b      	cbnz	r3, 80089ec <__srefill_r+0x10>
 80089e8:	f7fc feba 	bl	8005760 <__sinit>
 80089ec:	2300      	movs	r3, #0
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089f6:	069e      	lsls	r6, r3, #26
 80089f8:	d502      	bpl.n	8008a00 <__srefill_r+0x24>
 80089fa:	f04f 30ff 	mov.w	r0, #4294967295
 80089fe:	e05c      	b.n	8008aba <__srefill_r+0xde>
 8008a00:	0758      	lsls	r0, r3, #29
 8008a02:	d448      	bmi.n	8008a96 <__srefill_r+0xba>
 8008a04:	06d9      	lsls	r1, r3, #27
 8008a06:	d405      	bmi.n	8008a14 <__srefill_r+0x38>
 8008a08:	2309      	movs	r3, #9
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	e7f2      	b.n	80089fa <__srefill_r+0x1e>
 8008a14:	071a      	lsls	r2, r3, #28
 8008a16:	d50b      	bpl.n	8008a30 <__srefill_r+0x54>
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f7ff ffa8 	bl	8008970 <_fflush_r>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d1ea      	bne.n	80089fa <__srefill_r+0x1e>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	60a0      	str	r0, [r4, #8]
 8008a28:	f023 0308 	bic.w	r3, r3, #8
 8008a2c:	81a3      	strh	r3, [r4, #12]
 8008a2e:	61a0      	str	r0, [r4, #24]
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f043 0304 	orr.w	r3, r3, #4
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	b91b      	cbnz	r3, 8008a44 <__srefill_r+0x68>
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f000 fe14 	bl	800966c <__smakebuf_r>
 8008a44:	89a6      	ldrh	r6, [r4, #12]
 8008a46:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008a4a:	07b3      	lsls	r3, r6, #30
 8008a4c:	d00f      	beq.n	8008a6e <__srefill_r+0x92>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <__srefill_r+0xe4>)
 8008a52:	491c      	ldr	r1, [pc, #112]	; (8008ac4 <__srefill_r+0xe8>)
 8008a54:	481c      	ldr	r0, [pc, #112]	; (8008ac8 <__srefill_r+0xec>)
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	f006 0609 	and.w	r6, r6, #9
 8008a5c:	f7fc fe98 	bl	8005790 <_fwalk_sglue>
 8008a60:	2e09      	cmp	r6, #9
 8008a62:	81a7      	strh	r7, [r4, #12]
 8008a64:	d103      	bne.n	8008a6e <__srefill_r+0x92>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f7ff fefb 	bl	8008864 <__sflush_r>
 8008a6e:	6922      	ldr	r2, [r4, #16]
 8008a70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a72:	6963      	ldr	r3, [r4, #20]
 8008a74:	6a21      	ldr	r1, [r4, #32]
 8008a76:	6022      	str	r2, [r4, #0]
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b0      	blx	r6
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	6060      	str	r0, [r4, #4]
 8008a80:	dc1c      	bgt.n	8008abc <__srefill_r+0xe0>
 8008a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a86:	bf17      	itett	ne
 8008a88:	2200      	movne	r2, #0
 8008a8a:	f043 0320 	orreq.w	r3, r3, #32
 8008a8e:	6062      	strne	r2, [r4, #4]
 8008a90:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008a94:	e7bc      	b.n	8008a10 <__srefill_r+0x34>
 8008a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a98:	2900      	cmp	r1, #0
 8008a9a:	d0cd      	beq.n	8008a38 <__srefill_r+0x5c>
 8008a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	d002      	beq.n	8008aaa <__srefill_r+0xce>
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f7fd fe3d 	bl	8006724 <_free_r>
 8008aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aac:	6063      	str	r3, [r4, #4]
 8008aae:	2000      	movs	r0, #0
 8008ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0c0      	beq.n	8008a38 <__srefill_r+0x5c>
 8008ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abc:	2000      	movs	r0, #0
 8008abe:	e7fc      	b.n	8008aba <__srefill_r+0xde>
 8008ac0:	2000000c 	.word	0x2000000c
 8008ac4:	080089c1 	.word	0x080089c1
 8008ac8:	20000018 	.word	0x20000018

08008acc <__sccl>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	780b      	ldrb	r3, [r1, #0]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	2b5e      	cmp	r3, #94	; 0x5e
 8008ad4:	bf0b      	itete	eq
 8008ad6:	784b      	ldrbeq	r3, [r1, #1]
 8008ad8:	1c4a      	addne	r2, r1, #1
 8008ada:	1c8a      	addeq	r2, r1, #2
 8008adc:	2100      	movne	r1, #0
 8008ade:	bf08      	it	eq
 8008ae0:	2101      	moveq	r1, #1
 8008ae2:	3801      	subs	r0, #1
 8008ae4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008ae8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008aec:	42a8      	cmp	r0, r5
 8008aee:	d1fb      	bne.n	8008ae8 <__sccl+0x1c>
 8008af0:	b90b      	cbnz	r3, 8008af6 <__sccl+0x2a>
 8008af2:	1e50      	subs	r0, r2, #1
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
 8008af6:	f081 0101 	eor.w	r1, r1, #1
 8008afa:	54e1      	strb	r1, [r4, r3]
 8008afc:	4610      	mov	r0, r2
 8008afe:	4602      	mov	r2, r0
 8008b00:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b04:	2d2d      	cmp	r5, #45	; 0x2d
 8008b06:	d005      	beq.n	8008b14 <__sccl+0x48>
 8008b08:	2d5d      	cmp	r5, #93	; 0x5d
 8008b0a:	d016      	beq.n	8008b3a <__sccl+0x6e>
 8008b0c:	2d00      	cmp	r5, #0
 8008b0e:	d0f1      	beq.n	8008af4 <__sccl+0x28>
 8008b10:	462b      	mov	r3, r5
 8008b12:	e7f2      	b.n	8008afa <__sccl+0x2e>
 8008b14:	7846      	ldrb	r6, [r0, #1]
 8008b16:	2e5d      	cmp	r6, #93	; 0x5d
 8008b18:	d0fa      	beq.n	8008b10 <__sccl+0x44>
 8008b1a:	42b3      	cmp	r3, r6
 8008b1c:	dcf8      	bgt.n	8008b10 <__sccl+0x44>
 8008b1e:	3002      	adds	r0, #2
 8008b20:	461a      	mov	r2, r3
 8008b22:	3201      	adds	r2, #1
 8008b24:	4296      	cmp	r6, r2
 8008b26:	54a1      	strb	r1, [r4, r2]
 8008b28:	dcfb      	bgt.n	8008b22 <__sccl+0x56>
 8008b2a:	1af2      	subs	r2, r6, r3
 8008b2c:	3a01      	subs	r2, #1
 8008b2e:	1c5d      	adds	r5, r3, #1
 8008b30:	42b3      	cmp	r3, r6
 8008b32:	bfa8      	it	ge
 8008b34:	2200      	movge	r2, #0
 8008b36:	18ab      	adds	r3, r5, r2
 8008b38:	e7e1      	b.n	8008afe <__sccl+0x32>
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	e7da      	b.n	8008af4 <__sccl+0x28>

08008b3e <__submore>:
 8008b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b42:	460c      	mov	r4, r1
 8008b44:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008b46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b4a:	4299      	cmp	r1, r3
 8008b4c:	d11d      	bne.n	8008b8a <__submore+0x4c>
 8008b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008b52:	f7fd fe5b 	bl	800680c <_malloc_r>
 8008b56:	b918      	cbnz	r0, 8008b60 <__submore+0x22>
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b64:	63a3      	str	r3, [r4, #56]	; 0x38
 8008b66:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b6c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008b70:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b74:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008b78:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b7c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008b80:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008b84:	6020      	str	r0, [r4, #0]
 8008b86:	2000      	movs	r0, #0
 8008b88:	e7e8      	b.n	8008b5c <__submore+0x1e>
 8008b8a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008b8c:	0077      	lsls	r7, r6, #1
 8008b8e:	463a      	mov	r2, r7
 8008b90:	f000 fc83 	bl	800949a <_realloc_r>
 8008b94:	4605      	mov	r5, r0
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0de      	beq.n	8008b58 <__submore+0x1a>
 8008b9a:	eb00 0806 	add.w	r8, r0, r6
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f000 f8c6 	bl	8008d34 <memcpy>
 8008ba8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008bac:	f8c4 8000 	str.w	r8, [r4]
 8008bb0:	e7e9      	b.n	8008b86 <__submore+0x48>

08008bb2 <_ungetc_r>:
 8008bb2:	b570      	push	{r4, r5, r6, lr}
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	1c4a      	adds	r2, r1, #1
 8008bb8:	4606      	mov	r6, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	d103      	bne.n	8008bc6 <_ungetc_r+0x14>
 8008bbe:	f04f 35ff 	mov.w	r5, #4294967295
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	b118      	cbz	r0, 8008bd0 <_ungetc_r+0x1e>
 8008bc8:	6a03      	ldr	r3, [r0, #32]
 8008bca:	b90b      	cbnz	r3, 8008bd0 <_ungetc_r+0x1e>
 8008bcc:	f7fc fdc8 	bl	8005760 <__sinit>
 8008bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d405      	bmi.n	8008be2 <_ungetc_r+0x30>
 8008bd6:	89a3      	ldrh	r3, [r4, #12]
 8008bd8:	0598      	lsls	r0, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_ungetc_r+0x30>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bde:	f7fc ff1c 	bl	8005a1a <__retarget_lock_acquire_recursive>
 8008be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be6:	f023 0320 	bic.w	r3, r3, #32
 8008bea:	0759      	lsls	r1, r3, #29
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	d423      	bmi.n	8008c3a <_ungetc_r+0x88>
 8008bf2:	06d3      	lsls	r3, r2, #27
 8008bf4:	d409      	bmi.n	8008c0a <_ungetc_r+0x58>
 8008bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bf8:	07dd      	lsls	r5, r3, #31
 8008bfa:	d4e0      	bmi.n	8008bbe <_ungetc_r+0xc>
 8008bfc:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008c00:	d1dd      	bne.n	8008bbe <_ungetc_r+0xc>
 8008c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c04:	f7fc ff0a 	bl	8005a1c <__retarget_lock_release_recursive>
 8008c08:	e7d9      	b.n	8008bbe <_ungetc_r+0xc>
 8008c0a:	0710      	lsls	r0, r2, #28
 8008c0c:	d511      	bpl.n	8008c32 <_ungetc_r+0x80>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fead 	bl	8008970 <_fflush_r>
 8008c16:	b130      	cbz	r0, 8008c26 <_ungetc_r+0x74>
 8008c18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d4cf      	bmi.n	8008bbe <_ungetc_r+0xc>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008c24:	e7ec      	b.n	8008c00 <_ungetc_r+0x4e>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	60a0      	str	r0, [r4, #8]
 8008c2a:	f023 0308 	bic.w	r3, r3, #8
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	61a0      	str	r0, [r4, #24]
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f043 0304 	orr.w	r3, r3, #4
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c3c:	6862      	ldr	r2, [r4, #4]
 8008c3e:	b2ed      	uxtb	r5, r5
 8008c40:	b1d3      	cbz	r3, 8008c78 <_ungetc_r+0xc6>
 8008c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c44:	4293      	cmp	r3, r2
 8008c46:	dc05      	bgt.n	8008c54 <_ungetc_r+0xa2>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7ff ff77 	bl	8008b3e <__submore>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1e1      	bne.n	8008c18 <_ungetc_r+0x66>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	3301      	adds	r3, #1
 8008c62:	6063      	str	r3, [r4, #4]
 8008c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c66:	07da      	lsls	r2, r3, #31
 8008c68:	d4ab      	bmi.n	8008bc2 <_ungetc_r+0x10>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	059b      	lsls	r3, r3, #22
 8008c6e:	d4a8      	bmi.n	8008bc2 <_ungetc_r+0x10>
 8008c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c72:	f7fc fed3 	bl	8005a1c <__retarget_lock_release_recursive>
 8008c76:	e7a4      	b.n	8008bc2 <_ungetc_r+0x10>
 8008c78:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008c7a:	6920      	ldr	r0, [r4, #16]
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	f001 0101 	and.w	r1, r1, #1
 8008c82:	b160      	cbz	r0, 8008c9e <_ungetc_r+0xec>
 8008c84:	4298      	cmp	r0, r3
 8008c86:	d20a      	bcs.n	8008c9e <_ungetc_r+0xec>
 8008c88:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8008c8c:	42a8      	cmp	r0, r5
 8008c8e:	d106      	bne.n	8008c9e <_ungetc_r+0xec>
 8008c90:	3b01      	subs	r3, #1
 8008c92:	3201      	adds	r2, #1
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	6062      	str	r2, [r4, #4]
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	d192      	bne.n	8008bc2 <_ungetc_r+0x10>
 8008c9c:	e7e5      	b.n	8008c6a <_ungetc_r+0xb8>
 8008c9e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008ca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ca8:	2303      	movs	r3, #3
 8008caa:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cac:	4623      	mov	r3, r4
 8008cae:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	e7ee      	b.n	8008c98 <_ungetc_r+0xe6>

08008cba <memmove>:
 8008cba:	4288      	cmp	r0, r1
 8008cbc:	b510      	push	{r4, lr}
 8008cbe:	eb01 0402 	add.w	r4, r1, r2
 8008cc2:	d902      	bls.n	8008cca <memmove+0x10>
 8008cc4:	4284      	cmp	r4, r0
 8008cc6:	4623      	mov	r3, r4
 8008cc8:	d807      	bhi.n	8008cda <memmove+0x20>
 8008cca:	1e43      	subs	r3, r0, #1
 8008ccc:	42a1      	cmp	r1, r4
 8008cce:	d008      	beq.n	8008ce2 <memmove+0x28>
 8008cd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cd8:	e7f8      	b.n	8008ccc <memmove+0x12>
 8008cda:	4402      	add	r2, r0
 8008cdc:	4601      	mov	r1, r0
 8008cde:	428a      	cmp	r2, r1
 8008ce0:	d100      	bne.n	8008ce4 <memmove+0x2a>
 8008ce2:	bd10      	pop	{r4, pc}
 8008ce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ce8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cec:	e7f7      	b.n	8008cde <memmove+0x24>

08008cee <strncmp>:
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	b16a      	cbz	r2, 8008d0e <strncmp+0x20>
 8008cf2:	3901      	subs	r1, #1
 8008cf4:	1884      	adds	r4, r0, r2
 8008cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cfa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d103      	bne.n	8008d0a <strncmp+0x1c>
 8008d02:	42a0      	cmp	r0, r4
 8008d04:	d001      	beq.n	8008d0a <strncmp+0x1c>
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d1f5      	bne.n	8008cf6 <strncmp+0x8>
 8008d0a:	1ad0      	subs	r0, r2, r3
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	4610      	mov	r0, r2
 8008d10:	e7fc      	b.n	8008d0c <strncmp+0x1e>
	...

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d06      	ldr	r5, [pc, #24]	; (8008d30 <_sbrk_r+0x1c>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7f8 ffa6 	bl	8001c70 <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20000424 	.word	0x20000424

08008d34 <memcpy>:
 8008d34:	440a      	add	r2, r1
 8008d36:	4291      	cmp	r1, r2
 8008d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d3c:	d100      	bne.n	8008d40 <memcpy+0xc>
 8008d3e:	4770      	bx	lr
 8008d40:	b510      	push	{r4, lr}
 8008d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	d1f9      	bne.n	8008d42 <memcpy+0xe>
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <nan>:
 8008d50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008d58 <nan+0x8>
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	7ff80000 	.word	0x7ff80000

08008d60 <__assert_func>:
 8008d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d62:	4614      	mov	r4, r2
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <__assert_func+0x2c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	68d8      	ldr	r0, [r3, #12]
 8008d6e:	b14c      	cbz	r4, 8008d84 <__assert_func+0x24>
 8008d70:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <__assert_func+0x30>)
 8008d72:	9100      	str	r1, [sp, #0]
 8008d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d78:	4906      	ldr	r1, [pc, #24]	; (8008d94 <__assert_func+0x34>)
 8008d7a:	462b      	mov	r3, r5
 8008d7c:	f000 fc3e 	bl	80095fc <fiprintf>
 8008d80:	f000 fcd2 	bl	8009728 <abort>
 8008d84:	4b04      	ldr	r3, [pc, #16]	; (8008d98 <__assert_func+0x38>)
 8008d86:	461c      	mov	r4, r3
 8008d88:	e7f3      	b.n	8008d72 <__assert_func+0x12>
 8008d8a:	bf00      	nop
 8008d8c:	20000064 	.word	0x20000064
 8008d90:	0800aa45 	.word	0x0800aa45
 8008d94:	0800aa52 	.word	0x0800aa52
 8008d98:	0800aa80 	.word	0x0800aa80

08008d9c <_calloc_r>:
 8008d9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d9e:	fba1 2402 	umull	r2, r4, r1, r2
 8008da2:	b94c      	cbnz	r4, 8008db8 <_calloc_r+0x1c>
 8008da4:	4611      	mov	r1, r2
 8008da6:	9201      	str	r2, [sp, #4]
 8008da8:	f7fd fd30 	bl	800680c <_malloc_r>
 8008dac:	9a01      	ldr	r2, [sp, #4]
 8008dae:	4605      	mov	r5, r0
 8008db0:	b930      	cbnz	r0, 8008dc0 <_calloc_r+0x24>
 8008db2:	4628      	mov	r0, r5
 8008db4:	b003      	add	sp, #12
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	220c      	movs	r2, #12
 8008dba:	6002      	str	r2, [r0, #0]
 8008dbc:	2500      	movs	r5, #0
 8008dbe:	e7f8      	b.n	8008db2 <_calloc_r+0x16>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	f7fc fdac 	bl	800591e <memset>
 8008dc6:	e7f4      	b.n	8008db2 <_calloc_r+0x16>

08008dc8 <rshift>:
 8008dc8:	6903      	ldr	r3, [r0, #16]
 8008dca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dd6:	f100 0414 	add.w	r4, r0, #20
 8008dda:	dd45      	ble.n	8008e68 <rshift+0xa0>
 8008ddc:	f011 011f 	ands.w	r1, r1, #31
 8008de0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008de4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008de8:	d10c      	bne.n	8008e04 <rshift+0x3c>
 8008dea:	f100 0710 	add.w	r7, r0, #16
 8008dee:	4629      	mov	r1, r5
 8008df0:	42b1      	cmp	r1, r6
 8008df2:	d334      	bcc.n	8008e5e <rshift+0x96>
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	1eea      	subs	r2, r5, #3
 8008dfa:	4296      	cmp	r6, r2
 8008dfc:	bf38      	it	cc
 8008dfe:	2300      	movcc	r3, #0
 8008e00:	4423      	add	r3, r4
 8008e02:	e015      	b.n	8008e30 <rshift+0x68>
 8008e04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e08:	f1c1 0820 	rsb	r8, r1, #32
 8008e0c:	40cf      	lsrs	r7, r1
 8008e0e:	f105 0e04 	add.w	lr, r5, #4
 8008e12:	46a1      	mov	r9, r4
 8008e14:	4576      	cmp	r6, lr
 8008e16:	46f4      	mov	ip, lr
 8008e18:	d815      	bhi.n	8008e46 <rshift+0x7e>
 8008e1a:	1a9a      	subs	r2, r3, r2
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	3a04      	subs	r2, #4
 8008e20:	3501      	adds	r5, #1
 8008e22:	42ae      	cmp	r6, r5
 8008e24:	bf38      	it	cc
 8008e26:	2200      	movcc	r2, #0
 8008e28:	18a3      	adds	r3, r4, r2
 8008e2a:	50a7      	str	r7, [r4, r2]
 8008e2c:	b107      	cbz	r7, 8008e30 <rshift+0x68>
 8008e2e:	3304      	adds	r3, #4
 8008e30:	1b1a      	subs	r2, r3, r4
 8008e32:	42a3      	cmp	r3, r4
 8008e34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e38:	bf08      	it	eq
 8008e3a:	2300      	moveq	r3, #0
 8008e3c:	6102      	str	r2, [r0, #16]
 8008e3e:	bf08      	it	eq
 8008e40:	6143      	streq	r3, [r0, #20]
 8008e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e46:	f8dc c000 	ldr.w	ip, [ip]
 8008e4a:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e4e:	ea4c 0707 	orr.w	r7, ip, r7
 8008e52:	f849 7b04 	str.w	r7, [r9], #4
 8008e56:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e5a:	40cf      	lsrs	r7, r1
 8008e5c:	e7da      	b.n	8008e14 <rshift+0x4c>
 8008e5e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e62:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e66:	e7c3      	b.n	8008df0 <rshift+0x28>
 8008e68:	4623      	mov	r3, r4
 8008e6a:	e7e1      	b.n	8008e30 <rshift+0x68>

08008e6c <__hexdig_fun>:
 8008e6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d802      	bhi.n	8008e7a <__hexdig_fun+0xe>
 8008e74:	3820      	subs	r0, #32
 8008e76:	b2c0      	uxtb	r0, r0
 8008e78:	4770      	bx	lr
 8008e7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e7e:	2b05      	cmp	r3, #5
 8008e80:	d801      	bhi.n	8008e86 <__hexdig_fun+0x1a>
 8008e82:	3847      	subs	r0, #71	; 0x47
 8008e84:	e7f7      	b.n	8008e76 <__hexdig_fun+0xa>
 8008e86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e8a:	2b05      	cmp	r3, #5
 8008e8c:	d801      	bhi.n	8008e92 <__hexdig_fun+0x26>
 8008e8e:	3827      	subs	r0, #39	; 0x27
 8008e90:	e7f1      	b.n	8008e76 <__hexdig_fun+0xa>
 8008e92:	2000      	movs	r0, #0
 8008e94:	4770      	bx	lr
	...

08008e98 <__gethex>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	4617      	mov	r7, r2
 8008e9e:	680a      	ldr	r2, [r1, #0]
 8008ea0:	b085      	sub	sp, #20
 8008ea2:	f102 0b02 	add.w	fp, r2, #2
 8008ea6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008eaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008eae:	4681      	mov	r9, r0
 8008eb0:	468a      	mov	sl, r1
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	32fe      	adds	r2, #254	; 0xfe
 8008eb6:	eb02 030b 	add.w	r3, r2, fp
 8008eba:	46d8      	mov	r8, fp
 8008ebc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	2830      	cmp	r0, #48	; 0x30
 8008ec4:	d0f7      	beq.n	8008eb6 <__gethex+0x1e>
 8008ec6:	f7ff ffd1 	bl	8008e6c <__hexdig_fun>
 8008eca:	4604      	mov	r4, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d138      	bne.n	8008f42 <__gethex+0xaa>
 8008ed0:	49a7      	ldr	r1, [pc, #668]	; (8009170 <__gethex+0x2d8>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	f7ff ff0a 	bl	8008cee <strncmp>
 8008eda:	4606      	mov	r6, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d169      	bne.n	8008fb4 <__gethex+0x11c>
 8008ee0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008ee4:	465d      	mov	r5, fp
 8008ee6:	f7ff ffc1 	bl	8008e6c <__hexdig_fun>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d064      	beq.n	8008fb8 <__gethex+0x120>
 8008eee:	465a      	mov	r2, fp
 8008ef0:	7810      	ldrb	r0, [r2, #0]
 8008ef2:	2830      	cmp	r0, #48	; 0x30
 8008ef4:	4690      	mov	r8, r2
 8008ef6:	f102 0201 	add.w	r2, r2, #1
 8008efa:	d0f9      	beq.n	8008ef0 <__gethex+0x58>
 8008efc:	f7ff ffb6 	bl	8008e6c <__hexdig_fun>
 8008f00:	2301      	movs	r3, #1
 8008f02:	fab0 f480 	clz	r4, r0
 8008f06:	0964      	lsrs	r4, r4, #5
 8008f08:	465e      	mov	r6, fp
 8008f0a:	9301      	str	r3, [sp, #4]
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	4615      	mov	r5, r2
 8008f10:	3201      	adds	r2, #1
 8008f12:	7828      	ldrb	r0, [r5, #0]
 8008f14:	f7ff ffaa 	bl	8008e6c <__hexdig_fun>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d1f8      	bne.n	8008f0e <__gethex+0x76>
 8008f1c:	4994      	ldr	r1, [pc, #592]	; (8009170 <__gethex+0x2d8>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4628      	mov	r0, r5
 8008f22:	f7ff fee4 	bl	8008cee <strncmp>
 8008f26:	b978      	cbnz	r0, 8008f48 <__gethex+0xb0>
 8008f28:	b946      	cbnz	r6, 8008f3c <__gethex+0xa4>
 8008f2a:	1c6e      	adds	r6, r5, #1
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	4615      	mov	r5, r2
 8008f30:	3201      	adds	r2, #1
 8008f32:	7828      	ldrb	r0, [r5, #0]
 8008f34:	f7ff ff9a 	bl	8008e6c <__hexdig_fun>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1f8      	bne.n	8008f2e <__gethex+0x96>
 8008f3c:	1b73      	subs	r3, r6, r5
 8008f3e:	009e      	lsls	r6, r3, #2
 8008f40:	e004      	b.n	8008f4c <__gethex+0xb4>
 8008f42:	2400      	movs	r4, #0
 8008f44:	4626      	mov	r6, r4
 8008f46:	e7e1      	b.n	8008f0c <__gethex+0x74>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	d1f7      	bne.n	8008f3c <__gethex+0xa4>
 8008f4c:	782b      	ldrb	r3, [r5, #0]
 8008f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f52:	2b50      	cmp	r3, #80	; 0x50
 8008f54:	d13d      	bne.n	8008fd2 <__gethex+0x13a>
 8008f56:	786b      	ldrb	r3, [r5, #1]
 8008f58:	2b2b      	cmp	r3, #43	; 0x2b
 8008f5a:	d02f      	beq.n	8008fbc <__gethex+0x124>
 8008f5c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f5e:	d031      	beq.n	8008fc4 <__gethex+0x12c>
 8008f60:	1c69      	adds	r1, r5, #1
 8008f62:	f04f 0b00 	mov.w	fp, #0
 8008f66:	7808      	ldrb	r0, [r1, #0]
 8008f68:	f7ff ff80 	bl	8008e6c <__hexdig_fun>
 8008f6c:	1e42      	subs	r2, r0, #1
 8008f6e:	b2d2      	uxtb	r2, r2
 8008f70:	2a18      	cmp	r2, #24
 8008f72:	d82e      	bhi.n	8008fd2 <__gethex+0x13a>
 8008f74:	f1a0 0210 	sub.w	r2, r0, #16
 8008f78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f7c:	f7ff ff76 	bl	8008e6c <__hexdig_fun>
 8008f80:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f84:	fa5f fc8c 	uxtb.w	ip, ip
 8008f88:	f1bc 0f18 	cmp.w	ip, #24
 8008f8c:	d91d      	bls.n	8008fca <__gethex+0x132>
 8008f8e:	f1bb 0f00 	cmp.w	fp, #0
 8008f92:	d000      	beq.n	8008f96 <__gethex+0xfe>
 8008f94:	4252      	negs	r2, r2
 8008f96:	4416      	add	r6, r2
 8008f98:	f8ca 1000 	str.w	r1, [sl]
 8008f9c:	b1dc      	cbz	r4, 8008fd6 <__gethex+0x13e>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf14      	ite	ne
 8008fa4:	f04f 0800 	movne.w	r8, #0
 8008fa8:	f04f 0806 	moveq.w	r8, #6
 8008fac:	4640      	mov	r0, r8
 8008fae:	b005      	add	sp, #20
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb4:	4645      	mov	r5, r8
 8008fb6:	4626      	mov	r6, r4
 8008fb8:	2401      	movs	r4, #1
 8008fba:	e7c7      	b.n	8008f4c <__gethex+0xb4>
 8008fbc:	f04f 0b00 	mov.w	fp, #0
 8008fc0:	1ca9      	adds	r1, r5, #2
 8008fc2:	e7d0      	b.n	8008f66 <__gethex+0xce>
 8008fc4:	f04f 0b01 	mov.w	fp, #1
 8008fc8:	e7fa      	b.n	8008fc0 <__gethex+0x128>
 8008fca:	230a      	movs	r3, #10
 8008fcc:	fb03 0002 	mla	r0, r3, r2, r0
 8008fd0:	e7d0      	b.n	8008f74 <__gethex+0xdc>
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	e7e0      	b.n	8008f98 <__gethex+0x100>
 8008fd6:	eba5 0308 	sub.w	r3, r5, r8
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	4621      	mov	r1, r4
 8008fde:	2b07      	cmp	r3, #7
 8008fe0:	dc0a      	bgt.n	8008ff8 <__gethex+0x160>
 8008fe2:	4648      	mov	r0, r9
 8008fe4:	f7fd fc9e 	bl	8006924 <_Balloc>
 8008fe8:	4604      	mov	r4, r0
 8008fea:	b940      	cbnz	r0, 8008ffe <__gethex+0x166>
 8008fec:	4b61      	ldr	r3, [pc, #388]	; (8009174 <__gethex+0x2dc>)
 8008fee:	4602      	mov	r2, r0
 8008ff0:	21e4      	movs	r1, #228	; 0xe4
 8008ff2:	4861      	ldr	r0, [pc, #388]	; (8009178 <__gethex+0x2e0>)
 8008ff4:	f7ff feb4 	bl	8008d60 <__assert_func>
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	105b      	asrs	r3, r3, #1
 8008ffc:	e7ef      	b.n	8008fde <__gethex+0x146>
 8008ffe:	f100 0a14 	add.w	sl, r0, #20
 8009002:	2300      	movs	r3, #0
 8009004:	495a      	ldr	r1, [pc, #360]	; (8009170 <__gethex+0x2d8>)
 8009006:	f8cd a004 	str.w	sl, [sp, #4]
 800900a:	469b      	mov	fp, r3
 800900c:	45a8      	cmp	r8, r5
 800900e:	d342      	bcc.n	8009096 <__gethex+0x1fe>
 8009010:	9801      	ldr	r0, [sp, #4]
 8009012:	f840 bb04 	str.w	fp, [r0], #4
 8009016:	eba0 000a 	sub.w	r0, r0, sl
 800901a:	1080      	asrs	r0, r0, #2
 800901c:	6120      	str	r0, [r4, #16]
 800901e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009022:	4658      	mov	r0, fp
 8009024:	f7fd fd70 	bl	8006b08 <__hi0bits>
 8009028:	683d      	ldr	r5, [r7, #0]
 800902a:	eba8 0000 	sub.w	r0, r8, r0
 800902e:	42a8      	cmp	r0, r5
 8009030:	dd59      	ble.n	80090e6 <__gethex+0x24e>
 8009032:	eba0 0805 	sub.w	r8, r0, r5
 8009036:	4641      	mov	r1, r8
 8009038:	4620      	mov	r0, r4
 800903a:	f7fe f8ff 	bl	800723c <__any_on>
 800903e:	4683      	mov	fp, r0
 8009040:	b1b8      	cbz	r0, 8009072 <__gethex+0x1da>
 8009042:	f108 33ff 	add.w	r3, r8, #4294967295
 8009046:	1159      	asrs	r1, r3, #5
 8009048:	f003 021f 	and.w	r2, r3, #31
 800904c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009050:	f04f 0b01 	mov.w	fp, #1
 8009054:	fa0b f202 	lsl.w	r2, fp, r2
 8009058:	420a      	tst	r2, r1
 800905a:	d00a      	beq.n	8009072 <__gethex+0x1da>
 800905c:	455b      	cmp	r3, fp
 800905e:	dd06      	ble.n	800906e <__gethex+0x1d6>
 8009060:	f1a8 0102 	sub.w	r1, r8, #2
 8009064:	4620      	mov	r0, r4
 8009066:	f7fe f8e9 	bl	800723c <__any_on>
 800906a:	2800      	cmp	r0, #0
 800906c:	d138      	bne.n	80090e0 <__gethex+0x248>
 800906e:	f04f 0b02 	mov.w	fp, #2
 8009072:	4641      	mov	r1, r8
 8009074:	4620      	mov	r0, r4
 8009076:	f7ff fea7 	bl	8008dc8 <rshift>
 800907a:	4446      	add	r6, r8
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	42b3      	cmp	r3, r6
 8009080:	da41      	bge.n	8009106 <__gethex+0x26e>
 8009082:	4621      	mov	r1, r4
 8009084:	4648      	mov	r0, r9
 8009086:	f7fd fc8d 	bl	80069a4 <_Bfree>
 800908a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800908c:	2300      	movs	r3, #0
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009094:	e78a      	b.n	8008fac <__gethex+0x114>
 8009096:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800909a:	2a2e      	cmp	r2, #46	; 0x2e
 800909c:	d014      	beq.n	80090c8 <__gethex+0x230>
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d106      	bne.n	80090b0 <__gethex+0x218>
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	f843 bb04 	str.w	fp, [r3], #4
 80090a8:	f04f 0b00 	mov.w	fp, #0
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	465b      	mov	r3, fp
 80090b0:	7828      	ldrb	r0, [r5, #0]
 80090b2:	9303      	str	r3, [sp, #12]
 80090b4:	f7ff feda 	bl	8008e6c <__hexdig_fun>
 80090b8:	9b03      	ldr	r3, [sp, #12]
 80090ba:	f000 000f 	and.w	r0, r0, #15
 80090be:	4098      	lsls	r0, r3
 80090c0:	ea4b 0b00 	orr.w	fp, fp, r0
 80090c4:	3304      	adds	r3, #4
 80090c6:	e7a1      	b.n	800900c <__gethex+0x174>
 80090c8:	45a8      	cmp	r8, r5
 80090ca:	d8e8      	bhi.n	800909e <__gethex+0x206>
 80090cc:	2201      	movs	r2, #1
 80090ce:	4628      	mov	r0, r5
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	f7ff fe0c 	bl	8008cee <strncmp>
 80090d6:	4926      	ldr	r1, [pc, #152]	; (8009170 <__gethex+0x2d8>)
 80090d8:	9b03      	ldr	r3, [sp, #12]
 80090da:	2800      	cmp	r0, #0
 80090dc:	d1df      	bne.n	800909e <__gethex+0x206>
 80090de:	e795      	b.n	800900c <__gethex+0x174>
 80090e0:	f04f 0b03 	mov.w	fp, #3
 80090e4:	e7c5      	b.n	8009072 <__gethex+0x1da>
 80090e6:	da0b      	bge.n	8009100 <__gethex+0x268>
 80090e8:	eba5 0800 	sub.w	r8, r5, r0
 80090ec:	4621      	mov	r1, r4
 80090ee:	4642      	mov	r2, r8
 80090f0:	4648      	mov	r0, r9
 80090f2:	f7fd fe71 	bl	8006dd8 <__lshift>
 80090f6:	eba6 0608 	sub.w	r6, r6, r8
 80090fa:	4604      	mov	r4, r0
 80090fc:	f100 0a14 	add.w	sl, r0, #20
 8009100:	f04f 0b00 	mov.w	fp, #0
 8009104:	e7ba      	b.n	800907c <__gethex+0x1e4>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	42b3      	cmp	r3, r6
 800910a:	dd73      	ble.n	80091f4 <__gethex+0x35c>
 800910c:	1b9e      	subs	r6, r3, r6
 800910e:	42b5      	cmp	r5, r6
 8009110:	dc34      	bgt.n	800917c <__gethex+0x2e4>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b02      	cmp	r3, #2
 8009116:	d023      	beq.n	8009160 <__gethex+0x2c8>
 8009118:	2b03      	cmp	r3, #3
 800911a:	d025      	beq.n	8009168 <__gethex+0x2d0>
 800911c:	2b01      	cmp	r3, #1
 800911e:	d115      	bne.n	800914c <__gethex+0x2b4>
 8009120:	42b5      	cmp	r5, r6
 8009122:	d113      	bne.n	800914c <__gethex+0x2b4>
 8009124:	2d01      	cmp	r5, #1
 8009126:	d10b      	bne.n	8009140 <__gethex+0x2a8>
 8009128:	9a02      	ldr	r2, [sp, #8]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	2301      	movs	r3, #1
 8009130:	6123      	str	r3, [r4, #16]
 8009132:	f8ca 3000 	str.w	r3, [sl]
 8009136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009138:	f04f 0862 	mov.w	r8, #98	; 0x62
 800913c:	601c      	str	r4, [r3, #0]
 800913e:	e735      	b.n	8008fac <__gethex+0x114>
 8009140:	1e69      	subs	r1, r5, #1
 8009142:	4620      	mov	r0, r4
 8009144:	f7fe f87a 	bl	800723c <__any_on>
 8009148:	2800      	cmp	r0, #0
 800914a:	d1ed      	bne.n	8009128 <__gethex+0x290>
 800914c:	4621      	mov	r1, r4
 800914e:	4648      	mov	r0, r9
 8009150:	f7fd fc28 	bl	80069a4 <_Bfree>
 8009154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009156:	2300      	movs	r3, #0
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800915e:	e725      	b.n	8008fac <__gethex+0x114>
 8009160:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f2      	bne.n	800914c <__gethex+0x2b4>
 8009166:	e7df      	b.n	8009128 <__gethex+0x290>
 8009168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1dc      	bne.n	8009128 <__gethex+0x290>
 800916e:	e7ed      	b.n	800914c <__gethex+0x2b4>
 8009170:	0800a8bc 	.word	0x0800a8bc
 8009174:	0800a74f 	.word	0x0800a74f
 8009178:	0800aa81 	.word	0x0800aa81
 800917c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009180:	f1bb 0f00 	cmp.w	fp, #0
 8009184:	d133      	bne.n	80091ee <__gethex+0x356>
 8009186:	f1b8 0f00 	cmp.w	r8, #0
 800918a:	d004      	beq.n	8009196 <__gethex+0x2fe>
 800918c:	4641      	mov	r1, r8
 800918e:	4620      	mov	r0, r4
 8009190:	f7fe f854 	bl	800723c <__any_on>
 8009194:	4683      	mov	fp, r0
 8009196:	ea4f 1268 	mov.w	r2, r8, asr #5
 800919a:	2301      	movs	r3, #1
 800919c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80091a0:	f008 081f 	and.w	r8, r8, #31
 80091a4:	fa03 f308 	lsl.w	r3, r3, r8
 80091a8:	4213      	tst	r3, r2
 80091aa:	4631      	mov	r1, r6
 80091ac:	4620      	mov	r0, r4
 80091ae:	bf18      	it	ne
 80091b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80091b4:	1bad      	subs	r5, r5, r6
 80091b6:	f7ff fe07 	bl	8008dc8 <rshift>
 80091ba:	687e      	ldr	r6, [r7, #4]
 80091bc:	f04f 0802 	mov.w	r8, #2
 80091c0:	f1bb 0f00 	cmp.w	fp, #0
 80091c4:	d04a      	beq.n	800925c <__gethex+0x3c4>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d016      	beq.n	80091fa <__gethex+0x362>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d018      	beq.n	8009202 <__gethex+0x36a>
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d109      	bne.n	80091e8 <__gethex+0x350>
 80091d4:	f01b 0f02 	tst.w	fp, #2
 80091d8:	d006      	beq.n	80091e8 <__gethex+0x350>
 80091da:	f8da 3000 	ldr.w	r3, [sl]
 80091de:	ea4b 0b03 	orr.w	fp, fp, r3
 80091e2:	f01b 0f01 	tst.w	fp, #1
 80091e6:	d10f      	bne.n	8009208 <__gethex+0x370>
 80091e8:	f048 0810 	orr.w	r8, r8, #16
 80091ec:	e036      	b.n	800925c <__gethex+0x3c4>
 80091ee:	f04f 0b01 	mov.w	fp, #1
 80091f2:	e7d0      	b.n	8009196 <__gethex+0x2fe>
 80091f4:	f04f 0801 	mov.w	r8, #1
 80091f8:	e7e2      	b.n	80091c0 <__gethex+0x328>
 80091fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091fc:	f1c3 0301 	rsb	r3, r3, #1
 8009200:	930f      	str	r3, [sp, #60]	; 0x3c
 8009202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0ef      	beq.n	80091e8 <__gethex+0x350>
 8009208:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800920c:	f104 0214 	add.w	r2, r4, #20
 8009210:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800921a:	2300      	movs	r3, #0
 800921c:	4694      	mov	ip, r2
 800921e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009222:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009226:	d01e      	beq.n	8009266 <__gethex+0x3ce>
 8009228:	3101      	adds	r1, #1
 800922a:	f8cc 1000 	str.w	r1, [ip]
 800922e:	f1b8 0f02 	cmp.w	r8, #2
 8009232:	f104 0214 	add.w	r2, r4, #20
 8009236:	d13d      	bne.n	80092b4 <__gethex+0x41c>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	42ab      	cmp	r3, r5
 800923e:	d10b      	bne.n	8009258 <__gethex+0x3c0>
 8009240:	1169      	asrs	r1, r5, #5
 8009242:	2301      	movs	r3, #1
 8009244:	f005 051f 	and.w	r5, r5, #31
 8009248:	fa03 f505 	lsl.w	r5, r3, r5
 800924c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009250:	421d      	tst	r5, r3
 8009252:	bf18      	it	ne
 8009254:	f04f 0801 	movne.w	r8, #1
 8009258:	f048 0820 	orr.w	r8, r8, #32
 800925c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800925e:	601c      	str	r4, [r3, #0]
 8009260:	9b02      	ldr	r3, [sp, #8]
 8009262:	601e      	str	r6, [r3, #0]
 8009264:	e6a2      	b.n	8008fac <__gethex+0x114>
 8009266:	4290      	cmp	r0, r2
 8009268:	f842 3c04 	str.w	r3, [r2, #-4]
 800926c:	d8d6      	bhi.n	800921c <__gethex+0x384>
 800926e:	68a2      	ldr	r2, [r4, #8]
 8009270:	4593      	cmp	fp, r2
 8009272:	db17      	blt.n	80092a4 <__gethex+0x40c>
 8009274:	6861      	ldr	r1, [r4, #4]
 8009276:	4648      	mov	r0, r9
 8009278:	3101      	adds	r1, #1
 800927a:	f7fd fb53 	bl	8006924 <_Balloc>
 800927e:	4682      	mov	sl, r0
 8009280:	b918      	cbnz	r0, 800928a <__gethex+0x3f2>
 8009282:	4b1b      	ldr	r3, [pc, #108]	; (80092f0 <__gethex+0x458>)
 8009284:	4602      	mov	r2, r0
 8009286:	2184      	movs	r1, #132	; 0x84
 8009288:	e6b3      	b.n	8008ff2 <__gethex+0x15a>
 800928a:	6922      	ldr	r2, [r4, #16]
 800928c:	3202      	adds	r2, #2
 800928e:	f104 010c 	add.w	r1, r4, #12
 8009292:	0092      	lsls	r2, r2, #2
 8009294:	300c      	adds	r0, #12
 8009296:	f7ff fd4d 	bl	8008d34 <memcpy>
 800929a:	4621      	mov	r1, r4
 800929c:	4648      	mov	r0, r9
 800929e:	f7fd fb81 	bl	80069a4 <_Bfree>
 80092a2:	4654      	mov	r4, sl
 80092a4:	6922      	ldr	r2, [r4, #16]
 80092a6:	1c51      	adds	r1, r2, #1
 80092a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092ac:	6121      	str	r1, [r4, #16]
 80092ae:	2101      	movs	r1, #1
 80092b0:	6151      	str	r1, [r2, #20]
 80092b2:	e7bc      	b.n	800922e <__gethex+0x396>
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	4559      	cmp	r1, fp
 80092b8:	dd0b      	ble.n	80092d2 <__gethex+0x43a>
 80092ba:	2101      	movs	r1, #1
 80092bc:	4620      	mov	r0, r4
 80092be:	f7ff fd83 	bl	8008dc8 <rshift>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3601      	adds	r6, #1
 80092c6:	42b3      	cmp	r3, r6
 80092c8:	f6ff aedb 	blt.w	8009082 <__gethex+0x1ea>
 80092cc:	f04f 0801 	mov.w	r8, #1
 80092d0:	e7c2      	b.n	8009258 <__gethex+0x3c0>
 80092d2:	f015 051f 	ands.w	r5, r5, #31
 80092d6:	d0f9      	beq.n	80092cc <__gethex+0x434>
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	441a      	add	r2, r3
 80092dc:	f1c5 0520 	rsb	r5, r5, #32
 80092e0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80092e4:	f7fd fc10 	bl	8006b08 <__hi0bits>
 80092e8:	42a8      	cmp	r0, r5
 80092ea:	dbe6      	blt.n	80092ba <__gethex+0x422>
 80092ec:	e7ee      	b.n	80092cc <__gethex+0x434>
 80092ee:	bf00      	nop
 80092f0:	0800a74f 	.word	0x0800a74f

080092f4 <L_shift>:
 80092f4:	f1c2 0208 	rsb	r2, r2, #8
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	b570      	push	{r4, r5, r6, lr}
 80092fc:	f1c2 0620 	rsb	r6, r2, #32
 8009300:	6843      	ldr	r3, [r0, #4]
 8009302:	6804      	ldr	r4, [r0, #0]
 8009304:	fa03 f506 	lsl.w	r5, r3, r6
 8009308:	432c      	orrs	r4, r5
 800930a:	40d3      	lsrs	r3, r2
 800930c:	6004      	str	r4, [r0, #0]
 800930e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009312:	4288      	cmp	r0, r1
 8009314:	d3f4      	bcc.n	8009300 <L_shift+0xc>
 8009316:	bd70      	pop	{r4, r5, r6, pc}

08009318 <__match>:
 8009318:	b530      	push	{r4, r5, lr}
 800931a:	6803      	ldr	r3, [r0, #0]
 800931c:	3301      	adds	r3, #1
 800931e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009322:	b914      	cbnz	r4, 800932a <__match+0x12>
 8009324:	6003      	str	r3, [r0, #0]
 8009326:	2001      	movs	r0, #1
 8009328:	bd30      	pop	{r4, r5, pc}
 800932a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800932e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009332:	2d19      	cmp	r5, #25
 8009334:	bf98      	it	ls
 8009336:	3220      	addls	r2, #32
 8009338:	42a2      	cmp	r2, r4
 800933a:	d0f0      	beq.n	800931e <__match+0x6>
 800933c:	2000      	movs	r0, #0
 800933e:	e7f3      	b.n	8009328 <__match+0x10>

08009340 <__hexnan>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	6801      	ldr	r1, [r0, #0]
 8009348:	115e      	asrs	r6, r3, #5
 800934a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800934e:	f013 031f 	ands.w	r3, r3, #31
 8009352:	b087      	sub	sp, #28
 8009354:	bf18      	it	ne
 8009356:	3604      	addne	r6, #4
 8009358:	2500      	movs	r5, #0
 800935a:	1f37      	subs	r7, r6, #4
 800935c:	4682      	mov	sl, r0
 800935e:	4690      	mov	r8, r2
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f846 5c04 	str.w	r5, [r6, #-4]
 8009366:	46b9      	mov	r9, r7
 8009368:	463c      	mov	r4, r7
 800936a:	9502      	str	r5, [sp, #8]
 800936c:	46ab      	mov	fp, r5
 800936e:	784a      	ldrb	r2, [r1, #1]
 8009370:	1c4b      	adds	r3, r1, #1
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	b342      	cbz	r2, 80093c8 <__hexnan+0x88>
 8009376:	4610      	mov	r0, r2
 8009378:	9105      	str	r1, [sp, #20]
 800937a:	9204      	str	r2, [sp, #16]
 800937c:	f7ff fd76 	bl	8008e6c <__hexdig_fun>
 8009380:	2800      	cmp	r0, #0
 8009382:	d14f      	bne.n	8009424 <__hexnan+0xe4>
 8009384:	9a04      	ldr	r2, [sp, #16]
 8009386:	9905      	ldr	r1, [sp, #20]
 8009388:	2a20      	cmp	r2, #32
 800938a:	d818      	bhi.n	80093be <__hexnan+0x7e>
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	459b      	cmp	fp, r3
 8009390:	dd13      	ble.n	80093ba <__hexnan+0x7a>
 8009392:	454c      	cmp	r4, r9
 8009394:	d206      	bcs.n	80093a4 <__hexnan+0x64>
 8009396:	2d07      	cmp	r5, #7
 8009398:	dc04      	bgt.n	80093a4 <__hexnan+0x64>
 800939a:	462a      	mov	r2, r5
 800939c:	4649      	mov	r1, r9
 800939e:	4620      	mov	r0, r4
 80093a0:	f7ff ffa8 	bl	80092f4 <L_shift>
 80093a4:	4544      	cmp	r4, r8
 80093a6:	d950      	bls.n	800944a <__hexnan+0x10a>
 80093a8:	2300      	movs	r3, #0
 80093aa:	f1a4 0904 	sub.w	r9, r4, #4
 80093ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80093b2:	f8cd b008 	str.w	fp, [sp, #8]
 80093b6:	464c      	mov	r4, r9
 80093b8:	461d      	mov	r5, r3
 80093ba:	9903      	ldr	r1, [sp, #12]
 80093bc:	e7d7      	b.n	800936e <__hexnan+0x2e>
 80093be:	2a29      	cmp	r2, #41	; 0x29
 80093c0:	d155      	bne.n	800946e <__hexnan+0x12e>
 80093c2:	3102      	adds	r1, #2
 80093c4:	f8ca 1000 	str.w	r1, [sl]
 80093c8:	f1bb 0f00 	cmp.w	fp, #0
 80093cc:	d04f      	beq.n	800946e <__hexnan+0x12e>
 80093ce:	454c      	cmp	r4, r9
 80093d0:	d206      	bcs.n	80093e0 <__hexnan+0xa0>
 80093d2:	2d07      	cmp	r5, #7
 80093d4:	dc04      	bgt.n	80093e0 <__hexnan+0xa0>
 80093d6:	462a      	mov	r2, r5
 80093d8:	4649      	mov	r1, r9
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff ff8a 	bl	80092f4 <L_shift>
 80093e0:	4544      	cmp	r4, r8
 80093e2:	d934      	bls.n	800944e <__hexnan+0x10e>
 80093e4:	f1a8 0204 	sub.w	r2, r8, #4
 80093e8:	4623      	mov	r3, r4
 80093ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80093f2:	429f      	cmp	r7, r3
 80093f4:	d2f9      	bcs.n	80093ea <__hexnan+0xaa>
 80093f6:	1b3b      	subs	r3, r7, r4
 80093f8:	f023 0303 	bic.w	r3, r3, #3
 80093fc:	3304      	adds	r3, #4
 80093fe:	3e03      	subs	r6, #3
 8009400:	3401      	adds	r4, #1
 8009402:	42a6      	cmp	r6, r4
 8009404:	bf38      	it	cc
 8009406:	2304      	movcc	r3, #4
 8009408:	4443      	add	r3, r8
 800940a:	2200      	movs	r2, #0
 800940c:	f843 2b04 	str.w	r2, [r3], #4
 8009410:	429f      	cmp	r7, r3
 8009412:	d2fb      	bcs.n	800940c <__hexnan+0xcc>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	b91b      	cbnz	r3, 8009420 <__hexnan+0xe0>
 8009418:	4547      	cmp	r7, r8
 800941a:	d126      	bne.n	800946a <__hexnan+0x12a>
 800941c:	2301      	movs	r3, #1
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	2005      	movs	r0, #5
 8009422:	e025      	b.n	8009470 <__hexnan+0x130>
 8009424:	3501      	adds	r5, #1
 8009426:	2d08      	cmp	r5, #8
 8009428:	f10b 0b01 	add.w	fp, fp, #1
 800942c:	dd06      	ble.n	800943c <__hexnan+0xfc>
 800942e:	4544      	cmp	r4, r8
 8009430:	d9c3      	bls.n	80093ba <__hexnan+0x7a>
 8009432:	2300      	movs	r3, #0
 8009434:	f844 3c04 	str.w	r3, [r4, #-4]
 8009438:	2501      	movs	r5, #1
 800943a:	3c04      	subs	r4, #4
 800943c:	6822      	ldr	r2, [r4, #0]
 800943e:	f000 000f 	and.w	r0, r0, #15
 8009442:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009446:	6020      	str	r0, [r4, #0]
 8009448:	e7b7      	b.n	80093ba <__hexnan+0x7a>
 800944a:	2508      	movs	r5, #8
 800944c:	e7b5      	b.n	80093ba <__hexnan+0x7a>
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0df      	beq.n	8009414 <__hexnan+0xd4>
 8009454:	f1c3 0320 	rsb	r3, r3, #32
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	40da      	lsrs	r2, r3
 800945e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009462:	4013      	ands	r3, r2
 8009464:	f846 3c04 	str.w	r3, [r6, #-4]
 8009468:	e7d4      	b.n	8009414 <__hexnan+0xd4>
 800946a:	3f04      	subs	r7, #4
 800946c:	e7d2      	b.n	8009414 <__hexnan+0xd4>
 800946e:	2004      	movs	r0, #4
 8009470:	b007      	add	sp, #28
 8009472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009476 <__ascii_mbtowc>:
 8009476:	b082      	sub	sp, #8
 8009478:	b901      	cbnz	r1, 800947c <__ascii_mbtowc+0x6>
 800947a:	a901      	add	r1, sp, #4
 800947c:	b142      	cbz	r2, 8009490 <__ascii_mbtowc+0x1a>
 800947e:	b14b      	cbz	r3, 8009494 <__ascii_mbtowc+0x1e>
 8009480:	7813      	ldrb	r3, [r2, #0]
 8009482:	600b      	str	r3, [r1, #0]
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	1e10      	subs	r0, r2, #0
 8009488:	bf18      	it	ne
 800948a:	2001      	movne	r0, #1
 800948c:	b002      	add	sp, #8
 800948e:	4770      	bx	lr
 8009490:	4610      	mov	r0, r2
 8009492:	e7fb      	b.n	800948c <__ascii_mbtowc+0x16>
 8009494:	f06f 0001 	mvn.w	r0, #1
 8009498:	e7f8      	b.n	800948c <__ascii_mbtowc+0x16>

0800949a <_realloc_r>:
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	4680      	mov	r8, r0
 80094a0:	4614      	mov	r4, r2
 80094a2:	460e      	mov	r6, r1
 80094a4:	b921      	cbnz	r1, 80094b0 <_realloc_r+0x16>
 80094a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	4611      	mov	r1, r2
 80094ac:	f7fd b9ae 	b.w	800680c <_malloc_r>
 80094b0:	b92a      	cbnz	r2, 80094be <_realloc_r+0x24>
 80094b2:	f7fd f937 	bl	8006724 <_free_r>
 80094b6:	4625      	mov	r5, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094be:	f000 f93a 	bl	8009736 <_malloc_usable_size_r>
 80094c2:	4284      	cmp	r4, r0
 80094c4:	4607      	mov	r7, r0
 80094c6:	d802      	bhi.n	80094ce <_realloc_r+0x34>
 80094c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094cc:	d812      	bhi.n	80094f4 <_realloc_r+0x5a>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4640      	mov	r0, r8
 80094d2:	f7fd f99b 	bl	800680c <_malloc_r>
 80094d6:	4605      	mov	r5, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	d0ed      	beq.n	80094b8 <_realloc_r+0x1e>
 80094dc:	42bc      	cmp	r4, r7
 80094de:	4622      	mov	r2, r4
 80094e0:	4631      	mov	r1, r6
 80094e2:	bf28      	it	cs
 80094e4:	463a      	movcs	r2, r7
 80094e6:	f7ff fc25 	bl	8008d34 <memcpy>
 80094ea:	4631      	mov	r1, r6
 80094ec:	4640      	mov	r0, r8
 80094ee:	f7fd f919 	bl	8006724 <_free_r>
 80094f2:	e7e1      	b.n	80094b8 <_realloc_r+0x1e>
 80094f4:	4635      	mov	r5, r6
 80094f6:	e7df      	b.n	80094b8 <_realloc_r+0x1e>

080094f8 <_strtoul_l.constprop.0>:
 80094f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094fc:	4f36      	ldr	r7, [pc, #216]	; (80095d8 <_strtoul_l.constprop.0+0xe0>)
 80094fe:	4686      	mov	lr, r0
 8009500:	460d      	mov	r5, r1
 8009502:	4628      	mov	r0, r5
 8009504:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009508:	5d3e      	ldrb	r6, [r7, r4]
 800950a:	f016 0608 	ands.w	r6, r6, #8
 800950e:	d1f8      	bne.n	8009502 <_strtoul_l.constprop.0+0xa>
 8009510:	2c2d      	cmp	r4, #45	; 0x2d
 8009512:	d130      	bne.n	8009576 <_strtoul_l.constprop.0+0x7e>
 8009514:	782c      	ldrb	r4, [r5, #0]
 8009516:	2601      	movs	r6, #1
 8009518:	1c85      	adds	r5, r0, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d057      	beq.n	80095ce <_strtoul_l.constprop.0+0xd6>
 800951e:	2b10      	cmp	r3, #16
 8009520:	d109      	bne.n	8009536 <_strtoul_l.constprop.0+0x3e>
 8009522:	2c30      	cmp	r4, #48	; 0x30
 8009524:	d107      	bne.n	8009536 <_strtoul_l.constprop.0+0x3e>
 8009526:	7828      	ldrb	r0, [r5, #0]
 8009528:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800952c:	2858      	cmp	r0, #88	; 0x58
 800952e:	d149      	bne.n	80095c4 <_strtoul_l.constprop.0+0xcc>
 8009530:	786c      	ldrb	r4, [r5, #1]
 8009532:	2310      	movs	r3, #16
 8009534:	3502      	adds	r5, #2
 8009536:	f04f 38ff 	mov.w	r8, #4294967295
 800953a:	2700      	movs	r7, #0
 800953c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009540:	fb03 f908 	mul.w	r9, r3, r8
 8009544:	ea6f 0909 	mvn.w	r9, r9
 8009548:	4638      	mov	r0, r7
 800954a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800954e:	f1bc 0f09 	cmp.w	ip, #9
 8009552:	d815      	bhi.n	8009580 <_strtoul_l.constprop.0+0x88>
 8009554:	4664      	mov	r4, ip
 8009556:	42a3      	cmp	r3, r4
 8009558:	dd23      	ble.n	80095a2 <_strtoul_l.constprop.0+0xaa>
 800955a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800955e:	d007      	beq.n	8009570 <_strtoul_l.constprop.0+0x78>
 8009560:	4580      	cmp	r8, r0
 8009562:	d31b      	bcc.n	800959c <_strtoul_l.constprop.0+0xa4>
 8009564:	d101      	bne.n	800956a <_strtoul_l.constprop.0+0x72>
 8009566:	45a1      	cmp	r9, r4
 8009568:	db18      	blt.n	800959c <_strtoul_l.constprop.0+0xa4>
 800956a:	fb00 4003 	mla	r0, r0, r3, r4
 800956e:	2701      	movs	r7, #1
 8009570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009574:	e7e9      	b.n	800954a <_strtoul_l.constprop.0+0x52>
 8009576:	2c2b      	cmp	r4, #43	; 0x2b
 8009578:	bf04      	itt	eq
 800957a:	782c      	ldrbeq	r4, [r5, #0]
 800957c:	1c85      	addeq	r5, r0, #2
 800957e:	e7cc      	b.n	800951a <_strtoul_l.constprop.0+0x22>
 8009580:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009584:	f1bc 0f19 	cmp.w	ip, #25
 8009588:	d801      	bhi.n	800958e <_strtoul_l.constprop.0+0x96>
 800958a:	3c37      	subs	r4, #55	; 0x37
 800958c:	e7e3      	b.n	8009556 <_strtoul_l.constprop.0+0x5e>
 800958e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009592:	f1bc 0f19 	cmp.w	ip, #25
 8009596:	d804      	bhi.n	80095a2 <_strtoul_l.constprop.0+0xaa>
 8009598:	3c57      	subs	r4, #87	; 0x57
 800959a:	e7dc      	b.n	8009556 <_strtoul_l.constprop.0+0x5e>
 800959c:	f04f 37ff 	mov.w	r7, #4294967295
 80095a0:	e7e6      	b.n	8009570 <_strtoul_l.constprop.0+0x78>
 80095a2:	1c7b      	adds	r3, r7, #1
 80095a4:	d106      	bne.n	80095b4 <_strtoul_l.constprop.0+0xbc>
 80095a6:	2322      	movs	r3, #34	; 0x22
 80095a8:	f8ce 3000 	str.w	r3, [lr]
 80095ac:	4638      	mov	r0, r7
 80095ae:	b932      	cbnz	r2, 80095be <_strtoul_l.constprop.0+0xc6>
 80095b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b4:	b106      	cbz	r6, 80095b8 <_strtoul_l.constprop.0+0xc0>
 80095b6:	4240      	negs	r0, r0
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	d0f9      	beq.n	80095b0 <_strtoul_l.constprop.0+0xb8>
 80095bc:	b107      	cbz	r7, 80095c0 <_strtoul_l.constprop.0+0xc8>
 80095be:	1e69      	subs	r1, r5, #1
 80095c0:	6011      	str	r1, [r2, #0]
 80095c2:	e7f5      	b.n	80095b0 <_strtoul_l.constprop.0+0xb8>
 80095c4:	2430      	movs	r4, #48	; 0x30
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1b5      	bne.n	8009536 <_strtoul_l.constprop.0+0x3e>
 80095ca:	2308      	movs	r3, #8
 80095cc:	e7b3      	b.n	8009536 <_strtoul_l.constprop.0+0x3e>
 80095ce:	2c30      	cmp	r4, #48	; 0x30
 80095d0:	d0a9      	beq.n	8009526 <_strtoul_l.constprop.0+0x2e>
 80095d2:	230a      	movs	r3, #10
 80095d4:	e7af      	b.n	8009536 <_strtoul_l.constprop.0+0x3e>
 80095d6:	bf00      	nop
 80095d8:	0800a911 	.word	0x0800a911

080095dc <_strtoul_r>:
 80095dc:	f7ff bf8c 	b.w	80094f8 <_strtoul_l.constprop.0>

080095e0 <__ascii_wctomb>:
 80095e0:	b149      	cbz	r1, 80095f6 <__ascii_wctomb+0x16>
 80095e2:	2aff      	cmp	r2, #255	; 0xff
 80095e4:	bf85      	ittet	hi
 80095e6:	238a      	movhi	r3, #138	; 0x8a
 80095e8:	6003      	strhi	r3, [r0, #0]
 80095ea:	700a      	strbls	r2, [r1, #0]
 80095ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80095f0:	bf98      	it	ls
 80095f2:	2001      	movls	r0, #1
 80095f4:	4770      	bx	lr
 80095f6:	4608      	mov	r0, r1
 80095f8:	4770      	bx	lr
	...

080095fc <fiprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	b503      	push	{r0, r1, lr}
 8009600:	4601      	mov	r1, r0
 8009602:	ab03      	add	r3, sp, #12
 8009604:	4805      	ldr	r0, [pc, #20]	; (800961c <fiprintf+0x20>)
 8009606:	f853 2b04 	ldr.w	r2, [r3], #4
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	f000 f8c3 	bl	8009798 <_vfiprintf_r>
 8009612:	b002      	add	sp, #8
 8009614:	f85d eb04 	ldr.w	lr, [sp], #4
 8009618:	b003      	add	sp, #12
 800961a:	4770      	bx	lr
 800961c:	20000064 	.word	0x20000064

08009620 <__swhatbuf_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	2900      	cmp	r1, #0
 800962a:	b096      	sub	sp, #88	; 0x58
 800962c:	4615      	mov	r5, r2
 800962e:	461e      	mov	r6, r3
 8009630:	da0d      	bge.n	800964e <__swhatbuf_r+0x2e>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	bf0c      	ite	eq
 800963e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009642:	2340      	movne	r3, #64	; 0x40
 8009644:	2000      	movs	r0, #0
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	b016      	add	sp, #88	; 0x58
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	466a      	mov	r2, sp
 8009650:	f000 f848 	bl	80096e4 <_fstat_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	dbec      	blt.n	8009632 <__swhatbuf_r+0x12>
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800965e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009662:	4259      	negs	r1, r3
 8009664:	4159      	adcs	r1, r3
 8009666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800966a:	e7eb      	b.n	8009644 <__swhatbuf_r+0x24>

0800966c <__smakebuf_r>:
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009670:	079d      	lsls	r5, r3, #30
 8009672:	4606      	mov	r6, r0
 8009674:	460c      	mov	r4, r1
 8009676:	d507      	bpl.n	8009688 <__smakebuf_r+0x1c>
 8009678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	2301      	movs	r3, #1
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	b002      	add	sp, #8
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	ab01      	add	r3, sp, #4
 800968a:	466a      	mov	r2, sp
 800968c:	f7ff ffc8 	bl	8009620 <__swhatbuf_r>
 8009690:	9900      	ldr	r1, [sp, #0]
 8009692:	4605      	mov	r5, r0
 8009694:	4630      	mov	r0, r6
 8009696:	f7fd f8b9 	bl	800680c <_malloc_r>
 800969a:	b948      	cbnz	r0, 80096b0 <__smakebuf_r+0x44>
 800969c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a0:	059a      	lsls	r2, r3, #22
 80096a2:	d4ef      	bmi.n	8009684 <__smakebuf_r+0x18>
 80096a4:	f023 0303 	bic.w	r3, r3, #3
 80096a8:	f043 0302 	orr.w	r3, r3, #2
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	e7e3      	b.n	8009678 <__smakebuf_r+0xc>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	6020      	str	r0, [r4, #0]
 80096b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	9b00      	ldr	r3, [sp, #0]
 80096bc:	6163      	str	r3, [r4, #20]
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	6120      	str	r0, [r4, #16]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x70>
 80096c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f81d 	bl	8009708 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x70>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	431d      	orrs	r5, r3
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cf      	b.n	8009684 <__smakebuf_r+0x18>

080096e4 <_fstat_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_fstat_r+0x20>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	f7f8 fa95 	bl	8001c20 <_fstat>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d102      	bne.n	8009700 <_fstat_r+0x1c>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	b103      	cbz	r3, 8009700 <_fstat_r+0x1c>
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	bf00      	nop
 8009704:	20000424 	.word	0x20000424

08009708 <_isatty_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	; (8009724 <_isatty_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f8 fa94 	bl	8001c40 <_isatty>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_isatty_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_isatty_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	20000424 	.word	0x20000424

08009728 <abort>:
 8009728:	b508      	push	{r3, lr}
 800972a:	2006      	movs	r0, #6
 800972c:	f000 fa0c 	bl	8009b48 <raise>
 8009730:	2001      	movs	r0, #1
 8009732:	f7f8 fa17 	bl	8001b64 <_exit>

08009736 <_malloc_usable_size_r>:
 8009736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800973a:	1f18      	subs	r0, r3, #4
 800973c:	2b00      	cmp	r3, #0
 800973e:	bfbc      	itt	lt
 8009740:	580b      	ldrlt	r3, [r1, r0]
 8009742:	18c0      	addlt	r0, r0, r3
 8009744:	4770      	bx	lr

08009746 <__sfputc_r>:
 8009746:	6893      	ldr	r3, [r2, #8]
 8009748:	3b01      	subs	r3, #1
 800974a:	2b00      	cmp	r3, #0
 800974c:	b410      	push	{r4}
 800974e:	6093      	str	r3, [r2, #8]
 8009750:	da08      	bge.n	8009764 <__sfputc_r+0x1e>
 8009752:	6994      	ldr	r4, [r2, #24]
 8009754:	42a3      	cmp	r3, r4
 8009756:	db01      	blt.n	800975c <__sfputc_r+0x16>
 8009758:	290a      	cmp	r1, #10
 800975a:	d103      	bne.n	8009764 <__sfputc_r+0x1e>
 800975c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009760:	f000 b934 	b.w	80099cc <__swbuf_r>
 8009764:	6813      	ldr	r3, [r2, #0]
 8009766:	1c58      	adds	r0, r3, #1
 8009768:	6010      	str	r0, [r2, #0]
 800976a:	7019      	strb	r1, [r3, #0]
 800976c:	4608      	mov	r0, r1
 800976e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009772:	4770      	bx	lr

08009774 <__sfputs_r>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	4614      	mov	r4, r2
 800977c:	18d5      	adds	r5, r2, r3
 800977e:	42ac      	cmp	r4, r5
 8009780:	d101      	bne.n	8009786 <__sfputs_r+0x12>
 8009782:	2000      	movs	r0, #0
 8009784:	e007      	b.n	8009796 <__sfputs_r+0x22>
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	463a      	mov	r2, r7
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff ffda 	bl	8009746 <__sfputc_r>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	d1f3      	bne.n	800977e <__sfputs_r+0xa>
 8009796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009798 <_vfiprintf_r>:
 8009798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800979c:	460d      	mov	r5, r1
 800979e:	b09d      	sub	sp, #116	; 0x74
 80097a0:	4614      	mov	r4, r2
 80097a2:	4698      	mov	r8, r3
 80097a4:	4606      	mov	r6, r0
 80097a6:	b118      	cbz	r0, 80097b0 <_vfiprintf_r+0x18>
 80097a8:	6a03      	ldr	r3, [r0, #32]
 80097aa:	b90b      	cbnz	r3, 80097b0 <_vfiprintf_r+0x18>
 80097ac:	f7fb ffd8 	bl	8005760 <__sinit>
 80097b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b2:	07d9      	lsls	r1, r3, #31
 80097b4:	d405      	bmi.n	80097c2 <_vfiprintf_r+0x2a>
 80097b6:	89ab      	ldrh	r3, [r5, #12]
 80097b8:	059a      	lsls	r2, r3, #22
 80097ba:	d402      	bmi.n	80097c2 <_vfiprintf_r+0x2a>
 80097bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097be:	f7fc f92c 	bl	8005a1a <__retarget_lock_acquire_recursive>
 80097c2:	89ab      	ldrh	r3, [r5, #12]
 80097c4:	071b      	lsls	r3, r3, #28
 80097c6:	d501      	bpl.n	80097cc <_vfiprintf_r+0x34>
 80097c8:	692b      	ldr	r3, [r5, #16]
 80097ca:	b99b      	cbnz	r3, 80097f4 <_vfiprintf_r+0x5c>
 80097cc:	4629      	mov	r1, r5
 80097ce:	4630      	mov	r0, r6
 80097d0:	f000 f93a 	bl	8009a48 <__swsetup_r>
 80097d4:	b170      	cbz	r0, 80097f4 <_vfiprintf_r+0x5c>
 80097d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d8:	07dc      	lsls	r4, r3, #31
 80097da:	d504      	bpl.n	80097e6 <_vfiprintf_r+0x4e>
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	b01d      	add	sp, #116	; 0x74
 80097e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e6:	89ab      	ldrh	r3, [r5, #12]
 80097e8:	0598      	lsls	r0, r3, #22
 80097ea:	d4f7      	bmi.n	80097dc <_vfiprintf_r+0x44>
 80097ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ee:	f7fc f915 	bl	8005a1c <__retarget_lock_release_recursive>
 80097f2:	e7f3      	b.n	80097dc <_vfiprintf_r+0x44>
 80097f4:	2300      	movs	r3, #0
 80097f6:	9309      	str	r3, [sp, #36]	; 0x24
 80097f8:	2320      	movs	r3, #32
 80097fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009802:	2330      	movs	r3, #48	; 0x30
 8009804:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80099b8 <_vfiprintf_r+0x220>
 8009808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800980c:	f04f 0901 	mov.w	r9, #1
 8009810:	4623      	mov	r3, r4
 8009812:	469a      	mov	sl, r3
 8009814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009818:	b10a      	cbz	r2, 800981e <_vfiprintf_r+0x86>
 800981a:	2a25      	cmp	r2, #37	; 0x25
 800981c:	d1f9      	bne.n	8009812 <_vfiprintf_r+0x7a>
 800981e:	ebba 0b04 	subs.w	fp, sl, r4
 8009822:	d00b      	beq.n	800983c <_vfiprintf_r+0xa4>
 8009824:	465b      	mov	r3, fp
 8009826:	4622      	mov	r2, r4
 8009828:	4629      	mov	r1, r5
 800982a:	4630      	mov	r0, r6
 800982c:	f7ff ffa2 	bl	8009774 <__sfputs_r>
 8009830:	3001      	adds	r0, #1
 8009832:	f000 80a9 	beq.w	8009988 <_vfiprintf_r+0x1f0>
 8009836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009838:	445a      	add	r2, fp
 800983a:	9209      	str	r2, [sp, #36]	; 0x24
 800983c:	f89a 3000 	ldrb.w	r3, [sl]
 8009840:	2b00      	cmp	r3, #0
 8009842:	f000 80a1 	beq.w	8009988 <_vfiprintf_r+0x1f0>
 8009846:	2300      	movs	r3, #0
 8009848:	f04f 32ff 	mov.w	r2, #4294967295
 800984c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009850:	f10a 0a01 	add.w	sl, sl, #1
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	9307      	str	r3, [sp, #28]
 8009858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800985c:	931a      	str	r3, [sp, #104]	; 0x68
 800985e:	4654      	mov	r4, sl
 8009860:	2205      	movs	r2, #5
 8009862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009866:	4854      	ldr	r0, [pc, #336]	; (80099b8 <_vfiprintf_r+0x220>)
 8009868:	f7f6 fcb2 	bl	80001d0 <memchr>
 800986c:	9a04      	ldr	r2, [sp, #16]
 800986e:	b9d8      	cbnz	r0, 80098a8 <_vfiprintf_r+0x110>
 8009870:	06d1      	lsls	r1, r2, #27
 8009872:	bf44      	itt	mi
 8009874:	2320      	movmi	r3, #32
 8009876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800987a:	0713      	lsls	r3, r2, #28
 800987c:	bf44      	itt	mi
 800987e:	232b      	movmi	r3, #43	; 0x2b
 8009880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009884:	f89a 3000 	ldrb.w	r3, [sl]
 8009888:	2b2a      	cmp	r3, #42	; 0x2a
 800988a:	d015      	beq.n	80098b8 <_vfiprintf_r+0x120>
 800988c:	9a07      	ldr	r2, [sp, #28]
 800988e:	4654      	mov	r4, sl
 8009890:	2000      	movs	r0, #0
 8009892:	f04f 0c0a 	mov.w	ip, #10
 8009896:	4621      	mov	r1, r4
 8009898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800989c:	3b30      	subs	r3, #48	; 0x30
 800989e:	2b09      	cmp	r3, #9
 80098a0:	d94d      	bls.n	800993e <_vfiprintf_r+0x1a6>
 80098a2:	b1b0      	cbz	r0, 80098d2 <_vfiprintf_r+0x13a>
 80098a4:	9207      	str	r2, [sp, #28]
 80098a6:	e014      	b.n	80098d2 <_vfiprintf_r+0x13a>
 80098a8:	eba0 0308 	sub.w	r3, r0, r8
 80098ac:	fa09 f303 	lsl.w	r3, r9, r3
 80098b0:	4313      	orrs	r3, r2
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	46a2      	mov	sl, r4
 80098b6:	e7d2      	b.n	800985e <_vfiprintf_r+0xc6>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	1d19      	adds	r1, r3, #4
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	9103      	str	r1, [sp, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfbb      	ittet	lt
 80098c4:	425b      	neglt	r3, r3
 80098c6:	f042 0202 	orrlt.w	r2, r2, #2
 80098ca:	9307      	strge	r3, [sp, #28]
 80098cc:	9307      	strlt	r3, [sp, #28]
 80098ce:	bfb8      	it	lt
 80098d0:	9204      	strlt	r2, [sp, #16]
 80098d2:	7823      	ldrb	r3, [r4, #0]
 80098d4:	2b2e      	cmp	r3, #46	; 0x2e
 80098d6:	d10c      	bne.n	80098f2 <_vfiprintf_r+0x15a>
 80098d8:	7863      	ldrb	r3, [r4, #1]
 80098da:	2b2a      	cmp	r3, #42	; 0x2a
 80098dc:	d134      	bne.n	8009948 <_vfiprintf_r+0x1b0>
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	1d1a      	adds	r2, r3, #4
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	9203      	str	r2, [sp, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	bfb8      	it	lt
 80098ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80098ee:	3402      	adds	r4, #2
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80099c8 <_vfiprintf_r+0x230>
 80098f6:	7821      	ldrb	r1, [r4, #0]
 80098f8:	2203      	movs	r2, #3
 80098fa:	4650      	mov	r0, sl
 80098fc:	f7f6 fc68 	bl	80001d0 <memchr>
 8009900:	b138      	cbz	r0, 8009912 <_vfiprintf_r+0x17a>
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	eba0 000a 	sub.w	r0, r0, sl
 8009908:	2240      	movs	r2, #64	; 0x40
 800990a:	4082      	lsls	r2, r0
 800990c:	4313      	orrs	r3, r2
 800990e:	3401      	adds	r4, #1
 8009910:	9304      	str	r3, [sp, #16]
 8009912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009916:	4829      	ldr	r0, [pc, #164]	; (80099bc <_vfiprintf_r+0x224>)
 8009918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800991c:	2206      	movs	r2, #6
 800991e:	f7f6 fc57 	bl	80001d0 <memchr>
 8009922:	2800      	cmp	r0, #0
 8009924:	d03f      	beq.n	80099a6 <_vfiprintf_r+0x20e>
 8009926:	4b26      	ldr	r3, [pc, #152]	; (80099c0 <_vfiprintf_r+0x228>)
 8009928:	bb1b      	cbnz	r3, 8009972 <_vfiprintf_r+0x1da>
 800992a:	9b03      	ldr	r3, [sp, #12]
 800992c:	3307      	adds	r3, #7
 800992e:	f023 0307 	bic.w	r3, r3, #7
 8009932:	3308      	adds	r3, #8
 8009934:	9303      	str	r3, [sp, #12]
 8009936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009938:	443b      	add	r3, r7
 800993a:	9309      	str	r3, [sp, #36]	; 0x24
 800993c:	e768      	b.n	8009810 <_vfiprintf_r+0x78>
 800993e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009942:	460c      	mov	r4, r1
 8009944:	2001      	movs	r0, #1
 8009946:	e7a6      	b.n	8009896 <_vfiprintf_r+0xfe>
 8009948:	2300      	movs	r3, #0
 800994a:	3401      	adds	r4, #1
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	4619      	mov	r1, r3
 8009950:	f04f 0c0a 	mov.w	ip, #10
 8009954:	4620      	mov	r0, r4
 8009956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800995a:	3a30      	subs	r2, #48	; 0x30
 800995c:	2a09      	cmp	r2, #9
 800995e:	d903      	bls.n	8009968 <_vfiprintf_r+0x1d0>
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0c6      	beq.n	80098f2 <_vfiprintf_r+0x15a>
 8009964:	9105      	str	r1, [sp, #20]
 8009966:	e7c4      	b.n	80098f2 <_vfiprintf_r+0x15a>
 8009968:	fb0c 2101 	mla	r1, ip, r1, r2
 800996c:	4604      	mov	r4, r0
 800996e:	2301      	movs	r3, #1
 8009970:	e7f0      	b.n	8009954 <_vfiprintf_r+0x1bc>
 8009972:	ab03      	add	r3, sp, #12
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	462a      	mov	r2, r5
 8009978:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <_vfiprintf_r+0x22c>)
 800997a:	a904      	add	r1, sp, #16
 800997c:	4630      	mov	r0, r6
 800997e:	f7fb f88d 	bl	8004a9c <_printf_float>
 8009982:	4607      	mov	r7, r0
 8009984:	1c78      	adds	r0, r7, #1
 8009986:	d1d6      	bne.n	8009936 <_vfiprintf_r+0x19e>
 8009988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d405      	bmi.n	800999a <_vfiprintf_r+0x202>
 800998e:	89ab      	ldrh	r3, [r5, #12]
 8009990:	059a      	lsls	r2, r3, #22
 8009992:	d402      	bmi.n	800999a <_vfiprintf_r+0x202>
 8009994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009996:	f7fc f841 	bl	8005a1c <__retarget_lock_release_recursive>
 800999a:	89ab      	ldrh	r3, [r5, #12]
 800999c:	065b      	lsls	r3, r3, #25
 800999e:	f53f af1d 	bmi.w	80097dc <_vfiprintf_r+0x44>
 80099a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099a4:	e71c      	b.n	80097e0 <_vfiprintf_r+0x48>
 80099a6:	ab03      	add	r3, sp, #12
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	462a      	mov	r2, r5
 80099ac:	4b05      	ldr	r3, [pc, #20]	; (80099c4 <_vfiprintf_r+0x22c>)
 80099ae:	a904      	add	r1, sp, #16
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7fb fb17 	bl	8004fe4 <_printf_i>
 80099b6:	e7e4      	b.n	8009982 <_vfiprintf_r+0x1ea>
 80099b8:	0800aa11 	.word	0x0800aa11
 80099bc:	0800aa1b 	.word	0x0800aa1b
 80099c0:	08004a9d 	.word	0x08004a9d
 80099c4:	08009775 	.word	0x08009775
 80099c8:	0800aa17 	.word	0x0800aa17

080099cc <__swbuf_r>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	460e      	mov	r6, r1
 80099d0:	4614      	mov	r4, r2
 80099d2:	4605      	mov	r5, r0
 80099d4:	b118      	cbz	r0, 80099de <__swbuf_r+0x12>
 80099d6:	6a03      	ldr	r3, [r0, #32]
 80099d8:	b90b      	cbnz	r3, 80099de <__swbuf_r+0x12>
 80099da:	f7fb fec1 	bl	8005760 <__sinit>
 80099de:	69a3      	ldr	r3, [r4, #24]
 80099e0:	60a3      	str	r3, [r4, #8]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	071a      	lsls	r2, r3, #28
 80099e6:	d525      	bpl.n	8009a34 <__swbuf_r+0x68>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	b31b      	cbz	r3, 8009a34 <__swbuf_r+0x68>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	6922      	ldr	r2, [r4, #16]
 80099f0:	1a98      	subs	r0, r3, r2
 80099f2:	6963      	ldr	r3, [r4, #20]
 80099f4:	b2f6      	uxtb	r6, r6
 80099f6:	4283      	cmp	r3, r0
 80099f8:	4637      	mov	r7, r6
 80099fa:	dc04      	bgt.n	8009a06 <__swbuf_r+0x3a>
 80099fc:	4621      	mov	r1, r4
 80099fe:	4628      	mov	r0, r5
 8009a00:	f7fe ffb6 	bl	8008970 <_fflush_r>
 8009a04:	b9e0      	cbnz	r0, 8009a40 <__swbuf_r+0x74>
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	60a3      	str	r3, [r4, #8]
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	1c5a      	adds	r2, r3, #1
 8009a10:	6022      	str	r2, [r4, #0]
 8009a12:	701e      	strb	r6, [r3, #0]
 8009a14:	6962      	ldr	r2, [r4, #20]
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d004      	beq.n	8009a26 <__swbuf_r+0x5a>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	07db      	lsls	r3, r3, #31
 8009a20:	d506      	bpl.n	8009a30 <__swbuf_r+0x64>
 8009a22:	2e0a      	cmp	r6, #10
 8009a24:	d104      	bne.n	8009a30 <__swbuf_r+0x64>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4628      	mov	r0, r5
 8009a2a:	f7fe ffa1 	bl	8008970 <_fflush_r>
 8009a2e:	b938      	cbnz	r0, 8009a40 <__swbuf_r+0x74>
 8009a30:	4638      	mov	r0, r7
 8009a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a34:	4621      	mov	r1, r4
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 f806 	bl	8009a48 <__swsetup_r>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d0d5      	beq.n	80099ec <__swbuf_r+0x20>
 8009a40:	f04f 37ff 	mov.w	r7, #4294967295
 8009a44:	e7f4      	b.n	8009a30 <__swbuf_r+0x64>
	...

08009a48 <__swsetup_r>:
 8009a48:	b538      	push	{r3, r4, r5, lr}
 8009a4a:	4b2a      	ldr	r3, [pc, #168]	; (8009af4 <__swsetup_r+0xac>)
 8009a4c:	4605      	mov	r5, r0
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	460c      	mov	r4, r1
 8009a52:	b118      	cbz	r0, 8009a5c <__swsetup_r+0x14>
 8009a54:	6a03      	ldr	r3, [r0, #32]
 8009a56:	b90b      	cbnz	r3, 8009a5c <__swsetup_r+0x14>
 8009a58:	f7fb fe82 	bl	8005760 <__sinit>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a62:	0718      	lsls	r0, r3, #28
 8009a64:	d422      	bmi.n	8009aac <__swsetup_r+0x64>
 8009a66:	06d9      	lsls	r1, r3, #27
 8009a68:	d407      	bmi.n	8009a7a <__swsetup_r+0x32>
 8009a6a:	2309      	movs	r3, #9
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	e034      	b.n	8009ae4 <__swsetup_r+0x9c>
 8009a7a:	0758      	lsls	r0, r3, #29
 8009a7c:	d512      	bpl.n	8009aa4 <__swsetup_r+0x5c>
 8009a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a80:	b141      	cbz	r1, 8009a94 <__swsetup_r+0x4c>
 8009a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a86:	4299      	cmp	r1, r3
 8009a88:	d002      	beq.n	8009a90 <__swsetup_r+0x48>
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f7fc fe4a 	bl	8006724 <_free_r>
 8009a90:	2300      	movs	r3, #0
 8009a92:	6363      	str	r3, [r4, #52]	; 0x34
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6063      	str	r3, [r4, #4]
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	6023      	str	r3, [r4, #0]
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f043 0308 	orr.w	r3, r3, #8
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	b94b      	cbnz	r3, 8009ac4 <__swsetup_r+0x7c>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aba:	d003      	beq.n	8009ac4 <__swsetup_r+0x7c>
 8009abc:	4621      	mov	r1, r4
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f7ff fdd4 	bl	800966c <__smakebuf_r>
 8009ac4:	89a0      	ldrh	r0, [r4, #12]
 8009ac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aca:	f010 0301 	ands.w	r3, r0, #1
 8009ace:	d00a      	beq.n	8009ae6 <__swsetup_r+0x9e>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60a3      	str	r3, [r4, #8]
 8009ad4:	6963      	ldr	r3, [r4, #20]
 8009ad6:	425b      	negs	r3, r3
 8009ad8:	61a3      	str	r3, [r4, #24]
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	b943      	cbnz	r3, 8009af0 <__swsetup_r+0xa8>
 8009ade:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ae2:	d1c4      	bne.n	8009a6e <__swsetup_r+0x26>
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}
 8009ae6:	0781      	lsls	r1, r0, #30
 8009ae8:	bf58      	it	pl
 8009aea:	6963      	ldrpl	r3, [r4, #20]
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	e7f4      	b.n	8009ada <__swsetup_r+0x92>
 8009af0:	2000      	movs	r0, #0
 8009af2:	e7f7      	b.n	8009ae4 <__swsetup_r+0x9c>
 8009af4:	20000064 	.word	0x20000064

08009af8 <_raise_r>:
 8009af8:	291f      	cmp	r1, #31
 8009afa:	b538      	push	{r3, r4, r5, lr}
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	d904      	bls.n	8009b0c <_raise_r+0x14>
 8009b02:	2316      	movs	r3, #22
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0a:	bd38      	pop	{r3, r4, r5, pc}
 8009b0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009b0e:	b112      	cbz	r2, 8009b16 <_raise_r+0x1e>
 8009b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b14:	b94b      	cbnz	r3, 8009b2a <_raise_r+0x32>
 8009b16:	4620      	mov	r0, r4
 8009b18:	f000 f830 	bl	8009b7c <_getpid_r>
 8009b1c:	462a      	mov	r2, r5
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4620      	mov	r0, r4
 8009b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b26:	f000 b817 	b.w	8009b58 <_kill_r>
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d00a      	beq.n	8009b44 <_raise_r+0x4c>
 8009b2e:	1c59      	adds	r1, r3, #1
 8009b30:	d103      	bne.n	8009b3a <_raise_r+0x42>
 8009b32:	2316      	movs	r3, #22
 8009b34:	6003      	str	r3, [r0, #0]
 8009b36:	2001      	movs	r0, #1
 8009b38:	e7e7      	b.n	8009b0a <_raise_r+0x12>
 8009b3a:	2400      	movs	r4, #0
 8009b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b40:	4628      	mov	r0, r5
 8009b42:	4798      	blx	r3
 8009b44:	2000      	movs	r0, #0
 8009b46:	e7e0      	b.n	8009b0a <_raise_r+0x12>

08009b48 <raise>:
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <raise+0xc>)
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f7ff bfd3 	b.w	8009af8 <_raise_r>
 8009b52:	bf00      	nop
 8009b54:	20000064 	.word	0x20000064

08009b58 <_kill_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	; (8009b78 <_kill_r+0x20>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	4611      	mov	r1, r2
 8009b64:	602b      	str	r3, [r5, #0]
 8009b66:	f7f7 ffed 	bl	8001b44 <_kill>
 8009b6a:	1c43      	adds	r3, r0, #1
 8009b6c:	d102      	bne.n	8009b74 <_kill_r+0x1c>
 8009b6e:	682b      	ldr	r3, [r5, #0]
 8009b70:	b103      	cbz	r3, 8009b74 <_kill_r+0x1c>
 8009b72:	6023      	str	r3, [r4, #0]
 8009b74:	bd38      	pop	{r3, r4, r5, pc}
 8009b76:	bf00      	nop
 8009b78:	20000424 	.word	0x20000424

08009b7c <_getpid_r>:
 8009b7c:	f7f7 bfda 	b.w	8001b34 <_getpid>

08009b80 <_init>:
 8009b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b82:	bf00      	nop
 8009b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b86:	bc08      	pop	{r3}
 8009b88:	469e      	mov	lr, r3
 8009b8a:	4770      	bx	lr

08009b8c <_fini>:
 8009b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8e:	bf00      	nop
 8009b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b92:	bc08      	pop	{r3}
 8009b94:	469e      	mov	lr, r3
 8009b96:	4770      	bx	lr
